
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e408  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800e598  0800e598  0001e598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e89c  0800e89c  00021598  2**0
                  CONTENTS
  4 .ARM          00000008  0800e89c  0800e89c  0001e89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8a4  0800e8a4  00021598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8a4  0800e8a4  0001e8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8a8  0800e8a8  0001e8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001598  20000000  0800e8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001398  20001598  0800fe44  00021598  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002930  0800fe44  00022930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021598  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045924  00000000  00000000  000215c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006fa8  00000000  00000000  00066eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a88  00000000  00000000  0006de98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001780  00000000  00000000  0006f920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b7ba  00000000  00000000  000710a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002aff6  00000000  00000000  0009c85a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdb07  00000000  00000000  000c7850  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00195357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000770c  00000000  00000000  001953d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001598 	.word	0x20001598
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e580 	.word	0x0800e580

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000159c 	.word	0x2000159c
 80001cc:	0800e580 	.word	0x0800e580

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DATA_LOGGER_Init>:
static uint8_t name_pitch_gyro_raw[] = "Gyro raw PITCH";
static uint8_t name_yaw_gyro_raw[] = "Gyro raw YAW";
static uint8_t name_config_request[] = "Send Config";


void DATA_LOGGER_Init(system_t * sys_){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	sys = sys_;
 8000f50:	4a71      	ldr	r2, [pc, #452]	; (8001118 <DATA_LOGGER_Init+0x1d0>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]

	//Définitions des data
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle, 		sizeof(name_roll_angle)-1, 		FALSE);
 8000f56:	4b71      	ldr	r3, [pc, #452]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	4b6e      	ldr	r3, [pc, #440]	; (8001118 <DATA_LOGGER_Init+0x1d0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000f64:	4a6d      	ldr	r2, [pc, #436]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000f66:	6053      	str	r3, [r2, #4]
 8000f68:	4b6c      	ldr	r3, [pc, #432]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000f6a:	2229      	movs	r2, #41	; 0x29
 8000f6c:	725a      	strb	r2, [r3, #9]
 8000f6e:	4b6b      	ldr	r3, [pc, #428]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000f70:	4a6b      	ldr	r2, [pc, #428]	; (8001120 <DATA_LOGGER_Init+0x1d8>)
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4b69      	ldr	r3, [pc, #420]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000f76:	220a      	movs	r2, #10
 8000f78:	741a      	strb	r2, [r3, #16]
 8000f7a:	4b68      	ldr	r3, [pc, #416]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle, 		sizeof(name_pitch_angle)-1, 	FALSE);
 8000f80:	4b66      	ldr	r3, [pc, #408]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
 8000f88:	4b63      	ldr	r3, [pc, #396]	; (8001118 <DATA_LOGGER_Init+0x1d0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000f90:	4a62      	ldr	r2, [pc, #392]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b61      	ldr	r3, [pc, #388]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000f96:	2229      	movs	r2, #41	; 0x29
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f9c:	4b5f      	ldr	r3, [pc, #380]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000f9e:	4a61      	ldr	r2, [pc, #388]	; (8001124 <DATA_LOGGER_Init+0x1dc>)
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	4b5e      	ldr	r3, [pc, #376]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000faa:	4b5c      	ldr	r3, [pc, #368]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 			DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 		sizeof(name_roll_gyro)-1, 		TRUE);
 8000fb0:	4b5a      	ldr	r3, [pc, #360]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000fb8:	4b57      	ldr	r3, [pc, #348]	; (8001118 <DATA_LOGGER_Init+0x1d0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	333c      	adds	r3, #60	; 0x3c
 8000fbe:	4a57      	ldr	r2, [pc, #348]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000fc0:	6353      	str	r3, [r2, #52]	; 0x34
 8000fc2:	4b56      	ldr	r3, [pc, #344]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000fc4:	2229      	movs	r2, #41	; 0x29
 8000fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000fca:	4b54      	ldr	r3, [pc, #336]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000fcc:	4a56      	ldr	r2, [pc, #344]	; (8001128 <DATA_LOGGER_Init+0x1e0>)
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000fd2:	2209      	movs	r2, #9
 8000fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000fd8:	4b50      	ldr	r3, [pc, #320]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 			DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 		sizeof(name_pitch_gyro)-1, 		FALSE);
 8000fde:	4b4f      	ldr	r3, [pc, #316]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <DATA_LOGGER_Init+0x1d0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	333c      	adds	r3, #60	; 0x3c
 8000fec:	4a4b      	ldr	r2, [pc, #300]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000fee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000ff2:	2229      	movs	r2, #41	; 0x29
 8000ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000ff8:	4b48      	ldr	r3, [pc, #288]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8000ffa:	4a4c      	ldr	r2, [pc, #304]	; (800112c <DATA_LOGGER_Init+0x1e4>)
 8000ffc:	655a      	str	r2, [r3, #84]	; 0x54
 8000ffe:	4b47      	ldr	r3, [pc, #284]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001000:	220a      	movs	r2, #10
 8001002:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001006:	4b45      	ldr	r3, [pc, #276]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001008:	2200      	movs	r2, #0
 800100a:	65da      	str	r2, [r3, #92]	; 0x5c
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 				DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			sizeof(name_yaw_gyro)-1, 		FALSE);
 800100c:	4b43      	ldr	r3, [pc, #268]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 800100e:	2204      	movs	r2, #4
 8001010:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001014:	4b40      	ldr	r3, [pc, #256]	; (8001118 <DATA_LOGGER_Init+0x1d0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3340      	adds	r3, #64	; 0x40
 800101a:	4a40      	ldr	r2, [pc, #256]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 800101c:	6653      	str	r3, [r2, #100]	; 0x64
 800101e:	4b3f      	ldr	r3, [pc, #252]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001020:	2229      	movs	r2, #41	; 0x29
 8001022:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001026:	4b3d      	ldr	r3, [pc, #244]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001028:	4a41      	ldr	r2, [pc, #260]	; (8001130 <DATA_LOGGER_Init+0x1e8>)
 800102a:	66da      	str	r2, [r3, #108]	; 0x6c
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 800102e:	2208      	movs	r2, #8
 8001030:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001034:	4b39      	ldr	r3, [pc, #228]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001036:	2200      	movs	r2, #0
 8001038:	675a      	str	r2, [r3, #116]	; 0x74
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 				DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 	sizeof(name_roll_gyro_raw)-1, 	TRUE);
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 800103c:	2205      	movs	r2, #5
 800103e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001042:	4b35      	ldr	r3, [pc, #212]	; (8001118 <DATA_LOGGER_Init+0x1d0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001048:	3304      	adds	r3, #4
 800104a:	4a34      	ldr	r2, [pc, #208]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 800104c:	67d3      	str	r3, [r2, #124]	; 0x7c
 800104e:	4b33      	ldr	r3, [pc, #204]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001050:	2229      	movs	r2, #41	; 0x29
 8001052:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001058:	4a36      	ldr	r2, [pc, #216]	; (8001134 <DATA_LOGGER_Init+0x1ec>)
 800105a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800105e:	4b2f      	ldr	r3, [pc, #188]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001060:	220d      	movs	r2, #13
 8001062:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001068:	2201      	movs	r2, #1
 800106a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 			DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,	sizeof(name_pitch_gyro_raw)-1, 	FALSE);
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001070:	2206      	movs	r2, #6
 8001072:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <DATA_LOGGER_Init+0x1d0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107c:	3304      	adds	r3, #4
 800107e:	4a27      	ldr	r2, [pc, #156]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001080:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001086:	2229      	movs	r2, #41	; 0x29
 8001088:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 800108e:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <DATA_LOGGER_Init+0x1f0>)
 8001090:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001096:	220e      	movs	r2, #14
 8001098:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 				DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 		sizeof(name_yaw_gyro_raw)-1, 	FALSE);
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010a6:	2207      	movs	r2, #7
 80010a8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <DATA_LOGGER_Init+0x1d0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b2:	3308      	adds	r3, #8
 80010b4:	4a19      	ldr	r2, [pc, #100]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010b6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010bc:	2229      	movs	r2, #41	; 0x29
 80010be:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <DATA_LOGGER_Init+0x1f4>)
 80010c6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010cc:	220c      	movs	r2, #12
 80010ce:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, NULL, 															DATA_FORMAT_0B_BUTTON, 		name_config_request, 	sizeof(name_config_request)-1, 	FALSE);
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010dc:	2209      	movs	r2, #9
 80010de:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <DATA_LOGGER_Init+0x1f8>)
 80010f6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 80010fc:	220b      	movs	r2, #11
 80010fe:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <DATA_LOGGER_Init+0x1d4>)
 8001104:	2200      	movs	r2, #0
 8001106:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200015b4 	.word	0x200015b4
 800111c:	200015b8 	.word	0x200015b8
 8001120:	20000004 	.word	0x20000004
 8001124:	20000010 	.word	0x20000010
 8001128:	2000001c 	.word	0x2000001c
 800112c:	20000028 	.word	0x20000028
 8001130:	20000034 	.word	0x20000034
 8001134:	20000040 	.word	0x20000040
 8001138:	20000050 	.word	0x20000050
 800113c:	20000060 	.word	0x20000060
 8001140:	20000070 	.word	0x20000070

08001144 <DATA_LOGGER_Main>:

void DATA_LOGGER_Stop(){
	stop_flag = TRUE;
}

void DATA_LOGGER_Main(void){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

	static data_logger_state_e previous_state 	= LOGGER_TRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 800114a:	4b62      	ldr	r3, [pc, #392]	; (80012d4 <DATA_LOGGER_Main+0x190>)
 800114c:	781a      	ldrb	r2, [r3, #0]
 800114e:	4b62      	ldr	r3, [pc, #392]	; (80012d8 <DATA_LOGGER_Main+0x194>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	bf14      	ite	ne
 8001156:	2301      	movne	r3, #1
 8001158:	2300      	moveq	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	603b      	str	r3, [r7, #0]
	previous_state = state ;
 800115e:	4b5e      	ldr	r3, [pc, #376]	; (80012d8 <DATA_LOGGER_Main+0x194>)
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <DATA_LOGGER_Main+0x190>)
 8001164:	701a      	strb	r2, [r3, #0]

	switch(state){
 8001166:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <DATA_LOGGER_Main+0x194>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d036      	beq.n	80011dc <DATA_LOGGER_Main+0x98>
 800116e:	2b02      	cmp	r3, #2
 8001170:	d07e      	beq.n	8001270 <DATA_LOGGER_Main+0x12c>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d000      	beq.n	8001178 <DATA_LOGGER_Main+0x34>
					}
			}
			break;
	}

}
 8001176:	e0a8      	b.n	80012ca <DATA_LOGGER_Main+0x186>
			if(entrance){
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <DATA_LOGGER_Main+0x42>
				SCHEDULER_reschedule_task(TASK_LOGGER, 2000000);
 800117e:	4957      	ldr	r1, [pc, #348]	; (80012dc <DATA_LOGGER_Main+0x198>)
 8001180:	200d      	movs	r0, #13
 8001182:	f001 ff0b 	bl	8002f9c <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(DATA_ID_CONFIG_REQUEST, tmp);
 8001186:	4956      	ldr	r1, [pc, #344]	; (80012e0 <DATA_LOGGER_Main+0x19c>)
 8001188:	2009      	movs	r0, #9
 800118a:	f000 f9e9 	bl	8001560 <DATA_LOGGER_Get_Data_Config>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b54      	ldr	r3, [pc, #336]	; (80012e4 <DATA_LOGGER_Main+0x1a0>)
 8001194:	701a      	strb	r2, [r3, #0]
			TELEMETRY_Send_Data(tmp, tmp_len);
 8001196:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <DATA_LOGGER_Main+0x1a0>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	4850      	ldr	r0, [pc, #320]	; (80012e0 <DATA_LOGGER_Main+0x19c>)
 800119e:	f004 ffe5 	bl	800616c <TELEMETRY_Send_Data>
			if(start_flag){
 80011a2:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <DATA_LOGGER_Main+0x1a4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 808e 	beq.w	80012c8 <DATA_LOGGER_Main+0x184>
				start_flag = FALSE;
 80011ac:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <DATA_LOGGER_Main+0x1a4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
				stop_flag = FALSE;
 80011b2:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <DATA_LOGGER_Main+0x1a8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
				if(config_not_sent){
 80011b8:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <DATA_LOGGER_Main+0x1ac>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d009      	beq.n	80011d4 <DATA_LOGGER_Main+0x90>
					id_init_counter = 0;
 80011c0:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <DATA_LOGGER_Main+0x1b0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 80011c6:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <DATA_LOGGER_Main+0x1b4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 80011cc:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <DATA_LOGGER_Main+0x194>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
			break;
 80011d2:	e079      	b.n	80012c8 <DATA_LOGGER_Main+0x184>
					state = LOGGER_LOG;
 80011d4:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <DATA_LOGGER_Main+0x194>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
			break;
 80011da:	e075      	b.n	80012c8 <DATA_LOGGER_Main+0x184>
			if(entrance)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00a      	beq.n	80011f8 <DATA_LOGGER_Main+0xb4>
				SCHEDULER_reschedule_task(TASK_LOGGER, 500000);	//On abaisse la fréquence de la tâche pendant l'init
 80011e2:	4946      	ldr	r1, [pc, #280]	; (80012fc <DATA_LOGGER_Main+0x1b8>)
 80011e4:	200d      	movs	r0, #13
 80011e6:	f001 fed9 	bl	8002f9c <SCHEDULER_reschedule_task>
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 80011ea:	e005      	b.n	80011f8 <DATA_LOGGER_Main+0xb4>
				id_init_counter ++ ;
 80011ec:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <DATA_LOGGER_Main+0x1b0>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <DATA_LOGGER_Main+0x1b0>)
 80011f6:	701a      	strb	r2, [r3, #0]
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 80011f8:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <DATA_LOGGER_Main+0x1b0>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4a40      	ldr	r2, [pc, #256]	; (8001300 <DATA_LOGGER_Main+0x1bc>)
 8001200:	460b      	mov	r3, r1
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	440b      	add	r3, r1
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	3314      	adds	r3, #20
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <DATA_LOGGER_Main+0xd6>
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <DATA_LOGGER_Main+0x1b0>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b09      	cmp	r3, #9
 8001218:	d9e8      	bls.n	80011ec <DATA_LOGGER_Main+0xa8>
			if(id_init_counter < DATA_ID_COUNT){
 800121a:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <DATA_LOGGER_Main+0x1b0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b09      	cmp	r3, #9
 8001220:	d817      	bhi.n	8001252 <DATA_LOGGER_Main+0x10e>
				is_any_data_used = TRUE;
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <DATA_LOGGER_Main+0x1b4>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <DATA_LOGGER_Main+0x1b0>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	b2d1      	uxtb	r1, r2
 8001230:	4a30      	ldr	r2, [pc, #192]	; (80012f4 <DATA_LOGGER_Main+0x1b0>)
 8001232:	7011      	strb	r1, [r2, #0]
 8001234:	492a      	ldr	r1, [pc, #168]	; (80012e0 <DATA_LOGGER_Main+0x19c>)
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f992 	bl	8001560 <DATA_LOGGER_Get_Data_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <DATA_LOGGER_Main+0x1a0>)
 8001242:	701a      	strb	r2, [r3, #0]
				TELEMETRY_Send_Data(tmp, tmp_len);
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <DATA_LOGGER_Main+0x1a0>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	4825      	ldr	r0, [pc, #148]	; (80012e0 <DATA_LOGGER_Main+0x19c>)
 800124c:	f004 ff8e 	bl	800616c <TELEMETRY_Send_Data>
			break;
 8001250:	e03b      	b.n	80012ca <DATA_LOGGER_Main+0x186>
				if(is_any_data_used)
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <DATA_LOGGER_Main+0x1b4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d006      	beq.n	8001268 <DATA_LOGGER_Main+0x124>
					config_not_sent = FALSE ;
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <DATA_LOGGER_Main+0x1ac>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
					state = LOGGER_LOG ;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <DATA_LOGGER_Main+0x194>)
 8001262:	2202      	movs	r2, #2
 8001264:	701a      	strb	r2, [r3, #0]
			break;
 8001266:	e030      	b.n	80012ca <DATA_LOGGER_Main+0x186>
					state = LOGGER_IDDLE ;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <DATA_LOGGER_Main+0x194>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
			break;
 800126e:	e02c      	b.n	80012ca <DATA_LOGGER_Main+0x186>
			if(entrance)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <DATA_LOGGER_Main+0x13c>
				SCHEDULER_reschedule_task(TASK_LOGGER, 5000);	//On reprend une fréquence plus importante pour l'envoit en flux continu
 8001276:	f241 3188 	movw	r1, #5000	; 0x1388
 800127a:	200d      	movs	r0, #13
 800127c:	f001 fe8e 	bl	8002f9c <SCHEDULER_reschedule_task>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 8001280:	2300      	movs	r3, #0
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	e01c      	b.n	80012c0 <DATA_LOGGER_Main+0x17c>
				if(data_list[d].used)
 8001286:	79fa      	ldrb	r2, [r7, #7]
 8001288:	491d      	ldr	r1, [pc, #116]	; (8001300 <DATA_LOGGER_Main+0x1bc>)
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	3314      	adds	r3, #20
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00e      	beq.n	80012ba <DATA_LOGGER_Main+0x176>
						tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	4910      	ldr	r1, [pc, #64]	; (80012e0 <DATA_LOGGER_Main+0x19c>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f8ad 	bl	8001400 <DATA_LOGGER_Get_Data_Value>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <DATA_LOGGER_Main+0x1a0>)
 80012ac:	701a      	strb	r2, [r3, #0]
						TELEMETRY_Send_Data(tmp, tmp_len);
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <DATA_LOGGER_Main+0x1a0>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <DATA_LOGGER_Main+0x19c>)
 80012b6:	f004 ff59 	bl	800616c <TELEMETRY_Send_Data>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	3301      	adds	r3, #1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b09      	cmp	r3, #9
 80012c4:	d9df      	bls.n	8001286 <DATA_LOGGER_Main+0x142>
			break;
 80012c6:	e000      	b.n	80012ca <DATA_LOGGER_Main+0x186>
			break;
 80012c8:	bf00      	nop
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000007c 	.word	0x2000007c
 80012d8:	200016a8 	.word	0x200016a8
 80012dc:	001e8480 	.word	0x001e8480
 80012e0:	200016b4 	.word	0x200016b4
 80012e4:	200016c8 	.word	0x200016c8
 80012e8:	200016ac 	.word	0x200016ac
 80012ec:	200016b0 	.word	0x200016b0
 80012f0:	20000000 	.word	0x20000000
 80012f4:	200016c9 	.word	0x200016c9
 80012f8:	200016cc 	.word	0x200016cc
 80012fc:	0007a120 	.word	0x0007a120
 8001300:	200015b8 	.word	0x200015b8

08001304 <DATA_LOGGER_Reception>:

void DATA_LOGGER_Reception(uint8_t * input_buffer){
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	73fb      	strb	r3, [r7, #15]

	switch(data_list[id].format){
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	4938      	ldr	r1, [pc, #224]	; (80013f8 <DATA_LOGGER_Reception+0xf4>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3309      	adds	r3, #9
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b29      	cmp	r3, #41	; 0x29
 8001326:	d860      	bhi.n	80013ea <DATA_LOGGER_Reception+0xe6>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <DATA_LOGGER_Reception+0x2c>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	080013d9 	.word	0x080013d9
 8001334:	080013eb 	.word	0x080013eb
 8001338:	080013eb 	.word	0x080013eb
 800133c:	080013eb 	.word	0x080013eb
 8001340:	080013eb 	.word	0x080013eb
 8001344:	080013eb 	.word	0x080013eb
 8001348:	080013eb 	.word	0x080013eb
 800134c:	080013eb 	.word	0x080013eb
 8001350:	080013eb 	.word	0x080013eb
 8001354:	080013eb 	.word	0x080013eb
 8001358:	080013eb 	.word	0x080013eb
 800135c:	080013eb 	.word	0x080013eb
 8001360:	080013eb 	.word	0x080013eb
 8001364:	080013eb 	.word	0x080013eb
 8001368:	080013eb 	.word	0x080013eb
 800136c:	080013eb 	.word	0x080013eb
 8001370:	080013eb 	.word	0x080013eb
 8001374:	080013eb 	.word	0x080013eb
 8001378:	080013eb 	.word	0x080013eb
 800137c:	080013eb 	.word	0x080013eb
 8001380:	080013eb 	.word	0x080013eb
 8001384:	080013eb 	.word	0x080013eb
 8001388:	080013eb 	.word	0x080013eb
 800138c:	080013eb 	.word	0x080013eb
 8001390:	080013eb 	.word	0x080013eb
 8001394:	080013eb 	.word	0x080013eb
 8001398:	080013eb 	.word	0x080013eb
 800139c:	080013eb 	.word	0x080013eb
 80013a0:	080013eb 	.word	0x080013eb
 80013a4:	080013eb 	.word	0x080013eb
 80013a8:	080013eb 	.word	0x080013eb
 80013ac:	080013eb 	.word	0x080013eb
 80013b0:	080013eb 	.word	0x080013eb
 80013b4:	080013eb 	.word	0x080013eb
 80013b8:	080013eb 	.word	0x080013eb
 80013bc:	080013eb 	.word	0x080013eb
 80013c0:	080013eb 	.word	0x080013eb
 80013c4:	080013eb 	.word	0x080013eb
 80013c8:	080013eb 	.word	0x080013eb
 80013cc:	080013eb 	.word	0x080013eb
 80013d0:	080013eb 	.word	0x080013eb
 80013d4:	080013eb 	.word	0x080013eb
		case DATA_FORMAT_0B_BUTTON:
			//We can create an action for each id
			switch(id)
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	2b09      	cmp	r3, #9
 80013dc:	d000      	beq.n	80013e0 <DATA_LOGGER_Reception+0xdc>
			{
				default:
					break;
 80013de:	e003      	b.n	80013e8 <DATA_LOGGER_Reception+0xe4>
				case DATA_ID_CONFIG_REQUEST:
					start_flag = TRUE;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <DATA_LOGGER_Reception+0xf8>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
					break;
 80013e6:	bf00      	nop
			}
			break;
 80013e8:	e000      	b.n	80013ec <DATA_LOGGER_Reception+0xe8>
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			break;
		default:
			break;
 80013ea:	bf00      	nop

	}
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	200015b8 	.word	0x200015b8
 80013fc:	200016ac 	.word	0x200016ac

08001400 <DATA_LOGGER_Get_Data_Value>:

uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer){
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	73fb      	strb	r3, [r7, #15]

//	uint16_t tmp_u16 = 0;
	int16_t tmp_16 = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	613b      	str	r3, [r7, #16]

	//Premier octet contient l'id
	buffer[0] = id ;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	701a      	strb	r2, [r3, #0]

	//Formatage de la donnée en fonction du type et du format
	switch(data_list[id].format){
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	494e      	ldr	r1, [pc, #312]	; (8001558 <DATA_LOGGER_Get_Data_Value+0x158>)
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	3309      	adds	r3, #9
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	3b14      	subs	r3, #20
 8001430:	2b15      	cmp	r3, #21
 8001432:	d879      	bhi.n	8001528 <DATA_LOGGER_Get_Data_Value+0x128>
 8001434:	a201      	add	r2, pc, #4	; (adr r2, 800143c <DATA_LOGGER_Get_Data_Value+0x3c>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	08001495 	.word	0x08001495
 8001440:	08001529 	.word	0x08001529
 8001444:	08001529 	.word	0x08001529
 8001448:	080014b1 	.word	0x080014b1
 800144c:	08001529 	.word	0x08001529
 8001450:	08001529 	.word	0x08001529
 8001454:	08001529 	.word	0x08001529
 8001458:	08001529 	.word	0x08001529
 800145c:	08001529 	.word	0x08001529
 8001460:	08001529 	.word	0x08001529
 8001464:	08001529 	.word	0x08001529
 8001468:	08001529 	.word	0x08001529
 800146c:	08001529 	.word	0x08001529
 8001470:	08001529 	.word	0x08001529
 8001474:	08001529 	.word	0x08001529
 8001478:	08001529 	.word	0x08001529
 800147c:	08001529 	.word	0x08001529
 8001480:	08001529 	.word	0x08001529
 8001484:	08001529 	.word	0x08001529
 8001488:	08001529 	.word	0x08001529
 800148c:	08001529 	.word	0x08001529
 8001490:	080014e1 	.word	0x080014e1
		case DATA_FORMAT_8B:
			buffer[1] = *data_list[id].data ;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	4930      	ldr	r1, [pc, #192]	; (8001558 <DATA_LOGGER_Get_Data_Value+0x158>)
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	3304      	adds	r3, #4
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	3301      	adds	r3, #1
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	701a      	strb	r2, [r3, #0]
			break;
 80014ae:	e03c      	b.n	800152a <DATA_LOGGER_Get_Data_Value+0x12a>
		case DATA_FORMAT_8B_PWM:
			break;
		case DATA_FORMAT_8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	4929      	ldr	r1, [pc, #164]	; (8001558 <DATA_LOGGER_Get_Data_Value+0x158>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	3304      	adds	r3, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 80014c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80014d2:	793b      	ldrb	r3, [r7, #4]
 80014d4:	b25a      	sxtb	r2, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]
			break;
 80014de:	e024      	b.n	800152a <DATA_LOGGER_Get_Data_Value+0x12a>
		case DATA_FORMAT_8B_FLOAT_1D:
			break;
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	491d      	ldr	r1, [pc, #116]	; (8001558 <DATA_LOGGER_Get_Data_Value+0x158>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	3304      	adds	r3, #4
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 80014f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001506:	ee17 3a90 	vmov	r3, s15
 800150a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800150c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001510:	121b      	asrs	r3, r3, #8
 8001512:	b21a      	sxth	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3301      	adds	r3, #1
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3302      	adds	r3, #2
 8001520:	8afa      	ldrh	r2, [r7, #22]
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]
			break;
 8001526:	e000      	b.n	800152a <DATA_LOGGER_Get_Data_Value+0x12a>
		default:
			break;
 8001528:	bf00      	nop
	}

	//Return the len of data
	return (data_list[id].format / 20) + 1;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	490a      	ldr	r1, [pc, #40]	; (8001558 <DATA_LOGGER_Get_Data_Value+0x158>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	3309      	adds	r3, #9
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <DATA_LOGGER_Get_Data_Value+0x15c>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	b2db      	uxtb	r3, r3
 8001546:	3301      	adds	r3, #1
 8001548:	b2db      	uxtb	r3, r3

}
 800154a:	4618      	mov	r0, r3
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	200015b8 	.word	0x200015b8
 800155c:	cccccccd 	.word	0xcccccccd

08001560 <DATA_LOGGER_Get_Data_Config>:

uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
	//New data so we start with 255
	buffer[0] = 255;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	22ff      	movs	r2, #255	; 0xff
 8001570:	701a      	strb	r2, [r3, #0]
	//Then name len
	buffer[1] = data_list[id].len_name;
 8001572:	79fa      	ldrb	r2, [r7, #7]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	1c59      	adds	r1, r3, #1
 8001578:	481f      	ldr	r0, [pc, #124]	; (80015f8 <DATA_LOGGER_Get_Data_Config+0x98>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4403      	add	r3, r0
 8001584:	3310      	adds	r3, #16
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	700b      	strb	r3, [r1, #0]
	//Then format
	buffer[2] = data_list[id].format ;
 800158a:	79fa      	ldrb	r2, [r7, #7]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	1c99      	adds	r1, r3, #2
 8001590:	4819      	ldr	r0, [pc, #100]	; (80015f8 <DATA_LOGGER_Get_Data_Config+0x98>)
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4403      	add	r3, r0
 800159c:	3309      	adds	r3, #9
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	700b      	strb	r3, [r1, #0]
	//Taille du nom
	buffer[3] = id	 ;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3303      	adds	r3, #3
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	701a      	strb	r2, [r3, #0]
	//Copie du nom
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	1d18      	adds	r0, r3, #4
 80015ae:	79fa      	ldrb	r2, [r7, #7]
 80015b0:	4911      	ldr	r1, [pc, #68]	; (80015f8 <DATA_LOGGER_Get_Data_Config+0x98>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	330c      	adds	r3, #12
 80015be:	681c      	ldr	r4, [r3, #0]
 80015c0:	79fa      	ldrb	r2, [r7, #7]
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <DATA_LOGGER_Get_Data_Config+0x98>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	3310      	adds	r3, #16
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4621      	mov	r1, r4
 80015d6:	f00a f9d1 	bl	800b97c <memcpy>

	//And that s it
	return 4 + data_list[id].len_name ;
 80015da:	79fa      	ldrb	r2, [r7, #7]
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <DATA_LOGGER_Get_Data_Config+0x98>)
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	3310      	adds	r3, #16
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3304      	adds	r3, #4
 80015ee:	b2db      	uxtb	r3, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	200015b8 	.word	0x200015b8

080015fc <DATA_LOGGER_Get_Data>:

data_t * DATA_LOGGER_Get_Data(data_id_e id){
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4a03      	ldr	r2, [pc, #12]	; (8001620 <DATA_LOGGER_Get_Data+0x24>)
 8001612:	4413      	add	r3, r2
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	200015b8 	.word	0x200015b8

08001624 <angle_180>:
static float absolu(float x);
static float acc_correction(float x);
static float angle_180(float x);


static float angle_180(float x){
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 180)
 800162e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001632:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001688 <angle_180+0x64>
 8001636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163e:	dd08      	ble.n	8001652 <angle_180+0x2e>
		x -= 360;
 8001640:	edd7 7a01 	vldr	s15, [r7, #4]
 8001644:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800168c <angle_180+0x68>
 8001648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800164c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001650:	e010      	b.n	8001674 <angle_180+0x50>
	else if( x < -180)
 8001652:	edd7 7a01 	vldr	s15, [r7, #4]
 8001656:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001690 <angle_180+0x6c>
 800165a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	d507      	bpl.n	8001674 <angle_180+0x50>
		x += 360 ;
 8001664:	edd7 7a01 	vldr	s15, [r7, #4]
 8001668:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800168c <angle_180+0x68>
 800166c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001670:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	ee07 3a90 	vmov	s15, r3
}
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	43340000 	.word	0x43340000
 800168c:	43b40000 	.word	0x43b40000
 8001690:	c3340000 	.word	0xc3340000

08001694 <absolu>:

static float absolu(float x){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	ed87 0a01 	vstr	s0, [r7, #4]
	if( x > 0)
 800169e:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	dd02      	ble.n	80016b2 <absolu+0x1e>
		return x ;
 80016ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b0:	e003      	b.n	80016ba <absolu+0x26>
	else
		return -x ;
 80016b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b6:	eef1 7a67 	vneg.f32	s15, s15
}
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <acc_correction>:
static float acc_correction(float x){
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	ed87 0a01 	vstr	s0, [r7, #4]
	x = ( x > 0) ? 180 - x : -180 -x ;
 80016d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016de:	dd06      	ble.n	80016ee <acc_correction+0x26>
 80016e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001714 <acc_correction+0x4c>
 80016e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ec:	e005      	b.n	80016fa <acc_correction+0x32>
 80016ee:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001718 <acc_correction+0x50>
 80016f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fa:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	ee07 3a90 	vmov	s15, r3
}
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	43340000 	.word	0x43340000
 8001718:	c3340000 	.word	0xc3340000

0800171c <ORIENTATION_Init>:

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
	//Link data structures
	orientation->acc = acc ;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
	orientation->gyro = gyro ;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	621a      	str	r2, [r3, #32]
	orientation->angular_velocity = gyro->filtered ;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f103 0208 	add.w	r2, r3, #8
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	60da      	str	r2, [r3, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
	orientation->periode = (float)1 / (float)frequency ;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	orientation->alpha = ORIENTATION_ALPHA ;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <ORIENTATION_Init+0x84>)
 8001762:	631a      	str	r2, [r3, #48]	; 0x30

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	e011      	b.n	800178e <ORIENTATION_Init+0x72>
	{
		orientation->angular_position[x] = 0 ;
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
		orientation->angular_velocity[x] = 0 ;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < 3; x++)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b02      	cmp	r3, #2
 8001792:	ddea      	ble.n	800176a <ORIENTATION_Init+0x4e>
	}

}
 8001794:	bf00      	nop
 8001796:	371c      	adds	r7, #28
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	3f7ff2e5 	.word	0x3f7ff2e5

080017a4 <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	//Just to make the code lighter
	acc_t * acc = orientation->acc ;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	61fb      	str	r3, [r7, #28]
	gyro_t * gyro = orientation->gyro ;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	61bb      	str	r3, [r7, #24]

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ACC_AXE_X] * acc->filtered[ACC_AXE_X] ;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += acc->filtered[ACC_AXE_Y] * acc->filtered[ACC_AXE_Y] ;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80017e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e4:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += acc->filtered[ACC_AXE_Z] * acc->filtered[ACC_AXE_Z] ;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80017f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total = sqrtf(acc_total);
 8001804:	ed97 0a05 	vldr	s0, [r7, #20]
 8001808:	f00c fd6a 	bl	800e2e0 <sqrtf>
 800180c:	ed87 0a05 	vstr	s0, [r7, #20]

	if(acc_total)	//To avoid /0
 8001810:	edd7 7a05 	vldr	s15, [r7, #20]
 8001814:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d069      	beq.n	80018f2 <ORIENTATION_Update+0x14e>
	{
		if(absolu(acc->filtered[ACC_AXE_X]) < acc_total)	//To avoid asin x with x greater than 1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	edd3 7a02 	vldr	s15, [r3, #8]
 8001824:	eeb0 0a67 	vmov.f32	s0, s15
 8001828:	f7ff ff34 	bl	8001694 <absolu>
 800182c:	eeb0 7a40 	vmov.f32	s14, s0
 8001830:	edd7 7a05 	vldr	s15, [r7, #20]
 8001834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	dd15      	ble.n	800186a <ORIENTATION_Update+0xc6>
			orientation->acc_angles[ACC_AXE_Y] = -asinf(acc->filtered[ACC_AXE_X] / acc_total) * 57.32f;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	ed93 7a02 	vldr	s14, [r3, #8]
 8001844:	edd7 7a05 	vldr	s15, [r7, #20]
 8001848:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800184c:	eeb0 0a66 	vmov.f32	s0, s13
 8001850:	f00c fcee 	bl	800e230 <asinf>
 8001854:	eef0 7a40 	vmov.f32	s15, s0
 8001858:	eef1 7a67 	vneg.f32	s15, s15
 800185c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001a30 <ORIENTATION_Update+0x28c>
 8001860:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	edc3 7a05 	vstr	s15, [r3, #20]
		if(absolu(acc->filtered[ACC_AXE_Y]) < acc_total) 	//To avoid asin x with x greater than 1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	f7ff ff0e 	bl	8001694 <absolu>
 8001878:	eeb0 7a40 	vmov.f32	s14, s0
 800187c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	dd13      	ble.n	80018b2 <ORIENTATION_Update+0x10e>
			orientation->acc_angles[ACC_AXE_X] = asinf(acc->filtered[ACC_AXE_Y] / acc_total) * 57.32f;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001890:	edd7 7a05 	vldr	s15, [r7, #20]
 8001894:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001898:	eeb0 0a66 	vmov.f32	s0, s13
 800189c:	f00c fcc8 	bl	800e230 <asinf>
 80018a0:	eeb0 7a40 	vmov.f32	s14, s0
 80018a4:	eddf 7a62 	vldr	s15, [pc, #392]	; 8001a30 <ORIENTATION_Update+0x28c>
 80018a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	edc3 7a04 	vstr	s15, [r3, #16]
		if(acc->filtered[ACC_AXE_Z] < 0)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80018b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	d517      	bpl.n	80018f2 <ORIENTATION_Update+0x14e>
		{
			orientation->acc_angles[ACC_AXE_X] = acc_correction(orientation->acc_angles[ACC_AXE_X]);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80018c8:	eeb0 0a67 	vmov.f32	s0, s15
 80018cc:	f7ff fefc 	bl	80016c8 <acc_correction>
 80018d0:	eef0 7a40 	vmov.f32	s15, s0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	edc3 7a04 	vstr	s15, [r3, #16]
			orientation->acc_angles[ACC_AXE_Y] = acc_correction(orientation->acc_angles[ACC_AXE_Y]);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80018e0:	eeb0 0a67 	vmov.f32	s0, s15
 80018e4:	f7ff fef0 	bl	80016c8 <acc_correction>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edc3 7a05 	vstr	s15, [r3, #20]
		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 80018f2:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <ORIENTATION_Update+0x290>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00f      	beq.n	800191a <ORIENTATION_Update+0x176>
	{
		orientation->angular_position[GYRO_AXE_X] = orientation->acc_angles[ACC_AXE_X] ;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->acc_angles[ACC_AXE_Y] ;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] = 0 ;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
		first_use = FALSE ;
 8001912:	4b48      	ldr	r3, [pc, #288]	; (8001a34 <ORIENTATION_Update+0x290>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];



	}
}
 8001918:	e085      	b.n	8001a26 <ORIENTATION_Update+0x282>
		float dx = gyro->filtered[GYRO_AXE_X] * orientation->periode ;
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192a:	edc7 7a04 	vstr	s15, [r7, #16]
		float dy = gyro->filtered[GYRO_AXE_Y] * orientation->periode ;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	ed93 7a03 	vldr	s14, [r3, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	edc7 7a03 	vstr	s15, [r7, #12]
		float dz = gyro->filtered[GYRO_AXE_Z] * orientation->periode ;
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	ed93 7a04 	vldr	s14, [r3, #16]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001952:	edc7 7a02 	vstr	s15, [r7, #8]
		orientation->angular_position[GYRO_AXE_X] += dx ;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	ed93 7a00 	vldr	s14, [r3]
 800195c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] += dy ;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001970:	edd7 7a03 	vldr	s15, [r7, #12]
 8001974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] += dz ;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	ed93 7a02 	vldr	s14, [r3, #8]
 8001984:	edd7 7a02 	vldr	s15, [r7, #8]
 8001988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	edc3 7a02 	vstr	s15, [r3, #8]
		orientation->angular_position[GYRO_AXE_X] = angle_180(orientation->angular_position[GYRO_AXE_X]);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	eeb0 0a67 	vmov.f32	s0, s15
 800199c:	f7ff fe42 	bl	8001624 <angle_180>
 80019a0:	eef0 7a40 	vmov.f32	s15, s0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = angle_180(orientation->angular_position[GYRO_AXE_Y]);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80019b0:	eeb0 0a67 	vmov.f32	s0, s15
 80019b4:	f7ff fe36 	bl	8001624 <angle_180>
 80019b8:	eef0 7a40 	vmov.f32	s15, s0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_X] = orientation->alpha * orientation->angular_position[GYRO_AXE_X] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_X];
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80019e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001a26:	bf00      	nop
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	426547ae 	.word	0x426547ae
 8001a34:	20000080 	.word	0x20000080

08001a38 <arming_entrance>:
static state_arming_e state = 0;
static uint8_t state_vroum_vroum = 0;
static uint32_t next_change = 0 ;
static float elapsed = 0 ;

void arming_entrance(system_t * sys){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f002 f8bd 	bl	8003bc0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f002 f978 	bl	8003d3c <REGULATION_POSITION_Set_Regulation_Mode>
	sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2228      	movs	r2, #40	; 0x28
 8001a50:	f8a3 2a20 	strh.w	r2, [r3, #2592]	; 0xa20
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_10, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001a54:	2300      	movs	r3, #0
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f000 fac9 	bl	8001ff4 <IHM_Set_Sequences>
	state = ARMING_THROTTLE_LOW ;
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <arming_entrance+0x40>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
	state_vroum_vroum= 0 ;
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <arming_entrance+0x44>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200016d0 	.word	0x200016d0
 8001a7c:	200016d1 	.word	0x200016d1

08001a80 <arming_main>:

void arming_main(system_t * sys, uint32_t time_us){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]



	switch(state){
 8001a8a:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <arming_main+0x1f8>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d019      	beq.n	8001ac6 <arming_main+0x46>
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d036      	beq.n	8001b04 <arming_main+0x84>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d000      	beq.n	8001a9c <arming_main+0x1c>
				default:
					break;
			}
			break;
	}
}
 8001a9a:	e0e8      	b.n	8001c6e <arming_main+0x1ee>
			if(sys->radio.controller.channels[2]<1100){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	f240 424b 	movw	r2, #1099	; 0x44b
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	f200 80dc 	bhi.w	8001c68 <arming_main+0x1e8>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_11, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f000 fa9b 	bl	8001ff4 <IHM_Set_Sequences>
				state = ARMING_STICK_ON_THE_RIGHT;
 8001abe:	4b6e      	ldr	r3, [pc, #440]	; (8001c78 <arming_main+0x1f8>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
			break;
 8001ac4:	e0d0      	b.n	8001c68 <arming_main+0x1e8>
			if(sys->radio.controller.channels[3]>1950 && sys->radio.controller.channels[2]<1100){
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8001acc:	3306      	adds	r3, #6
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	f240 729e 	movw	r2, #1950	; 0x79e
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	f240 80c9 	bls.w	8001c6c <arming_main+0x1ec>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	f240 424b 	movw	r2, #1099	; 0x44b
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	f200 80bf 	bhi.w	8001c6c <arming_main+0x1ec>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_ON, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001aee:	2300      	movs	r3, #0
 8001af0:	2200      	movs	r2, #0
 8001af2:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 fa7c 	bl	8001ff4 <IHM_Set_Sequences>
				state = ARMING_VROUM_VOUM;
 8001afc:	4b5e      	ldr	r3, [pc, #376]	; (8001c78 <arming_main+0x1f8>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
			break;
 8001b02:	e0b3      	b.n	8001c6c <arming_main+0x1ec>
			switch(state_vroum_vroum){
 8001b04:	4b5d      	ldr	r3, [pc, #372]	; (8001c7c <arming_main+0x1fc>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	f200 80a3 	bhi.w	8001c54 <arming_main+0x1d4>
 8001b0e:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <arming_main+0x94>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b29 	.word	0x08001b29
 8001b18:	08001b4d 	.word	0x08001b4d
 8001b1c:	08001bdb 	.word	0x08001bdb
 8001b20:	08001c09 	.word	0x08001c09
 8001b24:	08001c37 	.word	0x08001c37
					next_change = time_us + PERIODE_1;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 8001b2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b32:	4a53      	ldr	r2, [pc, #332]	; (8001c80 <arming_main+0x200>)
 8001b34:	6013      	str	r3, [r2, #0]
					sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	22c8      	movs	r2, #200	; 0xc8
 8001b3a:	f8a3 2a20 	strh.w	r2, [r3, #2592]	; 0xa20
					state_vroum_vroum++;
 8001b3e:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <arming_main+0x1fc>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <arming_main+0x1fc>)
 8001b48:	701a      	strb	r2, [r3, #0]
					break;
 8001b4a:	e08c      	b.n	8001c66 <arming_main+0x1e6>
					elapsed = (float)time_us - (float)(next_change-PERIODE_1);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b56:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <arming_main+0x200>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f5a3 23c3 	sub.w	r3, r3, #399360	; 0x61800
 8001b5e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6e:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <arming_main+0x204>)
 8001b70:	edc3 7a00 	vstr	s15, [r3]
					elapsed /= (float)PERIODE_1;
 8001b74:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <arming_main+0x204>)
 8001b76:	ed93 7a00 	vldr	s14, [r3]
 8001b7a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001c88 <arming_main+0x208>
 8001b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b82:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <arming_main+0x204>)
 8001b84:	edc3 7a00 	vstr	s15, [r3]
					sys->regulation.position.consigne = MOTORS_LOW_POWER + (uint32_t)((float)(MOTORS_HIGH_POWER - MOTORS_LOW_POWER) * elapsed);
 8001b88:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <arming_main+0x204>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001c8c <arming_main+0x20c>
 8001b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9a:	ee17 3a90 	vmov	r3, s15
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3328      	adds	r3, #40	; 0x28
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f8a3 2a20 	strh.w	r2, [r3, #2592]	; 0xa20
					if(time_us > next_change){
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <arming_main+0x200>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d950      	bls.n	8001c58 <arming_main+0x1d8>
						next_change = time_us + PERIODE_2;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8001bbc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8001bc0:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <arming_main+0x200>)
 8001bc2:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2228      	movs	r2, #40	; 0x28
 8001bc8:	f8a3 2a20 	strh.w	r2, [r3, #2592]	; 0xa20
						state_vroum_vroum++;
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <arming_main+0x1fc>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <arming_main+0x1fc>)
 8001bd6:	701a      	strb	r2, [r3, #0]
					break;
 8001bd8:	e03e      	b.n	8001c58 <arming_main+0x1d8>
					if(time_us > next_change){
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <arming_main+0x200>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d93b      	bls.n	8001c5c <arming_main+0x1dc>
						next_change = time_us + PERIODE_3;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 8001bea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001bee:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <arming_main+0x200>)
 8001bf0:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	22c8      	movs	r2, #200	; 0xc8
 8001bf6:	f8a3 2a20 	strh.w	r2, [r3, #2592]	; 0xa20
						state_vroum_vroum++;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <arming_main+0x1fc>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <arming_main+0x1fc>)
 8001c04:	701a      	strb	r2, [r3, #0]
					break;
 8001c06:	e029      	b.n	8001c5c <arming_main+0x1dc>
					if(time_us > next_change){
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <arming_main+0x200>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d926      	bls.n	8001c60 <arming_main+0x1e0>
						next_change = time_us + PERIODE_4;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8001c18:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <arming_main+0x200>)
 8001c1e:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2228      	movs	r2, #40	; 0x28
 8001c24:	f8a3 2a20 	strh.w	r2, [r3, #2592]	; 0xa20
						state_vroum_vroum++;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <arming_main+0x1fc>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <arming_main+0x1fc>)
 8001c32:	701a      	strb	r2, [r3, #0]
					break;
 8001c34:	e014      	b.n	8001c60 <arming_main+0x1e0>
					if(time_us > next_change){
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <arming_main+0x200>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d911      	bls.n	8001c64 <arming_main+0x1e4>
						EVENT_Set_flag(FLAG_ARMED);
 8001c40:	2019      	movs	r0, #25
 8001c42:	f000 fdb9 	bl	80027b8 <EVENT_Set_flag>
						state_vroum_vroum++;
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <arming_main+0x1fc>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <arming_main+0x1fc>)
 8001c50:	701a      	strb	r2, [r3, #0]
					break;
 8001c52:	e007      	b.n	8001c64 <arming_main+0x1e4>
					break;
 8001c54:	bf00      	nop
 8001c56:	e00a      	b.n	8001c6e <arming_main+0x1ee>
					break;
 8001c58:	bf00      	nop
 8001c5a:	e008      	b.n	8001c6e <arming_main+0x1ee>
					break;
 8001c5c:	bf00      	nop
 8001c5e:	e006      	b.n	8001c6e <arming_main+0x1ee>
					break;
 8001c60:	bf00      	nop
 8001c62:	e004      	b.n	8001c6e <arming_main+0x1ee>
					break;
 8001c64:	bf00      	nop
			break;
 8001c66:	e002      	b.n	8001c6e <arming_main+0x1ee>
			break;
 8001c68:	bf00      	nop
 8001c6a:	e000      	b.n	8001c6e <arming_main+0x1ee>
			break;
 8001c6c:	bf00      	nop
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200016d0 	.word	0x200016d0
 8001c7c:	200016d1 	.word	0x200016d1
 8001c80:	200016d4 	.word	0x200016d4
 8001c84:	200016d8 	.word	0x200016d8
 8001c88:	48c35000 	.word	0x48c35000
 8001c8c:	43200000 	.word	0x43200000

08001c90 <FLIGHT_MODE_Init>:
		[FLIGHT_MODE_GYRO_ACC_CALIBRATION] = 	DEF_FLIGHT_MODE(FLIGHT_MODE_GYRO_ACC_CALIBRATION, 		gyro_acc_calibration_entrance, 	gyro_acc_calibration_main),

};

//	-------------------------	Public functions	-------------------------
void FLIGHT_MODE_Init(system_t * sys_){
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	sys = sys_;
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <FLIGHT_MODE_Init+0x1c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200016dc 	.word	0x200016dc

08001cb0 <FLIGHT_MODE_Set_Flight_Mode>:

//Dont call it from an it plz for now ..
void FLIGHT_MODE_Set_Flight_Mode(flight_modes_names_e new){
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	next_flight_mode = new ;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <FLIGHT_MODE_Set_Flight_Mode+0x1c>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	7013      	strb	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	200016e1 	.word	0x200016e1

08001cd0 <FLIGHT_MODE_Main>:

void FLIGHT_MODE_Main(uint32_t time_us){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	//Check if we have to change the current flight mode
	if(next_flight_mode != current_flight_mode){
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <FLIGHT_MODE_Main+0xa0>)
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <FLIGHT_MODE_Main+0xa4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d02b      	beq.n	8001d3c <FLIGHT_MODE_Main+0x6c>

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(flights_modes[current_flight_mode].function_leave != NULL)
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <FLIGHT_MODE_Main+0xa4>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <FLIGHT_MODE_Main+0xa8>)
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4413      	add	r3, r2
 8001cee:	330c      	adds	r3, #12
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00a      	beq.n	8001d0c <FLIGHT_MODE_Main+0x3c>
			flights_modes[current_flight_mode].function_leave(sys);
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <FLIGHT_MODE_Main+0xa4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <FLIGHT_MODE_Main+0xa8>)
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	330c      	adds	r3, #12
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <FLIGHT_MODE_Main+0xac>)
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4798      	blx	r3

		//Call the entrance function associated to the next flight mode if it exists
		if(flights_modes[next_flight_mode].function_entrance != NULL)
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <FLIGHT_MODE_Main+0xa0>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <FLIGHT_MODE_Main+0xa8>)
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	3304      	adds	r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00a      	beq.n	8001d34 <FLIGHT_MODE_Main+0x64>
			flights_modes[next_flight_mode].function_entrance(sys);
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <FLIGHT_MODE_Main+0xa0>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <FLIGHT_MODE_Main+0xa8>)
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	3304      	adds	r3, #4
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <FLIGHT_MODE_Main+0xac>)
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	4610      	mov	r0, r2
 8001d32:	4798      	blx	r3

		//Change the current flight mode
		current_flight_mode = next_flight_mode ;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <FLIGHT_MODE_Main+0xa0>)
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <FLIGHT_MODE_Main+0xa4>)
 8001d3a:	701a      	strb	r2, [r3, #0]
	}
	//Call the function associated to the current flight mode
	if(flights_modes[next_flight_mode].function_main != NULL)
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <FLIGHT_MODE_Main+0xa0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <FLIGHT_MODE_Main+0xa8>)
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	3308      	adds	r3, #8
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <FLIGHT_MODE_Main+0x96>
		flights_modes[current_flight_mode].function_main(sys, time_us);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <FLIGHT_MODE_Main+0xa4>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <FLIGHT_MODE_Main+0xa8>)
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	3308      	adds	r3, #8
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <FLIGHT_MODE_Main+0xac>)
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4610      	mov	r0, r2
 8001d64:	4798      	blx	r3

}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200016e1 	.word	0x200016e1
 8001d74:	200016e0 	.word	0x200016e0
 8001d78:	20000084 	.word	0x20000084
 8001d7c:	200016dc 	.word	0x200016dc

08001d80 <gyro_acc_calibration_entrance>:

#include "Flight_mode.h"
#include "../OS/events/events.h"
#include "../OS/events/flags.h"

void gyro_acc_calibration_entrance(system_t * sys){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_3);
 8001d88:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2001      	movs	r0, #1
 8001d92:	f000 f92f 	bl	8001ff4 <IHM_Set_Sequences>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <gyro_acc_calibration_main>:
void gyro_acc_calibration_main(system_t * sys, uint32_t time_us){
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]

	if(GYRO_calibrate(&sys->sensors.gyro, 1500)){	//The high lvl runs at 500 HZ so 1500 by 500 => 3 secs of calibration
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3330      	adds	r3, #48	; 0x30
 8001dac:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 f8f3 	bl	8003f9c <GYRO_calibrate>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d009      	beq.n	8001dd0 <gyro_acc_calibration_main+0x32>
		EVENT_Set_flag(FLAG_GYRO_CALI_DONE);
 8001dbc:	201c      	movs	r0, #28
 8001dbe:	f000 fcfb 	bl	80027b8 <EVENT_Set_flag>
		IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f000 f912 	bl	8001ff4 <IHM_Set_Sequences>
	}

}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <manual_accro_entrance>:
 */


#include "Flight_mode.h"

void manual_accro_entrance(system_t * sys){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f001 feed 	bl	8003bc0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f001 ffa8 	bl	8003d3c <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_1);
 8001dec:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	2000      	movs	r0, #0
 8001df6:	f000 f8fd 	bl	8001ff4 <IHM_Set_Sequences>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <manual_accro_main>:

void manual_accro_main(system_t * sys, uint32_t time_us){
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL] = -((float)sys->radio.controller.channels[0]-1500);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001eb0 <manual_accro_main+0xac>
 8001e22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e26:	eef1 7a67 	vneg.f32	s15, s15
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f603 2314 	addw	r3, r3, #2580	; 0xa14
 8001e30:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH] = -((float)sys->radio.controller.channels[1]-1500);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e46:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001eb0 <manual_accro_main+0xac>
 8001e4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e4e:	eef1 7a67 	vneg.f32	s15, s15
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f503 6321 	add.w	r3, r3, #2576	; 0xa10
 8001e58:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8001e62:	3306      	adds	r3, #6
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001eb0 <manual_accro_main+0xac>
 8001e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e76:	eef1 7a67 	vneg.f32	s15, s15
 8001e7a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001eb4 <manual_accro_main+0xb0>
 8001e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8001e88:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8001e92:	3304      	adds	r3, #4
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8a3 2a20 	strh.w	r2, [r3, #2592]	; 0xa20
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	44bb8000 	.word	0x44bb8000
 8001eb4:	3f99999a 	.word	0x3f99999a

08001eb8 <on_the_ground_entrance>:
 *  Created on: 19 déc. 2020
 *      Author: theom
 */
#include "Flight_mode.h"

void on_the_ground_entrance(system_t * sys){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f001 fe7d 	bl	8003bc0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_OFF);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f001 ff38 	bl	8003d3c <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 f88d 	bl	8001ff4 <IHM_Set_Sequences>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <on_the_ground_main>:
void on_the_ground_main(system_t * sys, uint32_t time_us){
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <IHM_Init>:





void IHM_Init(Ihm_t * ihm_){
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	ihm = ihm_;
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <IHM_Init+0x1c>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200016e4 	.word	0x200016e4

08001f18 <IHM_Led_Init>:

void IHM_Led_Init(led_name_e name, uint32_t periode, uint16_t pin, led_output_logic_e output_logic){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6039      	str	r1, [r7, #0]
 8001f20:	4611      	mov	r1, r2
 8001f22:	461a      	mov	r2, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	80bb      	strh	r3, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	71bb      	strb	r3, [r7, #6]
	ihm->leds[name].periode = periode ;
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <IHM_Led_Init+0x80>)
 8001f32:	6819      	ldr	r1, [r3, #0]
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	440b      	add	r3, r1
 8001f40:	330c      	adds	r3, #12
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	601a      	str	r2, [r3, #0]
	ihm->leds[name].pin = pin ;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <IHM_Led_Init+0x80>)
 8001f48:	6819      	ldr	r1, [r3, #0]
 8001f4a:	79fa      	ldrb	r2, [r7, #7]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	3310      	adds	r3, #16
 8001f58:	88ba      	ldrh	r2, [r7, #4]
 8001f5a:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].output_logic = output_logic ;
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <IHM_Led_Init+0x80>)
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3314      	adds	r3, #20
 8001f6e:	79ba      	ldrb	r2, [r7, #6]
 8001f70:	701a      	strb	r2, [r3, #0]

	//Set the outputs low
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e008      	b.n	8001f8a <IHM_Led_Init+0x72>
		IHM_Set_Sequence(name, c, SEQUENCE_LED_OFF);
 8001f78:	7bf9      	ldrb	r1, [r7, #15]
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f80c 	bl	8001f9c <IHM_Set_Sequence>
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	3301      	adds	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d9f3      	bls.n	8001f78 <IHM_Led_Init+0x60>
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200016e4 	.word	0x200016e4

08001f9c <IHM_Set_Sequence>:

void IHM_Set_Sequence(led_name_e name, led_color_e color, uint16_t sequence){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	71bb      	strb	r3, [r7, #6]
 8001faa:	4613      	mov	r3, r2
 8001fac:	80bb      	strh	r3, [r7, #4]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE)
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <IHM_Set_Sequence+0x54>)
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	79fa      	ldrb	r2, [r7, #7]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3314      	adds	r3, #20
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <IHM_Set_Sequence+0x30>
		sequence = ~sequence ;
 8001fc6:	88bb      	ldrh	r3, [r7, #4]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	80bb      	strh	r3, [r7, #4]
	ihm->leds[name].seqs[color] = sequence ;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <IHM_Set_Sequence+0x54>)
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	79fa      	ldrb	r2, [r7, #7]
 8001fd2:	79b8      	ldrb	r0, [r7, #6]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4403      	add	r3, r0
 8001fde:	88ba      	ldrh	r2, [r7, #4]
 8001fe0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	200016e4 	.word	0x200016e4

08001ff4 <IHM_Set_Sequences>:

void IHM_Set_Sequences(led_name_e name, uint16_t sequence_red, uint16_t sequence_green, uint16_t sequence_blue){
 8001ff4:	b490      	push	{r4, r7}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4623      	mov	r3, r4
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	4603      	mov	r3, r0
 8002008:	80bb      	strh	r3, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	807b      	strh	r3, [r7, #2]
 800200e:	4613      	mov	r3, r2
 8002010:	803b      	strh	r3, [r7, #0]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE){
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <IHM_Set_Sequences+0x94>)
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	79fa      	ldrb	r2, [r7, #7]
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	3314      	adds	r3, #20
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d108      	bne.n	800203c <IHM_Set_Sequences+0x48>
		sequence_red = ~sequence_red ;
 800202a:	88bb      	ldrh	r3, [r7, #4]
 800202c:	43db      	mvns	r3, r3
 800202e:	80bb      	strh	r3, [r7, #4]
		sequence_green = ~sequence_green ;
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	43db      	mvns	r3, r3
 8002034:	807b      	strh	r3, [r7, #2]
		sequence_blue = ~sequence_blue ;
 8002036:	883b      	ldrh	r3, [r7, #0]
 8002038:	43db      	mvns	r3, r3
 800203a:	803b      	strh	r3, [r7, #0]
	}
	ihm->leds[name].seqs[LED_COLOR_RED] = sequence_red ;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <IHM_Set_Sequences+0x94>)
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	79fa      	ldrb	r2, [r7, #7]
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	88ba      	ldrh	r2, [r7, #4]
 800204e:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_GREEN] = sequence_green ;
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <IHM_Set_Sequences+0x94>)
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	79fa      	ldrb	r2, [r7, #7]
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	3302      	adds	r3, #2
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_BLUE] = sequence_blue ;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <IHM_Set_Sequences+0x94>)
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	79fa      	ldrb	r2, [r7, #7]
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	3304      	adds	r3, #4
 8002078:	883a      	ldrh	r2, [r7, #0]
 800207a:	801a      	strh	r2, [r3, #0]
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bc90      	pop	{r4, r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	200016e4 	.word	0x200016e4

0800208c <IHM_Update>:

void IHM_Update(void){
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0

	//Increment the counter each time (since we re called at 1kHz
	compteur ++ ;
 8002092:	4b8a      	ldr	r3, [pc, #552]	; (80022bc <IHM_Update+0x230>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a88      	ldr	r2, [pc, #544]	; (80022bc <IHM_Update+0x230>)
 800209a:	6013      	str	r3, [r2, #0]
	//Update the current color and the current led
	current_led = compteur % LED_COUNT ;
 800209c:	4b87      	ldr	r3, [pc, #540]	; (80022bc <IHM_Update+0x230>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b85      	ldr	r3, [pc, #532]	; (80022c0 <IHM_Update+0x234>)
 80020aa:	701a      	strb	r2, [r3, #0]

	//Check if we have to change the current bit
	if(compteur > ihm->leds[current_led].next_time)
 80020ac:	4b85      	ldr	r3, [pc, #532]	; (80022c4 <IHM_Update+0x238>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b83      	ldr	r3, [pc, #524]	; (80022c0 <IHM_Update+0x234>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	460b      	mov	r3, r1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	440b      	add	r3, r1
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	3308      	adds	r3, #8
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b7d      	ldr	r3, [pc, #500]	; (80022bc <IHM_Update+0x230>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d259      	bcs.n	8002180 <IHM_Update+0xf4>
	{
		ihm->leds[current_led].current_bit >>= 1;
 80020cc:	4b7d      	ldr	r3, [pc, #500]	; (80022c4 <IHM_Update+0x238>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b7b      	ldr	r3, [pc, #492]	; (80022c0 <IHM_Update+0x234>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	460b      	mov	r3, r1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	440b      	add	r3, r1
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	3312      	adds	r3, #18
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	4a77      	ldr	r2, [pc, #476]	; (80022c4 <IHM_Update+0x238>)
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	4975      	ldr	r1, [pc, #468]	; (80022c0 <IHM_Update+0x234>)
 80020ea:	7809      	ldrb	r1, [r1, #0]
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	b298      	uxth	r0, r3
 80020f0:	460b      	mov	r3, r1
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	440b      	add	r3, r1
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	3312      	adds	r3, #18
 80020fc:	4602      	mov	r2, r0
 80020fe:	801a      	strh	r2, [r3, #0]
		ihm->leds[current_led].next_time += ihm->leds[current_led].periode ;
 8002100:	4b70      	ldr	r3, [pc, #448]	; (80022c4 <IHM_Update+0x238>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b6e      	ldr	r3, [pc, #440]	; (80022c0 <IHM_Update+0x234>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	460b      	mov	r3, r1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	440b      	add	r3, r1
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	3308      	adds	r3, #8
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <IHM_Update+0x238>)
 800211a:	6819      	ldr	r1, [r3, #0]
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <IHM_Update+0x234>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	4603      	mov	r3, r0
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4403      	add	r3, r0
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	330c      	adds	r3, #12
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4964      	ldr	r1, [pc, #400]	; (80022c4 <IHM_Update+0x238>)
 8002132:	6809      	ldr	r1, [r1, #0]
 8002134:	4862      	ldr	r0, [pc, #392]	; (80022c0 <IHM_Update+0x234>)
 8002136:	7800      	ldrb	r0, [r0, #0]
 8002138:	441a      	add	r2, r3
 800213a:	4603      	mov	r3, r0
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4403      	add	r3, r0
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	3308      	adds	r3, #8
 8002146:	601a      	str	r2, [r3, #0]

		if(ihm->leds[current_led].current_bit == 0)
 8002148:	4b5e      	ldr	r3, [pc, #376]	; (80022c4 <IHM_Update+0x238>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b5c      	ldr	r3, [pc, #368]	; (80022c0 <IHM_Update+0x234>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	460b      	mov	r3, r1
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	440b      	add	r3, r1
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	3312      	adds	r3, #18
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10d      	bne.n	8002180 <IHM_Update+0xf4>
			ihm->leds[current_led].current_bit = 1 << (SEQUENCE_LEN-1);
 8002164:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <IHM_Update+0x238>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <IHM_Update+0x234>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	460b      	mov	r3, r1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	440b      	add	r3, r1
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	3312      	adds	r3, #18
 800217a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800217e:	801a      	strh	r2, [r3, #0]
	}

	uint16_t pins_high = 0 ;
 8002180:	2300      	movs	r3, #0
 8002182:	80fb      	strh	r3, [r7, #6]
	uint16_t pins_low = 0 ;
 8002184:	2300      	movs	r3, #0
 8002186:	80bb      	strh	r3, [r7, #4]
	uint16_t current_bit =  ihm->leds[current_led].current_bit ;
 8002188:	4b4e      	ldr	r3, [pc, #312]	; (80022c4 <IHM_Update+0x238>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <IHM_Update+0x234>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	460b      	mov	r3, r1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	440b      	add	r3, r1
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	3312      	adds	r3, #18
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	803b      	strh	r3, [r7, #0]

	//For each color, check if we have to set outputs high or low
	if(ihm->leds[current_led].seqs[LED_COLOR_RED] & current_bit)		//Red pin high ?
 80021a2:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <IHM_Update+0x238>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <IHM_Update+0x234>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	440b      	add	r3, r1
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	881a      	ldrh	r2, [r3, #0]
 80021b8:	883b      	ldrh	r3, [r7, #0]
 80021ba:	4013      	ands	r3, r2
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <IHM_Update+0x142>
		pins_high += pin_color[LED_COLOR_RED];
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <IHM_Update+0x23c>)
 80021c4:	881a      	ldrh	r2, [r3, #0]
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	4413      	add	r3, r2
 80021ca:	80fb      	strh	r3, [r7, #6]
 80021cc:	e004      	b.n	80021d8 <IHM_Update+0x14c>
	else
		pins_low += pin_color[LED_COLOR_RED];
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <IHM_Update+0x23c>)
 80021d0:	881a      	ldrh	r2, [r3, #0]
 80021d2:	88bb      	ldrh	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_GREEN] & current_bit)		//Green pin High ?
 80021d8:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <IHM_Update+0x238>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <IHM_Update+0x234>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	460b      	mov	r3, r1
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	440b      	add	r3, r1
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	3302      	adds	r3, #2
 80021ee:	881a      	ldrh	r2, [r3, #0]
 80021f0:	883b      	ldrh	r3, [r7, #0]
 80021f2:	4013      	ands	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <IHM_Update+0x17a>
		pins_high += pin_color[LED_COLOR_GREEN];
 80021fa:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <IHM_Update+0x23c>)
 80021fc:	885a      	ldrh	r2, [r3, #2]
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	4413      	add	r3, r2
 8002202:	80fb      	strh	r3, [r7, #6]
 8002204:	e004      	b.n	8002210 <IHM_Update+0x184>
	else
		pins_low += pin_color[LED_COLOR_GREEN];
 8002206:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <IHM_Update+0x23c>)
 8002208:	885a      	ldrh	r2, [r3, #2]
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_BLUE] & current_bit)		//Blue pin high ?
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <IHM_Update+0x238>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <IHM_Update+0x234>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	460b      	mov	r3, r1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	440b      	add	r3, r1
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	881a      	ldrh	r2, [r3, #0]
 8002228:	883b      	ldrh	r3, [r7, #0]
 800222a:	4013      	ands	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <IHM_Update+0x1b2>
		pins_high |= pin_color[LED_COLOR_BLUE];
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <IHM_Update+0x23c>)
 8002234:	889a      	ldrh	r2, [r3, #4]
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	4313      	orrs	r3, r2
 800223a:	80fb      	strh	r3, [r7, #6]
 800223c:	e004      	b.n	8002248 <IHM_Update+0x1bc>
	else
		pins_low |= pin_color[LED_COLOR_BLUE];
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <IHM_Update+0x23c>)
 8002240:	889a      	ldrh	r2, [r3, #4]
 8002242:	88bb      	ldrh	r3, [r7, #4]
 8002244:	4313      	orrs	r3, r2
 8002246:	80bb      	strh	r3, [r7, #4]

	//Then we activate the current led
	for(uint8_t l = 0; l < LED_COUNT; l++){
 8002248:	2300      	movs	r3, #0
 800224a:	70fb      	strb	r3, [r7, #3]
 800224c:	e022      	b.n	8002294 <IHM_Update+0x208>
		if(l == current_led)
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <IHM_Update+0x234>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	429a      	cmp	r2, r3
 8002256:	d10d      	bne.n	8002274 <IHM_Update+0x1e8>
			pins_high |= ihm->leds[l].pin ;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <IHM_Update+0x238>)
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	3310      	adds	r3, #16
 800226a:	881a      	ldrh	r2, [r3, #0]
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	4313      	orrs	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
 8002272:	e00c      	b.n	800228e <IHM_Update+0x202>
		else
			pins_low |= ihm->leds[l].pin ;
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <IHM_Update+0x238>)
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	3310      	adds	r3, #16
 8002286:	881a      	ldrh	r2, [r3, #0]
 8002288:	88bb      	ldrh	r3, [r7, #4]
 800228a:	4313      	orrs	r3, r2
 800228c:	80bb      	strh	r3, [r7, #4]
	for(uint8_t l = 0; l < LED_COUNT; l++){
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	3301      	adds	r3, #1
 8002292:	70fb      	strb	r3, [r7, #3]
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d9d9      	bls.n	800224e <IHM_Update+0x1c2>
	}
	HAL_GPIO_WritePin(GPIOC, pins_high, GPIO_PIN_SET);
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	2201      	movs	r2, #1
 800229e:	4619      	mov	r1, r3
 80022a0:	480a      	ldr	r0, [pc, #40]	; (80022cc <IHM_Update+0x240>)
 80022a2:	f005 fad9 	bl	8007858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, pins_low, GPIO_PIN_RESET);
 80022a6:	88bb      	ldrh	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4807      	ldr	r0, [pc, #28]	; (80022cc <IHM_Update+0x240>)
 80022ae:	f005 fad3 	bl	8007858 <HAL_GPIO_WritePin>





}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200016e8 	.word	0x200016e8
 80022c0:	200016ec 	.word	0x200016ec
 80022c4:	200016e4 	.word	0x200016e4
 80022c8:	200000c4 	.word	0x200000c4
 80022cc:	40020800 	.word	0x40020800

080022d0 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 80022d4:	4803      	ldr	r0, [pc, #12]	; (80022e4 <DEBUG_init+0x14>)
 80022d6:	f000 f809 	bl	80022ec <RetargetInit>
	printf("Debuger is init\n");
 80022da:	4803      	ldr	r0, [pc, #12]	; (80022e8 <DEBUG_init+0x18>)
 80022dc:	f00a f84a 	bl	800c374 <puts>
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200028a8 	.word	0x200028a8
 80022e8:	0800e598 	.word	0x0800e598

080022ec <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <RetargetInit+0x28>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <RetargetInit+0x2c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6898      	ldr	r0, [r3, #8]
 8002300:	2300      	movs	r3, #0
 8002302:	2202      	movs	r2, #2
 8002304:	2100      	movs	r1, #0
 8002306:	f00a f83d 	bl	800c384 <setvbuf>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200017ec 	.word	0x200017ec
 8002318:	200013c4 	.word	0x200013c4

0800231c <_isatty>:

int _isatty(int fd) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db04      	blt.n	8002334 <_isatty+0x18>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b02      	cmp	r3, #2
 800232e:	dc01      	bgt.n	8002334 <_isatty+0x18>
    return 1;
 8002330:	2301      	movs	r3, #1
 8002332:	e005      	b.n	8002340 <_isatty+0x24>

  errno = EBADF;
 8002334:	f009 faf8 	bl	800b928 <__errno>
 8002338:	4602      	mov	r2, r0
 800233a:	2309      	movs	r3, #9
 800233c:	6013      	str	r3, [r2, #0]
  return 0;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_write>:

int _write(int fd, char* ptr, int len) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d002      	beq.n	8002360 <_write+0x18>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d110      	bne.n	8002382 <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <_write+0x50>)
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	b29a      	uxth	r2, r3
 8002368:	2364      	movs	r3, #100	; 0x64
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	f007 fddb 	bl	8009f26 <HAL_UART_Transmit>
 8002370:	4603      	mov	r3, r0
 8002372:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <_write+0x36>
      return len;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	e008      	b.n	8002390 <_write+0x48>
    else
      return EIO;
 800237e:	2305      	movs	r3, #5
 8002380:	e006      	b.n	8002390 <_write+0x48>
  }
  errno = EBADF;
 8002382:	f009 fad1 	bl	800b928 <__errno>
 8002386:	4602      	mov	r2, r0
 8002388:	2309      	movs	r3, #9
 800238a:	6013      	str	r3, [r2, #0]
  return -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200017ec 	.word	0x200017ec

0800239c <_close>:

int _close(int fd) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db04      	blt.n	80023b4 <_close+0x18>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	dc01      	bgt.n	80023b4 <_close+0x18>
    return 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e006      	b.n	80023c2 <_close+0x26>

  errno = EBADF;
 80023b4:	f009 fab8 	bl	800b928 <__errno>
 80023b8:	4602      	mov	r2, r0
 80023ba:	2309      	movs	r3, #9
 80023bc:	6013      	str	r3, [r2, #0]
  return -1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80023d6:	f009 faa7 	bl	800b928 <__errno>
 80023da:	4602      	mov	r2, r0
 80023dc:	2309      	movs	r3, #9
 80023de:	6013      	str	r3, [r2, #0]
  return -1;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_read>:

int _read(int fd, char* ptr, int len) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d110      	bne.n	8002420 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <_read+0x4c>)
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	2201      	movs	r2, #1
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	f007 fe25 	bl	800a058 <HAL_UART_Receive>
 800240e:	4603      	mov	r3, r0
 8002410:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <_read+0x30>
      return 1;
 8002418:	2301      	movs	r3, #1
 800241a:	e008      	b.n	800242e <_read+0x42>
    else
      return EIO;
 800241c:	2305      	movs	r3, #5
 800241e:	e006      	b.n	800242e <_read+0x42>
  }
  errno = EBADF;
 8002420:	f009 fa82 	bl	800b928 <__errno>
 8002424:	4602      	mov	r2, r0
 8002426:	2309      	movs	r3, #9
 8002428:	6013      	str	r3, [r2, #0]
  return -1;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200017ec 	.word	0x200017ec

0800243c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db08      	blt.n	800245e <_fstat+0x22>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	dc05      	bgt.n	800245e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002458:	605a      	str	r2, [r3, #4]
    return 0;
 800245a:	2300      	movs	r3, #0
 800245c:	e005      	b.n	800246a <_fstat+0x2e>
  }

  errno = EBADF;
 800245e:	f009 fa63 	bl	800b928 <__errno>
 8002462:	4602      	mov	r2, r0
 8002464:	2309      	movs	r3, #9
 8002466:	6013      	str	r3, [r2, #0]
  return 0;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <gyro_init_ok_func>:
		[EVENT_GYRO_ACC_CALIBRATION] = 	DEFINE_EVENT(gyro_acc_calibration, 	MASK_GYRO_ACC_COUNT, 			EVENT_ENABLED),


};

static void gyro_init_ok_func(mask_def_ids_t mask_id){
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_GYRO_READING);
 800247e:	2001      	movs	r0, #1
 8002480:	f000 f99a 	bl	80027b8 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 8002484:	2101      	movs	r1, #1
 8002486:	2004      	movs	r0, #4
 8002488:	f000 fd5c 	bl	8002f44 <SCHEDULER_task_set_mode>
	events_main[EVENT_GYRO_INIT_OK].state = EVENT_DISABLED ;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <gyro_init_ok_func+0x28>)
 800248e:	2201      	movs	r2, #1
 8002490:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200000cc 	.word	0x200000cc

080024a0 <acc_init_ok_func>:

static void acc_init_ok_func(mask_def_ids_t mask_id){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_ACC_READING);
 80024aa:	2005      	movs	r0, #5
 80024ac:	f000 f984 	bl	80027b8 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 80024b0:	2101      	movs	r1, #1
 80024b2:	2006      	movs	r0, #6
 80024b4:	f000 fd46 	bl	8002f44 <SCHEDULER_task_set_mode>
	events_main[EVENT_ACC_INIT_OK].state = EVENT_DISABLED ;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <acc_init_ok_func+0x28>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200000cc 	.word	0x200000cc

080024cc <ibus_data_rdy>:

static void ibus_data_rdy(mask_def_ids_t mask_id){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024d6:	b672      	cpsid	i
	//On clean le flag ibus_data_rdy
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_IBUS_DATA_RDY);
 80024d8:	2108      	movs	r1, #8
 80024da:	4806      	ldr	r0, [pc, #24]	; (80024f4 <ibus_data_rdy+0x28>)
 80024dc:	f000 fa2b 	bl	8002936 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80024e0:	b662      	cpsie	i
	__enable_irq();
	//On déclenche la tâche de traitement des octets pour l ibus
	SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_UPDATE, TASK_MODE_EVENT);
 80024e2:	2102      	movs	r1, #2
 80024e4:	2009      	movs	r0, #9
 80024e6:	f000 fd2d 	bl	8002f44 <SCHEDULER_task_set_mode>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200016f0 	.word	0x200016f0

080024f8 <on_the_ground>:

static void on_the_ground(mask_def_ids_t mask_id){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002502:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_FLYING);
 8002504:	211d      	movs	r1, #29
 8002506:	480d      	ldr	r0, [pc, #52]	; (800253c <on_the_ground+0x44>)
 8002508:	f000 fa15 	bl	8002936 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMED);
 800250c:	2119      	movs	r1, #25
 800250e:	480b      	ldr	r0, [pc, #44]	; (800253c <on_the_ground+0x44>)
 8002510:	f000 fa11 	bl	8002936 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_BUSY);
 8002514:	211a      	movs	r1, #26
 8002516:	4809      	ldr	r0, [pc, #36]	; (800253c <on_the_ground+0x44>)
 8002518:	f000 fa0d 	bl	8002936 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMING);
 800251c:	2118      	movs	r1, #24
 800251e:	4807      	ldr	r0, [pc, #28]	; (800253c <on_the_ground+0x44>)
 8002520:	f000 fa09 	bl	8002936 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8002524:	211b      	movs	r1, #27
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <on_the_ground+0x44>)
 8002528:	f000 fa05 	bl	8002936 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800252c:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ON_THE_GROUND);
 800252e:	2000      	movs	r0, #0
 8002530:	f7ff fbbe 	bl	8001cb0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200016f0 	.word	0x200016f0

08002540 <manual_accro>:
static void manual_accro(mask_def_ids_t mask_id){
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800254a:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 800254c:	211d      	movs	r1, #29
 800254e:	4807      	ldr	r0, [pc, #28]	; (800256c <manual_accro+0x2c>)
 8002550:	f000 f9c1 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8002554:	211e      	movs	r1, #30
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <manual_accro+0x2c>)
 8002558:	f000 f9bd 	bl	80028d6 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800255c:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ACCRO);
 800255e:	2001      	movs	r0, #1
 8002560:	f7ff fba6 	bl	8001cb0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200016f0 	.word	0x200016f0

08002570 <gyro_data_ready_func>:

static void gyro_data_ready_func(mask_def_ids_t mask_id){
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800257a:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 800257c:	2102      	movs	r1, #2
 800257e:	4806      	ldr	r0, [pc, #24]	; (8002598 <gyro_data_ready_func+0x28>)
 8002580:	f000 f9d9 	bl	8002936 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002584:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 8002586:	2102      	movs	r1, #2
 8002588:	2005      	movs	r0, #5
 800258a:	f000 fcdb 	bl	8002f44 <SCHEDULER_task_set_mode>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200016f0 	.word	0x200016f0

0800259c <acc_data_ready_func>:

static void acc_data_ready_func(mask_def_ids_t mask_id){
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80025a6:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 80025a8:	2106      	movs	r1, #6
 80025aa:	4806      	ldr	r0, [pc, #24]	; (80025c4 <acc_data_ready_func+0x28>)
 80025ac:	f000 f9c3 	bl	8002936 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80025b0:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 80025b2:	2102      	movs	r1, #2
 80025b4:	2007      	movs	r0, #7
 80025b6:	f000 fcc5 	bl	8002f44 <SCHEDULER_task_set_mode>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200016f0 	.word	0x200016f0

080025c8 <orientation_update>:

static void orientation_update(mask_def_ids_t mask_id){
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80025d2:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 80025d4:	2107      	movs	r1, #7
 80025d6:	4808      	ldr	r0, [pc, #32]	; (80025f8 <orientation_update+0x30>)
 80025d8:	f000 f9ad 	bl	8002936 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 80025dc:	2103      	movs	r1, #3
 80025de:	4806      	ldr	r0, [pc, #24]	; (80025f8 <orientation_update+0x30>)
 80025e0:	f000 f9a9 	bl	8002936 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80025e4:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 80025e6:	2102      	movs	r1, #2
 80025e8:	2008      	movs	r0, #8
 80025ea:	f000 fcab 	bl	8002f44 <SCHEDULER_task_set_mode>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200016f0 	.word	0x200016f0

080025fc <arming>:

static void arming(mask_def_ids_t mask_id){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002606:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_ARMING);
 8002608:	2118      	movs	r1, #24
 800260a:	4807      	ldr	r0, [pc, #28]	; (8002628 <arming+0x2c>)
 800260c:	f000 f963 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);	//We re now busy => cant go in calibration mode or other "on the ground" modes
 8002610:	211a      	movs	r1, #26
 8002612:	4805      	ldr	r0, [pc, #20]	; (8002628 <arming+0x2c>)
 8002614:	f000 f95f 	bl	80028d6 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002618:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ARMING);
 800261a:	2002      	movs	r0, #2
 800261c:	f7ff fb48 	bl	8001cb0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200016f0 	.word	0x200016f0

0800262c <gyro_acc_calibration>:

static void gyro_acc_calibration(mask_def_ids_t mask_id){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002636:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8002638:	211b      	movs	r1, #27
 800263a:	480b      	ldr	r0, [pc, #44]	; (8002668 <gyro_acc_calibration+0x3c>)
 800263c:	f000 f94b 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);
 8002640:	211a      	movs	r1, #26
 8002642:	4809      	ldr	r0, [pc, #36]	; (8002668 <gyro_acc_calibration+0x3c>)
 8002644:	f000 f947 	bl	80028d6 <MASK_set_flag>
	MASK_clean_flag(&flags, FLAG_CHAN_9_PUSH);
 8002648:	2113      	movs	r1, #19
 800264a:	4807      	ldr	r0, [pc, #28]	; (8002668 <gyro_acc_calibration+0x3c>)
 800264c:	f000 f973 	bl	8002936 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_DONE);
 8002650:	211c      	movs	r1, #28
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <gyro_acc_calibration+0x3c>)
 8002654:	f000 f96f 	bl	8002936 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002658:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_GYRO_ACC_CALIBRATION);
 800265a:	2003      	movs	r0, #3
 800265c:	f7ff fb28 	bl	8001cb0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200016f0 	.word	0x200016f0

0800266c <EVENT_init>:


void EVENT_init(system_t * sys_){
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	initialized = TRUE ;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <EVENT_init+0x24>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
	sys =sys_;
 800267a:	4a06      	ldr	r2, [pc, #24]	; (8002694 <EVENT_init+0x28>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6013      	str	r3, [r2, #0]

	//Configuration des mask associés aux events
	mask_def_events_init(events_main);
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <EVENT_init+0x2c>)
 8002682:	f000 f987 	bl	8002994 <mask_def_events_init>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20001700 	.word	0x20001700
 8002694:	200016fc 	.word	0x200016fc
 8002698:	200000cc 	.word	0x200000cc

0800269c <EVENT_process>:

//Déclenchement des events en main
void EVENT_process(bool_e test_all){
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	if(new_flag)
 80026a4:	4b41      	ldr	r3, [pc, #260]	; (80027ac <EVENT_process+0x110>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d07a      	beq.n	80027a2 <EVENT_process+0x106>
	{
		new_flag = FALSE;
 80026ac:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <EVENT_process+0x110>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]

		//Nombre d'event à tester
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 80026b2:	2306      	movs	r3, #6
 80026b4:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <EVENT_process+0x24>
			max = EVENT_COUNT ;
 80026bc:	230a      	movs	r3, #10
 80026be:	75fb      	strb	r3, [r7, #23]



		//Pout chaque event
		for(uint32_t e = 0; e < max; e ++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	e069      	b.n	800279a <EVENT_process+0xfe>
		{

			uint32_t m = 0 ;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]

			//On test chaque paires de masque
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 80026ce:	e049      	b.n	8002764 <EVENT_process+0xc8>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 80026d0:	4837      	ldr	r0, [pc, #220]	; (80027b0 <EVENT_process+0x114>)
 80026d2:	4938      	ldr	r1, [pc, #224]	; (80027b4 <EVENT_process+0x118>)
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	00d2      	lsls	r2, r2, #3
 80026da:	24b4      	movs	r4, #180	; 0xb4
 80026dc:	fb04 f303 	mul.w	r3, r4, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	4419      	add	r1, r3
 80026e4:	e890 000c 	ldmia.w	r0, {r2, r3}
 80026e8:	c903      	ldmia	r1, {r0, r1}
 80026ea:	f000 f895 	bl	8002818 <Mask_test_and>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d034      	beq.n	800275e <EVENT_process+0xc2>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 80026f4:	482e      	ldr	r0, [pc, #184]	; (80027b0 <EVENT_process+0x114>)
 80026f6:	492f      	ldr	r1, [pc, #188]	; (80027b4 <EVENT_process+0x118>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1dda      	adds	r2, r3, #7
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	00d2      	lsls	r2, r2, #3
 8002700:	24b4      	movs	r4, #180	; 0xb4
 8002702:	fb04 f303 	mul.w	r3, r4, r3
 8002706:	4413      	add	r3, r2
 8002708:	4419      	add	r1, r3
 800270a:	e890 000c 	ldmia.w	r0, {r2, r3}
 800270e:	c903      	ldmia	r1, {r0, r1}
 8002710:	f000 f8b5 	bl	800287e <Mask_test_or>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d021      	beq.n	800275e <EVENT_process+0xc2>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	//Mask not test
 800271a:	4825      	ldr	r0, [pc, #148]	; (80027b0 <EVENT_process+0x114>)
 800271c:	4925      	ldr	r1, [pc, #148]	; (80027b4 <EVENT_process+0x118>)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f103 020e 	add.w	r2, r3, #14
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	00d2      	lsls	r2, r2, #3
 8002728:	24b4      	movs	r4, #180	; 0xb4
 800272a:	fb04 f303 	mul.w	r3, r4, r3
 800272e:	4413      	add	r3, r2
 8002730:	4419      	add	r1, r3
 8002732:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002736:	c903      	ldmia	r1, {r0, r1}
 8002738:	f000 f8a1 	bl	800287e <Mask_test_or>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <EVENT_process+0xc2>
						{
							events_main[e].function(m);
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <EVENT_process+0x118>)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	21b4      	movs	r1, #180	; 0xb4
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	33b0      	adds	r3, #176	; 0xb0
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	4610      	mov	r0, r2
 8002758:	4798      	blx	r3
							function_did_run_once = TRUE ;
 800275a:	2301      	movs	r3, #1
 800275c:	60bb      	str	r3, [r7, #8]
						}
					}
				}
				m++ ;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3301      	adds	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <EVENT_process+0x118>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	21b4      	movs	r1, #180	; 0xb4
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	33a8      	adds	r3, #168	; 0xa8
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	429a      	cmp	r2, r3
 8002778:	d20c      	bcs.n	8002794 <EVENT_process+0xf8>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <EVENT_process+0xf8>
 8002780:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <EVENT_process+0x118>)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	21b4      	movs	r1, #180	; 0xb4
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	33ac      	adds	r3, #172	; 0xac
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d09d      	beq.n	80026d0 <EVENT_process+0x34>
		for(uint32_t e = 0; e < max; e ++)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	3301      	adds	r3, #1
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	7dfb      	ldrb	r3, [r7, #23]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d391      	bcc.n	80026c6 <EVENT_process+0x2a>
			}

		}
	}
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd90      	pop	{r4, r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200016f8 	.word	0x200016f8
 80027b0:	200016f0 	.word	0x200016f0
 80027b4:	200000cc 	.word	0x200000cc

080027b8 <EVENT_Set_flag>:


//Set a flag
void EVENT_Set_flag(Flags_e flag){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80027c2:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <EVENT_Set_flag+0x28>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	4619      	mov	r1, r3
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <EVENT_Set_flag+0x2c>)
 80027d0:	f000 f881 	bl	80028d6 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80027d4:	b662      	cpsie	i
	__enable_irq();
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200016f8 	.word	0x200016f8
 80027e4:	200016f0 	.word	0x200016f0

080027e8 <EVENT_Clean_flag>:
//CleaR a flag (i know it should be called cleaR instead of cleaN but i didnt took the time to change it YET)
//Todo : cleaRRRRRRR a flag
void EVENT_Clean_flag(Flags_e flag){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80027f2:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <EVENT_Clean_flag+0x28>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4619      	mov	r1, r3
 80027fe:	4805      	ldr	r0, [pc, #20]	; (8002814 <EVENT_Clean_flag+0x2c>)
 8002800:	f000 f899 	bl	8002936 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002804:	b662      	cpsie	i
	__enable_irq();
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200016f8 	.word	0x200016f8
 8002814:	200016f0 	.word	0x200016f0

08002818 <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 8002818:	b490      	push	{r4, r7}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	f107 0408 	add.w	r4, r7, #8
 8002822:	e884 0003 	stmia.w	r4, {r0, r1}
 8002826:	4639      	mov	r1, r7
 8002828:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e01c      	b.n	800286c <Mask_test_and+0x54>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	f107 0218 	add.w	r2, r7, #24
 800283a:	4413      	add	r3, r2
 800283c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	f107 0118 	add.w	r1, r7, #24
 8002848:	440b      	add	r3, r1
 800284a:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f107 0118 	add.w	r1, r7, #24
 8002858:	440b      	add	r3, r1
 800285a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800285e:	429a      	cmp	r2, r3
 8002860:	d001      	beq.n	8002866 <Mask_test_and+0x4e>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
 8002862:	2300      	movs	r3, #0
 8002864:	e006      	b.n	8002874 <Mask_test_and+0x5c>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3301      	adds	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b01      	cmp	r3, #1
 8002870:	dddf      	ble.n	8002832 <Mask_test_and+0x1a>
		}
	return TRUE ;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bc90      	pop	{r4, r7}
 800287c:	4770      	bx	lr

0800287e <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 800287e:	b490      	push	{r4, r7}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	f107 0408 	add.w	r4, r7, #8
 8002888:	e884 0003 	stmia.w	r4, {r0, r1}
 800288c:	4639      	mov	r1, r7
 800288e:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e015      	b.n	80028c4 <Mask_test_or+0x46>
		if(mask_test.array[m] & mask_ref.array[m])
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	f107 0218 	add.w	r2, r7, #24
 80028a0:	4413      	add	r3, r2
 80028a2:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	f107 0118 	add.w	r1, r7, #24
 80028ae:	440b      	add	r3, r1
 80028b0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <Mask_test_or+0x40>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e006      	b.n	80028cc <Mask_test_or+0x4e>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	dde6      	ble.n	8002898 <Mask_test_or+0x1a>
	return FALSE ;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc90      	pop	{r4, r7}
 80028d4:	4770      	bx	lr

080028d6 <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
 80028d6:	b480      	push	{r7}
 80028d8:	b087      	sub	sp, #28
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 80028f2:	2201      	movs	r2, #1
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	60fb      	str	r3, [r7, #12]
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	429a      	cmp	r2, r3
 800290c:	d101      	bne.n	8002912 <MASK_set_flag+0x3c>
		return FALSE ;
 800290e:	2300      	movs	r3, #0
 8002910:	e00b      	b.n	800292a <MASK_set_flag+0x54>
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	ea42 0103 	orr.w	r1, r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return TRUE ;
 8002928:	2301      	movs	r3, #1
}
 800292a:	4618      	mov	r0, r3
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
 8002936:	b480      	push	{r7}
 8002938:	b087      	sub	sp, #28
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	b2db      	uxtb	r3, r3
 8002948:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8002952:	2201      	movs	r2, #1
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	60fb      	str	r3, [r7, #12]
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4013      	ands	r3, r2
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	429a      	cmp	r2, r3
 800296c:	d10b      	bne.n	8002986 <MASK_clean_flag+0x50>
		mask->array[array_nb] -= flag_mask ;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad1      	subs	r1, r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return TRUE ;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <MASK_clean_flag+0x52>
	}
	return FALSE ;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <mask_def_events_init>:
static void mask_def_arming(Event_t * event);
static void mask_def_gyro_acc_calibration(Event_t * event);



void mask_def_events_init(Event_t * event){
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_init_ok(&event[EVENT_GYRO_INIT_OK]);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f836 	bl	8002a14 <mask_def_gyro_init_ok>
	mask_def_gyro_data_ready(&event[EVENT_GYRO_DATA_READY]);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f84c 	bl	8002a46 <mask_def_gyro_data_ready>
	//Acc mask def
	mask_def_acc_init_ok(&event[EVENT_ACC_INIT_OK]);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f859 	bl	8002a6c <mask_def_acc_init_ok>
	mask_def_acc_data_ready(&event[EVENT_ACC_DATA_READY]);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	33b4      	adds	r3, #180	; 0xb4
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f86d 	bl	8002a9e <mask_def_acc_data_ready>
	//Ibus
	mask_def_ibus_data_rdy(&event[EVENT_IBUS_DATA_RDY]);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f897 	bl	8002afe <mask_def_ibus_data_rdy>
	//Orientation
	mask_def_orientation_update(&event[EVENT_ORIENTATION_UPDATE]);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f874 	bl	8002ac4 <mask_def_orientation_update>
	//Flight_modes
	mask_def_on_the_ground(&event[EVENT_ON_THE_GROUND]);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f89e 	bl	8002b24 <mask_def_on_the_ground>
	mask_def_manual_accro(&event[EVENT_MANUAL_ACCRO]);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f8c3 	bl	8002b7a <mask_def_manual_accro>
	mask_def_arming(&event[EVENT_ARMING]);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f8d0 	bl	8002ba0 <mask_def_arming>
	mask_def_gyro_acc_calibration(&event[EVENT_GYRO_ACC_CALIBRATION]);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f8e9 	bl	8002bde <mask_def_gyro_acc_calibration>

}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <mask_def_gyro_init_ok>:

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff58 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3338      	adds	r3, #56	; 0x38
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff52 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3370      	adds	r3, #112	; 0x70
 8002a36:	2101      	movs	r1, #1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff4c 	bl	80028d6 <MASK_set_flag>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff3f 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3338      	adds	r3, #56	; 0x38
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff39 	bl	80028d6 <MASK_set_flag>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2104      	movs	r1, #4
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff2c 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3338      	adds	r3, #56	; 0x38
 8002a82:	2104      	movs	r1, #4
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff26 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3370      	adds	r3, #112	; 0x70
 8002a8e:	2105      	movs	r1, #5
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff20 	bl	80028d6 <MASK_set_flag>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff13 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3338      	adds	r3, #56	; 0x38
 8002ab4:	2106      	movs	r1, #6
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff0d 	bl	80028d6 <MASK_set_flag>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2104      	movs	r1, #4
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff00 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fefb 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fef6 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3338      	adds	r3, #56	; 0x38
 8002aee:	2107      	movs	r1, #7
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fef0 	bl	80028d6 <MASK_set_flag>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <mask_def_ibus_data_rdy>:

// ----------------	Radio ------------------------

static void mask_def_ibus_data_rdy(Event_t * event){
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	//Si flag data rdy on y go
	MASK_set_flag(&event->mask_and[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2108      	movs	r1, #8
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fee3 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3338      	adds	r3, #56	; 0x38
 8002b14:	2108      	movs	r1, #8
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fedd 	bl	80028d6 <MASK_set_flag>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <mask_def_on_the_ground>:

// ----------------	Flight Modes ------------------------
static void mask_def_on_the_ground(Event_t * event){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_FLYING], FLAG_FLYING);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	211d      	movs	r1, #29
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fed0 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_FLYING], FLAG_CHAN_5_POS_1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3338      	adds	r3, #56	; 0x38
 8002b3a:	2109      	movs	r1, #9
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff feca 	bl	80028d6 <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_ARMING], FLAG_ARMING);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3308      	adds	r3, #8
 8002b46:	2118      	movs	r1, #24
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fec4 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_ARMING], FLAG_CHAN_5_POS_1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3340      	adds	r3, #64	; 0x40
 8002b52:	2109      	movs	r1, #9
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff febe 	bl	80028d6 <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_IN_PROGRESS);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3310      	adds	r3, #16
 8002b5e:	211b      	movs	r1, #27
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff feb8 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_DONE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3348      	adds	r3, #72	; 0x48
 8002b6a:	211c      	movs	r1, #28
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff feb2 	bl	80028d6 <MASK_set_flag>


}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <mask_def_manual_accro>:

static void mask_def_manual_accro(Event_t * event){
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ON_THE_GROUND], FLAG_ARMED);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2119      	movs	r1, #25
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fea5 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ON_THE_GROUND], FLAG_ARMED);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3338      	adds	r3, #56	; 0x38
 8002b90:	2119      	movs	r1, #25
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fe9f 	bl	80028d6 <MASK_set_flag>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <mask_def_arming>:

static void mask_def_arming(Event_t * event){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ARMING_ON_THE_GROUND], FLAG_GYRO_OK);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe92 	bl	80028d6 <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_ARMING_ON_THE_GROUND], FLAG_CHAN_5_POS_3);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3338      	adds	r3, #56	; 0x38
 8002bb6:	210a      	movs	r1, #10
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fe8c 	bl	80028d6 <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_FLYING);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3370      	adds	r3, #112	; 0x70
 8002bc2:	211d      	movs	r1, #29
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe86 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_BUSY);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3370      	adds	r3, #112	; 0x70
 8002bce:	211a      	movs	r1, #26
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fe80 	bl	80028d6 <MASK_set_flag>


}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <mask_def_gyro_acc_calibration>:

static void mask_def_gyro_acc_calibration(Event_t * event){
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_GYRO_ACC_CALIBRATION], FLAG_GYRO_OK);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fe73 	bl	80028d6 <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_GYRO_ACC_CALIBRATION], FLAG_CHAN_9_PUSH);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3338      	adds	r3, #56	; 0x38
 8002bf4:	2113      	movs	r1, #19
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fe6d 	bl	80028d6 <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_BUSY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3370      	adds	r3, #112	; 0x70
 8002c00:	211a      	movs	r1, #26
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fe67 	bl	80028d6 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_FLYING);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3370      	adds	r3, #112	; 0x70
 8002c0c:	211d      	movs	r1, #29
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fe61 	bl	80028d6 <MASK_set_flag>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 8002c24:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <SCHEDULER_init+0x20>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 8002c2a:	f7ff fb51 	bl	80022d0 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa8e 	bl	8003150 <tasks_init>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20001744 	.word	0x20001744

08002c40 <SCHEDULER_run>:

void SCHEDULER_run(void){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8002c46:	f000 fbc9 	bl	80033dc <TIME_us>
 8002c4a:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 8002c4c:	f000 f886 	bl	8002d5c <get_first_task>
 8002c50:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
	while(task_queu_position < task_queu_size && task != NULL){
 8002c56:	e046      	b.n	8002ce6 <SCHEDULER_run+0xa6>

		switch(task->mode){
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	7a1b      	ldrb	r3, [r3, #8]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d020      	beq.n	8002ca2 <SCHEDULER_run+0x62>
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d002      	beq.n	8002c6a <SCHEDULER_run+0x2a>
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d008      	beq.n	8002c7a <SCHEDULER_run+0x3a>
				task->mode = TASK_MODE_WAIT ;
				break;
			case TASK_MODE_TIMMER :
			case TASK_MODE_WAIT:
			default:
				break;
 8002c68:	e027      	b.n	8002cba <SCHEDULER_run+0x7a>
				current_time_us = task_process(task, current_time_us);
 8002c6a:	68f9      	ldr	r1, [r7, #12]
 8002c6c:	68b8      	ldr	r0, [r7, #8]
 8002c6e:	f000 f89b 	bl	8002da8 <task_process>
 8002c72:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8002c74:	2301      	movs	r3, #1
 8002c76:	607b      	str	r3, [r7, #4]
				break;
 8002c78:	e01f      	b.n	8002cba <SCHEDULER_run+0x7a>
				if(current_time_us >= task->desired_next_start_us){
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d319      	bcc.n	8002cb8 <SCHEDULER_run+0x78>
					current_time_us = task_process(task, current_time_us);
 8002c84:	68f9      	ldr	r1, [r7, #12]
 8002c86:	68b8      	ldr	r0, [r7, #8]
 8002c88:	f000 f88e 	bl	8002da8 <task_process>
 8002c8c:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us += task->desired_period_us ;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	6a1a      	ldr	r2, [r3, #32]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	441a      	add	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	607b      	str	r3, [r7, #4]
				break;
 8002ca0:	e00a      	b.n	8002cb8 <SCHEDULER_run+0x78>
				current_time_us = task_process(task, current_time_us);
 8002ca2:	68f9      	ldr	r1, [r7, #12]
 8002ca4:	68b8      	ldr	r0, [r7, #8]
 8002ca6:	f000 f87f 	bl	8002da8 <task_process>
 8002caa:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8002cac:	2301      	movs	r3, #1
 8002cae:	607b      	str	r3, [r7, #4]
				task->mode = TASK_MODE_WAIT ;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	721a      	strb	r2, [r3, #8]
				break;
 8002cb6:	e000      	b.n	8002cba <SCHEDULER_run+0x7a>
				break;
 8002cb8:	bf00      	nop
		}
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00d      	beq.n	8002cdc <SCHEDULER_run+0x9c>
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f000 fb77 	bl	80033b4 <TASK_get_task>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d006      	beq.n	8002cdc <SCHEDULER_run+0x9c>
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f000 fb70 	bl	80033b4 <TASK_get_task>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d10e      	bne.n	8002cfa <SCHEDULER_run+0xba>
			//Stop the while loop if we executed a task
			break;
		task_executed = FALSE ;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	607b      	str	r3, [r7, #4]
		task = get_next_task();
 8002ce0:	f000 f84c 	bl	8002d7c <get_next_task>
 8002ce4:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL){
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <SCHEDULER_run+0xc4>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <SCHEDULER_run+0xc8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d204      	bcs.n	8002cfc <SCHEDULER_run+0xbc>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1af      	bne.n	8002c58 <SCHEDULER_run+0x18>
	}
}
 8002cf8:	e000      	b.n	8002cfc <SCHEDULER_run+0xbc>
			break;
 8002cfa:	bf00      	nop
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20001740 	.word	0x20001740
 8002d08:	2000173c 	.word	0x2000173c

08002d0c <SCHEDULER_task>:

void SCHEDULER_task(void){
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
	//Changement de mode pour les tâches
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	71fb      	strb	r3, [r7, #7]
 8002d16:	e00b      	b.n	8002d30 <SCHEDULER_task+0x24>
	{
		task_to_change[t]->mode = change_mode[t] ;
 8002d18:	79fa      	ldrb	r2, [r7, #7]
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	490c      	ldr	r1, [pc, #48]	; (8002d50 <SCHEDULER_task+0x44>)
 8002d1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d22:	490c      	ldr	r1, [pc, #48]	; (8002d54 <SCHEDULER_task+0x48>)
 8002d24:	5c8a      	ldrb	r2, [r1, r2]
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	721a      	strb	r2, [r3, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	71fb      	strb	r3, [r7, #7]
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <SCHEDULER_task+0x4c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d3ed      	bcc.n	8002d18 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <SCHEDULER_task+0x4c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20001748 	.word	0x20001748
 8002d54:	20001780 	.word	0x20001780
 8002d58:	2000178e 	.word	0x2000178e

08002d5c <get_first_task>:


	return load_pourcentage ;
}

static task_t * get_first_task(void){
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <get_first_task+0x18>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <get_first_task+0x1c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	20001740 	.word	0x20001740
 8002d78:	20001704 	.word	0x20001704

08002d7c <get_next_task>:

static task_t * get_next_task(void){
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <get_next_task+0x24>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <get_next_task+0x24>)
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <get_next_task+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <get_next_task+0x28>)
 8002d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20001740 	.word	0x20001740
 8002da4:	20001704 	.word	0x20001704

08002da8 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <task_process+0x16>
		return current_time_us ;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	e09d      	b.n	8002efa <task_process+0x152>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002de2:	6839      	ldr	r1, [r7, #0]
 8002de4:	1a8a      	subs	r2, r1, r2
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	3308      	adds	r3, #8
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0e:	4a3d      	ldr	r2, [pc, #244]	; (8002f04 <task_process+0x15c>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	091a      	lsrs	r2, r3, #4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	619a      	str	r2, [r3, #24]

	task->last_execution_us = current_time_us ;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	6838      	ldr	r0, [r7, #0]
 8002e26:	4798      	blx	r3
	current_time_us = TIME_us();
 8002e28:	f000 fad8 	bl	80033dc <TIME_us>
 8002e2c:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	311e      	adds	r1, #30
 8002e3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e42:	1ad2      	subs	r2, r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8002e54:	6839      	ldr	r1, [r7, #0]
 8002e56:	1ac9      	subs	r1, r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	321e      	adds	r2, #30
 8002e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	311e      	adds	r1, #30
 8002e6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	bf38      	it	cc
 8002e76:	461a      	movcc	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	311e      	adds	r1, #30
 8002e8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e90:	441a      	add	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002e9e:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <task_process+0x15c>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	091a      	lsrs	r2, r3, #4
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	321e      	adds	r2, #30
 8002eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ebc:	d90c      	bls.n	8002ed8 <task_process+0x130>
		task->duration_us_average_array[task->average_index] ++ ;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	f103 011e 	add.w	r1, r3, #30
 8002eca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002ece:	1c51      	adds	r1, r2, #1
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	331e      	adds	r3, #30
 8002ed4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002eec:	2b14      	cmp	r3, #20
 8002eee:	d103      	bne.n	8002ef8 <task_process+0x150>
		task->average_index = 0 ;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 8002ef8:	683b      	ldr	r3, [r7, #0]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	cccccccd 	.word	0xcccccccd

08002f08 <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	71fb      	strb	r3, [r7, #7]
	if(enable)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <SCHEDULER_enable_task+0x24>
		queu_add(TASK_get_task(id));
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fa49 	bl	80033b4 <TASK_get_task>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f873 	bl	8003010 <queu_add>
	else
		queu_remove(TASK_get_task(id));
}
 8002f2a:	e007      	b.n	8002f3c <SCHEDULER_enable_task+0x34>
		queu_remove(TASK_get_task(id));
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fa40 	bl	80033b4 <TASK_get_task>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f8c8 	bl	80030cc <queu_remove>
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <SCHEDULER_task_set_mode>:

void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	71fb      	strb	r3, [r7, #7]
 8002f50:	4613      	mov	r3, r2
 8002f52:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f54:	b672      	cpsid	i
	__disable_irq();
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <SCHEDULER_task_set_mode+0x4c>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	461c      	mov	r4, r3
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fa27 	bl	80033b4 <TASK_get_task>
 8002f66:	4602      	mov	r2, r0
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <SCHEDULER_task_set_mode+0x50>)
 8002f6a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <SCHEDULER_task_set_mode+0x4c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	b2d1      	uxtb	r1, r2
 8002f78:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <SCHEDULER_task_set_mode+0x4c>)
 8002f7a:	7011      	strb	r1, [r2, #0]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4a06      	ldr	r2, [pc, #24]	; (8002f98 <SCHEDULER_task_set_mode+0x54>)
 8002f80:	79bb      	ldrb	r3, [r7, #6]
 8002f82:	5453      	strb	r3, [r2, r1]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f84:	b662      	cpsie	i
	__enable_irq();
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000178e 	.word	0x2000178e
 8002f94:	20001748 	.word	0x20001748
 8002f98:	20001780 	.word	0x20001780

08002f9c <SCHEDULER_reschedule_task>:

void SCHEDULER_reschedule_task(task_ids_t id, uint32_t new_period_us){
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
	TASK_get_task(id)->desired_period_us = new_period_us ;
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa02 	bl	80033b4 <TASK_get_task>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6153      	str	r3, [r2, #20]
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <queu_contains+0x12>
		return FALSE ;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e014      	b.n	8002ffc <queu_contains+0x3c>

	for(uint32_t t = 0; t < task_queu_size; t++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	e00b      	b.n	8002ff0 <queu_contains+0x30>
		if(task_queu[t] == task)
 8002fd8:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <queu_contains+0x48>)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d101      	bne.n	8002fea <queu_contains+0x2a>
			return TRUE ;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e008      	b.n	8002ffc <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3301      	adds	r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <queu_contains+0x4c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d3ee      	bcc.n	8002fd8 <queu_contains+0x18>
	return FALSE ;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	20001704 	.word	0x20001704
 800300c:	2000173c 	.word	0x2000173c

08003010 <queu_add>:

static bool_e queu_add(task_t * task){
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ffd1 	bl	8002fc0 <queu_contains>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d106      	bne.n	8003032 <queu_add+0x22>
 8003024:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <queu_add+0xb4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b0d      	cmp	r3, #13
 800302a:	d802      	bhi.n	8003032 <queu_add+0x22>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <queu_add+0x26>
		return FALSE ;
 8003032:	2300      	movs	r3, #0
 8003034:	e041      	b.n	80030ba <queu_add+0xaa>


	uint32_t t = 0 ;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 800303a:	e03a      	b.n	80030b2 <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 800303c:	4a22      	ldr	r2, [pc, #136]	; (80030c8 <queu_add+0xb8>)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <queu_add+0x50>
		{
			task_queu[t] = task ;
 8003048:	491f      	ldr	r1, [pc, #124]	; (80030c8 <queu_add+0xb8>)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8003052:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <queu_add+0xb4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <queu_add+0xb4>)
 800305a:	6013      	str	r3, [r2, #0]
			return TRUE;
 800305c:	2301      	movs	r3, #1
 800305e:	e02c      	b.n	80030ba <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	4918      	ldr	r1, [pc, #96]	; (80030c8 <queu_add+0xb8>)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d91c      	bls.n	80030ac <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3301      	adds	r3, #1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <queu_add+0xb8>)
 800307a:	1898      	adds	r0, r3, r2
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <queu_add+0xb8>)
 8003082:	1899      	adds	r1, r3, r2
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <queu_add+0xb4>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	461a      	mov	r2, r3
 8003090:	f008 fc7f 	bl	800b992 <memmove>
			task_queu[t] = task ;
 8003094:	490c      	ldr	r1, [pc, #48]	; (80030c8 <queu_add+0xb8>)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <queu_add+0xb4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3301      	adds	r3, #1
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <queu_add+0xb4>)
 80030a6:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e006      	b.n	80030ba <queu_add+0xaa>
		}
		t++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b0d      	cmp	r3, #13
 80030b6:	d9c1      	bls.n	800303c <queu_add+0x2c>
	}
	return FALSE ;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2000173c 	.word	0x2000173c
 80030c8:	20001704 	.word	0x20001704

080030cc <queu_remove>:

static bool_e queu_remove(task_t * task){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ff73 	bl	8002fc0 <queu_contains>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <queu_remove+0x1a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <queu_remove+0x1e>
		return FALSE ;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e02a      	b.n	8003140 <queu_remove+0x74>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e021      	b.n	8003134 <queu_remove+0x68>
		if(task == task_queu[t]){
 80030f0:	4a15      	ldr	r2, [pc, #84]	; (8003148 <queu_remove+0x7c>)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d117      	bne.n	800312e <queu_remove+0x62>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4a11      	ldr	r2, [pc, #68]	; (8003148 <queu_remove+0x7c>)
 8003104:	1898      	adds	r0, r3, r2
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3301      	adds	r3, #1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <queu_remove+0x7c>)
 800310e:	1899      	adds	r1, r3, r2
 8003110:	4b0e      	ldr	r3, [pc, #56]	; (800314c <queu_remove+0x80>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	461a      	mov	r2, r3
 800311c:	f008 fc39 	bl	800b992 <memmove>
			task_queu_size -- ;
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <queu_remove+0x80>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3b01      	subs	r3, #1
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <queu_remove+0x80>)
 8003128:	6013      	str	r3, [r2, #0]
			return TRUE ;
 800312a:	2301      	movs	r3, #1
 800312c:	e008      	b.n	8003140 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3301      	adds	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <queu_remove+0x80>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	429a      	cmp	r2, r3
 800313c:	d3d8      	bcc.n	80030f0 <queu_remove+0x24>
		}
	}
	return FALSE ;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20001704 	.word	0x20001704
 800314c:	2000173c 	.word	0x2000173c

08003150 <tasks_init>:

static uint32_t start_time_gyro = 0;
static uint32_t end_time_filtering_gyro= 0;


void tasks_init(system_t * sys_){
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 8003158:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <tasks_init+0x78>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 800315e:	2101      	movs	r1, #1
 8003160:	2000      	movs	r0, #0
 8003162:	f7ff fed1 	bl	8002f08 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 8003166:	2101      	movs	r1, #1
 8003168:	2001      	movs	r0, #1
 800316a:	f7ff fecd 	bl	8002f08 <SCHEDULER_enable_task>

	SCHEDULER_enable_task(TASK_LED, TRUE);
 800316e:	2101      	movs	r1, #1
 8003170:	2003      	movs	r0, #3
 8003172:	f7ff fec9 	bl	8002f08 <SCHEDULER_enable_task>
	//SCHEDULER_enable_task(TASK_PRINTF, TRUE);
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 8003176:	2101      	movs	r1, #1
 8003178:	2008      	movs	r0, #8
 800317a:	f7ff fec5 	bl	8002f08 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 800317e:	2101      	movs	r1, #1
 8003180:	2005      	movs	r0, #5
 8003182:	f7ff fec1 	bl	8002f08 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 8003186:	2101      	movs	r1, #1
 8003188:	2004      	movs	r0, #4
 800318a:	f7ff febd 	bl	8002f08 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 800318e:	2101      	movs	r1, #1
 8003190:	2007      	movs	r0, #7
 8003192:	f7ff feb9 	bl	8002f08 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_UPDATE, TRUE);
 8003196:	2101      	movs	r1, #1
 8003198:	2009      	movs	r0, #9
 800319a:	f7ff feb5 	bl	8002f08 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_ANALYSIS, TRUE);
 800319e:	2101      	movs	r1, #1
 80031a0:	200a      	movs	r0, #10
 80031a2:	f7ff feb1 	bl	8002f08 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_HIGH_LVL, TRUE);
 80031a6:	2101      	movs	r1, #1
 80031a8:	200b      	movs	r0, #11
 80031aa:	f7ff fead 	bl	8002f08 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_TELEMETRIE, TRUE);
 80031ae:	2101      	movs	r1, #1
 80031b0:	200c      	movs	r0, #12
 80031b2:	f7ff fea9 	bl	8002f08 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_LOGGER, TRUE);
 80031b6:	2101      	movs	r1, #1
 80031b8:	200d      	movs	r0, #13
 80031ba:	f7ff fea5 	bl	8002f08 <SCHEDULER_enable_task>

}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20001790 	.word	0x20001790

080031cc <process_print_f>:

void process_print_f(uint32_t current_time_us){
 80031cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031d0:	b088      	sub	sp, #32
 80031d2:	af04      	add	r7, sp, #16
 80031d4:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);
//	gyro_t * gyro = &sys->sensors.gyro ;
//	acc_t * acc = &sys->sensors.acc ;
	orientation_t * ori = &sys->orientation ;
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <process_print_f+0x5c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80031de:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	//printf("%f\t%f\t%f\t%f\t%f\t%f\t%lu\n",acc->raw[0], acc->raw[1], acc->raw[2],gyro->raw[0], gyro->raw[1], gyro->raw[2], TASK_get_task(TASK_GYRO_UPDATE)->duration_us);
	//printf("%f\t%f\t%lu\n", acc->filtered[ACC_AXE_Z], gyro->filtered[ACC_AXE_X], delta_1);
	//printf("%f\n", acc->filtered[GYRO_AXE_X]);
	//printf("%lu\n", delta_1);
	printf("%f\t%f\t%f\n", ori->angular_position[0], ori->angular_velocity[0], ori->acc_angles[0]);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd f9af 	bl	8000548 <__aeabi_f2d>
 80031ea:	4680      	mov	r8, r0
 80031ec:	4689      	mov	r9, r1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f9a7 	bl	8000548 <__aeabi_f2d>
 80031fa:	4604      	mov	r4, r0
 80031fc:	460d      	mov	r5, r1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f9a0 	bl	8000548 <__aeabi_f2d>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003210:	e9cd 4500 	strd	r4, r5, [sp]
 8003214:	4642      	mov	r2, r8
 8003216:	464b      	mov	r3, r9
 8003218:	4804      	ldr	r0, [pc, #16]	; (800322c <process_print_f+0x60>)
 800321a:	f009 f837 	bl	800c28c <iprintf>
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003228:	20001790 	.word	0x20001790
 800322c:	0800e5a8 	.word	0x0800e5a8

08003230 <process_led>:


void process_led(uint32_t current_time_us){
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
//	uint8_t data[2];
//	uint8_t len = DATA_LOGGER_Get_Data(DATA_ID_ROLL_GYRO, data);
//	TELEMETRY_Send_Data(&sys->radio.telemetry, data, len);
	IHM_Update();
 8003238:	f7fe ff28 	bl	800208c <IHM_Update>
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <process_gyro_update>:

void process_gyro_update(uint32_t current_time_us){
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	start_time_gyro = current_time_us ;
 800324c:	4a06      	ldr	r2, [pc, #24]	; (8003268 <process_gyro_update+0x24>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <process_gyro_update+0x28>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3330      	adds	r3, #48	; 0x30
 8003258:	4618      	mov	r0, r3
 800325a:	f000 ff2d 	bl	80040b8 <GYRO_ACC_update_dma>

}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20001794 	.word	0x20001794
 800326c:	20001790 	.word	0x20001790

08003270 <process_gyro_filter>:

void process_gyro_filter(uint32_t current_time_us){
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	end_time_filtering_gyro = current_time_us ;
 8003278:	4a06      	ldr	r2, [pc, #24]	; (8003294 <process_gyro_filter+0x24>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6013      	str	r3, [r2, #0]

	GYRO_process_lpf(&sys->sensors.gyro);
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <process_gyro_filter+0x28>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3330      	adds	r3, #48	; 0x30
 8003284:	4618      	mov	r0, r3
 8003286:	f000 ff33 	bl	80040f0 <GYRO_process_lpf>

}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20001798 	.word	0x20001798
 8003298:	20001790 	.word	0x20001790

0800329c <process_acc_update>:

void process_acc_update(uint32_t current_time_us){
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <process_acc_update+0x1c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	33a4      	adds	r3, #164	; 0xa4
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fdbc 	bl	8003e28 <ACC_update>
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20001790 	.word	0x20001790

080032bc <process_acc_filter>:

void process_acc_filter(uint32_t current_time_us){
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
	ACC_process_lpf(&sys->sensors.acc);
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <process_acc_filter+0x1c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	33a4      	adds	r3, #164	; 0xa4
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fdca 	bl	8003e64 <ACC_process_lpf>
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20001790 	.word	0x20001790

080032dc <process_event_main>:

void process_event_main(uint32_t current_time_us){
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7ff f9d9 	bl	800269c <EVENT_process>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <process_orientation_update>:

void process_orientation_update(uint32_t current_time_us){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

	ORIENTATION_Update(&sys->orientation);
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <process_orientation_update+0x2c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe fa4d 	bl	80017a4 <ORIENTATION_Update>

	REGULATION_POSITION_Process();
 800330a:	f000 fd29 	bl	8003d60 <REGULATION_POSITION_Process>
	REGULATION_ORIENTATION_Process();
 800330e:	f000 fc69 	bl	8003be4 <REGULATION_ORIENTATION_Process>
	PROPULSION_Update_Motors();
 8003312:	f000 f8ab 	bl	800346c <PROPULSION_Update_Motors>
	//delta_1 = (TIME_us() - start_time_gyro) ;
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20001790 	.word	0x20001790

08003324 <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 800332c:	f7ff fcee 	bl	8002d0c <SCHEDULER_task>
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <process_controller_channel_update>:

void process_controller_channel_update(uint32_t current_time_us){
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	if(CONTROLLER_Update_Channels_Array())
 8003340:	f000 fbee 	bl	8003b20 <CONTROLLER_Update_Channels_Array>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <process_controller_channel_update+0x1a>
		SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_ANALYSIS, TASK_MODE_EVENT);
 800334a:	2102      	movs	r1, #2
 800334c:	200a      	movs	r0, #10
 800334e:	f7ff fdf9 	bl	8002f44 <SCHEDULER_task_set_mode>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <process_controller_channel_analysis>:

void process_controller_channel_analysis(uint32_t current_time_us){
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
	CONTROLLER_Update_Channels_Analysis();
 8003362:	f000 f95f 	bl	8003624 <CONTROLLER_Update_Channels_Analysis>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <process_high_lvl>:

void process_high_lvl(uint32_t current_time_us){
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
	EVENT_process(TRUE);
 8003376:	2001      	movs	r0, #1
 8003378:	f7ff f990 	bl	800269c <EVENT_process>
	FLIGHT_MODE_Main(current_time_us);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fe fca7 	bl	8001cd0 <FLIGHT_MODE_Main>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <process_telemetry>:

void process_telemetry(uint32_t current_time_us){
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
	TELEMETRY_Process(current_time_us);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f002 fe00 	bl	8005f98 <TELEMETRY_Process>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <process_logger>:

void process_logger(uint32_t current_time_us){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	DATA_LOGGER_Main();
 80033a8:	f7fd fecc 	bl	8001144 <DATA_LOGGER_Main>
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <TASK_get_task>:
	[TASK_CONTROLLER_CHANNEL_UPDATE] = 		DEFINE_TASK(TASK_CONTROLLER_CHANNEL_UPDATE, 	PRIORITY_MEDIUM,	process_controller_channel_update, 	PERIOD_US_FROM_HERTZ(1), 	TASK_MODE_EVENT),
	[TASK_CONTROLLER_CHANNEL_ANALYSIS] = 	DEFINE_TASK(TASK_CONTROLLER_CHANNEL_ANALYSIS, 	PRIORITY_MEDIUM,	process_controller_channel_analysis, 	PERIOD_US_FROM_HERTZ(1), 	TASK_MODE_EVENT),
};


task_t * TASK_get_task(task_ids_t id){
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	22d0      	movs	r2, #208	; 0xd0
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <TASK_get_task+0x24>)
 80033c8:	4413      	add	r3, r2
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	200007d4 	.word	0x200007d4

080033dc <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80033e2:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 80033e4:	f002 ffda 	bl	800639c <HAL_GetTick>
 80033e8:	4603      	mov	r3, r0
 80033ea:	3301      	adds	r3, #1
 80033ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033f0:	fb02 f203 	mul.w	r2, r2, r3
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <TIME_us+0x50>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	08db      	lsrs	r3, r3, #3
 80033fa:	490d      	ldr	r1, [pc, #52]	; (8003430 <TIME_us+0x54>)
 80033fc:	fba1 1303 	umull	r1, r3, r1, r3
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8003406:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s ait pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us >= t_us)
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <TIME_us+0x58>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d803      	bhi.n	800341a <TIME_us+0x3e>
		t_us += 1000;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003418:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 800341a:	4a06      	ldr	r2, [pc, #24]	; (8003434 <TIME_us+0x58>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6013      	str	r3, [r2, #0]

	return t_us;
 8003420:	687b      	ldr	r3, [r7, #4]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	e000e010 	.word	0xe000e010
 8003430:	18618619 	.word	0x18618619
 8003434:	2000179c 	.word	0x2000179c

08003438 <PROPULSION_Init>:
#define ROLL prop->consigne[PROP_CONSIGNE_ROLL]
#define PITCH prop->consigne[PROP_CONSIGNE_PITCH]
#define YAW prop->consigne[PROP_CONSIGNE_YAW]
#define THRUST prop->consigne[PROP_CONSIGNE_THRUST]

void PROPULSION_Init(propulsion_t * prop_, TIM_HandleTypeDef * htim){
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	prop = prop_;
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <PROPULSION_Init+0x30>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6013      	str	r3, [r2, #0]

	MOTORS_Init(&prop->motors, htim, prop->motors_outputs, TRUE);
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <PROPULSION_Init+0x30>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <PROPULSION_Init+0x30>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f103 0218 	add.w	r2, r3, #24
 8003456:	2301      	movs	r3, #1
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	f008 f8f7 	bl	800b64c <MOTORS_Init>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200017a0 	.word	0x200017a0

0800346c <PROPULSION_Update_Motors>:

void PROPULSION_Update_Motors(void){
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0

	//Mixage des sorties
	int16_t m1 = THRUST - PITCH - ROLL + YAW;
 8003472:	4b4c      	ldr	r3, [pc, #304]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800347a:	b29a      	uxth	r2, r3
 800347c:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003484:	b29b      	uxth	r3, r3
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	b29a      	uxth	r2, r3
 800348a:	4b46      	ldr	r3, [pc, #280]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003492:	b29b      	uxth	r3, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	b29a      	uxth	r2, r3
 8003498:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	80fb      	strh	r3, [r7, #6]
	int16_t m2 = THRUST - PITCH + ROLL - YAW ;
 80034a8:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	4b3c      	ldr	r3, [pc, #240]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	4b35      	ldr	r3, [pc, #212]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	b29b      	uxth	r3, r3
 80034dc:	80bb      	strh	r3, [r7, #4]
	int16_t m3 = THRUST + PITCH + ROLL + YAW ;
 80034de:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	4413      	add	r3, r2
 8003502:	b29a      	uxth	r2, r3
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800350c:	b29b      	uxth	r3, r3
 800350e:	4413      	add	r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	807b      	strh	r3, [r7, #2]
	int16_t m4 = THRUST + PITCH - ROLL - YAW ;
 8003514:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800351c:	b29a      	uxth	r2, r3
 800351e:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003526:	b29b      	uxth	r3, r3
 8003528:	4413      	add	r3, r2
 800352a:	b29a      	uxth	r2, r3
 800352c:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003534:	b29b      	uxth	r3, r3
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	b29a      	uxth	r2, r3
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003542:	b29b      	uxth	r3, r3
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	b29b      	uxth	r3, r3
 8003548:	803b      	strh	r3, [r7, #0]
	prop->motors_outputs[MOTOR_FL] = (uint16_t)((m1 > 0) ? m1 : 0);
 800354a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003552:	b21a      	sxth	r2, r3
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	b292      	uxth	r2, r2
 800355a:	83da      	strh	r2, [r3, #30]
	prop->motors_outputs[MOTOR_FR] = (uint16_t)((m2 > 0) ? m2 : 0);
 800355c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003564:	b21a      	sxth	r2, r3
 8003566:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b292      	uxth	r2, r2
 800356c:	839a      	strh	r2, [r3, #28]
	prop->motors_outputs[MOTOR_BR] = (uint16_t)((m3 > 0) ? m3 : 0);
 800356e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003572:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003576:	b21a      	sxth	r2, r3
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	b292      	uxth	r2, r2
 800357e:	831a      	strh	r2, [r3, #24]
	prop->motors_outputs[MOTOR_BL] = (uint16_t)((m4 > 0) ? m4 : 0);
 8003580:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003584:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003588:	b21a      	sxth	r2, r3
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	b292      	uxth	r2, r2
 8003590:	835a      	strh	r2, [r3, #26]
	MOTORS_Change_output(&prop->motors);
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <PROPULSION_Update_Motors+0x138>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f008 f88f 	bl	800b6ba <MOTORS_Change_output>

}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	200017a0 	.word	0x200017a0

080035a8 <CONTROLLER_Init>:
//Controller used
static controller_t * controller ;
//Private functions prototypes
static void flag_process();

void CONTROLLER_Init(controller_t * controller_, ibus_t * ibus){
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
	//Sauvegarde la structure utilsié
	controller = controller_ ;
 80035b2:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <CONTROLLER_Init+0x78>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6013      	str	r3, [r2, #0]
	controller->channels = ibus->channels ;
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <CONTROLLER_Init+0x78>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	321a      	adds	r2, #26
 80035c0:	601a      	str	r2, [r3, #0]

	//Configuration du mode d'analyse pour les channels
	controller->analysis_mode[0] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 80035c2:	4b17      	ldr	r3, [pc, #92]	; (8003620 <CONTROLLER_Init+0x78>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2201      	movs	r2, #1
 80035c8:	711a      	strb	r2, [r3, #4]
	controller->analysis_mode[1] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <CONTROLLER_Init+0x78>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2201      	movs	r2, #1
 80035d0:	715a      	strb	r2, [r3, #5]
	controller->analysis_mode[2] = ANALYSIS_MODE_STICK_LVL ;
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <CONTROLLER_Init+0x78>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2202      	movs	r2, #2
 80035d8:	719a      	strb	r2, [r3, #6]
	controller->analysis_mode[3] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <CONTROLLER_Init+0x78>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2201      	movs	r2, #1
 80035e0:	71da      	strb	r2, [r3, #7]
	controller->analysis_mode[4] = ANALYSIS_MODE_SWITCH_MODE ;
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <CONTROLLER_Init+0x78>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2204      	movs	r2, #4
 80035e8:	721a      	strb	r2, [r3, #8]
	controller->analysis_mode[5] = ANALYSIS_MODE_SWITCH_MODE ;
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <CONTROLLER_Init+0x78>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2204      	movs	r2, #4
 80035f0:	725a      	strb	r2, [r3, #9]
	controller->analysis_mode[6] = ANALYSIS_MODE_SWITCH_MODE ;
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <CONTROLLER_Init+0x78>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2204      	movs	r2, #4
 80035f8:	729a      	strb	r2, [r3, #10]
	controller->analysis_mode[7] = ANALYSIS_MODE_SWITCH_MODE ;
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <CONTROLLER_Init+0x78>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2204      	movs	r2, #4
 8003600:	72da      	strb	r2, [r3, #11]
	controller->analysis_mode[8] = ANALYSIS_MODE_BUTTON_PUSH ;
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <CONTROLLER_Init+0x78>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2206      	movs	r2, #6
 8003608:	731a      	strb	r2, [r3, #12]
	controller->analysis_mode[9] = ANALYSIS_MODE_BUTTON_ON_OFF ;
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <CONTROLLER_Init+0x78>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2205      	movs	r2, #5
 8003610:	735a      	strb	r2, [r3, #13]

}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	200017a4 	.word	0x200017a4

08003624 <CONTROLLER_Update_Channels_Analysis>:

void CONTROLLER_Update_Channels_Analysis(void){
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
	//Analyse des channels
		bool_e button_state ;
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 800362a:	2300      	movs	r3, #0
 800362c:	71fb      	strb	r3, [r7, #7]
 800362e:	e1a0      	b.n	8003972 <CONTROLLER_Update_Channels_Analysis+0x34e>
			switch (controller->analysis_mode[ch]) {
 8003630:	4bac      	ldr	r3, [pc, #688]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	4413      	add	r3, r2
 800363a:	791b      	ldrb	r3, [r3, #4]
 800363c:	2b06      	cmp	r3, #6
 800363e:	f200 818d 	bhi.w	800395c <CONTROLLER_Update_Channels_Analysis+0x338>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <CONTROLLER_Update_Channels_Analysis+0x24>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	0800395d 	.word	0x0800395d
 800364c:	08003665 	.word	0x08003665
 8003650:	080036b1 	.word	0x080036b1
 8003654:	0800395d 	.word	0x0800395d
 8003658:	080038bd 	.word	0x080038bd
 800365c:	08003779 	.word	0x08003779
 8003660:	0800382d 	.word	0x0800382d
				case ANALYSIS_MODE_NONE:
					//On fait R
					break;

				case ANALYSIS_MODE_STICK_DEAD_BAND :
					if(abs(controller->channels[ch] - 1500) < JOYCTICK_DEAD_BAND)
 8003664:	4b9f      	ldr	r3, [pc, #636]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003678:	f113 0f1d 	cmn.w	r3, #29
 800367c:	f2c0 8170 	blt.w	8003960 <CONTROLLER_Update_Channels_Analysis+0x33c>
 8003680:	4b98      	ldr	r3, [pc, #608]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003694:	2b1d      	cmp	r3, #29
 8003696:	f300 8163 	bgt.w	8003960 <CONTROLLER_Update_Channels_Analysis+0x33c>
						controller->channels[ch] = 1500 ;
 800369a:	4b92      	ldr	r3, [pc, #584]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80036ac:	801a      	strh	r2, [r3, #0]
					break;
 80036ae:	e157      	b.n	8003960 <CONTROLLER_Update_Channels_Analysis+0x33c>

				case ANALYSIS_MODE_STICK_LVL :
					if(controller->channels[ch] > 1000 && controller->channels[ch] <= 1050)
 80036b0:	4b8c      	ldr	r3, [pc, #560]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036c4:	d914      	bls.n	80036f0 <CONTROLLER_Update_Channels_Analysis+0xcc>
 80036c6:	4b87      	ldr	r3, [pc, #540]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	f240 421a 	movw	r2, #1050	; 0x41a
 80036da:	4293      	cmp	r3, r2
 80036dc:	d808      	bhi.n	80036f0 <CONTROLLER_Update_Channels_Analysis+0xcc>
						controller->throttle_lvl[ch] = THROTTLE_LVL_NULL ;
 80036de:	4b81      	ldr	r3, [pc, #516]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	4413      	add	r3, r2
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2020 	strb.w	r2, [r3, #32]
 80036ee:	e042      	b.n	8003776 <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1050 && controller->channels[ch] <= 1150)
 80036f0:	4b7c      	ldr	r3, [pc, #496]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	f240 421a 	movw	r2, #1050	; 0x41a
 8003704:	4293      	cmp	r3, r2
 8003706:	d914      	bls.n	8003732 <CONTROLLER_Update_Channels_Analysis+0x10e>
 8003708:	4b76      	ldr	r3, [pc, #472]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	f240 427e 	movw	r2, #1150	; 0x47e
 800371c:	4293      	cmp	r3, r2
 800371e:	d808      	bhi.n	8003732 <CONTROLLER_Update_Channels_Analysis+0x10e>
						controller->throttle_lvl[ch] = THROTTLE_LVL_LOW ;
 8003720:	4b70      	ldr	r3, [pc, #448]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003728:	4413      	add	r3, r2
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2020 	strb.w	r2, [r3, #32]
 8003730:	e021      	b.n	8003776 <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1150 && controller->channels[ch] < 2000)
 8003732:	4b6c      	ldr	r3, [pc, #432]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	f240 427e 	movw	r2, #1150	; 0x47e
 8003746:	4293      	cmp	r3, r2
 8003748:	f240 810c 	bls.w	8003964 <CONTROLLER_Update_Channels_Analysis+0x340>
 800374c:	4b65      	ldr	r3, [pc, #404]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003760:	f080 8100 	bcs.w	8003964 <CONTROLLER_Update_Channels_Analysis+0x340>
						controller->throttle_lvl[ch] = THROTTLE_LVL_HIGH ;
 8003764:	4b5f      	ldr	r3, [pc, #380]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	4413      	add	r3, r2
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2020 	strb.w	r2, [r3, #32]


					break;
 8003774:	e0f6      	b.n	8003964 <CONTROLLER_Update_Channels_Analysis+0x340>
 8003776:	e0f5      	b.n	8003964 <CONTROLLER_Update_Channels_Analysis+0x340>

				case ANALYSIS_MODE_BUTTON_ON_OFF :
					//Active le boutton dans le code
					if(!controller->button_on_off[ch])
 8003778:	4b5a      	ldr	r3, [pc, #360]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003780:	4413      	add	r3, r2
 8003782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d107      	bne.n	800379a <CONTROLLER_Update_Channels_Analysis+0x176>
						controller->button_on_off[ch] = BUTTON_OFF ;
 800378a:	4b56      	ldr	r3, [pc, #344]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	4413      	add	r3, r2
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 800379a:	4b52      	ldr	r3, [pc, #328]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80037ae:	4293      	cmp	r3, r2
 80037b0:	bf8c      	ite	hi
 80037b2:	2301      	movhi	r3, #1
 80037b4:	2300      	movls	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 80037ba:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	4413      	add	r3, r2
 80037c4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80037c8:	461a      	mov	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <CONTROLLER_Update_Channels_Analysis+0x1f2>
 80037d0:	4b44      	ldr	r3, [pc, #272]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d8:	4413      	add	r3, r2
 80037da:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d119      	bne.n	8003816 <CONTROLLER_Update_Channels_Analysis+0x1f2>
						if(controller->button_on_off[ch] == BUTTON_ON)
 80037e2:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	4413      	add	r3, r2
 80037ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d108      	bne.n	8003806 <CONTROLLER_Update_Channels_Analysis+0x1e2>
							controller->button_on_off[ch] = BUTTON_OFF ;
 80037f4:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fc:	4413      	add	r3, r2
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003804:	e007      	b.n	8003816 <CONTROLLER_Update_Channels_Analysis+0x1f2>
						else
							controller->button_on_off[ch] = BUTTON_ON ;
 8003806:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	4413      	add	r3, r2
 8003810:	2202      	movs	r2, #2
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}

					controller->button_state[ch] = button_state ;
 8003816:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	6839      	ldr	r1, [r7, #0]
 8003820:	b2c9      	uxtb	r1, r1
 8003822:	4413      	add	r3, r2
 8003824:	460a      	mov	r2, r1
 8003826:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 800382a:	e09c      	b.n	8003966 <CONTROLLER_Update_Channels_Analysis+0x342>

				case ANALYSIS_MODE_BUTTON_PUSH :
					//Active le boutton dans le code
					if(!controller->button_pushed[ch])
 800382c:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	4413      	add	r3, r2
 8003836:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <CONTROLLER_Update_Channels_Analysis+0x22a>
						controller->button_pushed[ch] = BUTTON_PUSHED_NO_REQUEST ;
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	4413      	add	r3, r2
 8003848:	2201      	movs	r2, #1
 800384a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003862:	4293      	cmp	r3, r2
 8003864:	bf8c      	ite	hi
 8003866:	2301      	movhi	r3, #1
 8003868:	2300      	movls	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	4413      	add	r3, r2
 8003878:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800387c:	461a      	mov	r2, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	4293      	cmp	r3, r2
 8003882:	d010      	beq.n	80038a6 <CONTROLLER_Update_Channels_Analysis+0x282>
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388c:	4413      	add	r3, r2
 800388e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003892:	2b00      	cmp	r3, #0
 8003894:	d107      	bne.n	80038a6 <CONTROLLER_Update_Channels_Analysis+0x282>
						controller->button_pushed[ch] = BUTTON_PUSHED_REQUEST ;
 8003896:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	4413      	add	r3, r2
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					}

					controller->button_state[ch] = button_state ;
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	6839      	ldr	r1, [r7, #0]
 80038b0:	b2c9      	uxtb	r1, r1
 80038b2:	4413      	add	r3, r2
 80038b4:	460a      	mov	r2, r1
 80038b6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 80038ba:	e054      	b.n	8003966 <CONTROLLER_Update_Channels_Analysis+0x342>
				case ANALYSIS_MODE_SEQUENCE:
					//todo analyse de séquences sur les switchs
					break;

				case ANALYSIS_MODE_SWITCH_MODE:
					if(controller->channels[ch] < 1300)
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	f240 5213 	movw	r2, #1299	; 0x513
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d809      	bhi.n	80038e8 <CONTROLLER_Update_Channels_Analysis+0x2c4>
						controller->switch_pos[ch] = SWITCH_POS_1 ;
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038dc:	4413      	add	r3, r2
 80038de:	2200      	movs	r2, #0
 80038e0:	749a      	strb	r2, [r3, #18]
						controller->switch_pos[ch] = SWITCH_POS_2 ;
					else if(controller->channels[ch] > 1600)
						controller->switch_pos[ch] = SWITCH_POS_3 ;
					else
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
					break;
 80038e2:	e040      	b.n	8003966 <CONTROLLER_Update_Channels_Analysis+0x342>
 80038e4:	200017a4 	.word	0x200017a4
					else if(controller->channels[ch] > 1300 && controller->channels[ch] < 1600)
 80038e8:	4b27      	ldr	r3, [pc, #156]	; (8003988 <CONTROLLER_Update_Channels_Analysis+0x364>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	4413      	add	r3, r2
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	f240 5214 	movw	r2, #1300	; 0x514
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d912      	bls.n	8003926 <CONTROLLER_Update_Channels_Analysis+0x302>
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003914:	d207      	bcs.n	8003926 <CONTROLLER_Update_Channels_Analysis+0x302>
						controller->switch_pos[ch] = SWITCH_POS_2 ;
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	4413      	add	r3, r2
 8003920:	2201      	movs	r2, #1
 8003922:	749a      	strb	r2, [r3, #18]
					break;
 8003924:	e01f      	b.n	8003966 <CONTROLLER_Update_Channels_Analysis+0x342>
					else if(controller->channels[ch] > 1600)
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800393a:	d907      	bls.n	800394c <CONTROLLER_Update_Channels_Analysis+0x328>
						controller->switch_pos[ch] = SWITCH_POS_3 ;
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <CONTROLLER_Update_Channels_Analysis+0x364>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003944:	4413      	add	r3, r2
 8003946:	2202      	movs	r2, #2
 8003948:	749a      	strb	r2, [r3, #18]
					break;
 800394a:	e00c      	b.n	8003966 <CONTROLLER_Update_Channels_Analysis+0x342>
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <CONTROLLER_Update_Channels_Analysis+0x364>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	4413      	add	r3, r2
 8003956:	2203      	movs	r2, #3
 8003958:	749a      	strb	r2, [r3, #18]
					break;
 800395a:	e004      	b.n	8003966 <CONTROLLER_Update_Channels_Analysis+0x342>
				default:
					break;
 800395c:	bf00      	nop
 800395e:	e002      	b.n	8003966 <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8003964:	bf00      	nop
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	3301      	adds	r3, #1
 800396e:	b2db      	uxtb	r3, r3
 8003970:	71fb      	strb	r3, [r7, #7]
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	2b09      	cmp	r3, #9
 8003978:	f77f ae5a 	ble.w	8003630 <CONTROLLER_Update_Channels_Analysis+0xc>
			}
		}

		flag_process();
 800397c:	f000 f806 	bl	800398c <flag_process>
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	200017a4 	.word	0x200017a4

0800398c <flag_process>:

static void flag_process()
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
	//Throttle lvl
	switch(controller->throttle_lvl[2]){
 8003990:	4b62      	ldr	r3, [pc, #392]	; (8003b1c <flag_process+0x190>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003998:	2b01      	cmp	r3, #1
 800399a:	d00d      	beq.n	80039b8 <flag_process+0x2c>
 800399c:	2b02      	cmp	r3, #2
 800399e:	d015      	beq.n	80039cc <flag_process+0x40>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11d      	bne.n	80039e0 <flag_process+0x54>
		case THROTTLE_LVL_NULL :
			EVENT_Set_flag(FLAG_THROTTLE_NULL);
 80039a4:	2017      	movs	r0, #23
 80039a6:	f7fe ff07 	bl	80027b8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 80039aa:	2016      	movs	r0, #22
 80039ac:	f7fe ff1c 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 80039b0:	2015      	movs	r0, #21
 80039b2:	f7fe ff19 	bl	80027e8 <EVENT_Clean_flag>
			break;
 80039b6:	e013      	b.n	80039e0 <flag_process+0x54>
		case THROTTLE_LVL_LOW :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 80039b8:	2017      	movs	r0, #23
 80039ba:	f7fe ff15 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_LOW);
 80039be:	2016      	movs	r0, #22
 80039c0:	f7fe fefa 	bl	80027b8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 80039c4:	2015      	movs	r0, #21
 80039c6:	f7fe ff0f 	bl	80027e8 <EVENT_Clean_flag>
			break;
 80039ca:	e009      	b.n	80039e0 <flag_process+0x54>
		case THROTTLE_LVL_HIGH :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 80039cc:	2017      	movs	r0, #23
 80039ce:	f7fe ff0b 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 80039d2:	2016      	movs	r0, #22
 80039d4:	f7fe ff08 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_HIGH);
 80039d8:	2015      	movs	r0, #21
 80039da:	f7fe feed 	bl	80027b8 <EVENT_Set_flag>
			break;
 80039de:	bf00      	nop
	}

	//Switch 1 (ch5 soit ch[4])
	if(controller->switch_pos[4] == SWITCH_POS_1){
 80039e0:	4b4e      	ldr	r3, [pc, #312]	; (8003b1c <flag_process+0x190>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	7d9b      	ldrb	r3, [r3, #22]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <flag_process+0x6c>
		EVENT_Set_flag(FLAG_CHAN_5_POS_1);
 80039ea:	2009      	movs	r0, #9
 80039ec:	f7fe fee4 	bl	80027b8 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_5_POS_3);
 80039f0:	200a      	movs	r0, #10
 80039f2:	f7fe fef9 	bl	80027e8 <EVENT_Clean_flag>
 80039f6:	e005      	b.n	8003a04 <flag_process+0x78>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_5_POS_1);
 80039f8:	2009      	movs	r0, #9
 80039fa:	f7fe fef5 	bl	80027e8 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_5_POS_3);
 80039fe:	200a      	movs	r0, #10
 8003a00:	f7fe feda 	bl	80027b8 <EVENT_Set_flag>
	}
	//Switch 2(ch6 soit ch[5])
	switch(controller->switch_pos[5]){
 8003a04:	4b45      	ldr	r3, [pc, #276]	; (8003b1c <flag_process+0x190>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	7ddb      	ldrb	r3, [r3, #23]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d828      	bhi.n	8003a60 <flag_process+0xd4>
 8003a0e:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <flag_process+0x88>)
 8003a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a14:	08003a25 	.word	0x08003a25
 8003a18:	08003a39 	.word	0x08003a39
 8003a1c:	08003a4d 	.word	0x08003a4d
 8003a20:	08003a61 	.word	0x08003a61
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_6_POS_1);
 8003a24:	200b      	movs	r0, #11
 8003a26:	f7fe fec7 	bl	80027b8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8003a2a:	200c      	movs	r0, #12
 8003a2c:	f7fe fedc 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8003a30:	200d      	movs	r0, #13
 8003a32:	f7fe fed9 	bl	80027e8 <EVENT_Clean_flag>
			break;
 8003a36:	e013      	b.n	8003a60 <flag_process+0xd4>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8003a38:	200b      	movs	r0, #11
 8003a3a:	f7fe fed5 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_2);
 8003a3e:	200c      	movs	r0, #12
 8003a40:	f7fe feba 	bl	80027b8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8003a44:	200d      	movs	r0, #13
 8003a46:	f7fe fecf 	bl	80027e8 <EVENT_Clean_flag>
			break;
 8003a4a:	e009      	b.n	8003a60 <flag_process+0xd4>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8003a4c:	200b      	movs	r0, #11
 8003a4e:	f7fe fecb 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8003a52:	200c      	movs	r0, #12
 8003a54:	f7fe fec8 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_3);
 8003a58:	200d      	movs	r0, #13
 8003a5a:	f7fe fead 	bl	80027b8 <EVENT_Set_flag>
			break;
 8003a5e:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 3(ch7 soit ch[6])
	switch(controller->switch_pos[6]){
 8003a60:	4b2e      	ldr	r3, [pc, #184]	; (8003b1c <flag_process+0x190>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	7e1b      	ldrb	r3, [r3, #24]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d828      	bhi.n	8003abc <flag_process+0x130>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <flag_process+0xe4>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a95 	.word	0x08003a95
 8003a78:	08003aa9 	.word	0x08003aa9
 8003a7c:	08003abd 	.word	0x08003abd
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_7_POS_1);
 8003a80:	200e      	movs	r0, #14
 8003a82:	f7fe fe99 	bl	80027b8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8003a86:	200f      	movs	r0, #15
 8003a88:	f7fe feae 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8003a8c:	2010      	movs	r0, #16
 8003a8e:	f7fe feab 	bl	80027e8 <EVENT_Clean_flag>
			break;
 8003a92:	e013      	b.n	8003abc <flag_process+0x130>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8003a94:	200e      	movs	r0, #14
 8003a96:	f7fe fea7 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_2);
 8003a9a:	200f      	movs	r0, #15
 8003a9c:	f7fe fe8c 	bl	80027b8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8003aa0:	2010      	movs	r0, #16
 8003aa2:	f7fe fea1 	bl	80027e8 <EVENT_Clean_flag>
			break;
 8003aa6:	e009      	b.n	8003abc <flag_process+0x130>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8003aa8:	200e      	movs	r0, #14
 8003aaa:	f7fe fe9d 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8003aae:	200f      	movs	r0, #15
 8003ab0:	f7fe fe9a 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_3);
 8003ab4:	2010      	movs	r0, #16
 8003ab6:	f7fe fe7f 	bl	80027b8 <EVENT_Set_flag>
			break;
 8003aba:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 4 (ch8 soit ch[7])
	if(controller->switch_pos[7] == SWITCH_POS_1){
 8003abc:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <flag_process+0x190>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	7e5b      	ldrb	r3, [r3, #25]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <flag_process+0x148>
		EVENT_Set_flag(FLAG_CHAN_8_POS_1);
 8003ac6:	2011      	movs	r0, #17
 8003ac8:	f7fe fe76 	bl	80027b8 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_8_POS_3);
 8003acc:	2012      	movs	r0, #18
 8003ace:	f7fe fe8b 	bl	80027e8 <EVENT_Clean_flag>
 8003ad2:	e005      	b.n	8003ae0 <flag_process+0x154>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_8_POS_1);
 8003ad4:	2011      	movs	r0, #17
 8003ad6:	f7fe fe87 	bl	80027e8 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_8_POS_3);
 8003ada:	2012      	movs	r0, #18
 8003adc:	f7fe fe6c 	bl	80027b8 <EVENT_Set_flag>
	}

	//Button 1 (ch9 soit ch[8]) en mode push
	if(controller->button_pushed[8] == BUTTON_PUSHED_REQUEST){
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <flag_process+0x190>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d107      	bne.n	8003afc <flag_process+0x170>
		EVENT_Set_flag(FLAG_CHAN_9_PUSH);
 8003aec:	2013      	movs	r0, #19
 8003aee:	f7fe fe63 	bl	80027b8 <EVENT_Set_flag>
		controller->button_pushed[8] = BUTTON_PUSHED_NO_REQUEST ;
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <flag_process+0x190>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	//Button 2 (ch10 soit ch[9]) en mode on/off
	if(controller->button_on_off[9] == BUTTON_ON)
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <flag_process+0x190>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d103      	bne.n	8003b10 <flag_process+0x184>
		EVENT_Set_flag(FLAG_CHAN_10_ON);
 8003b08:	2014      	movs	r0, #20
 8003b0a:	f7fe fe55 	bl	80027b8 <EVENT_Set_flag>
	else
		EVENT_Clean_flag(FLAG_CHAN_10_ON);



}
 8003b0e:	e002      	b.n	8003b16 <flag_process+0x18a>
		EVENT_Clean_flag(FLAG_CHAN_10_ON);
 8003b10:	2014      	movs	r0, #20
 8003b12:	f7fe fe69 	bl	80027e8 <EVENT_Clean_flag>
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200017a4 	.word	0x200017a4

08003b20 <CONTROLLER_Update_Channels_Array>:

bool_e CONTROLLER_Update_Channels_Array(void){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
	//Utilisation de l'ibus atm
	return IBUS_Channel_Update();
 8003b24:	f007 fc0a 	bl	800b33c <IBUS_Channel_Update>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <CONTROLLER_Rx_Data_Rdy>:

void CONTROLLER_Rx_Data_Rdy(void){
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_IBUS_DATA_RDY);
 8003b32:	2008      	movs	r0, #8
 8003b34:	f7fe fe40 	bl	80027b8 <EVENT_Set_flag>
}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <REGULATION_ORIENTATION_Init>:
float pid_velocity_settings_yaw[PID_NB_SETTINGS] = {1.5f, 0.3f, 0.0f, REGU_ORIENTATION_FREQUENCY, 400};


//	------------------------------	Angular Pos Regulation settings	-----------------------------------------

void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
	orientation = orientation_ ;
 8003b48:	4a16      	ldr	r2, [pc, #88]	; (8003ba4 <REGULATION_ORIENTATION_Init+0x68>)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_ ;
 8003b4e:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <REGULATION_ORIENTATION_Init+0x6c>)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6013      	str	r3, [r2, #0]
	regu_orientation->mode = REGULATION_ORIENTATION_MODE_OFF ;
 8003b54:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <REGULATION_ORIENTATION_Init+0x6c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	711a      	strb	r2, [r3, #4]
	regu_orientation->outputs = output ;
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <REGULATION_ORIENTATION_Init+0x6c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	//Init PIDs angular speed
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], pid_velocity_settings_roll, FILTER_FIRST_ORDER, filter_pid_velocity_roll_pitch);
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <REGULATION_ORIENTATION_Init+0x6c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <REGULATION_ORIENTATION_Init+0x70>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	490f      	ldr	r1, [pc, #60]	; (8003bb0 <REGULATION_ORIENTATION_Init+0x74>)
 8003b74:	f007 fea4 	bl	800b8c0 <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], pid_velocity_settings_pitch, FILTER_FIRST_ORDER, filter_pid_velocity_roll_pitch);
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <REGULATION_ORIENTATION_Init+0x6c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f103 0008 	add.w	r0, r3, #8
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <REGULATION_ORIENTATION_Init+0x70>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	490b      	ldr	r1, [pc, #44]	; (8003bb4 <REGULATION_ORIENTATION_Init+0x78>)
 8003b86:	f007 fe9b 	bl	800b8c0 <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], pid_velocity_settings_yaw, FILTER_FIRST_ORDER, filter_pid_velocity_yaw);
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <REGULATION_ORIENTATION_Init+0x6c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <REGULATION_ORIENTATION_Init+0x7c>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	4909      	ldr	r1, [pc, #36]	; (8003bbc <REGULATION_ORIENTATION_Init+0x80>)
 8003b98:	f007 fe92 	bl	800b8c0 <PID_init>



}
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	200017ac 	.word	0x200017ac
 8003ba8:	200017a8 	.word	0x200017a8
 8003bac:	20001334 	.word	0x20001334
 8003bb0:	2000134c 	.word	0x2000134c
 8003bb4:	20001360 	.word	0x20001360
 8003bb8:	20001340 	.word	0x20001340
 8003bbc:	20001374 	.word	0x20001374

08003bc0 <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_orientation_mode_e regu_mode){
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
	regu_orientation->mode = regu_mode;
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <REGULATION_ORIENTATION_Set_Regulation_Mode+0x20>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	79fa      	ldrb	r2, [r7, #7]
 8003bd0:	711a      	strb	r2, [r3, #4]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	200017a8 	.word	0x200017a8

08003be4 <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0

	switch(regu_orientation->mode){
 8003be8:	4b43      	ldr	r3, [pc, #268]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	791b      	ldrb	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d019      	beq.n	8003c26 <REGULATION_ORIENTATION_Process+0x42>
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d07c      	beq.n	8003cf0 <REGULATION_ORIENTATION_Process+0x10c>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d000      	beq.n	8003bfc <REGULATION_ORIENTATION_Process+0x18>
			break;
		case REGULATION_ORIENTATION_MODE_ANGLE:
			break;
	}

}
 8003bfa:	e07a      	b.n	8003cf2 <REGULATION_ORIENTATION_Process+0x10e>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = 0;
 8003bfc:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003c04:	2200      	movs	r2, #0
 8003c06:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = 0;
 8003c08:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003c10:	3302      	adds	r3, #2
 8003c12:	2200      	movs	r2, #0
 8003c14:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = 0;
 8003c16:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003c1e:	3304      	adds	r3, #4
 8003c20:	2200      	movs	r2, #0
 8003c22:	801a      	strh	r2, [r3, #0]
			break;
 8003c24:	e065      	b.n	8003cf2 <REGULATION_ORIENTATION_Process+0x10e>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 8003c26:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8003c2e:	4b32      	ldr	r3, [pc, #200]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8003c36:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <REGULATION_ORIENTATION_Process+0x118>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	ed93 7a00 	vldr	s14, [r3]
 8003c42:	eef0 0a47 	vmov.f32	s1, s14
 8003c46:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f007 fd9c 	bl	800b788 <PID_compute>
 8003c50:	eef0 7a40 	vmov.f32	s15, s0
 8003c54:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c60:	ee17 2a90 	vmov	r2, s15
 8003c64:	b212      	sxth	r2, r2
 8003c66:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 8003c68:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f103 0208 	add.w	r2, r3, #8
 8003c70:	4b21      	ldr	r3, [pc, #132]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <REGULATION_ORIENTATION_Process+0x118>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	ed93 7a00 	vldr	s14, [r3]
 8003c82:	eef0 0a47 	vmov.f32	s1, s14
 8003c86:	eeb0 0a67 	vmov.f32	s0, s15
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	f007 fd7c 	bl	800b788 <PID_compute>
 8003c90:	eef0 7a40 	vmov.f32	s15, s0
 8003c94:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003c9c:	3302      	adds	r3, #2
 8003c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca2:	ee17 2a90 	vmov	r2, s15
 8003ca6:	b212      	sxth	r2, r2
 8003ca8:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <REGULATION_ORIENTATION_Process+0x118>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	ed93 7a00 	vldr	s14, [r3]
 8003cc6:	eef0 0a47 	vmov.f32	s1, s14
 8003cca:	eeb0 0a67 	vmov.f32	s0, s15
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f007 fd5a 	bl	800b788 <PID_compute>
 8003cd4:	eef0 7a40 	vmov.f32	s15, s0
 8003cd8:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <REGULATION_ORIENTATION_Process+0x114>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ce6:	ee17 2a90 	vmov	r2, s15
 8003cea:	b212      	sxth	r2, r2
 8003cec:	801a      	strh	r2, [r3, #0]
			break;
 8003cee:	e000      	b.n	8003cf2 <REGULATION_ORIENTATION_Process+0x10e>
			break;
 8003cf0:	bf00      	nop
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200017a8 	.word	0x200017a8
 8003cfc:	200017ac 	.word	0x200017ac

08003d00 <REGULATION_POSITION_Init>:





void REGULATION_POSITION_Init(regu_position_t * regu_position_, regu_orientation_t * regu_orientation_, int16_t * outputs){
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
	regu_position = regu_position_;
 8003d0c:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <REGULATION_POSITION_Init+0x34>)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_;
 8003d12:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <REGULATION_POSITION_Init+0x38>)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6013      	str	r3, [r2, #0]
	regu_position->mode = REGULATION_POSITION_MODE_OFF ;
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <REGULATION_POSITION_Init+0x34>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	721a      	strb	r2, [r3, #8]
	regu_position->outputs = outputs ;
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <REGULATION_POSITION_Init+0x34>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	605a      	str	r2, [r3, #4]


}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	200017b0 	.word	0x200017b0
 8003d38:	200017b4 	.word	0x200017b4

08003d3c <REGULATION_POSITION_Set_Regulation_Mode>:

void REGULATION_POSITION_Set_Regulation_Mode(regu_position_mode_e regu_mode){
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
	regu_position->mode = regu_mode ;
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <REGULATION_POSITION_Set_Regulation_Mode+0x20>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	79fa      	ldrb	r2, [r7, #7]
 8003d4c:	721a      	strb	r2, [r3, #8]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	200017b0 	.word	0x200017b0

08003d60 <REGULATION_POSITION_Process>:

void REGULATION_POSITION_Process(void){
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
	switch(regu_position->mode){
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <REGULATION_POSITION_Process+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	7a1b      	ldrb	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <REGULATION_POSITION_Process+0x14>
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d007      	beq.n	8003d82 <REGULATION_POSITION_Process+0x22>
			break;
		case REGULATION_POSITION_MODE_ON:
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
			break;
	}
}
 8003d72:	e010      	b.n	8003d96 <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = 0;
 8003d74:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <REGULATION_POSITION_Process+0x40>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	3306      	adds	r3, #6
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	801a      	strh	r2, [r3, #0]
			break;
 8003d80:	e009      	b.n	8003d96 <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
 8003d82:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <REGULATION_POSITION_Process+0x40>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <REGULATION_POSITION_Process+0x40>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	3306      	adds	r3, #6
 8003d8e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003d92:	801a      	strh	r2, [r3, #0]
			break;
 8003d94:	bf00      	nop
}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	200017b0 	.word	0x200017b0

08003da4 <ACC_init>:
static void acc_data_callback(void);

float filter_config [3] = {0.1f, 0.9f, 0};


void ACC_init(acc_t * acc, mpu_t * mpu){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]

	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_FIRST_ORDER);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3314      	adds	r3, #20
 8003db2:	2200      	movs	r2, #0
 8003db4:	491a      	ldr	r1, [pc, #104]	; (8003e20 <ACC_init+0x7c>)
 8003db6:	4618      	mov	r0, r3
 8003db8:	f007 f9be 	bl	800b138 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_FIRST_ORDER);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3330      	adds	r3, #48	; 0x30
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4917      	ldr	r1, [pc, #92]	; (8003e20 <ACC_init+0x7c>)
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f007 f9b7 	bl	800b138 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_FIRST_ORDER);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	334c      	adds	r3, #76	; 0x4c
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4913      	ldr	r1, [pc, #76]	; (8003e20 <ACC_init+0x7c>)
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f007 f9b0 	bl	800b138 <FILTER_init>


	acc->mpu = mpu ;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	601a      	str	r2, [r3, #0]
	acc->raw = acc->mpu->acc ;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	605a      	str	r2, [r3, #4]

	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <ACC_init+0x80>)
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fbec 	bl	80045d0 <MPU_init_acc>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d008      	beq.n	8003e10 <ACC_init+0x6c>
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d008      	beq.n	8003e14 <ACC_init+0x70>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d000      	beq.n	8003e08 <ACC_init+0x64>
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}

}
 8003e06:	e006      	b.n	8003e16 <ACC_init+0x72>
			EVENT_Set_flag(FLAG_ACC_OK);
 8003e08:	2004      	movs	r0, #4
 8003e0a:	f7fe fcd5 	bl	80027b8 <EVENT_Set_flag>
			break;
 8003e0e:	e002      	b.n	8003e16 <ACC_init+0x72>
			break;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <ACC_init+0x72>
			break;
 8003e14:	bf00      	nop
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20001388 	.word	0x20001388
 8003e24:	08003ee5 	.word	0x08003ee5

08003e28 <ACC_update>:

void ACC_update(acc_t * acc){
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	switch(MPU_update_acc(acc->mpu)){
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fc6f 	bl	8004718 <MPU_update_acc>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d00c      	beq.n	8003e5a <ACC_update+0x32>
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d006      	beq.n	8003e52 <ACC_update+0x2a>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d000      	beq.n	8003e4a <ACC_update+0x22>
			EVENT_Clean_flag(FLAG_ACC_OK);
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8003e48:	e008      	b.n	8003e5c <ACC_update+0x34>
			EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8003e4a:	2006      	movs	r0, #6
 8003e4c:	f7fe fcb4 	bl	80027b8 <EVENT_Set_flag>
			break;
 8003e50:	e004      	b.n	8003e5c <ACC_update+0x34>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8003e52:	2004      	movs	r0, #4
 8003e54:	f7fe fcc8 	bl	80027e8 <EVENT_Clean_flag>
			break;
 8003e58:	e000      	b.n	8003e5c <ACC_update+0x34>
			break;
 8003e5a:	bf00      	nop
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <ACC_process_lpf>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void ACC_process_lpf(acc_t * acc){
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f103 0214 	add.w	r2, r3, #20
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	edd3 7a00 	vldr	s15, [r3]
 8003e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7e:	4610      	mov	r0, r2
 8003e80:	f007 f97d 	bl	800b17e <FILTER_process>
 8003e84:	eef0 7a40 	vmov.f32	s15, s0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	edd3 7a00 	vldr	s15, [r3]
 8003e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f007 f96b 	bl	800b17e <FILTER_process>
 8003ea8:	eef0 7a40 	vmov.f32	s15, s0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	edc3 7a03 	vstr	s15, [r3, #12]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	edd3 7a00 	vldr	s15, [r3]
 8003ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f007 f959 	bl	800b17e <FILTER_process>
 8003ecc:	eef0 7a40 	vmov.f32	s15, s0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	edc3 7a04 	vstr	s15, [r3, #16]
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 8003ed6:	2007      	movs	r0, #7
 8003ed8:	f7fe fc6e 	bl	80027b8 <EVENT_Set_flag>
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <acc_data_callback>:

static void acc_data_callback(void){
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8003ee8:	2006      	movs	r0, #6
 8003eea:	f7fe fc65 	bl	80027b8 <EVENT_Set_flag>
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <BATTERIE_Init>:


#include "batterie.h"


void BATTERIE_Init(batterie_t * batterie, ADC_HandleTypeDef * hadc){
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
	batterie->hadc = hadc ;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(hadc, batterie->reading, 16);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3304      	adds	r3, #4
 8003f06:	2210      	movs	r2, #16
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6838      	ldr	r0, [r7, #0]
 8003f0c:	f002 fab8 	bl	8006480 <HAL_ADC_Start_DMA>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <GYRO_init>:

float filter[3] = {0.1f, 0.9f, 0};

static void gyro_data_callback(void);

void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]

	//Filters init
	FILTER_init(&gyro->filters[GYRO_AXE_X], filter, FILTER_FIRST_ORDER);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3320      	adds	r3, #32
 8003f26:	2200      	movs	r2, #0
 8003f28:	491a      	ldr	r1, [pc, #104]	; (8003f94 <GYRO_init+0x7c>)
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f007 f904 	bl	800b138 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Y], filter, FILTER_FIRST_ORDER);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	333c      	adds	r3, #60	; 0x3c
 8003f34:	2200      	movs	r2, #0
 8003f36:	4917      	ldr	r1, [pc, #92]	; (8003f94 <GYRO_init+0x7c>)
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f007 f8fd 	bl	800b138 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Z], filter, FILTER_FIRST_ORDER);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3358      	adds	r3, #88	; 0x58
 8003f42:	2200      	movs	r2, #0
 8003f44:	4913      	ldr	r1, [pc, #76]	; (8003f94 <GYRO_init+0x7c>)
 8003f46:	4618      	mov	r0, r3
 8003f48:	f007 f8f6 	bl	800b138 <FILTER_init>

	gyro->mpu = mpu ;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	601a      	str	r2, [r3, #0]
	gyro->raw = gyro->mpu->gyro ;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	605a      	str	r2, [r3, #4]

	//Raise the flag "ok" if the gyro get succesfully initiated
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a0d      	ldr	r2, [pc, #52]	; (8003f98 <GYRO_init+0x80>)
 8003f64:	2103      	movs	r1, #3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fa82 	bl	8004470 <MPU_init_gyro>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d008      	beq.n	8003f84 <GYRO_init+0x6c>
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d008      	beq.n	8003f88 <GYRO_init+0x70>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d000      	beq.n	8003f7c <GYRO_init+0x64>
		case SENSOR_REQUEST_FAIL:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8003f7a:	e006      	b.n	8003f8a <GYRO_init+0x72>
			EVENT_Set_flag(FLAG_GYRO_OK);
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	f7fe fc1b 	bl	80027b8 <EVENT_Set_flag>
			break;
 8003f82:	e002      	b.n	8003f8a <GYRO_init+0x72>
			break;
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <GYRO_init+0x72>
			break;
 8003f88:	bf00      	nop
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20001394 	.word	0x20001394
 8003f98:	080041c7 	.word	0x080041c7

08003f9c <GYRO_calibrate>:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
bool_e GYRO_calibrate(gyro_t * gyro, uint16_t iteration){
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
	static uint16_t compteur = 0;

	static float sum[3] = {0};

	if(!compteur){
 8003fa8:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <GYRO_calibrate+0x114>)
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10b      	bne.n	8003fc8 <GYRO_calibrate+0x2c>
		sum[0] = 0 ;
 8003fb0:	4b40      	ldr	r3, [pc, #256]	; (80040b4 <GYRO_calibrate+0x118>)
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
		sum[1] = 0 ;
 8003fb8:	4b3e      	ldr	r3, [pc, #248]	; (80040b4 <GYRO_calibrate+0x118>)
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	605a      	str	r2, [r3, #4]
		sum[2] = 0 ;
 8003fc0:	4b3c      	ldr	r3, [pc, #240]	; (80040b4 <GYRO_calibrate+0x118>)
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	609a      	str	r2, [r3, #8]
	}

	sum[0] += gyro->raw[0] + gyro->offsets[0];
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	; (80040b4 <GYRO_calibrate+0x118>)
 8003fca:	ed93 7a00 	vldr	s14, [r3]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	edd3 6a00 	vldr	s13, [r3]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe4:	4b33      	ldr	r3, [pc, #204]	; (80040b4 <GYRO_calibrate+0x118>)
 8003fe6:	edc3 7a00 	vstr	s15, [r3]
	sum[1] += gyro->raw[1] + gyro->offsets[1];
 8003fea:	4b32      	ldr	r3, [pc, #200]	; (80040b4 <GYRO_calibrate+0x118>)
 8003fec:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	edd3 6a00 	vldr	s13, [r3]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	edd3 7a06 	vldr	s15, [r3, #24]
 8004000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004008:	4b2a      	ldr	r3, [pc, #168]	; (80040b4 <GYRO_calibrate+0x118>)
 800400a:	edc3 7a01 	vstr	s15, [r3, #4]
	sum[2] += gyro->raw[2] + gyro->offsets[2];
 800400e:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <GYRO_calibrate+0x118>)
 8004010:	ed93 7a02 	vldr	s14, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	3308      	adds	r3, #8
 800401a:	edd3 6a00 	vldr	s13, [r3]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	edd3 7a07 	vldr	s15, [r3, #28]
 8004024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <GYRO_calibrate+0x118>)
 800402e:	edc3 7a02 	vstr	s15, [r3, #8]

	compteur ++;
 8004032:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <GYRO_calibrate+0x114>)
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <GYRO_calibrate+0x114>)
 800403c:	801a      	strh	r2, [r3, #0]

	if(compteur == iteration){
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <GYRO_calibrate+0x114>)
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	429a      	cmp	r2, r3
 8004046:	d12b      	bne.n	80040a0 <GYRO_calibrate+0x104>
		gyro->offsets[0] = sum[0] / (float)iteration;
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <GYRO_calibrate+0x118>)
 800404a:	edd3 6a00 	vldr	s13, [r3]
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	edc3 7a05 	vstr	s15, [r3, #20]
		gyro->offsets[1] = sum[1] / (float)iteration;
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <GYRO_calibrate+0x118>)
 8004064:	edd3 6a01 	vldr	s13, [r3, #4]
 8004068:	887b      	ldrh	r3, [r7, #2]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	edc3 7a06 	vstr	s15, [r3, #24]
		gyro->offsets[2] = sum[2] / (float)iteration;
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <GYRO_calibrate+0x118>)
 800407e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004082:	887b      	ldrh	r3, [r7, #2]
 8004084:	ee07 3a90 	vmov	s15, r3
 8004088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800408c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	edc3 7a07 	vstr	s15, [r3, #28]
		compteur = 0;
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <GYRO_calibrate+0x114>)
 8004098:	2200      	movs	r2, #0
 800409a:	801a      	strh	r2, [r3, #0]
		return TRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <GYRO_calibrate+0x106>
	}

	return FALSE;
 80040a0:	2300      	movs	r3, #0

}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	200017b8 	.word	0x200017b8
 80040b4:	200017bc 	.word	0x200017bc

080040b8 <GYRO_ACC_update_dma>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void GYRO_ACC_update_dma(gyro_t * gyro){
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	switch(MPU_update_all_dma(gyro->mpu)){
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fb66 	bl	8004796 <MPU_update_all_dma>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d00a      	beq.n	80040e6 <GYRO_ACC_update_dma+0x2e>
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d001      	beq.n	80040d8 <GYRO_ACC_update_dma+0x20>
 80040d4:	2b00      	cmp	r3, #0
		case SENSOR_REQUEST_OK:
			break;
 80040d6:	e007      	b.n	80040e8 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_FAIL:
			EVENT_Clean_flag(FLAG_GYRO_OK);
 80040d8:	2000      	movs	r0, #0
 80040da:	f7fe fb85 	bl	80027e8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 80040de:	2004      	movs	r0, #4
 80040e0:	f7fe fb82 	bl	80027e8 <EVENT_Clean_flag>
			break;
 80040e4:	e000      	b.n	80040e8 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_BUSY:
			break;
 80040e6:	bf00      	nop
	}
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <GYRO_process_lpf>:

void GYRO_process_lpf(gyro_t * gyro){
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	//Offset correction first
	gyro->raw[GYRO_AXE_X] -= gyro->offsets[GYRO_AXE_X];
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	ed93 7a00 	vldr	s14, [r3]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	edd3 7a05 	vldr	s15, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800410e:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[GYRO_AXE_Y] -= gyro->offsets[GYRO_AXE_Y];
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	ed93 7a00 	vldr	s14, [r3]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800412c:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[GYRO_AXE_Z] -= gyro->offsets[GYRO_AXE_Z];
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	3308      	adds	r3, #8
 8004136:	ed93 7a00 	vldr	s14, [r3]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	3308      	adds	r3, #8
 8004146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800414a:	edc3 7a00 	vstr	s15, [r3]
	//Then the actual low pass filter
	gyro->filtered[GYRO_AXE_X] =  FILTER_process(&gyro->filters[GYRO_AXE_X], gyro->raw[GYRO_AXE_X]);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f103 0220 	add.w	r2, r3, #32
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	edd3 7a00 	vldr	s15, [r3]
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	4610      	mov	r0, r2
 8004162:	f007 f80c 	bl	800b17e <FILTER_process>
 8004166:	eef0 7a40 	vmov.f32	s15, s0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[GYRO_AXE_Y] =  FILTER_process(&gyro->filters[GYRO_AXE_Y], gyro->raw[GYRO_AXE_Y]);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	edd3 7a00 	vldr	s15, [r3]
 8004180:	eeb0 0a67 	vmov.f32	s0, s15
 8004184:	4610      	mov	r0, r2
 8004186:	f006 fffa 	bl	800b17e <FILTER_process>
 800418a:	eef0 7a40 	vmov.f32	s15, s0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro->filtered[GYRO_AXE_Z] =  FILTER_process(&gyro->filters[GYRO_AXE_Z], gyro->raw[GYRO_AXE_Z]);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	3308      	adds	r3, #8
 80041a0:	edd3 7a00 	vldr	s15, [r3]
 80041a4:	eeb0 0a67 	vmov.f32	s0, s15
 80041a8:	4610      	mov	r0, r2
 80041aa:	f006 ffe8 	bl	800b17e <FILTER_process>
 80041ae:	eef0 7a40 	vmov.f32	s15, s0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	edc3 7a04 	vstr	s15, [r3, #16]
	//We warn the system that we ve got new data ready to be used :)
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 80041b8:	2003      	movs	r0, #3
 80041ba:	f7fe fafd 	bl	80027b8 <EVENT_Set_flag>
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <gyro_data_callback>:

static void gyro_data_callback(void){
 80041c6:	b580      	push	{r7, lr}
 80041c8:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 80041ca:	2002      	movs	r0, #2
 80041cc:	f7fe faf4 	bl	80027b8 <EVENT_Set_flag>
}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <convert_gyro>:
static void MPU_cs_lock(mpu_t * mpu);
static void MPU_cs_unlock(mpu_t * mpu);


//Private functions def
static void convert_gyro(mpu_t * mpu){
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	3301      	adds	r3, #1
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	b21a      	sxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b21b      	sxth	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b21a      	sxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	3303      	adds	r3, #3
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	b21a      	sxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	3302      	adds	r3, #2
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	b21b      	sxth	r3, r3
 800420e:	4313      	orrs	r3, r2
 8004210:	b21a      	sxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	3305      	adds	r3, #5
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	b21a      	sxth	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	3304      	adds	r3, #4
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	b21b      	sxth	r3, r3
 800422c:	4313      	orrs	r3, r2
 800422e:	b21a      	sxth	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	851a      	strh	r2, [r3, #40]	; 0x28

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004258:	ee07 3a90 	vmov	s15, r3
 800425c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <convert_acc>:
static void convert_acc(mpu_t * mpu){
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	3301      	adds	r3, #1
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	b21a      	sxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b21b      	sxth	r3, r3
 80042b6:	4313      	orrs	r3, r2
 80042b8:	b21a      	sxth	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	3303      	adds	r3, #3
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	b21a      	sxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	3302      	adds	r3, #2
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b21b      	sxth	r3, r3
 80042d6:	4313      	orrs	r3, r2
 80042d8:	b21a      	sxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	3305      	adds	r3, #5
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	b21a      	sxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	3304      	adds	r3, #4
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b21b      	sxth	r3, r3
 80042f6:	4313      	orrs	r3, r2
 80042f8:	b21a      	sxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8004324:	ee07 3a90 	vmov	s15, r3
 8004328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <MPU_cs_lock>:

static void MPU_cs_lock(mpu_t * mpu){
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6898      	ldr	r0, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	899b      	ldrh	r3, [r3, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	4619      	mov	r1, r3
 800437a:	f003 fa6d 	bl	8007858 <HAL_GPIO_WritePin>
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <MPU_cs_unlock>:
static void MPU_cs_unlock(mpu_t * mpu){
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6898      	ldr	r0, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	899b      	ldrh	r3, [r3, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	4619      	mov	r1, r3
 800439a:	f003 fa5d 	bl	8007858 <HAL_GPIO_WritePin>
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <MPU_init>:

/*
 *
 */
sensor_request_e MPU_init(mpu_t * mpu, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	807b      	strh	r3, [r7, #2]

	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	73da      	strb	r2, [r3, #15]

	//Définit d'après la doc pour les registres du mpu
	mpu->gyro_data = &mpu->data[8] ;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f103 021a 	add.w	r2, r3, #26
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]
	mpu->acc_data = &mpu->data[0] ;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f103 0212 	add.w	r2, r3, #18
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	645a      	str	r2, [r3, #68]	; 0x44


	//Requiert un I2C ou SPI pour fonctionner
	if(hspi == NULL)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <MPU_init+0x32>
		return SENSOR_REQUEST_FAIL ;
 80043d6:	2302      	movs	r3, #2
 80043d8:	e040      	b.n	800445c <MPU_init+0xb4>

	//Application des paramètres de connexion
	mpu->hspi = hspi ;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	887a      	ldrh	r2, [r7, #2]
 80043e4:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	22d0      	movs	r2, #208	; 0xd0
 80043f0:	745a      	strb	r2, [r3, #17]

	mpu_handlers[mpu_init_compteur] = mpu ;
 80043f2:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <MPU_init+0xbc>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	4619      	mov	r1, r3
 80043f8:	4a1b      	ldr	r2, [pc, #108]	; (8004468 <MPU_init+0xc0>)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	SPI_handlers[mpu_init_compteur++] = hspi ;
 8004400:	4b18      	ldr	r3, [pc, #96]	; (8004464 <MPU_init+0xbc>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	b2d1      	uxtb	r1, r2
 8004408:	4a16      	ldr	r2, [pc, #88]	; (8004464 <MPU_init+0xbc>)
 800440a:	7011      	strb	r1, [r2, #0]
 800440c:	4619      	mov	r1, r3
 800440e:	4a17      	ldr	r2, [pc, #92]	; (800446c <MPU_init+0xc4>)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x00} ;
 8004416:	236b      	movs	r3, #107	; 0x6b
 8004418:	753b      	strb	r3, [r7, #20]
 800441a:	2300      	movs	r3, #0
 800441c:	757b      	strb	r3, [r7, #21]

	MPU_cs_lock(mpu);
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7ff ffa1 	bl	8004366 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6858      	ldr	r0, [r3, #4]
 8004428:	f107 0114 	add.w	r1, r7, #20
 800442c:	2302      	movs	r3, #2
 800442e:	2202      	movs	r2, #2
 8004430:	f004 f804 	bl	800843c <HAL_SPI_Transmit>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff ffa2 	bl	8004386 <MPU_cs_unlock>

	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	7b9b      	ldrb	r3, [r3, #14]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <MPU_init+0xac>
		mpu->state = SENSOR_ERROR ;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2204      	movs	r2, #4
 800444e:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8004450:	2302      	movs	r3, #2
 8004452:	e003      	b.n	800445c <MPU_init+0xb4>
	}

	mpu->state = SENSOR_IDDLE ;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	73da      	strb	r2, [r3, #15]
	return SENSOR_REQUEST_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	200017d0 	.word	0x200017d0
 8004468:	200017cc 	.word	0x200017cc
 800446c:	200017c8 	.word	0x200017c8

08004470 <MPU_init_gyro>:

/*
 *
 */
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	460b      	mov	r3, r1
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	72fb      	strb	r3, [r7, #11]

	mpu->gyro_range = gyro_range ;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	7afa      	ldrb	r2, [r7, #11]
 8004482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mpu->gyro_data_callback = gyro_data_callback ;
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	641a      	str	r2, [r3, #64]	; 0x40

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	7bdb      	ldrb	r3, [r3, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <MPU_init_gyro+0x28>
		return SENSOR_REQUEST_FAIL ;
 8004494:	2302      	movs	r3, #2
 8004496:	e08e      	b.n	80045b6 <MPU_init_gyro+0x146>

	//Configuration de la sensi du gyro dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8004498:	239b      	movs	r3, #155	; 0x9b
 800449a:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff ff62 	bl	8004366 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6858      	ldr	r0, [r3, #4]
 80044a6:	f107 0214 	add.w	r2, r7, #20
 80044aa:	f107 0114 	add.w	r1, r7, #20
 80044ae:	2302      	movs	r3, #2
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2302      	movs	r3, #2
 80044b4:	f004 f8f6 	bl	80086a4 <HAL_SPI_TransmitReceive>
 80044b8:	4603      	mov	r3, r0
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f7ff ff60 	bl	8004386 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	7b9b      	ldrb	r3, [r3, #14]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d122      	bne.n	8004514 <MPU_init_gyro+0xa4>
		HAL_Delay(1);
 80044ce:	2001      	movs	r0, #1
 80044d0:	f001 ff70 	bl	80063b4 <HAL_Delay>
		MPU_cs_lock(mpu);
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff ff46 	bl	8004366 <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 80044da:	231b      	movs	r3, #27
 80044dc:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 80044de:	7d7b      	ldrb	r3, [r7, #21]
 80044e0:	b25b      	sxtb	r3, r3
 80044e2:	f023 0318 	bic.w	r3, r3, #24
 80044e6:	b25a      	sxtb	r2, r3
 80044e8:	7afb      	ldrb	r3, [r7, #11]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	b25b      	sxtb	r3, r3
 80044ee:	4313      	orrs	r3, r2
 80044f0:	b25b      	sxtb	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6858      	ldr	r0, [r3, #4]
 80044fa:	f107 0114 	add.w	r1, r7, #20
 80044fe:	2302      	movs	r3, #2
 8004500:	2202      	movs	r2, #2
 8004502:	f003 ff9b 	bl	800843c <HAL_SPI_Transmit>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff ff39 	bl	8004386 <MPU_cs_unlock>
	}

	//ON vérifi si on a bien écris ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	7b9b      	ldrb	r3, [r3, #14]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d124      	bne.n	8004566 <MPU_init_gyro+0xf6>
		uint8_t temp2 = temp[1];
 800451c:	7d7b      	ldrb	r3, [r7, #21]
 800451e:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8004520:	239b      	movs	r3, #155	; 0x9b
 8004522:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8004524:	2001      	movs	r0, #1
 8004526:	f001 ff45 	bl	80063b4 <HAL_Delay>
		MPU_cs_lock(mpu);
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff ff1b 	bl	8004366 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6858      	ldr	r0, [r3, #4]
 8004534:	f107 0214 	add.w	r2, r7, #20
 8004538:	f107 0114 	add.w	r1, r7, #20
 800453c:	2302      	movs	r3, #2
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	2302      	movs	r3, #2
 8004542:	f004 f8af 	bl	80086a4 <HAL_SPI_TransmitReceive>
 8004546:	4603      	mov	r3, r0
 8004548:	461a      	mov	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7ff ff19 	bl	8004386 <MPU_cs_unlock>

		if(temp[1] != temp2)
 8004554:	7d7b      	ldrb	r3, [r7, #21]
 8004556:	7dfa      	ldrb	r2, [r7, #23]
 8004558:	429a      	cmp	r2, r3
 800455a:	d004      	beq.n	8004566 <MPU_init_gyro+0xf6>
		{
			mpu->state = SENSOR_ERROR ;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2204      	movs	r2, #4
 8004560:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8004562:	2302      	movs	r3, #2
 8004564:	e027      	b.n	80045b6 <MPU_init_gyro+0x146>

	}



	if(mpu->hal_state != HAL_OK)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	7b9b      	ldrb	r3, [r3, #14]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <MPU_init_gyro+0x108>
	{
		mpu->state = SENSOR_ERROR ;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2204      	movs	r2, #4
 8004572:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8004574:	2302      	movs	r3, #2
 8004576:	e01e      	b.n	80045b6 <MPU_init_gyro+0x146>
	}

	switch(gyro_range){
 8004578:	7afb      	ldrb	r3, [r7, #11]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d81a      	bhi.n	80045b4 <MPU_init_gyro+0x144>
 800457e:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <MPU_init_gyro+0x114>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	08004595 	.word	0x08004595
 8004588:	0800459d 	.word	0x0800459d
 800458c:	080045a5 	.word	0x080045a5
 8004590:	080045ad 	.word	0x080045ad
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <MPU_init_gyro+0x150>)
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800459a:	e00b      	b.n	80045b4 <MPU_init_gyro+0x144>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <MPU_init_gyro+0x154>)
 80045a0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80045a2:	e007      	b.n	80045b4 <MPU_init_gyro+0x144>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <MPU_init_gyro+0x158>)
 80045a8:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80045aa:	e003      	b.n	80045b4 <MPU_init_gyro+0x144>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a07      	ldr	r2, [pc, #28]	; (80045cc <MPU_init_gyro+0x15c>)
 80045b0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80045b2:	bf00      	nop
	}
	return SENSOR_REQUEST_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	3bfa232d 	.word	0x3bfa232d
 80045c4:	3c7a232d 	.word	0x3c7a232d
 80045c8:	3cf9c190 	.word	0x3cf9c190
 80045cc:	3d79c190 	.word	0x3d79c190

080045d0 <MPU_init_acc>:

/*
 *
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	460b      	mov	r3, r1
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	72fb      	strb	r3, [r7, #11]
	mpu->acc_range = acc_range ;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	7afa      	ldrb	r2, [r7, #11]
 80045e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	mpu->acc_data_callback = acc_data_callback ;
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	665a      	str	r2, [r3, #100]	; 0x64
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	7bdb      	ldrb	r3, [r3, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <MPU_init_acc+0x28>
		return SENSOR_REQUEST_FAIL ;
 80045f4:	2302      	movs	r3, #2
 80045f6:	e08a      	b.n	800470e <MPU_init_acc+0x13e>


	//Configuration de la sensi de l'acc dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 80045f8:	239c      	movs	r3, #156	; 0x9c
 80045fa:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff feb2 	bl	8004366 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6858      	ldr	r0, [r3, #4]
 8004606:	f107 0214 	add.w	r2, r7, #20
 800460a:	f107 0114 	add.w	r1, r7, #20
 800460e:	2302      	movs	r3, #2
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2302      	movs	r3, #2
 8004614:	f004 f846 	bl	80086a4 <HAL_SPI_TransmitReceive>
 8004618:	4603      	mov	r3, r0
 800461a:	461a      	mov	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff feb0 	bl	8004386 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){	//Si mpu ok on écrit en spi dans le registre de config du mpu dédié au gyro
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	7b9b      	ldrb	r3, [r3, #14]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d122      	bne.n	8004674 <MPU_init_acc+0xa4>
		HAL_Delay(1);
 800462e:	2001      	movs	r0, #1
 8004630:	f001 fec0 	bl	80063b4 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7ff fe96 	bl	8004366 <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 800463a:	231c      	movs	r3, #28
 800463c:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 800463e:	7d7b      	ldrb	r3, [r7, #21]
 8004640:	b25b      	sxtb	r3, r3
 8004642:	f023 0318 	bic.w	r3, r3, #24
 8004646:	b25a      	sxtb	r2, r3
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	b25b      	sxtb	r3, r3
 800464e:	4313      	orrs	r3, r2
 8004650:	b25b      	sxtb	r3, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6858      	ldr	r0, [r3, #4]
 800465a:	f107 0114 	add.w	r1, r7, #20
 800465e:	2302      	movs	r3, #2
 8004660:	2202      	movs	r2, #2
 8004662:	f003 feeb 	bl	800843c <HAL_SPI_Transmit>
 8004666:	4603      	mov	r3, r0
 8004668:	461a      	mov	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fe89 	bl	8004386 <MPU_cs_unlock>
	}

	//On test si on a bien écrit ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	7b9b      	ldrb	r3, [r3, #14]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d124      	bne.n	80046c6 <MPU_init_acc+0xf6>
		uint8_t temp2 = temp[1];
 800467c:	7d7b      	ldrb	r3, [r7, #21]
 800467e:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8004680:	239c      	movs	r3, #156	; 0x9c
 8004682:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8004684:	2001      	movs	r0, #1
 8004686:	f001 fe95 	bl	80063b4 <HAL_Delay>
		MPU_cs_lock(mpu);
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7ff fe6b 	bl	8004366 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6858      	ldr	r0, [r3, #4]
 8004694:	f107 0214 	add.w	r2, r7, #20
 8004698:	f107 0114 	add.w	r1, r7, #20
 800469c:	2302      	movs	r3, #2
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2302      	movs	r3, #2
 80046a2:	f003 ffff 	bl	80086a4 <HAL_SPI_TransmitReceive>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f7ff fe69 	bl	8004386 <MPU_cs_unlock>

		if(temp[1] != temp2)
 80046b4:	7d7b      	ldrb	r3, [r7, #21]
 80046b6:	7dfa      	ldrb	r2, [r7, #23]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d004      	beq.n	80046c6 <MPU_init_acc+0xf6>
		{
			mpu->state = SENSOR_ERROR ;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2204      	movs	r2, #4
 80046c0:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 80046c2:	2302      	movs	r3, #2
 80046c4:	e023      	b.n	800470e <MPU_init_acc+0x13e>
		}
	}



	switch(acc_range){
 80046c6:	7afb      	ldrb	r3, [r7, #11]
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d81f      	bhi.n	800470c <MPU_init_acc+0x13c>
 80046cc:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <MPU_init_acc+0x104>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	080046e5 	.word	0x080046e5
 80046d8:	080046ef 	.word	0x080046ef
 80046dc:	080046f9 	.word	0x080046f9
 80046e0:	08004703 	.word	0x08004703
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80046ea:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 80046ec:	e00e      	b.n	800470c <MPU_init_acc+0x13c>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80046f4:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 80046f6:	e009      	b.n	800470c <MPU_init_acc+0x13c>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80046fe:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004700:	e004      	b.n	800470c <MPU_init_acc+0x13c>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8004708:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 800470a:	bf00      	nop
	}
	return SENSOR_REQUEST_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop

08004718 <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_REQUEST_OK ;

}

sensor_request_e MPU_update_acc(mpu_t * mpu){
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af02      	add	r7, sp, #8
 800471e:	6078      	str	r0, [r7, #4]

	if(mpu->state != SENSOR_IDDLE){
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7bdb      	ldrb	r3, [r3, #15]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <MPU_update_acc+0x14>
		return SENSOR_REQUEST_FAIL ;
 8004728:	2302      	movs	r3, #2
 800472a:	e030      	b.n	800478e <MPU_update_acc+0x76>
	}

	//Update des valeurs
	uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 800472c:	23bb      	movs	r3, #187	; 0xbb
 800472e:	723b      	strb	r3, [r7, #8]
 8004730:	2300      	movs	r3, #0
 8004732:	727b      	strb	r3, [r7, #9]
 8004734:	2300      	movs	r3, #0
 8004736:	72bb      	strb	r3, [r7, #10]
 8004738:	2300      	movs	r3, #0
 800473a:	72fb      	strb	r3, [r7, #11]
 800473c:	2300      	movs	r3, #0
 800473e:	733b      	strb	r3, [r7, #12]
 8004740:	2300      	movs	r3, #0
 8004742:	737b      	strb	r3, [r7, #13]
	MPU_cs_lock(mpu);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff fe0e 	bl	8004366 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6858      	ldr	r0, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004752:	f107 0108 	add.w	r1, r7, #8
 8004756:	2302      	movs	r3, #2
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	2306      	movs	r3, #6
 800475c:	f003 ffa2 	bl	80086a4 <HAL_SPI_TransmitReceive>
 8004760:	4603      	mov	r3, r0
 8004762:	461a      	mov	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff fe0c 	bl	8004386 <MPU_cs_unlock>


	if(mpu->hal_state == HAL_BUSY)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	7b9b      	ldrb	r3, [r3, #14]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d101      	bne.n	800477a <MPU_update_acc+0x62>
		return SENSOR_REQUEST_BUSY ;
 8004776:	2301      	movs	r3, #1
 8004778:	e009      	b.n	800478e <MPU_update_acc+0x76>
	if(mpu->hal_state != HAL_OK){
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7b9b      	ldrb	r3, [r3, #14]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <MPU_update_acc+0x6e>
		return SENSOR_REQUEST_FAIL ;
 8004782:	2302      	movs	r3, #2
 8004784:	e003      	b.n	800478e <MPU_update_acc+0x76>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff fd87 	bl	800429a <convert_acc>
	return SENSOR_REQUEST_OK ;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <MPU_update_all_dma>:
	}

	return SENSOR_REQUEST_OK;
}

sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 8004796:	b580      	push	{r7, lr}
 8004798:	b086      	sub	sp, #24
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]

	uint8_t registers [14] = {0};
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	609a      	str	r2, [r3, #8]
 80047aa:	819a      	strh	r2, [r3, #12]
	registers[0] = MPU6050_ACCEL_XOUT_H | MPU6050_READ ;
 80047ac:	23bb      	movs	r3, #187	; 0xbb
 80047ae:	723b      	strb	r3, [r7, #8]
	MPU_cs_lock(mpu);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fdd8 	bl	8004366 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive_DMA(mpu->hspi, registers, mpu->data, 14);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6858      	ldr	r0, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f103 0212 	add.w	r2, r3, #18
 80047c0:	f107 0108 	add.w	r1, r7, #8
 80047c4:	230e      	movs	r3, #14
 80047c6:	f004 f90f 	bl	80089e8 <HAL_SPI_TransmitReceive_DMA>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7b9b      	ldrb	r3, [r3, #14]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d107      	bne.n	80047ea <MPU_update_all_dma+0x54>
	{
		mpu->state = SENSOR_BUSY ;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2203      	movs	r2, #3
 80047de:	73da      	strb	r2, [r3, #15]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2203      	movs	r2, #3
 80047e4:	741a      	strb	r2, [r3, #16]
	{
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	return SENSOR_REQUEST_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e009      	b.n	80047fe <MPU_update_all_dma+0x68>
	else if(mpu->hal_state == HAL_BUSY)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	7b9b      	ldrb	r3, [r3, #14]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d101      	bne.n	80047f6 <MPU_update_all_dma+0x60>
		return SENSOR_REQUEST_BUSY;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e003      	b.n	80047fe <MPU_update_all_dma+0x68>
		mpu->state = SENSOR_ERROR ;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2204      	movs	r2, #4
 80047fa:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 80047fc:	2302      	movs	r3, #2
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <MPU_dma_transmit_complete>:



static void MPU_dma_transmit_complete(mpu_t * mpu){
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]

	//On relâche le pin CS du mpu
	MPU_cs_unlock(mpu);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fdb9 	bl	8004386 <MPU_cs_unlock>


	switch(mpu->dma_state){
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	7c1b      	ldrb	r3, [r3, #16]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d00b      	beq.n	8004834 <MPU_dma_transmit_complete+0x2e>
 800481c:	2b03      	cmp	r3, #3
 800481e:	d010      	beq.n	8004842 <MPU_dma_transmit_complete+0x3c>
 8004820:	2b01      	cmp	r3, #1
 8004822:	d000      	beq.n	8004826 <MPU_dma_transmit_complete+0x20>
			mpu->gyro_data_callback();

			break;
		case MPU_DMA_IDDLE:
		default:
			break;
 8004824:	e014      	b.n	8004850 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fcd4 	bl	80041d4 <convert_gyro>
			mpu->gyro_data_callback();
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	4798      	blx	r3
			break;
 8004832:	e00d      	b.n	8004850 <MPU_dma_transmit_complete+0x4a>
			convert_acc(mpu);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fd30 	bl	800429a <convert_acc>
			mpu->acc_data_callback();
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800483e:	4798      	blx	r3
			break;
 8004840:	e006      	b.n	8004850 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff fcc6 	bl	80041d4 <convert_gyro>
			mpu->gyro_data_callback();
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	4798      	blx	r3
			break;
 800484e:	bf00      	nop

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	741a      	strb	r2, [r3, #16]
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <MPU_dma_transmit_half_complete>:
static void MPU_dma_transmit_half_complete(mpu_t * mpu){
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]

	if(mpu->dma_state == MPU_DMA_ACC_AND_GYRO_IN_PROGRESS)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	7c1b      	ldrb	r3, [r3, #16]
 800486a:	2b03      	cmp	r3, #3
 800486c:	d105      	bne.n	800487a <MPU_dma_transmit_half_complete+0x1c>
	{
		//A la moitié donc les données de l'acc sont arrivées
		convert_acc(mpu);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff fd13 	bl	800429a <convert_acc>
		mpu->acc_data_callback();
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004878:	4798      	blx	r3
	}
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
	if(hspi == SPI_handlers[0])
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_SPI_TxRxCpltCallback+0x24>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d104      	bne.n	80048a0 <HAL_SPI_TxRxCpltCallback+0x1c>
		MPU_dma_transmit_complete(mpu_handlers[0]);
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_SPI_TxRxCpltCallback+0x28>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff ffb3 	bl	8004806 <MPU_dma_transmit_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	200017c8 	.word	0x200017c8
 80048ac:	200017cc 	.word	0x200017cc

080048b0 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
if(hspi == SPI_handlers[0])
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d104      	bne.n	80048cc <HAL_SPI_TxRxHalfCpltCallback+0x1c>
	MPU_dma_transmit_half_complete(mpu_handlers[0]);
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff ffc9 	bl	800485e <MPU_dma_transmit_half_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif

}
 80048cc:	bf00      	nop
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	200017c8 	.word	0x200017c8
 80048d8:	200017cc 	.word	0x200017cc

080048dc <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80048e2:	463b      	mov	r3, r7
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80048ee:	4b21      	ldr	r3, [pc, #132]	; (8004974 <MX_ADC2_Init+0x98>)
 80048f0:	4a21      	ldr	r2, [pc, #132]	; (8004978 <MX_ADC2_Init+0x9c>)
 80048f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80048f4:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <MX_ADC2_Init+0x98>)
 80048f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <MX_ADC2_Init+0x98>)
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <MX_ADC2_Init+0x98>)
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <MX_ADC2_Init+0x98>)
 800490a:	2201      	movs	r2, #1
 800490c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800490e:	4b19      	ldr	r3, [pc, #100]	; (8004974 <MX_ADC2_Init+0x98>)
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004916:	4b17      	ldr	r3, [pc, #92]	; (8004974 <MX_ADC2_Init+0x98>)
 8004918:	2200      	movs	r2, #0
 800491a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800491c:	4b15      	ldr	r3, [pc, #84]	; (8004974 <MX_ADC2_Init+0x98>)
 800491e:	4a17      	ldr	r2, [pc, #92]	; (800497c <MX_ADC2_Init+0xa0>)
 8004920:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004922:	4b14      	ldr	r3, [pc, #80]	; (8004974 <MX_ADC2_Init+0x98>)
 8004924:	2200      	movs	r2, #0
 8004926:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004928:	4b12      	ldr	r3, [pc, #72]	; (8004974 <MX_ADC2_Init+0x98>)
 800492a:	2201      	movs	r2, #1
 800492c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800492e:	4b11      	ldr	r3, [pc, #68]	; (8004974 <MX_ADC2_Init+0x98>)
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <MX_ADC2_Init+0x98>)
 8004938:	2201      	movs	r2, #1
 800493a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800493c:	480d      	ldr	r0, [pc, #52]	; (8004974 <MX_ADC2_Init+0x98>)
 800493e:	f001 fd5b 	bl	80063f8 <HAL_ADC_Init>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004948:	f000 fbc4 	bl	80050d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800494c:	2309      	movs	r3, #9
 800494e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004950:	2301      	movs	r3, #1
 8004952:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004958:	463b      	mov	r3, r7
 800495a:	4619      	mov	r1, r3
 800495c:	4805      	ldr	r0, [pc, #20]	; (8004974 <MX_ADC2_Init+0x98>)
 800495e:	f001 fe9f 	bl	80066a0 <HAL_ADC_ConfigChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004968:	f000 fbb4 	bl	80050d4 <Error_Handler>
  }

}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	200017f0 	.word	0x200017f0
 8004978:	40012100 	.word	0x40012100
 800497c:	0f000001 	.word	0x0f000001

08004980 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08a      	sub	sp, #40	; 0x28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004988:	f107 0314 	add.w	r3, r7, #20
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	60da      	str	r2, [r3, #12]
 8004996:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a3c      	ldr	r2, [pc, #240]	; (8004a90 <HAL_ADC_MspInit+0x110>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d172      	bne.n	8004a88 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b0:	6453      	str	r3, [r2, #68]	; 0x44
 80049b2:	4b38      	ldr	r3, [pc, #224]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	4a33      	ldr	r2, [pc, #204]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049c8:	f043 0304 	orr.w	r3, r3, #4
 80049cc:	6313      	str	r3, [r2, #48]	; 0x30
 80049ce:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049e4:	f043 0302 	orr.w	r3, r3, #2
 80049e8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ea:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <HAL_ADC_MspInit+0x114>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 80049f6:	2302      	movs	r3, #2
 80049f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049fa:	2303      	movs	r3, #3
 80049fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 8004a02:	f107 0314 	add.w	r3, r7, #20
 8004a06:	4619      	mov	r1, r3
 8004a08:	4823      	ldr	r0, [pc, #140]	; (8004a98 <HAL_ADC_MspInit+0x118>)
 8004a0a:	f002 fd8b 	bl	8007524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a12:	2303      	movs	r3, #3
 8004a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8004a1a:	f107 0314 	add.w	r3, r7, #20
 8004a1e:	4619      	mov	r1, r3
 8004a20:	481e      	ldr	r0, [pc, #120]	; (8004a9c <HAL_ADC_MspInit+0x11c>)
 8004a22:	f002 fd7f 	bl	8007524 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004a26:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a28:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_ADC_MspInit+0x124>)
 8004a2a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004a2c:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a32:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a34:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a3a:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004a40:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a46:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a4e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a56:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a5e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a66:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004a6c:	480c      	ldr	r0, [pc, #48]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a6e:	f002 f9c9 	bl	8006e04 <HAL_DMA_Init>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8004a78:	f000 fb2c 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
 8004a82:	4a07      	ldr	r2, [pc, #28]	; (8004aa0 <HAL_ADC_MspInit+0x120>)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3728      	adds	r7, #40	; 0x28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40012100 	.word	0x40012100
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40020800 	.word	0x40020800
 8004a9c:	40020400 	.word	0x40020400
 8004aa0:	20001838 	.word	0x20001838
 8004aa4:	40026440 	.word	0x40026440

08004aa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <MX_DMA_Init+0x108>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	4a3e      	ldr	r2, [pc, #248]	; (8004bb0 <MX_DMA_Init+0x108>)
 8004ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004abc:	6313      	str	r3, [r2, #48]	; 0x30
 8004abe:	4b3c      	ldr	r3, [pc, #240]	; (8004bb0 <MX_DMA_Init+0x108>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	4b38      	ldr	r3, [pc, #224]	; (8004bb0 <MX_DMA_Init+0x108>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	4a37      	ldr	r2, [pc, #220]	; (8004bb0 <MX_DMA_Init+0x108>)
 8004ad4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ada:	4b35      	ldr	r3, [pc, #212]	; (8004bb0 <MX_DMA_Init+0x108>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2100      	movs	r1, #0
 8004aea:	200b      	movs	r0, #11
 8004aec:	f002 f953 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004af0:	200b      	movs	r0, #11
 8004af2:	f002 f96c 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004af6:	2200      	movs	r2, #0
 8004af8:	2100      	movs	r1, #0
 8004afa:	200c      	movs	r0, #12
 8004afc:	f002 f94b 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004b00:	200c      	movs	r0, #12
 8004b02:	f002 f964 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8004b06:	2200      	movs	r2, #0
 8004b08:	2100      	movs	r1, #0
 8004b0a:	200e      	movs	r0, #14
 8004b0c:	f002 f943 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004b10:	200e      	movs	r0, #14
 8004b12:	f002 f95c 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004b16:	2200      	movs	r2, #0
 8004b18:	2100      	movs	r1, #0
 8004b1a:	200f      	movs	r0, #15
 8004b1c:	f002 f93b 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004b20:	200f      	movs	r0, #15
 8004b22:	f002 f954 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004b26:	2200      	movs	r2, #0
 8004b28:	2100      	movs	r1, #0
 8004b2a:	2010      	movs	r0, #16
 8004b2c:	f002 f933 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004b30:	2010      	movs	r0, #16
 8004b32:	f002 f94c 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004b36:	2200      	movs	r2, #0
 8004b38:	2100      	movs	r1, #0
 8004b3a:	2011      	movs	r0, #17
 8004b3c:	f002 f92b 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004b40:	2011      	movs	r0, #17
 8004b42:	f002 f944 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8004b46:	2200      	movs	r2, #0
 8004b48:	2100      	movs	r1, #0
 8004b4a:	202f      	movs	r0, #47	; 0x2f
 8004b4c:	f002 f923 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004b50:	202f      	movs	r0, #47	; 0x2f
 8004b52:	f002 f93c 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004b56:	2200      	movs	r2, #0
 8004b58:	2100      	movs	r1, #0
 8004b5a:	2038      	movs	r0, #56	; 0x38
 8004b5c:	f002 f91b 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004b60:	2038      	movs	r0, #56	; 0x38
 8004b62:	f002 f934 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8004b66:	2200      	movs	r2, #0
 8004b68:	2100      	movs	r1, #0
 8004b6a:	2039      	movs	r0, #57	; 0x39
 8004b6c:	f002 f913 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004b70:	2039      	movs	r0, #57	; 0x39
 8004b72:	f002 f92c 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004b76:	2200      	movs	r2, #0
 8004b78:	2100      	movs	r1, #0
 8004b7a:	203a      	movs	r0, #58	; 0x3a
 8004b7c:	f002 f90b 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004b80:	203a      	movs	r0, #58	; 0x3a
 8004b82:	f002 f924 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004b86:	2200      	movs	r2, #0
 8004b88:	2100      	movs	r1, #0
 8004b8a:	203b      	movs	r0, #59	; 0x3b
 8004b8c:	f002 f903 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004b90:	203b      	movs	r0, #59	; 0x3b
 8004b92:	f002 f91c 	bl	8006dce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004b96:	2200      	movs	r2, #0
 8004b98:	2100      	movs	r1, #0
 8004b9a:	2045      	movs	r0, #69	; 0x45
 8004b9c:	f002 f8fb 	bl	8006d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004ba0:	2045      	movs	r0, #69	; 0x45
 8004ba2:	f002 f914 	bl	8006dce <HAL_NVIC_EnableIRQ>

}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40023800 	.word	0x40023800

08004bb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bba:	f107 0314 	add.w	r3, r7, #20
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
 8004bc4:	609a      	str	r2, [r3, #8]
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	4b44      	ldr	r3, [pc, #272]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	4a43      	ldr	r2, [pc, #268]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004bd4:	f043 0304 	orr.w	r3, r3, #4
 8004bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bda:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	4b3d      	ldr	r3, [pc, #244]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4a3c      	ldr	r2, [pc, #240]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf6:	4b3a      	ldr	r3, [pc, #232]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	4a35      	ldr	r2, [pc, #212]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	6313      	str	r3, [r2, #48]	; 0x30
 8004c12:	4b33      	ldr	r3, [pc, #204]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	4a2e      	ldr	r2, [pc, #184]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004c28:	f043 0302 	orr.w	r3, r3, #2
 8004c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ce0 <MX_GPIO_Init+0x12c>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	607b      	str	r3, [r7, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8004c40:	4828      	ldr	r0, [pc, #160]	; (8004ce4 <MX_GPIO_Init+0x130>)
 8004c42:	f002 fe09 	bl	8007858 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 8004c46:	2201      	movs	r2, #1
 8004c48:	2101      	movs	r1, #1
 8004c4a:	4826      	ldr	r0, [pc, #152]	; (8004ce4 <MX_GPIO_Init+0x130>)
 8004c4c:	f002 fe04 	bl	8007858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8004c50:	2200      	movs	r2, #0
 8004c52:	2101      	movs	r1, #1
 8004c54:	4824      	ldr	r0, [pc, #144]	; (8004ce8 <MX_GPIO_Init+0x134>)
 8004c56:	f002 fdff 	bl	8007858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c60:	4822      	ldr	r0, [pc, #136]	; (8004cec <MX_GPIO_Init+0x138>)
 8004c62:	f002 fdf9 	bl	8007858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 8004c66:	f24e 231d 	movw	r3, #57885	; 0xe21d
 8004c6a:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c74:	2300      	movs	r3, #0
 8004c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c78:	f107 0314 	add.w	r3, r7, #20
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4819      	ldr	r0, [pc, #100]	; (8004ce4 <MX_GPIO_Init+0x130>)
 8004c80:	f002 fc50 	bl	8007524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 8004c84:	2301      	movs	r3, #1
 8004c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c90:	2300      	movs	r3, #0
 8004c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 8004c94:	f107 0314 	add.w	r3, r7, #20
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4813      	ldr	r0, [pc, #76]	; (8004ce8 <MX_GPIO_Init+0x134>)
 8004c9c:	f002 fc42 	bl	8007524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 8004cac:	f107 0314 	add.w	r3, r7, #20
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	480d      	ldr	r0, [pc, #52]	; (8004ce8 <MX_GPIO_Init+0x134>)
 8004cb4:	f002 fc36 	bl	8007524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 8004cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 8004cca:	f107 0314 	add.w	r3, r7, #20
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4806      	ldr	r0, [pc, #24]	; (8004cec <MX_GPIO_Init+0x138>)
 8004cd2:	f002 fc27 	bl	8007524 <HAL_GPIO_Init>

}
 8004cd6:	bf00      	nop
 8004cd8:	3728      	adds	r7, #40	; 0x28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40020800 	.word	0x40020800
 8004ce8:	40020000 	.word	0x40020000
 8004cec:	40020400 	.word	0x40020400

08004cf0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004cf4:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <MX_I2C1_Init+0x50>)
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <MX_I2C1_Init+0x54>)
 8004cf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004cfa:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <MX_I2C1_Init+0x50>)
 8004cfc:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <MX_I2C1_Init+0x58>)
 8004cfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <MX_I2C1_Init+0x50>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004d06:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <MX_I2C1_Init+0x50>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <MX_I2C1_Init+0x50>)
 8004d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <MX_I2C1_Init+0x50>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004d1a:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <MX_I2C1_Init+0x50>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <MX_I2C1_Init+0x50>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <MX_I2C1_Init+0x50>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004d2c:	4804      	ldr	r0, [pc, #16]	; (8004d40 <MX_I2C1_Init+0x50>)
 8004d2e:	f002 fdad 	bl	800788c <HAL_I2C_Init>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004d38:	f000 f9cc 	bl	80050d4 <Error_Handler>
  }

}
 8004d3c:	bf00      	nop
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200018f8 	.word	0x200018f8
 8004d44:	40005400 	.word	0x40005400
 8004d48:	00061a80 	.word	0x00061a80

08004d4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	; 0x28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d54:	f107 0314 	add.w	r3, r7, #20
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	609a      	str	r2, [r3, #8]
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a47      	ldr	r2, [pc, #284]	; (8004e88 <HAL_I2C_MspInit+0x13c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	f040 8088 	bne.w	8004e80 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <HAL_I2C_MspInit+0x140>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	4a44      	ldr	r2, [pc, #272]	; (8004e8c <HAL_I2C_MspInit+0x140>)
 8004d7a:	f043 0302 	orr.w	r3, r3, #2
 8004d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d80:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <HAL_I2C_MspInit+0x140>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d8c:	23c0      	movs	r3, #192	; 0xc0
 8004d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d90:	2312      	movs	r3, #18
 8004d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d94:	2301      	movs	r3, #1
 8004d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da0:	f107 0314 	add.w	r3, r7, #20
 8004da4:	4619      	mov	r1, r3
 8004da6:	483a      	ldr	r0, [pc, #232]	; (8004e90 <HAL_I2C_MspInit+0x144>)
 8004da8:	f002 fbbc 	bl	8007524 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <HAL_I2C_MspInit+0x140>)
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	4a35      	ldr	r2, [pc, #212]	; (8004e8c <HAL_I2C_MspInit+0x140>)
 8004db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dba:	6413      	str	r3, [r2, #64]	; 0x40
 8004dbc:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <HAL_I2C_MspInit+0x140>)
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004dc8:	4b32      	ldr	r3, [pc, #200]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004dca:	4a33      	ldr	r2, [pc, #204]	; (8004e98 <HAL_I2C_MspInit+0x14c>)
 8004dcc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004dce:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004dd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dd4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dd6:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ddc:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004de2:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004de8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dea:	4b2a      	ldr	r3, [pc, #168]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004df6:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004dfc:	4b25      	ldr	r3, [pc, #148]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004e08:	4822      	ldr	r0, [pc, #136]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004e0a:	f001 fffb 	bl	8006e04 <HAL_DMA_Init>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004e14:	f000 f95e 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <HAL_I2C_MspInit+0x148>)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8004e24:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e26:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <HAL_I2C_MspInit+0x154>)
 8004e28:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004e2a:	4b1c      	ldr	r3, [pc, #112]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e30:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e32:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e34:	2240      	movs	r2, #64	; 0x40
 8004e36:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e38:	4b18      	ldr	r3, [pc, #96]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e3e:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e44:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e4c:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e5e:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004e64:	480d      	ldr	r0, [pc, #52]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e66:	f001 ffcd 	bl	8006e04 <HAL_DMA_Init>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8004e70:	f000 f930 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e78:	635a      	str	r2, [r3, #52]	; 0x34
 8004e7a:	4a08      	ldr	r2, [pc, #32]	; (8004e9c <HAL_I2C_MspInit+0x150>)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004e80:	bf00      	nop
 8004e82:	3728      	adds	r7, #40	; 0x28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40005400 	.word	0x40005400
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40020400 	.word	0x40020400
 8004e94:	2000194c 	.word	0x2000194c
 8004e98:	40026010 	.word	0x40026010
 8004e9c:	20001898 	.word	0x20001898
 8004ea0:	400260b8 	.word	0x400260b8

08004ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ea8:	f001 fa12 	bl	80062d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004eac:	f000 f8a8 	bl	8005000 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(500);	//Let the time to the components to start
 8004eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004eb4:	f001 fa7e 	bl	80063b4 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004eb8:	f7ff fe7c 	bl	8004bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ebc:	f7ff fdf4 	bl	8004aa8 <MX_DMA_Init>
  MX_I2C1_Init();
 8004ec0:	f7ff ff16 	bl	8004cf0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004ec4:	f000 f90e 	bl	80050e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004ec8:	f000 f942 	bl	8005150 <MX_SPI2_Init>
  MX_TIM1_Init();
 8004ecc:	f000 fc20 	bl	8005710 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8004ed0:	f000 fda6 	bl	8005a20 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004ed4:	f000 fdce 	bl	8005a74 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8004ed8:	f000 fdf6 	bl	8005ac8 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8004edc:	f7ff fcfe 	bl	80048dc <MX_ADC2_Init>
  MX_TIM2_Init();
 8004ee0:	f000 fcdc 	bl	800589c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);	//Let the time for the components to start
 8004ee4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ee8:	f001 fa64 	bl	80063b4 <HAL_Delay>

  //Init du baromètre
  //MS5611_init(&sys.sensors.ms5611, &hi2c1);

  //Init du GYRO et de l ACC en utilisant un MPU6000
  MPU_init(&sys.sensors.mpu, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 8004eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ef0:	4a2f      	ldr	r2, [pc, #188]	; (8004fb0 <main+0x10c>)
 8004ef2:	4930      	ldr	r1, [pc, #192]	; (8004fb4 <main+0x110>)
 8004ef4:	4830      	ldr	r0, [pc, #192]	; (8004fb8 <main+0x114>)
 8004ef6:	f7ff fa57 	bl	80043a8 <MPU_init>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 8004efa:	492f      	ldr	r1, [pc, #188]	; (8004fb8 <main+0x114>)
 8004efc:	482f      	ldr	r0, [pc, #188]	; (8004fbc <main+0x118>)
 8004efe:	f7ff f80b 	bl	8003f18 <GYRO_init>
  ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 8004f02:	492d      	ldr	r1, [pc, #180]	; (8004fb8 <main+0x114>)
 8004f04:	482e      	ldr	r0, [pc, #184]	; (8004fc0 <main+0x11c>)
 8004f06:	f7fe ff4d 	bl	8003da4 <ACC_init>



  IHM_Init(&sys.ihm);
 8004f0a:	482e      	ldr	r0, [pc, #184]	; (8004fc4 <main+0x120>)
 8004f0c:	f7fc fff4 	bl	8001ef8 <IHM_Init>
  IHM_Led_Init(LED_HIGH_LVL, 30, PIN_LED_RGB_1_Pin, LED_OUTPUT_NEGATIVE);
 8004f10:	2301      	movs	r3, #1
 8004f12:	2201      	movs	r2, #1
 8004f14:	211e      	movs	r1, #30
 8004f16:	2000      	movs	r0, #0
 8004f18:	f7fc fffe 	bl	8001f18 <IHM_Led_Init>
  IHM_Led_Init(LED_SENSORS, 30, PIN_LED_RGB_2_Pin, LED_OUTPUT_NEGATIVE);
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f22:	211e      	movs	r1, #30
 8004f24:	2001      	movs	r0, #1
 8004f26:	f7fc fff7 	bl	8001f18 <IHM_Led_Init>

  IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004f30:	2100      	movs	r1, #0
 8004f32:	2000      	movs	r0, #0
 8004f34:	f7fd f85e 	bl	8001ff4 <IHM_Set_Sequences>
  IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2001      	movs	r0, #1
 8004f42:	f7fd f857 	bl	8001ff4 <IHM_Set_Sequences>

  BATTERIE_Init(&sys.sensors.batterie, &hadc2);
 8004f46:	4920      	ldr	r1, [pc, #128]	; (8004fc8 <main+0x124>)
 8004f48:	4820      	ldr	r0, [pc, #128]	; (8004fcc <main+0x128>)
 8004f4a:	f7fe ffd2 	bl	8003ef2 <BATTERIE_Init>

  CONTROLLER_Init(&sys.radio.controller, &sys.radio.ibus);
 8004f4e:	4920      	ldr	r1, [pc, #128]	; (8004fd0 <main+0x12c>)
 8004f50:	4820      	ldr	r0, [pc, #128]	; (8004fd4 <main+0x130>)
 8004f52:	f7fe fb29 	bl	80035a8 <CONTROLLER_Init>
  IBUS_init(&sys.radio.ibus, &huart3, CONTROLLER_Rx_Data_Rdy);
 8004f56:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <main+0x134>)
 8004f58:	4920      	ldr	r1, [pc, #128]	; (8004fdc <main+0x138>)
 8004f5a:	481d      	ldr	r0, [pc, #116]	; (8004fd0 <main+0x12c>)
 8004f5c:	f006 f994 	bl	800b288 <IBUS_init>

  ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_FREQUENCY);
 8004f60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004f64:	4a16      	ldr	r2, [pc, #88]	; (8004fc0 <main+0x11c>)
 8004f66:	4915      	ldr	r1, [pc, #84]	; (8004fbc <main+0x118>)
 8004f68:	481d      	ldr	r0, [pc, #116]	; (8004fe0 <main+0x13c>)
 8004f6a:	f7fc fbd7 	bl	800171c <ORIENTATION_Init>
  REGULATION_ORIENTATION_Init(&sys.regulation.orientation, &sys.orientation, sys.propulsion.consigne);
 8004f6e:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <main+0x140>)
 8004f70:	491b      	ldr	r1, [pc, #108]	; (8004fe0 <main+0x13c>)
 8004f72:	481d      	ldr	r0, [pc, #116]	; (8004fe8 <main+0x144>)
 8004f74:	f7fe fde2 	bl	8003b3c <REGULATION_ORIENTATION_Init>
  REGULATION_POSITION_Init(&sys.regulation.position, &sys.regulation.orientation, sys.propulsion.consigne);
 8004f78:	4a1a      	ldr	r2, [pc, #104]	; (8004fe4 <main+0x140>)
 8004f7a:	491b      	ldr	r1, [pc, #108]	; (8004fe8 <main+0x144>)
 8004f7c:	481b      	ldr	r0, [pc, #108]	; (8004fec <main+0x148>)
 8004f7e:	f7fe febf 	bl	8003d00 <REGULATION_POSITION_Init>
  PROPULSION_Init(&sys.propulsion, &htim1);
 8004f82:	491b      	ldr	r1, [pc, #108]	; (8004ff0 <main+0x14c>)
 8004f84:	481b      	ldr	r0, [pc, #108]	; (8004ff4 <main+0x150>)
 8004f86:	f7fe fa57 	bl	8003438 <PROPULSION_Init>

  TELEMETRY_Init(&sys.radio.telemetry, &huart2);
 8004f8a:	491b      	ldr	r1, [pc, #108]	; (8004ff8 <main+0x154>)
 8004f8c:	481b      	ldr	r0, [pc, #108]	; (8004ffc <main+0x158>)
 8004f8e:	f000 ffcf 	bl	8005f30 <TELEMETRY_Init>

  FLIGHT_MODE_Init(&sys);
 8004f92:	480c      	ldr	r0, [pc, #48]	; (8004fc4 <main+0x120>)
 8004f94:	f7fc fe7c 	bl	8001c90 <FLIGHT_MODE_Init>

  SCHEDULER_init(&sys);
 8004f98:	480a      	ldr	r0, [pc, #40]	; (8004fc4 <main+0x120>)
 8004f9a:	f7fd fe3f 	bl	8002c1c <SCHEDULER_init>
  EVENT_init(&sys);
 8004f9e:	4809      	ldr	r0, [pc, #36]	; (8004fc4 <main+0x120>)
 8004fa0:	f7fd fb64 	bl	800266c <EVENT_init>

  DATA_LOGGER_Init(&sys);
 8004fa4:	4807      	ldr	r0, [pc, #28]	; (8004fc4 <main+0x120>)
 8004fa6:	f7fb ffcf 	bl	8000f48 <DATA_LOGGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 8004faa:	f7fd fe49 	bl	8002c40 <SCHEDULER_run>
 8004fae:	e7fc      	b.n	8004faa <main+0x106>
 8004fb0:	40020400 	.word	0x40020400
 8004fb4:	200023d8 	.word	0x200023d8
 8004fb8:	20001afc 	.word	0x20001afc
 8004fbc:	200019dc 	.word	0x200019dc
 8004fc0:	20001a50 	.word	0x20001a50
 8004fc4:	200019ac 	.word	0x200019ac
 8004fc8:	200017f0 	.word	0x200017f0
 8004fcc:	20001ab8 	.word	0x20001ab8
 8004fd0:	20001bc0 	.word	0x20001bc0
 8004fd4:	20001c20 	.word	0x20001c20
 8004fd8:	08003b2f 	.word	0x08003b2f
 8004fdc:	200027a8 	.word	0x200027a8
 8004fe0:	20001b8c 	.word	0x20001b8c
 8004fe4:	200022b4 	.word	0x200022b4
 8004fe8:	200022c4 	.word	0x200022c4
 8004fec:	200023cc 	.word	0x200023cc
 8004ff0:	20002608 	.word	0x20002608
 8004ff4:	200022a4 	.word	0x200022a4
 8004ff8:	200028e8 	.word	0x200028e8
 8004ffc:	20001c78 	.word	0x20001c78

08005000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b094      	sub	sp, #80	; 0x50
 8005004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005006:	f107 0320 	add.w	r3, r7, #32
 800500a:	2230      	movs	r2, #48	; 0x30
 800500c:	2100      	movs	r1, #0
 800500e:	4618      	mov	r0, r3
 8005010:	f006 fcd8 	bl	800b9c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005014:	f107 030c 	add.w	r3, r7, #12
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	605a      	str	r2, [r3, #4]
 800501e:	609a      	str	r2, [r3, #8]
 8005020:	60da      	str	r2, [r3, #12]
 8005022:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005024:	2300      	movs	r3, #0
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	4b28      	ldr	r3, [pc, #160]	; (80050cc <SystemClock_Config+0xcc>)
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	4a27      	ldr	r2, [pc, #156]	; (80050cc <SystemClock_Config+0xcc>)
 800502e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005032:	6413      	str	r3, [r2, #64]	; 0x40
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <SystemClock_Config+0xcc>)
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005040:	2300      	movs	r3, #0
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	4b22      	ldr	r3, [pc, #136]	; (80050d0 <SystemClock_Config+0xd0>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <SystemClock_Config+0xd0>)
 800504a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <SystemClock_Config+0xd0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005058:	607b      	str	r3, [r7, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800505c:	2302      	movs	r3, #2
 800505e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005060:	2301      	movs	r3, #1
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005064:	2310      	movs	r3, #16
 8005066:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005068:	2302      	movs	r3, #2
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800506c:	2300      	movs	r3, #0
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005070:	2308      	movs	r3, #8
 8005072:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005074:	23a8      	movs	r3, #168	; 0xa8
 8005076:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005078:	2302      	movs	r3, #2
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800507c:	2304      	movs	r3, #4
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005080:	f107 0320 	add.w	r3, r7, #32
 8005084:	4618      	mov	r0, r3
 8005086:	f002 fd39 	bl	8007afc <HAL_RCC_OscConfig>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005090:	f000 f820 	bl	80050d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005094:	230f      	movs	r3, #15
 8005096:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005098:	2302      	movs	r3, #2
 800509a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80050a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80050a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80050a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80050ac:	f107 030c 	add.w	r3, r7, #12
 80050b0:	2105      	movs	r1, #5
 80050b2:	4618      	mov	r0, r3
 80050b4:	f002 ff92 	bl	8007fdc <HAL_RCC_ClockConfig>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80050be:	f000 f809 	bl	80050d4 <Error_Handler>
  }
}
 80050c2:	bf00      	nop
 80050c4:	3750      	adds	r7, #80	; 0x50
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40007000 	.word	0x40007000

080050d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80050e8:	4b17      	ldr	r3, [pc, #92]	; (8005148 <MX_SPI1_Init+0x64>)
 80050ea:	4a18      	ldr	r2, [pc, #96]	; (800514c <MX_SPI1_Init+0x68>)
 80050ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050ee:	4b16      	ldr	r3, [pc, #88]	; (8005148 <MX_SPI1_Init+0x64>)
 80050f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <MX_SPI1_Init+0x64>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80050fc:	4b12      	ldr	r3, [pc, #72]	; (8005148 <MX_SPI1_Init+0x64>)
 80050fe:	2200      	movs	r2, #0
 8005100:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005102:	4b11      	ldr	r3, [pc, #68]	; (8005148 <MX_SPI1_Init+0x64>)
 8005104:	2200      	movs	r2, #0
 8005106:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <MX_SPI1_Init+0x64>)
 800510a:	2200      	movs	r2, #0
 800510c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800510e:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <MX_SPI1_Init+0x64>)
 8005110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005114:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005116:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <MX_SPI1_Init+0x64>)
 8005118:	2238      	movs	r2, #56	; 0x38
 800511a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <MX_SPI1_Init+0x64>)
 800511e:	2200      	movs	r2, #0
 8005120:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <MX_SPI1_Init+0x64>)
 8005124:	2200      	movs	r2, #0
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <MX_SPI1_Init+0x64>)
 800512a:	2200      	movs	r2, #0
 800512c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <MX_SPI1_Init+0x64>)
 8005130:	220a      	movs	r2, #10
 8005132:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005134:	4804      	ldr	r0, [pc, #16]	; (8005148 <MX_SPI1_Init+0x64>)
 8005136:	f003 f91d 	bl	8008374 <HAL_SPI_Init>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005140:	f7ff ffc8 	bl	80050d4 <Error_Handler>
  }

}
 8005144:	bf00      	nop
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20002490 	.word	0x20002490
 800514c:	40013000 	.word	0x40013000

08005150 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8005154:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <MX_SPI2_Init+0x64>)
 8005156:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <MX_SPI2_Init+0x68>)
 8005158:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <MX_SPI2_Init+0x64>)
 800515c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005160:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005162:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <MX_SPI2_Init+0x64>)
 8005164:	2200      	movs	r2, #0
 8005166:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005168:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <MX_SPI2_Init+0x64>)
 800516a:	2200      	movs	r2, #0
 800516c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <MX_SPI2_Init+0x64>)
 8005170:	2200      	movs	r2, #0
 8005172:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <MX_SPI2_Init+0x64>)
 8005176:	2200      	movs	r2, #0
 8005178:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800517a:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <MX_SPI2_Init+0x64>)
 800517c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005180:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <MX_SPI2_Init+0x64>)
 8005184:	2208      	movs	r2, #8
 8005186:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <MX_SPI2_Init+0x64>)
 800518a:	2200      	movs	r2, #0
 800518c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <MX_SPI2_Init+0x64>)
 8005190:	2200      	movs	r2, #0
 8005192:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <MX_SPI2_Init+0x64>)
 8005196:	2200      	movs	r2, #0
 8005198:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <MX_SPI2_Init+0x64>)
 800519c:	220a      	movs	r2, #10
 800519e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80051a0:	4804      	ldr	r0, [pc, #16]	; (80051b4 <MX_SPI2_Init+0x64>)
 80051a2:	f003 f8e7 	bl	8008374 <HAL_SPI_Init>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80051ac:	f7ff ff92 	bl	80050d4 <Error_Handler>
  }

}
 80051b0:	bf00      	nop
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	200023d8 	.word	0x200023d8
 80051b8:	40003800 	.word	0x40003800

080051bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08c      	sub	sp, #48	; 0x30
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c4:	f107 031c 	add.w	r3, r7, #28
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a8e      	ldr	r2, [pc, #568]	; (8005414 <HAL_SPI_MspInit+0x258>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	f040 8089 	bne.w	80052f2 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	4b8c      	ldr	r3, [pc, #560]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	4a8b      	ldr	r2, [pc, #556]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 80051ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051ee:	6453      	str	r3, [r2, #68]	; 0x44
 80051f0:	4b89      	ldr	r3, [pc, #548]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 80051f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	4b85      	ldr	r3, [pc, #532]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	4a84      	ldr	r2, [pc, #528]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6313      	str	r3, [r2, #48]	; 0x30
 800520c:	4b82      	ldr	r3, [pc, #520]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005218:	23e0      	movs	r3, #224	; 0xe0
 800521a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521c:	2302      	movs	r3, #2
 800521e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005224:	2303      	movs	r3, #3
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005228:	2305      	movs	r3, #5
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800522c:	f107 031c 	add.w	r3, r7, #28
 8005230:	4619      	mov	r1, r3
 8005232:	487a      	ldr	r0, [pc, #488]	; (800541c <HAL_SPI_MspInit+0x260>)
 8005234:	f002 f976 	bl	8007524 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8005238:	4b79      	ldr	r3, [pc, #484]	; (8005420 <HAL_SPI_MspInit+0x264>)
 800523a:	4a7a      	ldr	r2, [pc, #488]	; (8005424 <HAL_SPI_MspInit+0x268>)
 800523c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800523e:	4b78      	ldr	r3, [pc, #480]	; (8005420 <HAL_SPI_MspInit+0x264>)
 8005240:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005244:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005246:	4b76      	ldr	r3, [pc, #472]	; (8005420 <HAL_SPI_MspInit+0x264>)
 8005248:	2200      	movs	r2, #0
 800524a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800524c:	4b74      	ldr	r3, [pc, #464]	; (8005420 <HAL_SPI_MspInit+0x264>)
 800524e:	2200      	movs	r2, #0
 8005250:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005252:	4b73      	ldr	r3, [pc, #460]	; (8005420 <HAL_SPI_MspInit+0x264>)
 8005254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005258:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800525a:	4b71      	ldr	r3, [pc, #452]	; (8005420 <HAL_SPI_MspInit+0x264>)
 800525c:	2200      	movs	r2, #0
 800525e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005260:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_SPI_MspInit+0x264>)
 8005262:	2200      	movs	r2, #0
 8005264:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8005266:	4b6e      	ldr	r3, [pc, #440]	; (8005420 <HAL_SPI_MspInit+0x264>)
 8005268:	2200      	movs	r2, #0
 800526a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800526c:	4b6c      	ldr	r3, [pc, #432]	; (8005420 <HAL_SPI_MspInit+0x264>)
 800526e:	2200      	movs	r2, #0
 8005270:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005272:	4b6b      	ldr	r3, [pc, #428]	; (8005420 <HAL_SPI_MspInit+0x264>)
 8005274:	2200      	movs	r2, #0
 8005276:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005278:	4869      	ldr	r0, [pc, #420]	; (8005420 <HAL_SPI_MspInit+0x264>)
 800527a:	f001 fdc3 	bl	8006e04 <HAL_DMA_Init>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8005284:	f7ff ff26 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a65      	ldr	r2, [pc, #404]	; (8005420 <HAL_SPI_MspInit+0x264>)
 800528c:	64da      	str	r2, [r3, #76]	; 0x4c
 800528e:	4a64      	ldr	r2, [pc, #400]	; (8005420 <HAL_SPI_MspInit+0x264>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8005294:	4b64      	ldr	r3, [pc, #400]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 8005296:	4a65      	ldr	r2, [pc, #404]	; (800542c <HAL_SPI_MspInit+0x270>)
 8005298:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800529a:	4b63      	ldr	r3, [pc, #396]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 800529c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80052a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052a2:	4b61      	ldr	r3, [pc, #388]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052a4:	2240      	movs	r2, #64	; 0x40
 80052a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052a8:	4b5f      	ldr	r3, [pc, #380]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80052ae:	4b5e      	ldr	r3, [pc, #376]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052b6:	4b5c      	ldr	r3, [pc, #368]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052bc:	4b5a      	ldr	r3, [pc, #360]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052be:	2200      	movs	r2, #0
 80052c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80052c2:	4b59      	ldr	r3, [pc, #356]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80052c8:	4b57      	ldr	r3, [pc, #348]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052ce:	4b56      	ldr	r3, [pc, #344]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80052d4:	4854      	ldr	r0, [pc, #336]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052d6:	f001 fd95 	bl	8006e04 <HAL_DMA_Init>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80052e0:	f7ff fef8 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a50      	ldr	r2, [pc, #320]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052e8:	649a      	str	r2, [r3, #72]	; 0x48
 80052ea:	4a4f      	ldr	r2, [pc, #316]	; (8005428 <HAL_SPI_MspInit+0x26c>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80052f0:	e08c      	b.n	800540c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a4e      	ldr	r2, [pc, #312]	; (8005430 <HAL_SPI_MspInit+0x274>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	f040 8087 	bne.w	800540c <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	4b45      	ldr	r3, [pc, #276]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	4a44      	ldr	r2, [pc, #272]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 8005308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800530c:	6413      	str	r3, [r2, #64]	; 0x40
 800530e:	4b42      	ldr	r3, [pc, #264]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	4b3e      	ldr	r3, [pc, #248]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	4a3d      	ldr	r2, [pc, #244]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 8005324:	f043 0302 	orr.w	r3, r3, #2
 8005328:	6313      	str	r3, [r2, #48]	; 0x30
 800532a:	4b3b      	ldr	r3, [pc, #236]	; (8005418 <HAL_SPI_MspInit+0x25c>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005336:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800533a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533c:	2302      	movs	r3, #2
 800533e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	2300      	movs	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005344:	2303      	movs	r3, #3
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005348:	2305      	movs	r3, #5
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800534c:	f107 031c 	add.w	r3, r7, #28
 8005350:	4619      	mov	r1, r3
 8005352:	4838      	ldr	r0, [pc, #224]	; (8005434 <HAL_SPI_MspInit+0x278>)
 8005354:	f002 f8e6 	bl	8007524 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005358:	4b37      	ldr	r3, [pc, #220]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 800535a:	4a38      	ldr	r2, [pc, #224]	; (800543c <HAL_SPI_MspInit+0x280>)
 800535c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800535e:	4b36      	ldr	r3, [pc, #216]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 8005360:	2200      	movs	r2, #0
 8005362:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005364:	4b34      	ldr	r3, [pc, #208]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 8005366:	2200      	movs	r2, #0
 8005368:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800536a:	4b33      	ldr	r3, [pc, #204]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 800536c:	2200      	movs	r2, #0
 800536e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005370:	4b31      	ldr	r3, [pc, #196]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 8005372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005376:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005378:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 800537a:	2200      	movs	r2, #0
 800537c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800537e:	4b2e      	ldr	r3, [pc, #184]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 8005380:	2200      	movs	r2, #0
 8005382:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005384:	4b2c      	ldr	r3, [pc, #176]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 8005386:	2200      	movs	r2, #0
 8005388:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800538a:	4b2b      	ldr	r3, [pc, #172]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 800538c:	2200      	movs	r2, #0
 800538e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005390:	4b29      	ldr	r3, [pc, #164]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 8005392:	2200      	movs	r2, #0
 8005394:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005396:	4828      	ldr	r0, [pc, #160]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 8005398:	f001 fd34 	bl	8006e04 <HAL_DMA_Init>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 80053a2:	f7ff fe97 	bl	80050d4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a23      	ldr	r2, [pc, #140]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 80053aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80053ac:	4a22      	ldr	r2, [pc, #136]	; (8005438 <HAL_SPI_MspInit+0x27c>)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80053b2:	4b23      	ldr	r3, [pc, #140]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053b4:	4a23      	ldr	r2, [pc, #140]	; (8005444 <HAL_SPI_MspInit+0x288>)
 80053b6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80053b8:	4b21      	ldr	r3, [pc, #132]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053c0:	2240      	movs	r2, #64	; 0x40
 80053c2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c4:	4b1e      	ldr	r3, [pc, #120]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053ca:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053d0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053d2:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053d8:	4b19      	ldr	r3, [pc, #100]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053da:	2200      	movs	r2, #0
 80053dc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80053de:	4b18      	ldr	r3, [pc, #96]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80053e4:	4b16      	ldr	r3, [pc, #88]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053ea:	4b15      	ldr	r3, [pc, #84]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80053f0:	4813      	ldr	r0, [pc, #76]	; (8005440 <HAL_SPI_MspInit+0x284>)
 80053f2:	f001 fd07 	bl	8006e04 <HAL_DMA_Init>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 80053fc:	f7ff fe6a 	bl	80050d4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a0f      	ldr	r2, [pc, #60]	; (8005440 <HAL_SPI_MspInit+0x284>)
 8005404:	649a      	str	r2, [r3, #72]	; 0x48
 8005406:	4a0e      	ldr	r2, [pc, #56]	; (8005440 <HAL_SPI_MspInit+0x284>)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800540c:	bf00      	nop
 800540e:	3730      	adds	r7, #48	; 0x30
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40013000 	.word	0x40013000
 8005418:	40023800 	.word	0x40023800
 800541c:	40020000 	.word	0x40020000
 8005420:	200024e8 	.word	0x200024e8
 8005424:	40026410 	.word	0x40026410
 8005428:	200025a8 	.word	0x200025a8
 800542c:	40026458 	.word	0x40026458
 8005430:	40003800 	.word	0x40003800
 8005434:	40020400 	.word	0x40020400
 8005438:	20002430 	.word	0x20002430
 800543c:	40026058 	.word	0x40026058
 8005440:	20002548 	.word	0x20002548
 8005444:	40026070 	.word	0x40026070

08005448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	607b      	str	r3, [r7, #4]
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <HAL_MspInit+0x4c>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	4a0f      	ldr	r2, [pc, #60]	; (8005494 <HAL_MspInit+0x4c>)
 8005458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800545c:	6453      	str	r3, [r2, #68]	; 0x44
 800545e:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <HAL_MspInit+0x4c>)
 8005460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <HAL_MspInit+0x4c>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	4a08      	ldr	r2, [pc, #32]	; (8005494 <HAL_MspInit+0x4c>)
 8005474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005478:	6413      	str	r3, [r2, #64]	; 0x40
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <HAL_MspInit+0x4c>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40023800 	.word	0x40023800

08005498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800549c:	bf00      	nop
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054aa:	e7fe      	b.n	80054aa <HardFault_Handler+0x4>

080054ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054b0:	e7fe      	b.n	80054b0 <MemManage_Handler+0x4>

080054b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054b2:	b480      	push	{r7}
 80054b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054b6:	e7fe      	b.n	80054b6 <BusFault_Handler+0x4>

080054b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054bc:	e7fe      	b.n	80054bc <UsageFault_Handler+0x4>

080054be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054be:	b480      	push	{r7}
 80054c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054c2:	bf00      	nop
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054da:	b480      	push	{r7}
 80054dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054de:	bf00      	nop
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054ec:	f000 ff42 	bl	8006374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054f0:	bf00      	nop
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80054f8:	4802      	ldr	r0, [pc, #8]	; (8005504 <DMA1_Stream0_IRQHandler+0x10>)
 80054fa:	f001 fdab 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80054fe:	bf00      	nop
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	2000194c 	.word	0x2000194c

08005508 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800550c:	4802      	ldr	r0, [pc, #8]	; (8005518 <DMA1_Stream1_IRQHandler+0x10>)
 800550e:	f001 fda1 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20002748 	.word	0x20002748

0800551c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005520:	4802      	ldr	r0, [pc, #8]	; (800552c <DMA1_Stream3_IRQHandler+0x10>)
 8005522:	f001 fd97 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20002430 	.word	0x20002430

08005530 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005534:	4802      	ldr	r0, [pc, #8]	; (8005540 <DMA1_Stream4_IRQHandler+0x10>)
 8005536:	f001 fd8d 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20002548 	.word	0x20002548

08005544 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005548:	4802      	ldr	r0, [pc, #8]	; (8005554 <DMA1_Stream5_IRQHandler+0x10>)
 800554a:	f001 fd83 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800554e:	bf00      	nop
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20002688 	.word	0x20002688

08005558 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800555c:	4802      	ldr	r0, [pc, #8]	; (8005568 <DMA1_Stream6_IRQHandler+0x10>)
 800555e:	f001 fd79 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005562:	bf00      	nop
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20002848 	.word	0x20002848

0800556c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005570:	4802      	ldr	r0, [pc, #8]	; (800557c <TIM2_IRQHandler+0x10>)
 8005572:	f003 fde1 	bl	8009138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20002648 	.word	0x20002648

08005580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005586:	480d      	ldr	r0, [pc, #52]	; (80055bc <USART2_IRQHandler+0x3c>)
 8005588:	f004 fef8 	bl	800a37c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)){
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <USART2_IRQHandler+0x3c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b10      	cmp	r3, #16
 8005598:	d10c      	bne.n	80055b4 <USART2_IRQHandler+0x34>
	  TELEMETRY_Idle_Line_Detection();
 800559a:	f000 fe81 	bl	80062a0 <TELEMETRY_Idle_Line_Detection>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800559e:	2300      	movs	r3, #0
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <USART2_IRQHandler+0x3c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	4b04      	ldr	r3, [pc, #16]	; (80055bc <USART2_IRQHandler+0x3c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
	}
  /* USER CODE END USART2_IRQn 1 */
}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	200028e8 	.word	0x200028e8

080055c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80055c4:	4802      	ldr	r0, [pc, #8]	; (80055d0 <USART3_IRQHandler+0x10>)
 80055c6:	f004 fed9 	bl	800a37c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	200027a8 	.word	0x200027a8

080055d4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80055d8:	4802      	ldr	r0, [pc, #8]	; (80055e4 <DMA1_Stream7_IRQHandler+0x10>)
 80055da:	f001 fd3b 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20001898 	.word	0x20001898

080055e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80055ec:	4802      	ldr	r0, [pc, #8]	; (80055f8 <DMA2_Stream0_IRQHandler+0x10>)
 80055ee:	f001 fd31 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	200024e8 	.word	0x200024e8

080055fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005600:	4802      	ldr	r0, [pc, #8]	; (800560c <DMA2_Stream1_IRQHandler+0x10>)
 8005602:	f001 fd27 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	200026e8 	.word	0x200026e8

08005610 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005614:	4802      	ldr	r0, [pc, #8]	; (8005620 <DMA2_Stream2_IRQHandler+0x10>)
 8005616:	f001 fd1d 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20001838 	.word	0x20001838

08005624 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005628:	4802      	ldr	r0, [pc, #8]	; (8005634 <DMA2_Stream3_IRQHandler+0x10>)
 800562a:	f001 fd13 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	200025a8 	.word	0x200025a8

08005638 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800563c:	4802      	ldr	r0, [pc, #8]	; (8005648 <DMA2_Stream6_IRQHandler+0x10>)
 800563e:	f001 fd09 	bl	8007054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	200027e8 	.word	0x200027e8

0800564c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	IBUS_RxCplt(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f005 fe3d 	bl	800b2d4 <IBUS_RxCplt>
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
	IBUS_RxHalfCplt(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f005 fe4c 	bl	800b308 <IBUS_RxHalfCplt>
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005680:	4a14      	ldr	r2, [pc, #80]	; (80056d4 <_sbrk+0x5c>)
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <_sbrk+0x60>)
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800568c:	4b13      	ldr	r3, [pc, #76]	; (80056dc <_sbrk+0x64>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <_sbrk+0x64>)
 8005696:	4a12      	ldr	r2, [pc, #72]	; (80056e0 <_sbrk+0x68>)
 8005698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <_sbrk+0x64>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d207      	bcs.n	80056b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056a8:	f006 f93e 	bl	800b928 <__errno>
 80056ac:	4602      	mov	r2, r0
 80056ae:	230c      	movs	r3, #12
 80056b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295
 80056b6:	e009      	b.n	80056cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056b8:	4b08      	ldr	r3, [pc, #32]	; (80056dc <_sbrk+0x64>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056be:	4b07      	ldr	r3, [pc, #28]	; (80056dc <_sbrk+0x64>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4413      	add	r3, r2
 80056c6:	4a05      	ldr	r2, [pc, #20]	; (80056dc <_sbrk+0x64>)
 80056c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20020000 	.word	0x20020000
 80056d8:	00000400 	.word	0x00000400
 80056dc:	200017d4 	.word	0x200017d4
 80056e0:	20002930 	.word	0x20002930

080056e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056e8:	4b08      	ldr	r3, [pc, #32]	; (800570c <SystemInit+0x28>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ee:	4a07      	ldr	r2, [pc, #28]	; (800570c <SystemInit+0x28>)
 80056f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <SystemInit+0x28>)
 80056fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056fe:	609a      	str	r2, [r3, #8]
#endif
}
 8005700:	bf00      	nop
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	e000ed00 	.word	0xe000ed00

08005710 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b096      	sub	sp, #88	; 0x58
 8005714:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	609a      	str	r2, [r3, #8]
 8005722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005724:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800572e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	605a      	str	r2, [r3, #4]
 8005738:	609a      	str	r2, [r3, #8]
 800573a:	60da      	str	r2, [r3, #12]
 800573c:	611a      	str	r2, [r3, #16]
 800573e:	615a      	str	r2, [r3, #20]
 8005740:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005742:	1d3b      	adds	r3, r7, #4
 8005744:	2220      	movs	r2, #32
 8005746:	2100      	movs	r1, #0
 8005748:	4618      	mov	r0, r3
 800574a:	f006 f93b 	bl	800b9c4 <memset>

  htim1.Instance = TIM1;
 800574e:	4b51      	ldr	r3, [pc, #324]	; (8005894 <MX_TIM1_Init+0x184>)
 8005750:	4a51      	ldr	r2, [pc, #324]	; (8005898 <MX_TIM1_Init+0x188>)
 8005752:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8005754:	4b4f      	ldr	r3, [pc, #316]	; (8005894 <MX_TIM1_Init+0x184>)
 8005756:	2214      	movs	r2, #20
 8005758:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800575a:	4b4e      	ldr	r3, [pc, #312]	; (8005894 <MX_TIM1_Init+0x184>)
 800575c:	2200      	movs	r2, #0
 800575e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8005760:	4b4c      	ldr	r3, [pc, #304]	; (8005894 <MX_TIM1_Init+0x184>)
 8005762:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005766:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005768:	4b4a      	ldr	r3, [pc, #296]	; (8005894 <MX_TIM1_Init+0x184>)
 800576a:	2200      	movs	r2, #0
 800576c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800576e:	4b49      	ldr	r3, [pc, #292]	; (8005894 <MX_TIM1_Init+0x184>)
 8005770:	2200      	movs	r2, #0
 8005772:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005774:	4b47      	ldr	r3, [pc, #284]	; (8005894 <MX_TIM1_Init+0x184>)
 8005776:	2280      	movs	r2, #128	; 0x80
 8005778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800577a:	4846      	ldr	r0, [pc, #280]	; (8005894 <MX_TIM1_Init+0x184>)
 800577c:	f003 fc3e 	bl	8008ffc <HAL_TIM_Base_Init>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005786:	f7ff fca5 	bl	80050d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800578a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800578e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005790:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005794:	4619      	mov	r1, r3
 8005796:	483f      	ldr	r0, [pc, #252]	; (8005894 <MX_TIM1_Init+0x184>)
 8005798:	f003 fe9c 	bl	80094d4 <HAL_TIM_ConfigClockSource>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80057a2:	f7ff fc97 	bl	80050d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80057a6:	483b      	ldr	r0, [pc, #236]	; (8005894 <MX_TIM1_Init+0x184>)
 80057a8:	f003 fc53 	bl	8009052 <HAL_TIM_PWM_Init>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80057b2:	f7ff fc8f 	bl	80050d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057b6:	2300      	movs	r3, #0
 80057b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80057be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80057c2:	4619      	mov	r1, r3
 80057c4:	4833      	ldr	r0, [pc, #204]	; (8005894 <MX_TIM1_Init+0x184>)
 80057c6:	f004 fa7f 	bl	8009cc8 <HAL_TIMEx_MasterConfigSynchronization>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80057d0:	f7ff fc80 	bl	80050d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057d4:	2360      	movs	r3, #96	; 0x60
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 80057d8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057de:	2300      	movs	r3, #0
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80057e2:	2300      	movs	r3, #0
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80057ea:	2300      	movs	r3, #0
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80057ee:	2300      	movs	r3, #0
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f6:	2200      	movs	r2, #0
 80057f8:	4619      	mov	r1, r3
 80057fa:	4826      	ldr	r0, [pc, #152]	; (8005894 <MX_TIM1_Init+0x184>)
 80057fc:	f003 fda4 	bl	8009348 <HAL_TIM_PWM_ConfigChannel>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8005806:	f7ff fc65 	bl	80050d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800580a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800580e:	2204      	movs	r2, #4
 8005810:	4619      	mov	r1, r3
 8005812:	4820      	ldr	r0, [pc, #128]	; (8005894 <MX_TIM1_Init+0x184>)
 8005814:	f003 fd98 	bl	8009348 <HAL_TIM_PWM_ConfigChannel>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800581e:	f7ff fc59 	bl	80050d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005826:	2208      	movs	r2, #8
 8005828:	4619      	mov	r1, r3
 800582a:	481a      	ldr	r0, [pc, #104]	; (8005894 <MX_TIM1_Init+0x184>)
 800582c:	f003 fd8c 	bl	8009348 <HAL_TIM_PWM_ConfigChannel>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8005836:	f7ff fc4d 	bl	80050d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800583a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800583e:	220c      	movs	r2, #12
 8005840:	4619      	mov	r1, r3
 8005842:	4814      	ldr	r0, [pc, #80]	; (8005894 <MX_TIM1_Init+0x184>)
 8005844:	f003 fd80 	bl	8009348 <HAL_TIM_PWM_ConfigChannel>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800584e:	f7ff fc41 	bl	80050d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005856:	2300      	movs	r3, #0
 8005858:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800586a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800586c:	2300      	movs	r3, #0
 800586e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005870:	1d3b      	adds	r3, r7, #4
 8005872:	4619      	mov	r1, r3
 8005874:	4807      	ldr	r0, [pc, #28]	; (8005894 <MX_TIM1_Init+0x184>)
 8005876:	f004 faa3 	bl	8009dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8005880:	f7ff fc28 	bl	80050d4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005884:	4803      	ldr	r0, [pc, #12]	; (8005894 <MX_TIM1_Init+0x184>)
 8005886:	f000 f891 	bl	80059ac <HAL_TIM_MspPostInit>

}
 800588a:	bf00      	nop
 800588c:	3758      	adds	r7, #88	; 0x58
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20002608 	.word	0x20002608
 8005898:	40010000 	.word	0x40010000

0800589c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058a2:	f107 0308 	add.w	r3, r7, #8
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058b0:	463b      	mov	r3, r7
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80058b8:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <MX_TIM2_Init+0x94>)
 80058ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80058c0:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <MX_TIM2_Init+0x94>)
 80058c2:	22a7      	movs	r2, #167	; 0xa7
 80058c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058c6:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <MX_TIM2_Init+0x94>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 80058cc:	4b18      	ldr	r3, [pc, #96]	; (8005930 <MX_TIM2_Init+0x94>)
 80058ce:	2203      	movs	r2, #3
 80058d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058d2:	4b17      	ldr	r3, [pc, #92]	; (8005930 <MX_TIM2_Init+0x94>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <MX_TIM2_Init+0x94>)
 80058da:	2200      	movs	r2, #0
 80058dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80058de:	4814      	ldr	r0, [pc, #80]	; (8005930 <MX_TIM2_Init+0x94>)
 80058e0:	f003 fb8c 	bl	8008ffc <HAL_TIM_Base_Init>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80058ea:	f7ff fbf3 	bl	80050d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80058f4:	f107 0308 	add.w	r3, r7, #8
 80058f8:	4619      	mov	r1, r3
 80058fa:	480d      	ldr	r0, [pc, #52]	; (8005930 <MX_TIM2_Init+0x94>)
 80058fc:	f003 fdea 	bl	80094d4 <HAL_TIM_ConfigClockSource>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8005906:	f7ff fbe5 	bl	80050d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800590a:	2300      	movs	r3, #0
 800590c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800590e:	2300      	movs	r3, #0
 8005910:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005912:	463b      	mov	r3, r7
 8005914:	4619      	mov	r1, r3
 8005916:	4806      	ldr	r0, [pc, #24]	; (8005930 <MX_TIM2_Init+0x94>)
 8005918:	f004 f9d6 	bl	8009cc8 <HAL_TIMEx_MasterConfigSynchronization>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8005922:	f7ff fbd7 	bl	80050d4 <Error_Handler>
  }

}
 8005926:	bf00      	nop
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20002648 	.word	0x20002648

08005934 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <HAL_TIM_Base_MspInit+0x70>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <HAL_TIM_Base_MspInit+0x74>)
 800594c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594e:	4a16      	ldr	r2, [pc, #88]	; (80059a8 <HAL_TIM_Base_MspInit+0x74>)
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	6453      	str	r3, [r2, #68]	; 0x44
 8005956:	4b14      	ldr	r3, [pc, #80]	; (80059a8 <HAL_TIM_Base_MspInit+0x74>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005962:	e01a      	b.n	800599a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596c:	d115      	bne.n	800599a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <HAL_TIM_Base_MspInit+0x74>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	4a0c      	ldr	r2, [pc, #48]	; (80059a8 <HAL_TIM_Base_MspInit+0x74>)
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	6413      	str	r3, [r2, #64]	; 0x40
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <HAL_TIM_Base_MspInit+0x74>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	60bb      	str	r3, [r7, #8]
 8005988:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800598a:	2200      	movs	r2, #0
 800598c:	2100      	movs	r1, #0
 800598e:	201c      	movs	r0, #28
 8005990:	f001 fa01 	bl	8006d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005994:	201c      	movs	r0, #28
 8005996:	f001 fa1a 	bl	8006dce <HAL_NVIC_EnableIRQ>
}
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40023800 	.word	0x40023800

080059ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059b4:	f107 030c 	add.w	r3, r7, #12
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	60da      	str	r2, [r3, #12]
 80059c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a12      	ldr	r2, [pc, #72]	; (8005a14 <HAL_TIM_MspPostInit+0x68>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d11e      	bne.n	8005a0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <HAL_TIM_MspPostInit+0x6c>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	4a10      	ldr	r2, [pc, #64]	; (8005a18 <HAL_TIM_MspPostInit+0x6c>)
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	6313      	str	r3, [r2, #48]	; 0x30
 80059de:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <HAL_TIM_MspPostInit+0x6c>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	60bb      	str	r3, [r7, #8]
 80059e8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80059ea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80059ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f0:	2302      	movs	r3, #2
 80059f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80059fc:	2301      	movs	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a00:	f107 030c 	add.w	r3, r7, #12
 8005a04:	4619      	mov	r1, r3
 8005a06:	4805      	ldr	r0, [pc, #20]	; (8005a1c <HAL_TIM_MspPostInit+0x70>)
 8005a08:	f001 fd8c 	bl	8007524 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005a0c:	bf00      	nop
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	40020000 	.word	0x40020000

08005a20 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005a24:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <MX_USART2_UART_Init+0x4c>)
 8005a26:	4a12      	ldr	r2, [pc, #72]	; (8005a70 <MX_USART2_UART_Init+0x50>)
 8005a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8005a2a:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <MX_USART2_UART_Init+0x4c>)
 8005a2c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a32:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <MX_USART2_UART_Init+0x4c>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <MX_USART2_UART_Init+0x4c>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <MX_USART2_UART_Init+0x4c>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <MX_USART2_UART_Init+0x4c>)
 8005a46:	220c      	movs	r2, #12
 8005a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a4a:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <MX_USART2_UART_Init+0x4c>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a50:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <MX_USART2_UART_Init+0x4c>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a56:	4805      	ldr	r0, [pc, #20]	; (8005a6c <MX_USART2_UART_Init+0x4c>)
 8005a58:	f004 fa18 	bl	8009e8c <HAL_UART_Init>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005a62:	f7ff fb37 	bl	80050d4 <Error_Handler>
  }

}
 8005a66:	bf00      	nop
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	200028e8 	.word	0x200028e8
 8005a70:	40004400 	.word	0x40004400

08005a74 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <MX_USART3_UART_Init+0x4c>)
 8005a7a:	4a12      	ldr	r2, [pc, #72]	; (8005ac4 <MX_USART3_UART_Init+0x50>)
 8005a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005a7e:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <MX_USART3_UART_Init+0x4c>)
 8005a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a86:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <MX_USART3_UART_Init+0x4c>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <MX_USART3_UART_Init+0x4c>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a92:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <MX_USART3_UART_Init+0x4c>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a98:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <MX_USART3_UART_Init+0x4c>)
 8005a9a:	220c      	movs	r2, #12
 8005a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a9e:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <MX_USART3_UART_Init+0x4c>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <MX_USART3_UART_Init+0x4c>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005aaa:	4805      	ldr	r0, [pc, #20]	; (8005ac0 <MX_USART3_UART_Init+0x4c>)
 8005aac:	f004 f9ee 	bl	8009e8c <HAL_UART_Init>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005ab6:	f7ff fb0d 	bl	80050d4 <Error_Handler>
  }

}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	200027a8 	.word	0x200027a8
 8005ac4:	40004800 	.word	0x40004800

08005ac8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8005acc:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <MX_USART6_UART_Init+0x4c>)
 8005ace:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <MX_USART6_UART_Init+0x50>)
 8005ad0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8005ad2:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <MX_USART6_UART_Init+0x4c>)
 8005ad4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8005ad8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005ada:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <MX_USART6_UART_Init+0x4c>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <MX_USART6_UART_Init+0x4c>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <MX_USART6_UART_Init+0x4c>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005aec:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <MX_USART6_UART_Init+0x4c>)
 8005aee:	220c      	movs	r2, #12
 8005af0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005af2:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <MX_USART6_UART_Init+0x4c>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <MX_USART6_UART_Init+0x4c>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005afe:	4805      	ldr	r0, [pc, #20]	; (8005b14 <MX_USART6_UART_Init+0x4c>)
 8005b00:	f004 f9c4 	bl	8009e8c <HAL_UART_Init>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005b0a:	f7ff fae3 	bl	80050d4 <Error_Handler>
  }

}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	200028a8 	.word	0x200028a8
 8005b18:	40011400 	.word	0x40011400

08005b1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08e      	sub	sp, #56	; 0x38
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	609a      	str	r2, [r3, #8]
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a7f      	ldr	r2, [pc, #508]	; (8005d38 <HAL_UART_MspInit+0x21c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	f040 8091 	bne.w	8005c62 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b40:	2300      	movs	r3, #0
 8005b42:	623b      	str	r3, [r7, #32]
 8005b44:	4b7d      	ldr	r3, [pc, #500]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	4a7c      	ldr	r2, [pc, #496]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8005b50:	4b7a      	ldr	r3, [pc, #488]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b58:	623b      	str	r3, [r7, #32]
 8005b5a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	4b76      	ldr	r3, [pc, #472]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	4a75      	ldr	r2, [pc, #468]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005b66:	f043 0301 	orr.w	r3, r3, #1
 8005b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b6c:	4b73      	ldr	r3, [pc, #460]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	61fb      	str	r3, [r7, #28]
 8005b76:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b78:	230c      	movs	r3, #12
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b84:	2303      	movs	r3, #3
 8005b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b88:	2307      	movs	r3, #7
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b90:	4619      	mov	r1, r3
 8005b92:	486b      	ldr	r0, [pc, #428]	; (8005d40 <HAL_UART_MspInit+0x224>)
 8005b94:	f001 fcc6 	bl	8007524 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005b98:	4b6a      	ldr	r3, [pc, #424]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005b9a:	4a6b      	ldr	r2, [pc, #428]	; (8005d48 <HAL_UART_MspInit+0x22c>)
 8005b9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005b9e:	4b69      	ldr	r3, [pc, #420]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005ba0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ba4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ba6:	4b67      	ldr	r3, [pc, #412]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bac:	4b65      	ldr	r3, [pc, #404]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005bb2:	4b64      	ldr	r3, [pc, #400]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bba:	4b62      	ldr	r3, [pc, #392]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bc0:	4b60      	ldr	r3, [pc, #384]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005bc6:	4b5f      	ldr	r3, [pc, #380]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005bcc:	4b5d      	ldr	r3, [pc, #372]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005bd2:	4b5c      	ldr	r3, [pc, #368]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005bd8:	485a      	ldr	r0, [pc, #360]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005bda:	f001 f913 	bl	8006e04 <HAL_DMA_Init>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005be4:	f7ff fa76 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a56      	ldr	r2, [pc, #344]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005bec:	635a      	str	r2, [r3, #52]	; 0x34
 8005bee:	4a55      	ldr	r2, [pc, #340]	; (8005d44 <HAL_UART_MspInit+0x228>)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005bf4:	4b55      	ldr	r3, [pc, #340]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005bf6:	4a56      	ldr	r2, [pc, #344]	; (8005d50 <HAL_UART_MspInit+0x234>)
 8005bf8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005bfa:	4b54      	ldr	r3, [pc, #336]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005bfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c00:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c02:	4b52      	ldr	r3, [pc, #328]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c04:	2240      	movs	r2, #64	; 0x40
 8005c06:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c08:	4b50      	ldr	r3, [pc, #320]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c0e:	4b4f      	ldr	r3, [pc, #316]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c14:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c16:	4b4d      	ldr	r3, [pc, #308]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c1c:	4b4b      	ldr	r3, [pc, #300]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005c22:	4b4a      	ldr	r3, [pc, #296]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c28:	4b48      	ldr	r3, [pc, #288]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c2e:	4b47      	ldr	r3, [pc, #284]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005c34:	4845      	ldr	r0, [pc, #276]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c36:	f001 f8e5 	bl	8006e04 <HAL_DMA_Init>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005c40:	f7ff fa48 	bl	80050d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a41      	ldr	r2, [pc, #260]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
 8005c4a:	4a40      	ldr	r2, [pc, #256]	; (8005d4c <HAL_UART_MspInit+0x230>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005c50:	2200      	movs	r2, #0
 8005c52:	2100      	movs	r1, #0
 8005c54:	2026      	movs	r0, #38	; 0x26
 8005c56:	f001 f89e 	bl	8006d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c5a:	2026      	movs	r0, #38	; 0x26
 8005c5c:	f001 f8b7 	bl	8006dce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005c60:	e10e      	b.n	8005e80 <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART3)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a3b      	ldr	r2, [pc, #236]	; (8005d54 <HAL_UART_MspInit+0x238>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d17b      	bne.n	8005d64 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	4b32      	ldr	r3, [pc, #200]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	4a31      	ldr	r2, [pc, #196]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c7c:	4b2f      	ldr	r3, [pc, #188]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c84:	61bb      	str	r3, [r7, #24]
 8005c86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	4b2b      	ldr	r3, [pc, #172]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005c92:	f043 0302 	orr.w	r3, r3, #2
 8005c96:	6313      	str	r3, [r2, #48]	; 0x30
 8005c98:	4b28      	ldr	r3, [pc, #160]	; (8005d3c <HAL_UART_MspInit+0x220>)
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005ca4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005caa:	2302      	movs	r3, #2
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005cb6:	2307      	movs	r3, #7
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4825      	ldr	r0, [pc, #148]	; (8005d58 <HAL_UART_MspInit+0x23c>)
 8005cc2:	f001 fc2f 	bl	8007524 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005cc6:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005cc8:	4a25      	ldr	r2, [pc, #148]	; (8005d60 <HAL_UART_MspInit+0x244>)
 8005cca:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005ccc:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cd2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005cd4:	4b21      	ldr	r3, [pc, #132]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cda:	4b20      	ldr	r3, [pc, #128]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ce0:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ce6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ce8:	4b1c      	ldr	r3, [pc, #112]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cee:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005cf4:	4b19      	ldr	r3, [pc, #100]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cfa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005cfc:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d02:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005d08:	4814      	ldr	r0, [pc, #80]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005d0a:	f001 f87b 	bl	8006e04 <HAL_DMA_Init>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8005d14:	f7ff f9de 	bl	80050d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005d1c:	635a      	str	r2, [r3, #52]	; 0x34
 8005d1e:	4a0f      	ldr	r2, [pc, #60]	; (8005d5c <HAL_UART_MspInit+0x240>)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005d24:	2200      	movs	r2, #0
 8005d26:	2100      	movs	r1, #0
 8005d28:	2027      	movs	r0, #39	; 0x27
 8005d2a:	f001 f834 	bl	8006d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005d2e:	2027      	movs	r0, #39	; 0x27
 8005d30:	f001 f84d 	bl	8006dce <HAL_NVIC_EnableIRQ>
}
 8005d34:	e0a4      	b.n	8005e80 <HAL_UART_MspInit+0x364>
 8005d36:	bf00      	nop
 8005d38:	40004400 	.word	0x40004400
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	40020000 	.word	0x40020000
 8005d44:	20002688 	.word	0x20002688
 8005d48:	40026088 	.word	0x40026088
 8005d4c:	20002848 	.word	0x20002848
 8005d50:	400260a0 	.word	0x400260a0
 8005d54:	40004800 	.word	0x40004800
 8005d58:	40020400 	.word	0x40020400
 8005d5c:	20002748 	.word	0x20002748
 8005d60:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a47      	ldr	r2, [pc, #284]	; (8005e88 <HAL_UART_MspInit+0x36c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	f040 8088 	bne.w	8005e80 <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005d70:	2300      	movs	r3, #0
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	4b45      	ldr	r3, [pc, #276]	; (8005e8c <HAL_UART_MspInit+0x370>)
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	4a44      	ldr	r2, [pc, #272]	; (8005e8c <HAL_UART_MspInit+0x370>)
 8005d7a:	f043 0320 	orr.w	r3, r3, #32
 8005d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8005d80:	4b42      	ldr	r3, [pc, #264]	; (8005e8c <HAL_UART_MspInit+0x370>)
 8005d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	4b3e      	ldr	r3, [pc, #248]	; (8005e8c <HAL_UART_MspInit+0x370>)
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	4a3d      	ldr	r2, [pc, #244]	; (8005e8c <HAL_UART_MspInit+0x370>)
 8005d96:	f043 0304 	orr.w	r3, r3, #4
 8005d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <HAL_UART_MspInit+0x370>)
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005da8:	23c0      	movs	r3, #192	; 0xc0
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dac:	2302      	movs	r3, #2
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db4:	2303      	movs	r3, #3
 8005db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005db8:	2308      	movs	r3, #8
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4833      	ldr	r0, [pc, #204]	; (8005e90 <HAL_UART_MspInit+0x374>)
 8005dc4:	f001 fbae 	bl	8007524 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005dc8:	4b32      	ldr	r3, [pc, #200]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005dca:	4a33      	ldr	r2, [pc, #204]	; (8005e98 <HAL_UART_MspInit+0x37c>)
 8005dcc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8005dce:	4b31      	ldr	r3, [pc, #196]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005dd0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005dd4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005dd8:	2240      	movs	r2, #64	; 0x40
 8005dda:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ddc:	4b2d      	ldr	r3, [pc, #180]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005de2:	4b2c      	ldr	r3, [pc, #176]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005de8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dea:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005df0:	4b28      	ldr	r3, [pc, #160]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8005df6:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e02:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8005e08:	4822      	ldr	r0, [pc, #136]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005e0a:	f000 fffb 	bl	8006e04 <HAL_DMA_Init>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8005e14:	f7ff f95e 	bl	80050d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a1e      	ldr	r2, [pc, #120]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e1e:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <HAL_UART_MspInit+0x378>)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005e24:	4b1d      	ldr	r3, [pc, #116]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e26:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <HAL_UART_MspInit+0x384>)
 8005e28:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005e2a:	4b1c      	ldr	r3, [pc, #112]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e2c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005e30:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e32:	4b1a      	ldr	r3, [pc, #104]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e38:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e3e:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e44:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e46:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e4c:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8005e52:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e58:	4b10      	ldr	r3, [pc, #64]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005e64:	480d      	ldr	r0, [pc, #52]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e66:	f000 ffcd 	bl	8006e04 <HAL_DMA_Init>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_UART_MspInit+0x358>
      Error_Handler();
 8005e70:	f7ff f930 	bl	80050d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a09      	ldr	r2, [pc, #36]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e78:	635a      	str	r2, [r3, #52]	; 0x34
 8005e7a:	4a08      	ldr	r2, [pc, #32]	; (8005e9c <HAL_UART_MspInit+0x380>)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005e80:	bf00      	nop
 8005e82:	3738      	adds	r7, #56	; 0x38
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40011400 	.word	0x40011400
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40020800 	.word	0x40020800
 8005e94:	200027e8 	.word	0x200027e8
 8005e98:	400264a0 	.word	0x400264a0
 8005e9c:	200026e8 	.word	0x200026e8
 8005ea0:	40026428 	.word	0x40026428

08005ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005edc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ea8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005eaa:	e003      	b.n	8005eb4 <LoopCopyDataInit>

08005eac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005eac:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005eae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005eb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005eb2:	3104      	adds	r1, #4

08005eb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005eb4:	480b      	ldr	r0, [pc, #44]	; (8005ee4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005eb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005eba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ebc:	d3f6      	bcc.n	8005eac <CopyDataInit>
  ldr  r2, =_sbss
 8005ebe:	4a0b      	ldr	r2, [pc, #44]	; (8005eec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ec0:	e002      	b.n	8005ec8 <LoopFillZerobss>

08005ec2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005ec2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005ec4:	f842 3b04 	str.w	r3, [r2], #4

08005ec8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ec8:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005eca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ecc:	d3f9      	bcc.n	8005ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005ece:	f7ff fc09 	bl	80056e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ed2:	f005 fd2f 	bl	800b934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ed6:	f7fe ffe5 	bl	8004ea4 <main>
  bx  lr    
 8005eda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005edc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005ee0:	0800e8ac 	.word	0x0800e8ac
  ldr  r0, =_sdata
 8005ee4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005ee8:	20001598 	.word	0x20001598
  ldr  r2, =_sbss
 8005eec:	20001598 	.word	0x20001598
  ldr  r3, = _ebss
 8005ef0:	20002930 	.word	0x20002930

08005ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ef4:	e7fe      	b.n	8005ef4 <ADC_IRQHandler>

08005ef6 <get_nb_bytes_available>:

static telemetry_t * telem ;	//We dont use multiples telemetry anyways

//Private function to know the number of bytes available
uint16_t get_nb_bytes_available(telemetry_t * telem);
uint16_t get_nb_bytes_available(telemetry_t * telem){
 8005ef6:	b480      	push	{r7}
 8005ef8:	b085      	sub	sp, #20
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
	uint16_t nb = 0 ;
 8005efe:	2300      	movs	r3, #0
 8005f00:	81fb      	strh	r3, [r7, #14]
	if(telem->index_write_rx > telem->index_read_rx){
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d907      	bls.n	8005f22 <get_nb_bytes_available+0x2c>
		nb = telem->index_write_rx - telem->index_read_rx ;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 8005f22:	89fb      	ldrh	r3, [r7, #14]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <TELEMETRY_Init>:

void TELEMETRY_Init(telemetry_t * telem_, UART_HandleTypeDef * huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	telem = telem_ ;
 8005f3a:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <TELEMETRY_Init+0x60>)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6013      	str	r3, [r2, #0]
	telem->huart = huart ;
 8005f40:	4b13      	ldr	r3, [pc, #76]	; (8005f90 <TELEMETRY_Init+0x60>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	601a      	str	r2, [r3, #0]

	//On envoit un premier message qui sert sutout à éviter que les premiers octet utiles soient perdu
	static uint8_t hey_msg[] = "Hey it s me Theo...\n";
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 8005f48:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <TELEMETRY_Init+0x60>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2214      	movs	r2, #20
 8005f50:	4910      	ldr	r1, [pc, #64]	; (8005f94 <TELEMETRY_Init+0x64>)
 8005f52:	4618      	mov	r0, r3
 8005f54:	f004 f926 	bl	800a1a4 <HAL_UART_Transmit_DMA>

	//Activation de l'it "idle" qui préviendra de la fin de la récéption d'un message
	__HAL_UART_ENABLE_IT(telem->huart, UART_IT_IDLE);
 8005f58:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <TELEMETRY_Init+0x60>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <TELEMETRY_Init+0x60>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0210 	orr.w	r2, r2, #16
 8005f6e:	60da      	str	r2, [r3, #12]
	//On lance la récéption en DMA
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <TELEMETRY_Init+0x60>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <TELEMETRY_Init+0x60>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8005f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f82:	4619      	mov	r1, r3
 8005f84:	f004 f97a 	bl	800a27c <HAL_UART_Receive_DMA>
}
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	200017d8 	.word	0x200017d8
 8005f94:	200013a4 	.word	0x200013a4

08005f98 <TELEMETRY_Process>:


void TELEMETRY_Process(uint32_t time_us){
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]

	//	--------------------	Transmission	------------------------
	//Ce qui suit vide le buffer en transmettant on contenu en respectant la limite
	//de vitesse maximum
	if(telem->index_write_tx != telem->index_read_tx && time_us > telem->next_send)
 8005fa0:	4b6f      	ldr	r3, [pc, #444]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 8005fa8:	4b6d      	ldr	r3, [pc, #436]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d051      	beq.n	8006058 <TELEMETRY_Process+0xc0>
 8005fb4:	4b6a      	ldr	r3, [pc, #424]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d94a      	bls.n	8006058 <TELEMETRY_Process+0xc0>
	{
		telem->next_send = time_us + telem->len_portion_tx[telem->index_read_tx] * PERIODE_1_OCTET ;
 8005fc2:	4b67      	ldr	r3, [pc, #412]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a66      	ldr	r2, [pc, #408]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 8005fce:	4413      	add	r3, r2
 8005fd0:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f240 134d 	movw	r3, #333	; 0x14d
 8005fda:	fb03 f302 	mul.w	r3, r3, r2
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4b5f      	ldr	r3, [pc, #380]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

		//On transmet les données
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 8005fec:	4b5c      	ldr	r3, [pc, #368]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6818      	ldr	r0, [r3, #0]
 8005ff2:	4b5b      	ldr	r3, [pc, #364]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4b5a      	ldr	r3, [pc, #360]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8005ffe:	4619      	mov	r1, r3
 8006000:	460b      	mov	r3, r1
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	1d59      	adds	r1, r3, #5
 800600c:	4b54      	ldr	r3, [pc, #336]	; (8006160 <TELEMETRY_Process+0x1c8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a53      	ldr	r2, [pc, #332]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 8006018:	4413      	add	r3, r2
 800601a:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 800601e:	b29b      	uxth	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	f004 f8bf 	bl	800a1a4 <HAL_UART_Transmit_DMA>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
 8006026:	4b4e      	ldr	r3, [pc, #312]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8b3 2426 	ldrh.w	r2, [r3, #1062]	; 0x426
 800602e:	3201      	adds	r2, #1
 8006030:	b292      	uxth	r2, r2
 8006032:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 8006036:	4b4a      	ldr	r3, [pc, #296]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 800603e:	4a48      	ldr	r2, [pc, #288]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	4948      	ldr	r1, [pc, #288]	; (8006164 <TELEMETRY_Process+0x1cc>)
 8006044:	fba1 0103 	umull	r0, r1, r1, r3
 8006048:	0909      	lsrs	r1, r1, #4
 800604a:	2032      	movs	r0, #50	; 0x32
 800604c:	fb00 f101 	mul.w	r1, r0, r1
 8006050:	1a5b      	subs	r3, r3, r1
 8006052:	b29b      	uxth	r3, r3
 8006054:	f8a2 3426 	strh.w	r3, [r2, #1062]	; 0x426
	}

	//	---------------------	Reception	-------------------------------

	uint16_t bytes_avaibles = get_nb_bytes_available(telem);
 8006058:	4b41      	ldr	r3, [pc, #260]	; (8006160 <TELEMETRY_Process+0x1c8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ff4a 	bl	8005ef6 <get_nb_bytes_available>
 8006062:	4603      	mov	r3, r0
 8006064:	823b      	strh	r3, [r7, #16]
	if(bytes_avaibles > 2)	//Minimum trois octets pour faire quoi que ce soit
 8006066:	8a3b      	ldrh	r3, [r7, #16]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d976      	bls.n	800615a <TELEMETRY_Process+0x1c2>
	{
		uint16_t bytes_used = 1 ;
 800606c:	2301      	movs	r3, #1
 800606e:	82fb      	strh	r3, [r7, #22]
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 8006070:	4b3b      	ldr	r3, [pc, #236]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a3a      	ldr	r2, [pc, #232]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	f8b2 262a 	ldrh.w	r2, [r2, #1578]	; 0x62a
 800607c:	4413      	add	r3, r2
 800607e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8006082:	2b24      	cmp	r3, #36	; 0x24
 8006084:	d15c      	bne.n	8006140 <TELEMETRY_Process+0x1a8>
		{
			//Number of byte recquiered including the '$' and the checksum to use the current frame we are on
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[telem->index_read_rx+1]);
 8006086:	4b36      	ldr	r3, [pc, #216]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b35      	ldr	r3, [pc, #212]	; (8006160 <TELEMETRY_Process+0x1c8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8006092:	3301      	adds	r3, #1
 8006094:	4413      	add	r3, r2
 8006096:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800609a:	4618      	mov	r0, r3
 800609c:	f7fb faae 	bl	80015fc <DATA_LOGGER_Get_Data>
 80060a0:	60f8      	str	r0, [r7, #12]
			uint16_t bytes_recquired = (current_data->format / 20) + 3 ;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	7a5b      	ldrb	r3, [r3, #9]
 80060a6:	4a30      	ldr	r2, [pc, #192]	; (8006168 <TELEMETRY_Process+0x1d0>)
 80060a8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3303      	adds	r3, #3
 80060b4:	817b      	strh	r3, [r7, #10]

			if(bytes_recquired > bytes_avaibles)
 80060b6:	897a      	ldrh	r2, [r7, #10]
 80060b8:	8a3b      	ldrh	r3, [r7, #16]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d84c      	bhi.n	8006158 <TELEMETRY_Process+0x1c0>
				return ;	//We just wait for then next call with hopefully more data available
			bytes_used = bytes_recquired;
 80060be:	897b      	ldrh	r3, [r7, #10]
 80060c0:	82fb      	strh	r3, [r7, #22]

			//Len is id(1 byte) + data(x bytes)
			uint16_t len_frame = bytes_recquired - 2 ;
 80060c2:	897b      	ldrh	r3, [r7, #10]
 80060c4:	3b02      	subs	r3, #2
 80060c6:	813b      	strh	r3, [r7, #8]

			//Checksum
			uint16_t checksum = 0 ;
 80060c8:	2300      	movs	r3, #0
 80060ca:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 80060cc:	2300      	movs	r3, #0
 80060ce:	827b      	strh	r3, [r7, #18]
 80060d0:	e012      	b.n	80060f8 <TELEMETRY_Process+0x160>
			{
				checksum += telem->buffer_rx[telem->index_read_rx+1+b];
 80060d2:	4b23      	ldr	r3, [pc, #140]	; (8006160 <TELEMETRY_Process+0x1c8>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b22      	ldr	r3, [pc, #136]	; (8006160 <TELEMETRY_Process+0x1c8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	8a7b      	ldrh	r3, [r7, #18]
 80060e2:	440b      	add	r3, r1
 80060e4:	4413      	add	r3, r2
 80060e6:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	8abb      	ldrh	r3, [r7, #20]
 80060ee:	4413      	add	r3, r2
 80060f0:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 80060f2:	8a7b      	ldrh	r3, [r7, #18]
 80060f4:	3301      	adds	r3, #1
 80060f6:	827b      	strh	r3, [r7, #18]
 80060f8:	8a7a      	ldrh	r2, [r7, #18]
 80060fa:	893b      	ldrh	r3, [r7, #8]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d3e8      	bcc.n	80060d2 <TELEMETRY_Process+0x13a>
			}
			if(checksum % 256 == telem->buffer_rx[telem->index_read_rx + bytes_recquired-1])
 8006100:	8abb      	ldrh	r3, [r7, #20]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	b29a      	uxth	r2, r3
 8006106:	4b16      	ldr	r3, [pc, #88]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	4b15      	ldr	r3, [pc, #84]	; (8006160 <TELEMETRY_Process+0x1c8>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8006112:	4618      	mov	r0, r3
 8006114:	897b      	ldrh	r3, [r7, #10]
 8006116:	4403      	add	r3, r0
 8006118:	3b01      	subs	r3, #1
 800611a:	440b      	add	r3, r1
 800611c:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8006120:	b29b      	uxth	r3, r3
 8006122:	429a      	cmp	r2, r3
 8006124:	d10c      	bne.n	8006140 <TELEMETRY_Process+0x1a8>
			{
				DATA_LOGGER_Reception(&telem->buffer_rx[telem->index_read_rx+1]);
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <TELEMETRY_Process+0x1c8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8006132:	3301      	adds	r3, #1
 8006134:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8006138:	4413      	add	r3, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f7fb f8e2 	bl	8001304 <DATA_LOGGER_Reception>
			}
		}
		telem->index_read_rx += bytes_used ;
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <TELEMETRY_Process+0x1c8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 162a 	ldrh.w	r1, [r3, #1578]	; 0x62a
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <TELEMETRY_Process+0x1c8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	8afa      	ldrh	r2, [r7, #22]
 800614e:	440a      	add	r2, r1
 8006150:	b292      	uxth	r2, r2
 8006152:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
 8006156:	e000      	b.n	800615a <TELEMETRY_Process+0x1c2>
				return ;	//We just wait for then next call with hopefully more data available
 8006158:	bf00      	nop
	}

}
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	200017d8 	.word	0x200017d8
 8006164:	51eb851f 	.word	0x51eb851f
 8006168:	cccccccd 	.word	0xcccccccd

0800616c <TELEMETRY_Send_Data>:


void TELEMETRY_Send_Data(uint8_t * data, uint8_t len){
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
	uint8_t to_send[SIZE_PORTION_BUFFER];
	uint32_t checksum = 0 ;
 8006178:	2300      	movs	r3, #0
 800617a:	627b      	str	r3, [r7, #36]	; 0x24


	to_send[0] = '$';
 800617c:	2324      	movs	r3, #36	; 0x24
 800617e:	733b      	strb	r3, [r7, #12]

	for(uint8_t b = 0; b < len; b++){
 8006180:	2300      	movs	r3, #0
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006186:	e01d      	b.n	80061c4 <TELEMETRY_Send_Data+0x58>
		to_send[1 + b] = data[b];
 8006188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	441a      	add	r2, r3
 8006190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006194:	3301      	adds	r3, #1
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800619c:	440b      	add	r3, r1
 800619e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		checksum += (uint32_t)to_send[1 + b];
 80061a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061a6:	3301      	adds	r3, #1
 80061a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061ac:	4413      	add	r3, r2
 80061ae:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	4413      	add	r3, r2
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint8_t b = 0; b < len; b++){
 80061ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061be:	3301      	adds	r3, #1
 80061c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d3dc      	bcc.n	8006188 <TELEMETRY_Send_Data+0x1c>
	}

	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	3301      	adds	r3, #1
 80061d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80061da:	440b      	add	r3, r1
 80061dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
	TELEMETRY_Send_Data_Raw(to_send, len+2);
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	3302      	adds	r3, #2
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	f107 030c 	add.w	r3, r7, #12
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 f805 	bl	80061fc <TELEMETRY_Send_Data_Raw>
}
 80061f2:	bf00      	nop
 80061f4:	3728      	adds	r7, #40	; 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <TELEMETRY_Send_Data_Raw>:

void TELEMETRY_Send_Data_Raw(uint8_t * data, uint8_t len){
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]

	//Copie du tableau dans le buffer
	for(uint8_t c = 0; c < len; c++)
 8006208:	2300      	movs	r3, #0
 800620a:	73fb      	strb	r3, [r7, #15]
 800620c:	e017      	b.n	800623e <TELEMETRY_Send_Data_Raw+0x42>
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	18d1      	adds	r1, r2, r3
 8006214:	4b20      	ldr	r3, [pc, #128]	; (8006298 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	4b1f      	ldr	r3, [pc, #124]	; (8006298 <TELEMETRY_Send_Data_Raw+0x9c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8006220:	4618      	mov	r0, r3
 8006222:	4603      	mov	r3, r0
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4403      	add	r3, r0
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4618      	mov	r0, r3
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	4403      	add	r3, r0
 8006230:	7809      	ldrb	r1, [r1, #0]
 8006232:	4413      	add	r3, r2
 8006234:	460a      	mov	r2, r1
 8006236:	715a      	strb	r2, [r3, #5]
	for(uint8_t c = 0; c < len; c++)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	3301      	adds	r3, #1
 800623c:	73fb      	strb	r3, [r7, #15]
 800623e:	7bfa      	ldrb	r2, [r7, #15]
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	429a      	cmp	r2, r3
 8006244:	d3e3      	bcc.n	800620e <TELEMETRY_Send_Data_Raw+0x12>
	//On enregistre la taille de la donnée
	telem->len_portion_tx[telem->index_write_tx] = len ;
 8006246:	4b14      	ldr	r3, [pc, #80]	; (8006298 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a13      	ldr	r2, [pc, #76]	; (8006298 <TELEMETRY_Send_Data_Raw+0x9c>)
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	f8b2 2424 	ldrh.w	r2, [r2, #1060]	; 0x424
 8006252:	4413      	add	r3, r2
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed

	//Incrémentation de l'index
	telem->index_write_tx ++ ;
 800625a:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <TELEMETRY_Send_Data_Raw+0x9c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 8006262:	3201      	adds	r2, #1
 8006264:	b292      	uxth	r2, r2
 8006266:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 800626a:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <TELEMETRY_Send_Data_Raw+0x9c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8006272:	4a09      	ldr	r2, [pc, #36]	; (8006298 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006274:	6812      	ldr	r2, [r2, #0]
 8006276:	4909      	ldr	r1, [pc, #36]	; (800629c <TELEMETRY_Send_Data_Raw+0xa0>)
 8006278:	fba1 0103 	umull	r0, r1, r1, r3
 800627c:	0909      	lsrs	r1, r1, #4
 800627e:	2032      	movs	r0, #50	; 0x32
 8006280:	fb00 f101 	mul.w	r1, r0, r1
 8006284:	1a5b      	subs	r3, r3, r1
 8006286:	b29b      	uxth	r3, r3
 8006288:	f8a2 3424 	strh.w	r3, [r2, #1060]	; 0x424
}
 800628c:	bf00      	nop
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	200017d8 	.word	0x200017d8
 800629c:	51eb851f 	.word	0x51eb851f

080062a0 <TELEMETRY_Idle_Line_Detection>:

void TELEMETRY_Idle_Line_Detection(void){
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
	//On met à jour l'index d'écriture du buffer rx
	telem->index_write_rx = LEN_RX_BUFFER - telem->huart->hdmarx->Instance->NDTR ;
 80062a4:	4b09      	ldr	r3, [pc, #36]	; (80062cc <TELEMETRY_Idle_Line_Detection+0x2c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <TELEMETRY_Idle_Line_Detection+0x2c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80062ba:	b292      	uxth	r2, r2
 80062bc:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
}
 80062c0:	bf00      	nop
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	200017d8 	.word	0x200017d8

080062d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80062d4:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <HAL_Init+0x40>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a0d      	ldr	r2, [pc, #52]	; (8006310 <HAL_Init+0x40>)
 80062da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <HAL_Init+0x40>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <HAL_Init+0x40>)
 80062e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062ec:	4b08      	ldr	r3, [pc, #32]	; (8006310 <HAL_Init+0x40>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a07      	ldr	r2, [pc, #28]	; (8006310 <HAL_Init+0x40>)
 80062f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062f8:	2003      	movs	r0, #3
 80062fa:	f000 fd41 	bl	8006d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062fe:	2000      	movs	r0, #0
 8006300:	f000 f808 	bl	8006314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006304:	f7ff f8a0 	bl	8005448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40023c00 	.word	0x40023c00

08006314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800631c:	4b12      	ldr	r3, [pc, #72]	; (8006368 <HAL_InitTick+0x54>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b12      	ldr	r3, [pc, #72]	; (800636c <HAL_InitTick+0x58>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	4619      	mov	r1, r3
 8006326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800632a:	fbb3 f3f1 	udiv	r3, r3, r1
 800632e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fd59 	bl	8006dea <HAL_SYSTICK_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e00e      	b.n	8006360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b0f      	cmp	r3, #15
 8006346:	d80a      	bhi.n	800635e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006348:	2200      	movs	r2, #0
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	f000 fd21 	bl	8006d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006354:	4a06      	ldr	r2, [pc, #24]	; (8006370 <HAL_InitTick+0x5c>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	e000      	b.n	8006360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	200013a0 	.word	0x200013a0
 800636c:	200013c0 	.word	0x200013c0
 8006370:	200013bc 	.word	0x200013bc

08006374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <HAL_IncTick+0x20>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	4b06      	ldr	r3, [pc, #24]	; (8006398 <HAL_IncTick+0x24>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4413      	add	r3, r2
 8006384:	4a04      	ldr	r2, [pc, #16]	; (8006398 <HAL_IncTick+0x24>)
 8006386:	6013      	str	r3, [r2, #0]
}
 8006388:	bf00      	nop
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	200013c0 	.word	0x200013c0
 8006398:	20002928 	.word	0x20002928

0800639c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
  return uwTick;
 80063a0:	4b03      	ldr	r3, [pc, #12]	; (80063b0 <HAL_GetTick+0x14>)
 80063a2:	681b      	ldr	r3, [r3, #0]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	20002928 	.word	0x20002928

080063b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063bc:	f7ff ffee 	bl	800639c <HAL_GetTick>
 80063c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d005      	beq.n	80063da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80063ce:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <HAL_Delay+0x40>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80063da:	bf00      	nop
 80063dc:	f7ff ffde 	bl	800639c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d8f7      	bhi.n	80063dc <HAL_Delay+0x28>
  {
  }
}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	200013c0 	.word	0x200013c0

080063f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e033      	b.n	8006476 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fe fab2 	bl	8004980 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	d118      	bne.n	8006468 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800643e:	f023 0302 	bic.w	r3, r3, #2
 8006442:	f043 0202 	orr.w	r2, r3, #2
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa4a 	bl	80068e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	f043 0201 	orr.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	641a      	str	r2, [r3, #64]	; 0x40
 8006466:	e001      	b.n	800646c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_ADC_Start_DMA+0x1e>
 800649a:	2302      	movs	r3, #2
 800649c:	e0cc      	b.n	8006638 <HAL_ADC_Start_DMA+0x1b8>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d018      	beq.n	80064e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80064c4:	4b5e      	ldr	r3, [pc, #376]	; (8006640 <HAL_ADC_Start_DMA+0x1c0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a5e      	ldr	r2, [pc, #376]	; (8006644 <HAL_ADC_Start_DMA+0x1c4>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	0c9a      	lsrs	r2, r3, #18
 80064d0:	4613      	mov	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	4413      	add	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80064d8:	e002      	b.n	80064e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	3b01      	subs	r3, #1
 80064de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1f9      	bne.n	80064da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	f040 80a0 	bne.w	8006636 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80064fe:	f023 0301 	bic.w	r3, r3, #1
 8006502:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006520:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006534:	d106      	bne.n	8006544 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653a:	f023 0206 	bic.w	r2, r3, #6
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	645a      	str	r2, [r3, #68]	; 0x44
 8006542:	e002      	b.n	800654a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006552:	4b3d      	ldr	r3, [pc, #244]	; (8006648 <HAL_ADC_Start_DMA+0x1c8>)
 8006554:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	4a3c      	ldr	r2, [pc, #240]	; (800664c <HAL_ADC_Start_DMA+0x1cc>)
 800655c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	4a3b      	ldr	r2, [pc, #236]	; (8006650 <HAL_ADC_Start_DMA+0x1d0>)
 8006564:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	4a3a      	ldr	r2, [pc, #232]	; (8006654 <HAL_ADC_Start_DMA+0x1d4>)
 800656c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006576:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006586:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006596:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	334c      	adds	r3, #76	; 0x4c
 80065a2:	4619      	mov	r1, r3
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f000 fcda 	bl	8006f60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d12a      	bne.n	800660e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a26      	ldr	r2, [pc, #152]	; (8006658 <HAL_ADC_Start_DMA+0x1d8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d015      	beq.n	80065ee <HAL_ADC_Start_DMA+0x16e>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a25      	ldr	r2, [pc, #148]	; (800665c <HAL_ADC_Start_DMA+0x1dc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d105      	bne.n	80065d8 <HAL_ADC_Start_DMA+0x158>
 80065cc:	4b1e      	ldr	r3, [pc, #120]	; (8006648 <HAL_ADC_Start_DMA+0x1c8>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a20      	ldr	r2, [pc, #128]	; (8006660 <HAL_ADC_Start_DMA+0x1e0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d129      	bne.n	8006636 <HAL_ADC_Start_DMA+0x1b6>
 80065e2:	4b19      	ldr	r3, [pc, #100]	; (8006648 <HAL_ADC_Start_DMA+0x1c8>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d823      	bhi.n	8006636 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d11c      	bne.n	8006636 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800660a:	609a      	str	r2, [r3, #8]
 800660c:	e013      	b.n	8006636 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a11      	ldr	r2, [pc, #68]	; (8006658 <HAL_ADC_Start_DMA+0x1d8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10e      	bne.n	8006636 <HAL_ADC_Start_DMA+0x1b6>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d107      	bne.n	8006636 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006634:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	200013a0 	.word	0x200013a0
 8006644:	431bde83 	.word	0x431bde83
 8006648:	40012300 	.word	0x40012300
 800664c:	08006add 	.word	0x08006add
 8006650:	08006b97 	.word	0x08006b97
 8006654:	08006bb3 	.word	0x08006bb3
 8006658:	40012000 	.word	0x40012000
 800665c:	40012100 	.word	0x40012100
 8006660:	40012200 	.word	0x40012200

08006664 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_ADC_ConfigChannel+0x1c>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e105      	b.n	80068c8 <HAL_ADC_ConfigChannel+0x228>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b09      	cmp	r3, #9
 80066ca:	d925      	bls.n	8006718 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68d9      	ldr	r1, [r3, #12]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	4613      	mov	r3, r2
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	4413      	add	r3, r2
 80066e0:	3b1e      	subs	r3, #30
 80066e2:	2207      	movs	r2, #7
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	43da      	mvns	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	400a      	ands	r2, r1
 80066f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68d9      	ldr	r1, [r3, #12]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	b29b      	uxth	r3, r3
 8006702:	4618      	mov	r0, r3
 8006704:	4603      	mov	r3, r0
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	4403      	add	r3, r0
 800670a:	3b1e      	subs	r3, #30
 800670c:	409a      	lsls	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	60da      	str	r2, [r3, #12]
 8006716:	e022      	b.n	800675e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6919      	ldr	r1, [r3, #16]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	4613      	mov	r3, r2
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	4413      	add	r3, r2
 800672c:	2207      	movs	r2, #7
 800672e:	fa02 f303 	lsl.w	r3, r2, r3
 8006732:	43da      	mvns	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	400a      	ands	r2, r1
 800673a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6919      	ldr	r1, [r3, #16]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	4618      	mov	r0, r3
 800674e:	4603      	mov	r3, r0
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	4403      	add	r3, r0
 8006754:	409a      	lsls	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b06      	cmp	r3, #6
 8006764:	d824      	bhi.n	80067b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	3b05      	subs	r3, #5
 8006778:	221f      	movs	r2, #31
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43da      	mvns	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	400a      	ands	r2, r1
 8006786:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	4618      	mov	r0, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	3b05      	subs	r3, #5
 80067a2:	fa00 f203 	lsl.w	r2, r0, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	635a      	str	r2, [r3, #52]	; 0x34
 80067ae:	e04c      	b.n	800684a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2b0c      	cmp	r3, #12
 80067b6:	d824      	bhi.n	8006802 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	3b23      	subs	r3, #35	; 0x23
 80067ca:	221f      	movs	r2, #31
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	43da      	mvns	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	400a      	ands	r2, r1
 80067d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	4618      	mov	r0, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	3b23      	subs	r3, #35	; 0x23
 80067f4:	fa00 f203 	lsl.w	r2, r0, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006800:	e023      	b.n	800684a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	3b41      	subs	r3, #65	; 0x41
 8006814:	221f      	movs	r2, #31
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43da      	mvns	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	400a      	ands	r2, r1
 8006822:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	4618      	mov	r0, r3
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	3b41      	subs	r3, #65	; 0x41
 800683e:	fa00 f203 	lsl.w	r2, r0, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800684a:	4b22      	ldr	r3, [pc, #136]	; (80068d4 <HAL_ADC_ConfigChannel+0x234>)
 800684c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_ADC_ConfigChannel+0x238>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d109      	bne.n	800686c <HAL_ADC_ConfigChannel+0x1cc>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b12      	cmp	r3, #18
 800685e:	d105      	bne.n	800686c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a19      	ldr	r2, [pc, #100]	; (80068d8 <HAL_ADC_ConfigChannel+0x238>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d123      	bne.n	80068be <HAL_ADC_ConfigChannel+0x21e>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b10      	cmp	r3, #16
 800687c:	d003      	beq.n	8006886 <HAL_ADC_ConfigChannel+0x1e6>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b11      	cmp	r3, #17
 8006884:	d11b      	bne.n	80068be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b10      	cmp	r3, #16
 8006898:	d111      	bne.n	80068be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <HAL_ADC_ConfigChannel+0x23c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a10      	ldr	r2, [pc, #64]	; (80068e0 <HAL_ADC_ConfigChannel+0x240>)
 80068a0:	fba2 2303 	umull	r2, r3, r2, r3
 80068a4:	0c9a      	lsrs	r2, r3, #18
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80068b0:	e002      	b.n	80068b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f9      	bne.n	80068b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	40012300 	.word	0x40012300
 80068d8:	40012000 	.word	0x40012000
 80068dc:	200013a0 	.word	0x200013a0
 80068e0:	431bde83 	.word	0x431bde83

080068e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068ec:	4b79      	ldr	r3, [pc, #484]	; (8006ad4 <ADC_Init+0x1f0>)
 80068ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	431a      	orrs	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6859      	ldr	r1, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	021a      	lsls	r2, r3, #8
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800693c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6859      	ldr	r1, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800695e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6899      	ldr	r1, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006976:	4a58      	ldr	r2, [pc, #352]	; (8006ad8 <ADC_Init+0x1f4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d022      	beq.n	80069c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800698a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6899      	ldr	r1, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80069ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6899      	ldr	r1, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	e00f      	b.n	80069e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80069d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80069e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0202 	bic.w	r2, r2, #2
 80069f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6899      	ldr	r1, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	7e1b      	ldrb	r3, [r3, #24]
 80069fc:	005a      	lsls	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01b      	beq.n	8006a48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006a2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6859      	ldr	r1, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	035a      	lsls	r2, r3, #13
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
 8006a46:	e007      	b.n	8006a58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	051a      	lsls	r2, r3, #20
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6899      	ldr	r1, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a9a:	025a      	lsls	r2, r3, #9
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6899      	ldr	r1, [r3, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	029a      	lsls	r2, r3, #10
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	609a      	str	r2, [r3, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40012300 	.word	0x40012300
 8006ad8:	0f000001 	.word	0x0f000001

08006adc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d13c      	bne.n	8006b70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d12b      	bne.n	8006b68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d127      	bne.n	8006b68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d006      	beq.n	8006b34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d119      	bne.n	8006b68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0220 	bic.w	r2, r2, #32
 8006b42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b60:	f043 0201 	orr.w	r2, r3, #1
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f7ff fd7b 	bl	8006664 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b6e:	e00e      	b.n	8006b8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7ff fd85 	bl	800668c <HAL_ADC_ErrorCallback>
}
 8006b82:	e004      	b.n	8006b8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f7ff fd67 	bl	8006678 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006baa:	bf00      	nop
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2240      	movs	r2, #64	; 0x40
 8006bc4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	f043 0204 	orr.w	r2, r3, #4
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7ff fd5a 	bl	800668c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bf0:	4b0c      	ldr	r3, [pc, #48]	; (8006c24 <__NVIC_SetPriorityGrouping+0x44>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c12:	4a04      	ldr	r2, [pc, #16]	; (8006c24 <__NVIC_SetPriorityGrouping+0x44>)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	60d3      	str	r3, [r2, #12]
}
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	e000ed00 	.word	0xe000ed00

08006c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <__NVIC_GetPriorityGrouping+0x18>)
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	f003 0307 	and.w	r3, r3, #7
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	e000ed00 	.word	0xe000ed00

08006c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	db0b      	blt.n	8006c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	f003 021f 	and.w	r2, r3, #31
 8006c5c:	4907      	ldr	r1, [pc, #28]	; (8006c7c <__NVIC_EnableIRQ+0x38>)
 8006c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	2001      	movs	r0, #1
 8006c66:	fa00 f202 	lsl.w	r2, r0, r2
 8006c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	e000e100 	.word	0xe000e100

08006c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	db0a      	blt.n	8006caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	490c      	ldr	r1, [pc, #48]	; (8006ccc <__NVIC_SetPriority+0x4c>)
 8006c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c9e:	0112      	lsls	r2, r2, #4
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ca8:	e00a      	b.n	8006cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	4908      	ldr	r1, [pc, #32]	; (8006cd0 <__NVIC_SetPriority+0x50>)
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	3b04      	subs	r3, #4
 8006cb8:	0112      	lsls	r2, r2, #4
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	761a      	strb	r2, [r3, #24]
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	e000e100 	.word	0xe000e100
 8006cd0:	e000ed00 	.word	0xe000ed00

08006cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b089      	sub	sp, #36	; 0x24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f1c3 0307 	rsb	r3, r3, #7
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	bf28      	it	cs
 8006cf2:	2304      	movcs	r3, #4
 8006cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	2b06      	cmp	r3, #6
 8006cfc:	d902      	bls.n	8006d04 <NVIC_EncodePriority+0x30>
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	3b03      	subs	r3, #3
 8006d02:	e000      	b.n	8006d06 <NVIC_EncodePriority+0x32>
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d12:	43da      	mvns	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	401a      	ands	r2, r3
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	fa01 f303 	lsl.w	r3, r1, r3
 8006d26:	43d9      	mvns	r1, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d2c:	4313      	orrs	r3, r2
         );
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3724      	adds	r7, #36	; 0x24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
	...

08006d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d4c:	d301      	bcc.n	8006d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e00f      	b.n	8006d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d52:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <SysTick_Config+0x40>)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d5a:	210f      	movs	r1, #15
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	f7ff ff8e 	bl	8006c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <SysTick_Config+0x40>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d6a:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <SysTick_Config+0x40>)
 8006d6c:	2207      	movs	r2, #7
 8006d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	e000e010 	.word	0xe000e010

08006d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ff29 	bl	8006be0 <__NVIC_SetPriorityGrouping>
}
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006da8:	f7ff ff3e 	bl	8006c28 <__NVIC_GetPriorityGrouping>
 8006dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68b9      	ldr	r1, [r7, #8]
 8006db2:	6978      	ldr	r0, [r7, #20]
 8006db4:	f7ff ff8e 	bl	8006cd4 <NVIC_EncodePriority>
 8006db8:	4602      	mov	r2, r0
 8006dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff ff5d 	bl	8006c80 <__NVIC_SetPriority>
}
 8006dc6:	bf00      	nop
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff ff31 	bl	8006c44 <__NVIC_EnableIRQ>
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff ffa2 	bl	8006d3c <SysTick_Config>
 8006df8:	4603      	mov	r3, r0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006e10:	f7ff fac4 	bl	800639c <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e099      	b.n	8006f54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e40:	e00f      	b.n	8006e62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e42:	f7ff faab 	bl	800639c <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b05      	cmp	r3, #5
 8006e4e:	d908      	bls.n	8006e62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2203      	movs	r2, #3
 8006e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e078      	b.n	8006f54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e8      	bne.n	8006e42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4b38      	ldr	r3, [pc, #224]	; (8006f5c <HAL_DMA_Init+0x158>)
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d107      	bne.n	8006ecc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f023 0307 	bic.w	r3, r3, #7
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d117      	bne.n	8006f26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00e      	beq.n	8006f26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fa91 	bl	8007430 <DMA_CheckFifoParam>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d008      	beq.n	8006f26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2240      	movs	r2, #64	; 0x40
 8006f18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006f22:	2301      	movs	r3, #1
 8006f24:	e016      	b.n	8006f54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa48 	bl	80073c4 <DMA_CalcBaseAndBitshift>
 8006f34:	4603      	mov	r3, r0
 8006f36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3c:	223f      	movs	r2, #63	; 0x3f
 8006f3e:	409a      	lsls	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	f010803f 	.word	0xf010803f

08006f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_DMA_Start_IT+0x26>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e040      	b.n	8007008 <HAL_DMA_Start_IT+0xa8>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d12f      	bne.n	8006ffa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f9da 	bl	8007368 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb8:	223f      	movs	r2, #63	; 0x3f
 8006fba:	409a      	lsls	r2, r3
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0216 	orr.w	r2, r2, #22
 8006fce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0208 	orr.w	r2, r2, #8
 8006fe6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	e005      	b.n	8007006 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007002:	2302      	movs	r3, #2
 8007004:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d004      	beq.n	800702e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2280      	movs	r2, #128	; 0x80
 8007028:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e00c      	b.n	8007048 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2205      	movs	r2, #5
 8007032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0201 	bic.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007060:	4b92      	ldr	r3, [pc, #584]	; (80072ac <HAL_DMA_IRQHandler+0x258>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a92      	ldr	r2, [pc, #584]	; (80072b0 <HAL_DMA_IRQHandler+0x25c>)
 8007066:	fba2 2303 	umull	r2, r3, r2, r3
 800706a:	0a9b      	lsrs	r3, r3, #10
 800706c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007072:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707e:	2208      	movs	r2, #8
 8007080:	409a      	lsls	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4013      	ands	r3, r2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d01a      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d013      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0204 	bic.w	r2, r2, #4
 80070a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ac:	2208      	movs	r2, #8
 80070ae:	409a      	lsls	r2, r3
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b8:	f043 0201 	orr.w	r2, r3, #1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c4:	2201      	movs	r2, #1
 80070c6:	409a      	lsls	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d012      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e2:	2201      	movs	r2, #1
 80070e4:	409a      	lsls	r2, r3
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ee:	f043 0202 	orr.w	r2, r3, #2
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fa:	2204      	movs	r2, #4
 80070fc:	409a      	lsls	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d012      	beq.n	800712c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007118:	2204      	movs	r2, #4
 800711a:	409a      	lsls	r2, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007124:	f043 0204 	orr.w	r2, r3, #4
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007130:	2210      	movs	r2, #16
 8007132:	409a      	lsls	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4013      	ands	r3, r2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d043      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d03c      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714e:	2210      	movs	r2, #16
 8007150:	409a      	lsls	r2, r3
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d018      	beq.n	8007196 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d108      	bne.n	8007184 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d024      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
 8007182:	e01f      	b.n	80071c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01b      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
 8007194:	e016      	b.n	80071c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d107      	bne.n	80071b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0208 	bic.w	r2, r2, #8
 80071b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c8:	2220      	movs	r2, #32
 80071ca:	409a      	lsls	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 808e 	beq.w	80072f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8086 	beq.w	80072f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ea:	2220      	movs	r2, #32
 80071ec:	409a      	lsls	r2, r3
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b05      	cmp	r3, #5
 80071fc:	d136      	bne.n	800726c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0216 	bic.w	r2, r2, #22
 800720c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695a      	ldr	r2, [r3, #20]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800721c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d103      	bne.n	800722e <HAL_DMA_IRQHandler+0x1da>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0208 	bic.w	r2, r2, #8
 800723c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007242:	223f      	movs	r2, #63	; 0x3f
 8007244:	409a      	lsls	r2, r3
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725e:	2b00      	cmp	r3, #0
 8007260:	d07d      	beq.n	800735e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
        }
        return;
 800726a:	e078      	b.n	800735e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d01c      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d108      	bne.n	800729a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728c:	2b00      	cmp	r3, #0
 800728e:	d030      	beq.n	80072f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
 8007298:	e02b      	b.n	80072f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d027      	beq.n	80072f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
 80072aa:	e022      	b.n	80072f2 <HAL_DMA_IRQHandler+0x29e>
 80072ac:	200013a0 	.word	0x200013a0
 80072b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10f      	bne.n	80072e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0210 	bic.w	r2, r2, #16
 80072d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d032      	beq.n	8007360 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d022      	beq.n	800734c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2205      	movs	r2, #5
 800730a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	3301      	adds	r3, #1
 8007322:	60bb      	str	r3, [r7, #8]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	429a      	cmp	r2, r3
 8007328:	d307      	bcc.n	800733a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1f2      	bne.n	800731e <HAL_DMA_IRQHandler+0x2ca>
 8007338:	e000      	b.n	800733c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800733a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	4798      	blx	r3
 800735c:	e000      	b.n	8007360 <HAL_DMA_IRQHandler+0x30c>
        return;
 800735e:	bf00      	nop
    }
  }
}
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop

08007368 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007384:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b40      	cmp	r3, #64	; 0x40
 8007394:	d108      	bne.n	80073a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80073a6:	e007      	b.n	80073b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	60da      	str	r2, [r3, #12]
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	3b10      	subs	r3, #16
 80073d4:	4a14      	ldr	r2, [pc, #80]	; (8007428 <DMA_CalcBaseAndBitshift+0x64>)
 80073d6:	fba2 2303 	umull	r2, r3, r2, r3
 80073da:	091b      	lsrs	r3, r3, #4
 80073dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80073de:	4a13      	ldr	r2, [pc, #76]	; (800742c <DMA_CalcBaseAndBitshift+0x68>)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d909      	bls.n	8007406 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80073fa:	f023 0303 	bic.w	r3, r3, #3
 80073fe:	1d1a      	adds	r2, r3, #4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	659a      	str	r2, [r3, #88]	; 0x58
 8007404:	e007      	b.n	8007416 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800740e:	f023 0303 	bic.w	r3, r3, #3
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	aaaaaaab 	.word	0xaaaaaaab
 800742c:	0800e5cc 	.word	0x0800e5cc

08007430 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d11f      	bne.n	800748a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b03      	cmp	r3, #3
 800744e:	d855      	bhi.n	80074fc <DMA_CheckFifoParam+0xcc>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <DMA_CheckFifoParam+0x28>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	08007469 	.word	0x08007469
 800745c:	0800747b 	.word	0x0800747b
 8007460:	08007469 	.word	0x08007469
 8007464:	080074fd 	.word	0x080074fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d045      	beq.n	8007500 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007478:	e042      	b.n	8007500 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007482:	d13f      	bne.n	8007504 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007488:	e03c      	b.n	8007504 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007492:	d121      	bne.n	80074d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b03      	cmp	r3, #3
 8007498:	d836      	bhi.n	8007508 <DMA_CheckFifoParam+0xd8>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <DMA_CheckFifoParam+0x70>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080074b1 	.word	0x080074b1
 80074a4:	080074b7 	.word	0x080074b7
 80074a8:	080074b1 	.word	0x080074b1
 80074ac:	080074c9 	.word	0x080074c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
      break;
 80074b4:	e02f      	b.n	8007516 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d024      	beq.n	800750c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074c6:	e021      	b.n	800750c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074d0:	d11e      	bne.n	8007510 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80074d6:	e01b      	b.n	8007510 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d902      	bls.n	80074e4 <DMA_CheckFifoParam+0xb4>
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d003      	beq.n	80074ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80074e2:	e018      	b.n	8007516 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
      break;
 80074e8:	e015      	b.n	8007516 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00e      	beq.n	8007514 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	73fb      	strb	r3, [r7, #15]
      break;
 80074fa:	e00b      	b.n	8007514 <DMA_CheckFifoParam+0xe4>
      break;
 80074fc:	bf00      	nop
 80074fe:	e00a      	b.n	8007516 <DMA_CheckFifoParam+0xe6>
      break;
 8007500:	bf00      	nop
 8007502:	e008      	b.n	8007516 <DMA_CheckFifoParam+0xe6>
      break;
 8007504:	bf00      	nop
 8007506:	e006      	b.n	8007516 <DMA_CheckFifoParam+0xe6>
      break;
 8007508:	bf00      	nop
 800750a:	e004      	b.n	8007516 <DMA_CheckFifoParam+0xe6>
      break;
 800750c:	bf00      	nop
 800750e:	e002      	b.n	8007516 <DMA_CheckFifoParam+0xe6>
      break;   
 8007510:	bf00      	nop
 8007512:	e000      	b.n	8007516 <DMA_CheckFifoParam+0xe6>
      break;
 8007514:	bf00      	nop
    }
  } 
  
  return status; 
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007524:	b480      	push	{r7}
 8007526:	b089      	sub	sp, #36	; 0x24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007536:	2300      	movs	r3, #0
 8007538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800753a:	2300      	movs	r3, #0
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	e16b      	b.n	8007818 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007540:	2201      	movs	r2, #1
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4013      	ands	r3, r2
 8007552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	429a      	cmp	r2, r3
 800755a:	f040 815a 	bne.w	8007812 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d00b      	beq.n	800757e <HAL_GPIO_Init+0x5a>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d007      	beq.n	800757e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007572:	2b11      	cmp	r3, #17
 8007574:	d003      	beq.n	800757e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b12      	cmp	r3, #18
 800757c:	d130      	bne.n	80075e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	2203      	movs	r2, #3
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	43db      	mvns	r3, r3
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	4013      	ands	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80075b4:	2201      	movs	r2, #1
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	43db      	mvns	r3, r3
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	4013      	ands	r3, r2
 80075c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	091b      	lsrs	r3, r3, #4
 80075ca:	f003 0201 	and.w	r2, r3, #1
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	2203      	movs	r2, #3
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	43db      	mvns	r3, r3
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	4013      	ands	r3, r2
 80075f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	4313      	orrs	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d003      	beq.n	8007620 <HAL_GPIO_Init+0xfc>
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b12      	cmp	r3, #18
 800761e:	d123      	bne.n	8007668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	08da      	lsrs	r2, r3, #3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3208      	adds	r2, #8
 8007628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	220f      	movs	r2, #15
 8007638:	fa02 f303 	lsl.w	r3, r2, r3
 800763c:	43db      	mvns	r3, r3
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	4013      	ands	r3, r2
 8007642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	f003 0307 	and.w	r3, r3, #7
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	fa02 f303 	lsl.w	r3, r2, r3
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	4313      	orrs	r3, r2
 8007658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	08da      	lsrs	r2, r3, #3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3208      	adds	r2, #8
 8007662:	69b9      	ldr	r1, [r7, #24]
 8007664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	2203      	movs	r2, #3
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	43db      	mvns	r3, r3
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	4013      	ands	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f003 0203 	and.w	r2, r3, #3
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	4313      	orrs	r3, r2
 8007694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 80b4 	beq.w	8007812 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	4b5f      	ldr	r3, [pc, #380]	; (800782c <HAL_GPIO_Init+0x308>)
 80076b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b2:	4a5e      	ldr	r2, [pc, #376]	; (800782c <HAL_GPIO_Init+0x308>)
 80076b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076b8:	6453      	str	r3, [r2, #68]	; 0x44
 80076ba:	4b5c      	ldr	r3, [pc, #368]	; (800782c <HAL_GPIO_Init+0x308>)
 80076bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80076c6:	4a5a      	ldr	r2, [pc, #360]	; (8007830 <HAL_GPIO_Init+0x30c>)
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	089b      	lsrs	r3, r3, #2
 80076cc:	3302      	adds	r3, #2
 80076ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	220f      	movs	r2, #15
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a51      	ldr	r2, [pc, #324]	; (8007834 <HAL_GPIO_Init+0x310>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d02b      	beq.n	800774a <HAL_GPIO_Init+0x226>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a50      	ldr	r2, [pc, #320]	; (8007838 <HAL_GPIO_Init+0x314>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d025      	beq.n	8007746 <HAL_GPIO_Init+0x222>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a4f      	ldr	r2, [pc, #316]	; (800783c <HAL_GPIO_Init+0x318>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d01f      	beq.n	8007742 <HAL_GPIO_Init+0x21e>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a4e      	ldr	r2, [pc, #312]	; (8007840 <HAL_GPIO_Init+0x31c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d019      	beq.n	800773e <HAL_GPIO_Init+0x21a>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a4d      	ldr	r2, [pc, #308]	; (8007844 <HAL_GPIO_Init+0x320>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <HAL_GPIO_Init+0x216>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a4c      	ldr	r2, [pc, #304]	; (8007848 <HAL_GPIO_Init+0x324>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00d      	beq.n	8007736 <HAL_GPIO_Init+0x212>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a4b      	ldr	r2, [pc, #300]	; (800784c <HAL_GPIO_Init+0x328>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d007      	beq.n	8007732 <HAL_GPIO_Init+0x20e>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a4a      	ldr	r2, [pc, #296]	; (8007850 <HAL_GPIO_Init+0x32c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d101      	bne.n	800772e <HAL_GPIO_Init+0x20a>
 800772a:	2307      	movs	r3, #7
 800772c:	e00e      	b.n	800774c <HAL_GPIO_Init+0x228>
 800772e:	2308      	movs	r3, #8
 8007730:	e00c      	b.n	800774c <HAL_GPIO_Init+0x228>
 8007732:	2306      	movs	r3, #6
 8007734:	e00a      	b.n	800774c <HAL_GPIO_Init+0x228>
 8007736:	2305      	movs	r3, #5
 8007738:	e008      	b.n	800774c <HAL_GPIO_Init+0x228>
 800773a:	2304      	movs	r3, #4
 800773c:	e006      	b.n	800774c <HAL_GPIO_Init+0x228>
 800773e:	2303      	movs	r3, #3
 8007740:	e004      	b.n	800774c <HAL_GPIO_Init+0x228>
 8007742:	2302      	movs	r3, #2
 8007744:	e002      	b.n	800774c <HAL_GPIO_Init+0x228>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <HAL_GPIO_Init+0x228>
 800774a:	2300      	movs	r3, #0
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	f002 0203 	and.w	r2, r2, #3
 8007752:	0092      	lsls	r2, r2, #2
 8007754:	4093      	lsls	r3, r2
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	4313      	orrs	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800775c:	4934      	ldr	r1, [pc, #208]	; (8007830 <HAL_GPIO_Init+0x30c>)
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	089b      	lsrs	r3, r3, #2
 8007762:	3302      	adds	r3, #2
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800776a:	4b3a      	ldr	r3, [pc, #232]	; (8007854 <HAL_GPIO_Init+0x330>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	43db      	mvns	r3, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4013      	ands	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	4313      	orrs	r3, r2
 800778c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800778e:	4a31      	ldr	r2, [pc, #196]	; (8007854 <HAL_GPIO_Init+0x330>)
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007794:	4b2f      	ldr	r3, [pc, #188]	; (8007854 <HAL_GPIO_Init+0x330>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	43db      	mvns	r3, r3
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	4013      	ands	r3, r2
 80077a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077b8:	4a26      	ldr	r2, [pc, #152]	; (8007854 <HAL_GPIO_Init+0x330>)
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077be:	4b25      	ldr	r3, [pc, #148]	; (8007854 <HAL_GPIO_Init+0x330>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	43db      	mvns	r3, r3
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	4013      	ands	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80077e2:	4a1c      	ldr	r2, [pc, #112]	; (8007854 <HAL_GPIO_Init+0x330>)
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80077e8:	4b1a      	ldr	r3, [pc, #104]	; (8007854 <HAL_GPIO_Init+0x330>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	43db      	mvns	r3, r3
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	4013      	ands	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	4313      	orrs	r3, r2
 800780a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800780c:	4a11      	ldr	r2, [pc, #68]	; (8007854 <HAL_GPIO_Init+0x330>)
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	3301      	adds	r3, #1
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	2b0f      	cmp	r3, #15
 800781c:	f67f ae90 	bls.w	8007540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007820:	bf00      	nop
 8007822:	3724      	adds	r7, #36	; 0x24
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	40023800 	.word	0x40023800
 8007830:	40013800 	.word	0x40013800
 8007834:	40020000 	.word	0x40020000
 8007838:	40020400 	.word	0x40020400
 800783c:	40020800 	.word	0x40020800
 8007840:	40020c00 	.word	0x40020c00
 8007844:	40021000 	.word	0x40021000
 8007848:	40021400 	.word	0x40021400
 800784c:	40021800 	.word	0x40021800
 8007850:	40021c00 	.word	0x40021c00
 8007854:	40013c00 	.word	0x40013c00

08007858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	807b      	strh	r3, [r7, #2]
 8007864:	4613      	mov	r3, r2
 8007866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007868:	787b      	ldrb	r3, [r7, #1]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800786e:	887a      	ldrh	r2, [r7, #2]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007874:	e003      	b.n	800787e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007876:	887b      	ldrh	r3, [r7, #2]
 8007878:	041a      	lsls	r2, r3, #16
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	619a      	str	r2, [r3, #24]
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
	...

0800788c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e11f      	b.n	8007ade <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d106      	bne.n	80078b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fd fa4a 	bl	8004d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2224      	movs	r2, #36	; 0x24
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0201 	bic.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80078f0:	f000 fd18 	bl	8008324 <HAL_RCC_GetPCLK1Freq>
 80078f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	4a7b      	ldr	r2, [pc, #492]	; (8007ae8 <HAL_I2C_Init+0x25c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d807      	bhi.n	8007910 <HAL_I2C_Init+0x84>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4a7a      	ldr	r2, [pc, #488]	; (8007aec <HAL_I2C_Init+0x260>)
 8007904:	4293      	cmp	r3, r2
 8007906:	bf94      	ite	ls
 8007908:	2301      	movls	r3, #1
 800790a:	2300      	movhi	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	e006      	b.n	800791e <HAL_I2C_Init+0x92>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4a77      	ldr	r2, [pc, #476]	; (8007af0 <HAL_I2C_Init+0x264>)
 8007914:	4293      	cmp	r3, r2
 8007916:	bf94      	ite	ls
 8007918:	2301      	movls	r3, #1
 800791a:	2300      	movhi	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e0db      	b.n	8007ade <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4a72      	ldr	r2, [pc, #456]	; (8007af4 <HAL_I2C_Init+0x268>)
 800792a:	fba2 2303 	umull	r2, r3, r2, r3
 800792e:	0c9b      	lsrs	r3, r3, #18
 8007930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	430a      	orrs	r2, r1
 8007944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	4a64      	ldr	r2, [pc, #400]	; (8007ae8 <HAL_I2C_Init+0x25c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d802      	bhi.n	8007960 <HAL_I2C_Init+0xd4>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	3301      	adds	r3, #1
 800795e:	e009      	b.n	8007974 <HAL_I2C_Init+0xe8>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007966:	fb02 f303 	mul.w	r3, r2, r3
 800796a:	4a63      	ldr	r2, [pc, #396]	; (8007af8 <HAL_I2C_Init+0x26c>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	099b      	lsrs	r3, r3, #6
 8007972:	3301      	adds	r3, #1
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	430b      	orrs	r3, r1
 800797a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007986:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4956      	ldr	r1, [pc, #344]	; (8007ae8 <HAL_I2C_Init+0x25c>)
 8007990:	428b      	cmp	r3, r1
 8007992:	d80d      	bhi.n	80079b0 <HAL_I2C_Init+0x124>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	1e59      	subs	r1, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	fbb1 f3f3 	udiv	r3, r1, r3
 80079a2:	3301      	adds	r3, #1
 80079a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	bf38      	it	cc
 80079ac:	2304      	movcc	r3, #4
 80079ae:	e04f      	b.n	8007a50 <HAL_I2C_Init+0x1c4>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d111      	bne.n	80079dc <HAL_I2C_Init+0x150>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	1e58      	subs	r0, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6859      	ldr	r1, [r3, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	440b      	add	r3, r1
 80079c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80079ca:	3301      	adds	r3, #1
 80079cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bf0c      	ite	eq
 80079d4:	2301      	moveq	r3, #1
 80079d6:	2300      	movne	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	e012      	b.n	8007a02 <HAL_I2C_Init+0x176>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	1e58      	subs	r0, r3, #1
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6859      	ldr	r1, [r3, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	0099      	lsls	r1, r3, #2
 80079ec:	440b      	add	r3, r1
 80079ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80079f2:	3301      	adds	r3, #1
 80079f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bf0c      	ite	eq
 80079fc:	2301      	moveq	r3, #1
 80079fe:	2300      	movne	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <HAL_I2C_Init+0x17e>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e022      	b.n	8007a50 <HAL_I2C_Init+0x1c4>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10e      	bne.n	8007a30 <HAL_I2C_Init+0x1a4>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1e58      	subs	r0, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6859      	ldr	r1, [r3, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	440b      	add	r3, r1
 8007a20:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a24:	3301      	adds	r3, #1
 8007a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2e:	e00f      	b.n	8007a50 <HAL_I2C_Init+0x1c4>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	1e58      	subs	r0, r3, #1
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6859      	ldr	r1, [r3, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	0099      	lsls	r1, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a46:	3301      	adds	r3, #1
 8007a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	6809      	ldr	r1, [r1, #0]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69da      	ldr	r2, [r3, #28]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6911      	ldr	r1, [r2, #16]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	68d2      	ldr	r2, [r2, #12]
 8007a8a:	4311      	orrs	r1, r2
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	430b      	orrs	r3, r1
 8007a92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	695a      	ldr	r2, [r3, #20]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0201 	orr.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	000186a0 	.word	0x000186a0
 8007aec:	001e847f 	.word	0x001e847f
 8007af0:	003d08ff 	.word	0x003d08ff
 8007af4:	431bde83 	.word	0x431bde83
 8007af8:	10624dd3 	.word	0x10624dd3

08007afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e25b      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d075      	beq.n	8007c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b1a:	4ba3      	ldr	r3, [pc, #652]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 030c 	and.w	r3, r3, #12
 8007b22:	2b04      	cmp	r3, #4
 8007b24:	d00c      	beq.n	8007b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b26:	4ba0      	ldr	r3, [pc, #640]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d112      	bne.n	8007b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b32:	4b9d      	ldr	r3, [pc, #628]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b3e:	d10b      	bne.n	8007b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b40:	4b99      	ldr	r3, [pc, #612]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d05b      	beq.n	8007c04 <HAL_RCC_OscConfig+0x108>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d157      	bne.n	8007c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e236      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b60:	d106      	bne.n	8007b70 <HAL_RCC_OscConfig+0x74>
 8007b62:	4b91      	ldr	r3, [pc, #580]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a90      	ldr	r2, [pc, #576]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	e01d      	b.n	8007bac <HAL_RCC_OscConfig+0xb0>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b78:	d10c      	bne.n	8007b94 <HAL_RCC_OscConfig+0x98>
 8007b7a:	4b8b      	ldr	r3, [pc, #556]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a8a      	ldr	r2, [pc, #552]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	4b88      	ldr	r3, [pc, #544]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a87      	ldr	r2, [pc, #540]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	e00b      	b.n	8007bac <HAL_RCC_OscConfig+0xb0>
 8007b94:	4b84      	ldr	r3, [pc, #528]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a83      	ldr	r2, [pc, #524]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	4b81      	ldr	r3, [pc, #516]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a80      	ldr	r2, [pc, #512]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d013      	beq.n	8007bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bb4:	f7fe fbf2 	bl	800639c <HAL_GetTick>
 8007bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bba:	e008      	b.n	8007bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bbc:	f7fe fbee 	bl	800639c <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	2b64      	cmp	r3, #100	; 0x64
 8007bc8:	d901      	bls.n	8007bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e1fb      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bce:	4b76      	ldr	r3, [pc, #472]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0f0      	beq.n	8007bbc <HAL_RCC_OscConfig+0xc0>
 8007bda:	e014      	b.n	8007c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bdc:	f7fe fbde 	bl	800639c <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007be4:	f7fe fbda 	bl	800639c <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b64      	cmp	r3, #100	; 0x64
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e1e7      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bf6:	4b6c      	ldr	r3, [pc, #432]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1f0      	bne.n	8007be4 <HAL_RCC_OscConfig+0xe8>
 8007c02:	e000      	b.n	8007c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d063      	beq.n	8007cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c12:	4b65      	ldr	r3, [pc, #404]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f003 030c 	and.w	r3, r3, #12
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00b      	beq.n	8007c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c1e:	4b62      	ldr	r3, [pc, #392]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d11c      	bne.n	8007c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c2a:	4b5f      	ldr	r3, [pc, #380]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d116      	bne.n	8007c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c36:	4b5c      	ldr	r3, [pc, #368]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d005      	beq.n	8007c4e <HAL_RCC_OscConfig+0x152>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d001      	beq.n	8007c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e1bb      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c4e:	4b56      	ldr	r3, [pc, #344]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4952      	ldr	r1, [pc, #328]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c62:	e03a      	b.n	8007cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d020      	beq.n	8007cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c6c:	4b4f      	ldr	r3, [pc, #316]	; (8007dac <HAL_RCC_OscConfig+0x2b0>)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c72:	f7fe fb93 	bl	800639c <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c78:	e008      	b.n	8007c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c7a:	f7fe fb8f 	bl	800639c <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e19c      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c8c:	4b46      	ldr	r3, [pc, #280]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0f0      	beq.n	8007c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c98:	4b43      	ldr	r3, [pc, #268]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	00db      	lsls	r3, r3, #3
 8007ca6:	4940      	ldr	r1, [pc, #256]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	600b      	str	r3, [r1, #0]
 8007cac:	e015      	b.n	8007cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cae:	4b3f      	ldr	r3, [pc, #252]	; (8007dac <HAL_RCC_OscConfig+0x2b0>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb4:	f7fe fb72 	bl	800639c <HAL_GetTick>
 8007cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cbc:	f7fe fb6e 	bl	800639c <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e17b      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cce:	4b36      	ldr	r3, [pc, #216]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1f0      	bne.n	8007cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d030      	beq.n	8007d48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d016      	beq.n	8007d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cee:	4b30      	ldr	r3, [pc, #192]	; (8007db0 <HAL_RCC_OscConfig+0x2b4>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf4:	f7fe fb52 	bl	800639c <HAL_GetTick>
 8007cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cfa:	e008      	b.n	8007d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cfc:	f7fe fb4e 	bl	800639c <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e15b      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d0e:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0f0      	beq.n	8007cfc <HAL_RCC_OscConfig+0x200>
 8007d1a:	e015      	b.n	8007d48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d1c:	4b24      	ldr	r3, [pc, #144]	; (8007db0 <HAL_RCC_OscConfig+0x2b4>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d22:	f7fe fb3b 	bl	800639c <HAL_GetTick>
 8007d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d28:	e008      	b.n	8007d3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d2a:	f7fe fb37 	bl	800639c <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d901      	bls.n	8007d3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e144      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d3c:	4b1a      	ldr	r3, [pc, #104]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1f0      	bne.n	8007d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0304 	and.w	r3, r3, #4
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80a0 	beq.w	8007e96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d5a:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10f      	bne.n	8007d86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d66:	2300      	movs	r3, #0
 8007d68:	60bb      	str	r3, [r7, #8]
 8007d6a:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	4a0e      	ldr	r2, [pc, #56]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d74:	6413      	str	r3, [r2, #64]	; 0x40
 8007d76:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <HAL_RCC_OscConfig+0x2ac>)
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d7e:	60bb      	str	r3, [r7, #8]
 8007d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d82:	2301      	movs	r3, #1
 8007d84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d86:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <HAL_RCC_OscConfig+0x2b8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d121      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d92:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <HAL_RCC_OscConfig+0x2b8>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a07      	ldr	r2, [pc, #28]	; (8007db4 <HAL_RCC_OscConfig+0x2b8>)
 8007d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d9e:	f7fe fafd 	bl	800639c <HAL_GetTick>
 8007da2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da4:	e011      	b.n	8007dca <HAL_RCC_OscConfig+0x2ce>
 8007da6:	bf00      	nop
 8007da8:	40023800 	.word	0x40023800
 8007dac:	42470000 	.word	0x42470000
 8007db0:	42470e80 	.word	0x42470e80
 8007db4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007db8:	f7fe faf0 	bl	800639c <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d901      	bls.n	8007dca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e0fd      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dca:	4b81      	ldr	r3, [pc, #516]	; (8007fd0 <HAL_RCC_OscConfig+0x4d4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0f0      	beq.n	8007db8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d106      	bne.n	8007dec <HAL_RCC_OscConfig+0x2f0>
 8007dde:	4b7d      	ldr	r3, [pc, #500]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de2:	4a7c      	ldr	r2, [pc, #496]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007de4:	f043 0301 	orr.w	r3, r3, #1
 8007de8:	6713      	str	r3, [r2, #112]	; 0x70
 8007dea:	e01c      	b.n	8007e26 <HAL_RCC_OscConfig+0x32a>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	2b05      	cmp	r3, #5
 8007df2:	d10c      	bne.n	8007e0e <HAL_RCC_OscConfig+0x312>
 8007df4:	4b77      	ldr	r3, [pc, #476]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df8:	4a76      	ldr	r2, [pc, #472]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007dfa:	f043 0304 	orr.w	r3, r3, #4
 8007dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8007e00:	4b74      	ldr	r3, [pc, #464]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e04:	4a73      	ldr	r2, [pc, #460]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007e06:	f043 0301 	orr.w	r3, r3, #1
 8007e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e0c:	e00b      	b.n	8007e26 <HAL_RCC_OscConfig+0x32a>
 8007e0e:	4b71      	ldr	r3, [pc, #452]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e12:	4a70      	ldr	r2, [pc, #448]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007e14:	f023 0301 	bic.w	r3, r3, #1
 8007e18:	6713      	str	r3, [r2, #112]	; 0x70
 8007e1a:	4b6e      	ldr	r3, [pc, #440]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1e:	4a6d      	ldr	r2, [pc, #436]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007e20:	f023 0304 	bic.w	r3, r3, #4
 8007e24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d015      	beq.n	8007e5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e2e:	f7fe fab5 	bl	800639c <HAL_GetTick>
 8007e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e34:	e00a      	b.n	8007e4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e36:	f7fe fab1 	bl	800639c <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e0bc      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e4c:	4b61      	ldr	r3, [pc, #388]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e50:	f003 0302 	and.w	r3, r3, #2
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0ee      	beq.n	8007e36 <HAL_RCC_OscConfig+0x33a>
 8007e58:	e014      	b.n	8007e84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e5a:	f7fe fa9f 	bl	800639c <HAL_GetTick>
 8007e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e60:	e00a      	b.n	8007e78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e62:	f7fe fa9b 	bl	800639c <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d901      	bls.n	8007e78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e0a6      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e78:	4b56      	ldr	r3, [pc, #344]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1ee      	bne.n	8007e62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d105      	bne.n	8007e96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e8a:	4b52      	ldr	r3, [pc, #328]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	4a51      	ldr	r2, [pc, #324]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 8092 	beq.w	8007fc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ea0:	4b4c      	ldr	r3, [pc, #304]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 030c 	and.w	r3, r3, #12
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d05c      	beq.n	8007f66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d141      	bne.n	8007f38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eb4:	4b48      	ldr	r3, [pc, #288]	; (8007fd8 <HAL_RCC_OscConfig+0x4dc>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eba:	f7fe fa6f 	bl	800639c <HAL_GetTick>
 8007ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ec0:	e008      	b.n	8007ed4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ec2:	f7fe fa6b 	bl	800639c <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e078      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ed4:	4b3f      	ldr	r3, [pc, #252]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1f0      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	69da      	ldr	r2, [r3, #28]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	019b      	lsls	r3, r3, #6
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	085b      	lsrs	r3, r3, #1
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	041b      	lsls	r3, r3, #16
 8007efc:	431a      	orrs	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f02:	061b      	lsls	r3, r3, #24
 8007f04:	4933      	ldr	r1, [pc, #204]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f0a:	4b33      	ldr	r3, [pc, #204]	; (8007fd8 <HAL_RCC_OscConfig+0x4dc>)
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f10:	f7fe fa44 	bl	800639c <HAL_GetTick>
 8007f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f18:	f7fe fa40 	bl	800639c <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e04d      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f2a:	4b2a      	ldr	r3, [pc, #168]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0f0      	beq.n	8007f18 <HAL_RCC_OscConfig+0x41c>
 8007f36:	e045      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f38:	4b27      	ldr	r3, [pc, #156]	; (8007fd8 <HAL_RCC_OscConfig+0x4dc>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f3e:	f7fe fa2d 	bl	800639c <HAL_GetTick>
 8007f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f44:	e008      	b.n	8007f58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f46:	f7fe fa29 	bl	800639c <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d901      	bls.n	8007f58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e036      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f58:	4b1e      	ldr	r3, [pc, #120]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1f0      	bne.n	8007f46 <HAL_RCC_OscConfig+0x44a>
 8007f64:	e02e      	b.n	8007fc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d101      	bne.n	8007f72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e029      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f72:	4b18      	ldr	r3, [pc, #96]	; (8007fd4 <HAL_RCC_OscConfig+0x4d8>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d11c      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d115      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d10d      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d106      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d001      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	40007000 	.word	0x40007000
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	42470060 	.word	0x42470060

08007fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e0cc      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ff0:	4b68      	ldr	r3, [pc, #416]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d90c      	bls.n	8008018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ffe:	4b65      	ldr	r3, [pc, #404]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008006:	4b63      	ldr	r3, [pc, #396]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d001      	beq.n	8008018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e0b8      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d020      	beq.n	8008066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008030:	4b59      	ldr	r3, [pc, #356]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	4a58      	ldr	r2, [pc, #352]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800803a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	2b00      	cmp	r3, #0
 8008046:	d005      	beq.n	8008054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008048:	4b53      	ldr	r3, [pc, #332]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	4a52      	ldr	r2, [pc, #328]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800804e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008054:	4b50      	ldr	r3, [pc, #320]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	494d      	ldr	r1, [pc, #308]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008062:	4313      	orrs	r3, r2
 8008064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d044      	beq.n	80080fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d107      	bne.n	800808a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800807a:	4b47      	ldr	r3, [pc, #284]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d119      	bne.n	80080ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e07f      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d003      	beq.n	800809a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008096:	2b03      	cmp	r3, #3
 8008098:	d107      	bne.n	80080aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800809a:	4b3f      	ldr	r3, [pc, #252]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e06f      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080aa:	4b3b      	ldr	r3, [pc, #236]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e067      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080ba:	4b37      	ldr	r3, [pc, #220]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f023 0203 	bic.w	r2, r3, #3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	4934      	ldr	r1, [pc, #208]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080cc:	f7fe f966 	bl	800639c <HAL_GetTick>
 80080d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080d2:	e00a      	b.n	80080ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080d4:	f7fe f962 	bl	800639c <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e04f      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ea:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 020c 	and.w	r2, r3, #12
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d1eb      	bne.n	80080d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080fc:	4b25      	ldr	r3, [pc, #148]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 030f 	and.w	r3, r3, #15
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d20c      	bcs.n	8008124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800810a:	4b22      	ldr	r3, [pc, #136]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008112:	4b20      	ldr	r3, [pc, #128]	; (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d001      	beq.n	8008124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e032      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008130:	4b19      	ldr	r3, [pc, #100]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	4916      	ldr	r1, [pc, #88]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800813e:	4313      	orrs	r3, r2
 8008140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	490e      	ldr	r1, [pc, #56]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800815e:	4313      	orrs	r3, r2
 8008160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008162:	f000 f821 	bl	80081a8 <HAL_RCC_GetSysClockFreq>
 8008166:	4601      	mov	r1, r0
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	091b      	lsrs	r3, r3, #4
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	4a0a      	ldr	r2, [pc, #40]	; (800819c <HAL_RCC_ClockConfig+0x1c0>)
 8008174:	5cd3      	ldrb	r3, [r2, r3]
 8008176:	fa21 f303 	lsr.w	r3, r1, r3
 800817a:	4a09      	ldr	r2, [pc, #36]	; (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 800817c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800817e:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe f8c6 	bl	8006314 <HAL_InitTick>

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40023c00 	.word	0x40023c00
 8008198:	40023800 	.word	0x40023800
 800819c:	0800e5b4 	.word	0x0800e5b4
 80081a0:	200013a0 	.word	0x200013a0
 80081a4:	200013bc 	.word	0x200013bc

080081a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80081ae:	2300      	movs	r3, #0
 80081b0:	607b      	str	r3, [r7, #4]
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	2300      	movs	r3, #0
 80081b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081be:	4b50      	ldr	r3, [pc, #320]	; (8008300 <HAL_RCC_GetSysClockFreq+0x158>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 030c 	and.w	r3, r3, #12
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d007      	beq.n	80081da <HAL_RCC_GetSysClockFreq+0x32>
 80081ca:	2b08      	cmp	r3, #8
 80081cc:	d008      	beq.n	80081e0 <HAL_RCC_GetSysClockFreq+0x38>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f040 808d 	bne.w	80082ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081d4:	4b4b      	ldr	r3, [pc, #300]	; (8008304 <HAL_RCC_GetSysClockFreq+0x15c>)
 80081d6:	60bb      	str	r3, [r7, #8]
       break;
 80081d8:	e08c      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081da:	4b4b      	ldr	r3, [pc, #300]	; (8008308 <HAL_RCC_GetSysClockFreq+0x160>)
 80081dc:	60bb      	str	r3, [r7, #8]
      break;
 80081de:	e089      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081e0:	4b47      	ldr	r3, [pc, #284]	; (8008300 <HAL_RCC_GetSysClockFreq+0x158>)
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081ea:	4b45      	ldr	r3, [pc, #276]	; (8008300 <HAL_RCC_GetSysClockFreq+0x158>)
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d023      	beq.n	800823e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081f6:	4b42      	ldr	r3, [pc, #264]	; (8008300 <HAL_RCC_GetSysClockFreq+0x158>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	099b      	lsrs	r3, r3, #6
 80081fc:	f04f 0400 	mov.w	r4, #0
 8008200:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	ea03 0501 	and.w	r5, r3, r1
 800820c:	ea04 0602 	and.w	r6, r4, r2
 8008210:	4a3d      	ldr	r2, [pc, #244]	; (8008308 <HAL_RCC_GetSysClockFreq+0x160>)
 8008212:	fb02 f106 	mul.w	r1, r2, r6
 8008216:	2200      	movs	r2, #0
 8008218:	fb02 f205 	mul.w	r2, r2, r5
 800821c:	440a      	add	r2, r1
 800821e:	493a      	ldr	r1, [pc, #232]	; (8008308 <HAL_RCC_GetSysClockFreq+0x160>)
 8008220:	fba5 0101 	umull	r0, r1, r5, r1
 8008224:	1853      	adds	r3, r2, r1
 8008226:	4619      	mov	r1, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f04f 0400 	mov.w	r4, #0
 800822e:	461a      	mov	r2, r3
 8008230:	4623      	mov	r3, r4
 8008232:	f7f8 fd09 	bl	8000c48 <__aeabi_uldivmod>
 8008236:	4603      	mov	r3, r0
 8008238:	460c      	mov	r4, r1
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e049      	b.n	80082d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800823e:	4b30      	ldr	r3, [pc, #192]	; (8008300 <HAL_RCC_GetSysClockFreq+0x158>)
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	099b      	lsrs	r3, r3, #6
 8008244:	f04f 0400 	mov.w	r4, #0
 8008248:	f240 11ff 	movw	r1, #511	; 0x1ff
 800824c:	f04f 0200 	mov.w	r2, #0
 8008250:	ea03 0501 	and.w	r5, r3, r1
 8008254:	ea04 0602 	and.w	r6, r4, r2
 8008258:	4629      	mov	r1, r5
 800825a:	4632      	mov	r2, r6
 800825c:	f04f 0300 	mov.w	r3, #0
 8008260:	f04f 0400 	mov.w	r4, #0
 8008264:	0154      	lsls	r4, r2, #5
 8008266:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800826a:	014b      	lsls	r3, r1, #5
 800826c:	4619      	mov	r1, r3
 800826e:	4622      	mov	r2, r4
 8008270:	1b49      	subs	r1, r1, r5
 8008272:	eb62 0206 	sbc.w	r2, r2, r6
 8008276:	f04f 0300 	mov.w	r3, #0
 800827a:	f04f 0400 	mov.w	r4, #0
 800827e:	0194      	lsls	r4, r2, #6
 8008280:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008284:	018b      	lsls	r3, r1, #6
 8008286:	1a5b      	subs	r3, r3, r1
 8008288:	eb64 0402 	sbc.w	r4, r4, r2
 800828c:	f04f 0100 	mov.w	r1, #0
 8008290:	f04f 0200 	mov.w	r2, #0
 8008294:	00e2      	lsls	r2, r4, #3
 8008296:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800829a:	00d9      	lsls	r1, r3, #3
 800829c:	460b      	mov	r3, r1
 800829e:	4614      	mov	r4, r2
 80082a0:	195b      	adds	r3, r3, r5
 80082a2:	eb44 0406 	adc.w	r4, r4, r6
 80082a6:	f04f 0100 	mov.w	r1, #0
 80082aa:	f04f 0200 	mov.w	r2, #0
 80082ae:	02a2      	lsls	r2, r4, #10
 80082b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80082b4:	0299      	lsls	r1, r3, #10
 80082b6:	460b      	mov	r3, r1
 80082b8:	4614      	mov	r4, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	4621      	mov	r1, r4
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f04f 0400 	mov.w	r4, #0
 80082c4:	461a      	mov	r2, r3
 80082c6:	4623      	mov	r3, r4
 80082c8:	f7f8 fcbe 	bl	8000c48 <__aeabi_uldivmod>
 80082cc:	4603      	mov	r3, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082d2:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <HAL_RCC_GetSysClockFreq+0x158>)
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	0c1b      	lsrs	r3, r3, #16
 80082d8:	f003 0303 	and.w	r3, r3, #3
 80082dc:	3301      	adds	r3, #1
 80082de:	005b      	lsls	r3, r3, #1
 80082e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ea:	60bb      	str	r3, [r7, #8]
      break;
 80082ec:	e002      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082ee:	4b05      	ldr	r3, [pc, #20]	; (8008304 <HAL_RCC_GetSysClockFreq+0x15c>)
 80082f0:	60bb      	str	r3, [r7, #8]
      break;
 80082f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082f4:	68bb      	ldr	r3, [r7, #8]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082fe:	bf00      	nop
 8008300:	40023800 	.word	0x40023800
 8008304:	00f42400 	.word	0x00f42400
 8008308:	017d7840 	.word	0x017d7840

0800830c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008310:	4b03      	ldr	r3, [pc, #12]	; (8008320 <HAL_RCC_GetHCLKFreq+0x14>)
 8008312:	681b      	ldr	r3, [r3, #0]
}
 8008314:	4618      	mov	r0, r3
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	200013a0 	.word	0x200013a0

08008324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008328:	f7ff fff0 	bl	800830c <HAL_RCC_GetHCLKFreq>
 800832c:	4601      	mov	r1, r0
 800832e:	4b05      	ldr	r3, [pc, #20]	; (8008344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	0a9b      	lsrs	r3, r3, #10
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	4a03      	ldr	r2, [pc, #12]	; (8008348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800833a:	5cd3      	ldrb	r3, [r2, r3]
 800833c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008340:	4618      	mov	r0, r3
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40023800 	.word	0x40023800
 8008348:	0800e5c4 	.word	0x0800e5c4

0800834c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008350:	f7ff ffdc 	bl	800830c <HAL_RCC_GetHCLKFreq>
 8008354:	4601      	mov	r1, r0
 8008356:	4b05      	ldr	r3, [pc, #20]	; (800836c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	0b5b      	lsrs	r3, r3, #13
 800835c:	f003 0307 	and.w	r3, r3, #7
 8008360:	4a03      	ldr	r2, [pc, #12]	; (8008370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008362:	5cd3      	ldrb	r3, [r2, r3]
 8008364:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008368:	4618      	mov	r0, r3
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40023800 	.word	0x40023800
 8008370:	0800e5c4 	.word	0x0800e5c4

08008374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e056      	b.n	8008434 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d106      	bne.n	80083a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7fc ff0b 	bl	80051bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2202      	movs	r2, #2
 80083aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	431a      	orrs	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	431a      	orrs	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	ea42 0103 	orr.w	r1, r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	0c1b      	lsrs	r3, r3, #16
 8008404:	f003 0104 	and.w	r1, r3, #4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	69da      	ldr	r2, [r3, #28]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008422:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	4613      	mov	r3, r2
 800844a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008456:	2b01      	cmp	r3, #1
 8008458:	d101      	bne.n	800845e <HAL_SPI_Transmit+0x22>
 800845a:	2302      	movs	r3, #2
 800845c:	e11e      	b.n	800869c <HAL_SPI_Transmit+0x260>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008466:	f7fd ff99 	bl	800639c <HAL_GetTick>
 800846a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800846c:	88fb      	ldrh	r3, [r7, #6]
 800846e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b01      	cmp	r3, #1
 800847a:	d002      	beq.n	8008482 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800847c:	2302      	movs	r3, #2
 800847e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008480:	e103      	b.n	800868a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <HAL_SPI_Transmit+0x52>
 8008488:	88fb      	ldrh	r3, [r7, #6]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008492:	e0fa      	b.n	800868a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2203      	movs	r2, #3
 8008498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	88fa      	ldrh	r2, [r7, #6]
 80084ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	88fa      	ldrh	r2, [r7, #6]
 80084b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084da:	d107      	bne.n	80084ec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f6:	2b40      	cmp	r3, #64	; 0x40
 80084f8:	d007      	beq.n	800850a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008508:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008512:	d14b      	bne.n	80085ac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <HAL_SPI_Transmit+0xe6>
 800851c:	8afb      	ldrh	r3, [r7, #22]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d13e      	bne.n	80085a0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	881a      	ldrh	r2, [r3, #0]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	1c9a      	adds	r2, r3, #2
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800853c:	b29b      	uxth	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	b29a      	uxth	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008546:	e02b      	b.n	80085a0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b02      	cmp	r3, #2
 8008554:	d112      	bne.n	800857c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	881a      	ldrh	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008566:	1c9a      	adds	r2, r3, #2
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008570:	b29b      	uxth	r3, r3
 8008572:	3b01      	subs	r3, #1
 8008574:	b29a      	uxth	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	86da      	strh	r2, [r3, #54]	; 0x36
 800857a:	e011      	b.n	80085a0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800857c:	f7fd ff0e 	bl	800639c <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	429a      	cmp	r2, r3
 800858a:	d803      	bhi.n	8008594 <HAL_SPI_Transmit+0x158>
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008592:	d102      	bne.n	800859a <HAL_SPI_Transmit+0x15e>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d102      	bne.n	80085a0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800859e:	e074      	b.n	800868a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1ce      	bne.n	8008548 <HAL_SPI_Transmit+0x10c>
 80085aa:	e04c      	b.n	8008646 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <HAL_SPI_Transmit+0x17e>
 80085b4:	8afb      	ldrh	r3, [r7, #22]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d140      	bne.n	800863c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	330c      	adds	r3, #12
 80085c4:	7812      	ldrb	r2, [r2, #0]
 80085c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	3b01      	subs	r3, #1
 80085da:	b29a      	uxth	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80085e0:	e02c      	b.n	800863c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d113      	bne.n	8008618 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	330c      	adds	r3, #12
 80085fa:	7812      	ldrb	r2, [r2, #0]
 80085fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	86da      	strh	r2, [r3, #54]	; 0x36
 8008616:	e011      	b.n	800863c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008618:	f7fd fec0 	bl	800639c <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	429a      	cmp	r2, r3
 8008626:	d803      	bhi.n	8008630 <HAL_SPI_Transmit+0x1f4>
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862e:	d102      	bne.n	8008636 <HAL_SPI_Transmit+0x1fa>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d102      	bne.n	800863c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	77fb      	strb	r3, [r7, #31]
          goto error;
 800863a:	e026      	b.n	800868a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008640:	b29b      	uxth	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1cd      	bne.n	80085e2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fc94 	bl	8008f78 <SPI_EndRxTxTransaction>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008664:	2300      	movs	r3, #0
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	613b      	str	r3, [r7, #16]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	613b      	str	r3, [r7, #16]
 8008678:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	77fb      	strb	r3, [r7, #31]
 8008686:	e000      	b.n	800868a <HAL_SPI_Transmit+0x24e>
  }

error:
 8008688:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800869a:	7ffb      	ldrb	r3, [r7, #31]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3720      	adds	r7, #32
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08c      	sub	sp, #48	; 0x30
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80086b2:	2301      	movs	r3, #1
 80086b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d101      	bne.n	80086ca <HAL_SPI_TransmitReceive+0x26>
 80086c6:	2302      	movs	r3, #2
 80086c8:	e18a      	b.n	80089e0 <HAL_SPI_TransmitReceive+0x33c>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086d2:	f7fd fe63 	bl	800639c <HAL_GetTick>
 80086d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80086e8:	887b      	ldrh	r3, [r7, #2]
 80086ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80086ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d00f      	beq.n	8008714 <HAL_SPI_TransmitReceive+0x70>
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086fa:	d107      	bne.n	800870c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d103      	bne.n	800870c <HAL_SPI_TransmitReceive+0x68>
 8008704:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008708:	2b04      	cmp	r3, #4
 800870a:	d003      	beq.n	8008714 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800870c:	2302      	movs	r3, #2
 800870e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008712:	e15b      	b.n	80089cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d005      	beq.n	8008726 <HAL_SPI_TransmitReceive+0x82>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <HAL_SPI_TransmitReceive+0x82>
 8008720:	887b      	ldrh	r3, [r7, #2]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d103      	bne.n	800872e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800872c:	e14e      	b.n	80089cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b04      	cmp	r3, #4
 8008738:	d003      	beq.n	8008742 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2205      	movs	r2, #5
 800873e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	887a      	ldrh	r2, [r7, #2]
 8008752:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	887a      	ldrh	r2, [r7, #2]
 8008758:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	887a      	ldrh	r2, [r7, #2]
 8008764:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	887a      	ldrh	r2, [r7, #2]
 800876a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008782:	2b40      	cmp	r3, #64	; 0x40
 8008784:	d007      	beq.n	8008796 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008794:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800879e:	d178      	bne.n	8008892 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <HAL_SPI_TransmitReceive+0x10a>
 80087a8:	8b7b      	ldrh	r3, [r7, #26]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d166      	bne.n	800887c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	881a      	ldrh	r2, [r3, #0]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087be:	1c9a      	adds	r2, r3, #2
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	3b01      	subs	r3, #1
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087d2:	e053      	b.n	800887c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d11b      	bne.n	800881a <HAL_SPI_TransmitReceive+0x176>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d016      	beq.n	800881a <HAL_SPI_TransmitReceive+0x176>
 80087ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d113      	bne.n	800881a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	881a      	ldrh	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	1c9a      	adds	r2, r3, #2
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800880c:	b29b      	uxth	r3, r3
 800880e:	3b01      	subs	r3, #1
 8008810:	b29a      	uxth	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b01      	cmp	r3, #1
 8008826:	d119      	bne.n	800885c <HAL_SPI_TransmitReceive+0x1b8>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d014      	beq.n	800885c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883c:	b292      	uxth	r2, r2
 800883e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008844:	1c9a      	adds	r2, r3, #2
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800884e:	b29b      	uxth	r3, r3
 8008850:	3b01      	subs	r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008858:	2301      	movs	r3, #1
 800885a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800885c:	f7fd fd9e 	bl	800639c <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008868:	429a      	cmp	r2, r3
 800886a:	d807      	bhi.n	800887c <HAL_SPI_TransmitReceive+0x1d8>
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008872:	d003      	beq.n	800887c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800887a:	e0a7      	b.n	80089cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1a6      	bne.n	80087d4 <HAL_SPI_TransmitReceive+0x130>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800888a:	b29b      	uxth	r3, r3
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1a1      	bne.n	80087d4 <HAL_SPI_TransmitReceive+0x130>
 8008890:	e07c      	b.n	800898c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <HAL_SPI_TransmitReceive+0x1fc>
 800889a:	8b7b      	ldrh	r3, [r7, #26]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d16b      	bne.n	8008978 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	330c      	adds	r3, #12
 80088aa:	7812      	ldrb	r2, [r2, #0]
 80088ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088bc:	b29b      	uxth	r3, r3
 80088be:	3b01      	subs	r3, #1
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088c6:	e057      	b.n	8008978 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d11c      	bne.n	8008910 <HAL_SPI_TransmitReceive+0x26c>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088da:	b29b      	uxth	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d017      	beq.n	8008910 <HAL_SPI_TransmitReceive+0x26c>
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d114      	bne.n	8008910 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	330c      	adds	r3, #12
 80088f0:	7812      	ldrb	r2, [r2, #0]
 80088f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008902:	b29b      	uxth	r3, r3
 8008904:	3b01      	subs	r3, #1
 8008906:	b29a      	uxth	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b01      	cmp	r3, #1
 800891c:	d119      	bne.n	8008952 <HAL_SPI_TransmitReceive+0x2ae>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008922:	b29b      	uxth	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d014      	beq.n	8008952 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008944:	b29b      	uxth	r3, r3
 8008946:	3b01      	subs	r3, #1
 8008948:	b29a      	uxth	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800894e:	2301      	movs	r3, #1
 8008950:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008952:	f7fd fd23 	bl	800639c <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800895e:	429a      	cmp	r2, r3
 8008960:	d803      	bhi.n	800896a <HAL_SPI_TransmitReceive+0x2c6>
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008968:	d102      	bne.n	8008970 <HAL_SPI_TransmitReceive+0x2cc>
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d103      	bne.n	8008978 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008976:	e029      	b.n	80089cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1a2      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x224>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008986:	b29b      	uxth	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d19d      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800898c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 faf1 	bl	8008f78 <SPI_EndRxTxTransaction>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2220      	movs	r2, #32
 80089a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80089a8:	e010      	b.n	80089cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10b      	bne.n	80089ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	e000      	b.n	80089cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80089ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3730      	adds	r7, #48	; 0x30
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d101      	bne.n	8008a08 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e0e3      	b.n	8008bd0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a16:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008a1e:	7dbb      	ldrb	r3, [r7, #22]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d00d      	beq.n	8008a40 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a2a:	d106      	bne.n	8008a3a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <HAL_SPI_TransmitReceive_DMA+0x52>
 8008a34:	7dbb      	ldrb	r3, [r7, #22]
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d002      	beq.n	8008a40 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a3e:	e0c2      	b.n	8008bc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d005      	beq.n	8008a52 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008a4c:	887b      	ldrh	r3, [r7, #2]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d102      	bne.n	8008a58 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a56:	e0b6      	b.n	8008bc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d003      	beq.n	8008a6c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2205      	movs	r2, #5
 8008a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	887a      	ldrh	r2, [r7, #2]
 8008a7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	887a      	ldrh	r2, [r7, #2]
 8008a82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	887a      	ldrh	r2, [r7, #2]
 8008a8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	887a      	ldrh	r2, [r7, #2]
 8008a94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d108      	bne.n	8008ac0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab2:	4a49      	ldr	r2, [pc, #292]	; (8008bd8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8008ab4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aba:	4a48      	ldr	r2, [pc, #288]	; (8008bdc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8008abc:	63da      	str	r2, [r3, #60]	; 0x3c
 8008abe:	e007      	b.n	8008ad0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac4:	4a46      	ldr	r2, [pc, #280]	; (8008be0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8008ac6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008acc:	4a45      	ldr	r2, [pc, #276]	; (8008be4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8008ace:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad4:	4a44      	ldr	r2, [pc, #272]	; (8008be8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8008ad6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008adc:	2200      	movs	r2, #0
 8008ade:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	330c      	adds	r3, #12
 8008aea:	4619      	mov	r1, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008af8:	f7fe fa32 	bl	8006f60 <HAL_DMA_Start_IT>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00c      	beq.n	8008b1c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b06:	f043 0210 	orr.w	r2, r3, #16
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8008b1a:	e054      	b.n	8008bc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f042 0201 	orr.w	r2, r2, #1
 8008b2a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b30:	2200      	movs	r2, #0
 8008b32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b38:	2200      	movs	r2, #0
 8008b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b40:	2200      	movs	r2, #0
 8008b42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b48:	2200      	movs	r2, #0
 8008b4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	4619      	mov	r1, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	330c      	adds	r3, #12
 8008b5c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008b64:	f7fe f9fc 	bl	8006f60 <HAL_DMA_Start_IT>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00c      	beq.n	8008b88 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b72:	f043 0210 	orr.w	r2, r3, #16
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8008b86:	e01e      	b.n	8008bc6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b92:	2b40      	cmp	r3, #64	; 0x40
 8008b94:	d007      	beq.n	8008ba6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ba4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0220 	orr.w	r2, r2, #32
 8008bb4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f042 0202 	orr.w	r2, r2, #2
 8008bc4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	08008d61 	.word	0x08008d61
 8008bdc:	08008c29 	.word	0x08008c29
 8008be0:	08008d7d 	.word	0x08008d7d
 8008be4:	08008cd1 	.word	0x08008cd1
 8008be8:	08008d99 	.word	0x08008d99

08008bec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c36:	f7fd fbb1 	bl	800639c <HAL_GetTick>
 8008c3a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4a:	d03b      	beq.n	8008cc4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 0220 	bic.w	r2, r2, #32
 8008c5a:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10d      	bne.n	8008c80 <SPI_DMAReceiveCplt+0x58>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c6c:	d108      	bne.n	8008c80 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0203 	bic.w	r2, r2, #3
 8008c7c:	605a      	str	r2, [r3, #4]
 8008c7e:	e007      	b.n	8008c90 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 0201 	bic.w	r2, r2, #1
 8008c8e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	2164      	movs	r1, #100	; 0x64
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 f909 	bl	8008eac <SPI_EndRxTransaction>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f7ff ffa9 	bl	8008c14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008cc2:	e002      	b.n	8008cca <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7ff ff91 	bl	8008bec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cde:	f7fd fb5d 	bl	800639c <HAL_GetTick>
 8008ce2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cf2:	d02f      	beq.n	8008d54 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0220 	bic.w	r2, r2, #32
 8008d02:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	2164      	movs	r1, #100	; 0x64
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f935 	bl	8008f78 <SPI_EndRxTxTransaction>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d18:	f043 0220 	orr.w	r2, r3, #32
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0203 	bic.w	r2, r2, #3
 8008d2e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7ff ff61 	bl	8008c14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008d52:	e002      	b.n	8008d5a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f7fb fd95 	bl	8004884 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff ff46 	bl	8008c00 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f7fb fd90 	bl	80048b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d90:	bf00      	nop
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 0203 	bic.w	r2, r2, #3
 8008db4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dba:	f043 0210 	orr.w	r2, r3, #16
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f7ff ff22 	bl	8008c14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008dd0:	bf00      	nop
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	4613      	mov	r3, r2
 8008de6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008de8:	e04c      	b.n	8008e84 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d048      	beq.n	8008e84 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008df2:	f7fd fad3 	bl	800639c <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	683a      	ldr	r2, [r7, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d902      	bls.n	8008e08 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d13d      	bne.n	8008e84 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e20:	d111      	bne.n	8008e46 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e2a:	d004      	beq.n	8008e36 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e34:	d107      	bne.n	8008e46 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e4e:	d10f      	bne.n	8008e70 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e00f      	b.n	8008ea4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	bf0c      	ite	eq
 8008e94:	2301      	moveq	r3, #1
 8008e96:	2300      	movne	r3, #0
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	79fb      	ldrb	r3, [r7, #7]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d1a3      	bne.n	8008dea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ec0:	d111      	bne.n	8008ee6 <SPI_EndRxTransaction+0x3a>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eca:	d004      	beq.n	8008ed6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ed4:	d107      	bne.n	8008ee6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eee:	d12a      	bne.n	8008f46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ef8:	d012      	beq.n	8008f20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2200      	movs	r2, #0
 8008f02:	2180      	movs	r1, #128	; 0x80
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff ff67 	bl	8008dd8 <SPI_WaitFlagStateUntilTimeout>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d02d      	beq.n	8008f6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f14:	f043 0220 	orr.w	r2, r3, #32
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e026      	b.n	8008f6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2200      	movs	r2, #0
 8008f28:	2101      	movs	r1, #1
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f7ff ff54 	bl	8008dd8 <SPI_WaitFlagStateUntilTimeout>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d01a      	beq.n	8008f6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3a:	f043 0220 	orr.w	r2, r3, #32
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e013      	b.n	8008f6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2101      	movs	r1, #1
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7ff ff41 	bl	8008dd8 <SPI_WaitFlagStateUntilTimeout>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d007      	beq.n	8008f6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f60:	f043 0220 	orr.w	r2, r3, #32
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e000      	b.n	8008f6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af02      	add	r7, sp, #8
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f84:	4b1b      	ldr	r3, [pc, #108]	; (8008ff4 <SPI_EndRxTxTransaction+0x7c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a1b      	ldr	r2, [pc, #108]	; (8008ff8 <SPI_EndRxTxTransaction+0x80>)
 8008f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8e:	0d5b      	lsrs	r3, r3, #21
 8008f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f94:	fb02 f303 	mul.w	r3, r2, r3
 8008f98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fa2:	d112      	bne.n	8008fca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2200      	movs	r2, #0
 8008fac:	2180      	movs	r1, #128	; 0x80
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7ff ff12 	bl	8008dd8 <SPI_WaitFlagStateUntilTimeout>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d016      	beq.n	8008fe8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fbe:	f043 0220 	orr.w	r2, r3, #32
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e00f      	b.n	8008fea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe0:	2b80      	cmp	r3, #128	; 0x80
 8008fe2:	d0f2      	beq.n	8008fca <SPI_EndRxTxTransaction+0x52>
 8008fe4:	e000      	b.n	8008fe8 <SPI_EndRxTxTransaction+0x70>
        break;
 8008fe6:	bf00      	nop
  }

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	200013a0 	.word	0x200013a0
 8008ff8:	165e9f81 	.word	0x165e9f81

08008ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e01d      	b.n	800904a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d106      	bne.n	8009028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7fc fc86 	bl	8005934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f000 fb34 	bl	80096a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e01d      	b.n	80090a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d106      	bne.n	800907e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f815 	bl	80090a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2202      	movs	r2, #2
 8009082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	3304      	adds	r3, #4
 800908e:	4619      	mov	r1, r3
 8009090:	4610      	mov	r0, r2
 8009092:	f000 fb09 	bl	80096a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2201      	movs	r2, #1
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fdd4 	bl	8009c7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a15      	ldr	r2, [pc, #84]	; (8009130 <HAL_TIM_PWM_Start+0x74>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d004      	beq.n	80090e8 <HAL_TIM_PWM_Start+0x2c>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a14      	ldr	r2, [pc, #80]	; (8009134 <HAL_TIM_PWM_Start+0x78>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d101      	bne.n	80090ec <HAL_TIM_PWM_Start+0x30>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e000      	b.n	80090ee <HAL_TIM_PWM_Start+0x32>
 80090ec:	2300      	movs	r3, #0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d007      	beq.n	8009102 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b06      	cmp	r3, #6
 8009112:	d007      	beq.n	8009124 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0201 	orr.w	r2, r2, #1
 8009122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	40010000 	.word	0x40010000
 8009134:	40010400 	.word	0x40010400

08009138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b02      	cmp	r3, #2
 800914c:	d122      	bne.n	8009194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b02      	cmp	r3, #2
 800915a:	d11b      	bne.n	8009194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0202 	mvn.w	r2, #2
 8009164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	f003 0303 	and.w	r3, r3, #3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa75 	bl	800966a <HAL_TIM_IC_CaptureCallback>
 8009180:	e005      	b.n	800918e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa67 	bl	8009656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fa78 	bl	800967e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	f003 0304 	and.w	r3, r3, #4
 800919e:	2b04      	cmp	r3, #4
 80091a0:	d122      	bne.n	80091e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	d11b      	bne.n	80091e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f06f 0204 	mvn.w	r2, #4
 80091b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2202      	movs	r2, #2
 80091be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fa4b 	bl	800966a <HAL_TIM_IC_CaptureCallback>
 80091d4:	e005      	b.n	80091e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa3d 	bl	8009656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fa4e 	bl	800967e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	f003 0308 	and.w	r3, r3, #8
 80091f2:	2b08      	cmp	r3, #8
 80091f4:	d122      	bne.n	800923c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f003 0308 	and.w	r3, r3, #8
 8009200:	2b08      	cmp	r3, #8
 8009202:	d11b      	bne.n	800923c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f06f 0208 	mvn.w	r2, #8
 800920c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2204      	movs	r2, #4
 8009212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	f003 0303 	and.w	r3, r3, #3
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa21 	bl	800966a <HAL_TIM_IC_CaptureCallback>
 8009228:	e005      	b.n	8009236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa13 	bl	8009656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fa24 	bl	800967e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	f003 0310 	and.w	r3, r3, #16
 8009246:	2b10      	cmp	r3, #16
 8009248:	d122      	bne.n	8009290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f003 0310 	and.w	r3, r3, #16
 8009254:	2b10      	cmp	r3, #16
 8009256:	d11b      	bne.n	8009290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f06f 0210 	mvn.w	r2, #16
 8009260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2208      	movs	r2, #8
 8009266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f9f7 	bl	800966a <HAL_TIM_IC_CaptureCallback>
 800927c:	e005      	b.n	800928a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f9e9 	bl	8009656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f9fa 	bl	800967e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b01      	cmp	r3, #1
 800929c:	d10e      	bne.n	80092bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d107      	bne.n	80092bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f06f 0201 	mvn.w	r2, #1
 80092b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f9c3 	bl	8009642 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c6:	2b80      	cmp	r3, #128	; 0x80
 80092c8:	d10e      	bne.n	80092e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d4:	2b80      	cmp	r3, #128	; 0x80
 80092d6:	d107      	bne.n	80092e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fdc8 	bl	8009e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f2:	2b40      	cmp	r3, #64	; 0x40
 80092f4:	d10e      	bne.n	8009314 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009300:	2b40      	cmp	r3, #64	; 0x40
 8009302:	d107      	bne.n	8009314 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800930c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f9bf 	bl	8009692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0320 	and.w	r3, r3, #32
 800931e:	2b20      	cmp	r3, #32
 8009320:	d10e      	bne.n	8009340 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b20      	cmp	r3, #32
 800932e:	d107      	bne.n	8009340 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f06f 0220 	mvn.w	r2, #32
 8009338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fd92 	bl	8009e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800935a:	2b01      	cmp	r3, #1
 800935c:	d101      	bne.n	8009362 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800935e:	2302      	movs	r3, #2
 8009360:	e0b4      	b.n	80094cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2202      	movs	r2, #2
 800936e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b0c      	cmp	r3, #12
 8009376:	f200 809f 	bhi.w	80094b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800937a:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009380:	080093b5 	.word	0x080093b5
 8009384:	080094b9 	.word	0x080094b9
 8009388:	080094b9 	.word	0x080094b9
 800938c:	080094b9 	.word	0x080094b9
 8009390:	080093f5 	.word	0x080093f5
 8009394:	080094b9 	.word	0x080094b9
 8009398:	080094b9 	.word	0x080094b9
 800939c:	080094b9 	.word	0x080094b9
 80093a0:	08009437 	.word	0x08009437
 80093a4:	080094b9 	.word	0x080094b9
 80093a8:	080094b9 	.word	0x080094b9
 80093ac:	080094b9 	.word	0x080094b9
 80093b0:	08009477 	.word	0x08009477
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68b9      	ldr	r1, [r7, #8]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fa14 	bl	80097e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0208 	orr.w	r2, r2, #8
 80093ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f022 0204 	bic.w	r2, r2, #4
 80093de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6999      	ldr	r1, [r3, #24]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	619a      	str	r2, [r3, #24]
      break;
 80093f2:	e062      	b.n	80094ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68b9      	ldr	r1, [r7, #8]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fa64 	bl	80098c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800940e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699a      	ldr	r2, [r3, #24]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800941e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6999      	ldr	r1, [r3, #24]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	021a      	lsls	r2, r3, #8
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	619a      	str	r2, [r3, #24]
      break;
 8009434:	e041      	b.n	80094ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	4618      	mov	r0, r3
 800943e:	f000 fab9 	bl	80099b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69da      	ldr	r2, [r3, #28]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0208 	orr.w	r2, r2, #8
 8009450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69da      	ldr	r2, [r3, #28]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f022 0204 	bic.w	r2, r2, #4
 8009460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69d9      	ldr	r1, [r3, #28]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	691a      	ldr	r2, [r3, #16]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	430a      	orrs	r2, r1
 8009472:	61da      	str	r2, [r3, #28]
      break;
 8009474:	e021      	b.n	80094ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68b9      	ldr	r1, [r7, #8]
 800947c:	4618      	mov	r0, r3
 800947e:	f000 fb0d 	bl	8009a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69da      	ldr	r2, [r3, #28]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69da      	ldr	r2, [r3, #28]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	69d9      	ldr	r1, [r3, #28]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	021a      	lsls	r2, r3, #8
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	61da      	str	r2, [r3, #28]
      break;
 80094b6:	e000      	b.n	80094ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80094b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d101      	bne.n	80094ec <HAL_TIM_ConfigClockSource+0x18>
 80094e8:	2302      	movs	r3, #2
 80094ea:	e0a6      	b.n	800963a <HAL_TIM_ConfigClockSource+0x166>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800950a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009512:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b40      	cmp	r3, #64	; 0x40
 8009522:	d067      	beq.n	80095f4 <HAL_TIM_ConfigClockSource+0x120>
 8009524:	2b40      	cmp	r3, #64	; 0x40
 8009526:	d80b      	bhi.n	8009540 <HAL_TIM_ConfigClockSource+0x6c>
 8009528:	2b10      	cmp	r3, #16
 800952a:	d073      	beq.n	8009614 <HAL_TIM_ConfigClockSource+0x140>
 800952c:	2b10      	cmp	r3, #16
 800952e:	d802      	bhi.n	8009536 <HAL_TIM_ConfigClockSource+0x62>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d06f      	beq.n	8009614 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009534:	e078      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009536:	2b20      	cmp	r3, #32
 8009538:	d06c      	beq.n	8009614 <HAL_TIM_ConfigClockSource+0x140>
 800953a:	2b30      	cmp	r3, #48	; 0x30
 800953c:	d06a      	beq.n	8009614 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800953e:	e073      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009540:	2b70      	cmp	r3, #112	; 0x70
 8009542:	d00d      	beq.n	8009560 <HAL_TIM_ConfigClockSource+0x8c>
 8009544:	2b70      	cmp	r3, #112	; 0x70
 8009546:	d804      	bhi.n	8009552 <HAL_TIM_ConfigClockSource+0x7e>
 8009548:	2b50      	cmp	r3, #80	; 0x50
 800954a:	d033      	beq.n	80095b4 <HAL_TIM_ConfigClockSource+0xe0>
 800954c:	2b60      	cmp	r3, #96	; 0x60
 800954e:	d041      	beq.n	80095d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009550:	e06a      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009556:	d066      	beq.n	8009626 <HAL_TIM_ConfigClockSource+0x152>
 8009558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800955c:	d017      	beq.n	800958e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800955e:	e063      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	6899      	ldr	r1, [r3, #8]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f000 fb64 	bl	8009c3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009582:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	609a      	str	r2, [r3, #8]
      break;
 800958c:	e04c      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6818      	ldr	r0, [r3, #0]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	6899      	ldr	r1, [r3, #8]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	f000 fb4d 	bl	8009c3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095b0:	609a      	str	r2, [r3, #8]
      break;
 80095b2:	e039      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	6859      	ldr	r1, [r3, #4]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	461a      	mov	r2, r3
 80095c2:	f000 fac1 	bl	8009b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2150      	movs	r1, #80	; 0x50
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 fb1a 	bl	8009c06 <TIM_ITRx_SetConfig>
      break;
 80095d2:	e029      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	6859      	ldr	r1, [r3, #4]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	461a      	mov	r2, r3
 80095e2:	f000 fae0 	bl	8009ba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2160      	movs	r1, #96	; 0x60
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fb0a 	bl	8009c06 <TIM_ITRx_SetConfig>
      break;
 80095f2:	e019      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	6859      	ldr	r1, [r3, #4]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	461a      	mov	r2, r3
 8009602:	f000 faa1 	bl	8009b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2140      	movs	r1, #64	; 0x40
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fafa 	bl	8009c06 <TIM_ITRx_SetConfig>
      break;
 8009612:	e009      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4619      	mov	r1, r3
 800961e:	4610      	mov	r0, r2
 8009620:	f000 faf1 	bl	8009c06 <TIM_ITRx_SetConfig>
      break;
 8009624:	e000      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009642:	b480      	push	{r7}
 8009644:	b083      	sub	sp, #12
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800966a:	b480      	push	{r7}
 800966c:	b083      	sub	sp, #12
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009672:	bf00      	nop
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009686:	bf00      	nop
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800969a:	bf00      	nop
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
	...

080096a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a40      	ldr	r2, [pc, #256]	; (80097bc <TIM_Base_SetConfig+0x114>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d013      	beq.n	80096e8 <TIM_Base_SetConfig+0x40>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c6:	d00f      	beq.n	80096e8 <TIM_Base_SetConfig+0x40>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a3d      	ldr	r2, [pc, #244]	; (80097c0 <TIM_Base_SetConfig+0x118>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d00b      	beq.n	80096e8 <TIM_Base_SetConfig+0x40>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a3c      	ldr	r2, [pc, #240]	; (80097c4 <TIM_Base_SetConfig+0x11c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d007      	beq.n	80096e8 <TIM_Base_SetConfig+0x40>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a3b      	ldr	r2, [pc, #236]	; (80097c8 <TIM_Base_SetConfig+0x120>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d003      	beq.n	80096e8 <TIM_Base_SetConfig+0x40>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a3a      	ldr	r2, [pc, #232]	; (80097cc <TIM_Base_SetConfig+0x124>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d108      	bne.n	80096fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a2f      	ldr	r2, [pc, #188]	; (80097bc <TIM_Base_SetConfig+0x114>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d02b      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009708:	d027      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a2c      	ldr	r2, [pc, #176]	; (80097c0 <TIM_Base_SetConfig+0x118>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d023      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a2b      	ldr	r2, [pc, #172]	; (80097c4 <TIM_Base_SetConfig+0x11c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d01f      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a2a      	ldr	r2, [pc, #168]	; (80097c8 <TIM_Base_SetConfig+0x120>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d01b      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a29      	ldr	r2, [pc, #164]	; (80097cc <TIM_Base_SetConfig+0x124>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d017      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a28      	ldr	r2, [pc, #160]	; (80097d0 <TIM_Base_SetConfig+0x128>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d013      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a27      	ldr	r2, [pc, #156]	; (80097d4 <TIM_Base_SetConfig+0x12c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00f      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a26      	ldr	r2, [pc, #152]	; (80097d8 <TIM_Base_SetConfig+0x130>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d00b      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a25      	ldr	r2, [pc, #148]	; (80097dc <TIM_Base_SetConfig+0x134>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d007      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a24      	ldr	r2, [pc, #144]	; (80097e0 <TIM_Base_SetConfig+0x138>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d003      	beq.n	800975a <TIM_Base_SetConfig+0xb2>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a23      	ldr	r2, [pc, #140]	; (80097e4 <TIM_Base_SetConfig+0x13c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d108      	bne.n	800976c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	4313      	orrs	r3, r2
 800976a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	689a      	ldr	r2, [r3, #8]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a0a      	ldr	r2, [pc, #40]	; (80097bc <TIM_Base_SetConfig+0x114>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d003      	beq.n	80097a0 <TIM_Base_SetConfig+0xf8>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a0c      	ldr	r2, [pc, #48]	; (80097cc <TIM_Base_SetConfig+0x124>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d103      	bne.n	80097a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	691a      	ldr	r2, [r3, #16]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	615a      	str	r2, [r3, #20]
}
 80097ae:	bf00      	nop
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	40010000 	.word	0x40010000
 80097c0:	40000400 	.word	0x40000400
 80097c4:	40000800 	.word	0x40000800
 80097c8:	40000c00 	.word	0x40000c00
 80097cc:	40010400 	.word	0x40010400
 80097d0:	40014000 	.word	0x40014000
 80097d4:	40014400 	.word	0x40014400
 80097d8:	40014800 	.word	0x40014800
 80097dc:	40001800 	.word	0x40001800
 80097e0:	40001c00 	.word	0x40001c00
 80097e4:	40002000 	.word	0x40002000

080097e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	f023 0201 	bic.w	r2, r3, #1
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f023 0303 	bic.w	r3, r3, #3
 800981e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4313      	orrs	r3, r2
 8009828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f023 0302 	bic.w	r3, r3, #2
 8009830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	4313      	orrs	r3, r2
 800983a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a20      	ldr	r2, [pc, #128]	; (80098c0 <TIM_OC1_SetConfig+0xd8>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d003      	beq.n	800984c <TIM_OC1_SetConfig+0x64>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a1f      	ldr	r2, [pc, #124]	; (80098c4 <TIM_OC1_SetConfig+0xdc>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d10c      	bne.n	8009866 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f023 0308 	bic.w	r3, r3, #8
 8009852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	4313      	orrs	r3, r2
 800985c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f023 0304 	bic.w	r3, r3, #4
 8009864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a15      	ldr	r2, [pc, #84]	; (80098c0 <TIM_OC1_SetConfig+0xd8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d003      	beq.n	8009876 <TIM_OC1_SetConfig+0x8e>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a14      	ldr	r2, [pc, #80]	; (80098c4 <TIM_OC1_SetConfig+0xdc>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d111      	bne.n	800989a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800987c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	4313      	orrs	r3, r2
 800988e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	4313      	orrs	r3, r2
 8009898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	621a      	str	r2, [r3, #32]
}
 80098b4:	bf00      	nop
 80098b6:	371c      	adds	r7, #28
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr
 80098c0:	40010000 	.word	0x40010000
 80098c4:	40010400 	.word	0x40010400

080098c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	f023 0210 	bic.w	r2, r3, #16
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	021b      	lsls	r3, r3, #8
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	4313      	orrs	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f023 0320 	bic.w	r3, r3, #32
 8009912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	011b      	lsls	r3, r3, #4
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	4313      	orrs	r3, r2
 800991e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a22      	ldr	r2, [pc, #136]	; (80099ac <TIM_OC2_SetConfig+0xe4>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d003      	beq.n	8009930 <TIM_OC2_SetConfig+0x68>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a21      	ldr	r2, [pc, #132]	; (80099b0 <TIM_OC2_SetConfig+0xe8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d10d      	bne.n	800994c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	011b      	lsls	r3, r3, #4
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	4313      	orrs	r3, r2
 8009942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800994a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a17      	ldr	r2, [pc, #92]	; (80099ac <TIM_OC2_SetConfig+0xe4>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d003      	beq.n	800995c <TIM_OC2_SetConfig+0x94>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a16      	ldr	r2, [pc, #88]	; (80099b0 <TIM_OC2_SetConfig+0xe8>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d113      	bne.n	8009984 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800996a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	4313      	orrs	r3, r2
 8009982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	621a      	str	r2, [r3, #32]
}
 800999e:	bf00      	nop
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	40010000 	.word	0x40010000
 80099b0:	40010400 	.word	0x40010400

080099b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b087      	sub	sp, #28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	69db      	ldr	r3, [r3, #28]
 80099da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f023 0303 	bic.w	r3, r3, #3
 80099ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	021b      	lsls	r3, r3, #8
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a21      	ldr	r2, [pc, #132]	; (8009a94 <TIM_OC3_SetConfig+0xe0>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d003      	beq.n	8009a1a <TIM_OC3_SetConfig+0x66>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a20      	ldr	r2, [pc, #128]	; (8009a98 <TIM_OC3_SetConfig+0xe4>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d10d      	bne.n	8009a36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	021b      	lsls	r3, r3, #8
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a16      	ldr	r2, [pc, #88]	; (8009a94 <TIM_OC3_SetConfig+0xe0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d003      	beq.n	8009a46 <TIM_OC3_SetConfig+0x92>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a15      	ldr	r2, [pc, #84]	; (8009a98 <TIM_OC3_SetConfig+0xe4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d113      	bne.n	8009a6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	011b      	lsls	r3, r3, #4
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	011b      	lsls	r3, r3, #4
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	621a      	str	r2, [r3, #32]
}
 8009a88:	bf00      	nop
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	40010000 	.word	0x40010000
 8009a98:	40010400 	.word	0x40010400

08009a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	031b      	lsls	r3, r3, #12
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a12      	ldr	r2, [pc, #72]	; (8009b40 <TIM_OC4_SetConfig+0xa4>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d003      	beq.n	8009b04 <TIM_OC4_SetConfig+0x68>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a11      	ldr	r2, [pc, #68]	; (8009b44 <TIM_OC4_SetConfig+0xa8>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d109      	bne.n	8009b18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	019b      	lsls	r3, r3, #6
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	621a      	str	r2, [r3, #32]
}
 8009b32:	bf00      	nop
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	40010000 	.word	0x40010000
 8009b44:	40010400 	.word	0x40010400

08009b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	f023 0201 	bic.w	r2, r3, #1
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	011b      	lsls	r3, r3, #4
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f023 030a 	bic.w	r3, r3, #10
 8009b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	621a      	str	r2, [r3, #32]
}
 8009b9a:	bf00      	nop
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b087      	sub	sp, #28
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	f023 0210 	bic.w	r2, r3, #16
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	031b      	lsls	r3, r3, #12
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009be2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	621a      	str	r2, [r3, #32]
}
 8009bfa:	bf00      	nop
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	f043 0307 	orr.w	r3, r3, #7
 8009c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	609a      	str	r2, [r3, #8]
}
 8009c30:	bf00      	nop
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	021a      	lsls	r2, r3, #8
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	431a      	orrs	r2, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	609a      	str	r2, [r3, #8]
}
 8009c70:	bf00      	nop
 8009c72:	371c      	adds	r7, #28
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f003 031f 	and.w	r3, r3, #31
 8009c8e:	2201      	movs	r2, #1
 8009c90:	fa02 f303 	lsl.w	r3, r2, r3
 8009c94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6a1a      	ldr	r2, [r3, #32]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	43db      	mvns	r3, r3
 8009c9e:	401a      	ands	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a1a      	ldr	r2, [r3, #32]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	f003 031f 	and.w	r3, r3, #31
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	621a      	str	r2, [r3, #32]
}
 8009cba:	bf00      	nop
 8009cbc:	371c      	adds	r7, #28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
	...

08009cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d101      	bne.n	8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cdc:	2302      	movs	r3, #2
 8009cde:	e05a      	b.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2202      	movs	r2, #2
 8009cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a21      	ldr	r2, [pc, #132]	; (8009da4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d022      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d2c:	d01d      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a1d      	ldr	r2, [pc, #116]	; (8009da8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d018      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a1b      	ldr	r2, [pc, #108]	; (8009dac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d013      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a1a      	ldr	r2, [pc, #104]	; (8009db0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d00e      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a18      	ldr	r2, [pc, #96]	; (8009db4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d009      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a17      	ldr	r2, [pc, #92]	; (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d004      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a15      	ldr	r2, [pc, #84]	; (8009dbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d10c      	bne.n	8009d84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	40010000 	.word	0x40010000
 8009da8:	40000400 	.word	0x40000400
 8009dac:	40000800 	.word	0x40000800
 8009db0:	40000c00 	.word	0x40000c00
 8009db4:	40010400 	.word	0x40010400
 8009db8:	40014000 	.word	0x40014000
 8009dbc:	40001800 	.word	0x40001800

08009dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e03d      	b.n	8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e03f      	b.n	8009f1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d106      	bne.n	8009eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7fb fe32 	bl	8005b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2224      	movs	r2, #36	; 0x24
 8009ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fdb5 	bl	800aa40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	691a      	ldr	r2, [r3, #16]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	695a      	ldr	r2, [r3, #20]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2220      	movs	r2, #32
 8009f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2220      	movs	r2, #32
 8009f18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b088      	sub	sp, #32
 8009f2a:	af02      	add	r7, sp, #8
 8009f2c:	60f8      	str	r0, [r7, #12]
 8009f2e:	60b9      	str	r1, [r7, #8]
 8009f30:	603b      	str	r3, [r7, #0]
 8009f32:	4613      	mov	r3, r2
 8009f34:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	f040 8083 	bne.w	800a04e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <HAL_UART_Transmit+0x2e>
 8009f4e:	88fb      	ldrh	r3, [r7, #6]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e07b      	b.n	800a050 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <HAL_UART_Transmit+0x40>
 8009f62:	2302      	movs	r3, #2
 8009f64:	e074      	b.n	800a050 <HAL_UART_Transmit+0x12a>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2221      	movs	r2, #33	; 0x21
 8009f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009f7c:	f7fc fa0e 	bl	800639c <HAL_GetTick>
 8009f80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	88fa      	ldrh	r2, [r7, #6]
 8009f86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	88fa      	ldrh	r2, [r7, #6]
 8009f8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009f96:	e042      	b.n	800a01e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fae:	d122      	bne.n	8009ff6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2180      	movs	r1, #128	; 0x80
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 fbbf 	bl	800a73e <UART_WaitOnFlagUntilTimeout>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e042      	b.n	800a050 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fdc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d103      	bne.n	8009fee <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	3302      	adds	r3, #2
 8009fea:	60bb      	str	r3, [r7, #8]
 8009fec:	e017      	b.n	800a01e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	60bb      	str	r3, [r7, #8]
 8009ff4:	e013      	b.n	800a01e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2180      	movs	r1, #128	; 0x80
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 fb9c 	bl	800a73e <UART_WaitOnFlagUntilTimeout>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e01f      	b.n	800a050 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	60ba      	str	r2, [r7, #8]
 800a016:	781a      	ldrb	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a022:	b29b      	uxth	r3, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1b7      	bne.n	8009f98 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2200      	movs	r2, #0
 800a030:	2140      	movs	r1, #64	; 0x40
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fb83 	bl	800a73e <UART_WaitOnFlagUntilTimeout>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e006      	b.n	800a050 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2220      	movs	r2, #32
 800a046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	e000      	b.n	800a050 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a04e:	2302      	movs	r3, #2
  }
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b088      	sub	sp, #32
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	603b      	str	r3, [r7, #0]
 800a064:	4613      	mov	r3, r2
 800a066:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b20      	cmp	r3, #32
 800a076:	f040 8090 	bne.w	800a19a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <HAL_UART_Receive+0x2e>
 800a080:	88fb      	ldrh	r3, [r7, #6]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e088      	b.n	800a19c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a090:	2b01      	cmp	r3, #1
 800a092:	d101      	bne.n	800a098 <HAL_UART_Receive+0x40>
 800a094:	2302      	movs	r3, #2
 800a096:	e081      	b.n	800a19c <HAL_UART_Receive+0x144>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2222      	movs	r2, #34	; 0x22
 800a0aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a0ae:	f7fc f975 	bl	800639c <HAL_GetTick>
 800a0b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	88fa      	ldrh	r2, [r7, #6]
 800a0b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	88fa      	ldrh	r2, [r7, #6]
 800a0be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a0c8:	e05c      	b.n	800a184 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e0:	d12b      	bne.n	800a13a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2120      	movs	r1, #32
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 fb26 	bl	800a73e <UART_WaitOnFlagUntilTimeout>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e04f      	b.n	800a19c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10c      	bne.n	800a122 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a114:	b29a      	uxth	r2, r3
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	3302      	adds	r3, #2
 800a11e:	60bb      	str	r3, [r7, #8]
 800a120:	e030      	b.n	800a184 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	3301      	adds	r3, #1
 800a136:	60bb      	str	r3, [r7, #8]
 800a138:	e024      	b.n	800a184 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2200      	movs	r2, #0
 800a142:	2120      	movs	r1, #32
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 fafa 	bl	800a73e <UART_WaitOnFlagUntilTimeout>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e023      	b.n	800a19c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d108      	bne.n	800a16e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6859      	ldr	r1, [r3, #4]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	1c5a      	adds	r2, r3, #1
 800a166:	60ba      	str	r2, [r7, #8]
 800a168:	b2ca      	uxtb	r2, r1
 800a16a:	701a      	strb	r2, [r3, #0]
 800a16c:	e00a      	b.n	800a184 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	b2da      	uxtb	r2, r3
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	1c59      	adds	r1, r3, #1
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a180:	b2d2      	uxtb	r2, r2
 800a182:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a188:	b29b      	uxth	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d19d      	bne.n	800a0ca <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2220      	movs	r2, #32
 800a192:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	e000      	b.n	800a19c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a19a:	2302      	movs	r3, #2
  }
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b20      	cmp	r3, #32
 800a1bc:	d153      	bne.n	800a266 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <HAL_UART_Transmit_DMA+0x26>
 800a1c4:	88fb      	ldrh	r3, [r7, #6]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e04c      	b.n	800a268 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d101      	bne.n	800a1dc <HAL_UART_Transmit_DMA+0x38>
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e045      	b.n	800a268 <HAL_UART_Transmit_DMA+0xc4>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	88fa      	ldrh	r2, [r7, #6]
 800a1ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	88fa      	ldrh	r2, [r7, #6]
 800a1f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2221      	movs	r2, #33	; 0x21
 800a200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a208:	4a19      	ldr	r2, [pc, #100]	; (800a270 <HAL_UART_Transmit_DMA+0xcc>)
 800a20a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a210:	4a18      	ldr	r2, [pc, #96]	; (800a274 <HAL_UART_Transmit_DMA+0xd0>)
 800a212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a218:	4a17      	ldr	r2, [pc, #92]	; (800a278 <HAL_UART_Transmit_DMA+0xd4>)
 800a21a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a220:	2200      	movs	r2, #0
 800a222:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a224:	f107 0308 	add.w	r3, r7, #8
 800a228:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	6819      	ldr	r1, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3304      	adds	r3, #4
 800a238:	461a      	mov	r2, r3
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	f7fc fe90 	bl	8006f60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a248:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	695a      	ldr	r2, [r3, #20]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a260:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	e000      	b.n	800a268 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800a266:	2302      	movs	r3, #2
  }
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3718      	adds	r7, #24
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	0800a5b9 	.word	0x0800a5b9
 800a274:	0800a60b 	.word	0x0800a60b
 800a278:	0800a6ab 	.word	0x0800a6ab

0800a27c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	4613      	mov	r3, r2
 800a288:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b20      	cmp	r3, #32
 800a294:	d166      	bne.n	800a364 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <HAL_UART_Receive_DMA+0x26>
 800a29c:	88fb      	ldrh	r3, [r7, #6]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e05f      	b.n	800a366 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d101      	bne.n	800a2b4 <HAL_UART_Receive_DMA+0x38>
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e058      	b.n	800a366 <HAL_UART_Receive_DMA+0xea>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	88fa      	ldrh	r2, [r7, #6]
 800a2c6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2222      	movs	r2, #34	; 0x22
 800a2d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2da:	4a25      	ldr	r2, [pc, #148]	; (800a370 <HAL_UART_Receive_DMA+0xf4>)
 800a2dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e2:	4a24      	ldr	r2, [pc, #144]	; (800a374 <HAL_UART_Receive_DMA+0xf8>)
 800a2e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ea:	4a23      	ldr	r2, [pc, #140]	; (800a378 <HAL_UART_Receive_DMA+0xfc>)
 800a2ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800a2f6:	f107 0308 	add.w	r3, r7, #8
 800a2fa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3304      	adds	r3, #4
 800a306:	4619      	mov	r1, r3
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	88fb      	ldrh	r3, [r7, #6]
 800a30e:	f7fc fe27 	bl	8006f60 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a312:	2300      	movs	r3, #0
 800a314:	613b      	str	r3, [r7, #16]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	613b      	str	r3, [r7, #16]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a33e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	695a      	ldr	r2, [r3, #20]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f042 0201 	orr.w	r2, r2, #1
 800a34e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	695a      	ldr	r2, [r3, #20]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a35e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	e000      	b.n	800a366 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a364:	2302      	movs	r3, #2
  }
}
 800a366:	4618      	mov	r0, r3
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	0800a627 	.word	0x0800a627
 800a374:	0800a68f 	.word	0x0800a68f
 800a378:	0800a6ab 	.word	0x0800a6ab

0800a37c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	f003 030f 	and.w	r3, r3, #15
 800a3aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10d      	bne.n	800a3ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	f003 0320 	and.w	r3, r3, #32
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d008      	beq.n	800a3ce <HAL_UART_IRQHandler+0x52>
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	f003 0320 	and.w	r3, r3, #32
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fab9 	bl	800a93e <UART_Receive_IT>
      return;
 800a3cc:	e0d1      	b.n	800a572 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 80b0 	beq.w	800a536 <HAL_UART_IRQHandler+0x1ba>
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f003 0301 	and.w	r3, r3, #1
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d105      	bne.n	800a3ec <HAL_UART_IRQHandler+0x70>
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f000 80a5 	beq.w	800a536 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00a      	beq.n	800a40c <HAL_UART_IRQHandler+0x90>
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d005      	beq.n	800a40c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a404:	f043 0201 	orr.w	r2, r3, #1
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	f003 0304 	and.w	r3, r3, #4
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <HAL_UART_IRQHandler+0xb0>
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d005      	beq.n	800a42c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a424:	f043 0202 	orr.w	r2, r3, #2
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	f003 0302 	and.w	r3, r3, #2
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <HAL_UART_IRQHandler+0xd0>
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d005      	beq.n	800a44c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a444:	f043 0204 	orr.w	r2, r3, #4
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	f003 0308 	and.w	r3, r3, #8
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00f      	beq.n	800a476 <HAL_UART_IRQHandler+0xfa>
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	f003 0320 	and.w	r3, r3, #32
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d104      	bne.n	800a46a <HAL_UART_IRQHandler+0xee>
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d005      	beq.n	800a476 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46e:	f043 0208 	orr.w	r2, r3, #8
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d078      	beq.n	800a570 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	f003 0320 	and.w	r3, r3, #32
 800a484:	2b00      	cmp	r3, #0
 800a486:	d007      	beq.n	800a498 <HAL_UART_IRQHandler+0x11c>
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	f003 0320 	and.w	r3, r3, #32
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fa53 	bl	800a93e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a2:	2b40      	cmp	r3, #64	; 0x40
 800a4a4:	bf0c      	ite	eq
 800a4a6:	2301      	moveq	r3, #1
 800a4a8:	2300      	movne	r3, #0
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b2:	f003 0308 	and.w	r3, r3, #8
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d102      	bne.n	800a4c0 <HAL_UART_IRQHandler+0x144>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d031      	beq.n	800a524 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f99c 	bl	800a7fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d0:	2b40      	cmp	r3, #64	; 0x40
 800a4d2:	d123      	bne.n	800a51c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	695a      	ldr	r2, [r3, #20]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d013      	beq.n	800a514 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f0:	4a21      	ldr	r2, [pc, #132]	; (800a578 <HAL_UART_IRQHandler+0x1fc>)
 800a4f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fc fd89 	bl	8007010 <HAL_DMA_Abort_IT>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d016      	beq.n	800a532 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a50e:	4610      	mov	r0, r2
 800a510:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a512:	e00e      	b.n	800a532 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f845 	bl	800a5a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a51a:	e00a      	b.n	800a532 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f841 	bl	800a5a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a522:	e006      	b.n	800a532 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f83d 	bl	800a5a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a530:	e01e      	b.n	800a570 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a532:	bf00      	nop
    return;
 800a534:	e01c      	b.n	800a570 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d008      	beq.n	800a552 <HAL_UART_IRQHandler+0x1d6>
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f989 	bl	800a862 <UART_Transmit_IT>
    return;
 800a550:	e00f      	b.n	800a572 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00a      	beq.n	800a572 <HAL_UART_IRQHandler+0x1f6>
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f9d1 	bl	800a90e <UART_EndTransmit_IT>
    return;
 800a56c:	bf00      	nop
 800a56e:	e000      	b.n	800a572 <HAL_UART_IRQHandler+0x1f6>
    return;
 800a570:	bf00      	nop
  }
}
 800a572:	3720      	adds	r7, #32
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	0800a83b 	.word	0x0800a83b

0800a57c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d113      	bne.n	800a5fc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	695a      	ldr	r2, [r3, #20]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5e8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68da      	ldr	r2, [r3, #12]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5f8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5fa:	e002      	b.n	800a602 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f7ff ffbd 	bl	800a57c <HAL_UART_TxCpltCallback>
}
 800a602:	bf00      	nop
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a616:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7ff ffb9 	bl	800a590 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a61e:	bf00      	nop
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a632:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d11e      	bne.n	800a680 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68da      	ldr	r2, [r3, #12]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a656:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	695a      	ldr	r2, [r3, #20]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 0201 	bic.w	r2, r2, #1
 800a666:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	695a      	ldr	r2, [r3, #20]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a676:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f7fa ffe3 	bl	800564c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a686:	bf00      	nop
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7fa ffe0 	bl	8005662 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c6:	2b80      	cmp	r3, #128	; 0x80
 800a6c8:	bf0c      	ite	eq
 800a6ca:	2301      	moveq	r3, #1
 800a6cc:	2300      	movne	r3, #0
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b21      	cmp	r3, #33	; 0x21
 800a6dc:	d108      	bne.n	800a6f0 <UART_DMAError+0x46>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d005      	beq.n	800a6f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a6ea:	68b8      	ldr	r0, [r7, #8]
 800a6ec:	f000 f871 	bl	800a7d2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fa:	2b40      	cmp	r3, #64	; 0x40
 800a6fc:	bf0c      	ite	eq
 800a6fe:	2301      	moveq	r3, #1
 800a700:	2300      	movne	r3, #0
 800a702:	b2db      	uxtb	r3, r3
 800a704:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b22      	cmp	r3, #34	; 0x22
 800a710:	d108      	bne.n	800a724 <UART_DMAError+0x7a>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d005      	beq.n	800a724 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2200      	movs	r2, #0
 800a71c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a71e:	68b8      	ldr	r0, [r7, #8]
 800a720:	f000 f86d 	bl	800a7fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a728:	f043 0210 	orr.w	r2, r3, #16
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a730:	68b8      	ldr	r0, [r7, #8]
 800a732:	f7ff ff37 	bl	800a5a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	60f8      	str	r0, [r7, #12]
 800a746:	60b9      	str	r1, [r7, #8]
 800a748:	603b      	str	r3, [r7, #0]
 800a74a:	4613      	mov	r3, r2
 800a74c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a74e:	e02c      	b.n	800a7aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a756:	d028      	beq.n	800a7aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d007      	beq.n	800a76e <UART_WaitOnFlagUntilTimeout+0x30>
 800a75e:	f7fb fe1d 	bl	800639c <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	69ba      	ldr	r2, [r7, #24]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d21d      	bcs.n	800a7aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a77c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	695a      	ldr	r2, [r3, #20]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f022 0201 	bic.w	r2, r2, #1
 800a78c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2220      	movs	r2, #32
 800a792:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2220      	movs	r2, #32
 800a79a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e00f      	b.n	800a7ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	bf0c      	ite	eq
 800a7ba:	2301      	moveq	r3, #1
 800a7bc:	2300      	movne	r3, #0
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d0c3      	beq.n	800a750 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b083      	sub	sp, #12
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68da      	ldr	r2, [r3, #12]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a7e8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a7f2:	bf00      	nop
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68da      	ldr	r2, [r3, #12]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a814:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	695a      	ldr	r2, [r3, #20]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f022 0201 	bic.w	r2, r2, #1
 800a824:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2220      	movs	r2, #32
 800a82a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a82e:	bf00      	nop
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f7ff fea5 	bl	800a5a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a862:	b480      	push	{r7}
 800a864:	b085      	sub	sp, #20
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b21      	cmp	r3, #33	; 0x21
 800a874:	d144      	bne.n	800a900 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a87e:	d11a      	bne.n	800a8b6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a1b      	ldr	r3, [r3, #32]
 800a884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a894:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d105      	bne.n	800a8aa <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	1c9a      	adds	r2, r3, #2
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	621a      	str	r2, [r3, #32]
 800a8a8:	e00e      	b.n	800a8c8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	621a      	str	r2, [r3, #32]
 800a8b4:	e008      	b.n	800a8c8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	1c59      	adds	r1, r3, #1
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	6211      	str	r1, [r2, #32]
 800a8c0:	781a      	ldrb	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10f      	bne.n	800a8fc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68da      	ldr	r2, [r3, #12]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68da      	ldr	r2, [r3, #12]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e000      	b.n	800a902 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a900:	2302      	movs	r3, #2
  }
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68da      	ldr	r2, [r3, #12]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a924:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2220      	movs	r2, #32
 800a92a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7ff fe24 	bl	800a57c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b22      	cmp	r3, #34	; 0x22
 800a950:	d171      	bne.n	800aa36 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95a:	d123      	bne.n	800a9a4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a960:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10e      	bne.n	800a988 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	b29b      	uxth	r3, r3
 800a972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a976:	b29a      	uxth	r2, r3
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a980:	1c9a      	adds	r2, r3, #2
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	629a      	str	r2, [r3, #40]	; 0x28
 800a986:	e029      	b.n	800a9dc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	b2db      	uxtb	r3, r3
 800a992:	b29a      	uxth	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	629a      	str	r2, [r3, #40]	; 0x28
 800a9a2:	e01b      	b.n	800a9dc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6858      	ldr	r0, [r3, #4]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b6:	1c59      	adds	r1, r3, #1
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	6291      	str	r1, [r2, #40]	; 0x28
 800a9bc:	b2c2      	uxtb	r2, r0
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	e00c      	b.n	800a9dc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ce:	1c58      	adds	r0, r3, #1
 800a9d0:	6879      	ldr	r1, [r7, #4]
 800a9d2:	6288      	str	r0, [r1, #40]	; 0x28
 800a9d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a9d8:	b2d2      	uxtb	r2, r2
 800a9da:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d120      	bne.n	800aa32 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 0220 	bic.w	r2, r2, #32
 800a9fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68da      	ldr	r2, [r3, #12]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	695a      	ldr	r2, [r3, #20]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f022 0201 	bic.w	r2, r2, #1
 800aa1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2220      	movs	r2, #32
 800aa24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7fa fe0f 	bl	800564c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e002      	b.n	800aa38 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	e000      	b.n	800aa38 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800aa36:	2302      	movs	r3, #2
  }
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa44:	b085      	sub	sp, #20
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68da      	ldr	r2, [r3, #12]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	430a      	orrs	r2, r1
 800aa5e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689a      	ldr	r2, [r3, #8]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	431a      	orrs	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	431a      	orrs	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	69db      	ldr	r3, [r3, #28]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800aa82:	f023 030c 	bic.w	r3, r3, #12
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	6812      	ldr	r2, [r2, #0]
 800aa8a:	68f9      	ldr	r1, [r7, #12]
 800aa8c:	430b      	orrs	r3, r1
 800aa8e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	699a      	ldr	r2, [r3, #24]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	430a      	orrs	r2, r1
 800aaa4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaae:	f040 818b 	bne.w	800adc8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4ac1      	ldr	r2, [pc, #772]	; (800adbc <UART_SetConfig+0x37c>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d005      	beq.n	800aac8 <UART_SetConfig+0x88>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4abf      	ldr	r2, [pc, #764]	; (800adc0 <UART_SetConfig+0x380>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	f040 80bd 	bne.w	800ac42 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aac8:	f7fd fc40 	bl	800834c <HAL_RCC_GetPCLK2Freq>
 800aacc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	461d      	mov	r5, r3
 800aad2:	f04f 0600 	mov.w	r6, #0
 800aad6:	46a8      	mov	r8, r5
 800aad8:	46b1      	mov	r9, r6
 800aada:	eb18 0308 	adds.w	r3, r8, r8
 800aade:	eb49 0409 	adc.w	r4, r9, r9
 800aae2:	4698      	mov	r8, r3
 800aae4:	46a1      	mov	r9, r4
 800aae6:	eb18 0805 	adds.w	r8, r8, r5
 800aaea:	eb49 0906 	adc.w	r9, r9, r6
 800aaee:	f04f 0100 	mov.w	r1, #0
 800aaf2:	f04f 0200 	mov.w	r2, #0
 800aaf6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aafa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aafe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ab02:	4688      	mov	r8, r1
 800ab04:	4691      	mov	r9, r2
 800ab06:	eb18 0005 	adds.w	r0, r8, r5
 800ab0a:	eb49 0106 	adc.w	r1, r9, r6
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	461d      	mov	r5, r3
 800ab14:	f04f 0600 	mov.w	r6, #0
 800ab18:	196b      	adds	r3, r5, r5
 800ab1a:	eb46 0406 	adc.w	r4, r6, r6
 800ab1e:	461a      	mov	r2, r3
 800ab20:	4623      	mov	r3, r4
 800ab22:	f7f6 f891 	bl	8000c48 <__aeabi_uldivmod>
 800ab26:	4603      	mov	r3, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	4ba5      	ldr	r3, [pc, #660]	; (800adc4 <UART_SetConfig+0x384>)
 800ab2e:	fba3 2302 	umull	r2, r3, r3, r2
 800ab32:	095b      	lsrs	r3, r3, #5
 800ab34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	461d      	mov	r5, r3
 800ab3c:	f04f 0600 	mov.w	r6, #0
 800ab40:	46a9      	mov	r9, r5
 800ab42:	46b2      	mov	sl, r6
 800ab44:	eb19 0309 	adds.w	r3, r9, r9
 800ab48:	eb4a 040a 	adc.w	r4, sl, sl
 800ab4c:	4699      	mov	r9, r3
 800ab4e:	46a2      	mov	sl, r4
 800ab50:	eb19 0905 	adds.w	r9, r9, r5
 800ab54:	eb4a 0a06 	adc.w	sl, sl, r6
 800ab58:	f04f 0100 	mov.w	r1, #0
 800ab5c:	f04f 0200 	mov.w	r2, #0
 800ab60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab6c:	4689      	mov	r9, r1
 800ab6e:	4692      	mov	sl, r2
 800ab70:	eb19 0005 	adds.w	r0, r9, r5
 800ab74:	eb4a 0106 	adc.w	r1, sl, r6
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	461d      	mov	r5, r3
 800ab7e:	f04f 0600 	mov.w	r6, #0
 800ab82:	196b      	adds	r3, r5, r5
 800ab84:	eb46 0406 	adc.w	r4, r6, r6
 800ab88:	461a      	mov	r2, r3
 800ab8a:	4623      	mov	r3, r4
 800ab8c:	f7f6 f85c 	bl	8000c48 <__aeabi_uldivmod>
 800ab90:	4603      	mov	r3, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	461a      	mov	r2, r3
 800ab96:	4b8b      	ldr	r3, [pc, #556]	; (800adc4 <UART_SetConfig+0x384>)
 800ab98:	fba3 1302 	umull	r1, r3, r3, r2
 800ab9c:	095b      	lsrs	r3, r3, #5
 800ab9e:	2164      	movs	r1, #100	; 0x64
 800aba0:	fb01 f303 	mul.w	r3, r1, r3
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	3332      	adds	r3, #50	; 0x32
 800abaa:	4a86      	ldr	r2, [pc, #536]	; (800adc4 <UART_SetConfig+0x384>)
 800abac:	fba2 2303 	umull	r2, r3, r2, r3
 800abb0:	095b      	lsrs	r3, r3, #5
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800abb8:	4498      	add	r8, r3
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	461d      	mov	r5, r3
 800abbe:	f04f 0600 	mov.w	r6, #0
 800abc2:	46a9      	mov	r9, r5
 800abc4:	46b2      	mov	sl, r6
 800abc6:	eb19 0309 	adds.w	r3, r9, r9
 800abca:	eb4a 040a 	adc.w	r4, sl, sl
 800abce:	4699      	mov	r9, r3
 800abd0:	46a2      	mov	sl, r4
 800abd2:	eb19 0905 	adds.w	r9, r9, r5
 800abd6:	eb4a 0a06 	adc.w	sl, sl, r6
 800abda:	f04f 0100 	mov.w	r1, #0
 800abde:	f04f 0200 	mov.w	r2, #0
 800abe2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abe6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800abea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800abee:	4689      	mov	r9, r1
 800abf0:	4692      	mov	sl, r2
 800abf2:	eb19 0005 	adds.w	r0, r9, r5
 800abf6:	eb4a 0106 	adc.w	r1, sl, r6
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	461d      	mov	r5, r3
 800ac00:	f04f 0600 	mov.w	r6, #0
 800ac04:	196b      	adds	r3, r5, r5
 800ac06:	eb46 0406 	adc.w	r4, r6, r6
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	4623      	mov	r3, r4
 800ac0e:	f7f6 f81b 	bl	8000c48 <__aeabi_uldivmod>
 800ac12:	4603      	mov	r3, r0
 800ac14:	460c      	mov	r4, r1
 800ac16:	461a      	mov	r2, r3
 800ac18:	4b6a      	ldr	r3, [pc, #424]	; (800adc4 <UART_SetConfig+0x384>)
 800ac1a:	fba3 1302 	umull	r1, r3, r3, r2
 800ac1e:	095b      	lsrs	r3, r3, #5
 800ac20:	2164      	movs	r1, #100	; 0x64
 800ac22:	fb01 f303 	mul.w	r3, r1, r3
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	3332      	adds	r3, #50	; 0x32
 800ac2c:	4a65      	ldr	r2, [pc, #404]	; (800adc4 <UART_SetConfig+0x384>)
 800ac2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac32:	095b      	lsrs	r3, r3, #5
 800ac34:	f003 0207 	and.w	r2, r3, #7
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4442      	add	r2, r8
 800ac3e:	609a      	str	r2, [r3, #8]
 800ac40:	e26f      	b.n	800b122 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac42:	f7fd fb6f 	bl	8008324 <HAL_RCC_GetPCLK1Freq>
 800ac46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	461d      	mov	r5, r3
 800ac4c:	f04f 0600 	mov.w	r6, #0
 800ac50:	46a8      	mov	r8, r5
 800ac52:	46b1      	mov	r9, r6
 800ac54:	eb18 0308 	adds.w	r3, r8, r8
 800ac58:	eb49 0409 	adc.w	r4, r9, r9
 800ac5c:	4698      	mov	r8, r3
 800ac5e:	46a1      	mov	r9, r4
 800ac60:	eb18 0805 	adds.w	r8, r8, r5
 800ac64:	eb49 0906 	adc.w	r9, r9, r6
 800ac68:	f04f 0100 	mov.w	r1, #0
 800ac6c:	f04f 0200 	mov.w	r2, #0
 800ac70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac7c:	4688      	mov	r8, r1
 800ac7e:	4691      	mov	r9, r2
 800ac80:	eb18 0005 	adds.w	r0, r8, r5
 800ac84:	eb49 0106 	adc.w	r1, r9, r6
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	461d      	mov	r5, r3
 800ac8e:	f04f 0600 	mov.w	r6, #0
 800ac92:	196b      	adds	r3, r5, r5
 800ac94:	eb46 0406 	adc.w	r4, r6, r6
 800ac98:	461a      	mov	r2, r3
 800ac9a:	4623      	mov	r3, r4
 800ac9c:	f7f5 ffd4 	bl	8000c48 <__aeabi_uldivmod>
 800aca0:	4603      	mov	r3, r0
 800aca2:	460c      	mov	r4, r1
 800aca4:	461a      	mov	r2, r3
 800aca6:	4b47      	ldr	r3, [pc, #284]	; (800adc4 <UART_SetConfig+0x384>)
 800aca8:	fba3 2302 	umull	r2, r3, r3, r2
 800acac:	095b      	lsrs	r3, r3, #5
 800acae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	461d      	mov	r5, r3
 800acb6:	f04f 0600 	mov.w	r6, #0
 800acba:	46a9      	mov	r9, r5
 800acbc:	46b2      	mov	sl, r6
 800acbe:	eb19 0309 	adds.w	r3, r9, r9
 800acc2:	eb4a 040a 	adc.w	r4, sl, sl
 800acc6:	4699      	mov	r9, r3
 800acc8:	46a2      	mov	sl, r4
 800acca:	eb19 0905 	adds.w	r9, r9, r5
 800acce:	eb4a 0a06 	adc.w	sl, sl, r6
 800acd2:	f04f 0100 	mov.w	r1, #0
 800acd6:	f04f 0200 	mov.w	r2, #0
 800acda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ace2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ace6:	4689      	mov	r9, r1
 800ace8:	4692      	mov	sl, r2
 800acea:	eb19 0005 	adds.w	r0, r9, r5
 800acee:	eb4a 0106 	adc.w	r1, sl, r6
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	461d      	mov	r5, r3
 800acf8:	f04f 0600 	mov.w	r6, #0
 800acfc:	196b      	adds	r3, r5, r5
 800acfe:	eb46 0406 	adc.w	r4, r6, r6
 800ad02:	461a      	mov	r2, r3
 800ad04:	4623      	mov	r3, r4
 800ad06:	f7f5 ff9f 	bl	8000c48 <__aeabi_uldivmod>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	461a      	mov	r2, r3
 800ad10:	4b2c      	ldr	r3, [pc, #176]	; (800adc4 <UART_SetConfig+0x384>)
 800ad12:	fba3 1302 	umull	r1, r3, r3, r2
 800ad16:	095b      	lsrs	r3, r3, #5
 800ad18:	2164      	movs	r1, #100	; 0x64
 800ad1a:	fb01 f303 	mul.w	r3, r1, r3
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	00db      	lsls	r3, r3, #3
 800ad22:	3332      	adds	r3, #50	; 0x32
 800ad24:	4a27      	ldr	r2, [pc, #156]	; (800adc4 <UART_SetConfig+0x384>)
 800ad26:	fba2 2303 	umull	r2, r3, r2, r3
 800ad2a:	095b      	lsrs	r3, r3, #5
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad32:	4498      	add	r8, r3
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	461d      	mov	r5, r3
 800ad38:	f04f 0600 	mov.w	r6, #0
 800ad3c:	46a9      	mov	r9, r5
 800ad3e:	46b2      	mov	sl, r6
 800ad40:	eb19 0309 	adds.w	r3, r9, r9
 800ad44:	eb4a 040a 	adc.w	r4, sl, sl
 800ad48:	4699      	mov	r9, r3
 800ad4a:	46a2      	mov	sl, r4
 800ad4c:	eb19 0905 	adds.w	r9, r9, r5
 800ad50:	eb4a 0a06 	adc.w	sl, sl, r6
 800ad54:	f04f 0100 	mov.w	r1, #0
 800ad58:	f04f 0200 	mov.w	r2, #0
 800ad5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad68:	4689      	mov	r9, r1
 800ad6a:	4692      	mov	sl, r2
 800ad6c:	eb19 0005 	adds.w	r0, r9, r5
 800ad70:	eb4a 0106 	adc.w	r1, sl, r6
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	461d      	mov	r5, r3
 800ad7a:	f04f 0600 	mov.w	r6, #0
 800ad7e:	196b      	adds	r3, r5, r5
 800ad80:	eb46 0406 	adc.w	r4, r6, r6
 800ad84:	461a      	mov	r2, r3
 800ad86:	4623      	mov	r3, r4
 800ad88:	f7f5 ff5e 	bl	8000c48 <__aeabi_uldivmod>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	460c      	mov	r4, r1
 800ad90:	461a      	mov	r2, r3
 800ad92:	4b0c      	ldr	r3, [pc, #48]	; (800adc4 <UART_SetConfig+0x384>)
 800ad94:	fba3 1302 	umull	r1, r3, r3, r2
 800ad98:	095b      	lsrs	r3, r3, #5
 800ad9a:	2164      	movs	r1, #100	; 0x64
 800ad9c:	fb01 f303 	mul.w	r3, r1, r3
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	3332      	adds	r3, #50	; 0x32
 800ada6:	4a07      	ldr	r2, [pc, #28]	; (800adc4 <UART_SetConfig+0x384>)
 800ada8:	fba2 2303 	umull	r2, r3, r2, r3
 800adac:	095b      	lsrs	r3, r3, #5
 800adae:	f003 0207 	and.w	r2, r3, #7
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4442      	add	r2, r8
 800adb8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800adba:	e1b2      	b.n	800b122 <UART_SetConfig+0x6e2>
 800adbc:	40011000 	.word	0x40011000
 800adc0:	40011400 	.word	0x40011400
 800adc4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4ad7      	ldr	r2, [pc, #860]	; (800b12c <UART_SetConfig+0x6ec>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d005      	beq.n	800adde <UART_SetConfig+0x39e>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4ad6      	ldr	r2, [pc, #856]	; (800b130 <UART_SetConfig+0x6f0>)
 800add8:	4293      	cmp	r3, r2
 800adda:	f040 80d1 	bne.w	800af80 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800adde:	f7fd fab5 	bl	800834c <HAL_RCC_GetPCLK2Freq>
 800ade2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	469a      	mov	sl, r3
 800ade8:	f04f 0b00 	mov.w	fp, #0
 800adec:	46d0      	mov	r8, sl
 800adee:	46d9      	mov	r9, fp
 800adf0:	eb18 0308 	adds.w	r3, r8, r8
 800adf4:	eb49 0409 	adc.w	r4, r9, r9
 800adf8:	4698      	mov	r8, r3
 800adfa:	46a1      	mov	r9, r4
 800adfc:	eb18 080a 	adds.w	r8, r8, sl
 800ae00:	eb49 090b 	adc.w	r9, r9, fp
 800ae04:	f04f 0100 	mov.w	r1, #0
 800ae08:	f04f 0200 	mov.w	r2, #0
 800ae0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ae10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ae14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ae18:	4688      	mov	r8, r1
 800ae1a:	4691      	mov	r9, r2
 800ae1c:	eb1a 0508 	adds.w	r5, sl, r8
 800ae20:	eb4b 0609 	adc.w	r6, fp, r9
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f04f 0200 	mov.w	r2, #0
 800ae2e:	f04f 0300 	mov.w	r3, #0
 800ae32:	f04f 0400 	mov.w	r4, #0
 800ae36:	0094      	lsls	r4, r2, #2
 800ae38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ae3c:	008b      	lsls	r3, r1, #2
 800ae3e:	461a      	mov	r2, r3
 800ae40:	4623      	mov	r3, r4
 800ae42:	4628      	mov	r0, r5
 800ae44:	4631      	mov	r1, r6
 800ae46:	f7f5 feff 	bl	8000c48 <__aeabi_uldivmod>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	461a      	mov	r2, r3
 800ae50:	4bb8      	ldr	r3, [pc, #736]	; (800b134 <UART_SetConfig+0x6f4>)
 800ae52:	fba3 2302 	umull	r2, r3, r3, r2
 800ae56:	095b      	lsrs	r3, r3, #5
 800ae58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	469b      	mov	fp, r3
 800ae60:	f04f 0c00 	mov.w	ip, #0
 800ae64:	46d9      	mov	r9, fp
 800ae66:	46e2      	mov	sl, ip
 800ae68:	eb19 0309 	adds.w	r3, r9, r9
 800ae6c:	eb4a 040a 	adc.w	r4, sl, sl
 800ae70:	4699      	mov	r9, r3
 800ae72:	46a2      	mov	sl, r4
 800ae74:	eb19 090b 	adds.w	r9, r9, fp
 800ae78:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ae7c:	f04f 0100 	mov.w	r1, #0
 800ae80:	f04f 0200 	mov.w	r2, #0
 800ae84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae90:	4689      	mov	r9, r1
 800ae92:	4692      	mov	sl, r2
 800ae94:	eb1b 0509 	adds.w	r5, fp, r9
 800ae98:	eb4c 060a 	adc.w	r6, ip, sl
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	4619      	mov	r1, r3
 800aea2:	f04f 0200 	mov.w	r2, #0
 800aea6:	f04f 0300 	mov.w	r3, #0
 800aeaa:	f04f 0400 	mov.w	r4, #0
 800aeae:	0094      	lsls	r4, r2, #2
 800aeb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aeb4:	008b      	lsls	r3, r1, #2
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	4623      	mov	r3, r4
 800aeba:	4628      	mov	r0, r5
 800aebc:	4631      	mov	r1, r6
 800aebe:	f7f5 fec3 	bl	8000c48 <__aeabi_uldivmod>
 800aec2:	4603      	mov	r3, r0
 800aec4:	460c      	mov	r4, r1
 800aec6:	461a      	mov	r2, r3
 800aec8:	4b9a      	ldr	r3, [pc, #616]	; (800b134 <UART_SetConfig+0x6f4>)
 800aeca:	fba3 1302 	umull	r1, r3, r3, r2
 800aece:	095b      	lsrs	r3, r3, #5
 800aed0:	2164      	movs	r1, #100	; 0x64
 800aed2:	fb01 f303 	mul.w	r3, r1, r3
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	011b      	lsls	r3, r3, #4
 800aeda:	3332      	adds	r3, #50	; 0x32
 800aedc:	4a95      	ldr	r2, [pc, #596]	; (800b134 <UART_SetConfig+0x6f4>)
 800aede:	fba2 2303 	umull	r2, r3, r2, r3
 800aee2:	095b      	lsrs	r3, r3, #5
 800aee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aee8:	4498      	add	r8, r3
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	469b      	mov	fp, r3
 800aeee:	f04f 0c00 	mov.w	ip, #0
 800aef2:	46d9      	mov	r9, fp
 800aef4:	46e2      	mov	sl, ip
 800aef6:	eb19 0309 	adds.w	r3, r9, r9
 800aefa:	eb4a 040a 	adc.w	r4, sl, sl
 800aefe:	4699      	mov	r9, r3
 800af00:	46a2      	mov	sl, r4
 800af02:	eb19 090b 	adds.w	r9, r9, fp
 800af06:	eb4a 0a0c 	adc.w	sl, sl, ip
 800af0a:	f04f 0100 	mov.w	r1, #0
 800af0e:	f04f 0200 	mov.w	r2, #0
 800af12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800af16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800af1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800af1e:	4689      	mov	r9, r1
 800af20:	4692      	mov	sl, r2
 800af22:	eb1b 0509 	adds.w	r5, fp, r9
 800af26:	eb4c 060a 	adc.w	r6, ip, sl
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	4619      	mov	r1, r3
 800af30:	f04f 0200 	mov.w	r2, #0
 800af34:	f04f 0300 	mov.w	r3, #0
 800af38:	f04f 0400 	mov.w	r4, #0
 800af3c:	0094      	lsls	r4, r2, #2
 800af3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800af42:	008b      	lsls	r3, r1, #2
 800af44:	461a      	mov	r2, r3
 800af46:	4623      	mov	r3, r4
 800af48:	4628      	mov	r0, r5
 800af4a:	4631      	mov	r1, r6
 800af4c:	f7f5 fe7c 	bl	8000c48 <__aeabi_uldivmod>
 800af50:	4603      	mov	r3, r0
 800af52:	460c      	mov	r4, r1
 800af54:	461a      	mov	r2, r3
 800af56:	4b77      	ldr	r3, [pc, #476]	; (800b134 <UART_SetConfig+0x6f4>)
 800af58:	fba3 1302 	umull	r1, r3, r3, r2
 800af5c:	095b      	lsrs	r3, r3, #5
 800af5e:	2164      	movs	r1, #100	; 0x64
 800af60:	fb01 f303 	mul.w	r3, r1, r3
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	011b      	lsls	r3, r3, #4
 800af68:	3332      	adds	r3, #50	; 0x32
 800af6a:	4a72      	ldr	r2, [pc, #456]	; (800b134 <UART_SetConfig+0x6f4>)
 800af6c:	fba2 2303 	umull	r2, r3, r2, r3
 800af70:	095b      	lsrs	r3, r3, #5
 800af72:	f003 020f 	and.w	r2, r3, #15
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4442      	add	r2, r8
 800af7c:	609a      	str	r2, [r3, #8]
 800af7e:	e0d0      	b.n	800b122 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800af80:	f7fd f9d0 	bl	8008324 <HAL_RCC_GetPCLK1Freq>
 800af84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	469a      	mov	sl, r3
 800af8a:	f04f 0b00 	mov.w	fp, #0
 800af8e:	46d0      	mov	r8, sl
 800af90:	46d9      	mov	r9, fp
 800af92:	eb18 0308 	adds.w	r3, r8, r8
 800af96:	eb49 0409 	adc.w	r4, r9, r9
 800af9a:	4698      	mov	r8, r3
 800af9c:	46a1      	mov	r9, r4
 800af9e:	eb18 080a 	adds.w	r8, r8, sl
 800afa2:	eb49 090b 	adc.w	r9, r9, fp
 800afa6:	f04f 0100 	mov.w	r1, #0
 800afaa:	f04f 0200 	mov.w	r2, #0
 800afae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800afb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800afb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800afba:	4688      	mov	r8, r1
 800afbc:	4691      	mov	r9, r2
 800afbe:	eb1a 0508 	adds.w	r5, sl, r8
 800afc2:	eb4b 0609 	adc.w	r6, fp, r9
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	4619      	mov	r1, r3
 800afcc:	f04f 0200 	mov.w	r2, #0
 800afd0:	f04f 0300 	mov.w	r3, #0
 800afd4:	f04f 0400 	mov.w	r4, #0
 800afd8:	0094      	lsls	r4, r2, #2
 800afda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800afde:	008b      	lsls	r3, r1, #2
 800afe0:	461a      	mov	r2, r3
 800afe2:	4623      	mov	r3, r4
 800afe4:	4628      	mov	r0, r5
 800afe6:	4631      	mov	r1, r6
 800afe8:	f7f5 fe2e 	bl	8000c48 <__aeabi_uldivmod>
 800afec:	4603      	mov	r3, r0
 800afee:	460c      	mov	r4, r1
 800aff0:	461a      	mov	r2, r3
 800aff2:	4b50      	ldr	r3, [pc, #320]	; (800b134 <UART_SetConfig+0x6f4>)
 800aff4:	fba3 2302 	umull	r2, r3, r3, r2
 800aff8:	095b      	lsrs	r3, r3, #5
 800affa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	469b      	mov	fp, r3
 800b002:	f04f 0c00 	mov.w	ip, #0
 800b006:	46d9      	mov	r9, fp
 800b008:	46e2      	mov	sl, ip
 800b00a:	eb19 0309 	adds.w	r3, r9, r9
 800b00e:	eb4a 040a 	adc.w	r4, sl, sl
 800b012:	4699      	mov	r9, r3
 800b014:	46a2      	mov	sl, r4
 800b016:	eb19 090b 	adds.w	r9, r9, fp
 800b01a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b01e:	f04f 0100 	mov.w	r1, #0
 800b022:	f04f 0200 	mov.w	r2, #0
 800b026:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b02a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b02e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b032:	4689      	mov	r9, r1
 800b034:	4692      	mov	sl, r2
 800b036:	eb1b 0509 	adds.w	r5, fp, r9
 800b03a:	eb4c 060a 	adc.w	r6, ip, sl
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	4619      	mov	r1, r3
 800b044:	f04f 0200 	mov.w	r2, #0
 800b048:	f04f 0300 	mov.w	r3, #0
 800b04c:	f04f 0400 	mov.w	r4, #0
 800b050:	0094      	lsls	r4, r2, #2
 800b052:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b056:	008b      	lsls	r3, r1, #2
 800b058:	461a      	mov	r2, r3
 800b05a:	4623      	mov	r3, r4
 800b05c:	4628      	mov	r0, r5
 800b05e:	4631      	mov	r1, r6
 800b060:	f7f5 fdf2 	bl	8000c48 <__aeabi_uldivmod>
 800b064:	4603      	mov	r3, r0
 800b066:	460c      	mov	r4, r1
 800b068:	461a      	mov	r2, r3
 800b06a:	4b32      	ldr	r3, [pc, #200]	; (800b134 <UART_SetConfig+0x6f4>)
 800b06c:	fba3 1302 	umull	r1, r3, r3, r2
 800b070:	095b      	lsrs	r3, r3, #5
 800b072:	2164      	movs	r1, #100	; 0x64
 800b074:	fb01 f303 	mul.w	r3, r1, r3
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	3332      	adds	r3, #50	; 0x32
 800b07e:	4a2d      	ldr	r2, [pc, #180]	; (800b134 <UART_SetConfig+0x6f4>)
 800b080:	fba2 2303 	umull	r2, r3, r2, r3
 800b084:	095b      	lsrs	r3, r3, #5
 800b086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b08a:	4498      	add	r8, r3
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	469b      	mov	fp, r3
 800b090:	f04f 0c00 	mov.w	ip, #0
 800b094:	46d9      	mov	r9, fp
 800b096:	46e2      	mov	sl, ip
 800b098:	eb19 0309 	adds.w	r3, r9, r9
 800b09c:	eb4a 040a 	adc.w	r4, sl, sl
 800b0a0:	4699      	mov	r9, r3
 800b0a2:	46a2      	mov	sl, r4
 800b0a4:	eb19 090b 	adds.w	r9, r9, fp
 800b0a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b0ac:	f04f 0100 	mov.w	r1, #0
 800b0b0:	f04f 0200 	mov.w	r2, #0
 800b0b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b0bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b0c0:	4689      	mov	r9, r1
 800b0c2:	4692      	mov	sl, r2
 800b0c4:	eb1b 0509 	adds.w	r5, fp, r9
 800b0c8:	eb4c 060a 	adc.w	r6, ip, sl
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	f04f 0200 	mov.w	r2, #0
 800b0d6:	f04f 0300 	mov.w	r3, #0
 800b0da:	f04f 0400 	mov.w	r4, #0
 800b0de:	0094      	lsls	r4, r2, #2
 800b0e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b0e4:	008b      	lsls	r3, r1, #2
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	f7f5 fdab 	bl	8000c48 <__aeabi_uldivmod>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	4b0e      	ldr	r3, [pc, #56]	; (800b134 <UART_SetConfig+0x6f4>)
 800b0fa:	fba3 1302 	umull	r1, r3, r3, r2
 800b0fe:	095b      	lsrs	r3, r3, #5
 800b100:	2164      	movs	r1, #100	; 0x64
 800b102:	fb01 f303 	mul.w	r3, r1, r3
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	011b      	lsls	r3, r3, #4
 800b10a:	3332      	adds	r3, #50	; 0x32
 800b10c:	4a09      	ldr	r2, [pc, #36]	; (800b134 <UART_SetConfig+0x6f4>)
 800b10e:	fba2 2303 	umull	r2, r3, r2, r3
 800b112:	095b      	lsrs	r3, r3, #5
 800b114:	f003 020f 	and.w	r2, r3, #15
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4442      	add	r2, r8
 800b11e:	609a      	str	r2, [r3, #8]
}
 800b120:	e7ff      	b.n	800b122 <UART_SetConfig+0x6e2>
 800b122:	bf00      	nop
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12c:	40011000 	.word	0x40011000
 800b130:	40011400 	.word	0x40011400
 800b134:	51eb851f 	.word	0x51eb851f

0800b138 <FILTER_init>:
 *  Created on: 20 ao�t 2020
 *      Author: Th�o
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 800b138:	b480      	push	{r7}
 800b13a:	b087      	sub	sp, #28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	4613      	mov	r3, r2
 800b144:	71fb      	strb	r3, [r7, #7]
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 800b146:	2300      	movs	r3, #0
 800b148:	617b      	str	r3, [r7, #20]
 800b14a:	e00c      	b.n	800b166 <FILTER_init+0x2e>
		filter->settings[s] = settings[s] ;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	4413      	add	r3, r2
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	68f9      	ldr	r1, [r7, #12]
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	440b      	add	r3, r1
 800b15e:	601a      	str	r2, [r3, #0]
	for(int32_t s = 0; s < 3; s++)
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	3301      	adds	r3, #1
 800b164:	617b      	str	r3, [r7, #20]
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2b02      	cmp	r3, #2
 800b16a:	ddef      	ble.n	800b14c <FILTER_init+0x14>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	79fa      	ldrb	r2, [r7, #7]
 800b170:	761a      	strb	r2, [r3, #24]
}
 800b172:	bf00      	nop
 800b174:	371c      	adds	r7, #28
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
 800b17e:	b480      	push	{r7}
 800b180:	b085      	sub	sp, #20
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	ed87 0a00 	vstr	s0, [r7]
	float to_return = 0 ;
 800b18a:	f04f 0300 	mov.w	r3, #0
 800b18e:	60fb      	str	r3, [r7, #12]
	switch(filter->order){
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	7e1b      	ldrb	r3, [r3, #24]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d01f      	beq.n	800b1d8 <FILTER_process+0x5a>
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d047      	beq.n	800b22c <FILTER_process+0xae>
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d148      	bne.n	800b232 <FILTER_process+0xb4>
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	ed93 7a00 	vldr	s14, [r3]
 800b1a6:	edd7 7a00 	vldr	s15, [r7]
 800b1aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	edd3 6a04 	vldr	s13, [r3, #16]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	edd3 7a01 	vldr	s15, [r3, #4]
 800b1ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[1] = filter->values[0];
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68da      	ldr	r2, [r3, #12]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	611a      	str	r2, [r3, #16]
			to_return =  filter->values[0];
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	60fb      	str	r3, [r7, #12]
			break ;
 800b1d6:	e02f      	b.n	800b238 <FILTER_process+0xba>

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	ed93 7a00 	vldr	s14, [r3]
 800b1de:	edd7 7a00 	vldr	s15, [r7]
 800b1e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	edd3 6a04 	vldr	s13, [r3, #16]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	edd3 7a01 	vldr	s15, [r3, #4]
 800b1f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	edd3 6a05 	vldr	s13, [r3, #20]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	edd3 7a02 	vldr	s15, [r3, #8]
 800b206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b20a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[2] = filter->values[1];
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	691a      	ldr	r2, [r3, #16]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	615a      	str	r2, [r3, #20]
			filter->values[1] = filter->values[0];
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	611a      	str	r2, [r3, #16]
			to_return = filter->values[0];
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	60fb      	str	r3, [r7, #12]
			break;
 800b22a:	e005      	b.n	800b238 <FILTER_process+0xba>

		case FILTER_NO_FILTERING :
			to_return = new_value ;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	60fb      	str	r3, [r7, #12]
			break;
 800b230:	e002      	b.n	800b238 <FILTER_process+0xba>
		default:
			to_return = new_value ;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	60fb      	str	r3, [r7, #12]
			break;
 800b236:	bf00      	nop
	}

	return to_return ;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	ee07 3a90 	vmov	s15, r3
};
 800b23e:	eeb0 0a67 	vmov.f32	s0, s15
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <check_sum_f>:
static rx_cplt_mode_e rx_cplt_mode ;
static ibus_t * ibus ;	//On ne peut utilsier qu'une radio en ibus à la fois

//Fonction privé qui test si le checsum est bon sur un buffer
uint32_t check_sum_f(uint8_t * buffer);
uint32_t check_sum_f(uint8_t * buffer){
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800b258:	2300      	movs	r3, #0
 800b25a:	72fb      	strb	r3, [r7, #11]
 800b25c:	e00a      	b.n	800b274 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 800b25e:	7afb      	ldrb	r3, [r7, #11]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	4413      	add	r3, r2
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	4413      	add	r3, r2
 800b26c:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800b26e:	7afb      	ldrb	r3, [r7, #11]
 800b270:	3301      	adds	r3, #1
 800b272:	72fb      	strb	r3, [r7, #11]
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	2b1d      	cmp	r3, #29
 800b278:	d9f1      	bls.n	800b25e <check_sum_f+0x12>
	return sum ;
 800b27a:	68fb      	ldr	r3, [r7, #12]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <IBUS_init>:

void IBUS_init(ibus_t * ibus_, UART_HandleTypeDef * huart, void(*data_rdy_callback)){
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
	ibus = ibus_;
 800b294:	4a0e      	ldr	r2, [pc, #56]	; (800b2d0 <IBUS_init+0x48>)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6013      	str	r3, [r2, #0]
	ibus->huart = huart ;
 800b29a:	4b0d      	ldr	r3, [pc, #52]	; (800b2d0 <IBUS_init+0x48>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	601a      	str	r2, [r3, #0]
	ibus->data_rdy_callback = data_rdy_callback ;
 800b2a2:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <IBUS_init+0x48>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	639a      	str	r2, [r3, #56]	; 0x38
	//On lance la lecture
	HAL_UART_Receive_DMA(ibus->huart, ibus->dma_buffer, SIZE_DMA_BUFFER);
 800b2aa:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <IBUS_init+0x48>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	6818      	ldr	r0, [r3, #0]
 800b2b0:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <IBUS_init+0x48>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	2214      	movs	r2, #20
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	f7fe ffdf 	bl	800a27c <HAL_UART_Receive_DMA>
	ibus->index_write = 1 ;
 800b2be:	4b04      	ldr	r3, [pc, #16]	; (800b2d0 <IBUS_init+0x48>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	761a      	strb	r2, [r3, #24]
}
 800b2c6:	bf00      	nop
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	200017e0 	.word	0x200017e0

0800b2d4 <IBUS_RxCplt>:

void IBUS_RxCplt(UART_HandleTypeDef * huart){
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800b2dc:	4b08      	ldr	r3, [pc, #32]	; (800b300 <IBUS_RxCplt+0x2c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d106      	bne.n	800b2f6 <IBUS_RxCplt+0x22>
		rx_cplt_mode = MODE_CPLT_FULL;
 800b2e8:	4b06      	ldr	r3, [pc, #24]	; (800b304 <IBUS_RxCplt+0x30>)
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800b2ee:	4b04      	ldr	r3, [pc, #16]	; (800b300 <IBUS_RxCplt+0x2c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f4:	4798      	blx	r3
	}
}
 800b2f6:	bf00      	nop
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	200017e0 	.word	0x200017e0
 800b304:	200017dc 	.word	0x200017dc

0800b308 <IBUS_RxHalfCplt>:
void IBUS_RxHalfCplt(UART_HandleTypeDef * huart){
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800b310:	4b08      	ldr	r3, [pc, #32]	; (800b334 <IBUS_RxHalfCplt+0x2c>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d106      	bne.n	800b32a <IBUS_RxHalfCplt+0x22>
		rx_cplt_mode = MODE_CPLT_HALF ;
 800b31c:	4b06      	ldr	r3, [pc, #24]	; (800b338 <IBUS_RxHalfCplt+0x30>)
 800b31e:	2200      	movs	r2, #0
 800b320:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800b322:	4b04      	ldr	r3, [pc, #16]	; (800b334 <IBUS_RxHalfCplt+0x2c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b328:	4798      	blx	r3
	}
}
 800b32a:	bf00      	nop
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	200017e0 	.word	0x200017e0
 800b338:	200017dc 	.word	0x200017dc

0800b33c <IBUS_Channel_Update>:

bool_e IBUS_Channel_Update(void){
 800b33c:	b5b0      	push	{r4, r5, r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af00      	add	r7, sp, #0

	bool_e to_return = FALSE ;
 800b342:	2300      	movs	r3, #0
 800b344:	61fb      	str	r3, [r7, #28]

	if(rx_cplt_mode == MODE_CPLT_HALF)
 800b346:	4ba0      	ldr	r3, [pc, #640]	; (800b5c8 <IBUS_Channel_Update+0x28c>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f040 80ba 	bne.w	800b4c4 <IBUS_Channel_Update+0x188>
	{
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800b350:	2300      	movs	r3, #0
 800b352:	76fb      	strb	r3, [r7, #27]
 800b354:	e0b1      	b.n	800b4ba <IBUS_Channel_Update+0x17e>
			switch(ibus->state){
 800b356:	4b9d      	ldr	r3, [pc, #628]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d01b      	beq.n	800b39a <IBUS_Channel_Update+0x5e>
 800b362:	2b02      	cmp	r3, #2
 800b364:	d041      	beq.n	800b3ea <IBUS_Channel_Update+0xae>
 800b366:	2b00      	cmp	r3, #0
 800b368:	f040 80a4 	bne.w	800b4b4 <IBUS_Channel_Update+0x178>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800b36c:	4b97      	ldr	r3, [pc, #604]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	7efb      	ldrb	r3, [r7, #27]
 800b372:	4413      	add	r3, r2
 800b374:	791b      	ldrb	r3, [r3, #4]
 800b376:	2b20      	cmp	r3, #32
 800b378:	f040 8097 	bne.w	800b4aa <IBUS_Channel_Update+0x16e>
						ibus->state = STATE_IBUS_COMMAND ;
 800b37c:	4b93      	ldr	r3, [pc, #588]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2201      	movs	r2, #1
 800b382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800b386:	4b91      	ldr	r3, [pc, #580]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b388:	6819      	ldr	r1, [r3, #0]
 800b38a:	7efa      	ldrb	r2, [r7, #27]
 800b38c:	4b8f      	ldr	r3, [pc, #572]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	440a      	add	r2, r1
 800b392:	7912      	ldrb	r2, [r2, #4]
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800b398:	e087      	b.n	800b4aa <IBUS_Channel_Update+0x16e>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800b39a:	4b8c      	ldr	r3, [pc, #560]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	7efb      	ldrb	r3, [r7, #27]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	791b      	ldrb	r3, [r3, #4]
 800b3a4:	2b40      	cmp	r3, #64	; 0x40
 800b3a6:	d113      	bne.n	800b3d0 <IBUS_Channel_Update+0x94>
						ibus->state = STATE_IBUS_CHANNELS ;
 800b3a8:	4b88      	ldr	r3, [pc, #544]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2202      	movs	r2, #2
 800b3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800b3b2:	4b86      	ldr	r3, [pc, #536]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b3b4:	6819      	ldr	r1, [r3, #0]
 800b3b6:	7efa      	ldrb	r2, [r7, #27]
 800b3b8:	4b84      	ldr	r3, [pc, #528]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	440a      	add	r2, r1
 800b3be:	7912      	ldrb	r2, [r2, #4]
 800b3c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800b3c4:	4b81      	ldr	r3, [pc, #516]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800b3ce:	e06e      	b.n	800b4ae <IBUS_Channel_Update+0x172>
					else if(ibus->dma_buffer[c] != 0x20)
 800b3d0:	4b7e      	ldr	r3, [pc, #504]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	7efb      	ldrb	r3, [r7, #27]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	791b      	ldrb	r3, [r3, #4]
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	d067      	beq.n	800b4ae <IBUS_Channel_Update+0x172>
						ibus->state = STATE_IBUS_LENGTH ;
 800b3de:	4b7b      	ldr	r3, [pc, #492]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800b3e8:	e061      	b.n	800b4ae <IBUS_Channel_Update+0x172>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800b3ea:	4b78      	ldr	r3, [pc, #480]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b3ec:	681c      	ldr	r4, [r3, #0]
 800b3ee:	7ef8      	ldrb	r0, [r7, #27]
 800b3f0:	4b76      	ldr	r3, [pc, #472]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b3f2:	6819      	ldr	r1, [r3, #0]
 800b3f4:	4b75      	ldr	r3, [pc, #468]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800b3fc:	1c55      	adds	r5, r2, #1
 800b3fe:	b2ad      	uxth	r5, r5
 800b400:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800b404:	4615      	mov	r5, r2
 800b406:	1823      	adds	r3, r4, r0
 800b408:	791a      	ldrb	r2, [r3, #4]
 800b40a:	194b      	adds	r3, r1, r5
 800b40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800b410:	4b6e      	ldr	r3, [pc, #440]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b418:	2b20      	cmp	r3, #32
 800b41a:	d14a      	bne.n	800b4b2 <IBUS_Channel_Update+0x176>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800b41c:	4b6b      	ldr	r3, [pc, #428]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b424:	461a      	mov	r2, r3
 800b426:	4b69      	ldr	r3, [pc, #420]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b42e:	021b      	lsls	r3, r3, #8
 800b430:	4313      	orrs	r3, r2
 800b432:	607b      	str	r3, [r7, #4]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800b434:	4b65      	ldr	r3, [pc, #404]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	333d      	adds	r3, #61	; 0x3d
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff ff06 	bl	800b24c <check_sum_f>
 800b440:	4603      	mov	r3, r0
 800b442:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800b446:	33ff      	adds	r3, #255	; 0xff
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d127      	bne.n	800b49e <IBUS_Channel_Update+0x162>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800b44e:	2300      	movs	r3, #0
 800b450:	617b      	str	r3, [r7, #20]
 800b452:	e01f      	b.n	800b494 <IBUS_Channel_Update+0x158>
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800b454:	4b5d      	ldr	r3, [pc, #372]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	3302      	adds	r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b462:	b21a      	sxth	r2, r3
 800b464:	4b59      	ldr	r3, [pc, #356]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b466:	6819      	ldr	r1, [r3, #0]
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	3303      	adds	r3, #3
 800b46c:	440b      	add	r3, r1
 800b46e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b472:	021b      	lsls	r3, r3, #8
 800b474:	b21b      	sxth	r3, r3
 800b476:	4313      	orrs	r3, r2
 800b478:	b219      	sxth	r1, r3
 800b47a:	4b54      	ldr	r3, [pc, #336]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	085b      	lsrs	r3, r3, #1
 800b482:	b289      	uxth	r1, r1
 800b484:	330c      	adds	r3, #12
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	4413      	add	r3, r2
 800b48a:	460a      	mov	r2, r1
 800b48c:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	3302      	adds	r3, #2
 800b492:	617b      	str	r3, [r7, #20]
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	2b1b      	cmp	r3, #27
 800b498:	d9dc      	bls.n	800b454 <IBUS_Channel_Update+0x118>
							to_return = TRUE;
 800b49a:	2301      	movs	r3, #1
 800b49c:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800b49e:	4b4b      	ldr	r3, [pc, #300]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800b4a8:	e003      	b.n	800b4b2 <IBUS_Channel_Update+0x176>
					break;
 800b4aa:	bf00      	nop
 800b4ac:	e002      	b.n	800b4b4 <IBUS_Channel_Update+0x178>
					break ;
 800b4ae:	bf00      	nop
 800b4b0:	e000      	b.n	800b4b4 <IBUS_Channel_Update+0x178>
					break;
 800b4b2:	bf00      	nop
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800b4b4:	7efb      	ldrb	r3, [r7, #27]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	76fb      	strb	r3, [r7, #27]
 800b4ba:	7efb      	ldrb	r3, [r7, #27]
 800b4bc:	2b09      	cmp	r3, #9
 800b4be:	f67f af4a 	bls.w	800b356 <IBUS_Channel_Update+0x1a>
 800b4c2:	e0bc      	b.n	800b63e <IBUS_Channel_Update+0x302>
			}
		}
	}
	else
	{
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800b4c4:	230a      	movs	r3, #10
 800b4c6:	74fb      	strb	r3, [r7, #19]
 800b4c8:	e0b5      	b.n	800b636 <IBUS_Channel_Update+0x2fa>
			switch(ibus->state){
 800b4ca:	4b40      	ldr	r3, [pc, #256]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d01b      	beq.n	800b50e <IBUS_Channel_Update+0x1d2>
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d041      	beq.n	800b55e <IBUS_Channel_Update+0x222>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f040 80a8 	bne.w	800b630 <IBUS_Channel_Update+0x2f4>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800b4e0:	4b3a      	ldr	r3, [pc, #232]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	7cfb      	ldrb	r3, [r7, #19]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	791b      	ldrb	r3, [r3, #4]
 800b4ea:	2b20      	cmp	r3, #32
 800b4ec:	f040 809b 	bne.w	800b626 <IBUS_Channel_Update+0x2ea>
						ibus->state = STATE_IBUS_COMMAND ;
 800b4f0:	4b36      	ldr	r3, [pc, #216]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800b4fa:	4b34      	ldr	r3, [pc, #208]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b4fc:	6819      	ldr	r1, [r3, #0]
 800b4fe:	7cfa      	ldrb	r2, [r7, #19]
 800b500:	4b32      	ldr	r3, [pc, #200]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	440a      	add	r2, r1
 800b506:	7912      	ldrb	r2, [r2, #4]
 800b508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800b50c:	e08b      	b.n	800b626 <IBUS_Channel_Update+0x2ea>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800b50e:	4b2f      	ldr	r3, [pc, #188]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	7cfb      	ldrb	r3, [r7, #19]
 800b514:	4413      	add	r3, r2
 800b516:	791b      	ldrb	r3, [r3, #4]
 800b518:	2b40      	cmp	r3, #64	; 0x40
 800b51a:	d113      	bne.n	800b544 <IBUS_Channel_Update+0x208>
						ibus->state = STATE_IBUS_CHANNELS ;
 800b51c:	4b2b      	ldr	r3, [pc, #172]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2202      	movs	r2, #2
 800b522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800b526:	4b29      	ldr	r3, [pc, #164]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b528:	6819      	ldr	r1, [r3, #0]
 800b52a:	7cfa      	ldrb	r2, [r7, #19]
 800b52c:	4b27      	ldr	r3, [pc, #156]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	440a      	add	r2, r1
 800b532:	7912      	ldrb	r2, [r2, #4]
 800b534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800b538:	4b24      	ldr	r3, [pc, #144]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2202      	movs	r2, #2
 800b53e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800b542:	e072      	b.n	800b62a <IBUS_Channel_Update+0x2ee>
					else if(ibus->dma_buffer[c] != 0x20)
 800b544:	4b21      	ldr	r3, [pc, #132]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	7cfb      	ldrb	r3, [r7, #19]
 800b54a:	4413      	add	r3, r2
 800b54c:	791b      	ldrb	r3, [r3, #4]
 800b54e:	2b20      	cmp	r3, #32
 800b550:	d06b      	beq.n	800b62a <IBUS_Channel_Update+0x2ee>
						ibus->state = STATE_IBUS_LENGTH ;
 800b552:	4b1e      	ldr	r3, [pc, #120]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800b55c:	e065      	b.n	800b62a <IBUS_Channel_Update+0x2ee>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800b55e:	4b1b      	ldr	r3, [pc, #108]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b560:	681c      	ldr	r4, [r3, #0]
 800b562:	7cf8      	ldrb	r0, [r7, #19]
 800b564:	4b19      	ldr	r3, [pc, #100]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b566:	6819      	ldr	r1, [r3, #0]
 800b568:	4b18      	ldr	r3, [pc, #96]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800b570:	1c55      	adds	r5, r2, #1
 800b572:	b2ad      	uxth	r5, r5
 800b574:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800b578:	4615      	mov	r5, r2
 800b57a:	1823      	adds	r3, r4, r0
 800b57c:	791a      	ldrb	r2, [r3, #4]
 800b57e:	194b      	adds	r3, r1, r5
 800b580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800b584:	4b11      	ldr	r3, [pc, #68]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b58c:	2b20      	cmp	r3, #32
 800b58e:	d14e      	bne.n	800b62e <IBUS_Channel_Update+0x2f2>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800b590:	4b0e      	ldr	r3, [pc, #56]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b598:	461a      	mov	r2, r3
 800b59a:	4b0c      	ldr	r3, [pc, #48]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b5a2:	021b      	lsls	r3, r3, #8
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	60bb      	str	r3, [r7, #8]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800b5a8:	4b08      	ldr	r3, [pc, #32]	; (800b5cc <IBUS_Channel_Update+0x290>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	333d      	adds	r3, #61	; 0x3d
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7ff fe4c 	bl	800b24c <check_sum_f>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800b5ba:	33ff      	adds	r3, #255	; 0xff
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d12b      	bne.n	800b61a <IBUS_Channel_Update+0x2de>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	60fb      	str	r3, [r7, #12]
 800b5c6:	e023      	b.n	800b610 <IBUS_Channel_Update+0x2d4>
 800b5c8:	200017dc 	.word	0x200017dc
 800b5cc:	200017e0 	.word	0x200017e0
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800b5d0:	4b1d      	ldr	r3, [pc, #116]	; (800b648 <IBUS_Channel_Update+0x30c>)
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5de:	b21a      	sxth	r2, r3
 800b5e0:	4b19      	ldr	r3, [pc, #100]	; (800b648 <IBUS_Channel_Update+0x30c>)
 800b5e2:	6819      	ldr	r1, [r3, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	3303      	adds	r3, #3
 800b5e8:	440b      	add	r3, r1
 800b5ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5ee:	021b      	lsls	r3, r3, #8
 800b5f0:	b21b      	sxth	r3, r3
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	b219      	sxth	r1, r3
 800b5f6:	4b14      	ldr	r3, [pc, #80]	; (800b648 <IBUS_Channel_Update+0x30c>)
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	085b      	lsrs	r3, r3, #1
 800b5fe:	b289      	uxth	r1, r1
 800b600:	330c      	adds	r3, #12
 800b602:	005b      	lsls	r3, r3, #1
 800b604:	4413      	add	r3, r2
 800b606:	460a      	mov	r2, r1
 800b608:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	3302      	adds	r3, #2
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2b1b      	cmp	r3, #27
 800b614:	d9dc      	bls.n	800b5d0 <IBUS_Channel_Update+0x294>
							to_return = TRUE;
 800b616:	2301      	movs	r3, #1
 800b618:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800b61a:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <IBUS_Channel_Update+0x30c>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800b624:	e003      	b.n	800b62e <IBUS_Channel_Update+0x2f2>
					break;
 800b626:	bf00      	nop
 800b628:	e002      	b.n	800b630 <IBUS_Channel_Update+0x2f4>
					break ;
 800b62a:	bf00      	nop
 800b62c:	e000      	b.n	800b630 <IBUS_Channel_Update+0x2f4>
					break;
 800b62e:	bf00      	nop
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800b630:	7cfb      	ldrb	r3, [r7, #19]
 800b632:	3301      	adds	r3, #1
 800b634:	74fb      	strb	r3, [r7, #19]
 800b636:	7cfb      	ldrb	r3, [r7, #19]
 800b638:	2b13      	cmp	r3, #19
 800b63a:	f67f af46 	bls.w	800b4ca <IBUS_Channel_Update+0x18e>
		}
	}



	return to_return ;
 800b63e:	69fb      	ldr	r3, [r7, #28]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3720      	adds	r7, #32
 800b644:	46bd      	mov	sp, r7
 800b646:	bdb0      	pop	{r4, r5, r7, pc}
 800b648:	200017e0 	.word	0x200017e0

0800b64c <MOTORS_Init>:
 */

#include "../Inc/Motors.h"


void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, uint16_t * duty, bool_e start){
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	603b      	str	r3, [r7, #0]
	motors->htim = htim ;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	601a      	str	r2, [r3, #0]
	motors->duty = duty;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	609a      	str	r2, [r3, #8]
	if(start){
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d022      	beq.n	800b6b2 <MOTORS_Init+0x66>
		motors->state = MOTORS_STATE_RUNNING ;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2201      	movs	r2, #1
 800b670:	711a      	strb	r2, [r3, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 800b672:	2100      	movs	r1, #0
 800b674:	68b8      	ldr	r0, [r7, #8]
 800b676:	f7fd fd21 	bl	80090bc <HAL_TIM_PWM_Start>
 800b67a:	4603      	mov	r3, r0
 800b67c:	461a      	mov	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 800b682:	2104      	movs	r1, #4
 800b684:	68b8      	ldr	r0, [r7, #8]
 800b686:	f7fd fd19 	bl	80090bc <HAL_TIM_PWM_Start>
 800b68a:	4603      	mov	r3, r0
 800b68c:	461a      	mov	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 800b692:	2108      	movs	r1, #8
 800b694:	68b8      	ldr	r0, [r7, #8]
 800b696:	f7fd fd11 	bl	80090bc <HAL_TIM_PWM_Start>
 800b69a:	4603      	mov	r3, r0
 800b69c:	461a      	mov	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 800b6a2:	210c      	movs	r1, #12
 800b6a4:	68b8      	ldr	r0, [r7, #8]
 800b6a6:	f7fd fd09 	bl	80090bc <HAL_TIM_PWM_Start>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	731a      	strb	r2, [r3, #12]
	}
}
 800b6b2:	bf00      	nop
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_2);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_3);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]

	motors->duty[0] = MIN(1000, motors->duty[0]);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	881a      	ldrh	r2, [r3, #0]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800b6d0:	bf28      	it	cs
 800b6d2:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800b6d6:	b292      	uxth	r2, r2
 800b6d8:	801a      	strh	r2, [r3, #0]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	3302      	adds	r3, #2
 800b6e0:	881a      	ldrh	r2, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	3302      	adds	r3, #2
 800b6e8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800b6ec:	bf28      	it	cs
 800b6ee:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800b6f2:	b292      	uxth	r2, r2
 800b6f4:	801a      	strh	r2, [r3, #0]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	881a      	ldrh	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	3304      	adds	r3, #4
 800b704:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800b708:	bf28      	it	cs
 800b70a:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800b70e:	b292      	uxth	r2, r2
 800b710:	801a      	strh	r2, [r3, #0]
	motors->duty[3] = MIN(1000, motors->duty[3]);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	3306      	adds	r3, #6
 800b718:	881a      	ldrh	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	3306      	adds	r3, #6
 800b720:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800b724:	bf28      	it	cs
 800b726:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800b72a:	b292      	uxth	r2, r2
 800b72c:	801a      	strh	r2, [r3, #0]


	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	635a      	str	r2, [r3, #52]	; 0x34
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	3302      	adds	r3, #2
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	639a      	str	r2, [r3, #56]	; 0x38
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	3304      	adds	r3, #4
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	63da      	str	r2, [r3, #60]	; 0x3c
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	3306      	adds	r3, #6
 800b76e:	881b      	ldrh	r3, [r3, #0]
 800b770:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <PID_compute>:
 */

#include "../Inc/Pid.h"

//renvoit la sortie du pid
float PID_compute(PID_t * pid, float consigne, float measurement){
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	ed87 0a02 	vstr	s0, [r7, #8]
 800b794:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calcul de l'erreur
	pid->error = measurement - consigne ;
 800b798:	ed97 7a01 	vldr	s14, [r7, #4]
 800b79c:	edd7 7a02 	vldr	s15, [r7, #8]
 800b7a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Calcul des P I D
	pid->P = pid->settings[PID_KP] * pid->error ;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	ed93 7a04 	vldr	s14, [r3, #16]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->I += pid->settings[PID_KI] * pid->error / pid->settings[PID_FREQUENCY];
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	ed93 7a02 	vldr	s14, [r3, #8]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	edd3 6a05 	vldr	s13, [r3, #20]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b7d2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	edd3 6a07 	vldr	s13, [r3, #28]
 800b7dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b7e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	edc3 7a02 	vstr	s15, [r3, #8]
	pid->D = pid->settings[PID_KD] * (measurement - pid->previous_measurement) * pid->settings[PID_FREQUENCY] ;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	ed93 7a06 	vldr	s14, [r3, #24]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b7f6:	edd7 6a01 	vldr	s13, [r7, #4]
 800b7fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b7fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	edd3 7a07 	vldr	s15, [r3, #28]
 800b808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	edc3 7a03 	vstr	s15, [r3, #12]

	//Filtrage
	pid->D = FILTER_process(&pid->d_filter, pid->D);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	edd3 7a03 	vldr	s15, [r3, #12]
 800b81e:	eeb0 0a67 	vmov.f32	s0, s15
 800b822:	4610      	mov	r0, r2
 800b824:	f7ff fcab 	bl	800b17e <FILTER_process>
 800b828:	eef0 7a40 	vmov.f32	s15, s0
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	edc3 7a03 	vstr	s15, [r3, #12]

	//On somme le tout
	pid->output = pid->P + pid->I + pid->D ;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	ed93 7a01 	vldr	s14, [r3, #4]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b83e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	edd3 7a03 	vldr	s15, [r3, #12]
 800b848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	edc3 7a00 	vstr	s15, [r3]

	//Check mid and max
	pid->output = MIN(pid->settings[PID_MAX_OUTPUT], pid->output);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	ed93 7a08 	vldr	s14, [r3, #32]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	edd3 7a00 	vldr	s15, [r3]
 800b85e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b866:	dd02      	ble.n	800b86e <PID_compute+0xe6>
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	e001      	b.n	800b872 <PID_compute+0xea>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	6013      	str	r3, [r2, #0]
	pid->output = MAX(-pid->settings[PID_MAX_OUTPUT], pid->output);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	edd3 7a08 	vldr	s15, [r3, #32]
 800b87c:	eeb1 7a67 	vneg.f32	s14, s15
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	edd3 7a00 	vldr	s15, [r3]
 800b886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b88e:	dd05      	ble.n	800b89c <PID_compute+0x114>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	edd3 7a08 	vldr	s15, [r3, #32]
 800b896:	eef1 7a67 	vneg.f32	s15, s15
 800b89a:	e002      	b.n	800b8a2 <PID_compute+0x11a>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	edd3 7a00 	vldr	s15, [r3]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	edc3 7a00 	vstr	s15, [r3]

	//Mise � jour des valeurs ant�rieures
	pid->previous_measurement = measurement ;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	629a      	str	r2, [r3, #40]	; 0x28
	return pid->output ;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	ee07 3a90 	vmov	s15, r3
}
 800b8b6:	eeb0 0a67 	vmov.f32	s0, s15
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <PID_init>:



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	603b      	str	r3, [r7, #0]
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	71fb      	strb	r3, [r7, #7]
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	75fb      	strb	r3, [r7, #23]
 800b8d4:	e00d      	b.n	800b8f2 <PID_init+0x32>
		pid->settings[s] = settings[s] ;
 800b8d6:	7dfb      	ldrb	r3, [r7, #23]
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	441a      	add	r2, r3
 800b8de:	7dfb      	ldrb	r3, [r7, #23]
 800b8e0:	6812      	ldr	r2, [r2, #0]
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	440b      	add	r3, r1
 800b8ea:	601a      	str	r2, [r3, #0]
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	75fb      	strb	r3, [r7, #23]
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	2b04      	cmp	r3, #4
 800b8f6:	d9ee      	bls.n	800b8d6 <PID_init+0x16>

	//Init values
	pid->P = 0 ;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f04f 0200 	mov.w	r2, #0
 800b8fe:	605a      	str	r2, [r3, #4]
	pid->I = 0 ;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f04f 0200 	mov.w	r2, #0
 800b906:	609a      	str	r2, [r3, #8]
	pid->D = 0 ;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f04f 0200 	mov.w	r2, #0
 800b90e:	60da      	str	r2, [r3, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	332c      	adds	r3, #44	; 0x2c
 800b914:	79fa      	ldrb	r2, [r7, #7]
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff fc0d 	bl	800b138 <FILTER_init>
}
 800b91e:	bf00      	nop
 800b920:	3718      	adds	r7, #24
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <__errno>:
 800b928:	4b01      	ldr	r3, [pc, #4]	; (800b930 <__errno+0x8>)
 800b92a:	6818      	ldr	r0, [r3, #0]
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	200013c4 	.word	0x200013c4

0800b934 <__libc_init_array>:
 800b934:	b570      	push	{r4, r5, r6, lr}
 800b936:	4e0d      	ldr	r6, [pc, #52]	; (800b96c <__libc_init_array+0x38>)
 800b938:	4c0d      	ldr	r4, [pc, #52]	; (800b970 <__libc_init_array+0x3c>)
 800b93a:	1ba4      	subs	r4, r4, r6
 800b93c:	10a4      	asrs	r4, r4, #2
 800b93e:	2500      	movs	r5, #0
 800b940:	42a5      	cmp	r5, r4
 800b942:	d109      	bne.n	800b958 <__libc_init_array+0x24>
 800b944:	4e0b      	ldr	r6, [pc, #44]	; (800b974 <__libc_init_array+0x40>)
 800b946:	4c0c      	ldr	r4, [pc, #48]	; (800b978 <__libc_init_array+0x44>)
 800b948:	f002 fe1a 	bl	800e580 <_init>
 800b94c:	1ba4      	subs	r4, r4, r6
 800b94e:	10a4      	asrs	r4, r4, #2
 800b950:	2500      	movs	r5, #0
 800b952:	42a5      	cmp	r5, r4
 800b954:	d105      	bne.n	800b962 <__libc_init_array+0x2e>
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b95c:	4798      	blx	r3
 800b95e:	3501      	adds	r5, #1
 800b960:	e7ee      	b.n	800b940 <__libc_init_array+0xc>
 800b962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b966:	4798      	blx	r3
 800b968:	3501      	adds	r5, #1
 800b96a:	e7f2      	b.n	800b952 <__libc_init_array+0x1e>
 800b96c:	0800e8a4 	.word	0x0800e8a4
 800b970:	0800e8a4 	.word	0x0800e8a4
 800b974:	0800e8a4 	.word	0x0800e8a4
 800b978:	0800e8a8 	.word	0x0800e8a8

0800b97c <memcpy>:
 800b97c:	b510      	push	{r4, lr}
 800b97e:	1e43      	subs	r3, r0, #1
 800b980:	440a      	add	r2, r1
 800b982:	4291      	cmp	r1, r2
 800b984:	d100      	bne.n	800b988 <memcpy+0xc>
 800b986:	bd10      	pop	{r4, pc}
 800b988:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b98c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b990:	e7f7      	b.n	800b982 <memcpy+0x6>

0800b992 <memmove>:
 800b992:	4288      	cmp	r0, r1
 800b994:	b510      	push	{r4, lr}
 800b996:	eb01 0302 	add.w	r3, r1, r2
 800b99a:	d807      	bhi.n	800b9ac <memmove+0x1a>
 800b99c:	1e42      	subs	r2, r0, #1
 800b99e:	4299      	cmp	r1, r3
 800b9a0:	d00a      	beq.n	800b9b8 <memmove+0x26>
 800b9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b9aa:	e7f8      	b.n	800b99e <memmove+0xc>
 800b9ac:	4283      	cmp	r3, r0
 800b9ae:	d9f5      	bls.n	800b99c <memmove+0xa>
 800b9b0:	1881      	adds	r1, r0, r2
 800b9b2:	1ad2      	subs	r2, r2, r3
 800b9b4:	42d3      	cmn	r3, r2
 800b9b6:	d100      	bne.n	800b9ba <memmove+0x28>
 800b9b8:	bd10      	pop	{r4, pc}
 800b9ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b9c2:	e7f7      	b.n	800b9b4 <memmove+0x22>

0800b9c4 <memset>:
 800b9c4:	4402      	add	r2, r0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d100      	bne.n	800b9ce <memset+0xa>
 800b9cc:	4770      	bx	lr
 800b9ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b9d2:	e7f9      	b.n	800b9c8 <memset+0x4>

0800b9d4 <__cvt>:
 800b9d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d8:	ec55 4b10 	vmov	r4, r5, d0
 800b9dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b9de:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b9e2:	2d00      	cmp	r5, #0
 800b9e4:	460e      	mov	r6, r1
 800b9e6:	4691      	mov	r9, r2
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	bfb8      	it	lt
 800b9ec:	4622      	movlt	r2, r4
 800b9ee:	462b      	mov	r3, r5
 800b9f0:	f027 0720 	bic.w	r7, r7, #32
 800b9f4:	bfbb      	ittet	lt
 800b9f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b9fa:	461d      	movlt	r5, r3
 800b9fc:	2300      	movge	r3, #0
 800b9fe:	232d      	movlt	r3, #45	; 0x2d
 800ba00:	bfb8      	it	lt
 800ba02:	4614      	movlt	r4, r2
 800ba04:	2f46      	cmp	r7, #70	; 0x46
 800ba06:	700b      	strb	r3, [r1, #0]
 800ba08:	d004      	beq.n	800ba14 <__cvt+0x40>
 800ba0a:	2f45      	cmp	r7, #69	; 0x45
 800ba0c:	d100      	bne.n	800ba10 <__cvt+0x3c>
 800ba0e:	3601      	adds	r6, #1
 800ba10:	2102      	movs	r1, #2
 800ba12:	e000      	b.n	800ba16 <__cvt+0x42>
 800ba14:	2103      	movs	r1, #3
 800ba16:	ab03      	add	r3, sp, #12
 800ba18:	9301      	str	r3, [sp, #4]
 800ba1a:	ab02      	add	r3, sp, #8
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	4632      	mov	r2, r6
 800ba20:	4653      	mov	r3, sl
 800ba22:	ec45 4b10 	vmov	d0, r4, r5
 800ba26:	f000 fea7 	bl	800c778 <_dtoa_r>
 800ba2a:	2f47      	cmp	r7, #71	; 0x47
 800ba2c:	4680      	mov	r8, r0
 800ba2e:	d102      	bne.n	800ba36 <__cvt+0x62>
 800ba30:	f019 0f01 	tst.w	r9, #1
 800ba34:	d026      	beq.n	800ba84 <__cvt+0xb0>
 800ba36:	2f46      	cmp	r7, #70	; 0x46
 800ba38:	eb08 0906 	add.w	r9, r8, r6
 800ba3c:	d111      	bne.n	800ba62 <__cvt+0x8e>
 800ba3e:	f898 3000 	ldrb.w	r3, [r8]
 800ba42:	2b30      	cmp	r3, #48	; 0x30
 800ba44:	d10a      	bne.n	800ba5c <__cvt+0x88>
 800ba46:	2200      	movs	r2, #0
 800ba48:	2300      	movs	r3, #0
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	f7f5 f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba52:	b918      	cbnz	r0, 800ba5c <__cvt+0x88>
 800ba54:	f1c6 0601 	rsb	r6, r6, #1
 800ba58:	f8ca 6000 	str.w	r6, [sl]
 800ba5c:	f8da 3000 	ldr.w	r3, [sl]
 800ba60:	4499      	add	r9, r3
 800ba62:	2200      	movs	r2, #0
 800ba64:	2300      	movs	r3, #0
 800ba66:	4620      	mov	r0, r4
 800ba68:	4629      	mov	r1, r5
 800ba6a:	f7f5 f82d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba6e:	b938      	cbnz	r0, 800ba80 <__cvt+0xac>
 800ba70:	2230      	movs	r2, #48	; 0x30
 800ba72:	9b03      	ldr	r3, [sp, #12]
 800ba74:	454b      	cmp	r3, r9
 800ba76:	d205      	bcs.n	800ba84 <__cvt+0xb0>
 800ba78:	1c59      	adds	r1, r3, #1
 800ba7a:	9103      	str	r1, [sp, #12]
 800ba7c:	701a      	strb	r2, [r3, #0]
 800ba7e:	e7f8      	b.n	800ba72 <__cvt+0x9e>
 800ba80:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba84:	9b03      	ldr	r3, [sp, #12]
 800ba86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba88:	eba3 0308 	sub.w	r3, r3, r8
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	b004      	add	sp, #16
 800ba92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ba96 <__exponent>:
 800ba96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba98:	2900      	cmp	r1, #0
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	bfba      	itte	lt
 800ba9e:	4249      	neglt	r1, r1
 800baa0:	232d      	movlt	r3, #45	; 0x2d
 800baa2:	232b      	movge	r3, #43	; 0x2b
 800baa4:	2909      	cmp	r1, #9
 800baa6:	f804 2b02 	strb.w	r2, [r4], #2
 800baaa:	7043      	strb	r3, [r0, #1]
 800baac:	dd20      	ble.n	800baf0 <__exponent+0x5a>
 800baae:	f10d 0307 	add.w	r3, sp, #7
 800bab2:	461f      	mov	r7, r3
 800bab4:	260a      	movs	r6, #10
 800bab6:	fb91 f5f6 	sdiv	r5, r1, r6
 800baba:	fb06 1115 	mls	r1, r6, r5, r1
 800babe:	3130      	adds	r1, #48	; 0x30
 800bac0:	2d09      	cmp	r5, #9
 800bac2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bac6:	f103 32ff 	add.w	r2, r3, #4294967295
 800baca:	4629      	mov	r1, r5
 800bacc:	dc09      	bgt.n	800bae2 <__exponent+0x4c>
 800bace:	3130      	adds	r1, #48	; 0x30
 800bad0:	3b02      	subs	r3, #2
 800bad2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bad6:	42bb      	cmp	r3, r7
 800bad8:	4622      	mov	r2, r4
 800bada:	d304      	bcc.n	800bae6 <__exponent+0x50>
 800badc:	1a10      	subs	r0, r2, r0
 800bade:	b003      	add	sp, #12
 800bae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bae2:	4613      	mov	r3, r2
 800bae4:	e7e7      	b.n	800bab6 <__exponent+0x20>
 800bae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baea:	f804 2b01 	strb.w	r2, [r4], #1
 800baee:	e7f2      	b.n	800bad6 <__exponent+0x40>
 800baf0:	2330      	movs	r3, #48	; 0x30
 800baf2:	4419      	add	r1, r3
 800baf4:	7083      	strb	r3, [r0, #2]
 800baf6:	1d02      	adds	r2, r0, #4
 800baf8:	70c1      	strb	r1, [r0, #3]
 800bafa:	e7ef      	b.n	800badc <__exponent+0x46>

0800bafc <_printf_float>:
 800bafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb00:	b08d      	sub	sp, #52	; 0x34
 800bb02:	460c      	mov	r4, r1
 800bb04:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bb08:	4616      	mov	r6, r2
 800bb0a:	461f      	mov	r7, r3
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	f001 fd65 	bl	800d5dc <_localeconv_r>
 800bb12:	6803      	ldr	r3, [r0, #0]
 800bb14:	9304      	str	r3, [sp, #16]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7f4 fb5a 	bl	80001d0 <strlen>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	930a      	str	r3, [sp, #40]	; 0x28
 800bb20:	f8d8 3000 	ldr.w	r3, [r8]
 800bb24:	9005      	str	r0, [sp, #20]
 800bb26:	3307      	adds	r3, #7
 800bb28:	f023 0307 	bic.w	r3, r3, #7
 800bb2c:	f103 0208 	add.w	r2, r3, #8
 800bb30:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bb34:	f8d4 b000 	ldr.w	fp, [r4]
 800bb38:	f8c8 2000 	str.w	r2, [r8]
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bb44:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bb48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb4c:	9307      	str	r3, [sp, #28]
 800bb4e:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb52:	f04f 32ff 	mov.w	r2, #4294967295
 800bb56:	4ba7      	ldr	r3, [pc, #668]	; (800bdf4 <_printf_float+0x2f8>)
 800bb58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb5c:	f7f4 ffe6 	bl	8000b2c <__aeabi_dcmpun>
 800bb60:	bb70      	cbnz	r0, 800bbc0 <_printf_float+0xc4>
 800bb62:	f04f 32ff 	mov.w	r2, #4294967295
 800bb66:	4ba3      	ldr	r3, [pc, #652]	; (800bdf4 <_printf_float+0x2f8>)
 800bb68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb6c:	f7f4 ffc0 	bl	8000af0 <__aeabi_dcmple>
 800bb70:	bb30      	cbnz	r0, 800bbc0 <_printf_float+0xc4>
 800bb72:	2200      	movs	r2, #0
 800bb74:	2300      	movs	r3, #0
 800bb76:	4640      	mov	r0, r8
 800bb78:	4649      	mov	r1, r9
 800bb7a:	f7f4 ffaf 	bl	8000adc <__aeabi_dcmplt>
 800bb7e:	b110      	cbz	r0, 800bb86 <_printf_float+0x8a>
 800bb80:	232d      	movs	r3, #45	; 0x2d
 800bb82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb86:	4a9c      	ldr	r2, [pc, #624]	; (800bdf8 <_printf_float+0x2fc>)
 800bb88:	4b9c      	ldr	r3, [pc, #624]	; (800bdfc <_printf_float+0x300>)
 800bb8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bb8e:	bf8c      	ite	hi
 800bb90:	4690      	movhi	r8, r2
 800bb92:	4698      	movls	r8, r3
 800bb94:	2303      	movs	r3, #3
 800bb96:	f02b 0204 	bic.w	r2, fp, #4
 800bb9a:	6123      	str	r3, [r4, #16]
 800bb9c:	6022      	str	r2, [r4, #0]
 800bb9e:	f04f 0900 	mov.w	r9, #0
 800bba2:	9700      	str	r7, [sp, #0]
 800bba4:	4633      	mov	r3, r6
 800bba6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bba8:	4621      	mov	r1, r4
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f000 f9e6 	bl	800bf7c <_printf_common>
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	f040 808d 	bne.w	800bcd0 <_printf_float+0x1d4>
 800bbb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbba:	b00d      	add	sp, #52	; 0x34
 800bbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc0:	4642      	mov	r2, r8
 800bbc2:	464b      	mov	r3, r9
 800bbc4:	4640      	mov	r0, r8
 800bbc6:	4649      	mov	r1, r9
 800bbc8:	f7f4 ffb0 	bl	8000b2c <__aeabi_dcmpun>
 800bbcc:	b110      	cbz	r0, 800bbd4 <_printf_float+0xd8>
 800bbce:	4a8c      	ldr	r2, [pc, #560]	; (800be00 <_printf_float+0x304>)
 800bbd0:	4b8c      	ldr	r3, [pc, #560]	; (800be04 <_printf_float+0x308>)
 800bbd2:	e7da      	b.n	800bb8a <_printf_float+0x8e>
 800bbd4:	6861      	ldr	r1, [r4, #4]
 800bbd6:	1c4b      	adds	r3, r1, #1
 800bbd8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bbdc:	a80a      	add	r0, sp, #40	; 0x28
 800bbde:	d13e      	bne.n	800bc5e <_printf_float+0x162>
 800bbe0:	2306      	movs	r3, #6
 800bbe2:	6063      	str	r3, [r4, #4]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bbea:	ab09      	add	r3, sp, #36	; 0x24
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	ec49 8b10 	vmov	d0, r8, r9
 800bbf2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bbf6:	6022      	str	r2, [r4, #0]
 800bbf8:	f8cd a004 	str.w	sl, [sp, #4]
 800bbfc:	6861      	ldr	r1, [r4, #4]
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f7ff fee8 	bl	800b9d4 <__cvt>
 800bc04:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bc08:	2b47      	cmp	r3, #71	; 0x47
 800bc0a:	4680      	mov	r8, r0
 800bc0c:	d109      	bne.n	800bc22 <_printf_float+0x126>
 800bc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc10:	1cd8      	adds	r0, r3, #3
 800bc12:	db02      	blt.n	800bc1a <_printf_float+0x11e>
 800bc14:	6862      	ldr	r2, [r4, #4]
 800bc16:	4293      	cmp	r3, r2
 800bc18:	dd47      	ble.n	800bcaa <_printf_float+0x1ae>
 800bc1a:	f1aa 0a02 	sub.w	sl, sl, #2
 800bc1e:	fa5f fa8a 	uxtb.w	sl, sl
 800bc22:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bc26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc28:	d824      	bhi.n	800bc74 <_printf_float+0x178>
 800bc2a:	3901      	subs	r1, #1
 800bc2c:	4652      	mov	r2, sl
 800bc2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bc32:	9109      	str	r1, [sp, #36]	; 0x24
 800bc34:	f7ff ff2f 	bl	800ba96 <__exponent>
 800bc38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc3a:	1813      	adds	r3, r2, r0
 800bc3c:	2a01      	cmp	r2, #1
 800bc3e:	4681      	mov	r9, r0
 800bc40:	6123      	str	r3, [r4, #16]
 800bc42:	dc02      	bgt.n	800bc4a <_printf_float+0x14e>
 800bc44:	6822      	ldr	r2, [r4, #0]
 800bc46:	07d1      	lsls	r1, r2, #31
 800bc48:	d501      	bpl.n	800bc4e <_printf_float+0x152>
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	6123      	str	r3, [r4, #16]
 800bc4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0a5      	beq.n	800bba2 <_printf_float+0xa6>
 800bc56:	232d      	movs	r3, #45	; 0x2d
 800bc58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc5c:	e7a1      	b.n	800bba2 <_printf_float+0xa6>
 800bc5e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bc62:	f000 8177 	beq.w	800bf54 <_printf_float+0x458>
 800bc66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bc6a:	d1bb      	bne.n	800bbe4 <_printf_float+0xe8>
 800bc6c:	2900      	cmp	r1, #0
 800bc6e:	d1b9      	bne.n	800bbe4 <_printf_float+0xe8>
 800bc70:	2301      	movs	r3, #1
 800bc72:	e7b6      	b.n	800bbe2 <_printf_float+0xe6>
 800bc74:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bc78:	d119      	bne.n	800bcae <_printf_float+0x1b2>
 800bc7a:	2900      	cmp	r1, #0
 800bc7c:	6863      	ldr	r3, [r4, #4]
 800bc7e:	dd0c      	ble.n	800bc9a <_printf_float+0x19e>
 800bc80:	6121      	str	r1, [r4, #16]
 800bc82:	b913      	cbnz	r3, 800bc8a <_printf_float+0x18e>
 800bc84:	6822      	ldr	r2, [r4, #0]
 800bc86:	07d2      	lsls	r2, r2, #31
 800bc88:	d502      	bpl.n	800bc90 <_printf_float+0x194>
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	440b      	add	r3, r1
 800bc8e:	6123      	str	r3, [r4, #16]
 800bc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc92:	65a3      	str	r3, [r4, #88]	; 0x58
 800bc94:	f04f 0900 	mov.w	r9, #0
 800bc98:	e7d9      	b.n	800bc4e <_printf_float+0x152>
 800bc9a:	b913      	cbnz	r3, 800bca2 <_printf_float+0x1a6>
 800bc9c:	6822      	ldr	r2, [r4, #0]
 800bc9e:	07d0      	lsls	r0, r2, #31
 800bca0:	d501      	bpl.n	800bca6 <_printf_float+0x1aa>
 800bca2:	3302      	adds	r3, #2
 800bca4:	e7f3      	b.n	800bc8e <_printf_float+0x192>
 800bca6:	2301      	movs	r3, #1
 800bca8:	e7f1      	b.n	800bc8e <_printf_float+0x192>
 800bcaa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bcae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	db05      	blt.n	800bcc2 <_printf_float+0x1c6>
 800bcb6:	6822      	ldr	r2, [r4, #0]
 800bcb8:	6123      	str	r3, [r4, #16]
 800bcba:	07d1      	lsls	r1, r2, #31
 800bcbc:	d5e8      	bpl.n	800bc90 <_printf_float+0x194>
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	e7e5      	b.n	800bc8e <_printf_float+0x192>
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	bfd4      	ite	le
 800bcc6:	f1c3 0302 	rsble	r3, r3, #2
 800bcca:	2301      	movgt	r3, #1
 800bccc:	4413      	add	r3, r2
 800bcce:	e7de      	b.n	800bc8e <_printf_float+0x192>
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	055a      	lsls	r2, r3, #21
 800bcd4:	d407      	bmi.n	800bce6 <_printf_float+0x1ea>
 800bcd6:	6923      	ldr	r3, [r4, #16]
 800bcd8:	4642      	mov	r2, r8
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b8      	blx	r7
 800bce0:	3001      	adds	r0, #1
 800bce2:	d12b      	bne.n	800bd3c <_printf_float+0x240>
 800bce4:	e767      	b.n	800bbb6 <_printf_float+0xba>
 800bce6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bcea:	f240 80dc 	bls.w	800bea6 <_printf_float+0x3aa>
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bcf6:	f7f4 fee7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d033      	beq.n	800bd66 <_printf_float+0x26a>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	4a41      	ldr	r2, [pc, #260]	; (800be08 <_printf_float+0x30c>)
 800bd02:	4631      	mov	r1, r6
 800bd04:	4628      	mov	r0, r5
 800bd06:	47b8      	blx	r7
 800bd08:	3001      	adds	r0, #1
 800bd0a:	f43f af54 	beq.w	800bbb6 <_printf_float+0xba>
 800bd0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd12:	429a      	cmp	r2, r3
 800bd14:	db02      	blt.n	800bd1c <_printf_float+0x220>
 800bd16:	6823      	ldr	r3, [r4, #0]
 800bd18:	07d8      	lsls	r0, r3, #31
 800bd1a:	d50f      	bpl.n	800bd3c <_printf_float+0x240>
 800bd1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd20:	4631      	mov	r1, r6
 800bd22:	4628      	mov	r0, r5
 800bd24:	47b8      	blx	r7
 800bd26:	3001      	adds	r0, #1
 800bd28:	f43f af45 	beq.w	800bbb6 <_printf_float+0xba>
 800bd2c:	f04f 0800 	mov.w	r8, #0
 800bd30:	f104 091a 	add.w	r9, r4, #26
 800bd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd36:	3b01      	subs	r3, #1
 800bd38:	4543      	cmp	r3, r8
 800bd3a:	dc09      	bgt.n	800bd50 <_printf_float+0x254>
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	079b      	lsls	r3, r3, #30
 800bd40:	f100 8103 	bmi.w	800bf4a <_printf_float+0x44e>
 800bd44:	68e0      	ldr	r0, [r4, #12]
 800bd46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd48:	4298      	cmp	r0, r3
 800bd4a:	bfb8      	it	lt
 800bd4c:	4618      	movlt	r0, r3
 800bd4e:	e734      	b.n	800bbba <_printf_float+0xbe>
 800bd50:	2301      	movs	r3, #1
 800bd52:	464a      	mov	r2, r9
 800bd54:	4631      	mov	r1, r6
 800bd56:	4628      	mov	r0, r5
 800bd58:	47b8      	blx	r7
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	f43f af2b 	beq.w	800bbb6 <_printf_float+0xba>
 800bd60:	f108 0801 	add.w	r8, r8, #1
 800bd64:	e7e6      	b.n	800bd34 <_printf_float+0x238>
 800bd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	dc2b      	bgt.n	800bdc4 <_printf_float+0x2c8>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	4a26      	ldr	r2, [pc, #152]	; (800be08 <_printf_float+0x30c>)
 800bd70:	4631      	mov	r1, r6
 800bd72:	4628      	mov	r0, r5
 800bd74:	47b8      	blx	r7
 800bd76:	3001      	adds	r0, #1
 800bd78:	f43f af1d 	beq.w	800bbb6 <_printf_float+0xba>
 800bd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd7e:	b923      	cbnz	r3, 800bd8a <_printf_float+0x28e>
 800bd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd82:	b913      	cbnz	r3, 800bd8a <_printf_float+0x28e>
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	07d9      	lsls	r1, r3, #31
 800bd88:	d5d8      	bpl.n	800bd3c <_printf_float+0x240>
 800bd8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd8e:	4631      	mov	r1, r6
 800bd90:	4628      	mov	r0, r5
 800bd92:	47b8      	blx	r7
 800bd94:	3001      	adds	r0, #1
 800bd96:	f43f af0e 	beq.w	800bbb6 <_printf_float+0xba>
 800bd9a:	f04f 0900 	mov.w	r9, #0
 800bd9e:	f104 0a1a 	add.w	sl, r4, #26
 800bda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda4:	425b      	negs	r3, r3
 800bda6:	454b      	cmp	r3, r9
 800bda8:	dc01      	bgt.n	800bdae <_printf_float+0x2b2>
 800bdaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdac:	e794      	b.n	800bcd8 <_printf_float+0x1dc>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	4652      	mov	r2, sl
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	47b8      	blx	r7
 800bdb8:	3001      	adds	r0, #1
 800bdba:	f43f aefc 	beq.w	800bbb6 <_printf_float+0xba>
 800bdbe:	f109 0901 	add.w	r9, r9, #1
 800bdc2:	e7ee      	b.n	800bda2 <_printf_float+0x2a6>
 800bdc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	bfa8      	it	ge
 800bdcc:	461a      	movge	r2, r3
 800bdce:	2a00      	cmp	r2, #0
 800bdd0:	4691      	mov	r9, r2
 800bdd2:	dd07      	ble.n	800bde4 <_printf_float+0x2e8>
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	4631      	mov	r1, r6
 800bdd8:	4642      	mov	r2, r8
 800bdda:	4628      	mov	r0, r5
 800bddc:	47b8      	blx	r7
 800bdde:	3001      	adds	r0, #1
 800bde0:	f43f aee9 	beq.w	800bbb6 <_printf_float+0xba>
 800bde4:	f104 031a 	add.w	r3, r4, #26
 800bde8:	f04f 0b00 	mov.w	fp, #0
 800bdec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdf0:	9306      	str	r3, [sp, #24]
 800bdf2:	e015      	b.n	800be20 <_printf_float+0x324>
 800bdf4:	7fefffff 	.word	0x7fefffff
 800bdf8:	0800e892 	.word	0x0800e892
 800bdfc:	0800e5d8 	.word	0x0800e5d8
 800be00:	0800e5e0 	.word	0x0800e5e0
 800be04:	0800e5dc 	.word	0x0800e5dc
 800be08:	0800e5e4 	.word	0x0800e5e4
 800be0c:	2301      	movs	r3, #1
 800be0e:	9a06      	ldr	r2, [sp, #24]
 800be10:	4631      	mov	r1, r6
 800be12:	4628      	mov	r0, r5
 800be14:	47b8      	blx	r7
 800be16:	3001      	adds	r0, #1
 800be18:	f43f aecd 	beq.w	800bbb6 <_printf_float+0xba>
 800be1c:	f10b 0b01 	add.w	fp, fp, #1
 800be20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800be24:	ebaa 0309 	sub.w	r3, sl, r9
 800be28:	455b      	cmp	r3, fp
 800be2a:	dcef      	bgt.n	800be0c <_printf_float+0x310>
 800be2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be30:	429a      	cmp	r2, r3
 800be32:	44d0      	add	r8, sl
 800be34:	db15      	blt.n	800be62 <_printf_float+0x366>
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	07da      	lsls	r2, r3, #31
 800be3a:	d412      	bmi.n	800be62 <_printf_float+0x366>
 800be3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be40:	eba3 020a 	sub.w	r2, r3, sl
 800be44:	eba3 0a01 	sub.w	sl, r3, r1
 800be48:	4592      	cmp	sl, r2
 800be4a:	bfa8      	it	ge
 800be4c:	4692      	movge	sl, r2
 800be4e:	f1ba 0f00 	cmp.w	sl, #0
 800be52:	dc0e      	bgt.n	800be72 <_printf_float+0x376>
 800be54:	f04f 0800 	mov.w	r8, #0
 800be58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be5c:	f104 091a 	add.w	r9, r4, #26
 800be60:	e019      	b.n	800be96 <_printf_float+0x39a>
 800be62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be66:	4631      	mov	r1, r6
 800be68:	4628      	mov	r0, r5
 800be6a:	47b8      	blx	r7
 800be6c:	3001      	adds	r0, #1
 800be6e:	d1e5      	bne.n	800be3c <_printf_float+0x340>
 800be70:	e6a1      	b.n	800bbb6 <_printf_float+0xba>
 800be72:	4653      	mov	r3, sl
 800be74:	4642      	mov	r2, r8
 800be76:	4631      	mov	r1, r6
 800be78:	4628      	mov	r0, r5
 800be7a:	47b8      	blx	r7
 800be7c:	3001      	adds	r0, #1
 800be7e:	d1e9      	bne.n	800be54 <_printf_float+0x358>
 800be80:	e699      	b.n	800bbb6 <_printf_float+0xba>
 800be82:	2301      	movs	r3, #1
 800be84:	464a      	mov	r2, r9
 800be86:	4631      	mov	r1, r6
 800be88:	4628      	mov	r0, r5
 800be8a:	47b8      	blx	r7
 800be8c:	3001      	adds	r0, #1
 800be8e:	f43f ae92 	beq.w	800bbb6 <_printf_float+0xba>
 800be92:	f108 0801 	add.w	r8, r8, #1
 800be96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be9a:	1a9b      	subs	r3, r3, r2
 800be9c:	eba3 030a 	sub.w	r3, r3, sl
 800bea0:	4543      	cmp	r3, r8
 800bea2:	dcee      	bgt.n	800be82 <_printf_float+0x386>
 800bea4:	e74a      	b.n	800bd3c <_printf_float+0x240>
 800bea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bea8:	2a01      	cmp	r2, #1
 800beaa:	dc01      	bgt.n	800beb0 <_printf_float+0x3b4>
 800beac:	07db      	lsls	r3, r3, #31
 800beae:	d53a      	bpl.n	800bf26 <_printf_float+0x42a>
 800beb0:	2301      	movs	r3, #1
 800beb2:	4642      	mov	r2, r8
 800beb4:	4631      	mov	r1, r6
 800beb6:	4628      	mov	r0, r5
 800beb8:	47b8      	blx	r7
 800beba:	3001      	adds	r0, #1
 800bebc:	f43f ae7b 	beq.w	800bbb6 <_printf_float+0xba>
 800bec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bec4:	4631      	mov	r1, r6
 800bec6:	4628      	mov	r0, r5
 800bec8:	47b8      	blx	r7
 800beca:	3001      	adds	r0, #1
 800becc:	f108 0801 	add.w	r8, r8, #1
 800bed0:	f43f ae71 	beq.w	800bbb6 <_printf_float+0xba>
 800bed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed6:	2200      	movs	r2, #0
 800bed8:	f103 3aff 	add.w	sl, r3, #4294967295
 800bedc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bee0:	2300      	movs	r3, #0
 800bee2:	f7f4 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bee6:	b9c8      	cbnz	r0, 800bf1c <_printf_float+0x420>
 800bee8:	4653      	mov	r3, sl
 800beea:	4642      	mov	r2, r8
 800beec:	4631      	mov	r1, r6
 800beee:	4628      	mov	r0, r5
 800bef0:	47b8      	blx	r7
 800bef2:	3001      	adds	r0, #1
 800bef4:	d10e      	bne.n	800bf14 <_printf_float+0x418>
 800bef6:	e65e      	b.n	800bbb6 <_printf_float+0xba>
 800bef8:	2301      	movs	r3, #1
 800befa:	4652      	mov	r2, sl
 800befc:	4631      	mov	r1, r6
 800befe:	4628      	mov	r0, r5
 800bf00:	47b8      	blx	r7
 800bf02:	3001      	adds	r0, #1
 800bf04:	f43f ae57 	beq.w	800bbb6 <_printf_float+0xba>
 800bf08:	f108 0801 	add.w	r8, r8, #1
 800bf0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	4543      	cmp	r3, r8
 800bf12:	dcf1      	bgt.n	800bef8 <_printf_float+0x3fc>
 800bf14:	464b      	mov	r3, r9
 800bf16:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bf1a:	e6de      	b.n	800bcda <_printf_float+0x1de>
 800bf1c:	f04f 0800 	mov.w	r8, #0
 800bf20:	f104 0a1a 	add.w	sl, r4, #26
 800bf24:	e7f2      	b.n	800bf0c <_printf_float+0x410>
 800bf26:	2301      	movs	r3, #1
 800bf28:	e7df      	b.n	800beea <_printf_float+0x3ee>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	464a      	mov	r2, r9
 800bf2e:	4631      	mov	r1, r6
 800bf30:	4628      	mov	r0, r5
 800bf32:	47b8      	blx	r7
 800bf34:	3001      	adds	r0, #1
 800bf36:	f43f ae3e 	beq.w	800bbb6 <_printf_float+0xba>
 800bf3a:	f108 0801 	add.w	r8, r8, #1
 800bf3e:	68e3      	ldr	r3, [r4, #12]
 800bf40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf42:	1a9b      	subs	r3, r3, r2
 800bf44:	4543      	cmp	r3, r8
 800bf46:	dcf0      	bgt.n	800bf2a <_printf_float+0x42e>
 800bf48:	e6fc      	b.n	800bd44 <_printf_float+0x248>
 800bf4a:	f04f 0800 	mov.w	r8, #0
 800bf4e:	f104 0919 	add.w	r9, r4, #25
 800bf52:	e7f4      	b.n	800bf3e <_printf_float+0x442>
 800bf54:	2900      	cmp	r1, #0
 800bf56:	f43f ae8b 	beq.w	800bc70 <_printf_float+0x174>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bf60:	ab09      	add	r3, sp, #36	; 0x24
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	ec49 8b10 	vmov	d0, r8, r9
 800bf68:	6022      	str	r2, [r4, #0]
 800bf6a:	f8cd a004 	str.w	sl, [sp, #4]
 800bf6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf72:	4628      	mov	r0, r5
 800bf74:	f7ff fd2e 	bl	800b9d4 <__cvt>
 800bf78:	4680      	mov	r8, r0
 800bf7a:	e648      	b.n	800bc0e <_printf_float+0x112>

0800bf7c <_printf_common>:
 800bf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf80:	4691      	mov	r9, r2
 800bf82:	461f      	mov	r7, r3
 800bf84:	688a      	ldr	r2, [r1, #8]
 800bf86:	690b      	ldr	r3, [r1, #16]
 800bf88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	bfb8      	it	lt
 800bf90:	4613      	movlt	r3, r2
 800bf92:	f8c9 3000 	str.w	r3, [r9]
 800bf96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf9a:	4606      	mov	r6, r0
 800bf9c:	460c      	mov	r4, r1
 800bf9e:	b112      	cbz	r2, 800bfa6 <_printf_common+0x2a>
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	f8c9 3000 	str.w	r3, [r9]
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	0699      	lsls	r1, r3, #26
 800bfaa:	bf42      	ittt	mi
 800bfac:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bfb0:	3302      	addmi	r3, #2
 800bfb2:	f8c9 3000 	strmi.w	r3, [r9]
 800bfb6:	6825      	ldr	r5, [r4, #0]
 800bfb8:	f015 0506 	ands.w	r5, r5, #6
 800bfbc:	d107      	bne.n	800bfce <_printf_common+0x52>
 800bfbe:	f104 0a19 	add.w	sl, r4, #25
 800bfc2:	68e3      	ldr	r3, [r4, #12]
 800bfc4:	f8d9 2000 	ldr.w	r2, [r9]
 800bfc8:	1a9b      	subs	r3, r3, r2
 800bfca:	42ab      	cmp	r3, r5
 800bfcc:	dc28      	bgt.n	800c020 <_printf_common+0xa4>
 800bfce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bfd2:	6822      	ldr	r2, [r4, #0]
 800bfd4:	3300      	adds	r3, #0
 800bfd6:	bf18      	it	ne
 800bfd8:	2301      	movne	r3, #1
 800bfda:	0692      	lsls	r2, r2, #26
 800bfdc:	d42d      	bmi.n	800c03a <_printf_common+0xbe>
 800bfde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfe2:	4639      	mov	r1, r7
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	47c0      	blx	r8
 800bfe8:	3001      	adds	r0, #1
 800bfea:	d020      	beq.n	800c02e <_printf_common+0xb2>
 800bfec:	6823      	ldr	r3, [r4, #0]
 800bfee:	68e5      	ldr	r5, [r4, #12]
 800bff0:	f8d9 2000 	ldr.w	r2, [r9]
 800bff4:	f003 0306 	and.w	r3, r3, #6
 800bff8:	2b04      	cmp	r3, #4
 800bffa:	bf08      	it	eq
 800bffc:	1aad      	subeq	r5, r5, r2
 800bffe:	68a3      	ldr	r3, [r4, #8]
 800c000:	6922      	ldr	r2, [r4, #16]
 800c002:	bf0c      	ite	eq
 800c004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c008:	2500      	movne	r5, #0
 800c00a:	4293      	cmp	r3, r2
 800c00c:	bfc4      	itt	gt
 800c00e:	1a9b      	subgt	r3, r3, r2
 800c010:	18ed      	addgt	r5, r5, r3
 800c012:	f04f 0900 	mov.w	r9, #0
 800c016:	341a      	adds	r4, #26
 800c018:	454d      	cmp	r5, r9
 800c01a:	d11a      	bne.n	800c052 <_printf_common+0xd6>
 800c01c:	2000      	movs	r0, #0
 800c01e:	e008      	b.n	800c032 <_printf_common+0xb6>
 800c020:	2301      	movs	r3, #1
 800c022:	4652      	mov	r2, sl
 800c024:	4639      	mov	r1, r7
 800c026:	4630      	mov	r0, r6
 800c028:	47c0      	blx	r8
 800c02a:	3001      	adds	r0, #1
 800c02c:	d103      	bne.n	800c036 <_printf_common+0xba>
 800c02e:	f04f 30ff 	mov.w	r0, #4294967295
 800c032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c036:	3501      	adds	r5, #1
 800c038:	e7c3      	b.n	800bfc2 <_printf_common+0x46>
 800c03a:	18e1      	adds	r1, r4, r3
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	2030      	movs	r0, #48	; 0x30
 800c040:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c044:	4422      	add	r2, r4
 800c046:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c04a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c04e:	3302      	adds	r3, #2
 800c050:	e7c5      	b.n	800bfde <_printf_common+0x62>
 800c052:	2301      	movs	r3, #1
 800c054:	4622      	mov	r2, r4
 800c056:	4639      	mov	r1, r7
 800c058:	4630      	mov	r0, r6
 800c05a:	47c0      	blx	r8
 800c05c:	3001      	adds	r0, #1
 800c05e:	d0e6      	beq.n	800c02e <_printf_common+0xb2>
 800c060:	f109 0901 	add.w	r9, r9, #1
 800c064:	e7d8      	b.n	800c018 <_printf_common+0x9c>
	...

0800c068 <_printf_i>:
 800c068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c06c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c070:	460c      	mov	r4, r1
 800c072:	7e09      	ldrb	r1, [r1, #24]
 800c074:	b085      	sub	sp, #20
 800c076:	296e      	cmp	r1, #110	; 0x6e
 800c078:	4617      	mov	r7, r2
 800c07a:	4606      	mov	r6, r0
 800c07c:	4698      	mov	r8, r3
 800c07e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c080:	f000 80b3 	beq.w	800c1ea <_printf_i+0x182>
 800c084:	d822      	bhi.n	800c0cc <_printf_i+0x64>
 800c086:	2963      	cmp	r1, #99	; 0x63
 800c088:	d036      	beq.n	800c0f8 <_printf_i+0x90>
 800c08a:	d80a      	bhi.n	800c0a2 <_printf_i+0x3a>
 800c08c:	2900      	cmp	r1, #0
 800c08e:	f000 80b9 	beq.w	800c204 <_printf_i+0x19c>
 800c092:	2958      	cmp	r1, #88	; 0x58
 800c094:	f000 8083 	beq.w	800c19e <_printf_i+0x136>
 800c098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c09c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c0a0:	e032      	b.n	800c108 <_printf_i+0xa0>
 800c0a2:	2964      	cmp	r1, #100	; 0x64
 800c0a4:	d001      	beq.n	800c0aa <_printf_i+0x42>
 800c0a6:	2969      	cmp	r1, #105	; 0x69
 800c0a8:	d1f6      	bne.n	800c098 <_printf_i+0x30>
 800c0aa:	6820      	ldr	r0, [r4, #0]
 800c0ac:	6813      	ldr	r3, [r2, #0]
 800c0ae:	0605      	lsls	r5, r0, #24
 800c0b0:	f103 0104 	add.w	r1, r3, #4
 800c0b4:	d52a      	bpl.n	800c10c <_printf_i+0xa4>
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6011      	str	r1, [r2, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	da03      	bge.n	800c0c6 <_printf_i+0x5e>
 800c0be:	222d      	movs	r2, #45	; 0x2d
 800c0c0:	425b      	negs	r3, r3
 800c0c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c0c6:	486f      	ldr	r0, [pc, #444]	; (800c284 <_printf_i+0x21c>)
 800c0c8:	220a      	movs	r2, #10
 800c0ca:	e039      	b.n	800c140 <_printf_i+0xd8>
 800c0cc:	2973      	cmp	r1, #115	; 0x73
 800c0ce:	f000 809d 	beq.w	800c20c <_printf_i+0x1a4>
 800c0d2:	d808      	bhi.n	800c0e6 <_printf_i+0x7e>
 800c0d4:	296f      	cmp	r1, #111	; 0x6f
 800c0d6:	d020      	beq.n	800c11a <_printf_i+0xb2>
 800c0d8:	2970      	cmp	r1, #112	; 0x70
 800c0da:	d1dd      	bne.n	800c098 <_printf_i+0x30>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	f043 0320 	orr.w	r3, r3, #32
 800c0e2:	6023      	str	r3, [r4, #0]
 800c0e4:	e003      	b.n	800c0ee <_printf_i+0x86>
 800c0e6:	2975      	cmp	r1, #117	; 0x75
 800c0e8:	d017      	beq.n	800c11a <_printf_i+0xb2>
 800c0ea:	2978      	cmp	r1, #120	; 0x78
 800c0ec:	d1d4      	bne.n	800c098 <_printf_i+0x30>
 800c0ee:	2378      	movs	r3, #120	; 0x78
 800c0f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0f4:	4864      	ldr	r0, [pc, #400]	; (800c288 <_printf_i+0x220>)
 800c0f6:	e055      	b.n	800c1a4 <_printf_i+0x13c>
 800c0f8:	6813      	ldr	r3, [r2, #0]
 800c0fa:	1d19      	adds	r1, r3, #4
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	6011      	str	r1, [r2, #0]
 800c100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c108:	2301      	movs	r3, #1
 800c10a:	e08c      	b.n	800c226 <_printf_i+0x1be>
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	6011      	str	r1, [r2, #0]
 800c110:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c114:	bf18      	it	ne
 800c116:	b21b      	sxthne	r3, r3
 800c118:	e7cf      	b.n	800c0ba <_printf_i+0x52>
 800c11a:	6813      	ldr	r3, [r2, #0]
 800c11c:	6825      	ldr	r5, [r4, #0]
 800c11e:	1d18      	adds	r0, r3, #4
 800c120:	6010      	str	r0, [r2, #0]
 800c122:	0628      	lsls	r0, r5, #24
 800c124:	d501      	bpl.n	800c12a <_printf_i+0xc2>
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	e002      	b.n	800c130 <_printf_i+0xc8>
 800c12a:	0668      	lsls	r0, r5, #25
 800c12c:	d5fb      	bpl.n	800c126 <_printf_i+0xbe>
 800c12e:	881b      	ldrh	r3, [r3, #0]
 800c130:	4854      	ldr	r0, [pc, #336]	; (800c284 <_printf_i+0x21c>)
 800c132:	296f      	cmp	r1, #111	; 0x6f
 800c134:	bf14      	ite	ne
 800c136:	220a      	movne	r2, #10
 800c138:	2208      	moveq	r2, #8
 800c13a:	2100      	movs	r1, #0
 800c13c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c140:	6865      	ldr	r5, [r4, #4]
 800c142:	60a5      	str	r5, [r4, #8]
 800c144:	2d00      	cmp	r5, #0
 800c146:	f2c0 8095 	blt.w	800c274 <_printf_i+0x20c>
 800c14a:	6821      	ldr	r1, [r4, #0]
 800c14c:	f021 0104 	bic.w	r1, r1, #4
 800c150:	6021      	str	r1, [r4, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d13d      	bne.n	800c1d2 <_printf_i+0x16a>
 800c156:	2d00      	cmp	r5, #0
 800c158:	f040 808e 	bne.w	800c278 <_printf_i+0x210>
 800c15c:	4665      	mov	r5, ip
 800c15e:	2a08      	cmp	r2, #8
 800c160:	d10b      	bne.n	800c17a <_printf_i+0x112>
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	07db      	lsls	r3, r3, #31
 800c166:	d508      	bpl.n	800c17a <_printf_i+0x112>
 800c168:	6923      	ldr	r3, [r4, #16]
 800c16a:	6862      	ldr	r2, [r4, #4]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	bfde      	ittt	le
 800c170:	2330      	movle	r3, #48	; 0x30
 800c172:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c176:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c17a:	ebac 0305 	sub.w	r3, ip, r5
 800c17e:	6123      	str	r3, [r4, #16]
 800c180:	f8cd 8000 	str.w	r8, [sp]
 800c184:	463b      	mov	r3, r7
 800c186:	aa03      	add	r2, sp, #12
 800c188:	4621      	mov	r1, r4
 800c18a:	4630      	mov	r0, r6
 800c18c:	f7ff fef6 	bl	800bf7c <_printf_common>
 800c190:	3001      	adds	r0, #1
 800c192:	d14d      	bne.n	800c230 <_printf_i+0x1c8>
 800c194:	f04f 30ff 	mov.w	r0, #4294967295
 800c198:	b005      	add	sp, #20
 800c19a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c19e:	4839      	ldr	r0, [pc, #228]	; (800c284 <_printf_i+0x21c>)
 800c1a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c1a4:	6813      	ldr	r3, [r2, #0]
 800c1a6:	6821      	ldr	r1, [r4, #0]
 800c1a8:	1d1d      	adds	r5, r3, #4
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6015      	str	r5, [r2, #0]
 800c1ae:	060a      	lsls	r2, r1, #24
 800c1b0:	d50b      	bpl.n	800c1ca <_printf_i+0x162>
 800c1b2:	07ca      	lsls	r2, r1, #31
 800c1b4:	bf44      	itt	mi
 800c1b6:	f041 0120 	orrmi.w	r1, r1, #32
 800c1ba:	6021      	strmi	r1, [r4, #0]
 800c1bc:	b91b      	cbnz	r3, 800c1c6 <_printf_i+0x15e>
 800c1be:	6822      	ldr	r2, [r4, #0]
 800c1c0:	f022 0220 	bic.w	r2, r2, #32
 800c1c4:	6022      	str	r2, [r4, #0]
 800c1c6:	2210      	movs	r2, #16
 800c1c8:	e7b7      	b.n	800c13a <_printf_i+0xd2>
 800c1ca:	064d      	lsls	r5, r1, #25
 800c1cc:	bf48      	it	mi
 800c1ce:	b29b      	uxthmi	r3, r3
 800c1d0:	e7ef      	b.n	800c1b2 <_printf_i+0x14a>
 800c1d2:	4665      	mov	r5, ip
 800c1d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1d8:	fb02 3311 	mls	r3, r2, r1, r3
 800c1dc:	5cc3      	ldrb	r3, [r0, r3]
 800c1de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	d1f5      	bne.n	800c1d4 <_printf_i+0x16c>
 800c1e8:	e7b9      	b.n	800c15e <_printf_i+0xf6>
 800c1ea:	6813      	ldr	r3, [r2, #0]
 800c1ec:	6825      	ldr	r5, [r4, #0]
 800c1ee:	6961      	ldr	r1, [r4, #20]
 800c1f0:	1d18      	adds	r0, r3, #4
 800c1f2:	6010      	str	r0, [r2, #0]
 800c1f4:	0628      	lsls	r0, r5, #24
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	d501      	bpl.n	800c1fe <_printf_i+0x196>
 800c1fa:	6019      	str	r1, [r3, #0]
 800c1fc:	e002      	b.n	800c204 <_printf_i+0x19c>
 800c1fe:	066a      	lsls	r2, r5, #25
 800c200:	d5fb      	bpl.n	800c1fa <_printf_i+0x192>
 800c202:	8019      	strh	r1, [r3, #0]
 800c204:	2300      	movs	r3, #0
 800c206:	6123      	str	r3, [r4, #16]
 800c208:	4665      	mov	r5, ip
 800c20a:	e7b9      	b.n	800c180 <_printf_i+0x118>
 800c20c:	6813      	ldr	r3, [r2, #0]
 800c20e:	1d19      	adds	r1, r3, #4
 800c210:	6011      	str	r1, [r2, #0]
 800c212:	681d      	ldr	r5, [r3, #0]
 800c214:	6862      	ldr	r2, [r4, #4]
 800c216:	2100      	movs	r1, #0
 800c218:	4628      	mov	r0, r5
 800c21a:	f7f3 ffe1 	bl	80001e0 <memchr>
 800c21e:	b108      	cbz	r0, 800c224 <_printf_i+0x1bc>
 800c220:	1b40      	subs	r0, r0, r5
 800c222:	6060      	str	r0, [r4, #4]
 800c224:	6863      	ldr	r3, [r4, #4]
 800c226:	6123      	str	r3, [r4, #16]
 800c228:	2300      	movs	r3, #0
 800c22a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c22e:	e7a7      	b.n	800c180 <_printf_i+0x118>
 800c230:	6923      	ldr	r3, [r4, #16]
 800c232:	462a      	mov	r2, r5
 800c234:	4639      	mov	r1, r7
 800c236:	4630      	mov	r0, r6
 800c238:	47c0      	blx	r8
 800c23a:	3001      	adds	r0, #1
 800c23c:	d0aa      	beq.n	800c194 <_printf_i+0x12c>
 800c23e:	6823      	ldr	r3, [r4, #0]
 800c240:	079b      	lsls	r3, r3, #30
 800c242:	d413      	bmi.n	800c26c <_printf_i+0x204>
 800c244:	68e0      	ldr	r0, [r4, #12]
 800c246:	9b03      	ldr	r3, [sp, #12]
 800c248:	4298      	cmp	r0, r3
 800c24a:	bfb8      	it	lt
 800c24c:	4618      	movlt	r0, r3
 800c24e:	e7a3      	b.n	800c198 <_printf_i+0x130>
 800c250:	2301      	movs	r3, #1
 800c252:	464a      	mov	r2, r9
 800c254:	4639      	mov	r1, r7
 800c256:	4630      	mov	r0, r6
 800c258:	47c0      	blx	r8
 800c25a:	3001      	adds	r0, #1
 800c25c:	d09a      	beq.n	800c194 <_printf_i+0x12c>
 800c25e:	3501      	adds	r5, #1
 800c260:	68e3      	ldr	r3, [r4, #12]
 800c262:	9a03      	ldr	r2, [sp, #12]
 800c264:	1a9b      	subs	r3, r3, r2
 800c266:	42ab      	cmp	r3, r5
 800c268:	dcf2      	bgt.n	800c250 <_printf_i+0x1e8>
 800c26a:	e7eb      	b.n	800c244 <_printf_i+0x1dc>
 800c26c:	2500      	movs	r5, #0
 800c26e:	f104 0919 	add.w	r9, r4, #25
 800c272:	e7f5      	b.n	800c260 <_printf_i+0x1f8>
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1ac      	bne.n	800c1d2 <_printf_i+0x16a>
 800c278:	7803      	ldrb	r3, [r0, #0]
 800c27a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c27e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c282:	e76c      	b.n	800c15e <_printf_i+0xf6>
 800c284:	0800e5e6 	.word	0x0800e5e6
 800c288:	0800e5f7 	.word	0x0800e5f7

0800c28c <iprintf>:
 800c28c:	b40f      	push	{r0, r1, r2, r3}
 800c28e:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <iprintf+0x2c>)
 800c290:	b513      	push	{r0, r1, r4, lr}
 800c292:	681c      	ldr	r4, [r3, #0]
 800c294:	b124      	cbz	r4, 800c2a0 <iprintf+0x14>
 800c296:	69a3      	ldr	r3, [r4, #24]
 800c298:	b913      	cbnz	r3, 800c2a0 <iprintf+0x14>
 800c29a:	4620      	mov	r0, r4
 800c29c:	f001 f914 	bl	800d4c8 <__sinit>
 800c2a0:	ab05      	add	r3, sp, #20
 800c2a2:	9a04      	ldr	r2, [sp, #16]
 800c2a4:	68a1      	ldr	r1, [r4, #8]
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f001 fdcd 	bl	800de48 <_vfiprintf_r>
 800c2ae:	b002      	add	sp, #8
 800c2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b4:	b004      	add	sp, #16
 800c2b6:	4770      	bx	lr
 800c2b8:	200013c4 	.word	0x200013c4

0800c2bc <_puts_r>:
 800c2bc:	b570      	push	{r4, r5, r6, lr}
 800c2be:	460e      	mov	r6, r1
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	b118      	cbz	r0, 800c2cc <_puts_r+0x10>
 800c2c4:	6983      	ldr	r3, [r0, #24]
 800c2c6:	b90b      	cbnz	r3, 800c2cc <_puts_r+0x10>
 800c2c8:	f001 f8fe 	bl	800d4c8 <__sinit>
 800c2cc:	69ab      	ldr	r3, [r5, #24]
 800c2ce:	68ac      	ldr	r4, [r5, #8]
 800c2d0:	b913      	cbnz	r3, 800c2d8 <_puts_r+0x1c>
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f001 f8f8 	bl	800d4c8 <__sinit>
 800c2d8:	4b23      	ldr	r3, [pc, #140]	; (800c368 <_puts_r+0xac>)
 800c2da:	429c      	cmp	r4, r3
 800c2dc:	d117      	bne.n	800c30e <_puts_r+0x52>
 800c2de:	686c      	ldr	r4, [r5, #4]
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	071b      	lsls	r3, r3, #28
 800c2e4:	d51d      	bpl.n	800c322 <_puts_r+0x66>
 800c2e6:	6923      	ldr	r3, [r4, #16]
 800c2e8:	b1db      	cbz	r3, 800c322 <_puts_r+0x66>
 800c2ea:	3e01      	subs	r6, #1
 800c2ec:	68a3      	ldr	r3, [r4, #8]
 800c2ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	60a3      	str	r3, [r4, #8]
 800c2f6:	b9e9      	cbnz	r1, 800c334 <_puts_r+0x78>
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	da2e      	bge.n	800c35a <_puts_r+0x9e>
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	210a      	movs	r1, #10
 800c300:	4628      	mov	r0, r5
 800c302:	f000 f8ed 	bl	800c4e0 <__swbuf_r>
 800c306:	3001      	adds	r0, #1
 800c308:	d011      	beq.n	800c32e <_puts_r+0x72>
 800c30a:	200a      	movs	r0, #10
 800c30c:	e011      	b.n	800c332 <_puts_r+0x76>
 800c30e:	4b17      	ldr	r3, [pc, #92]	; (800c36c <_puts_r+0xb0>)
 800c310:	429c      	cmp	r4, r3
 800c312:	d101      	bne.n	800c318 <_puts_r+0x5c>
 800c314:	68ac      	ldr	r4, [r5, #8]
 800c316:	e7e3      	b.n	800c2e0 <_puts_r+0x24>
 800c318:	4b15      	ldr	r3, [pc, #84]	; (800c370 <_puts_r+0xb4>)
 800c31a:	429c      	cmp	r4, r3
 800c31c:	bf08      	it	eq
 800c31e:	68ec      	ldreq	r4, [r5, #12]
 800c320:	e7de      	b.n	800c2e0 <_puts_r+0x24>
 800c322:	4621      	mov	r1, r4
 800c324:	4628      	mov	r0, r5
 800c326:	f000 f92d 	bl	800c584 <__swsetup_r>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d0dd      	beq.n	800c2ea <_puts_r+0x2e>
 800c32e:	f04f 30ff 	mov.w	r0, #4294967295
 800c332:	bd70      	pop	{r4, r5, r6, pc}
 800c334:	2b00      	cmp	r3, #0
 800c336:	da04      	bge.n	800c342 <_puts_r+0x86>
 800c338:	69a2      	ldr	r2, [r4, #24]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	dc06      	bgt.n	800c34c <_puts_r+0x90>
 800c33e:	290a      	cmp	r1, #10
 800c340:	d004      	beq.n	800c34c <_puts_r+0x90>
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	1c5a      	adds	r2, r3, #1
 800c346:	6022      	str	r2, [r4, #0]
 800c348:	7019      	strb	r1, [r3, #0]
 800c34a:	e7cf      	b.n	800c2ec <_puts_r+0x30>
 800c34c:	4622      	mov	r2, r4
 800c34e:	4628      	mov	r0, r5
 800c350:	f000 f8c6 	bl	800c4e0 <__swbuf_r>
 800c354:	3001      	adds	r0, #1
 800c356:	d1c9      	bne.n	800c2ec <_puts_r+0x30>
 800c358:	e7e9      	b.n	800c32e <_puts_r+0x72>
 800c35a:	6823      	ldr	r3, [r4, #0]
 800c35c:	200a      	movs	r0, #10
 800c35e:	1c5a      	adds	r2, r3, #1
 800c360:	6022      	str	r2, [r4, #0]
 800c362:	7018      	strb	r0, [r3, #0]
 800c364:	e7e5      	b.n	800c332 <_puts_r+0x76>
 800c366:	bf00      	nop
 800c368:	0800e638 	.word	0x0800e638
 800c36c:	0800e658 	.word	0x0800e658
 800c370:	0800e618 	.word	0x0800e618

0800c374 <puts>:
 800c374:	4b02      	ldr	r3, [pc, #8]	; (800c380 <puts+0xc>)
 800c376:	4601      	mov	r1, r0
 800c378:	6818      	ldr	r0, [r3, #0]
 800c37a:	f7ff bf9f 	b.w	800c2bc <_puts_r>
 800c37e:	bf00      	nop
 800c380:	200013c4 	.word	0x200013c4

0800c384 <setvbuf>:
 800c384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c388:	461d      	mov	r5, r3
 800c38a:	4b51      	ldr	r3, [pc, #324]	; (800c4d0 <setvbuf+0x14c>)
 800c38c:	681e      	ldr	r6, [r3, #0]
 800c38e:	4604      	mov	r4, r0
 800c390:	460f      	mov	r7, r1
 800c392:	4690      	mov	r8, r2
 800c394:	b126      	cbz	r6, 800c3a0 <setvbuf+0x1c>
 800c396:	69b3      	ldr	r3, [r6, #24]
 800c398:	b913      	cbnz	r3, 800c3a0 <setvbuf+0x1c>
 800c39a:	4630      	mov	r0, r6
 800c39c:	f001 f894 	bl	800d4c8 <__sinit>
 800c3a0:	4b4c      	ldr	r3, [pc, #304]	; (800c4d4 <setvbuf+0x150>)
 800c3a2:	429c      	cmp	r4, r3
 800c3a4:	d152      	bne.n	800c44c <setvbuf+0xc8>
 800c3a6:	6874      	ldr	r4, [r6, #4]
 800c3a8:	f1b8 0f02 	cmp.w	r8, #2
 800c3ac:	d006      	beq.n	800c3bc <setvbuf+0x38>
 800c3ae:	f1b8 0f01 	cmp.w	r8, #1
 800c3b2:	f200 8089 	bhi.w	800c4c8 <setvbuf+0x144>
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	f2c0 8086 	blt.w	800c4c8 <setvbuf+0x144>
 800c3bc:	4621      	mov	r1, r4
 800c3be:	4630      	mov	r0, r6
 800c3c0:	f001 f818 	bl	800d3f4 <_fflush_r>
 800c3c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3c6:	b141      	cbz	r1, 800c3da <setvbuf+0x56>
 800c3c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3cc:	4299      	cmp	r1, r3
 800c3ce:	d002      	beq.n	800c3d6 <setvbuf+0x52>
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f001 fc67 	bl	800dca4 <_free_r>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	6363      	str	r3, [r4, #52]	; 0x34
 800c3da:	2300      	movs	r3, #0
 800c3dc:	61a3      	str	r3, [r4, #24]
 800c3de:	6063      	str	r3, [r4, #4]
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	061b      	lsls	r3, r3, #24
 800c3e4:	d503      	bpl.n	800c3ee <setvbuf+0x6a>
 800c3e6:	6921      	ldr	r1, [r4, #16]
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f001 fc5b 	bl	800dca4 <_free_r>
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800c3f4:	f023 0303 	bic.w	r3, r3, #3
 800c3f8:	f1b8 0f02 	cmp.w	r8, #2
 800c3fc:	81a3      	strh	r3, [r4, #12]
 800c3fe:	d05d      	beq.n	800c4bc <setvbuf+0x138>
 800c400:	ab01      	add	r3, sp, #4
 800c402:	466a      	mov	r2, sp
 800c404:	4621      	mov	r1, r4
 800c406:	4630      	mov	r0, r6
 800c408:	f001 f8f6 	bl	800d5f8 <__swhatbuf_r>
 800c40c:	89a3      	ldrh	r3, [r4, #12]
 800c40e:	4318      	orrs	r0, r3
 800c410:	81a0      	strh	r0, [r4, #12]
 800c412:	bb2d      	cbnz	r5, 800c460 <setvbuf+0xdc>
 800c414:	9d00      	ldr	r5, [sp, #0]
 800c416:	4628      	mov	r0, r5
 800c418:	f001 f952 	bl	800d6c0 <malloc>
 800c41c:	4607      	mov	r7, r0
 800c41e:	2800      	cmp	r0, #0
 800c420:	d14e      	bne.n	800c4c0 <setvbuf+0x13c>
 800c422:	f8dd 9000 	ldr.w	r9, [sp]
 800c426:	45a9      	cmp	r9, r5
 800c428:	d13c      	bne.n	800c4a4 <setvbuf+0x120>
 800c42a:	f04f 30ff 	mov.w	r0, #4294967295
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	f043 0302 	orr.w	r3, r3, #2
 800c434:	81a3      	strh	r3, [r4, #12]
 800c436:	2300      	movs	r3, #0
 800c438:	60a3      	str	r3, [r4, #8]
 800c43a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c43e:	6023      	str	r3, [r4, #0]
 800c440:	6123      	str	r3, [r4, #16]
 800c442:	2301      	movs	r3, #1
 800c444:	6163      	str	r3, [r4, #20]
 800c446:	b003      	add	sp, #12
 800c448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c44c:	4b22      	ldr	r3, [pc, #136]	; (800c4d8 <setvbuf+0x154>)
 800c44e:	429c      	cmp	r4, r3
 800c450:	d101      	bne.n	800c456 <setvbuf+0xd2>
 800c452:	68b4      	ldr	r4, [r6, #8]
 800c454:	e7a8      	b.n	800c3a8 <setvbuf+0x24>
 800c456:	4b21      	ldr	r3, [pc, #132]	; (800c4dc <setvbuf+0x158>)
 800c458:	429c      	cmp	r4, r3
 800c45a:	bf08      	it	eq
 800c45c:	68f4      	ldreq	r4, [r6, #12]
 800c45e:	e7a3      	b.n	800c3a8 <setvbuf+0x24>
 800c460:	2f00      	cmp	r7, #0
 800c462:	d0d8      	beq.n	800c416 <setvbuf+0x92>
 800c464:	69b3      	ldr	r3, [r6, #24]
 800c466:	b913      	cbnz	r3, 800c46e <setvbuf+0xea>
 800c468:	4630      	mov	r0, r6
 800c46a:	f001 f82d 	bl	800d4c8 <__sinit>
 800c46e:	f1b8 0f01 	cmp.w	r8, #1
 800c472:	bf08      	it	eq
 800c474:	89a3      	ldrheq	r3, [r4, #12]
 800c476:	6027      	str	r7, [r4, #0]
 800c478:	bf04      	itt	eq
 800c47a:	f043 0301 	orreq.w	r3, r3, #1
 800c47e:	81a3      	strheq	r3, [r4, #12]
 800c480:	89a3      	ldrh	r3, [r4, #12]
 800c482:	f013 0008 	ands.w	r0, r3, #8
 800c486:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800c48a:	d01b      	beq.n	800c4c4 <setvbuf+0x140>
 800c48c:	f013 0001 	ands.w	r0, r3, #1
 800c490:	bf18      	it	ne
 800c492:	426d      	negne	r5, r5
 800c494:	f04f 0300 	mov.w	r3, #0
 800c498:	bf1d      	ittte	ne
 800c49a:	60a3      	strne	r3, [r4, #8]
 800c49c:	61a5      	strne	r5, [r4, #24]
 800c49e:	4618      	movne	r0, r3
 800c4a0:	60a5      	streq	r5, [r4, #8]
 800c4a2:	e7d0      	b.n	800c446 <setvbuf+0xc2>
 800c4a4:	4648      	mov	r0, r9
 800c4a6:	f001 f90b 	bl	800d6c0 <malloc>
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d0bc      	beq.n	800c42a <setvbuf+0xa6>
 800c4b0:	89a3      	ldrh	r3, [r4, #12]
 800c4b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4b6:	81a3      	strh	r3, [r4, #12]
 800c4b8:	464d      	mov	r5, r9
 800c4ba:	e7d3      	b.n	800c464 <setvbuf+0xe0>
 800c4bc:	2000      	movs	r0, #0
 800c4be:	e7b6      	b.n	800c42e <setvbuf+0xaa>
 800c4c0:	46a9      	mov	r9, r5
 800c4c2:	e7f5      	b.n	800c4b0 <setvbuf+0x12c>
 800c4c4:	60a0      	str	r0, [r4, #8]
 800c4c6:	e7be      	b.n	800c446 <setvbuf+0xc2>
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4cc:	e7bb      	b.n	800c446 <setvbuf+0xc2>
 800c4ce:	bf00      	nop
 800c4d0:	200013c4 	.word	0x200013c4
 800c4d4:	0800e638 	.word	0x0800e638
 800c4d8:	0800e658 	.word	0x0800e658
 800c4dc:	0800e618 	.word	0x0800e618

0800c4e0 <__swbuf_r>:
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	460e      	mov	r6, r1
 800c4e4:	4614      	mov	r4, r2
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	b118      	cbz	r0, 800c4f2 <__swbuf_r+0x12>
 800c4ea:	6983      	ldr	r3, [r0, #24]
 800c4ec:	b90b      	cbnz	r3, 800c4f2 <__swbuf_r+0x12>
 800c4ee:	f000 ffeb 	bl	800d4c8 <__sinit>
 800c4f2:	4b21      	ldr	r3, [pc, #132]	; (800c578 <__swbuf_r+0x98>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	d12a      	bne.n	800c54e <__swbuf_r+0x6e>
 800c4f8:	686c      	ldr	r4, [r5, #4]
 800c4fa:	69a3      	ldr	r3, [r4, #24]
 800c4fc:	60a3      	str	r3, [r4, #8]
 800c4fe:	89a3      	ldrh	r3, [r4, #12]
 800c500:	071a      	lsls	r2, r3, #28
 800c502:	d52e      	bpl.n	800c562 <__swbuf_r+0x82>
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	b363      	cbz	r3, 800c562 <__swbuf_r+0x82>
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	6820      	ldr	r0, [r4, #0]
 800c50c:	1ac0      	subs	r0, r0, r3
 800c50e:	6963      	ldr	r3, [r4, #20]
 800c510:	b2f6      	uxtb	r6, r6
 800c512:	4283      	cmp	r3, r0
 800c514:	4637      	mov	r7, r6
 800c516:	dc04      	bgt.n	800c522 <__swbuf_r+0x42>
 800c518:	4621      	mov	r1, r4
 800c51a:	4628      	mov	r0, r5
 800c51c:	f000 ff6a 	bl	800d3f4 <_fflush_r>
 800c520:	bb28      	cbnz	r0, 800c56e <__swbuf_r+0x8e>
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	3b01      	subs	r3, #1
 800c526:	60a3      	str	r3, [r4, #8]
 800c528:	6823      	ldr	r3, [r4, #0]
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	6022      	str	r2, [r4, #0]
 800c52e:	701e      	strb	r6, [r3, #0]
 800c530:	6963      	ldr	r3, [r4, #20]
 800c532:	3001      	adds	r0, #1
 800c534:	4283      	cmp	r3, r0
 800c536:	d004      	beq.n	800c542 <__swbuf_r+0x62>
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	07db      	lsls	r3, r3, #31
 800c53c:	d519      	bpl.n	800c572 <__swbuf_r+0x92>
 800c53e:	2e0a      	cmp	r6, #10
 800c540:	d117      	bne.n	800c572 <__swbuf_r+0x92>
 800c542:	4621      	mov	r1, r4
 800c544:	4628      	mov	r0, r5
 800c546:	f000 ff55 	bl	800d3f4 <_fflush_r>
 800c54a:	b190      	cbz	r0, 800c572 <__swbuf_r+0x92>
 800c54c:	e00f      	b.n	800c56e <__swbuf_r+0x8e>
 800c54e:	4b0b      	ldr	r3, [pc, #44]	; (800c57c <__swbuf_r+0x9c>)
 800c550:	429c      	cmp	r4, r3
 800c552:	d101      	bne.n	800c558 <__swbuf_r+0x78>
 800c554:	68ac      	ldr	r4, [r5, #8]
 800c556:	e7d0      	b.n	800c4fa <__swbuf_r+0x1a>
 800c558:	4b09      	ldr	r3, [pc, #36]	; (800c580 <__swbuf_r+0xa0>)
 800c55a:	429c      	cmp	r4, r3
 800c55c:	bf08      	it	eq
 800c55e:	68ec      	ldreq	r4, [r5, #12]
 800c560:	e7cb      	b.n	800c4fa <__swbuf_r+0x1a>
 800c562:	4621      	mov	r1, r4
 800c564:	4628      	mov	r0, r5
 800c566:	f000 f80d 	bl	800c584 <__swsetup_r>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d0cc      	beq.n	800c508 <__swbuf_r+0x28>
 800c56e:	f04f 37ff 	mov.w	r7, #4294967295
 800c572:	4638      	mov	r0, r7
 800c574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c576:	bf00      	nop
 800c578:	0800e638 	.word	0x0800e638
 800c57c:	0800e658 	.word	0x0800e658
 800c580:	0800e618 	.word	0x0800e618

0800c584 <__swsetup_r>:
 800c584:	4b32      	ldr	r3, [pc, #200]	; (800c650 <__swsetup_r+0xcc>)
 800c586:	b570      	push	{r4, r5, r6, lr}
 800c588:	681d      	ldr	r5, [r3, #0]
 800c58a:	4606      	mov	r6, r0
 800c58c:	460c      	mov	r4, r1
 800c58e:	b125      	cbz	r5, 800c59a <__swsetup_r+0x16>
 800c590:	69ab      	ldr	r3, [r5, #24]
 800c592:	b913      	cbnz	r3, 800c59a <__swsetup_r+0x16>
 800c594:	4628      	mov	r0, r5
 800c596:	f000 ff97 	bl	800d4c8 <__sinit>
 800c59a:	4b2e      	ldr	r3, [pc, #184]	; (800c654 <__swsetup_r+0xd0>)
 800c59c:	429c      	cmp	r4, r3
 800c59e:	d10f      	bne.n	800c5c0 <__swsetup_r+0x3c>
 800c5a0:	686c      	ldr	r4, [r5, #4]
 800c5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	0715      	lsls	r5, r2, #28
 800c5aa:	d42c      	bmi.n	800c606 <__swsetup_r+0x82>
 800c5ac:	06d0      	lsls	r0, r2, #27
 800c5ae:	d411      	bmi.n	800c5d4 <__swsetup_r+0x50>
 800c5b0:	2209      	movs	r2, #9
 800c5b2:	6032      	str	r2, [r6, #0]
 800c5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5b8:	81a3      	strh	r3, [r4, #12]
 800c5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c5be:	e03e      	b.n	800c63e <__swsetup_r+0xba>
 800c5c0:	4b25      	ldr	r3, [pc, #148]	; (800c658 <__swsetup_r+0xd4>)
 800c5c2:	429c      	cmp	r4, r3
 800c5c4:	d101      	bne.n	800c5ca <__swsetup_r+0x46>
 800c5c6:	68ac      	ldr	r4, [r5, #8]
 800c5c8:	e7eb      	b.n	800c5a2 <__swsetup_r+0x1e>
 800c5ca:	4b24      	ldr	r3, [pc, #144]	; (800c65c <__swsetup_r+0xd8>)
 800c5cc:	429c      	cmp	r4, r3
 800c5ce:	bf08      	it	eq
 800c5d0:	68ec      	ldreq	r4, [r5, #12]
 800c5d2:	e7e6      	b.n	800c5a2 <__swsetup_r+0x1e>
 800c5d4:	0751      	lsls	r1, r2, #29
 800c5d6:	d512      	bpl.n	800c5fe <__swsetup_r+0x7a>
 800c5d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5da:	b141      	cbz	r1, 800c5ee <__swsetup_r+0x6a>
 800c5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5e0:	4299      	cmp	r1, r3
 800c5e2:	d002      	beq.n	800c5ea <__swsetup_r+0x66>
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	f001 fb5d 	bl	800dca4 <_free_r>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	6363      	str	r3, [r4, #52]	; 0x34
 800c5ee:	89a3      	ldrh	r3, [r4, #12]
 800c5f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5f4:	81a3      	strh	r3, [r4, #12]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	6063      	str	r3, [r4, #4]
 800c5fa:	6923      	ldr	r3, [r4, #16]
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	89a3      	ldrh	r3, [r4, #12]
 800c600:	f043 0308 	orr.w	r3, r3, #8
 800c604:	81a3      	strh	r3, [r4, #12]
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	b94b      	cbnz	r3, 800c61e <__swsetup_r+0x9a>
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c614:	d003      	beq.n	800c61e <__swsetup_r+0x9a>
 800c616:	4621      	mov	r1, r4
 800c618:	4630      	mov	r0, r6
 800c61a:	f001 f811 	bl	800d640 <__smakebuf_r>
 800c61e:	89a2      	ldrh	r2, [r4, #12]
 800c620:	f012 0301 	ands.w	r3, r2, #1
 800c624:	d00c      	beq.n	800c640 <__swsetup_r+0xbc>
 800c626:	2300      	movs	r3, #0
 800c628:	60a3      	str	r3, [r4, #8]
 800c62a:	6963      	ldr	r3, [r4, #20]
 800c62c:	425b      	negs	r3, r3
 800c62e:	61a3      	str	r3, [r4, #24]
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	b953      	cbnz	r3, 800c64a <__swsetup_r+0xc6>
 800c634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c638:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c63c:	d1ba      	bne.n	800c5b4 <__swsetup_r+0x30>
 800c63e:	bd70      	pop	{r4, r5, r6, pc}
 800c640:	0792      	lsls	r2, r2, #30
 800c642:	bf58      	it	pl
 800c644:	6963      	ldrpl	r3, [r4, #20]
 800c646:	60a3      	str	r3, [r4, #8]
 800c648:	e7f2      	b.n	800c630 <__swsetup_r+0xac>
 800c64a:	2000      	movs	r0, #0
 800c64c:	e7f7      	b.n	800c63e <__swsetup_r+0xba>
 800c64e:	bf00      	nop
 800c650:	200013c4 	.word	0x200013c4
 800c654:	0800e638 	.word	0x0800e638
 800c658:	0800e658 	.word	0x0800e658
 800c65c:	0800e618 	.word	0x0800e618

0800c660 <quorem>:
 800c660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	6903      	ldr	r3, [r0, #16]
 800c666:	690c      	ldr	r4, [r1, #16]
 800c668:	42a3      	cmp	r3, r4
 800c66a:	4680      	mov	r8, r0
 800c66c:	f2c0 8082 	blt.w	800c774 <quorem+0x114>
 800c670:	3c01      	subs	r4, #1
 800c672:	f101 0714 	add.w	r7, r1, #20
 800c676:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c67a:	f100 0614 	add.w	r6, r0, #20
 800c67e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c682:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c686:	eb06 030c 	add.w	r3, r6, ip
 800c68a:	3501      	adds	r5, #1
 800c68c:	eb07 090c 	add.w	r9, r7, ip
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	fbb0 f5f5 	udiv	r5, r0, r5
 800c696:	b395      	cbz	r5, 800c6fe <quorem+0x9e>
 800c698:	f04f 0a00 	mov.w	sl, #0
 800c69c:	4638      	mov	r0, r7
 800c69e:	46b6      	mov	lr, r6
 800c6a0:	46d3      	mov	fp, sl
 800c6a2:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6a6:	b293      	uxth	r3, r2
 800c6a8:	fb05 a303 	mla	r3, r5, r3, sl
 800c6ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	ebab 0303 	sub.w	r3, fp, r3
 800c6b6:	0c12      	lsrs	r2, r2, #16
 800c6b8:	f8de b000 	ldr.w	fp, [lr]
 800c6bc:	fb05 a202 	mla	r2, r5, r2, sl
 800c6c0:	fa13 f38b 	uxtah	r3, r3, fp
 800c6c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c6c8:	fa1f fb82 	uxth.w	fp, r2
 800c6cc:	f8de 2000 	ldr.w	r2, [lr]
 800c6d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c6d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6de:	4581      	cmp	r9, r0
 800c6e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c6e4:	f84e 3b04 	str.w	r3, [lr], #4
 800c6e8:	d2db      	bcs.n	800c6a2 <quorem+0x42>
 800c6ea:	f856 300c 	ldr.w	r3, [r6, ip]
 800c6ee:	b933      	cbnz	r3, 800c6fe <quorem+0x9e>
 800c6f0:	9b01      	ldr	r3, [sp, #4]
 800c6f2:	3b04      	subs	r3, #4
 800c6f4:	429e      	cmp	r6, r3
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	d330      	bcc.n	800c75c <quorem+0xfc>
 800c6fa:	f8c8 4010 	str.w	r4, [r8, #16]
 800c6fe:	4640      	mov	r0, r8
 800c700:	f001 f9fc 	bl	800dafc <__mcmp>
 800c704:	2800      	cmp	r0, #0
 800c706:	db25      	blt.n	800c754 <quorem+0xf4>
 800c708:	3501      	adds	r5, #1
 800c70a:	4630      	mov	r0, r6
 800c70c:	f04f 0c00 	mov.w	ip, #0
 800c710:	f857 2b04 	ldr.w	r2, [r7], #4
 800c714:	f8d0 e000 	ldr.w	lr, [r0]
 800c718:	b293      	uxth	r3, r2
 800c71a:	ebac 0303 	sub.w	r3, ip, r3
 800c71e:	0c12      	lsrs	r2, r2, #16
 800c720:	fa13 f38e 	uxtah	r3, r3, lr
 800c724:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c728:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c732:	45b9      	cmp	r9, r7
 800c734:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c738:	f840 3b04 	str.w	r3, [r0], #4
 800c73c:	d2e8      	bcs.n	800c710 <quorem+0xb0>
 800c73e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c742:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c746:	b92a      	cbnz	r2, 800c754 <quorem+0xf4>
 800c748:	3b04      	subs	r3, #4
 800c74a:	429e      	cmp	r6, r3
 800c74c:	461a      	mov	r2, r3
 800c74e:	d30b      	bcc.n	800c768 <quorem+0x108>
 800c750:	f8c8 4010 	str.w	r4, [r8, #16]
 800c754:	4628      	mov	r0, r5
 800c756:	b003      	add	sp, #12
 800c758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75c:	6812      	ldr	r2, [r2, #0]
 800c75e:	3b04      	subs	r3, #4
 800c760:	2a00      	cmp	r2, #0
 800c762:	d1ca      	bne.n	800c6fa <quorem+0x9a>
 800c764:	3c01      	subs	r4, #1
 800c766:	e7c5      	b.n	800c6f4 <quorem+0x94>
 800c768:	6812      	ldr	r2, [r2, #0]
 800c76a:	3b04      	subs	r3, #4
 800c76c:	2a00      	cmp	r2, #0
 800c76e:	d1ef      	bne.n	800c750 <quorem+0xf0>
 800c770:	3c01      	subs	r4, #1
 800c772:	e7ea      	b.n	800c74a <quorem+0xea>
 800c774:	2000      	movs	r0, #0
 800c776:	e7ee      	b.n	800c756 <quorem+0xf6>

0800c778 <_dtoa_r>:
 800c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	ec57 6b10 	vmov	r6, r7, d0
 800c780:	b097      	sub	sp, #92	; 0x5c
 800c782:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c784:	9106      	str	r1, [sp, #24]
 800c786:	4604      	mov	r4, r0
 800c788:	920b      	str	r2, [sp, #44]	; 0x2c
 800c78a:	9312      	str	r3, [sp, #72]	; 0x48
 800c78c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c790:	e9cd 6700 	strd	r6, r7, [sp]
 800c794:	b93d      	cbnz	r5, 800c7a6 <_dtoa_r+0x2e>
 800c796:	2010      	movs	r0, #16
 800c798:	f000 ff92 	bl	800d6c0 <malloc>
 800c79c:	6260      	str	r0, [r4, #36]	; 0x24
 800c79e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c7a2:	6005      	str	r5, [r0, #0]
 800c7a4:	60c5      	str	r5, [r0, #12]
 800c7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7a8:	6819      	ldr	r1, [r3, #0]
 800c7aa:	b151      	cbz	r1, 800c7c2 <_dtoa_r+0x4a>
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	604a      	str	r2, [r1, #4]
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	4093      	lsls	r3, r2
 800c7b4:	608b      	str	r3, [r1, #8]
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f000 ffbe 	bl	800d738 <_Bfree>
 800c7bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7be:	2200      	movs	r2, #0
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	1e3b      	subs	r3, r7, #0
 800c7c4:	bfbb      	ittet	lt
 800c7c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7ca:	9301      	strlt	r3, [sp, #4]
 800c7cc:	2300      	movge	r3, #0
 800c7ce:	2201      	movlt	r2, #1
 800c7d0:	bfac      	ite	ge
 800c7d2:	f8c8 3000 	strge.w	r3, [r8]
 800c7d6:	f8c8 2000 	strlt.w	r2, [r8]
 800c7da:	4baf      	ldr	r3, [pc, #700]	; (800ca98 <_dtoa_r+0x320>)
 800c7dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c7e0:	ea33 0308 	bics.w	r3, r3, r8
 800c7e4:	d114      	bne.n	800c810 <_dtoa_r+0x98>
 800c7e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7ec:	6013      	str	r3, [r2, #0]
 800c7ee:	9b00      	ldr	r3, [sp, #0]
 800c7f0:	b923      	cbnz	r3, 800c7fc <_dtoa_r+0x84>
 800c7f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	f000 8542 	beq.w	800d280 <_dtoa_r+0xb08>
 800c7fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800caac <_dtoa_r+0x334>
 800c802:	2b00      	cmp	r3, #0
 800c804:	f000 8544 	beq.w	800d290 <_dtoa_r+0xb18>
 800c808:	f10b 0303 	add.w	r3, fp, #3
 800c80c:	f000 bd3e 	b.w	800d28c <_dtoa_r+0xb14>
 800c810:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c814:	2200      	movs	r2, #0
 800c816:	2300      	movs	r3, #0
 800c818:	4630      	mov	r0, r6
 800c81a:	4639      	mov	r1, r7
 800c81c:	f7f4 f954 	bl	8000ac8 <__aeabi_dcmpeq>
 800c820:	4681      	mov	r9, r0
 800c822:	b168      	cbz	r0, 800c840 <_dtoa_r+0xc8>
 800c824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c826:	2301      	movs	r3, #1
 800c828:	6013      	str	r3, [r2, #0]
 800c82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f000 8524 	beq.w	800d27a <_dtoa_r+0xb02>
 800c832:	4b9a      	ldr	r3, [pc, #616]	; (800ca9c <_dtoa_r+0x324>)
 800c834:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c836:	f103 3bff 	add.w	fp, r3, #4294967295
 800c83a:	6013      	str	r3, [r2, #0]
 800c83c:	f000 bd28 	b.w	800d290 <_dtoa_r+0xb18>
 800c840:	aa14      	add	r2, sp, #80	; 0x50
 800c842:	a915      	add	r1, sp, #84	; 0x54
 800c844:	ec47 6b10 	vmov	d0, r6, r7
 800c848:	4620      	mov	r0, r4
 800c84a:	f001 f9ce 	bl	800dbea <__d2b>
 800c84e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c852:	9004      	str	r0, [sp, #16]
 800c854:	2d00      	cmp	r5, #0
 800c856:	d07c      	beq.n	800c952 <_dtoa_r+0x1da>
 800c858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c85c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c860:	46b2      	mov	sl, r6
 800c862:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c86a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c86e:	2200      	movs	r2, #0
 800c870:	4b8b      	ldr	r3, [pc, #556]	; (800caa0 <_dtoa_r+0x328>)
 800c872:	4650      	mov	r0, sl
 800c874:	4659      	mov	r1, fp
 800c876:	f7f3 fd07 	bl	8000288 <__aeabi_dsub>
 800c87a:	a381      	add	r3, pc, #516	; (adr r3, 800ca80 <_dtoa_r+0x308>)
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	f7f3 feba 	bl	80005f8 <__aeabi_dmul>
 800c884:	a380      	add	r3, pc, #512	; (adr r3, 800ca88 <_dtoa_r+0x310>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f7f3 fcff 	bl	800028c <__adddf3>
 800c88e:	4606      	mov	r6, r0
 800c890:	4628      	mov	r0, r5
 800c892:	460f      	mov	r7, r1
 800c894:	f7f3 fe46 	bl	8000524 <__aeabi_i2d>
 800c898:	a37d      	add	r3, pc, #500	; (adr r3, 800ca90 <_dtoa_r+0x318>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7f3 feab 	bl	80005f8 <__aeabi_dmul>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f3 fcef 	bl	800028c <__adddf3>
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	460f      	mov	r7, r1
 800c8b2:	f7f4 f951 	bl	8000b58 <__aeabi_d2iz>
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	4682      	mov	sl, r0
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	4630      	mov	r0, r6
 800c8be:	4639      	mov	r1, r7
 800c8c0:	f7f4 f90c 	bl	8000adc <__aeabi_dcmplt>
 800c8c4:	b148      	cbz	r0, 800c8da <_dtoa_r+0x162>
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	f7f3 fe2c 	bl	8000524 <__aeabi_i2d>
 800c8cc:	4632      	mov	r2, r6
 800c8ce:	463b      	mov	r3, r7
 800c8d0:	f7f4 f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8d4:	b908      	cbnz	r0, 800c8da <_dtoa_r+0x162>
 800c8d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8da:	f1ba 0f16 	cmp.w	sl, #22
 800c8de:	d859      	bhi.n	800c994 <_dtoa_r+0x21c>
 800c8e0:	4970      	ldr	r1, [pc, #448]	; (800caa4 <_dtoa_r+0x32c>)
 800c8e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c8e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ee:	f7f4 f913 	bl	8000b18 <__aeabi_dcmpgt>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d050      	beq.n	800c998 <_dtoa_r+0x220>
 800c8f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c900:	1b5d      	subs	r5, r3, r5
 800c902:	f1b5 0801 	subs.w	r8, r5, #1
 800c906:	bf49      	itett	mi
 800c908:	f1c5 0301 	rsbmi	r3, r5, #1
 800c90c:	2300      	movpl	r3, #0
 800c90e:	9305      	strmi	r3, [sp, #20]
 800c910:	f04f 0800 	movmi.w	r8, #0
 800c914:	bf58      	it	pl
 800c916:	9305      	strpl	r3, [sp, #20]
 800c918:	f1ba 0f00 	cmp.w	sl, #0
 800c91c:	db3e      	blt.n	800c99c <_dtoa_r+0x224>
 800c91e:	2300      	movs	r3, #0
 800c920:	44d0      	add	r8, sl
 800c922:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c926:	9307      	str	r3, [sp, #28]
 800c928:	9b06      	ldr	r3, [sp, #24]
 800c92a:	2b09      	cmp	r3, #9
 800c92c:	f200 8090 	bhi.w	800ca50 <_dtoa_r+0x2d8>
 800c930:	2b05      	cmp	r3, #5
 800c932:	bfc4      	itt	gt
 800c934:	3b04      	subgt	r3, #4
 800c936:	9306      	strgt	r3, [sp, #24]
 800c938:	9b06      	ldr	r3, [sp, #24]
 800c93a:	f1a3 0302 	sub.w	r3, r3, #2
 800c93e:	bfcc      	ite	gt
 800c940:	2500      	movgt	r5, #0
 800c942:	2501      	movle	r5, #1
 800c944:	2b03      	cmp	r3, #3
 800c946:	f200 808f 	bhi.w	800ca68 <_dtoa_r+0x2f0>
 800c94a:	e8df f003 	tbb	[pc, r3]
 800c94e:	7f7d      	.short	0x7f7d
 800c950:	7131      	.short	0x7131
 800c952:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c956:	441d      	add	r5, r3
 800c958:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c95c:	2820      	cmp	r0, #32
 800c95e:	dd13      	ble.n	800c988 <_dtoa_r+0x210>
 800c960:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c964:	9b00      	ldr	r3, [sp, #0]
 800c966:	fa08 f800 	lsl.w	r8, r8, r0
 800c96a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c96e:	fa23 f000 	lsr.w	r0, r3, r0
 800c972:	ea48 0000 	orr.w	r0, r8, r0
 800c976:	f7f3 fdc5 	bl	8000504 <__aeabi_ui2d>
 800c97a:	2301      	movs	r3, #1
 800c97c:	4682      	mov	sl, r0
 800c97e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c982:	3d01      	subs	r5, #1
 800c984:	9313      	str	r3, [sp, #76]	; 0x4c
 800c986:	e772      	b.n	800c86e <_dtoa_r+0xf6>
 800c988:	9b00      	ldr	r3, [sp, #0]
 800c98a:	f1c0 0020 	rsb	r0, r0, #32
 800c98e:	fa03 f000 	lsl.w	r0, r3, r0
 800c992:	e7f0      	b.n	800c976 <_dtoa_r+0x1fe>
 800c994:	2301      	movs	r3, #1
 800c996:	e7b1      	b.n	800c8fc <_dtoa_r+0x184>
 800c998:	900f      	str	r0, [sp, #60]	; 0x3c
 800c99a:	e7b0      	b.n	800c8fe <_dtoa_r+0x186>
 800c99c:	9b05      	ldr	r3, [sp, #20]
 800c99e:	eba3 030a 	sub.w	r3, r3, sl
 800c9a2:	9305      	str	r3, [sp, #20]
 800c9a4:	f1ca 0300 	rsb	r3, sl, #0
 800c9a8:	9307      	str	r3, [sp, #28]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	930e      	str	r3, [sp, #56]	; 0x38
 800c9ae:	e7bb      	b.n	800c928 <_dtoa_r+0x1b0>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	dd59      	ble.n	800ca6e <_dtoa_r+0x2f6>
 800c9ba:	9302      	str	r3, [sp, #8]
 800c9bc:	4699      	mov	r9, r3
 800c9be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	6072      	str	r2, [r6, #4]
 800c9c4:	2204      	movs	r2, #4
 800c9c6:	f102 0014 	add.w	r0, r2, #20
 800c9ca:	4298      	cmp	r0, r3
 800c9cc:	6871      	ldr	r1, [r6, #4]
 800c9ce:	d953      	bls.n	800ca78 <_dtoa_r+0x300>
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f000 fe7d 	bl	800d6d0 <_Balloc>
 800c9d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9d8:	6030      	str	r0, [r6, #0]
 800c9da:	f1b9 0f0e 	cmp.w	r9, #14
 800c9de:	f8d3 b000 	ldr.w	fp, [r3]
 800c9e2:	f200 80e6 	bhi.w	800cbb2 <_dtoa_r+0x43a>
 800c9e6:	2d00      	cmp	r5, #0
 800c9e8:	f000 80e3 	beq.w	800cbb2 <_dtoa_r+0x43a>
 800c9ec:	ed9d 7b00 	vldr	d7, [sp]
 800c9f0:	f1ba 0f00 	cmp.w	sl, #0
 800c9f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c9f8:	dd74      	ble.n	800cae4 <_dtoa_r+0x36c>
 800c9fa:	4a2a      	ldr	r2, [pc, #168]	; (800caa4 <_dtoa_r+0x32c>)
 800c9fc:	f00a 030f 	and.w	r3, sl, #15
 800ca00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca04:	ed93 7b00 	vldr	d7, [r3]
 800ca08:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ca0c:	06f0      	lsls	r0, r6, #27
 800ca0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ca12:	d565      	bpl.n	800cae0 <_dtoa_r+0x368>
 800ca14:	4b24      	ldr	r3, [pc, #144]	; (800caa8 <_dtoa_r+0x330>)
 800ca16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca1e:	f7f3 ff15 	bl	800084c <__aeabi_ddiv>
 800ca22:	e9cd 0100 	strd	r0, r1, [sp]
 800ca26:	f006 060f 	and.w	r6, r6, #15
 800ca2a:	2503      	movs	r5, #3
 800ca2c:	4f1e      	ldr	r7, [pc, #120]	; (800caa8 <_dtoa_r+0x330>)
 800ca2e:	e04c      	b.n	800caca <_dtoa_r+0x352>
 800ca30:	2301      	movs	r3, #1
 800ca32:	930a      	str	r3, [sp, #40]	; 0x28
 800ca34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca36:	4453      	add	r3, sl
 800ca38:	f103 0901 	add.w	r9, r3, #1
 800ca3c:	9302      	str	r3, [sp, #8]
 800ca3e:	464b      	mov	r3, r9
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	bfb8      	it	lt
 800ca44:	2301      	movlt	r3, #1
 800ca46:	e7ba      	b.n	800c9be <_dtoa_r+0x246>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	e7b2      	b.n	800c9b2 <_dtoa_r+0x23a>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	e7f0      	b.n	800ca32 <_dtoa_r+0x2ba>
 800ca50:	2501      	movs	r5, #1
 800ca52:	2300      	movs	r3, #0
 800ca54:	9306      	str	r3, [sp, #24]
 800ca56:	950a      	str	r5, [sp, #40]	; 0x28
 800ca58:	f04f 33ff 	mov.w	r3, #4294967295
 800ca5c:	9302      	str	r3, [sp, #8]
 800ca5e:	4699      	mov	r9, r3
 800ca60:	2200      	movs	r2, #0
 800ca62:	2312      	movs	r3, #18
 800ca64:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca66:	e7aa      	b.n	800c9be <_dtoa_r+0x246>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca6c:	e7f4      	b.n	800ca58 <_dtoa_r+0x2e0>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	9302      	str	r3, [sp, #8]
 800ca72:	4699      	mov	r9, r3
 800ca74:	461a      	mov	r2, r3
 800ca76:	e7f5      	b.n	800ca64 <_dtoa_r+0x2ec>
 800ca78:	3101      	adds	r1, #1
 800ca7a:	6071      	str	r1, [r6, #4]
 800ca7c:	0052      	lsls	r2, r2, #1
 800ca7e:	e7a2      	b.n	800c9c6 <_dtoa_r+0x24e>
 800ca80:	636f4361 	.word	0x636f4361
 800ca84:	3fd287a7 	.word	0x3fd287a7
 800ca88:	8b60c8b3 	.word	0x8b60c8b3
 800ca8c:	3fc68a28 	.word	0x3fc68a28
 800ca90:	509f79fb 	.word	0x509f79fb
 800ca94:	3fd34413 	.word	0x3fd34413
 800ca98:	7ff00000 	.word	0x7ff00000
 800ca9c:	0800e5e5 	.word	0x0800e5e5
 800caa0:	3ff80000 	.word	0x3ff80000
 800caa4:	0800e6a0 	.word	0x0800e6a0
 800caa8:	0800e678 	.word	0x0800e678
 800caac:	0800e611 	.word	0x0800e611
 800cab0:	07f1      	lsls	r1, r6, #31
 800cab2:	d508      	bpl.n	800cac6 <_dtoa_r+0x34e>
 800cab4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cabc:	f7f3 fd9c 	bl	80005f8 <__aeabi_dmul>
 800cac0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cac4:	3501      	adds	r5, #1
 800cac6:	1076      	asrs	r6, r6, #1
 800cac8:	3708      	adds	r7, #8
 800caca:	2e00      	cmp	r6, #0
 800cacc:	d1f0      	bne.n	800cab0 <_dtoa_r+0x338>
 800cace:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cad2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cad6:	f7f3 feb9 	bl	800084c <__aeabi_ddiv>
 800cada:	e9cd 0100 	strd	r0, r1, [sp]
 800cade:	e01a      	b.n	800cb16 <_dtoa_r+0x39e>
 800cae0:	2502      	movs	r5, #2
 800cae2:	e7a3      	b.n	800ca2c <_dtoa_r+0x2b4>
 800cae4:	f000 80a0 	beq.w	800cc28 <_dtoa_r+0x4b0>
 800cae8:	f1ca 0600 	rsb	r6, sl, #0
 800caec:	4b9f      	ldr	r3, [pc, #636]	; (800cd6c <_dtoa_r+0x5f4>)
 800caee:	4fa0      	ldr	r7, [pc, #640]	; (800cd70 <_dtoa_r+0x5f8>)
 800caf0:	f006 020f 	and.w	r2, r6, #15
 800caf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb00:	f7f3 fd7a 	bl	80005f8 <__aeabi_dmul>
 800cb04:	e9cd 0100 	strd	r0, r1, [sp]
 800cb08:	1136      	asrs	r6, r6, #4
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	2502      	movs	r5, #2
 800cb0e:	2e00      	cmp	r6, #0
 800cb10:	d17f      	bne.n	800cc12 <_dtoa_r+0x49a>
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1e1      	bne.n	800cada <_dtoa_r+0x362>
 800cb16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f000 8087 	beq.w	800cc2c <_dtoa_r+0x4b4>
 800cb1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb22:	2200      	movs	r2, #0
 800cb24:	4b93      	ldr	r3, [pc, #588]	; (800cd74 <_dtoa_r+0x5fc>)
 800cb26:	4630      	mov	r0, r6
 800cb28:	4639      	mov	r1, r7
 800cb2a:	f7f3 ffd7 	bl	8000adc <__aeabi_dcmplt>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d07c      	beq.n	800cc2c <_dtoa_r+0x4b4>
 800cb32:	f1b9 0f00 	cmp.w	r9, #0
 800cb36:	d079      	beq.n	800cc2c <_dtoa_r+0x4b4>
 800cb38:	9b02      	ldr	r3, [sp, #8]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	dd35      	ble.n	800cbaa <_dtoa_r+0x432>
 800cb3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cb42:	9308      	str	r3, [sp, #32]
 800cb44:	4639      	mov	r1, r7
 800cb46:	2200      	movs	r2, #0
 800cb48:	4b8b      	ldr	r3, [pc, #556]	; (800cd78 <_dtoa_r+0x600>)
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f7f3 fd54 	bl	80005f8 <__aeabi_dmul>
 800cb50:	e9cd 0100 	strd	r0, r1, [sp]
 800cb54:	9f02      	ldr	r7, [sp, #8]
 800cb56:	3501      	adds	r5, #1
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f7f3 fce3 	bl	8000524 <__aeabi_i2d>
 800cb5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb62:	f7f3 fd49 	bl	80005f8 <__aeabi_dmul>
 800cb66:	2200      	movs	r2, #0
 800cb68:	4b84      	ldr	r3, [pc, #528]	; (800cd7c <_dtoa_r+0x604>)
 800cb6a:	f7f3 fb8f 	bl	800028c <__adddf3>
 800cb6e:	4605      	mov	r5, r0
 800cb70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cb74:	2f00      	cmp	r7, #0
 800cb76:	d15d      	bne.n	800cc34 <_dtoa_r+0x4bc>
 800cb78:	2200      	movs	r2, #0
 800cb7a:	4b81      	ldr	r3, [pc, #516]	; (800cd80 <_dtoa_r+0x608>)
 800cb7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb80:	f7f3 fb82 	bl	8000288 <__aeabi_dsub>
 800cb84:	462a      	mov	r2, r5
 800cb86:	4633      	mov	r3, r6
 800cb88:	e9cd 0100 	strd	r0, r1, [sp]
 800cb8c:	f7f3 ffc4 	bl	8000b18 <__aeabi_dcmpgt>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	f040 8288 	bne.w	800d0a6 <_dtoa_r+0x92e>
 800cb96:	462a      	mov	r2, r5
 800cb98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cb9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cba0:	f7f3 ff9c 	bl	8000adc <__aeabi_dcmplt>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	f040 827c 	bne.w	800d0a2 <_dtoa_r+0x92a>
 800cbaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cbae:	e9cd 2300 	strd	r2, r3, [sp]
 800cbb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f2c0 8150 	blt.w	800ce5a <_dtoa_r+0x6e2>
 800cbba:	f1ba 0f0e 	cmp.w	sl, #14
 800cbbe:	f300 814c 	bgt.w	800ce5a <_dtoa_r+0x6e2>
 800cbc2:	4b6a      	ldr	r3, [pc, #424]	; (800cd6c <_dtoa_r+0x5f4>)
 800cbc4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cbc8:	ed93 7b00 	vldr	d7, [r3]
 800cbcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbd4:	f280 80d8 	bge.w	800cd88 <_dtoa_r+0x610>
 800cbd8:	f1b9 0f00 	cmp.w	r9, #0
 800cbdc:	f300 80d4 	bgt.w	800cd88 <_dtoa_r+0x610>
 800cbe0:	f040 825e 	bne.w	800d0a0 <_dtoa_r+0x928>
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	4b66      	ldr	r3, [pc, #408]	; (800cd80 <_dtoa_r+0x608>)
 800cbe8:	ec51 0b17 	vmov	r0, r1, d7
 800cbec:	f7f3 fd04 	bl	80005f8 <__aeabi_dmul>
 800cbf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbf4:	f7f3 ff86 	bl	8000b04 <__aeabi_dcmpge>
 800cbf8:	464f      	mov	r7, r9
 800cbfa:	464e      	mov	r6, r9
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	f040 8234 	bne.w	800d06a <_dtoa_r+0x8f2>
 800cc02:	2331      	movs	r3, #49	; 0x31
 800cc04:	f10b 0501 	add.w	r5, fp, #1
 800cc08:	f88b 3000 	strb.w	r3, [fp]
 800cc0c:	f10a 0a01 	add.w	sl, sl, #1
 800cc10:	e22f      	b.n	800d072 <_dtoa_r+0x8fa>
 800cc12:	07f2      	lsls	r2, r6, #31
 800cc14:	d505      	bpl.n	800cc22 <_dtoa_r+0x4aa>
 800cc16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc1a:	f7f3 fced 	bl	80005f8 <__aeabi_dmul>
 800cc1e:	3501      	adds	r5, #1
 800cc20:	2301      	movs	r3, #1
 800cc22:	1076      	asrs	r6, r6, #1
 800cc24:	3708      	adds	r7, #8
 800cc26:	e772      	b.n	800cb0e <_dtoa_r+0x396>
 800cc28:	2502      	movs	r5, #2
 800cc2a:	e774      	b.n	800cb16 <_dtoa_r+0x39e>
 800cc2c:	f8cd a020 	str.w	sl, [sp, #32]
 800cc30:	464f      	mov	r7, r9
 800cc32:	e791      	b.n	800cb58 <_dtoa_r+0x3e0>
 800cc34:	4b4d      	ldr	r3, [pc, #308]	; (800cd6c <_dtoa_r+0x5f4>)
 800cc36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d047      	beq.n	800ccd4 <_dtoa_r+0x55c>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	2000      	movs	r0, #0
 800cc4a:	494e      	ldr	r1, [pc, #312]	; (800cd84 <_dtoa_r+0x60c>)
 800cc4c:	f7f3 fdfe 	bl	800084c <__aeabi_ddiv>
 800cc50:	462a      	mov	r2, r5
 800cc52:	4633      	mov	r3, r6
 800cc54:	f7f3 fb18 	bl	8000288 <__aeabi_dsub>
 800cc58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc5c:	465d      	mov	r5, fp
 800cc5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc62:	f7f3 ff79 	bl	8000b58 <__aeabi_d2iz>
 800cc66:	4606      	mov	r6, r0
 800cc68:	f7f3 fc5c 	bl	8000524 <__aeabi_i2d>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc74:	f7f3 fb08 	bl	8000288 <__aeabi_dsub>
 800cc78:	3630      	adds	r6, #48	; 0x30
 800cc7a:	f805 6b01 	strb.w	r6, [r5], #1
 800cc7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc82:	e9cd 0100 	strd	r0, r1, [sp]
 800cc86:	f7f3 ff29 	bl	8000adc <__aeabi_dcmplt>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d163      	bne.n	800cd56 <_dtoa_r+0x5de>
 800cc8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc92:	2000      	movs	r0, #0
 800cc94:	4937      	ldr	r1, [pc, #220]	; (800cd74 <_dtoa_r+0x5fc>)
 800cc96:	f7f3 faf7 	bl	8000288 <__aeabi_dsub>
 800cc9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc9e:	f7f3 ff1d 	bl	8000adc <__aeabi_dcmplt>
 800cca2:	2800      	cmp	r0, #0
 800cca4:	f040 80b7 	bne.w	800ce16 <_dtoa_r+0x69e>
 800cca8:	eba5 030b 	sub.w	r3, r5, fp
 800ccac:	429f      	cmp	r7, r3
 800ccae:	f77f af7c 	ble.w	800cbaa <_dtoa_r+0x432>
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	4b30      	ldr	r3, [pc, #192]	; (800cd78 <_dtoa_r+0x600>)
 800ccb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ccba:	f7f3 fc9d 	bl	80005f8 <__aeabi_dmul>
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ccc4:	4b2c      	ldr	r3, [pc, #176]	; (800cd78 <_dtoa_r+0x600>)
 800ccc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccca:	f7f3 fc95 	bl	80005f8 <__aeabi_dmul>
 800ccce:	e9cd 0100 	strd	r0, r1, [sp]
 800ccd2:	e7c4      	b.n	800cc5e <_dtoa_r+0x4e6>
 800ccd4:	462a      	mov	r2, r5
 800ccd6:	4633      	mov	r3, r6
 800ccd8:	f7f3 fc8e 	bl	80005f8 <__aeabi_dmul>
 800ccdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cce0:	eb0b 0507 	add.w	r5, fp, r7
 800cce4:	465e      	mov	r6, fp
 800cce6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccea:	f7f3 ff35 	bl	8000b58 <__aeabi_d2iz>
 800ccee:	4607      	mov	r7, r0
 800ccf0:	f7f3 fc18 	bl	8000524 <__aeabi_i2d>
 800ccf4:	3730      	adds	r7, #48	; 0x30
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccfe:	f7f3 fac3 	bl	8000288 <__aeabi_dsub>
 800cd02:	f806 7b01 	strb.w	r7, [r6], #1
 800cd06:	42ae      	cmp	r6, r5
 800cd08:	e9cd 0100 	strd	r0, r1, [sp]
 800cd0c:	f04f 0200 	mov.w	r2, #0
 800cd10:	d126      	bne.n	800cd60 <_dtoa_r+0x5e8>
 800cd12:	4b1c      	ldr	r3, [pc, #112]	; (800cd84 <_dtoa_r+0x60c>)
 800cd14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd18:	f7f3 fab8 	bl	800028c <__adddf3>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd24:	f7f3 fef8 	bl	8000b18 <__aeabi_dcmpgt>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d174      	bne.n	800ce16 <_dtoa_r+0x69e>
 800cd2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cd30:	2000      	movs	r0, #0
 800cd32:	4914      	ldr	r1, [pc, #80]	; (800cd84 <_dtoa_r+0x60c>)
 800cd34:	f7f3 faa8 	bl	8000288 <__aeabi_dsub>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd40:	f7f3 fecc 	bl	8000adc <__aeabi_dcmplt>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	f43f af30 	beq.w	800cbaa <_dtoa_r+0x432>
 800cd4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd4e:	2b30      	cmp	r3, #48	; 0x30
 800cd50:	f105 32ff 	add.w	r2, r5, #4294967295
 800cd54:	d002      	beq.n	800cd5c <_dtoa_r+0x5e4>
 800cd56:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cd5a:	e04a      	b.n	800cdf2 <_dtoa_r+0x67a>
 800cd5c:	4615      	mov	r5, r2
 800cd5e:	e7f4      	b.n	800cd4a <_dtoa_r+0x5d2>
 800cd60:	4b05      	ldr	r3, [pc, #20]	; (800cd78 <_dtoa_r+0x600>)
 800cd62:	f7f3 fc49 	bl	80005f8 <__aeabi_dmul>
 800cd66:	e9cd 0100 	strd	r0, r1, [sp]
 800cd6a:	e7bc      	b.n	800cce6 <_dtoa_r+0x56e>
 800cd6c:	0800e6a0 	.word	0x0800e6a0
 800cd70:	0800e678 	.word	0x0800e678
 800cd74:	3ff00000 	.word	0x3ff00000
 800cd78:	40240000 	.word	0x40240000
 800cd7c:	401c0000 	.word	0x401c0000
 800cd80:	40140000 	.word	0x40140000
 800cd84:	3fe00000 	.word	0x3fe00000
 800cd88:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd8c:	465d      	mov	r5, fp
 800cd8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd92:	4630      	mov	r0, r6
 800cd94:	4639      	mov	r1, r7
 800cd96:	f7f3 fd59 	bl	800084c <__aeabi_ddiv>
 800cd9a:	f7f3 fedd 	bl	8000b58 <__aeabi_d2iz>
 800cd9e:	4680      	mov	r8, r0
 800cda0:	f7f3 fbc0 	bl	8000524 <__aeabi_i2d>
 800cda4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cda8:	f7f3 fc26 	bl	80005f8 <__aeabi_dmul>
 800cdac:	4602      	mov	r2, r0
 800cdae:	460b      	mov	r3, r1
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	4639      	mov	r1, r7
 800cdb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cdb8:	f7f3 fa66 	bl	8000288 <__aeabi_dsub>
 800cdbc:	f805 6b01 	strb.w	r6, [r5], #1
 800cdc0:	eba5 060b 	sub.w	r6, r5, fp
 800cdc4:	45b1      	cmp	r9, r6
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	d139      	bne.n	800ce40 <_dtoa_r+0x6c8>
 800cdcc:	f7f3 fa5e 	bl	800028c <__adddf3>
 800cdd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	f7f3 fe9e 	bl	8000b18 <__aeabi_dcmpgt>
 800cddc:	b9c8      	cbnz	r0, 800ce12 <_dtoa_r+0x69a>
 800cdde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cde2:	4630      	mov	r0, r6
 800cde4:	4639      	mov	r1, r7
 800cde6:	f7f3 fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdea:	b110      	cbz	r0, 800cdf2 <_dtoa_r+0x67a>
 800cdec:	f018 0f01 	tst.w	r8, #1
 800cdf0:	d10f      	bne.n	800ce12 <_dtoa_r+0x69a>
 800cdf2:	9904      	ldr	r1, [sp, #16]
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f000 fc9f 	bl	800d738 <_Bfree>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdfe:	702b      	strb	r3, [r5, #0]
 800ce00:	f10a 0301 	add.w	r3, sl, #1
 800ce04:	6013      	str	r3, [r2, #0]
 800ce06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 8241 	beq.w	800d290 <_dtoa_r+0xb18>
 800ce0e:	601d      	str	r5, [r3, #0]
 800ce10:	e23e      	b.n	800d290 <_dtoa_r+0xb18>
 800ce12:	f8cd a020 	str.w	sl, [sp, #32]
 800ce16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce1a:	2a39      	cmp	r2, #57	; 0x39
 800ce1c:	f105 33ff 	add.w	r3, r5, #4294967295
 800ce20:	d108      	bne.n	800ce34 <_dtoa_r+0x6bc>
 800ce22:	459b      	cmp	fp, r3
 800ce24:	d10a      	bne.n	800ce3c <_dtoa_r+0x6c4>
 800ce26:	9b08      	ldr	r3, [sp, #32]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	9308      	str	r3, [sp, #32]
 800ce2c:	2330      	movs	r3, #48	; 0x30
 800ce2e:	f88b 3000 	strb.w	r3, [fp]
 800ce32:	465b      	mov	r3, fp
 800ce34:	781a      	ldrb	r2, [r3, #0]
 800ce36:	3201      	adds	r2, #1
 800ce38:	701a      	strb	r2, [r3, #0]
 800ce3a:	e78c      	b.n	800cd56 <_dtoa_r+0x5de>
 800ce3c:	461d      	mov	r5, r3
 800ce3e:	e7ea      	b.n	800ce16 <_dtoa_r+0x69e>
 800ce40:	2200      	movs	r2, #0
 800ce42:	4b9b      	ldr	r3, [pc, #620]	; (800d0b0 <_dtoa_r+0x938>)
 800ce44:	f7f3 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ce48:	2200      	movs	r2, #0
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	460f      	mov	r7, r1
 800ce50:	f7f3 fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d09a      	beq.n	800cd8e <_dtoa_r+0x616>
 800ce58:	e7cb      	b.n	800cdf2 <_dtoa_r+0x67a>
 800ce5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce5c:	2a00      	cmp	r2, #0
 800ce5e:	f000 808b 	beq.w	800cf78 <_dtoa_r+0x800>
 800ce62:	9a06      	ldr	r2, [sp, #24]
 800ce64:	2a01      	cmp	r2, #1
 800ce66:	dc6e      	bgt.n	800cf46 <_dtoa_r+0x7ce>
 800ce68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce6a:	2a00      	cmp	r2, #0
 800ce6c:	d067      	beq.n	800cf3e <_dtoa_r+0x7c6>
 800ce6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce72:	9f07      	ldr	r7, [sp, #28]
 800ce74:	9d05      	ldr	r5, [sp, #20]
 800ce76:	9a05      	ldr	r2, [sp, #20]
 800ce78:	2101      	movs	r1, #1
 800ce7a:	441a      	add	r2, r3
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	9205      	str	r2, [sp, #20]
 800ce80:	4498      	add	r8, r3
 800ce82:	f000 fcf9 	bl	800d878 <__i2b>
 800ce86:	4606      	mov	r6, r0
 800ce88:	2d00      	cmp	r5, #0
 800ce8a:	dd0c      	ble.n	800cea6 <_dtoa_r+0x72e>
 800ce8c:	f1b8 0f00 	cmp.w	r8, #0
 800ce90:	dd09      	ble.n	800cea6 <_dtoa_r+0x72e>
 800ce92:	4545      	cmp	r5, r8
 800ce94:	9a05      	ldr	r2, [sp, #20]
 800ce96:	462b      	mov	r3, r5
 800ce98:	bfa8      	it	ge
 800ce9a:	4643      	movge	r3, r8
 800ce9c:	1ad2      	subs	r2, r2, r3
 800ce9e:	9205      	str	r2, [sp, #20]
 800cea0:	1aed      	subs	r5, r5, r3
 800cea2:	eba8 0803 	sub.w	r8, r8, r3
 800cea6:	9b07      	ldr	r3, [sp, #28]
 800cea8:	b1eb      	cbz	r3, 800cee6 <_dtoa_r+0x76e>
 800ceaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d067      	beq.n	800cf80 <_dtoa_r+0x808>
 800ceb0:	b18f      	cbz	r7, 800ced6 <_dtoa_r+0x75e>
 800ceb2:	4631      	mov	r1, r6
 800ceb4:	463a      	mov	r2, r7
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f000 fd7e 	bl	800d9b8 <__pow5mult>
 800cebc:	9a04      	ldr	r2, [sp, #16]
 800cebe:	4601      	mov	r1, r0
 800cec0:	4606      	mov	r6, r0
 800cec2:	4620      	mov	r0, r4
 800cec4:	f000 fce1 	bl	800d88a <__multiply>
 800cec8:	9904      	ldr	r1, [sp, #16]
 800ceca:	9008      	str	r0, [sp, #32]
 800cecc:	4620      	mov	r0, r4
 800cece:	f000 fc33 	bl	800d738 <_Bfree>
 800ced2:	9b08      	ldr	r3, [sp, #32]
 800ced4:	9304      	str	r3, [sp, #16]
 800ced6:	9b07      	ldr	r3, [sp, #28]
 800ced8:	1bda      	subs	r2, r3, r7
 800ceda:	d004      	beq.n	800cee6 <_dtoa_r+0x76e>
 800cedc:	9904      	ldr	r1, [sp, #16]
 800cede:	4620      	mov	r0, r4
 800cee0:	f000 fd6a 	bl	800d9b8 <__pow5mult>
 800cee4:	9004      	str	r0, [sp, #16]
 800cee6:	2101      	movs	r1, #1
 800cee8:	4620      	mov	r0, r4
 800ceea:	f000 fcc5 	bl	800d878 <__i2b>
 800ceee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cef0:	4607      	mov	r7, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f000 81d0 	beq.w	800d298 <_dtoa_r+0xb20>
 800cef8:	461a      	mov	r2, r3
 800cefa:	4601      	mov	r1, r0
 800cefc:	4620      	mov	r0, r4
 800cefe:	f000 fd5b 	bl	800d9b8 <__pow5mult>
 800cf02:	9b06      	ldr	r3, [sp, #24]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	4607      	mov	r7, r0
 800cf08:	dc40      	bgt.n	800cf8c <_dtoa_r+0x814>
 800cf0a:	9b00      	ldr	r3, [sp, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d139      	bne.n	800cf84 <_dtoa_r+0x80c>
 800cf10:	9b01      	ldr	r3, [sp, #4]
 800cf12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d136      	bne.n	800cf88 <_dtoa_r+0x810>
 800cf1a:	9b01      	ldr	r3, [sp, #4]
 800cf1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf20:	0d1b      	lsrs	r3, r3, #20
 800cf22:	051b      	lsls	r3, r3, #20
 800cf24:	b12b      	cbz	r3, 800cf32 <_dtoa_r+0x7ba>
 800cf26:	9b05      	ldr	r3, [sp, #20]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	9305      	str	r3, [sp, #20]
 800cf2c:	f108 0801 	add.w	r8, r8, #1
 800cf30:	2301      	movs	r3, #1
 800cf32:	9307      	str	r3, [sp, #28]
 800cf34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d12a      	bne.n	800cf90 <_dtoa_r+0x818>
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	e030      	b.n	800cfa0 <_dtoa_r+0x828>
 800cf3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf44:	e795      	b.n	800ce72 <_dtoa_r+0x6fa>
 800cf46:	9b07      	ldr	r3, [sp, #28]
 800cf48:	f109 37ff 	add.w	r7, r9, #4294967295
 800cf4c:	42bb      	cmp	r3, r7
 800cf4e:	bfbf      	itttt	lt
 800cf50:	9b07      	ldrlt	r3, [sp, #28]
 800cf52:	9707      	strlt	r7, [sp, #28]
 800cf54:	1afa      	sublt	r2, r7, r3
 800cf56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cf58:	bfbb      	ittet	lt
 800cf5a:	189b      	addlt	r3, r3, r2
 800cf5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cf5e:	1bdf      	subge	r7, r3, r7
 800cf60:	2700      	movlt	r7, #0
 800cf62:	f1b9 0f00 	cmp.w	r9, #0
 800cf66:	bfb5      	itete	lt
 800cf68:	9b05      	ldrlt	r3, [sp, #20]
 800cf6a:	9d05      	ldrge	r5, [sp, #20]
 800cf6c:	eba3 0509 	sublt.w	r5, r3, r9
 800cf70:	464b      	movge	r3, r9
 800cf72:	bfb8      	it	lt
 800cf74:	2300      	movlt	r3, #0
 800cf76:	e77e      	b.n	800ce76 <_dtoa_r+0x6fe>
 800cf78:	9f07      	ldr	r7, [sp, #28]
 800cf7a:	9d05      	ldr	r5, [sp, #20]
 800cf7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cf7e:	e783      	b.n	800ce88 <_dtoa_r+0x710>
 800cf80:	9a07      	ldr	r2, [sp, #28]
 800cf82:	e7ab      	b.n	800cedc <_dtoa_r+0x764>
 800cf84:	2300      	movs	r3, #0
 800cf86:	e7d4      	b.n	800cf32 <_dtoa_r+0x7ba>
 800cf88:	9b00      	ldr	r3, [sp, #0]
 800cf8a:	e7d2      	b.n	800cf32 <_dtoa_r+0x7ba>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	9307      	str	r3, [sp, #28]
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cf96:	6918      	ldr	r0, [r3, #16]
 800cf98:	f000 fc20 	bl	800d7dc <__hi0bits>
 800cf9c:	f1c0 0020 	rsb	r0, r0, #32
 800cfa0:	4440      	add	r0, r8
 800cfa2:	f010 001f 	ands.w	r0, r0, #31
 800cfa6:	d047      	beq.n	800d038 <_dtoa_r+0x8c0>
 800cfa8:	f1c0 0320 	rsb	r3, r0, #32
 800cfac:	2b04      	cmp	r3, #4
 800cfae:	dd3b      	ble.n	800d028 <_dtoa_r+0x8b0>
 800cfb0:	9b05      	ldr	r3, [sp, #20]
 800cfb2:	f1c0 001c 	rsb	r0, r0, #28
 800cfb6:	4403      	add	r3, r0
 800cfb8:	9305      	str	r3, [sp, #20]
 800cfba:	4405      	add	r5, r0
 800cfbc:	4480      	add	r8, r0
 800cfbe:	9b05      	ldr	r3, [sp, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	dd05      	ble.n	800cfd0 <_dtoa_r+0x858>
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	9904      	ldr	r1, [sp, #16]
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f000 fd43 	bl	800da54 <__lshift>
 800cfce:	9004      	str	r0, [sp, #16]
 800cfd0:	f1b8 0f00 	cmp.w	r8, #0
 800cfd4:	dd05      	ble.n	800cfe2 <_dtoa_r+0x86a>
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	4642      	mov	r2, r8
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 fd3a 	bl	800da54 <__lshift>
 800cfe0:	4607      	mov	r7, r0
 800cfe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfe4:	b353      	cbz	r3, 800d03c <_dtoa_r+0x8c4>
 800cfe6:	4639      	mov	r1, r7
 800cfe8:	9804      	ldr	r0, [sp, #16]
 800cfea:	f000 fd87 	bl	800dafc <__mcmp>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	da24      	bge.n	800d03c <_dtoa_r+0x8c4>
 800cff2:	2300      	movs	r3, #0
 800cff4:	220a      	movs	r2, #10
 800cff6:	9904      	ldr	r1, [sp, #16]
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fbb4 	bl	800d766 <__multadd>
 800cffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d000:	9004      	str	r0, [sp, #16]
 800d002:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d006:	2b00      	cmp	r3, #0
 800d008:	f000 814d 	beq.w	800d2a6 <_dtoa_r+0xb2e>
 800d00c:	2300      	movs	r3, #0
 800d00e:	4631      	mov	r1, r6
 800d010:	220a      	movs	r2, #10
 800d012:	4620      	mov	r0, r4
 800d014:	f000 fba7 	bl	800d766 <__multadd>
 800d018:	9b02      	ldr	r3, [sp, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	4606      	mov	r6, r0
 800d01e:	dc4f      	bgt.n	800d0c0 <_dtoa_r+0x948>
 800d020:	9b06      	ldr	r3, [sp, #24]
 800d022:	2b02      	cmp	r3, #2
 800d024:	dd4c      	ble.n	800d0c0 <_dtoa_r+0x948>
 800d026:	e011      	b.n	800d04c <_dtoa_r+0x8d4>
 800d028:	d0c9      	beq.n	800cfbe <_dtoa_r+0x846>
 800d02a:	9a05      	ldr	r2, [sp, #20]
 800d02c:	331c      	adds	r3, #28
 800d02e:	441a      	add	r2, r3
 800d030:	9205      	str	r2, [sp, #20]
 800d032:	441d      	add	r5, r3
 800d034:	4498      	add	r8, r3
 800d036:	e7c2      	b.n	800cfbe <_dtoa_r+0x846>
 800d038:	4603      	mov	r3, r0
 800d03a:	e7f6      	b.n	800d02a <_dtoa_r+0x8b2>
 800d03c:	f1b9 0f00 	cmp.w	r9, #0
 800d040:	dc38      	bgt.n	800d0b4 <_dtoa_r+0x93c>
 800d042:	9b06      	ldr	r3, [sp, #24]
 800d044:	2b02      	cmp	r3, #2
 800d046:	dd35      	ble.n	800d0b4 <_dtoa_r+0x93c>
 800d048:	f8cd 9008 	str.w	r9, [sp, #8]
 800d04c:	9b02      	ldr	r3, [sp, #8]
 800d04e:	b963      	cbnz	r3, 800d06a <_dtoa_r+0x8f2>
 800d050:	4639      	mov	r1, r7
 800d052:	2205      	movs	r2, #5
 800d054:	4620      	mov	r0, r4
 800d056:	f000 fb86 	bl	800d766 <__multadd>
 800d05a:	4601      	mov	r1, r0
 800d05c:	4607      	mov	r7, r0
 800d05e:	9804      	ldr	r0, [sp, #16]
 800d060:	f000 fd4c 	bl	800dafc <__mcmp>
 800d064:	2800      	cmp	r0, #0
 800d066:	f73f adcc 	bgt.w	800cc02 <_dtoa_r+0x48a>
 800d06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d06c:	465d      	mov	r5, fp
 800d06e:	ea6f 0a03 	mvn.w	sl, r3
 800d072:	f04f 0900 	mov.w	r9, #0
 800d076:	4639      	mov	r1, r7
 800d078:	4620      	mov	r0, r4
 800d07a:	f000 fb5d 	bl	800d738 <_Bfree>
 800d07e:	2e00      	cmp	r6, #0
 800d080:	f43f aeb7 	beq.w	800cdf2 <_dtoa_r+0x67a>
 800d084:	f1b9 0f00 	cmp.w	r9, #0
 800d088:	d005      	beq.n	800d096 <_dtoa_r+0x91e>
 800d08a:	45b1      	cmp	r9, r6
 800d08c:	d003      	beq.n	800d096 <_dtoa_r+0x91e>
 800d08e:	4649      	mov	r1, r9
 800d090:	4620      	mov	r0, r4
 800d092:	f000 fb51 	bl	800d738 <_Bfree>
 800d096:	4631      	mov	r1, r6
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 fb4d 	bl	800d738 <_Bfree>
 800d09e:	e6a8      	b.n	800cdf2 <_dtoa_r+0x67a>
 800d0a0:	2700      	movs	r7, #0
 800d0a2:	463e      	mov	r6, r7
 800d0a4:	e7e1      	b.n	800d06a <_dtoa_r+0x8f2>
 800d0a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d0aa:	463e      	mov	r6, r7
 800d0ac:	e5a9      	b.n	800cc02 <_dtoa_r+0x48a>
 800d0ae:	bf00      	nop
 800d0b0:	40240000 	.word	0x40240000
 800d0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f000 80fa 	beq.w	800d2b4 <_dtoa_r+0xb3c>
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	dd05      	ble.n	800d0d0 <_dtoa_r+0x958>
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	462a      	mov	r2, r5
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f000 fcc3 	bl	800da54 <__lshift>
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	9b07      	ldr	r3, [sp, #28]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d04c      	beq.n	800d170 <_dtoa_r+0x9f8>
 800d0d6:	6871      	ldr	r1, [r6, #4]
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f000 faf9 	bl	800d6d0 <_Balloc>
 800d0de:	6932      	ldr	r2, [r6, #16]
 800d0e0:	3202      	adds	r2, #2
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	0092      	lsls	r2, r2, #2
 800d0e6:	f106 010c 	add.w	r1, r6, #12
 800d0ea:	300c      	adds	r0, #12
 800d0ec:	f7fe fc46 	bl	800b97c <memcpy>
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	f000 fcad 	bl	800da54 <__lshift>
 800d0fa:	9b00      	ldr	r3, [sp, #0]
 800d0fc:	f8cd b014 	str.w	fp, [sp, #20]
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	46b1      	mov	r9, r6
 800d106:	9307      	str	r3, [sp, #28]
 800d108:	4606      	mov	r6, r0
 800d10a:	4639      	mov	r1, r7
 800d10c:	9804      	ldr	r0, [sp, #16]
 800d10e:	f7ff faa7 	bl	800c660 <quorem>
 800d112:	4649      	mov	r1, r9
 800d114:	4605      	mov	r5, r0
 800d116:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d11a:	9804      	ldr	r0, [sp, #16]
 800d11c:	f000 fcee 	bl	800dafc <__mcmp>
 800d120:	4632      	mov	r2, r6
 800d122:	9000      	str	r0, [sp, #0]
 800d124:	4639      	mov	r1, r7
 800d126:	4620      	mov	r0, r4
 800d128:	f000 fd02 	bl	800db30 <__mdiff>
 800d12c:	68c3      	ldr	r3, [r0, #12]
 800d12e:	4602      	mov	r2, r0
 800d130:	bb03      	cbnz	r3, 800d174 <_dtoa_r+0x9fc>
 800d132:	4601      	mov	r1, r0
 800d134:	9008      	str	r0, [sp, #32]
 800d136:	9804      	ldr	r0, [sp, #16]
 800d138:	f000 fce0 	bl	800dafc <__mcmp>
 800d13c:	9a08      	ldr	r2, [sp, #32]
 800d13e:	4603      	mov	r3, r0
 800d140:	4611      	mov	r1, r2
 800d142:	4620      	mov	r0, r4
 800d144:	9308      	str	r3, [sp, #32]
 800d146:	f000 faf7 	bl	800d738 <_Bfree>
 800d14a:	9b08      	ldr	r3, [sp, #32]
 800d14c:	b9a3      	cbnz	r3, 800d178 <_dtoa_r+0xa00>
 800d14e:	9a06      	ldr	r2, [sp, #24]
 800d150:	b992      	cbnz	r2, 800d178 <_dtoa_r+0xa00>
 800d152:	9a07      	ldr	r2, [sp, #28]
 800d154:	b982      	cbnz	r2, 800d178 <_dtoa_r+0xa00>
 800d156:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d15a:	d029      	beq.n	800d1b0 <_dtoa_r+0xa38>
 800d15c:	9b00      	ldr	r3, [sp, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dd01      	ble.n	800d166 <_dtoa_r+0x9ee>
 800d162:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d166:	9b05      	ldr	r3, [sp, #20]
 800d168:	1c5d      	adds	r5, r3, #1
 800d16a:	f883 8000 	strb.w	r8, [r3]
 800d16e:	e782      	b.n	800d076 <_dtoa_r+0x8fe>
 800d170:	4630      	mov	r0, r6
 800d172:	e7c2      	b.n	800d0fa <_dtoa_r+0x982>
 800d174:	2301      	movs	r3, #1
 800d176:	e7e3      	b.n	800d140 <_dtoa_r+0x9c8>
 800d178:	9a00      	ldr	r2, [sp, #0]
 800d17a:	2a00      	cmp	r2, #0
 800d17c:	db04      	blt.n	800d188 <_dtoa_r+0xa10>
 800d17e:	d125      	bne.n	800d1cc <_dtoa_r+0xa54>
 800d180:	9a06      	ldr	r2, [sp, #24]
 800d182:	bb1a      	cbnz	r2, 800d1cc <_dtoa_r+0xa54>
 800d184:	9a07      	ldr	r2, [sp, #28]
 800d186:	bb0a      	cbnz	r2, 800d1cc <_dtoa_r+0xa54>
 800d188:	2b00      	cmp	r3, #0
 800d18a:	ddec      	ble.n	800d166 <_dtoa_r+0x9ee>
 800d18c:	2201      	movs	r2, #1
 800d18e:	9904      	ldr	r1, [sp, #16]
 800d190:	4620      	mov	r0, r4
 800d192:	f000 fc5f 	bl	800da54 <__lshift>
 800d196:	4639      	mov	r1, r7
 800d198:	9004      	str	r0, [sp, #16]
 800d19a:	f000 fcaf 	bl	800dafc <__mcmp>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	dc03      	bgt.n	800d1aa <_dtoa_r+0xa32>
 800d1a2:	d1e0      	bne.n	800d166 <_dtoa_r+0x9ee>
 800d1a4:	f018 0f01 	tst.w	r8, #1
 800d1a8:	d0dd      	beq.n	800d166 <_dtoa_r+0x9ee>
 800d1aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d1ae:	d1d8      	bne.n	800d162 <_dtoa_r+0x9ea>
 800d1b0:	9b05      	ldr	r3, [sp, #20]
 800d1b2:	9a05      	ldr	r2, [sp, #20]
 800d1b4:	1c5d      	adds	r5, r3, #1
 800d1b6:	2339      	movs	r3, #57	; 0x39
 800d1b8:	7013      	strb	r3, [r2, #0]
 800d1ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1be:	2b39      	cmp	r3, #57	; 0x39
 800d1c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d1c4:	d04f      	beq.n	800d266 <_dtoa_r+0xaee>
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	7013      	strb	r3, [r2, #0]
 800d1ca:	e754      	b.n	800d076 <_dtoa_r+0x8fe>
 800d1cc:	9a05      	ldr	r2, [sp, #20]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f102 0501 	add.w	r5, r2, #1
 800d1d4:	dd06      	ble.n	800d1e4 <_dtoa_r+0xa6c>
 800d1d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d1da:	d0e9      	beq.n	800d1b0 <_dtoa_r+0xa38>
 800d1dc:	f108 0801 	add.w	r8, r8, #1
 800d1e0:	9b05      	ldr	r3, [sp, #20]
 800d1e2:	e7c2      	b.n	800d16a <_dtoa_r+0x9f2>
 800d1e4:	9a02      	ldr	r2, [sp, #8]
 800d1e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d1ea:	eba5 030b 	sub.w	r3, r5, fp
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d021      	beq.n	800d236 <_dtoa_r+0xabe>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	220a      	movs	r2, #10
 800d1f6:	9904      	ldr	r1, [sp, #16]
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f000 fab4 	bl	800d766 <__multadd>
 800d1fe:	45b1      	cmp	r9, r6
 800d200:	9004      	str	r0, [sp, #16]
 800d202:	f04f 0300 	mov.w	r3, #0
 800d206:	f04f 020a 	mov.w	r2, #10
 800d20a:	4649      	mov	r1, r9
 800d20c:	4620      	mov	r0, r4
 800d20e:	d105      	bne.n	800d21c <_dtoa_r+0xaa4>
 800d210:	f000 faa9 	bl	800d766 <__multadd>
 800d214:	4681      	mov	r9, r0
 800d216:	4606      	mov	r6, r0
 800d218:	9505      	str	r5, [sp, #20]
 800d21a:	e776      	b.n	800d10a <_dtoa_r+0x992>
 800d21c:	f000 faa3 	bl	800d766 <__multadd>
 800d220:	4631      	mov	r1, r6
 800d222:	4681      	mov	r9, r0
 800d224:	2300      	movs	r3, #0
 800d226:	220a      	movs	r2, #10
 800d228:	4620      	mov	r0, r4
 800d22a:	f000 fa9c 	bl	800d766 <__multadd>
 800d22e:	4606      	mov	r6, r0
 800d230:	e7f2      	b.n	800d218 <_dtoa_r+0xaa0>
 800d232:	f04f 0900 	mov.w	r9, #0
 800d236:	2201      	movs	r2, #1
 800d238:	9904      	ldr	r1, [sp, #16]
 800d23a:	4620      	mov	r0, r4
 800d23c:	f000 fc0a 	bl	800da54 <__lshift>
 800d240:	4639      	mov	r1, r7
 800d242:	9004      	str	r0, [sp, #16]
 800d244:	f000 fc5a 	bl	800dafc <__mcmp>
 800d248:	2800      	cmp	r0, #0
 800d24a:	dcb6      	bgt.n	800d1ba <_dtoa_r+0xa42>
 800d24c:	d102      	bne.n	800d254 <_dtoa_r+0xadc>
 800d24e:	f018 0f01 	tst.w	r8, #1
 800d252:	d1b2      	bne.n	800d1ba <_dtoa_r+0xa42>
 800d254:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d258:	2b30      	cmp	r3, #48	; 0x30
 800d25a:	f105 32ff 	add.w	r2, r5, #4294967295
 800d25e:	f47f af0a 	bne.w	800d076 <_dtoa_r+0x8fe>
 800d262:	4615      	mov	r5, r2
 800d264:	e7f6      	b.n	800d254 <_dtoa_r+0xadc>
 800d266:	4593      	cmp	fp, r2
 800d268:	d105      	bne.n	800d276 <_dtoa_r+0xafe>
 800d26a:	2331      	movs	r3, #49	; 0x31
 800d26c:	f10a 0a01 	add.w	sl, sl, #1
 800d270:	f88b 3000 	strb.w	r3, [fp]
 800d274:	e6ff      	b.n	800d076 <_dtoa_r+0x8fe>
 800d276:	4615      	mov	r5, r2
 800d278:	e79f      	b.n	800d1ba <_dtoa_r+0xa42>
 800d27a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d2e0 <_dtoa_r+0xb68>
 800d27e:	e007      	b.n	800d290 <_dtoa_r+0xb18>
 800d280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d282:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d2e4 <_dtoa_r+0xb6c>
 800d286:	b11b      	cbz	r3, 800d290 <_dtoa_r+0xb18>
 800d288:	f10b 0308 	add.w	r3, fp, #8
 800d28c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	4658      	mov	r0, fp
 800d292:	b017      	add	sp, #92	; 0x5c
 800d294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d298:	9b06      	ldr	r3, [sp, #24]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	f77f ae35 	ble.w	800cf0a <_dtoa_r+0x792>
 800d2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2a2:	9307      	str	r3, [sp, #28]
 800d2a4:	e649      	b.n	800cf3a <_dtoa_r+0x7c2>
 800d2a6:	9b02      	ldr	r3, [sp, #8]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	dc03      	bgt.n	800d2b4 <_dtoa_r+0xb3c>
 800d2ac:	9b06      	ldr	r3, [sp, #24]
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	f73f aecc 	bgt.w	800d04c <_dtoa_r+0x8d4>
 800d2b4:	465d      	mov	r5, fp
 800d2b6:	4639      	mov	r1, r7
 800d2b8:	9804      	ldr	r0, [sp, #16]
 800d2ba:	f7ff f9d1 	bl	800c660 <quorem>
 800d2be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d2c2:	f805 8b01 	strb.w	r8, [r5], #1
 800d2c6:	9a02      	ldr	r2, [sp, #8]
 800d2c8:	eba5 030b 	sub.w	r3, r5, fp
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	ddb0      	ble.n	800d232 <_dtoa_r+0xaba>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	220a      	movs	r2, #10
 800d2d4:	9904      	ldr	r1, [sp, #16]
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 fa45 	bl	800d766 <__multadd>
 800d2dc:	9004      	str	r0, [sp, #16]
 800d2de:	e7ea      	b.n	800d2b6 <_dtoa_r+0xb3e>
 800d2e0:	0800e5e4 	.word	0x0800e5e4
 800d2e4:	0800e608 	.word	0x0800e608

0800d2e8 <__sflush_r>:
 800d2e8:	898a      	ldrh	r2, [r1, #12]
 800d2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	0710      	lsls	r0, r2, #28
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	d458      	bmi.n	800d3a8 <__sflush_r+0xc0>
 800d2f6:	684b      	ldr	r3, [r1, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	dc05      	bgt.n	800d308 <__sflush_r+0x20>
 800d2fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	dc02      	bgt.n	800d308 <__sflush_r+0x20>
 800d302:	2000      	movs	r0, #0
 800d304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d30a:	2e00      	cmp	r6, #0
 800d30c:	d0f9      	beq.n	800d302 <__sflush_r+0x1a>
 800d30e:	2300      	movs	r3, #0
 800d310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d314:	682f      	ldr	r7, [r5, #0]
 800d316:	6a21      	ldr	r1, [r4, #32]
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	d032      	beq.n	800d382 <__sflush_r+0x9a>
 800d31c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d31e:	89a3      	ldrh	r3, [r4, #12]
 800d320:	075a      	lsls	r2, r3, #29
 800d322:	d505      	bpl.n	800d330 <__sflush_r+0x48>
 800d324:	6863      	ldr	r3, [r4, #4]
 800d326:	1ac0      	subs	r0, r0, r3
 800d328:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d32a:	b10b      	cbz	r3, 800d330 <__sflush_r+0x48>
 800d32c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d32e:	1ac0      	subs	r0, r0, r3
 800d330:	2300      	movs	r3, #0
 800d332:	4602      	mov	r2, r0
 800d334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d336:	6a21      	ldr	r1, [r4, #32]
 800d338:	4628      	mov	r0, r5
 800d33a:	47b0      	blx	r6
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	d106      	bne.n	800d350 <__sflush_r+0x68>
 800d342:	6829      	ldr	r1, [r5, #0]
 800d344:	291d      	cmp	r1, #29
 800d346:	d848      	bhi.n	800d3da <__sflush_r+0xf2>
 800d348:	4a29      	ldr	r2, [pc, #164]	; (800d3f0 <__sflush_r+0x108>)
 800d34a:	40ca      	lsrs	r2, r1
 800d34c:	07d6      	lsls	r6, r2, #31
 800d34e:	d544      	bpl.n	800d3da <__sflush_r+0xf2>
 800d350:	2200      	movs	r2, #0
 800d352:	6062      	str	r2, [r4, #4]
 800d354:	04d9      	lsls	r1, r3, #19
 800d356:	6922      	ldr	r2, [r4, #16]
 800d358:	6022      	str	r2, [r4, #0]
 800d35a:	d504      	bpl.n	800d366 <__sflush_r+0x7e>
 800d35c:	1c42      	adds	r2, r0, #1
 800d35e:	d101      	bne.n	800d364 <__sflush_r+0x7c>
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	b903      	cbnz	r3, 800d366 <__sflush_r+0x7e>
 800d364:	6560      	str	r0, [r4, #84]	; 0x54
 800d366:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d368:	602f      	str	r7, [r5, #0]
 800d36a:	2900      	cmp	r1, #0
 800d36c:	d0c9      	beq.n	800d302 <__sflush_r+0x1a>
 800d36e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d372:	4299      	cmp	r1, r3
 800d374:	d002      	beq.n	800d37c <__sflush_r+0x94>
 800d376:	4628      	mov	r0, r5
 800d378:	f000 fc94 	bl	800dca4 <_free_r>
 800d37c:	2000      	movs	r0, #0
 800d37e:	6360      	str	r0, [r4, #52]	; 0x34
 800d380:	e7c0      	b.n	800d304 <__sflush_r+0x1c>
 800d382:	2301      	movs	r3, #1
 800d384:	4628      	mov	r0, r5
 800d386:	47b0      	blx	r6
 800d388:	1c41      	adds	r1, r0, #1
 800d38a:	d1c8      	bne.n	800d31e <__sflush_r+0x36>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0c5      	beq.n	800d31e <__sflush_r+0x36>
 800d392:	2b1d      	cmp	r3, #29
 800d394:	d001      	beq.n	800d39a <__sflush_r+0xb2>
 800d396:	2b16      	cmp	r3, #22
 800d398:	d101      	bne.n	800d39e <__sflush_r+0xb6>
 800d39a:	602f      	str	r7, [r5, #0]
 800d39c:	e7b1      	b.n	800d302 <__sflush_r+0x1a>
 800d39e:	89a3      	ldrh	r3, [r4, #12]
 800d3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3a4:	81a3      	strh	r3, [r4, #12]
 800d3a6:	e7ad      	b.n	800d304 <__sflush_r+0x1c>
 800d3a8:	690f      	ldr	r7, [r1, #16]
 800d3aa:	2f00      	cmp	r7, #0
 800d3ac:	d0a9      	beq.n	800d302 <__sflush_r+0x1a>
 800d3ae:	0793      	lsls	r3, r2, #30
 800d3b0:	680e      	ldr	r6, [r1, #0]
 800d3b2:	bf08      	it	eq
 800d3b4:	694b      	ldreq	r3, [r1, #20]
 800d3b6:	600f      	str	r7, [r1, #0]
 800d3b8:	bf18      	it	ne
 800d3ba:	2300      	movne	r3, #0
 800d3bc:	eba6 0807 	sub.w	r8, r6, r7
 800d3c0:	608b      	str	r3, [r1, #8]
 800d3c2:	f1b8 0f00 	cmp.w	r8, #0
 800d3c6:	dd9c      	ble.n	800d302 <__sflush_r+0x1a>
 800d3c8:	4643      	mov	r3, r8
 800d3ca:	463a      	mov	r2, r7
 800d3cc:	6a21      	ldr	r1, [r4, #32]
 800d3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	47b0      	blx	r6
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	dc06      	bgt.n	800d3e6 <__sflush_r+0xfe>
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3de:	81a3      	strh	r3, [r4, #12]
 800d3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e4:	e78e      	b.n	800d304 <__sflush_r+0x1c>
 800d3e6:	4407      	add	r7, r0
 800d3e8:	eba8 0800 	sub.w	r8, r8, r0
 800d3ec:	e7e9      	b.n	800d3c2 <__sflush_r+0xda>
 800d3ee:	bf00      	nop
 800d3f0:	20400001 	.word	0x20400001

0800d3f4 <_fflush_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	690b      	ldr	r3, [r1, #16]
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	b1db      	cbz	r3, 800d436 <_fflush_r+0x42>
 800d3fe:	b118      	cbz	r0, 800d408 <_fflush_r+0x14>
 800d400:	6983      	ldr	r3, [r0, #24]
 800d402:	b90b      	cbnz	r3, 800d408 <_fflush_r+0x14>
 800d404:	f000 f860 	bl	800d4c8 <__sinit>
 800d408:	4b0c      	ldr	r3, [pc, #48]	; (800d43c <_fflush_r+0x48>)
 800d40a:	429c      	cmp	r4, r3
 800d40c:	d109      	bne.n	800d422 <_fflush_r+0x2e>
 800d40e:	686c      	ldr	r4, [r5, #4]
 800d410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d414:	b17b      	cbz	r3, 800d436 <_fflush_r+0x42>
 800d416:	4621      	mov	r1, r4
 800d418:	4628      	mov	r0, r5
 800d41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d41e:	f7ff bf63 	b.w	800d2e8 <__sflush_r>
 800d422:	4b07      	ldr	r3, [pc, #28]	; (800d440 <_fflush_r+0x4c>)
 800d424:	429c      	cmp	r4, r3
 800d426:	d101      	bne.n	800d42c <_fflush_r+0x38>
 800d428:	68ac      	ldr	r4, [r5, #8]
 800d42a:	e7f1      	b.n	800d410 <_fflush_r+0x1c>
 800d42c:	4b05      	ldr	r3, [pc, #20]	; (800d444 <_fflush_r+0x50>)
 800d42e:	429c      	cmp	r4, r3
 800d430:	bf08      	it	eq
 800d432:	68ec      	ldreq	r4, [r5, #12]
 800d434:	e7ec      	b.n	800d410 <_fflush_r+0x1c>
 800d436:	2000      	movs	r0, #0
 800d438:	bd38      	pop	{r3, r4, r5, pc}
 800d43a:	bf00      	nop
 800d43c:	0800e638 	.word	0x0800e638
 800d440:	0800e658 	.word	0x0800e658
 800d444:	0800e618 	.word	0x0800e618

0800d448 <std>:
 800d448:	2300      	movs	r3, #0
 800d44a:	b510      	push	{r4, lr}
 800d44c:	4604      	mov	r4, r0
 800d44e:	e9c0 3300 	strd	r3, r3, [r0]
 800d452:	6083      	str	r3, [r0, #8]
 800d454:	8181      	strh	r1, [r0, #12]
 800d456:	6643      	str	r3, [r0, #100]	; 0x64
 800d458:	81c2      	strh	r2, [r0, #14]
 800d45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d45e:	6183      	str	r3, [r0, #24]
 800d460:	4619      	mov	r1, r3
 800d462:	2208      	movs	r2, #8
 800d464:	305c      	adds	r0, #92	; 0x5c
 800d466:	f7fe faad 	bl	800b9c4 <memset>
 800d46a:	4b05      	ldr	r3, [pc, #20]	; (800d480 <std+0x38>)
 800d46c:	6263      	str	r3, [r4, #36]	; 0x24
 800d46e:	4b05      	ldr	r3, [pc, #20]	; (800d484 <std+0x3c>)
 800d470:	62a3      	str	r3, [r4, #40]	; 0x28
 800d472:	4b05      	ldr	r3, [pc, #20]	; (800d488 <std+0x40>)
 800d474:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d476:	4b05      	ldr	r3, [pc, #20]	; (800d48c <std+0x44>)
 800d478:	6224      	str	r4, [r4, #32]
 800d47a:	6323      	str	r3, [r4, #48]	; 0x30
 800d47c:	bd10      	pop	{r4, pc}
 800d47e:	bf00      	nop
 800d480:	0800e095 	.word	0x0800e095
 800d484:	0800e0b7 	.word	0x0800e0b7
 800d488:	0800e0ef 	.word	0x0800e0ef
 800d48c:	0800e113 	.word	0x0800e113

0800d490 <_cleanup_r>:
 800d490:	4901      	ldr	r1, [pc, #4]	; (800d498 <_cleanup_r+0x8>)
 800d492:	f000 b885 	b.w	800d5a0 <_fwalk_reent>
 800d496:	bf00      	nop
 800d498:	0800d3f5 	.word	0x0800d3f5

0800d49c <__sfmoreglue>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	1e4a      	subs	r2, r1, #1
 800d4a0:	2568      	movs	r5, #104	; 0x68
 800d4a2:	4355      	muls	r5, r2
 800d4a4:	460e      	mov	r6, r1
 800d4a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d4aa:	f000 fc49 	bl	800dd40 <_malloc_r>
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	b140      	cbz	r0, 800d4c4 <__sfmoreglue+0x28>
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	e9c0 1600 	strd	r1, r6, [r0]
 800d4b8:	300c      	adds	r0, #12
 800d4ba:	60a0      	str	r0, [r4, #8]
 800d4bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4c0:	f7fe fa80 	bl	800b9c4 <memset>
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	bd70      	pop	{r4, r5, r6, pc}

0800d4c8 <__sinit>:
 800d4c8:	6983      	ldr	r3, [r0, #24]
 800d4ca:	b510      	push	{r4, lr}
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	bb33      	cbnz	r3, 800d51e <__sinit+0x56>
 800d4d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d4d4:	6503      	str	r3, [r0, #80]	; 0x50
 800d4d6:	4b12      	ldr	r3, [pc, #72]	; (800d520 <__sinit+0x58>)
 800d4d8:	4a12      	ldr	r2, [pc, #72]	; (800d524 <__sinit+0x5c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6282      	str	r2, [r0, #40]	; 0x28
 800d4de:	4298      	cmp	r0, r3
 800d4e0:	bf04      	itt	eq
 800d4e2:	2301      	moveq	r3, #1
 800d4e4:	6183      	streq	r3, [r0, #24]
 800d4e6:	f000 f81f 	bl	800d528 <__sfp>
 800d4ea:	6060      	str	r0, [r4, #4]
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f000 f81b 	bl	800d528 <__sfp>
 800d4f2:	60a0      	str	r0, [r4, #8]
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f000 f817 	bl	800d528 <__sfp>
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	60e0      	str	r0, [r4, #12]
 800d4fe:	2104      	movs	r1, #4
 800d500:	6860      	ldr	r0, [r4, #4]
 800d502:	f7ff ffa1 	bl	800d448 <std>
 800d506:	2201      	movs	r2, #1
 800d508:	2109      	movs	r1, #9
 800d50a:	68a0      	ldr	r0, [r4, #8]
 800d50c:	f7ff ff9c 	bl	800d448 <std>
 800d510:	2202      	movs	r2, #2
 800d512:	2112      	movs	r1, #18
 800d514:	68e0      	ldr	r0, [r4, #12]
 800d516:	f7ff ff97 	bl	800d448 <std>
 800d51a:	2301      	movs	r3, #1
 800d51c:	61a3      	str	r3, [r4, #24]
 800d51e:	bd10      	pop	{r4, pc}
 800d520:	0800e5d4 	.word	0x0800e5d4
 800d524:	0800d491 	.word	0x0800d491

0800d528 <__sfp>:
 800d528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d52a:	4b1b      	ldr	r3, [pc, #108]	; (800d598 <__sfp+0x70>)
 800d52c:	681e      	ldr	r6, [r3, #0]
 800d52e:	69b3      	ldr	r3, [r6, #24]
 800d530:	4607      	mov	r7, r0
 800d532:	b913      	cbnz	r3, 800d53a <__sfp+0x12>
 800d534:	4630      	mov	r0, r6
 800d536:	f7ff ffc7 	bl	800d4c8 <__sinit>
 800d53a:	3648      	adds	r6, #72	; 0x48
 800d53c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d540:	3b01      	subs	r3, #1
 800d542:	d503      	bpl.n	800d54c <__sfp+0x24>
 800d544:	6833      	ldr	r3, [r6, #0]
 800d546:	b133      	cbz	r3, 800d556 <__sfp+0x2e>
 800d548:	6836      	ldr	r6, [r6, #0]
 800d54a:	e7f7      	b.n	800d53c <__sfp+0x14>
 800d54c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d550:	b16d      	cbz	r5, 800d56e <__sfp+0x46>
 800d552:	3468      	adds	r4, #104	; 0x68
 800d554:	e7f4      	b.n	800d540 <__sfp+0x18>
 800d556:	2104      	movs	r1, #4
 800d558:	4638      	mov	r0, r7
 800d55a:	f7ff ff9f 	bl	800d49c <__sfmoreglue>
 800d55e:	6030      	str	r0, [r6, #0]
 800d560:	2800      	cmp	r0, #0
 800d562:	d1f1      	bne.n	800d548 <__sfp+0x20>
 800d564:	230c      	movs	r3, #12
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	4604      	mov	r4, r0
 800d56a:	4620      	mov	r0, r4
 800d56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d56e:	4b0b      	ldr	r3, [pc, #44]	; (800d59c <__sfp+0x74>)
 800d570:	6665      	str	r5, [r4, #100]	; 0x64
 800d572:	e9c4 5500 	strd	r5, r5, [r4]
 800d576:	60a5      	str	r5, [r4, #8]
 800d578:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d57c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d580:	2208      	movs	r2, #8
 800d582:	4629      	mov	r1, r5
 800d584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d588:	f7fe fa1c 	bl	800b9c4 <memset>
 800d58c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d594:	e7e9      	b.n	800d56a <__sfp+0x42>
 800d596:	bf00      	nop
 800d598:	0800e5d4 	.word	0x0800e5d4
 800d59c:	ffff0001 	.word	0xffff0001

0800d5a0 <_fwalk_reent>:
 800d5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5a4:	4680      	mov	r8, r0
 800d5a6:	4689      	mov	r9, r1
 800d5a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5ac:	2600      	movs	r6, #0
 800d5ae:	b914      	cbnz	r4, 800d5b6 <_fwalk_reent+0x16>
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d5ba:	3f01      	subs	r7, #1
 800d5bc:	d501      	bpl.n	800d5c2 <_fwalk_reent+0x22>
 800d5be:	6824      	ldr	r4, [r4, #0]
 800d5c0:	e7f5      	b.n	800d5ae <_fwalk_reent+0xe>
 800d5c2:	89ab      	ldrh	r3, [r5, #12]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d907      	bls.n	800d5d8 <_fwalk_reent+0x38>
 800d5c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	d003      	beq.n	800d5d8 <_fwalk_reent+0x38>
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	47c8      	blx	r9
 800d5d6:	4306      	orrs	r6, r0
 800d5d8:	3568      	adds	r5, #104	; 0x68
 800d5da:	e7ee      	b.n	800d5ba <_fwalk_reent+0x1a>

0800d5dc <_localeconv_r>:
 800d5dc:	4b04      	ldr	r3, [pc, #16]	; (800d5f0 <_localeconv_r+0x14>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6a18      	ldr	r0, [r3, #32]
 800d5e2:	4b04      	ldr	r3, [pc, #16]	; (800d5f4 <_localeconv_r+0x18>)
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	bf08      	it	eq
 800d5e8:	4618      	moveq	r0, r3
 800d5ea:	30f0      	adds	r0, #240	; 0xf0
 800d5ec:	4770      	bx	lr
 800d5ee:	bf00      	nop
 800d5f0:	200013c4 	.word	0x200013c4
 800d5f4:	20001428 	.word	0x20001428

0800d5f8 <__swhatbuf_r>:
 800d5f8:	b570      	push	{r4, r5, r6, lr}
 800d5fa:	460e      	mov	r6, r1
 800d5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d600:	2900      	cmp	r1, #0
 800d602:	b096      	sub	sp, #88	; 0x58
 800d604:	4614      	mov	r4, r2
 800d606:	461d      	mov	r5, r3
 800d608:	da07      	bge.n	800d61a <__swhatbuf_r+0x22>
 800d60a:	2300      	movs	r3, #0
 800d60c:	602b      	str	r3, [r5, #0]
 800d60e:	89b3      	ldrh	r3, [r6, #12]
 800d610:	061a      	lsls	r2, r3, #24
 800d612:	d410      	bmi.n	800d636 <__swhatbuf_r+0x3e>
 800d614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d618:	e00e      	b.n	800d638 <__swhatbuf_r+0x40>
 800d61a:	466a      	mov	r2, sp
 800d61c:	f000 fda0 	bl	800e160 <_fstat_r>
 800d620:	2800      	cmp	r0, #0
 800d622:	dbf2      	blt.n	800d60a <__swhatbuf_r+0x12>
 800d624:	9a01      	ldr	r2, [sp, #4]
 800d626:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d62a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d62e:	425a      	negs	r2, r3
 800d630:	415a      	adcs	r2, r3
 800d632:	602a      	str	r2, [r5, #0]
 800d634:	e7ee      	b.n	800d614 <__swhatbuf_r+0x1c>
 800d636:	2340      	movs	r3, #64	; 0x40
 800d638:	2000      	movs	r0, #0
 800d63a:	6023      	str	r3, [r4, #0]
 800d63c:	b016      	add	sp, #88	; 0x58
 800d63e:	bd70      	pop	{r4, r5, r6, pc}

0800d640 <__smakebuf_r>:
 800d640:	898b      	ldrh	r3, [r1, #12]
 800d642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d644:	079d      	lsls	r5, r3, #30
 800d646:	4606      	mov	r6, r0
 800d648:	460c      	mov	r4, r1
 800d64a:	d507      	bpl.n	800d65c <__smakebuf_r+0x1c>
 800d64c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	6123      	str	r3, [r4, #16]
 800d654:	2301      	movs	r3, #1
 800d656:	6163      	str	r3, [r4, #20]
 800d658:	b002      	add	sp, #8
 800d65a:	bd70      	pop	{r4, r5, r6, pc}
 800d65c:	ab01      	add	r3, sp, #4
 800d65e:	466a      	mov	r2, sp
 800d660:	f7ff ffca 	bl	800d5f8 <__swhatbuf_r>
 800d664:	9900      	ldr	r1, [sp, #0]
 800d666:	4605      	mov	r5, r0
 800d668:	4630      	mov	r0, r6
 800d66a:	f000 fb69 	bl	800dd40 <_malloc_r>
 800d66e:	b948      	cbnz	r0, 800d684 <__smakebuf_r+0x44>
 800d670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d674:	059a      	lsls	r2, r3, #22
 800d676:	d4ef      	bmi.n	800d658 <__smakebuf_r+0x18>
 800d678:	f023 0303 	bic.w	r3, r3, #3
 800d67c:	f043 0302 	orr.w	r3, r3, #2
 800d680:	81a3      	strh	r3, [r4, #12]
 800d682:	e7e3      	b.n	800d64c <__smakebuf_r+0xc>
 800d684:	4b0d      	ldr	r3, [pc, #52]	; (800d6bc <__smakebuf_r+0x7c>)
 800d686:	62b3      	str	r3, [r6, #40]	; 0x28
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	6020      	str	r0, [r4, #0]
 800d68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d690:	81a3      	strh	r3, [r4, #12]
 800d692:	9b00      	ldr	r3, [sp, #0]
 800d694:	6163      	str	r3, [r4, #20]
 800d696:	9b01      	ldr	r3, [sp, #4]
 800d698:	6120      	str	r0, [r4, #16]
 800d69a:	b15b      	cbz	r3, 800d6b4 <__smakebuf_r+0x74>
 800d69c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f000 fd6f 	bl	800e184 <_isatty_r>
 800d6a6:	b128      	cbz	r0, 800d6b4 <__smakebuf_r+0x74>
 800d6a8:	89a3      	ldrh	r3, [r4, #12]
 800d6aa:	f023 0303 	bic.w	r3, r3, #3
 800d6ae:	f043 0301 	orr.w	r3, r3, #1
 800d6b2:	81a3      	strh	r3, [r4, #12]
 800d6b4:	89a3      	ldrh	r3, [r4, #12]
 800d6b6:	431d      	orrs	r5, r3
 800d6b8:	81a5      	strh	r5, [r4, #12]
 800d6ba:	e7cd      	b.n	800d658 <__smakebuf_r+0x18>
 800d6bc:	0800d491 	.word	0x0800d491

0800d6c0 <malloc>:
 800d6c0:	4b02      	ldr	r3, [pc, #8]	; (800d6cc <malloc+0xc>)
 800d6c2:	4601      	mov	r1, r0
 800d6c4:	6818      	ldr	r0, [r3, #0]
 800d6c6:	f000 bb3b 	b.w	800dd40 <_malloc_r>
 800d6ca:	bf00      	nop
 800d6cc:	200013c4 	.word	0x200013c4

0800d6d0 <_Balloc>:
 800d6d0:	b570      	push	{r4, r5, r6, lr}
 800d6d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	460e      	mov	r6, r1
 800d6d8:	b93d      	cbnz	r5, 800d6ea <_Balloc+0x1a>
 800d6da:	2010      	movs	r0, #16
 800d6dc:	f7ff fff0 	bl	800d6c0 <malloc>
 800d6e0:	6260      	str	r0, [r4, #36]	; 0x24
 800d6e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d6e6:	6005      	str	r5, [r0, #0]
 800d6e8:	60c5      	str	r5, [r0, #12]
 800d6ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d6ec:	68eb      	ldr	r3, [r5, #12]
 800d6ee:	b183      	cbz	r3, 800d712 <_Balloc+0x42>
 800d6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d6f8:	b9b8      	cbnz	r0, 800d72a <_Balloc+0x5a>
 800d6fa:	2101      	movs	r1, #1
 800d6fc:	fa01 f506 	lsl.w	r5, r1, r6
 800d700:	1d6a      	adds	r2, r5, #5
 800d702:	0092      	lsls	r2, r2, #2
 800d704:	4620      	mov	r0, r4
 800d706:	f000 fabf 	bl	800dc88 <_calloc_r>
 800d70a:	b160      	cbz	r0, 800d726 <_Balloc+0x56>
 800d70c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d710:	e00e      	b.n	800d730 <_Balloc+0x60>
 800d712:	2221      	movs	r2, #33	; 0x21
 800d714:	2104      	movs	r1, #4
 800d716:	4620      	mov	r0, r4
 800d718:	f000 fab6 	bl	800dc88 <_calloc_r>
 800d71c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d71e:	60e8      	str	r0, [r5, #12]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d1e4      	bne.n	800d6f0 <_Balloc+0x20>
 800d726:	2000      	movs	r0, #0
 800d728:	bd70      	pop	{r4, r5, r6, pc}
 800d72a:	6802      	ldr	r2, [r0, #0]
 800d72c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d730:	2300      	movs	r3, #0
 800d732:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d736:	e7f7      	b.n	800d728 <_Balloc+0x58>

0800d738 <_Bfree>:
 800d738:	b570      	push	{r4, r5, r6, lr}
 800d73a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d73c:	4606      	mov	r6, r0
 800d73e:	460d      	mov	r5, r1
 800d740:	b93c      	cbnz	r4, 800d752 <_Bfree+0x1a>
 800d742:	2010      	movs	r0, #16
 800d744:	f7ff ffbc 	bl	800d6c0 <malloc>
 800d748:	6270      	str	r0, [r6, #36]	; 0x24
 800d74a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d74e:	6004      	str	r4, [r0, #0]
 800d750:	60c4      	str	r4, [r0, #12]
 800d752:	b13d      	cbz	r5, 800d764 <_Bfree+0x2c>
 800d754:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d756:	686a      	ldr	r2, [r5, #4]
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d75e:	6029      	str	r1, [r5, #0]
 800d760:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d764:	bd70      	pop	{r4, r5, r6, pc}

0800d766 <__multadd>:
 800d766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d76a:	690d      	ldr	r5, [r1, #16]
 800d76c:	461f      	mov	r7, r3
 800d76e:	4606      	mov	r6, r0
 800d770:	460c      	mov	r4, r1
 800d772:	f101 0c14 	add.w	ip, r1, #20
 800d776:	2300      	movs	r3, #0
 800d778:	f8dc 0000 	ldr.w	r0, [ip]
 800d77c:	b281      	uxth	r1, r0
 800d77e:	fb02 7101 	mla	r1, r2, r1, r7
 800d782:	0c0f      	lsrs	r7, r1, #16
 800d784:	0c00      	lsrs	r0, r0, #16
 800d786:	fb02 7000 	mla	r0, r2, r0, r7
 800d78a:	b289      	uxth	r1, r1
 800d78c:	3301      	adds	r3, #1
 800d78e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d792:	429d      	cmp	r5, r3
 800d794:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d798:	f84c 1b04 	str.w	r1, [ip], #4
 800d79c:	dcec      	bgt.n	800d778 <__multadd+0x12>
 800d79e:	b1d7      	cbz	r7, 800d7d6 <__multadd+0x70>
 800d7a0:	68a3      	ldr	r3, [r4, #8]
 800d7a2:	42ab      	cmp	r3, r5
 800d7a4:	dc12      	bgt.n	800d7cc <__multadd+0x66>
 800d7a6:	6861      	ldr	r1, [r4, #4]
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	3101      	adds	r1, #1
 800d7ac:	f7ff ff90 	bl	800d6d0 <_Balloc>
 800d7b0:	6922      	ldr	r2, [r4, #16]
 800d7b2:	3202      	adds	r2, #2
 800d7b4:	f104 010c 	add.w	r1, r4, #12
 800d7b8:	4680      	mov	r8, r0
 800d7ba:	0092      	lsls	r2, r2, #2
 800d7bc:	300c      	adds	r0, #12
 800d7be:	f7fe f8dd 	bl	800b97c <memcpy>
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	f7ff ffb7 	bl	800d738 <_Bfree>
 800d7ca:	4644      	mov	r4, r8
 800d7cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7d0:	3501      	adds	r5, #1
 800d7d2:	615f      	str	r7, [r3, #20]
 800d7d4:	6125      	str	r5, [r4, #16]
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d7dc <__hi0bits>:
 800d7dc:	0c02      	lsrs	r2, r0, #16
 800d7de:	0412      	lsls	r2, r2, #16
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	b9b2      	cbnz	r2, 800d812 <__hi0bits+0x36>
 800d7e4:	0403      	lsls	r3, r0, #16
 800d7e6:	2010      	movs	r0, #16
 800d7e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d7ec:	bf04      	itt	eq
 800d7ee:	021b      	lsleq	r3, r3, #8
 800d7f0:	3008      	addeq	r0, #8
 800d7f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d7f6:	bf04      	itt	eq
 800d7f8:	011b      	lsleq	r3, r3, #4
 800d7fa:	3004      	addeq	r0, #4
 800d7fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d800:	bf04      	itt	eq
 800d802:	009b      	lsleq	r3, r3, #2
 800d804:	3002      	addeq	r0, #2
 800d806:	2b00      	cmp	r3, #0
 800d808:	db06      	blt.n	800d818 <__hi0bits+0x3c>
 800d80a:	005b      	lsls	r3, r3, #1
 800d80c:	d503      	bpl.n	800d816 <__hi0bits+0x3a>
 800d80e:	3001      	adds	r0, #1
 800d810:	4770      	bx	lr
 800d812:	2000      	movs	r0, #0
 800d814:	e7e8      	b.n	800d7e8 <__hi0bits+0xc>
 800d816:	2020      	movs	r0, #32
 800d818:	4770      	bx	lr

0800d81a <__lo0bits>:
 800d81a:	6803      	ldr	r3, [r0, #0]
 800d81c:	f013 0207 	ands.w	r2, r3, #7
 800d820:	4601      	mov	r1, r0
 800d822:	d00b      	beq.n	800d83c <__lo0bits+0x22>
 800d824:	07da      	lsls	r2, r3, #31
 800d826:	d423      	bmi.n	800d870 <__lo0bits+0x56>
 800d828:	0798      	lsls	r0, r3, #30
 800d82a:	bf49      	itett	mi
 800d82c:	085b      	lsrmi	r3, r3, #1
 800d82e:	089b      	lsrpl	r3, r3, #2
 800d830:	2001      	movmi	r0, #1
 800d832:	600b      	strmi	r3, [r1, #0]
 800d834:	bf5c      	itt	pl
 800d836:	600b      	strpl	r3, [r1, #0]
 800d838:	2002      	movpl	r0, #2
 800d83a:	4770      	bx	lr
 800d83c:	b298      	uxth	r0, r3
 800d83e:	b9a8      	cbnz	r0, 800d86c <__lo0bits+0x52>
 800d840:	0c1b      	lsrs	r3, r3, #16
 800d842:	2010      	movs	r0, #16
 800d844:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d848:	bf04      	itt	eq
 800d84a:	0a1b      	lsreq	r3, r3, #8
 800d84c:	3008      	addeq	r0, #8
 800d84e:	071a      	lsls	r2, r3, #28
 800d850:	bf04      	itt	eq
 800d852:	091b      	lsreq	r3, r3, #4
 800d854:	3004      	addeq	r0, #4
 800d856:	079a      	lsls	r2, r3, #30
 800d858:	bf04      	itt	eq
 800d85a:	089b      	lsreq	r3, r3, #2
 800d85c:	3002      	addeq	r0, #2
 800d85e:	07da      	lsls	r2, r3, #31
 800d860:	d402      	bmi.n	800d868 <__lo0bits+0x4e>
 800d862:	085b      	lsrs	r3, r3, #1
 800d864:	d006      	beq.n	800d874 <__lo0bits+0x5a>
 800d866:	3001      	adds	r0, #1
 800d868:	600b      	str	r3, [r1, #0]
 800d86a:	4770      	bx	lr
 800d86c:	4610      	mov	r0, r2
 800d86e:	e7e9      	b.n	800d844 <__lo0bits+0x2a>
 800d870:	2000      	movs	r0, #0
 800d872:	4770      	bx	lr
 800d874:	2020      	movs	r0, #32
 800d876:	4770      	bx	lr

0800d878 <__i2b>:
 800d878:	b510      	push	{r4, lr}
 800d87a:	460c      	mov	r4, r1
 800d87c:	2101      	movs	r1, #1
 800d87e:	f7ff ff27 	bl	800d6d0 <_Balloc>
 800d882:	2201      	movs	r2, #1
 800d884:	6144      	str	r4, [r0, #20]
 800d886:	6102      	str	r2, [r0, #16]
 800d888:	bd10      	pop	{r4, pc}

0800d88a <__multiply>:
 800d88a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88e:	4614      	mov	r4, r2
 800d890:	690a      	ldr	r2, [r1, #16]
 800d892:	6923      	ldr	r3, [r4, #16]
 800d894:	429a      	cmp	r2, r3
 800d896:	bfb8      	it	lt
 800d898:	460b      	movlt	r3, r1
 800d89a:	4688      	mov	r8, r1
 800d89c:	bfbc      	itt	lt
 800d89e:	46a0      	movlt	r8, r4
 800d8a0:	461c      	movlt	r4, r3
 800d8a2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d8a6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d8aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d8b2:	eb07 0609 	add.w	r6, r7, r9
 800d8b6:	42b3      	cmp	r3, r6
 800d8b8:	bfb8      	it	lt
 800d8ba:	3101      	addlt	r1, #1
 800d8bc:	f7ff ff08 	bl	800d6d0 <_Balloc>
 800d8c0:	f100 0514 	add.w	r5, r0, #20
 800d8c4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d8c8:	462b      	mov	r3, r5
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	4573      	cmp	r3, lr
 800d8ce:	d316      	bcc.n	800d8fe <__multiply+0x74>
 800d8d0:	f104 0214 	add.w	r2, r4, #20
 800d8d4:	f108 0114 	add.w	r1, r8, #20
 800d8d8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d8dc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	9b00      	ldr	r3, [sp, #0]
 800d8e4:	9201      	str	r2, [sp, #4]
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d80c      	bhi.n	800d904 <__multiply+0x7a>
 800d8ea:	2e00      	cmp	r6, #0
 800d8ec:	dd03      	ble.n	800d8f6 <__multiply+0x6c>
 800d8ee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d05d      	beq.n	800d9b2 <__multiply+0x128>
 800d8f6:	6106      	str	r6, [r0, #16]
 800d8f8:	b003      	add	sp, #12
 800d8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fe:	f843 2b04 	str.w	r2, [r3], #4
 800d902:	e7e3      	b.n	800d8cc <__multiply+0x42>
 800d904:	f8b2 b000 	ldrh.w	fp, [r2]
 800d908:	f1bb 0f00 	cmp.w	fp, #0
 800d90c:	d023      	beq.n	800d956 <__multiply+0xcc>
 800d90e:	4689      	mov	r9, r1
 800d910:	46ac      	mov	ip, r5
 800d912:	f04f 0800 	mov.w	r8, #0
 800d916:	f859 4b04 	ldr.w	r4, [r9], #4
 800d91a:	f8dc a000 	ldr.w	sl, [ip]
 800d91e:	b2a3      	uxth	r3, r4
 800d920:	fa1f fa8a 	uxth.w	sl, sl
 800d924:	fb0b a303 	mla	r3, fp, r3, sl
 800d928:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d92c:	f8dc 4000 	ldr.w	r4, [ip]
 800d930:	4443      	add	r3, r8
 800d932:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d936:	fb0b 840a 	mla	r4, fp, sl, r8
 800d93a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d93e:	46e2      	mov	sl, ip
 800d940:	b29b      	uxth	r3, r3
 800d942:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d946:	454f      	cmp	r7, r9
 800d948:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d94c:	f84a 3b04 	str.w	r3, [sl], #4
 800d950:	d82b      	bhi.n	800d9aa <__multiply+0x120>
 800d952:	f8cc 8004 	str.w	r8, [ip, #4]
 800d956:	9b01      	ldr	r3, [sp, #4]
 800d958:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d95c:	3204      	adds	r2, #4
 800d95e:	f1ba 0f00 	cmp.w	sl, #0
 800d962:	d020      	beq.n	800d9a6 <__multiply+0x11c>
 800d964:	682b      	ldr	r3, [r5, #0]
 800d966:	4689      	mov	r9, r1
 800d968:	46a8      	mov	r8, r5
 800d96a:	f04f 0b00 	mov.w	fp, #0
 800d96e:	f8b9 c000 	ldrh.w	ip, [r9]
 800d972:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d976:	fb0a 440c 	mla	r4, sl, ip, r4
 800d97a:	445c      	add	r4, fp
 800d97c:	46c4      	mov	ip, r8
 800d97e:	b29b      	uxth	r3, r3
 800d980:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d984:	f84c 3b04 	str.w	r3, [ip], #4
 800d988:	f859 3b04 	ldr.w	r3, [r9], #4
 800d98c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d990:	0c1b      	lsrs	r3, r3, #16
 800d992:	fb0a b303 	mla	r3, sl, r3, fp
 800d996:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d99a:	454f      	cmp	r7, r9
 800d99c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d9a0:	d805      	bhi.n	800d9ae <__multiply+0x124>
 800d9a2:	f8c8 3004 	str.w	r3, [r8, #4]
 800d9a6:	3504      	adds	r5, #4
 800d9a8:	e79b      	b.n	800d8e2 <__multiply+0x58>
 800d9aa:	46d4      	mov	ip, sl
 800d9ac:	e7b3      	b.n	800d916 <__multiply+0x8c>
 800d9ae:	46e0      	mov	r8, ip
 800d9b0:	e7dd      	b.n	800d96e <__multiply+0xe4>
 800d9b2:	3e01      	subs	r6, #1
 800d9b4:	e799      	b.n	800d8ea <__multiply+0x60>
	...

0800d9b8 <__pow5mult>:
 800d9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9bc:	4615      	mov	r5, r2
 800d9be:	f012 0203 	ands.w	r2, r2, #3
 800d9c2:	4606      	mov	r6, r0
 800d9c4:	460f      	mov	r7, r1
 800d9c6:	d007      	beq.n	800d9d8 <__pow5mult+0x20>
 800d9c8:	3a01      	subs	r2, #1
 800d9ca:	4c21      	ldr	r4, [pc, #132]	; (800da50 <__pow5mult+0x98>)
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9d2:	f7ff fec8 	bl	800d766 <__multadd>
 800d9d6:	4607      	mov	r7, r0
 800d9d8:	10ad      	asrs	r5, r5, #2
 800d9da:	d035      	beq.n	800da48 <__pow5mult+0x90>
 800d9dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9de:	b93c      	cbnz	r4, 800d9f0 <__pow5mult+0x38>
 800d9e0:	2010      	movs	r0, #16
 800d9e2:	f7ff fe6d 	bl	800d6c0 <malloc>
 800d9e6:	6270      	str	r0, [r6, #36]	; 0x24
 800d9e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9ec:	6004      	str	r4, [r0, #0]
 800d9ee:	60c4      	str	r4, [r0, #12]
 800d9f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d9f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9f8:	b94c      	cbnz	r4, 800da0e <__pow5mult+0x56>
 800d9fa:	f240 2171 	movw	r1, #625	; 0x271
 800d9fe:	4630      	mov	r0, r6
 800da00:	f7ff ff3a 	bl	800d878 <__i2b>
 800da04:	2300      	movs	r3, #0
 800da06:	f8c8 0008 	str.w	r0, [r8, #8]
 800da0a:	4604      	mov	r4, r0
 800da0c:	6003      	str	r3, [r0, #0]
 800da0e:	f04f 0800 	mov.w	r8, #0
 800da12:	07eb      	lsls	r3, r5, #31
 800da14:	d50a      	bpl.n	800da2c <__pow5mult+0x74>
 800da16:	4639      	mov	r1, r7
 800da18:	4622      	mov	r2, r4
 800da1a:	4630      	mov	r0, r6
 800da1c:	f7ff ff35 	bl	800d88a <__multiply>
 800da20:	4639      	mov	r1, r7
 800da22:	4681      	mov	r9, r0
 800da24:	4630      	mov	r0, r6
 800da26:	f7ff fe87 	bl	800d738 <_Bfree>
 800da2a:	464f      	mov	r7, r9
 800da2c:	106d      	asrs	r5, r5, #1
 800da2e:	d00b      	beq.n	800da48 <__pow5mult+0x90>
 800da30:	6820      	ldr	r0, [r4, #0]
 800da32:	b938      	cbnz	r0, 800da44 <__pow5mult+0x8c>
 800da34:	4622      	mov	r2, r4
 800da36:	4621      	mov	r1, r4
 800da38:	4630      	mov	r0, r6
 800da3a:	f7ff ff26 	bl	800d88a <__multiply>
 800da3e:	6020      	str	r0, [r4, #0]
 800da40:	f8c0 8000 	str.w	r8, [r0]
 800da44:	4604      	mov	r4, r0
 800da46:	e7e4      	b.n	800da12 <__pow5mult+0x5a>
 800da48:	4638      	mov	r0, r7
 800da4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da4e:	bf00      	nop
 800da50:	0800e768 	.word	0x0800e768

0800da54 <__lshift>:
 800da54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da58:	460c      	mov	r4, r1
 800da5a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da5e:	6923      	ldr	r3, [r4, #16]
 800da60:	6849      	ldr	r1, [r1, #4]
 800da62:	eb0a 0903 	add.w	r9, sl, r3
 800da66:	68a3      	ldr	r3, [r4, #8]
 800da68:	4607      	mov	r7, r0
 800da6a:	4616      	mov	r6, r2
 800da6c:	f109 0501 	add.w	r5, r9, #1
 800da70:	42ab      	cmp	r3, r5
 800da72:	db32      	blt.n	800dada <__lshift+0x86>
 800da74:	4638      	mov	r0, r7
 800da76:	f7ff fe2b 	bl	800d6d0 <_Balloc>
 800da7a:	2300      	movs	r3, #0
 800da7c:	4680      	mov	r8, r0
 800da7e:	f100 0114 	add.w	r1, r0, #20
 800da82:	461a      	mov	r2, r3
 800da84:	4553      	cmp	r3, sl
 800da86:	db2b      	blt.n	800dae0 <__lshift+0x8c>
 800da88:	6920      	ldr	r0, [r4, #16]
 800da8a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da8e:	f104 0314 	add.w	r3, r4, #20
 800da92:	f016 021f 	ands.w	r2, r6, #31
 800da96:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da9a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da9e:	d025      	beq.n	800daec <__lshift+0x98>
 800daa0:	f1c2 0e20 	rsb	lr, r2, #32
 800daa4:	2000      	movs	r0, #0
 800daa6:	681e      	ldr	r6, [r3, #0]
 800daa8:	468a      	mov	sl, r1
 800daaa:	4096      	lsls	r6, r2
 800daac:	4330      	orrs	r0, r6
 800daae:	f84a 0b04 	str.w	r0, [sl], #4
 800dab2:	f853 0b04 	ldr.w	r0, [r3], #4
 800dab6:	459c      	cmp	ip, r3
 800dab8:	fa20 f00e 	lsr.w	r0, r0, lr
 800dabc:	d814      	bhi.n	800dae8 <__lshift+0x94>
 800dabe:	6048      	str	r0, [r1, #4]
 800dac0:	b108      	cbz	r0, 800dac6 <__lshift+0x72>
 800dac2:	f109 0502 	add.w	r5, r9, #2
 800dac6:	3d01      	subs	r5, #1
 800dac8:	4638      	mov	r0, r7
 800daca:	f8c8 5010 	str.w	r5, [r8, #16]
 800dace:	4621      	mov	r1, r4
 800dad0:	f7ff fe32 	bl	800d738 <_Bfree>
 800dad4:	4640      	mov	r0, r8
 800dad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dada:	3101      	adds	r1, #1
 800dadc:	005b      	lsls	r3, r3, #1
 800dade:	e7c7      	b.n	800da70 <__lshift+0x1c>
 800dae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dae4:	3301      	adds	r3, #1
 800dae6:	e7cd      	b.n	800da84 <__lshift+0x30>
 800dae8:	4651      	mov	r1, sl
 800daea:	e7dc      	b.n	800daa6 <__lshift+0x52>
 800daec:	3904      	subs	r1, #4
 800daee:	f853 2b04 	ldr.w	r2, [r3], #4
 800daf2:	f841 2f04 	str.w	r2, [r1, #4]!
 800daf6:	459c      	cmp	ip, r3
 800daf8:	d8f9      	bhi.n	800daee <__lshift+0x9a>
 800dafa:	e7e4      	b.n	800dac6 <__lshift+0x72>

0800dafc <__mcmp>:
 800dafc:	6903      	ldr	r3, [r0, #16]
 800dafe:	690a      	ldr	r2, [r1, #16]
 800db00:	1a9b      	subs	r3, r3, r2
 800db02:	b530      	push	{r4, r5, lr}
 800db04:	d10c      	bne.n	800db20 <__mcmp+0x24>
 800db06:	0092      	lsls	r2, r2, #2
 800db08:	3014      	adds	r0, #20
 800db0a:	3114      	adds	r1, #20
 800db0c:	1884      	adds	r4, r0, r2
 800db0e:	4411      	add	r1, r2
 800db10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db18:	4295      	cmp	r5, r2
 800db1a:	d003      	beq.n	800db24 <__mcmp+0x28>
 800db1c:	d305      	bcc.n	800db2a <__mcmp+0x2e>
 800db1e:	2301      	movs	r3, #1
 800db20:	4618      	mov	r0, r3
 800db22:	bd30      	pop	{r4, r5, pc}
 800db24:	42a0      	cmp	r0, r4
 800db26:	d3f3      	bcc.n	800db10 <__mcmp+0x14>
 800db28:	e7fa      	b.n	800db20 <__mcmp+0x24>
 800db2a:	f04f 33ff 	mov.w	r3, #4294967295
 800db2e:	e7f7      	b.n	800db20 <__mcmp+0x24>

0800db30 <__mdiff>:
 800db30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db34:	460d      	mov	r5, r1
 800db36:	4607      	mov	r7, r0
 800db38:	4611      	mov	r1, r2
 800db3a:	4628      	mov	r0, r5
 800db3c:	4614      	mov	r4, r2
 800db3e:	f7ff ffdd 	bl	800dafc <__mcmp>
 800db42:	1e06      	subs	r6, r0, #0
 800db44:	d108      	bne.n	800db58 <__mdiff+0x28>
 800db46:	4631      	mov	r1, r6
 800db48:	4638      	mov	r0, r7
 800db4a:	f7ff fdc1 	bl	800d6d0 <_Balloc>
 800db4e:	2301      	movs	r3, #1
 800db50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800db54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db58:	bfa4      	itt	ge
 800db5a:	4623      	movge	r3, r4
 800db5c:	462c      	movge	r4, r5
 800db5e:	4638      	mov	r0, r7
 800db60:	6861      	ldr	r1, [r4, #4]
 800db62:	bfa6      	itte	ge
 800db64:	461d      	movge	r5, r3
 800db66:	2600      	movge	r6, #0
 800db68:	2601      	movlt	r6, #1
 800db6a:	f7ff fdb1 	bl	800d6d0 <_Balloc>
 800db6e:	692b      	ldr	r3, [r5, #16]
 800db70:	60c6      	str	r6, [r0, #12]
 800db72:	6926      	ldr	r6, [r4, #16]
 800db74:	f105 0914 	add.w	r9, r5, #20
 800db78:	f104 0214 	add.w	r2, r4, #20
 800db7c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800db80:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800db84:	f100 0514 	add.w	r5, r0, #20
 800db88:	f04f 0e00 	mov.w	lr, #0
 800db8c:	f852 ab04 	ldr.w	sl, [r2], #4
 800db90:	f859 4b04 	ldr.w	r4, [r9], #4
 800db94:	fa1e f18a 	uxtah	r1, lr, sl
 800db98:	b2a3      	uxth	r3, r4
 800db9a:	1ac9      	subs	r1, r1, r3
 800db9c:	0c23      	lsrs	r3, r4, #16
 800db9e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800dba2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dba6:	b289      	uxth	r1, r1
 800dba8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800dbac:	45c8      	cmp	r8, r9
 800dbae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dbb2:	4694      	mov	ip, r2
 800dbb4:	f845 3b04 	str.w	r3, [r5], #4
 800dbb8:	d8e8      	bhi.n	800db8c <__mdiff+0x5c>
 800dbba:	45bc      	cmp	ip, r7
 800dbbc:	d304      	bcc.n	800dbc8 <__mdiff+0x98>
 800dbbe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800dbc2:	b183      	cbz	r3, 800dbe6 <__mdiff+0xb6>
 800dbc4:	6106      	str	r6, [r0, #16]
 800dbc6:	e7c5      	b.n	800db54 <__mdiff+0x24>
 800dbc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dbcc:	fa1e f381 	uxtah	r3, lr, r1
 800dbd0:	141a      	asrs	r2, r3, #16
 800dbd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbdc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800dbe0:	f845 3b04 	str.w	r3, [r5], #4
 800dbe4:	e7e9      	b.n	800dbba <__mdiff+0x8a>
 800dbe6:	3e01      	subs	r6, #1
 800dbe8:	e7e9      	b.n	800dbbe <__mdiff+0x8e>

0800dbea <__d2b>:
 800dbea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbee:	460e      	mov	r6, r1
 800dbf0:	2101      	movs	r1, #1
 800dbf2:	ec59 8b10 	vmov	r8, r9, d0
 800dbf6:	4615      	mov	r5, r2
 800dbf8:	f7ff fd6a 	bl	800d6d0 <_Balloc>
 800dbfc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800dc00:	4607      	mov	r7, r0
 800dc02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc06:	bb34      	cbnz	r4, 800dc56 <__d2b+0x6c>
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	f1b8 0300 	subs.w	r3, r8, #0
 800dc0e:	d027      	beq.n	800dc60 <__d2b+0x76>
 800dc10:	a802      	add	r0, sp, #8
 800dc12:	f840 3d08 	str.w	r3, [r0, #-8]!
 800dc16:	f7ff fe00 	bl	800d81a <__lo0bits>
 800dc1a:	9900      	ldr	r1, [sp, #0]
 800dc1c:	b1f0      	cbz	r0, 800dc5c <__d2b+0x72>
 800dc1e:	9a01      	ldr	r2, [sp, #4]
 800dc20:	f1c0 0320 	rsb	r3, r0, #32
 800dc24:	fa02 f303 	lsl.w	r3, r2, r3
 800dc28:	430b      	orrs	r3, r1
 800dc2a:	40c2      	lsrs	r2, r0
 800dc2c:	617b      	str	r3, [r7, #20]
 800dc2e:	9201      	str	r2, [sp, #4]
 800dc30:	9b01      	ldr	r3, [sp, #4]
 800dc32:	61bb      	str	r3, [r7, #24]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	bf14      	ite	ne
 800dc38:	2102      	movne	r1, #2
 800dc3a:	2101      	moveq	r1, #1
 800dc3c:	6139      	str	r1, [r7, #16]
 800dc3e:	b1c4      	cbz	r4, 800dc72 <__d2b+0x88>
 800dc40:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800dc44:	4404      	add	r4, r0
 800dc46:	6034      	str	r4, [r6, #0]
 800dc48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc4c:	6028      	str	r0, [r5, #0]
 800dc4e:	4638      	mov	r0, r7
 800dc50:	b003      	add	sp, #12
 800dc52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc5a:	e7d5      	b.n	800dc08 <__d2b+0x1e>
 800dc5c:	6179      	str	r1, [r7, #20]
 800dc5e:	e7e7      	b.n	800dc30 <__d2b+0x46>
 800dc60:	a801      	add	r0, sp, #4
 800dc62:	f7ff fdda 	bl	800d81a <__lo0bits>
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	617b      	str	r3, [r7, #20]
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	6139      	str	r1, [r7, #16]
 800dc6e:	3020      	adds	r0, #32
 800dc70:	e7e5      	b.n	800dc3e <__d2b+0x54>
 800dc72:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800dc76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc7a:	6030      	str	r0, [r6, #0]
 800dc7c:	6918      	ldr	r0, [r3, #16]
 800dc7e:	f7ff fdad 	bl	800d7dc <__hi0bits>
 800dc82:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800dc86:	e7e1      	b.n	800dc4c <__d2b+0x62>

0800dc88 <_calloc_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	fb02 f401 	mul.w	r4, r2, r1
 800dc8e:	4621      	mov	r1, r4
 800dc90:	f000 f856 	bl	800dd40 <_malloc_r>
 800dc94:	4605      	mov	r5, r0
 800dc96:	b118      	cbz	r0, 800dca0 <_calloc_r+0x18>
 800dc98:	4622      	mov	r2, r4
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	f7fd fe92 	bl	800b9c4 <memset>
 800dca0:	4628      	mov	r0, r5
 800dca2:	bd38      	pop	{r3, r4, r5, pc}

0800dca4 <_free_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4605      	mov	r5, r0
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	d045      	beq.n	800dd38 <_free_r+0x94>
 800dcac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcb0:	1f0c      	subs	r4, r1, #4
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	bfb8      	it	lt
 800dcb6:	18e4      	addlt	r4, r4, r3
 800dcb8:	f000 fa98 	bl	800e1ec <__malloc_lock>
 800dcbc:	4a1f      	ldr	r2, [pc, #124]	; (800dd3c <_free_r+0x98>)
 800dcbe:	6813      	ldr	r3, [r2, #0]
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	b933      	cbnz	r3, 800dcd2 <_free_r+0x2e>
 800dcc4:	6063      	str	r3, [r4, #4]
 800dcc6:	6014      	str	r4, [r2, #0]
 800dcc8:	4628      	mov	r0, r5
 800dcca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcce:	f000 ba8e 	b.w	800e1ee <__malloc_unlock>
 800dcd2:	42a3      	cmp	r3, r4
 800dcd4:	d90c      	bls.n	800dcf0 <_free_r+0x4c>
 800dcd6:	6821      	ldr	r1, [r4, #0]
 800dcd8:	1862      	adds	r2, r4, r1
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	bf04      	itt	eq
 800dcde:	681a      	ldreq	r2, [r3, #0]
 800dce0:	685b      	ldreq	r3, [r3, #4]
 800dce2:	6063      	str	r3, [r4, #4]
 800dce4:	bf04      	itt	eq
 800dce6:	1852      	addeq	r2, r2, r1
 800dce8:	6022      	streq	r2, [r4, #0]
 800dcea:	6004      	str	r4, [r0, #0]
 800dcec:	e7ec      	b.n	800dcc8 <_free_r+0x24>
 800dcee:	4613      	mov	r3, r2
 800dcf0:	685a      	ldr	r2, [r3, #4]
 800dcf2:	b10a      	cbz	r2, 800dcf8 <_free_r+0x54>
 800dcf4:	42a2      	cmp	r2, r4
 800dcf6:	d9fa      	bls.n	800dcee <_free_r+0x4a>
 800dcf8:	6819      	ldr	r1, [r3, #0]
 800dcfa:	1858      	adds	r0, r3, r1
 800dcfc:	42a0      	cmp	r0, r4
 800dcfe:	d10b      	bne.n	800dd18 <_free_r+0x74>
 800dd00:	6820      	ldr	r0, [r4, #0]
 800dd02:	4401      	add	r1, r0
 800dd04:	1858      	adds	r0, r3, r1
 800dd06:	4282      	cmp	r2, r0
 800dd08:	6019      	str	r1, [r3, #0]
 800dd0a:	d1dd      	bne.n	800dcc8 <_free_r+0x24>
 800dd0c:	6810      	ldr	r0, [r2, #0]
 800dd0e:	6852      	ldr	r2, [r2, #4]
 800dd10:	605a      	str	r2, [r3, #4]
 800dd12:	4401      	add	r1, r0
 800dd14:	6019      	str	r1, [r3, #0]
 800dd16:	e7d7      	b.n	800dcc8 <_free_r+0x24>
 800dd18:	d902      	bls.n	800dd20 <_free_r+0x7c>
 800dd1a:	230c      	movs	r3, #12
 800dd1c:	602b      	str	r3, [r5, #0]
 800dd1e:	e7d3      	b.n	800dcc8 <_free_r+0x24>
 800dd20:	6820      	ldr	r0, [r4, #0]
 800dd22:	1821      	adds	r1, r4, r0
 800dd24:	428a      	cmp	r2, r1
 800dd26:	bf04      	itt	eq
 800dd28:	6811      	ldreq	r1, [r2, #0]
 800dd2a:	6852      	ldreq	r2, [r2, #4]
 800dd2c:	6062      	str	r2, [r4, #4]
 800dd2e:	bf04      	itt	eq
 800dd30:	1809      	addeq	r1, r1, r0
 800dd32:	6021      	streq	r1, [r4, #0]
 800dd34:	605c      	str	r4, [r3, #4]
 800dd36:	e7c7      	b.n	800dcc8 <_free_r+0x24>
 800dd38:	bd38      	pop	{r3, r4, r5, pc}
 800dd3a:	bf00      	nop
 800dd3c:	200017e4 	.word	0x200017e4

0800dd40 <_malloc_r>:
 800dd40:	b570      	push	{r4, r5, r6, lr}
 800dd42:	1ccd      	adds	r5, r1, #3
 800dd44:	f025 0503 	bic.w	r5, r5, #3
 800dd48:	3508      	adds	r5, #8
 800dd4a:	2d0c      	cmp	r5, #12
 800dd4c:	bf38      	it	cc
 800dd4e:	250c      	movcc	r5, #12
 800dd50:	2d00      	cmp	r5, #0
 800dd52:	4606      	mov	r6, r0
 800dd54:	db01      	blt.n	800dd5a <_malloc_r+0x1a>
 800dd56:	42a9      	cmp	r1, r5
 800dd58:	d903      	bls.n	800dd62 <_malloc_r+0x22>
 800dd5a:	230c      	movs	r3, #12
 800dd5c:	6033      	str	r3, [r6, #0]
 800dd5e:	2000      	movs	r0, #0
 800dd60:	bd70      	pop	{r4, r5, r6, pc}
 800dd62:	f000 fa43 	bl	800e1ec <__malloc_lock>
 800dd66:	4a21      	ldr	r2, [pc, #132]	; (800ddec <_malloc_r+0xac>)
 800dd68:	6814      	ldr	r4, [r2, #0]
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	b991      	cbnz	r1, 800dd94 <_malloc_r+0x54>
 800dd6e:	4c20      	ldr	r4, [pc, #128]	; (800ddf0 <_malloc_r+0xb0>)
 800dd70:	6823      	ldr	r3, [r4, #0]
 800dd72:	b91b      	cbnz	r3, 800dd7c <_malloc_r+0x3c>
 800dd74:	4630      	mov	r0, r6
 800dd76:	f000 f97d 	bl	800e074 <_sbrk_r>
 800dd7a:	6020      	str	r0, [r4, #0]
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	4630      	mov	r0, r6
 800dd80:	f000 f978 	bl	800e074 <_sbrk_r>
 800dd84:	1c43      	adds	r3, r0, #1
 800dd86:	d124      	bne.n	800ddd2 <_malloc_r+0x92>
 800dd88:	230c      	movs	r3, #12
 800dd8a:	6033      	str	r3, [r6, #0]
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	f000 fa2e 	bl	800e1ee <__malloc_unlock>
 800dd92:	e7e4      	b.n	800dd5e <_malloc_r+0x1e>
 800dd94:	680b      	ldr	r3, [r1, #0]
 800dd96:	1b5b      	subs	r3, r3, r5
 800dd98:	d418      	bmi.n	800ddcc <_malloc_r+0x8c>
 800dd9a:	2b0b      	cmp	r3, #11
 800dd9c:	d90f      	bls.n	800ddbe <_malloc_r+0x7e>
 800dd9e:	600b      	str	r3, [r1, #0]
 800dda0:	50cd      	str	r5, [r1, r3]
 800dda2:	18cc      	adds	r4, r1, r3
 800dda4:	4630      	mov	r0, r6
 800dda6:	f000 fa22 	bl	800e1ee <__malloc_unlock>
 800ddaa:	f104 000b 	add.w	r0, r4, #11
 800ddae:	1d23      	adds	r3, r4, #4
 800ddb0:	f020 0007 	bic.w	r0, r0, #7
 800ddb4:	1ac3      	subs	r3, r0, r3
 800ddb6:	d0d3      	beq.n	800dd60 <_malloc_r+0x20>
 800ddb8:	425a      	negs	r2, r3
 800ddba:	50e2      	str	r2, [r4, r3]
 800ddbc:	e7d0      	b.n	800dd60 <_malloc_r+0x20>
 800ddbe:	428c      	cmp	r4, r1
 800ddc0:	684b      	ldr	r3, [r1, #4]
 800ddc2:	bf16      	itet	ne
 800ddc4:	6063      	strne	r3, [r4, #4]
 800ddc6:	6013      	streq	r3, [r2, #0]
 800ddc8:	460c      	movne	r4, r1
 800ddca:	e7eb      	b.n	800dda4 <_malloc_r+0x64>
 800ddcc:	460c      	mov	r4, r1
 800ddce:	6849      	ldr	r1, [r1, #4]
 800ddd0:	e7cc      	b.n	800dd6c <_malloc_r+0x2c>
 800ddd2:	1cc4      	adds	r4, r0, #3
 800ddd4:	f024 0403 	bic.w	r4, r4, #3
 800ddd8:	42a0      	cmp	r0, r4
 800ddda:	d005      	beq.n	800dde8 <_malloc_r+0xa8>
 800dddc:	1a21      	subs	r1, r4, r0
 800ddde:	4630      	mov	r0, r6
 800dde0:	f000 f948 	bl	800e074 <_sbrk_r>
 800dde4:	3001      	adds	r0, #1
 800dde6:	d0cf      	beq.n	800dd88 <_malloc_r+0x48>
 800dde8:	6025      	str	r5, [r4, #0]
 800ddea:	e7db      	b.n	800dda4 <_malloc_r+0x64>
 800ddec:	200017e4 	.word	0x200017e4
 800ddf0:	200017e8 	.word	0x200017e8

0800ddf4 <__sfputc_r>:
 800ddf4:	6893      	ldr	r3, [r2, #8]
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	b410      	push	{r4}
 800ddfc:	6093      	str	r3, [r2, #8]
 800ddfe:	da08      	bge.n	800de12 <__sfputc_r+0x1e>
 800de00:	6994      	ldr	r4, [r2, #24]
 800de02:	42a3      	cmp	r3, r4
 800de04:	db01      	blt.n	800de0a <__sfputc_r+0x16>
 800de06:	290a      	cmp	r1, #10
 800de08:	d103      	bne.n	800de12 <__sfputc_r+0x1e>
 800de0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de0e:	f7fe bb67 	b.w	800c4e0 <__swbuf_r>
 800de12:	6813      	ldr	r3, [r2, #0]
 800de14:	1c58      	adds	r0, r3, #1
 800de16:	6010      	str	r0, [r2, #0]
 800de18:	7019      	strb	r1, [r3, #0]
 800de1a:	4608      	mov	r0, r1
 800de1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de20:	4770      	bx	lr

0800de22 <__sfputs_r>:
 800de22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de24:	4606      	mov	r6, r0
 800de26:	460f      	mov	r7, r1
 800de28:	4614      	mov	r4, r2
 800de2a:	18d5      	adds	r5, r2, r3
 800de2c:	42ac      	cmp	r4, r5
 800de2e:	d101      	bne.n	800de34 <__sfputs_r+0x12>
 800de30:	2000      	movs	r0, #0
 800de32:	e007      	b.n	800de44 <__sfputs_r+0x22>
 800de34:	463a      	mov	r2, r7
 800de36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de3a:	4630      	mov	r0, r6
 800de3c:	f7ff ffda 	bl	800ddf4 <__sfputc_r>
 800de40:	1c43      	adds	r3, r0, #1
 800de42:	d1f3      	bne.n	800de2c <__sfputs_r+0xa>
 800de44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de48 <_vfiprintf_r>:
 800de48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de4c:	460c      	mov	r4, r1
 800de4e:	b09d      	sub	sp, #116	; 0x74
 800de50:	4617      	mov	r7, r2
 800de52:	461d      	mov	r5, r3
 800de54:	4606      	mov	r6, r0
 800de56:	b118      	cbz	r0, 800de60 <_vfiprintf_r+0x18>
 800de58:	6983      	ldr	r3, [r0, #24]
 800de5a:	b90b      	cbnz	r3, 800de60 <_vfiprintf_r+0x18>
 800de5c:	f7ff fb34 	bl	800d4c8 <__sinit>
 800de60:	4b7c      	ldr	r3, [pc, #496]	; (800e054 <_vfiprintf_r+0x20c>)
 800de62:	429c      	cmp	r4, r3
 800de64:	d158      	bne.n	800df18 <_vfiprintf_r+0xd0>
 800de66:	6874      	ldr	r4, [r6, #4]
 800de68:	89a3      	ldrh	r3, [r4, #12]
 800de6a:	0718      	lsls	r0, r3, #28
 800de6c:	d55e      	bpl.n	800df2c <_vfiprintf_r+0xe4>
 800de6e:	6923      	ldr	r3, [r4, #16]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d05b      	beq.n	800df2c <_vfiprintf_r+0xe4>
 800de74:	2300      	movs	r3, #0
 800de76:	9309      	str	r3, [sp, #36]	; 0x24
 800de78:	2320      	movs	r3, #32
 800de7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de7e:	2330      	movs	r3, #48	; 0x30
 800de80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de84:	9503      	str	r5, [sp, #12]
 800de86:	f04f 0b01 	mov.w	fp, #1
 800de8a:	46b8      	mov	r8, r7
 800de8c:	4645      	mov	r5, r8
 800de8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800de92:	b10b      	cbz	r3, 800de98 <_vfiprintf_r+0x50>
 800de94:	2b25      	cmp	r3, #37	; 0x25
 800de96:	d154      	bne.n	800df42 <_vfiprintf_r+0xfa>
 800de98:	ebb8 0a07 	subs.w	sl, r8, r7
 800de9c:	d00b      	beq.n	800deb6 <_vfiprintf_r+0x6e>
 800de9e:	4653      	mov	r3, sl
 800dea0:	463a      	mov	r2, r7
 800dea2:	4621      	mov	r1, r4
 800dea4:	4630      	mov	r0, r6
 800dea6:	f7ff ffbc 	bl	800de22 <__sfputs_r>
 800deaa:	3001      	adds	r0, #1
 800deac:	f000 80c2 	beq.w	800e034 <_vfiprintf_r+0x1ec>
 800deb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb2:	4453      	add	r3, sl
 800deb4:	9309      	str	r3, [sp, #36]	; 0x24
 800deb6:	f898 3000 	ldrb.w	r3, [r8]
 800deba:	2b00      	cmp	r3, #0
 800debc:	f000 80ba 	beq.w	800e034 <_vfiprintf_r+0x1ec>
 800dec0:	2300      	movs	r3, #0
 800dec2:	f04f 32ff 	mov.w	r2, #4294967295
 800dec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deca:	9304      	str	r3, [sp, #16]
 800decc:	9307      	str	r3, [sp, #28]
 800dece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ded2:	931a      	str	r3, [sp, #104]	; 0x68
 800ded4:	46a8      	mov	r8, r5
 800ded6:	2205      	movs	r2, #5
 800ded8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dedc:	485e      	ldr	r0, [pc, #376]	; (800e058 <_vfiprintf_r+0x210>)
 800dede:	f7f2 f97f 	bl	80001e0 <memchr>
 800dee2:	9b04      	ldr	r3, [sp, #16]
 800dee4:	bb78      	cbnz	r0, 800df46 <_vfiprintf_r+0xfe>
 800dee6:	06d9      	lsls	r1, r3, #27
 800dee8:	bf44      	itt	mi
 800deea:	2220      	movmi	r2, #32
 800deec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800def0:	071a      	lsls	r2, r3, #28
 800def2:	bf44      	itt	mi
 800def4:	222b      	movmi	r2, #43	; 0x2b
 800def6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800defa:	782a      	ldrb	r2, [r5, #0]
 800defc:	2a2a      	cmp	r2, #42	; 0x2a
 800defe:	d02a      	beq.n	800df56 <_vfiprintf_r+0x10e>
 800df00:	9a07      	ldr	r2, [sp, #28]
 800df02:	46a8      	mov	r8, r5
 800df04:	2000      	movs	r0, #0
 800df06:	250a      	movs	r5, #10
 800df08:	4641      	mov	r1, r8
 800df0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df0e:	3b30      	subs	r3, #48	; 0x30
 800df10:	2b09      	cmp	r3, #9
 800df12:	d969      	bls.n	800dfe8 <_vfiprintf_r+0x1a0>
 800df14:	b360      	cbz	r0, 800df70 <_vfiprintf_r+0x128>
 800df16:	e024      	b.n	800df62 <_vfiprintf_r+0x11a>
 800df18:	4b50      	ldr	r3, [pc, #320]	; (800e05c <_vfiprintf_r+0x214>)
 800df1a:	429c      	cmp	r4, r3
 800df1c:	d101      	bne.n	800df22 <_vfiprintf_r+0xda>
 800df1e:	68b4      	ldr	r4, [r6, #8]
 800df20:	e7a2      	b.n	800de68 <_vfiprintf_r+0x20>
 800df22:	4b4f      	ldr	r3, [pc, #316]	; (800e060 <_vfiprintf_r+0x218>)
 800df24:	429c      	cmp	r4, r3
 800df26:	bf08      	it	eq
 800df28:	68f4      	ldreq	r4, [r6, #12]
 800df2a:	e79d      	b.n	800de68 <_vfiprintf_r+0x20>
 800df2c:	4621      	mov	r1, r4
 800df2e:	4630      	mov	r0, r6
 800df30:	f7fe fb28 	bl	800c584 <__swsetup_r>
 800df34:	2800      	cmp	r0, #0
 800df36:	d09d      	beq.n	800de74 <_vfiprintf_r+0x2c>
 800df38:	f04f 30ff 	mov.w	r0, #4294967295
 800df3c:	b01d      	add	sp, #116	; 0x74
 800df3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df42:	46a8      	mov	r8, r5
 800df44:	e7a2      	b.n	800de8c <_vfiprintf_r+0x44>
 800df46:	4a44      	ldr	r2, [pc, #272]	; (800e058 <_vfiprintf_r+0x210>)
 800df48:	1a80      	subs	r0, r0, r2
 800df4a:	fa0b f000 	lsl.w	r0, fp, r0
 800df4e:	4318      	orrs	r0, r3
 800df50:	9004      	str	r0, [sp, #16]
 800df52:	4645      	mov	r5, r8
 800df54:	e7be      	b.n	800ded4 <_vfiprintf_r+0x8c>
 800df56:	9a03      	ldr	r2, [sp, #12]
 800df58:	1d11      	adds	r1, r2, #4
 800df5a:	6812      	ldr	r2, [r2, #0]
 800df5c:	9103      	str	r1, [sp, #12]
 800df5e:	2a00      	cmp	r2, #0
 800df60:	db01      	blt.n	800df66 <_vfiprintf_r+0x11e>
 800df62:	9207      	str	r2, [sp, #28]
 800df64:	e004      	b.n	800df70 <_vfiprintf_r+0x128>
 800df66:	4252      	negs	r2, r2
 800df68:	f043 0302 	orr.w	r3, r3, #2
 800df6c:	9207      	str	r2, [sp, #28]
 800df6e:	9304      	str	r3, [sp, #16]
 800df70:	f898 3000 	ldrb.w	r3, [r8]
 800df74:	2b2e      	cmp	r3, #46	; 0x2e
 800df76:	d10e      	bne.n	800df96 <_vfiprintf_r+0x14e>
 800df78:	f898 3001 	ldrb.w	r3, [r8, #1]
 800df7c:	2b2a      	cmp	r3, #42	; 0x2a
 800df7e:	d138      	bne.n	800dff2 <_vfiprintf_r+0x1aa>
 800df80:	9b03      	ldr	r3, [sp, #12]
 800df82:	1d1a      	adds	r2, r3, #4
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	9203      	str	r2, [sp, #12]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	bfb8      	it	lt
 800df8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800df90:	f108 0802 	add.w	r8, r8, #2
 800df94:	9305      	str	r3, [sp, #20]
 800df96:	4d33      	ldr	r5, [pc, #204]	; (800e064 <_vfiprintf_r+0x21c>)
 800df98:	f898 1000 	ldrb.w	r1, [r8]
 800df9c:	2203      	movs	r2, #3
 800df9e:	4628      	mov	r0, r5
 800dfa0:	f7f2 f91e 	bl	80001e0 <memchr>
 800dfa4:	b140      	cbz	r0, 800dfb8 <_vfiprintf_r+0x170>
 800dfa6:	2340      	movs	r3, #64	; 0x40
 800dfa8:	1b40      	subs	r0, r0, r5
 800dfaa:	fa03 f000 	lsl.w	r0, r3, r0
 800dfae:	9b04      	ldr	r3, [sp, #16]
 800dfb0:	4303      	orrs	r3, r0
 800dfb2:	f108 0801 	add.w	r8, r8, #1
 800dfb6:	9304      	str	r3, [sp, #16]
 800dfb8:	f898 1000 	ldrb.w	r1, [r8]
 800dfbc:	482a      	ldr	r0, [pc, #168]	; (800e068 <_vfiprintf_r+0x220>)
 800dfbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfc2:	2206      	movs	r2, #6
 800dfc4:	f108 0701 	add.w	r7, r8, #1
 800dfc8:	f7f2 f90a 	bl	80001e0 <memchr>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d037      	beq.n	800e040 <_vfiprintf_r+0x1f8>
 800dfd0:	4b26      	ldr	r3, [pc, #152]	; (800e06c <_vfiprintf_r+0x224>)
 800dfd2:	bb1b      	cbnz	r3, 800e01c <_vfiprintf_r+0x1d4>
 800dfd4:	9b03      	ldr	r3, [sp, #12]
 800dfd6:	3307      	adds	r3, #7
 800dfd8:	f023 0307 	bic.w	r3, r3, #7
 800dfdc:	3308      	adds	r3, #8
 800dfde:	9303      	str	r3, [sp, #12]
 800dfe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe2:	444b      	add	r3, r9
 800dfe4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfe6:	e750      	b.n	800de8a <_vfiprintf_r+0x42>
 800dfe8:	fb05 3202 	mla	r2, r5, r2, r3
 800dfec:	2001      	movs	r0, #1
 800dfee:	4688      	mov	r8, r1
 800dff0:	e78a      	b.n	800df08 <_vfiprintf_r+0xc0>
 800dff2:	2300      	movs	r3, #0
 800dff4:	f108 0801 	add.w	r8, r8, #1
 800dff8:	9305      	str	r3, [sp, #20]
 800dffa:	4619      	mov	r1, r3
 800dffc:	250a      	movs	r5, #10
 800dffe:	4640      	mov	r0, r8
 800e000:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e004:	3a30      	subs	r2, #48	; 0x30
 800e006:	2a09      	cmp	r2, #9
 800e008:	d903      	bls.n	800e012 <_vfiprintf_r+0x1ca>
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d0c3      	beq.n	800df96 <_vfiprintf_r+0x14e>
 800e00e:	9105      	str	r1, [sp, #20]
 800e010:	e7c1      	b.n	800df96 <_vfiprintf_r+0x14e>
 800e012:	fb05 2101 	mla	r1, r5, r1, r2
 800e016:	2301      	movs	r3, #1
 800e018:	4680      	mov	r8, r0
 800e01a:	e7f0      	b.n	800dffe <_vfiprintf_r+0x1b6>
 800e01c:	ab03      	add	r3, sp, #12
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	4622      	mov	r2, r4
 800e022:	4b13      	ldr	r3, [pc, #76]	; (800e070 <_vfiprintf_r+0x228>)
 800e024:	a904      	add	r1, sp, #16
 800e026:	4630      	mov	r0, r6
 800e028:	f7fd fd68 	bl	800bafc <_printf_float>
 800e02c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e030:	4681      	mov	r9, r0
 800e032:	d1d5      	bne.n	800dfe0 <_vfiprintf_r+0x198>
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	065b      	lsls	r3, r3, #25
 800e038:	f53f af7e 	bmi.w	800df38 <_vfiprintf_r+0xf0>
 800e03c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e03e:	e77d      	b.n	800df3c <_vfiprintf_r+0xf4>
 800e040:	ab03      	add	r3, sp, #12
 800e042:	9300      	str	r3, [sp, #0]
 800e044:	4622      	mov	r2, r4
 800e046:	4b0a      	ldr	r3, [pc, #40]	; (800e070 <_vfiprintf_r+0x228>)
 800e048:	a904      	add	r1, sp, #16
 800e04a:	4630      	mov	r0, r6
 800e04c:	f7fe f80c 	bl	800c068 <_printf_i>
 800e050:	e7ec      	b.n	800e02c <_vfiprintf_r+0x1e4>
 800e052:	bf00      	nop
 800e054:	0800e638 	.word	0x0800e638
 800e058:	0800e774 	.word	0x0800e774
 800e05c:	0800e658 	.word	0x0800e658
 800e060:	0800e618 	.word	0x0800e618
 800e064:	0800e77a 	.word	0x0800e77a
 800e068:	0800e77e 	.word	0x0800e77e
 800e06c:	0800bafd 	.word	0x0800bafd
 800e070:	0800de23 	.word	0x0800de23

0800e074 <_sbrk_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	4c06      	ldr	r4, [pc, #24]	; (800e090 <_sbrk_r+0x1c>)
 800e078:	2300      	movs	r3, #0
 800e07a:	4605      	mov	r5, r0
 800e07c:	4608      	mov	r0, r1
 800e07e:	6023      	str	r3, [r4, #0]
 800e080:	f7f7 fafa 	bl	8005678 <_sbrk>
 800e084:	1c43      	adds	r3, r0, #1
 800e086:	d102      	bne.n	800e08e <_sbrk_r+0x1a>
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	b103      	cbz	r3, 800e08e <_sbrk_r+0x1a>
 800e08c:	602b      	str	r3, [r5, #0]
 800e08e:	bd38      	pop	{r3, r4, r5, pc}
 800e090:	2000292c 	.word	0x2000292c

0800e094 <__sread>:
 800e094:	b510      	push	{r4, lr}
 800e096:	460c      	mov	r4, r1
 800e098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e09c:	f000 f8a8 	bl	800e1f0 <_read_r>
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	bfab      	itete	ge
 800e0a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0a6:	89a3      	ldrhlt	r3, [r4, #12]
 800e0a8:	181b      	addge	r3, r3, r0
 800e0aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0ae:	bfac      	ite	ge
 800e0b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0b2:	81a3      	strhlt	r3, [r4, #12]
 800e0b4:	bd10      	pop	{r4, pc}

0800e0b6 <__swrite>:
 800e0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ba:	461f      	mov	r7, r3
 800e0bc:	898b      	ldrh	r3, [r1, #12]
 800e0be:	05db      	lsls	r3, r3, #23
 800e0c0:	4605      	mov	r5, r0
 800e0c2:	460c      	mov	r4, r1
 800e0c4:	4616      	mov	r6, r2
 800e0c6:	d505      	bpl.n	800e0d4 <__swrite+0x1e>
 800e0c8:	2302      	movs	r3, #2
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0d0:	f000 f868 	bl	800e1a4 <_lseek_r>
 800e0d4:	89a3      	ldrh	r3, [r4, #12]
 800e0d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0de:	81a3      	strh	r3, [r4, #12]
 800e0e0:	4632      	mov	r2, r6
 800e0e2:	463b      	mov	r3, r7
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ea:	f000 b817 	b.w	800e11c <_write_r>

0800e0ee <__sseek>:
 800e0ee:	b510      	push	{r4, lr}
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0f6:	f000 f855 	bl	800e1a4 <_lseek_r>
 800e0fa:	1c43      	adds	r3, r0, #1
 800e0fc:	89a3      	ldrh	r3, [r4, #12]
 800e0fe:	bf15      	itete	ne
 800e100:	6560      	strne	r0, [r4, #84]	; 0x54
 800e102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e10a:	81a3      	strheq	r3, [r4, #12]
 800e10c:	bf18      	it	ne
 800e10e:	81a3      	strhne	r3, [r4, #12]
 800e110:	bd10      	pop	{r4, pc}

0800e112 <__sclose>:
 800e112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e116:	f000 b813 	b.w	800e140 <_close_r>
	...

0800e11c <_write_r>:
 800e11c:	b538      	push	{r3, r4, r5, lr}
 800e11e:	4c07      	ldr	r4, [pc, #28]	; (800e13c <_write_r+0x20>)
 800e120:	4605      	mov	r5, r0
 800e122:	4608      	mov	r0, r1
 800e124:	4611      	mov	r1, r2
 800e126:	2200      	movs	r2, #0
 800e128:	6022      	str	r2, [r4, #0]
 800e12a:	461a      	mov	r2, r3
 800e12c:	f7f4 f90c 	bl	8002348 <_write>
 800e130:	1c43      	adds	r3, r0, #1
 800e132:	d102      	bne.n	800e13a <_write_r+0x1e>
 800e134:	6823      	ldr	r3, [r4, #0]
 800e136:	b103      	cbz	r3, 800e13a <_write_r+0x1e>
 800e138:	602b      	str	r3, [r5, #0]
 800e13a:	bd38      	pop	{r3, r4, r5, pc}
 800e13c:	2000292c 	.word	0x2000292c

0800e140 <_close_r>:
 800e140:	b538      	push	{r3, r4, r5, lr}
 800e142:	4c06      	ldr	r4, [pc, #24]	; (800e15c <_close_r+0x1c>)
 800e144:	2300      	movs	r3, #0
 800e146:	4605      	mov	r5, r0
 800e148:	4608      	mov	r0, r1
 800e14a:	6023      	str	r3, [r4, #0]
 800e14c:	f7f4 f926 	bl	800239c <_close>
 800e150:	1c43      	adds	r3, r0, #1
 800e152:	d102      	bne.n	800e15a <_close_r+0x1a>
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	b103      	cbz	r3, 800e15a <_close_r+0x1a>
 800e158:	602b      	str	r3, [r5, #0]
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	2000292c 	.word	0x2000292c

0800e160 <_fstat_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4c07      	ldr	r4, [pc, #28]	; (800e180 <_fstat_r+0x20>)
 800e164:	2300      	movs	r3, #0
 800e166:	4605      	mov	r5, r0
 800e168:	4608      	mov	r0, r1
 800e16a:	4611      	mov	r1, r2
 800e16c:	6023      	str	r3, [r4, #0]
 800e16e:	f7f4 f965 	bl	800243c <_fstat>
 800e172:	1c43      	adds	r3, r0, #1
 800e174:	d102      	bne.n	800e17c <_fstat_r+0x1c>
 800e176:	6823      	ldr	r3, [r4, #0]
 800e178:	b103      	cbz	r3, 800e17c <_fstat_r+0x1c>
 800e17a:	602b      	str	r3, [r5, #0]
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	bf00      	nop
 800e180:	2000292c 	.word	0x2000292c

0800e184 <_isatty_r>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	4c06      	ldr	r4, [pc, #24]	; (800e1a0 <_isatty_r+0x1c>)
 800e188:	2300      	movs	r3, #0
 800e18a:	4605      	mov	r5, r0
 800e18c:	4608      	mov	r0, r1
 800e18e:	6023      	str	r3, [r4, #0]
 800e190:	f7f4 f8c4 	bl	800231c <_isatty>
 800e194:	1c43      	adds	r3, r0, #1
 800e196:	d102      	bne.n	800e19e <_isatty_r+0x1a>
 800e198:	6823      	ldr	r3, [r4, #0]
 800e19a:	b103      	cbz	r3, 800e19e <_isatty_r+0x1a>
 800e19c:	602b      	str	r3, [r5, #0]
 800e19e:	bd38      	pop	{r3, r4, r5, pc}
 800e1a0:	2000292c 	.word	0x2000292c

0800e1a4 <_lseek_r>:
 800e1a4:	b538      	push	{r3, r4, r5, lr}
 800e1a6:	4c07      	ldr	r4, [pc, #28]	; (800e1c4 <_lseek_r+0x20>)
 800e1a8:	4605      	mov	r5, r0
 800e1aa:	4608      	mov	r0, r1
 800e1ac:	4611      	mov	r1, r2
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	6022      	str	r2, [r4, #0]
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	f7f4 f909 	bl	80023ca <_lseek>
 800e1b8:	1c43      	adds	r3, r0, #1
 800e1ba:	d102      	bne.n	800e1c2 <_lseek_r+0x1e>
 800e1bc:	6823      	ldr	r3, [r4, #0]
 800e1be:	b103      	cbz	r3, 800e1c2 <_lseek_r+0x1e>
 800e1c0:	602b      	str	r3, [r5, #0]
 800e1c2:	bd38      	pop	{r3, r4, r5, pc}
 800e1c4:	2000292c 	.word	0x2000292c

0800e1c8 <__ascii_mbtowc>:
 800e1c8:	b082      	sub	sp, #8
 800e1ca:	b901      	cbnz	r1, 800e1ce <__ascii_mbtowc+0x6>
 800e1cc:	a901      	add	r1, sp, #4
 800e1ce:	b142      	cbz	r2, 800e1e2 <__ascii_mbtowc+0x1a>
 800e1d0:	b14b      	cbz	r3, 800e1e6 <__ascii_mbtowc+0x1e>
 800e1d2:	7813      	ldrb	r3, [r2, #0]
 800e1d4:	600b      	str	r3, [r1, #0]
 800e1d6:	7812      	ldrb	r2, [r2, #0]
 800e1d8:	1c10      	adds	r0, r2, #0
 800e1da:	bf18      	it	ne
 800e1dc:	2001      	movne	r0, #1
 800e1de:	b002      	add	sp, #8
 800e1e0:	4770      	bx	lr
 800e1e2:	4610      	mov	r0, r2
 800e1e4:	e7fb      	b.n	800e1de <__ascii_mbtowc+0x16>
 800e1e6:	f06f 0001 	mvn.w	r0, #1
 800e1ea:	e7f8      	b.n	800e1de <__ascii_mbtowc+0x16>

0800e1ec <__malloc_lock>:
 800e1ec:	4770      	bx	lr

0800e1ee <__malloc_unlock>:
 800e1ee:	4770      	bx	lr

0800e1f0 <_read_r>:
 800e1f0:	b538      	push	{r3, r4, r5, lr}
 800e1f2:	4c07      	ldr	r4, [pc, #28]	; (800e210 <_read_r+0x20>)
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	4608      	mov	r0, r1
 800e1f8:	4611      	mov	r1, r2
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	6022      	str	r2, [r4, #0]
 800e1fe:	461a      	mov	r2, r3
 800e200:	f7f4 f8f4 	bl	80023ec <_read>
 800e204:	1c43      	adds	r3, r0, #1
 800e206:	d102      	bne.n	800e20e <_read_r+0x1e>
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	b103      	cbz	r3, 800e20e <_read_r+0x1e>
 800e20c:	602b      	str	r3, [r5, #0]
 800e20e:	bd38      	pop	{r3, r4, r5, pc}
 800e210:	2000292c 	.word	0x2000292c

0800e214 <__ascii_wctomb>:
 800e214:	b149      	cbz	r1, 800e22a <__ascii_wctomb+0x16>
 800e216:	2aff      	cmp	r2, #255	; 0xff
 800e218:	bf85      	ittet	hi
 800e21a:	238a      	movhi	r3, #138	; 0x8a
 800e21c:	6003      	strhi	r3, [r0, #0]
 800e21e:	700a      	strbls	r2, [r1, #0]
 800e220:	f04f 30ff 	movhi.w	r0, #4294967295
 800e224:	bf98      	it	ls
 800e226:	2001      	movls	r0, #1
 800e228:	4770      	bx	lr
 800e22a:	4608      	mov	r0, r1
 800e22c:	4770      	bx	lr
	...

0800e230 <asinf>:
 800e230:	b510      	push	{r4, lr}
 800e232:	ed2d 8b02 	vpush	{d8}
 800e236:	4c27      	ldr	r4, [pc, #156]	; (800e2d4 <asinf+0xa4>)
 800e238:	b08a      	sub	sp, #40	; 0x28
 800e23a:	eeb0 8a40 	vmov.f32	s16, s0
 800e23e:	f000 f89f 	bl	800e380 <__ieee754_asinf>
 800e242:	f994 3000 	ldrsb.w	r3, [r4]
 800e246:	3301      	adds	r3, #1
 800e248:	eef0 8a40 	vmov.f32	s17, s0
 800e24c:	d03c      	beq.n	800e2c8 <asinf+0x98>
 800e24e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e256:	d637      	bvs.n	800e2c8 <asinf+0x98>
 800e258:	eeb0 0a48 	vmov.f32	s0, s16
 800e25c:	f000 f988 	bl	800e570 <fabsf>
 800e260:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e264:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26c:	dd2c      	ble.n	800e2c8 <asinf+0x98>
 800e26e:	2301      	movs	r3, #1
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	4b19      	ldr	r3, [pc, #100]	; (800e2d8 <asinf+0xa8>)
 800e274:	9301      	str	r3, [sp, #4]
 800e276:	ee18 0a10 	vmov	r0, s16
 800e27a:	2300      	movs	r3, #0
 800e27c:	9308      	str	r3, [sp, #32]
 800e27e:	f7f2 f963 	bl	8000548 <__aeabi_f2d>
 800e282:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e28a:	4814      	ldr	r0, [pc, #80]	; (800e2dc <asinf+0xac>)
 800e28c:	f000 f968 	bl	800e560 <nan>
 800e290:	f994 3000 	ldrsb.w	r3, [r4]
 800e294:	2b02      	cmp	r3, #2
 800e296:	ed8d 0b06 	vstr	d0, [sp, #24]
 800e29a:	d104      	bne.n	800e2a6 <asinf+0x76>
 800e29c:	f7fd fb44 	bl	800b928 <__errno>
 800e2a0:	2321      	movs	r3, #33	; 0x21
 800e2a2:	6003      	str	r3, [r0, #0]
 800e2a4:	e004      	b.n	800e2b0 <asinf+0x80>
 800e2a6:	4668      	mov	r0, sp
 800e2a8:	f000 f955 	bl	800e556 <matherr>
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	d0f5      	beq.n	800e29c <asinf+0x6c>
 800e2b0:	9b08      	ldr	r3, [sp, #32]
 800e2b2:	b11b      	cbz	r3, 800e2bc <asinf+0x8c>
 800e2b4:	f7fd fb38 	bl	800b928 <__errno>
 800e2b8:	9b08      	ldr	r3, [sp, #32]
 800e2ba:	6003      	str	r3, [r0, #0]
 800e2bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2c0:	f7f2 fc72 	bl	8000ba8 <__aeabi_d2f>
 800e2c4:	ee08 0a90 	vmov	s17, r0
 800e2c8:	eeb0 0a68 	vmov.f32	s0, s17
 800e2cc:	b00a      	add	sp, #40	; 0x28
 800e2ce:	ecbd 8b02 	vpop	{d8}
 800e2d2:	bd10      	pop	{r4, pc}
 800e2d4:	20001594 	.word	0x20001594
 800e2d8:	0800e890 	.word	0x0800e890
 800e2dc:	0800e779 	.word	0x0800e779

0800e2e0 <sqrtf>:
 800e2e0:	b510      	push	{r4, lr}
 800e2e2:	ed2d 8b02 	vpush	{d8}
 800e2e6:	b08a      	sub	sp, #40	; 0x28
 800e2e8:	eeb0 8a40 	vmov.f32	s16, s0
 800e2ec:	f000 f930 	bl	800e550 <__ieee754_sqrtf>
 800e2f0:	4b21      	ldr	r3, [pc, #132]	; (800e378 <sqrtf+0x98>)
 800e2f2:	f993 4000 	ldrsb.w	r4, [r3]
 800e2f6:	1c63      	adds	r3, r4, #1
 800e2f8:	d02c      	beq.n	800e354 <sqrtf+0x74>
 800e2fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800e2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e302:	d627      	bvs.n	800e354 <sqrtf+0x74>
 800e304:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e30c:	d522      	bpl.n	800e354 <sqrtf+0x74>
 800e30e:	2301      	movs	r3, #1
 800e310:	9300      	str	r3, [sp, #0]
 800e312:	4b1a      	ldr	r3, [pc, #104]	; (800e37c <sqrtf+0x9c>)
 800e314:	9301      	str	r3, [sp, #4]
 800e316:	ee18 0a10 	vmov	r0, s16
 800e31a:	2300      	movs	r3, #0
 800e31c:	9308      	str	r3, [sp, #32]
 800e31e:	f7f2 f913 	bl	8000548 <__aeabi_f2d>
 800e322:	2200      	movs	r2, #0
 800e324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e32c:	2300      	movs	r3, #0
 800e32e:	b9ac      	cbnz	r4, 800e35c <sqrtf+0x7c>
 800e330:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e334:	4668      	mov	r0, sp
 800e336:	f000 f90e 	bl	800e556 <matherr>
 800e33a:	b1b8      	cbz	r0, 800e36c <sqrtf+0x8c>
 800e33c:	9b08      	ldr	r3, [sp, #32]
 800e33e:	b11b      	cbz	r3, 800e348 <sqrtf+0x68>
 800e340:	f7fd faf2 	bl	800b928 <__errno>
 800e344:	9b08      	ldr	r3, [sp, #32]
 800e346:	6003      	str	r3, [r0, #0]
 800e348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e34c:	f7f2 fc2c 	bl	8000ba8 <__aeabi_d2f>
 800e350:	ee00 0a10 	vmov	s0, r0
 800e354:	b00a      	add	sp, #40	; 0x28
 800e356:	ecbd 8b02 	vpop	{d8}
 800e35a:	bd10      	pop	{r4, pc}
 800e35c:	4610      	mov	r0, r2
 800e35e:	4619      	mov	r1, r3
 800e360:	f7f2 fa74 	bl	800084c <__aeabi_ddiv>
 800e364:	2c02      	cmp	r4, #2
 800e366:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e36a:	d1e3      	bne.n	800e334 <sqrtf+0x54>
 800e36c:	f7fd fadc 	bl	800b928 <__errno>
 800e370:	2321      	movs	r3, #33	; 0x21
 800e372:	6003      	str	r3, [r0, #0]
 800e374:	e7e2      	b.n	800e33c <sqrtf+0x5c>
 800e376:	bf00      	nop
 800e378:	20001594 	.word	0x20001594
 800e37c:	0800e896 	.word	0x0800e896

0800e380 <__ieee754_asinf>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	ee10 5a10 	vmov	r5, s0
 800e386:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e38a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e38e:	ed2d 8b04 	vpush	{d8-d9}
 800e392:	d10c      	bne.n	800e3ae <__ieee754_asinf+0x2e>
 800e394:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800e510 <__ieee754_asinf+0x190>
 800e398:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800e514 <__ieee754_asinf+0x194>
 800e39c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e3a0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e3a4:	eeb0 0a67 	vmov.f32	s0, s15
 800e3a8:	ecbd 8b04 	vpop	{d8-d9}
 800e3ac:	bd38      	pop	{r3, r4, r5, pc}
 800e3ae:	dd04      	ble.n	800e3ba <__ieee754_asinf+0x3a>
 800e3b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e3b4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e3b8:	e7f6      	b.n	800e3a8 <__ieee754_asinf+0x28>
 800e3ba:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e3be:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e3c2:	da0b      	bge.n	800e3dc <__ieee754_asinf+0x5c>
 800e3c4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e3c8:	da52      	bge.n	800e470 <__ieee754_asinf+0xf0>
 800e3ca:	eddf 7a53 	vldr	s15, [pc, #332]	; 800e518 <__ieee754_asinf+0x198>
 800e3ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e3d2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3da:	dce5      	bgt.n	800e3a8 <__ieee754_asinf+0x28>
 800e3dc:	f000 f8c8 	bl	800e570 <fabsf>
 800e3e0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800e3e4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800e3e8:	ee20 8a08 	vmul.f32	s16, s0, s16
 800e3ec:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800e51c <__ieee754_asinf+0x19c>
 800e3f0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800e520 <__ieee754_asinf+0x1a0>
 800e3f4:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800e524 <__ieee754_asinf+0x1a4>
 800e3f8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e3fc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800e528 <__ieee754_asinf+0x1a8>
 800e400:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e404:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e52c <__ieee754_asinf+0x1ac>
 800e408:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e40c:	eddf 7a48 	vldr	s15, [pc, #288]	; 800e530 <__ieee754_asinf+0x1b0>
 800e410:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e414:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e534 <__ieee754_asinf+0x1b4>
 800e418:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e41c:	eddf 7a46 	vldr	s15, [pc, #280]	; 800e538 <__ieee754_asinf+0x1b8>
 800e420:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e424:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800e53c <__ieee754_asinf+0x1bc>
 800e428:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e42c:	eddf 7a44 	vldr	s15, [pc, #272]	; 800e540 <__ieee754_asinf+0x1c0>
 800e430:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e434:	eeb0 0a48 	vmov.f32	s0, s16
 800e438:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e43c:	f000 f888 	bl	800e550 <__ieee754_sqrtf>
 800e440:	4b40      	ldr	r3, [pc, #256]	; (800e544 <__ieee754_asinf+0x1c4>)
 800e442:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e446:	429c      	cmp	r4, r3
 800e448:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e44c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e450:	dd3d      	ble.n	800e4ce <__ieee754_asinf+0x14e>
 800e452:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e456:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800e548 <__ieee754_asinf+0x1c8>
 800e45a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e45e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800e514 <__ieee754_asinf+0x194>
 800e462:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e466:	2d00      	cmp	r5, #0
 800e468:	bfd8      	it	le
 800e46a:	eeb1 0a40 	vnegle.f32	s0, s0
 800e46e:	e79b      	b.n	800e3a8 <__ieee754_asinf+0x28>
 800e470:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e474:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e51c <__ieee754_asinf+0x19c>
 800e478:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e520 <__ieee754_asinf+0x1a0>
 800e47c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800e534 <__ieee754_asinf+0x1b4>
 800e480:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e484:	eddf 6a28 	vldr	s13, [pc, #160]	; 800e528 <__ieee754_asinf+0x1a8>
 800e488:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e48c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800e52c <__ieee754_asinf+0x1ac>
 800e490:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e494:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e530 <__ieee754_asinf+0x1b0>
 800e498:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e49c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800e524 <__ieee754_asinf+0x1a4>
 800e4a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e4a4:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e538 <__ieee754_asinf+0x1b8>
 800e4a8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e4ac:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800e53c <__ieee754_asinf+0x1bc>
 800e4b0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e4b4:	eddf 6a22 	vldr	s13, [pc, #136]	; 800e540 <__ieee754_asinf+0x1c0>
 800e4b8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e4bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4c0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e4c4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e4c8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e4cc:	e76c      	b.n	800e3a8 <__ieee754_asinf+0x28>
 800e4ce:	ee10 3a10 	vmov	r3, s0
 800e4d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e4d6:	f023 030f 	bic.w	r3, r3, #15
 800e4da:	ee07 3a90 	vmov	s15, r3
 800e4de:	eef1 6a67 	vneg.f32	s13, s15
 800e4e2:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800e4e6:	ee70 5a00 	vadd.f32	s11, s0, s0
 800e4ea:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e4ee:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e510 <__ieee754_asinf+0x190>
 800e4f2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800e4f6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800e54c <__ieee754_asinf+0x1cc>
 800e4fa:	eee5 7a47 	vfms.f32	s15, s10, s14
 800e4fe:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800e502:	eeb0 6a40 	vmov.f32	s12, s0
 800e506:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e50a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e50e:	e7a8      	b.n	800e462 <__ieee754_asinf+0xe2>
 800e510:	b33bbd2e 	.word	0xb33bbd2e
 800e514:	3fc90fdb 	.word	0x3fc90fdb
 800e518:	7149f2ca 	.word	0x7149f2ca
 800e51c:	3811ef08 	.word	0x3811ef08
 800e520:	3a4f7f04 	.word	0x3a4f7f04
 800e524:	3e2aaaab 	.word	0x3e2aaaab
 800e528:	bd241146 	.word	0xbd241146
 800e52c:	3e4e0aa8 	.word	0x3e4e0aa8
 800e530:	bea6b090 	.word	0xbea6b090
 800e534:	3d9dc62e 	.word	0x3d9dc62e
 800e538:	bf303361 	.word	0xbf303361
 800e53c:	4001572d 	.word	0x4001572d
 800e540:	c019d139 	.word	0xc019d139
 800e544:	3f799999 	.word	0x3f799999
 800e548:	333bbd2e 	.word	0x333bbd2e
 800e54c:	3f490fdb 	.word	0x3f490fdb

0800e550 <__ieee754_sqrtf>:
 800e550:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e554:	4770      	bx	lr

0800e556 <matherr>:
 800e556:	2000      	movs	r0, #0
 800e558:	4770      	bx	lr
 800e55a:	0000      	movs	r0, r0
 800e55c:	0000      	movs	r0, r0
	...

0800e560 <nan>:
 800e560:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e568 <nan+0x8>
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop
 800e568:	00000000 	.word	0x00000000
 800e56c:	7ff80000 	.word	0x7ff80000

0800e570 <fabsf>:
 800e570:	ee10 3a10 	vmov	r3, s0
 800e574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e578:	ee00 3a10 	vmov	s0, r3
 800e57c:	4770      	bx	lr
	...

0800e580 <_init>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	bf00      	nop
 800e584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e586:	bc08      	pop	{r3}
 800e588:	469e      	mov	lr, r3
 800e58a:	4770      	bx	lr

0800e58c <_fini>:
 800e58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58e:	bf00      	nop
 800e590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e592:	bc08      	pop	{r3}
 800e594:	469e      	mov	lr, r3
 800e596:	4770      	bx	lr
