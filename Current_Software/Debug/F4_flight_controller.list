
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cba0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800cd30  0800cd30  0001cd30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d034  0800d034  000211d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d034  0800d034  0001d034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d03c  0800d03c  000211d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d03c  0800d03c  0001d03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d040  0800d040  0001d040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000011d0  20000000  0800d044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b7c  200011d0  0800e214  000211d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d4c  0800e214  00021d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000211d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034fd3  00000000  00000000  00021200  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005d84  00000000  00000000  000561d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018e0  00000000  00000000  0005bf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001640  00000000  00000000  0005d838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029356  00000000  00000000  0005ee78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023c85  00000000  00000000  000881ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccdf0  00000000  00000000  000abe53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178c43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007240  00000000  00000000  00178cc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200011d0 	.word	0x200011d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd18 	.word	0x0800cd18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200011d4 	.word	0x200011d4
 80001cc:	0800cd18 	.word	0x0800cd18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <angle_180>:
static float absolu(float x);
static float acc_correction(float x);
static float angle_180(float x);


static float angle_180(float x){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 180)
 8000f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f56:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000fac <angle_180+0x64>
 8000f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	dd08      	ble.n	8000f76 <angle_180+0x2e>
		x -= 360;
 8000f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f68:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000fb0 <angle_180+0x68>
 8000f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f70:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f74:	e010      	b.n	8000f98 <angle_180+0x50>
	else if( x < -180)
 8000f76:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f7a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000fb4 <angle_180+0x6c>
 8000f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	d507      	bpl.n	8000f98 <angle_180+0x50>
		x += 360 ;
 8000f88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fb0 <angle_180+0x68>
 8000f90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f94:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	ee07 3a90 	vmov	s15, r3
}
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	43340000 	.word	0x43340000
 8000fb0:	43b40000 	.word	0x43b40000
 8000fb4:	c3340000 	.word	0xc3340000

08000fb8 <absolu>:

static float absolu(float x){
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	ed87 0a01 	vstr	s0, [r7, #4]
	if( x > 0)
 8000fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	dd02      	ble.n	8000fd6 <absolu+0x1e>
		return x ;
 8000fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd4:	e003      	b.n	8000fde <absolu+0x26>
	else
		return -x ;
 8000fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fda:	eef1 7a67 	vneg.f32	s15, s15
}
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <acc_correction>:
static float acc_correction(float x){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a01 	vstr	s0, [r7, #4]
	x = ( x > 0) ? 180 - x : -180 -x ;
 8000ff6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	dd06      	ble.n	8001012 <acc_correction+0x26>
 8001004:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001038 <acc_correction+0x4c>
 8001008:	edd7 7a01 	vldr	s15, [r7, #4]
 800100c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001010:	e005      	b.n	800101e <acc_correction+0x32>
 8001012:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800103c <acc_correction+0x50>
 8001016:	edd7 7a01 	vldr	s15, [r7, #4]
 800101a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101e:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	ee07 3a90 	vmov	s15, r3
}
 8001028:	eeb0 0a67 	vmov.f32	s0, s15
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	43340000 	.word	0x43340000
 800103c:	c3340000 	.word	0xc3340000

08001040 <ORIENTATION_Init>:

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
	//Link data structures
	orientation->acc = acc ;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
	orientation->gyro = gyro ;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	621a      	str	r2, [r3, #32]
	orientation->angular_velocity = gyro->filtered ;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f103 0208 	add.w	r2, r3, #8
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	60da      	str	r2, [r3, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
	orientation->periode = (float)1 / (float)frequency ;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	orientation->alpha = ORIENTATION_ALPHA ;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <ORIENTATION_Init+0x84>)
 8001086:	631a      	str	r2, [r3, #48]	; 0x30

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e011      	b.n	80010b2 <ORIENTATION_Init+0x72>
	{
		orientation->angular_position[x] = 0 ;
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
		orientation->angular_velocity[x] = 0 ;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < 3; x++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	ddea      	ble.n	800108e <ORIENTATION_Init+0x4e>
	}

}
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	3f7d70a4 	.word	0x3f7d70a4

080010c8 <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	//Just to make the code lighter
	acc_t * acc = orientation->acc ;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	61fb      	str	r3, [r7, #28]
	gyro_t * gyro = orientation->gyro ;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	61bb      	str	r3, [r7, #24]

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ACC_AXE_X] * acc->filtered[ACC_AXE_X] ;
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	ed93 7a02 	vldr	s14, [r3, #8]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ec:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += acc->filtered[ACC_AXE_Y] * acc->filtered[ACC_AXE_Y] ;
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80010fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001108:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += acc->filtered[ACC_AXE_Z] * acc->filtered[ACC_AXE_Z] ;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	edd3 7a04 	vldr	s15, [r3, #16]
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001124:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total = sqrtf(acc_total);
 8001128:	ed97 0a05 	vldr	s0, [r7, #20]
 800112c:	f00b fca6 	bl	800ca7c <sqrtf>
 8001130:	ed87 0a05 	vstr	s0, [r7, #20]

	if(acc_total)	//To avoid /0
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	eef5 7a40 	vcmp.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d069      	beq.n	8001216 <ORIENTATION_Update+0x14e>
	{
		if(absolu(acc->filtered[ACC_AXE_X]) < acc_total)	//To avoid asin x with x greater than 1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	edd3 7a02 	vldr	s15, [r3, #8]
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	f7ff ff34 	bl	8000fb8 <absolu>
 8001150:	eeb0 7a40 	vmov.f32	s14, s0
 8001154:	edd7 7a05 	vldr	s15, [r7, #20]
 8001158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001160:	dd15      	ble.n	800118e <ORIENTATION_Update+0xc6>
			orientation->acc_angles[ACC_AXE_Y] = -asinf(acc->filtered[ACC_AXE_X] / acc_total) * 57.32f;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	ed93 7a02 	vldr	s14, [r3, #8]
 8001168:	edd7 7a05 	vldr	s15, [r7, #20]
 800116c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001170:	eeb0 0a66 	vmov.f32	s0, s13
 8001174:	f00b fc2a 	bl	800c9cc <asinf>
 8001178:	eef0 7a40 	vmov.f32	s15, s0
 800117c:	eef1 7a67 	vneg.f32	s15, s15
 8001180:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001354 <ORIENTATION_Update+0x28c>
 8001184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a05 	vstr	s15, [r3, #20]
		if(absolu(acc->filtered[ACC_AXE_Y]) < acc_total) 	//To avoid asin x with x greater than 1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	edd3 7a03 	vldr	s15, [r3, #12]
 8001194:	eeb0 0a67 	vmov.f32	s0, s15
 8001198:	f7ff ff0e 	bl	8000fb8 <absolu>
 800119c:	eeb0 7a40 	vmov.f32	s14, s0
 80011a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ac:	dd13      	ble.n	80011d6 <ORIENTATION_Update+0x10e>
			orientation->acc_angles[ACC_AXE_X] = asinf(acc->filtered[ACC_AXE_Y] / acc_total) * 57.32f;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80011b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011bc:	eeb0 0a66 	vmov.f32	s0, s13
 80011c0:	f00b fc04 	bl	800c9cc <asinf>
 80011c4:	eeb0 7a40 	vmov.f32	s14, s0
 80011c8:	eddf 7a62 	vldr	s15, [pc, #392]	; 8001354 <ORIENTATION_Update+0x28c>
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	edc3 7a04 	vstr	s15, [r3, #16]
		if(acc->filtered[ACC_AXE_Z] < 0)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	d517      	bpl.n	8001216 <ORIENTATION_Update+0x14e>
		{
			orientation->acc_angles[ACC_AXE_X] = acc_correction(orientation->acc_angles[ACC_AXE_X]);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	f7ff fefc 	bl	8000fec <acc_correction>
 80011f4:	eef0 7a40 	vmov.f32	s15, s0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edc3 7a04 	vstr	s15, [r3, #16]
			orientation->acc_angles[ACC_AXE_Y] = acc_correction(orientation->acc_angles[ACC_AXE_Y]);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	edd3 7a05 	vldr	s15, [r3, #20]
 8001204:	eeb0 0a67 	vmov.f32	s0, s15
 8001208:	f7ff fef0 	bl	8000fec <acc_correction>
 800120c:	eef0 7a40 	vmov.f32	s15, s0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edc3 7a05 	vstr	s15, [r3, #20]
		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <ORIENTATION_Update+0x290>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00f      	beq.n	800123e <ORIENTATION_Update+0x176>
	{
		orientation->angular_position[GYRO_AXE_X] = orientation->acc_angles[ACC_AXE_X] ;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->acc_angles[ACC_AXE_Y] ;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	605a      	str	r2, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] = 0 ;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
		first_use = FALSE ;
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <ORIENTATION_Update+0x290>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];



	}
}
 800123c:	e085      	b.n	800134a <ORIENTATION_Update+0x282>
		float dx = gyro->filtered[GYRO_AXE_X] * orientation->periode ;
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	ed93 7a02 	vldr	s14, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124e:	edc7 7a04 	vstr	s15, [r7, #16]
		float dy = gyro->filtered[GYRO_AXE_Y] * orientation->periode ;
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	ed93 7a03 	vldr	s14, [r3, #12]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800125e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001262:	edc7 7a03 	vstr	s15, [r7, #12]
		float dz = gyro->filtered[GYRO_AXE_Z] * orientation->periode ;
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	ed93 7a04 	vldr	s14, [r3, #16]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	edc7 7a02 	vstr	s15, [r7, #8]
		orientation->angular_position[GYRO_AXE_X] += dx ;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	ed93 7a00 	vldr	s14, [r3]
 8001280:	edd7 7a04 	vldr	s15, [r7, #16]
 8001284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] += dy ;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	ed93 7a01 	vldr	s14, [r3, #4]
 8001294:	edd7 7a03 	vldr	s15, [r7, #12]
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] += dz ;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80012a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	edc3 7a02 	vstr	s15, [r3, #8]
		orientation->angular_position[GYRO_AXE_X] = angle_180(orientation->angular_position[GYRO_AXE_X]);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	f7ff fe42 	bl	8000f48 <angle_180>
 80012c4:	eef0 7a40 	vmov.f32	s15, s0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = angle_180(orientation->angular_position[GYRO_AXE_Y]);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	f7ff fe36 	bl	8000f48 <angle_180>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_X] = orientation->alpha * orientation->angular_position[GYRO_AXE_X] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_X];
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001300:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edd3 7a04 	vldr	s15, [r3, #16]
 800130a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a01 	vldr	s15, [r3, #4]
 8001324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800132e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001332:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edd3 7a05 	vldr	s15, [r3, #20]
 800133c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	426547ae 	.word	0x426547ae
 8001358:	20000000 	.word	0x20000000

0800135c <FLIGHT_MODE_Init>:
		[FLIGHT_MODE_ON_THE_GROUND] = 	DEF_FLIGHT_MODE(FLIGHT_MODE_ON_THE_GROUND, 		on_the_ground_entrance, 	on_the_ground_main),
		[FLIGHT_MODE_MANUAL_ACCRO] = 	DEF_FLIGHT_MODE(FLIGHT_MODE_MANUAL_ACCRO, 		manual_accro_entrance, 		manual_accro_main)
};

//	-------------------------	Public functions	-------------------------
void FLIGHT_MODE_Init(system_t * sys_){
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	sys = sys_;
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <FLIGHT_MODE_Init+0x1c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200011ec 	.word	0x200011ec

0800137c <FLIGHT_MODE_Set_Flight_Mode>:

//Dont call it from an it plz for now ..
void FLIGHT_MODE_Set_Flight_Mode(flight_modes_names_e new){
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	next_flight_mode = new ;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <FLIGHT_MODE_Set_Flight_Mode+0x1c>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	7013      	strb	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	200011f1 	.word	0x200011f1

0800139c <FLIGHT_MODE_Main>:

void FLIGHT_MODE_Main(void){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	//Check if we have to change the current flight mode
	if(next_flight_mode != current_flight_mode){
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <FLIGHT_MODE_Main+0x70>)
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <FLIGHT_MODE_Main+0x74>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d025      	beq.n	80013f8 <FLIGHT_MODE_Main+0x5c>

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(flights_modes[current_flight_mode].function_leave != NULL)
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <FLIGHT_MODE_Main+0x74>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4a18      	ldr	r2, [pc, #96]	; (8001414 <FLIGHT_MODE_Main+0x78>)
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4413      	add	r3, r2
 80013b6:	330c      	adds	r3, #12
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <FLIGHT_MODE_Main+0x32>
			flights_modes[current_flight_mode].function_leave();
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <FLIGHT_MODE_Main+0x74>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <FLIGHT_MODE_Main+0x78>)
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	330c      	adds	r3, #12
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4798      	blx	r3

		//Call the entrance function associated to the next flight mode if it exists
		if(flights_modes[next_flight_mode].function_entrance != NULL)
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <FLIGHT_MODE_Main+0x70>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <FLIGHT_MODE_Main+0x78>)
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	3304      	adds	r3, #4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <FLIGHT_MODE_Main+0x54>
			flights_modes[next_flight_mode].function_entrance();
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <FLIGHT_MODE_Main+0x70>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <FLIGHT_MODE_Main+0x78>)
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	4413      	add	r3, r2
 80013ea:	3304      	adds	r3, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4798      	blx	r3

		//Change the current flight mode
		current_flight_mode = next_flight_mode ;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <FLIGHT_MODE_Main+0x70>)
 80013f2:	781a      	ldrb	r2, [r3, #0]
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <FLIGHT_MODE_Main+0x74>)
 80013f6:	701a      	strb	r2, [r3, #0]
	}
	//Call the function associated to the current flight mode
	flights_modes[current_flight_mode].function_main();
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <FLIGHT_MODE_Main+0x74>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <FLIGHT_MODE_Main+0x78>)
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	3308      	adds	r3, #8
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4798      	blx	r3

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200011f1 	.word	0x200011f1
 8001410:	200011f0 	.word	0x200011f0
 8001414:	20000004 	.word	0x20000004

08001418 <on_the_ground_entrance>:



//	-------------------------	Functions definitions	-------------------------
static void on_the_ground_entrance(void){
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 800141c:	2000      	movs	r0, #0
 800141e:	f001 fcdb 	bl	8002dd8 <REGULATION_ORIENTATION_Set_Regulation_Mode>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}

08001426 <on_the_ground_main>:
static void on_the_ground_main(void){
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <manual_accro_entrance>:

static void manual_accro_entrance(void){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8001438:	2001      	movs	r0, #1
 800143a:	f001 fccd 	bl	8002dd8 <REGULATION_ORIENTATION_Set_Regulation_Mode>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <manual_accro_main>:

static void manual_accro_main(void){
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL] = ((float)sys->radio.controller.channels[0]-1500)*0.5f;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <manual_accro_main+0x90>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	ee07 3a90 	vmov	s15, r3
 8001456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800145a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80014d8 <manual_accro_main+0x94>
 800145e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <manual_accro_main+0x90>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800146a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146e:	edc3 7aee 	vstr	s15, [r3, #952]	; 0x3b8
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH] = ((float)sys->radio.controller.channels[1]-1500)*0.5f;
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <manual_accro_main+0x90>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 800147a:	3302      	adds	r3, #2
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001486:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80014d8 <manual_accro_main+0x94>
 800148a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <manual_accro_main+0x90>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149a:	edc3 7aef 	vstr	s15, [r3, #956]	; 0x3bc
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = ((float)sys->radio.controller.channels[3]-1500)*0.5f;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <manual_accro_main+0x90>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80014a6:	3306      	adds	r3, #6
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80014d8 <manual_accro_main+0x94>
 80014b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <manual_accro_main+0x90>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c6:	edc3 7af0 	vstr	s15, [r3, #960]	; 0x3c0
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	200011ec 	.word	0x200011ec
 80014d8:	44bb8000 	.word	0x44bb8000

080014dc <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <DEBUG_init+0x14>)
 80014e2:	f000 f809 	bl	80014f8 <RetargetInit>
	printf("Debuger is init\n");
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <DEBUG_init+0x18>)
 80014e8:	f009 fb06 	bl	800aaf8 <puts>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20001cc4 	.word	0x20001cc4
 80014f4:	0800cd30 	.word	0x0800cd30

080014f8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <RetargetInit+0x28>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <RetargetInit+0x2c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6898      	ldr	r0, [r3, #8]
 800150c:	2300      	movs	r3, #0
 800150e:	2202      	movs	r2, #2
 8001510:	2100      	movs	r1, #0
 8001512:	f009 faf9 	bl	800ab08 <setvbuf>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200012cc 	.word	0x200012cc
 8001524:	20000ffc 	.word	0x20000ffc

08001528 <_isatty>:

int _isatty(int fd) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db04      	blt.n	8001540 <_isatty+0x18>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b02      	cmp	r3, #2
 800153a:	dc01      	bgt.n	8001540 <_isatty+0x18>
    return 1;
 800153c:	2301      	movs	r3, #1
 800153e:	e005      	b.n	800154c <_isatty+0x24>

  errno = EBADF;
 8001540:	f008 fdbe 	bl	800a0c0 <__errno>
 8001544:	4602      	mov	r2, r0
 8001546:	2309      	movs	r3, #9
 8001548:	6013      	str	r3, [r2, #0]
  return 0;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_write>:

int _write(int fd, char* ptr, int len) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d002      	beq.n	800156c <_write+0x18>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d110      	bne.n	800158e <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <_write+0x50>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	b29a      	uxth	r2, r3
 8001574:	2364      	movs	r3, #100	; 0x64
 8001576:	68b9      	ldr	r1, [r7, #8]
 8001578:	f007 f8cd 	bl	8008716 <HAL_UART_Transmit>
 800157c:	4603      	mov	r3, r0
 800157e:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <_write+0x36>
      return len;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	e008      	b.n	800159c <_write+0x48>
    else
      return EIO;
 800158a:	2305      	movs	r3, #5
 800158c:	e006      	b.n	800159c <_write+0x48>
  }
  errno = EBADF;
 800158e:	f008 fd97 	bl	800a0c0 <__errno>
 8001592:	4602      	mov	r2, r0
 8001594:	2309      	movs	r3, #9
 8001596:	6013      	str	r3, [r2, #0]
  return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200012cc 	.word	0x200012cc

080015a8 <_close>:

int _close(int fd) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db04      	blt.n	80015c0 <_close+0x18>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	dc01      	bgt.n	80015c0 <_close+0x18>
    return 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	e006      	b.n	80015ce <_close+0x26>

  errno = EBADF;
 80015c0:	f008 fd7e 	bl	800a0c0 <__errno>
 80015c4:	4602      	mov	r2, r0
 80015c6:	2309      	movs	r3, #9
 80015c8:	6013      	str	r3, [r2, #0]
  return -1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b084      	sub	sp, #16
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80015e2:	f008 fd6d 	bl	800a0c0 <__errno>
 80015e6:	4602      	mov	r2, r0
 80015e8:	2309      	movs	r3, #9
 80015ea:	6013      	str	r3, [r2, #0]
  return -1;
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_read>:

int _read(int fd, char* ptr, int len) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d110      	bne.n	800162c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <_read+0x4c>)
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	2201      	movs	r2, #1
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	f007 f917 	bl	8008848 <HAL_UART_Receive>
 800161a:	4603      	mov	r3, r0
 800161c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <_read+0x30>
      return 1;
 8001624:	2301      	movs	r3, #1
 8001626:	e008      	b.n	800163a <_read+0x42>
    else
      return EIO;
 8001628:	2305      	movs	r3, #5
 800162a:	e006      	b.n	800163a <_read+0x42>
  }
  errno = EBADF;
 800162c:	f008 fd48 	bl	800a0c0 <__errno>
 8001630:	4602      	mov	r2, r0
 8001632:	2309      	movs	r3, #9
 8001634:	6013      	str	r3, [r2, #0]
  return -1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200012cc 	.word	0x200012cc

08001648 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db08      	blt.n	800166a <_fstat+0x22>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b02      	cmp	r3, #2
 800165c:	dc05      	bgt.n	800166a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001664:	605a      	str	r2, [r3, #4]
    return 0;
 8001666:	2300      	movs	r3, #0
 8001668:	e005      	b.n	8001676 <_fstat+0x2e>
  }

  errno = EBADF;
 800166a:	f008 fd29 	bl	800a0c0 <__errno>
 800166e:	4602      	mov	r2, r0
 8001670:	2309      	movs	r3, #9
 8001672:	6013      	str	r3, [r2, #0]
  return 0;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <gyro_init_ok_func>:
		[EVENT_MAIN_IBUS_DATA_RDY] = 	DEFINE_EVENT(ibus_data_rdy, 		MASK_IBUS_DATA_RDY_COUNT, 	EVENT_ENABLED),
		[EVENT_MAIN_ON_THE_GROUND] = 	DEFINE_EVENT(on_the_ground, 		MASK_ON_THE_GROUND_COUNT, 	EVENT_ENABLED),
		[EVENT_MAIN_MANUAL_ACCRO] = 	DEFINE_EVENT(manual_accro, 			MASK_MANUAL_COUNT, 			EVENT_ENABLED)
};

static void gyro_init_ok_func(mask_def_ids_t mask_id){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_GYRO_READING);
 800168a:	2001      	movs	r0, #1
 800168c:	f000 f9b4 	bl	80019f8 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 8001690:	2101      	movs	r1, #1
 8001692:	2004      	movs	r0, #4
 8001694:	f000 fd78 	bl	8002188 <SCHEDULER_task_set_mode>
	events_main[EVENT_MAIN_GYRO_INIT_OK].state = EVENT_DISABLED ;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <gyro_init_ok_func+0x28>)
 800169a:	2201      	movs	r2, #1
 800169c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000024 	.word	0x20000024

080016ac <acc_init_ok_func>:

static void acc_init_ok_func(mask_def_ids_t mask_id){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_ACC_READING);
 80016b6:	2005      	movs	r0, #5
 80016b8:	f000 f99e 	bl	80019f8 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 80016bc:	2101      	movs	r1, #1
 80016be:	2006      	movs	r0, #6
 80016c0:	f000 fd62 	bl	8002188 <SCHEDULER_task_set_mode>
	events_main[EVENT_MAIN_ACC_INIT_OK].state = EVENT_DISABLED ;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <acc_init_ok_func+0x28>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000024 	.word	0x20000024

080016d8 <ibus_data_rdy>:

static void ibus_data_rdy(mask_def_ids_t mask_id){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e2:	b672      	cpsid	i
	//On clean le flag ibus_data_rdy
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_IBUS_DATA_RDY);
 80016e4:	2108      	movs	r1, #8
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <ibus_data_rdy+0x28>)
 80016e8:	f000 fa9a 	bl	8001c20 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80016ec:	b662      	cpsie	i
	__enable_irq();
	//On déclenche la tâche de traitement des octets pour l ibus
	SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_UPDATE, TASK_MODE_EVENT);
 80016ee:	2102      	movs	r1, #2
 80016f0:	2009      	movs	r0, #9
 80016f2:	f000 fd49 	bl	8002188 <SCHEDULER_task_set_mode>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200011f4 	.word	0x200011f4

08001704 <on_the_ground>:

static void on_the_ground(mask_def_ids_t mask_id){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800170e:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_FLIGHT_MODE_MANUAL_ACCRO);
 8001710:	2119      	movs	r1, #25
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <on_the_ground+0x2c>)
 8001714:	f000 fa84 	bl	8001c20 <MASK_clean_flag>
	MASK_set_flag(&flags, FLAG_FLIGHT_MODE_ON_THE_GROUND);
 8001718:	2118      	movs	r1, #24
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <on_the_ground+0x2c>)
 800171c:	f000 fa50 	bl	8001bc0 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001720:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ON_THE_GROUND);
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff fe2a 	bl	800137c <FLIGHT_MODE_Set_Flight_Mode>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200011f4 	.word	0x200011f4

08001734 <manual_accro>:
static void manual_accro(mask_def_ids_t mask_id){
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800173e:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_FLIGHT_MODE_ON_THE_GROUND);
 8001740:	2118      	movs	r1, #24
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <manual_accro+0x2c>)
 8001744:	f000 fa6c 	bl	8001c20 <MASK_clean_flag>
	MASK_set_flag(&flags, FLAG_FLIGHT_MODE_MANUAL_ACCRO);
 8001748:	2119      	movs	r1, #25
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <manual_accro+0x2c>)
 800174c:	f000 fa38 	bl	8001bc0 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001750:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ACCRO);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff fe12 	bl	800137c <FLIGHT_MODE_Set_Flight_Mode>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200011f4 	.word	0x200011f4

08001764 <gyro_data_ready_func>:
		[EVENT_IT_GYRO_DATA_READY] = 		DEFINE_EVENT(gyro_data_ready_func, 	MASK_GYRO_DATA_READY_COUNT, 	EVENT_ENABLED),
		[EVENT_IT_ACC_DATA_READY] = 		DEFINE_EVENT(acc_data_ready_func, 	MASK_ACC_DATA_READY_COUNT, 		EVENT_ENABLED),
		[EVENT_IT_ORIENTATION_UPDATE] = 	DEFINE_EVENT(orientation_update, 	MASK_ORIENTATION_UPDATE_COUNT,	EVENT_ENABLED)
};

static void gyro_data_ready_func(mask_def_ids_t mask_id){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800176e:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 8001770:	2102      	movs	r1, #2
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <gyro_data_ready_func+0x28>)
 8001774:	f000 fa54 	bl	8001c20 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001778:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 800177a:	2102      	movs	r1, #2
 800177c:	2005      	movs	r0, #5
 800177e:	f000 fd03 	bl	8002188 <SCHEDULER_task_set_mode>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200011f4 	.word	0x200011f4

08001790 <acc_data_ready_func>:

static void acc_data_ready_func(mask_def_ids_t mask_id){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800179a:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 800179c:	2106      	movs	r1, #6
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <acc_data_ready_func+0x28>)
 80017a0:	f000 fa3e 	bl	8001c20 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80017a4:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 80017a6:	2102      	movs	r1, #2
 80017a8:	2007      	movs	r0, #7
 80017aa:	f000 fced 	bl	8002188 <SCHEDULER_task_set_mode>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200011f4 	.word	0x200011f4

080017bc <orientation_update>:

static void orientation_update(mask_def_ids_t mask_id){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80017c6:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 80017c8:	2107      	movs	r1, #7
 80017ca:	4808      	ldr	r0, [pc, #32]	; (80017ec <orientation_update+0x30>)
 80017cc:	f000 fa28 	bl	8001c20 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 80017d0:	2103      	movs	r1, #3
 80017d2:	4806      	ldr	r0, [pc, #24]	; (80017ec <orientation_update+0x30>)
 80017d4:	f000 fa24 	bl	8001c20 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80017d8:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 80017da:	2102      	movs	r1, #2
 80017dc:	2008      	movs	r0, #8
 80017de:	f000 fcd3 	bl	8002188 <SCHEDULER_task_set_mode>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200011f4 	.word	0x200011f4

080017f0 <EVENT_process_events_main>:


//Déclenchement des events en main
void EVENT_process_events_main(){
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
	if(initialized){
 80017f6:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <EVENT_process_events_main+0xf8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d06f      	beq.n	80018de <EVENT_process_events_main+0xee>
	//Pout chaque event
		for(uint32_t e = 0; e < EVENT_MAIN_COUNT; e ++){
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e069      	b.n	80018d8 <EVENT_process_events_main+0xe8>

			uint32_t m = 0 ;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
			bool_e function_did_run_once = FALSE ;
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
			//On test chaque paires de masque
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED){
 800180c:	e049      	b.n	80018a2 <EVENT_process_events_main+0xb2>
				if(Mask_test_and(events_main[e].mask_and[m], flags)){		//Mask and test
 800180e:	4837      	ldr	r0, [pc, #220]	; (80018ec <EVENT_process_events_main+0xfc>)
 8001810:	4937      	ldr	r1, [pc, #220]	; (80018f0 <EVENT_process_events_main+0x100>)
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	00d2      	lsls	r2, r2, #3
 8001818:	24b4      	movs	r4, #180	; 0xb4
 800181a:	fb04 f303 	mul.w	r3, r4, r3
 800181e:	4413      	add	r3, r2
 8001820:	4419      	add	r1, r3
 8001822:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001826:	c903      	ldmia	r1, {r0, r1}
 8001828:	f000 f96b 	bl	8001b02 <Mask_test_and>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d034      	beq.n	800189c <EVENT_process_events_main+0xac>
					if(Mask_test_or(events_main[e].mask_or[m], flags)){		//Mask or test
 8001832:	482e      	ldr	r0, [pc, #184]	; (80018ec <EVENT_process_events_main+0xfc>)
 8001834:	492e      	ldr	r1, [pc, #184]	; (80018f0 <EVENT_process_events_main+0x100>)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1dda      	adds	r2, r3, #7
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	00d2      	lsls	r2, r2, #3
 800183e:	24b4      	movs	r4, #180	; 0xb4
 8001840:	fb04 f303 	mul.w	r3, r4, r3
 8001844:	4413      	add	r3, r2
 8001846:	4419      	add	r1, r3
 8001848:	e890 000c 	ldmia.w	r0, {r2, r3}
 800184c:	c903      	ldmia	r1, {r0, r1}
 800184e:	f000 f98b 	bl	8001b68 <Mask_test_or>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d021      	beq.n	800189c <EVENT_process_events_main+0xac>
						if(!Mask_test_or(events_main[e].mask_not[m], flags)){	//Mask not test
 8001858:	4824      	ldr	r0, [pc, #144]	; (80018ec <EVENT_process_events_main+0xfc>)
 800185a:	4925      	ldr	r1, [pc, #148]	; (80018f0 <EVENT_process_events_main+0x100>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f103 020e 	add.w	r2, r3, #14
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	00d2      	lsls	r2, r2, #3
 8001866:	24b4      	movs	r4, #180	; 0xb4
 8001868:	fb04 f303 	mul.w	r3, r4, r3
 800186c:	4413      	add	r3, r2
 800186e:	4419      	add	r1, r3
 8001870:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001874:	c903      	ldmia	r1, {r0, r1}
 8001876:	f000 f977 	bl	8001b68 <Mask_test_or>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10d      	bne.n	800189c <EVENT_process_events_main+0xac>
							events_main[e].function(m);
 8001880:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <EVENT_process_events_main+0x100>)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	21b4      	movs	r1, #180	; 0xb4
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	33b0      	adds	r3, #176	; 0xb0
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	4610      	mov	r0, r2
 8001896:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8001898:	2301      	movs	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
						}
					}
				}
				m++ ;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3301      	adds	r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED){
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <EVENT_process_events_main+0x100>)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	21b4      	movs	r1, #180	; 0xb4
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	33a8      	adds	r3, #168	; 0xa8
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d20c      	bcs.n	80018d2 <EVENT_process_events_main+0xe2>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <EVENT_process_events_main+0xe2>
 80018be:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <EVENT_process_events_main+0x100>)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	21b4      	movs	r1, #180	; 0xb4
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	33ac      	adds	r3, #172	; 0xac
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d09d      	beq.n	800180e <EVENT_process_events_main+0x1e>
		for(uint32_t e = 0; e < EVENT_MAIN_COUNT; e ++){
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d992      	bls.n	8001804 <EVENT_process_events_main+0x14>
			}

		}
	}
}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20001208 	.word	0x20001208
 80018ec:	200011f4 	.word	0x200011f4
 80018f0:	20000024 	.word	0x20000024

080018f4 <EVENT_process_events_it>:

//Déclenchement des events en it
void EVENT_process_events_it(){
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
	if(initialized){
 80018fa:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <EVENT_process_events_it+0xf8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d06f      	beq.n	80019e2 <EVENT_process_events_it+0xee>
	//Pout chaque event
		for(uint32_t e = 0; e < EVENT_IT_COUNT; e ++){
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e069      	b.n	80019dc <EVENT_process_events_it+0xe8>
			uint32_t m = 0 ;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
			bool_e function_did_run_once = FALSE ;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
			//On test chaque paires de masque
			while(m < events_it[e].nb_mask && !function_did_run_once && events_it[e].state == EVENT_ENABLED){
 8001910:	e049      	b.n	80019a6 <EVENT_process_events_it+0xb2>
				if(Mask_test_and(events_it[e].mask_and[m], flags)){		//Mask and test
 8001912:	4837      	ldr	r0, [pc, #220]	; (80019f0 <EVENT_process_events_it+0xfc>)
 8001914:	4937      	ldr	r1, [pc, #220]	; (80019f4 <EVENT_process_events_it+0x100>)
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	00d2      	lsls	r2, r2, #3
 800191c:	24b4      	movs	r4, #180	; 0xb4
 800191e:	fb04 f303 	mul.w	r3, r4, r3
 8001922:	4413      	add	r3, r2
 8001924:	4419      	add	r1, r3
 8001926:	e890 000c 	ldmia.w	r0, {r2, r3}
 800192a:	c903      	ldmia	r1, {r0, r1}
 800192c:	f000 f8e9 	bl	8001b02 <Mask_test_and>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d034      	beq.n	80019a0 <EVENT_process_events_it+0xac>
					if(Mask_test_or(events_it[e].mask_or[m], flags)){		//Mask or test
 8001936:	482e      	ldr	r0, [pc, #184]	; (80019f0 <EVENT_process_events_it+0xfc>)
 8001938:	492e      	ldr	r1, [pc, #184]	; (80019f4 <EVENT_process_events_it+0x100>)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1dda      	adds	r2, r3, #7
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	00d2      	lsls	r2, r2, #3
 8001942:	24b4      	movs	r4, #180	; 0xb4
 8001944:	fb04 f303 	mul.w	r3, r4, r3
 8001948:	4413      	add	r3, r2
 800194a:	4419      	add	r1, r3
 800194c:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001950:	c903      	ldmia	r1, {r0, r1}
 8001952:	f000 f909 	bl	8001b68 <Mask_test_or>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d021      	beq.n	80019a0 <EVENT_process_events_it+0xac>
						if(!Mask_test_or(events_it[e].mask_not[m], flags)){	//Mask not test
 800195c:	4824      	ldr	r0, [pc, #144]	; (80019f0 <EVENT_process_events_it+0xfc>)
 800195e:	4925      	ldr	r1, [pc, #148]	; (80019f4 <EVENT_process_events_it+0x100>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f103 020e 	add.w	r2, r3, #14
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	00d2      	lsls	r2, r2, #3
 800196a:	24b4      	movs	r4, #180	; 0xb4
 800196c:	fb04 f303 	mul.w	r3, r4, r3
 8001970:	4413      	add	r3, r2
 8001972:	4419      	add	r1, r3
 8001974:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001978:	c903      	ldmia	r1, {r0, r1}
 800197a:	f000 f8f5 	bl	8001b68 <Mask_test_or>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10d      	bne.n	80019a0 <EVENT_process_events_it+0xac>
							events_it[e].function(m);
 8001984:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <EVENT_process_events_it+0x100>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	21b4      	movs	r1, #180	; 0xb4
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	4413      	add	r3, r2
 8001990:	33b0      	adds	r3, #176	; 0xb0
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	4610      	mov	r0, r2
 800199a:	4798      	blx	r3
							function_did_run_once = TRUE ;
 800199c:	2301      	movs	r3, #1
 800199e:	607b      	str	r3, [r7, #4]
						}
					}
				}
				m++ ;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
			while(m < events_it[e].nb_mask && !function_did_run_once && events_it[e].state == EVENT_ENABLED){
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <EVENT_process_events_it+0x100>)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	21b4      	movs	r1, #180	; 0xb4
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	33a8      	adds	r3, #168	; 0xa8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d20c      	bcs.n	80019d6 <EVENT_process_events_it+0xe2>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <EVENT_process_events_it+0xe2>
 80019c2:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <EVENT_process_events_it+0x100>)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	21b4      	movs	r1, #180	; 0xb4
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	33ac      	adds	r3, #172	; 0xac
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d09d      	beq.n	8001912 <EVENT_process_events_it+0x1e>
		for(uint32_t e = 0; e < EVENT_IT_COUNT; e ++){
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3301      	adds	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d992      	bls.n	8001908 <EVENT_process_events_it+0x14>

			}
		}
	}
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20001208 	.word	0x20001208
 80019f0:	200011f4 	.word	0x200011f4
 80019f4:	200003a8 	.word	0x200003a8

080019f8 <EVENT_Set_flag>:

//Set et clean depuis le main
void EVENT_Set_flag(Flags_e flag){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a02:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <EVENT_Set_flag+0x28>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <EVENT_Set_flag+0x2c>)
 8001a10:	f000 f8d6 	bl	8001bc0 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a14:	b662      	cpsie	i
	__enable_irq();
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200011fc 	.word	0x200011fc
 8001a24:	200011f4 	.word	0x200011f4

08001a28 <EVENT_Clean_flag>:
void EVENT_Clean_flag(Flags_e flag){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a32:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <EVENT_Clean_flag+0x28>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <EVENT_Clean_flag+0x2c>)
 8001a40:	f000 f8ee 	bl	8001c20 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a44:	b662      	cpsie	i
	__enable_irq();
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200011fc 	.word	0x200011fc
 8001a54:	200011f4 	.word	0x200011f4

08001a58 <EVENT_timmer_callback>:



void EVENT_timmer_callback(TIM_HandleTypeDef * htim){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	if(new_flag){
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <EVENT_timmer_callback+0x2c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <EVENT_timmer_callback+0x24>
		if(htim == htim_event){
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <EVENT_timmer_callback+0x30>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d104      	bne.n	8001a7c <EVENT_timmer_callback+0x24>
			new_flag = FALSE ;
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <EVENT_timmer_callback+0x2c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
			EVENT_process_events_it();
 8001a78:	f7ff ff3c 	bl	80018f4 <EVENT_process_events_it>
		}
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200011fc 	.word	0x200011fc
 8001a88:	20001200 	.word	0x20001200

08001a8c <EVENT_init>:

void EVENT_init(system_t * sys_, TIM_HandleTypeDef * htim_event_){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
	initialized = TRUE ;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <EVENT_init+0x48>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
	sys =sys_;
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <EVENT_init+0x4c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]

	//Configuration des mask associés aux events
	mask_def_events_it_init(events_it);
 8001aa2:	480e      	ldr	r0, [pc, #56]	; (8001adc <EVENT_init+0x50>)
 8001aa4:	f000 f8eb 	bl	8001c7e <mask_def_events_it_init>
	mask_def_events_main_init(events_main);
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <EVENT_init+0x54>)
 8001aaa:	f000 f8fe 	bl	8001caa <mask_def_events_main_init>

	MASK_set_flag(&flags, FLAG_FLIGHT_MODE_ON_THE_GROUND);
 8001aae:	2118      	movs	r1, #24
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <EVENT_init+0x58>)
 8001ab2:	f000 f885 	bl	8001bc0 <MASK_set_flag>

	//On lance le timmer dédié à l'it event
	if(htim_event_ != NULL){
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <EVENT_init+0x40>
		htim_event = htim_event_ ;
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <EVENT_init+0x5c>)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(htim_event);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <EVENT_init+0x5c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f005 fea1 	bl	800780e <HAL_TIM_Base_Start_IT>
	}
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20001208 	.word	0x20001208
 8001ad8:	20001204 	.word	0x20001204
 8001adc:	200003a8 	.word	0x200003a8
 8001ae0:	20000024 	.word	0x20000024
 8001ae4:	200011f4 	.word	0x200011f4
 8001ae8:	20001200 	.word	0x20001200

08001aec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  EVENT_timmer_callback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ffaf 	bl	8001a58 <EVENT_timmer_callback>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 8001b02:	b490      	push	{r4, r7}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	f107 0408 	add.w	r4, r7, #8
 8001b0c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b10:	4639      	mov	r1, r7
 8001b12:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e01c      	b.n	8001b56 <Mask_test_and+0x54>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	f107 0218 	add.w	r2, r7, #24
 8001b24:	4413      	add	r3, r2
 8001b26:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	f107 0118 	add.w	r1, r7, #24
 8001b32:	440b      	add	r3, r1
 8001b34:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001b38:	401a      	ands	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	f107 0118 	add.w	r1, r7, #24
 8001b42:	440b      	add	r3, r1
 8001b44:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <Mask_test_and+0x4e>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e006      	b.n	8001b5e <Mask_test_and+0x5c>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	dddf      	ble.n	8001b1c <Mask_test_and+0x1a>
		}
	return TRUE ;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc90      	pop	{r4, r7}
 8001b66:	4770      	bx	lr

08001b68 <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8001b68:	b490      	push	{r4, r7}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	f107 0408 	add.w	r4, r7, #8
 8001b72:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b76:	4639      	mov	r1, r7
 8001b78:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e015      	b.n	8001bae <Mask_test_or+0x46>
		if(mask_test.array[m] & mask_ref.array[m])
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	f107 0218 	add.w	r2, r7, #24
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	f107 0118 	add.w	r1, r7, #24
 8001b98:	440b      	add	r3, r1
 8001b9a:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <Mask_test_or+0x40>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e006      	b.n	8001bb6 <Mask_test_or+0x4e>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	dde6      	ble.n	8001b82 <Mask_test_or+0x1a>
	return FALSE ;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc90      	pop	{r4, r7}
 8001bbe:	4770      	bx	lr

08001bc0 <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	60fb      	str	r3, [r7, #12]
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d101      	bne.n	8001bfc <MASK_set_flag+0x3c>
		return FALSE ;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e00b      	b.n	8001c14 <MASK_set_flag+0x54>
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	ea42 0103 	orr.w	r1, r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return TRUE ;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	60fb      	str	r3, [r7, #12]
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d10b      	bne.n	8001c70 <MASK_clean_flag+0x50>
		mask->array[array_nb] -= flag_mask ;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1ad1      	subs	r1, r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return TRUE ;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <MASK_clean_flag+0x52>
	}
	return FALSE ;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <mask_def_events_it_init>:

// ----------------	Flight Modes ------------------------
static void mask_def_on_the_ground(Event_t * event);
static void mask_def_manual_accro(Event_t * event);
//----------------	GLOBAL INIT ------------------------
void mask_def_events_it_init(Event_t * event){
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_data_ready(&event[EVENT_IT_GYRO_DATA_READY]);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f84a 	bl	8001d20 <mask_def_gyro_data_ready>

	//Acc mask def
	mask_def_acc_data_ready(&event[EVENT_IT_ACC_DATA_READY]);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	33b4      	adds	r3, #180	; 0xb4
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f871 	bl	8001d78 <mask_def_acc_data_ready>

	//Orientation
	mask_def_orientation_update(&event[EVENT_IT_ORIENTATION_UPDATE]);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f87e 	bl	8001d9e <mask_def_orientation_update>



}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <mask_def_events_main_init>:

void mask_def_events_main_init(Event_t * event){
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_init_ok(&event[EVENT_MAIN_GYRO_INIT_OK]);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f81b 	bl	8001cee <mask_def_gyro_init_ok>

	//Acc mask def
	mask_def_acc_init_ok(&event[EVENT_MAIN_ACC_INIT_OK]);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	33b4      	adds	r3, #180	; 0xb4
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 f842 	bl	8001d46 <mask_def_acc_init_ok>

	//Ibus
	mask_def_ibus_data_rdy(&event[EVENT_MAIN_IBUS_DATA_RDY]);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f885 	bl	8001dd8 <mask_def_ibus_data_rdy>

	//Flight_modes
	mask_def_on_the_ground(&event[EVENT_MAIN_ON_THE_GROUND]);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f892 	bl	8001dfe <mask_def_on_the_ground>
	mask_def_manual_accro(&event[EVENT_MAIN_MANUAL_ACCRO]);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 f8a5 	bl	8001e30 <mask_def_manual_accro>

}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <mask_def_gyro_init_ok>:

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff60 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3338      	adds	r3, #56	; 0x38
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff5a 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3370      	adds	r3, #112	; 0x70
 8001d10:	2101      	movs	r1, #1
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff54 	bl	8001bc0 <MASK_set_flag>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff47 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3338      	adds	r3, #56	; 0x38
 8001d36:	2102      	movs	r1, #2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff41 	bl	8001bc0 <MASK_set_flag>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2104      	movs	r1, #4
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff34 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3338      	adds	r3, #56	; 0x38
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff2e 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3370      	adds	r3, #112	; 0x70
 8001d68:	2105      	movs	r1, #5
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff28 	bl	8001bc0 <MASK_set_flag>
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2104      	movs	r1, #4
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff1b 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3338      	adds	r3, #56	; 0x38
 8001d8e:	2106      	movs	r1, #6
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff15 	bl	8001bc0 <MASK_set_flag>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2104      	movs	r1, #4
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff08 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff03 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fefe 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3338      	adds	r3, #56	; 0x38
 8001dc8:	2107      	movs	r1, #7
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fef8 	bl	8001bc0 <MASK_set_flag>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <mask_def_ibus_data_rdy>:

// ----------------	Radio ------------------------

static void mask_def_ibus_data_rdy(Event_t * event){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	//Si flag data rdy on y go
	MASK_set_flag(&event->mask_and[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2108      	movs	r1, #8
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff feeb 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3338      	adds	r3, #56	; 0x38
 8001dee:	2108      	movs	r1, #8
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fee5 	bl	8001bc0 <MASK_set_flag>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <mask_def_on_the_ground>:

// ----------------	Flight Modes ------------------------
static void mask_def_on_the_ground(Event_t * event){
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_MANUAL], FLAG_FLIGHT_MODE_MANUAL_ACCRO);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2119      	movs	r1, #25
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fed8 	bl	8001bc0 <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_MANUAL], FLAG_THROTTLE_NULL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3338      	adds	r3, #56	; 0x38
 8001e14:	2117      	movs	r1, #23
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fed2 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_MANUAL], FLAG_CHAN_5_POS_1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3338      	adds	r3, #56	; 0x38
 8001e20:	2109      	movs	r1, #9
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fecc 	bl	8001bc0 <MASK_set_flag>

}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <mask_def_manual_accro>:

static void mask_def_manual_accro(Event_t * event){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ON_THE_GROUND], FLAG_FLIGHT_MODE_ON_THE_GROUND);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2118      	movs	r1, #24
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff febf 	bl	8001bc0 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ON_THE_GROUND], FLAG_CHAN_5_POS_3);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	210a      	movs	r1, #10
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff feba 	bl	8001bc0 <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_MANUAL_ON_THE_GROUND], FLAG_THROTTLE_LOW);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3338      	adds	r3, #56	; 0x38
 8001e50:	2116      	movs	r1, #22
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff feb4 	bl	8001bc0 <MASK_set_flag>

}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 8001e68:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <SCHEDULER_init+0x20>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 8001e6e:	f7ff fb35 	bl	80014dc <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fa7e 	bl	8002374 <tasks_init>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20001244 	.word	0x20001244

08001e84 <SCHEDULER_run>:

void SCHEDULER_run(void){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8001e8a:	f000 fbb5 	bl	80025f8 <TIME_us>
 8001e8e:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 8001e90:	f000 f886 	bl	8001fa0 <get_first_task>
 8001e94:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
	while(task_queu_position < task_queu_size && task != NULL){
 8001e9a:	e046      	b.n	8001f2a <SCHEDULER_run+0xa6>

		switch(task->mode){
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	7a1b      	ldrb	r3, [r3, #8]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d020      	beq.n	8001ee6 <SCHEDULER_run+0x62>
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d002      	beq.n	8001eae <SCHEDULER_run+0x2a>
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d008      	beq.n	8001ebe <SCHEDULER_run+0x3a>
				task->mode = TASK_MODE_WAIT ;
				break;
			case TASK_MODE_TIMMER :
			case TASK_MODE_WAIT:
			default:
				break;
 8001eac:	e027      	b.n	8001efe <SCHEDULER_run+0x7a>
				current_time_us = task_process(task, current_time_us);
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	68b8      	ldr	r0, [r7, #8]
 8001eb2:	f000 f89b 	bl	8001fec <task_process>
 8001eb6:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
				break;
 8001ebc:	e01f      	b.n	8001efe <SCHEDULER_run+0x7a>
				if(current_time_us >= task->desired_next_start_us){
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d319      	bcc.n	8001efc <SCHEDULER_run+0x78>
					current_time_us = task_process(task, current_time_us);
 8001ec8:	68f9      	ldr	r1, [r7, #12]
 8001eca:	68b8      	ldr	r0, [r7, #8]
 8001ecc:	f000 f88e 	bl	8001fec <task_process>
 8001ed0:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us += task->desired_period_us ;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	6a1a      	ldr	r2, [r3, #32]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	441a      	add	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	607b      	str	r3, [r7, #4]
				break;
 8001ee4:	e00a      	b.n	8001efc <SCHEDULER_run+0x78>
				current_time_us = task_process(task, current_time_us);
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	68b8      	ldr	r0, [r7, #8]
 8001eea:	f000 f87f 	bl	8001fec <task_process>
 8001eee:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
				task->mode = TASK_MODE_WAIT ;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	721a      	strb	r2, [r3, #8]
				break;
 8001efa:	e000      	b.n	8001efe <SCHEDULER_run+0x7a>
				break;
 8001efc:	bf00      	nop
		}
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00d      	beq.n	8001f20 <SCHEDULER_run+0x9c>
 8001f04:	2000      	movs	r0, #0
 8001f06:	f000 fb63 	bl	80025d0 <TASK_get_task>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d006      	beq.n	8001f20 <SCHEDULER_run+0x9c>
 8001f12:	2001      	movs	r0, #1
 8001f14:	f000 fb5c 	bl	80025d0 <TASK_get_task>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d10e      	bne.n	8001f3e <SCHEDULER_run+0xba>
			//Stop the while loop if we executed a task
			break;
		task_executed = FALSE ;
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
		task = get_next_task();
 8001f24:	f000 f84c 	bl	8001fc0 <get_next_task>
 8001f28:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL){
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <SCHEDULER_run+0xc4>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <SCHEDULER_run+0xc8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d204      	bcs.n	8001f40 <SCHEDULER_run+0xbc>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1af      	bne.n	8001e9c <SCHEDULER_run+0x18>
	}
}
 8001f3c:	e000      	b.n	8001f40 <SCHEDULER_run+0xbc>
			break;
 8001f3e:	bf00      	nop
}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20001240 	.word	0x20001240
 8001f4c:	2000123c 	.word	0x2000123c

08001f50 <SCHEDULER_task>:

void SCHEDULER_task(void){
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
	//Changement de mode pour les tâches
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	71fb      	strb	r3, [r7, #7]
 8001f5a:	e00b      	b.n	8001f74 <SCHEDULER_task+0x24>
	{
		task_to_change[t]->mode = change_mode[t] ;
 8001f5c:	79fa      	ldrb	r2, [r7, #7]
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <SCHEDULER_task+0x44>)
 8001f62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f66:	490c      	ldr	r1, [pc, #48]	; (8001f98 <SCHEDULER_task+0x48>)
 8001f68:	5c8a      	ldrb	r2, [r1, r2]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	721a      	strb	r2, [r3, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	3301      	adds	r3, #1
 8001f72:	71fb      	strb	r3, [r7, #7]
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <SCHEDULER_task+0x4c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	79fa      	ldrb	r2, [r7, #7]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d3ed      	bcc.n	8001f5c <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <SCHEDULER_task+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20001248 	.word	0x20001248
 8001f98:	20001278 	.word	0x20001278
 8001f9c:	20001284 	.word	0x20001284

08001fa0 <get_first_task>:
	for(uint32_t t = 0; t < task_queu_size; t++)
		load_pourcentage += task_queu[t]->duration_us * 10000 / task_queu[t]->real_period_us ;
	return load_pourcentage ;
}

static task_t * get_first_task(void){
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <get_first_task+0x18>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <get_first_task+0x1c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	20001240 	.word	0x20001240
 8001fbc:	2000120c 	.word	0x2000120c

08001fc0 <get_next_task>:

static task_t * get_next_task(void){
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <get_next_task+0x24>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <get_next_task+0x24>)
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <get_next_task+0x24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <get_next_task+0x28>)
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20001240 	.word	0x20001240
 8001fe8:	2000120c 	.word	0x2000120c

08001fec <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <task_process+0x16>
		return current_time_us ;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	e09d      	b.n	800213e <task_process+0x152>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	3308      	adds	r3, #8
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69da      	ldr	r2, [r3, #28]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002026:	6839      	ldr	r1, [r7, #0]
 8002028:	1a8a      	subs	r2, r1, r2
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	3308      	adds	r3, #8
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	3308      	adds	r3, #8
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	441a      	add	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002052:	4a3d      	ldr	r2, [pc, #244]	; (8002148 <task_process+0x15c>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	091a      	lsrs	r2, r3, #4
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]

	task->last_execution_us = current_time_us ;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	6838      	ldr	r0, [r7, #0]
 800206a:	4798      	blx	r3
	current_time_us = TIME_us();
 800206c:	f000 fac4 	bl	80025f8 <TIME_us>
 8002070:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	311e      	adds	r1, #30
 8002082:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8002098:	6839      	ldr	r1, [r7, #0]
 800209a:	1ac9      	subs	r1, r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	321e      	adds	r2, #30
 80020a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	311e      	adds	r1, #30
 80020b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	bf38      	it	cc
 80020ba:	461a      	movcc	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	311e      	adds	r1, #30
 80020d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020d4:	441a      	add	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80020e2:	4a19      	ldr	r2, [pc, #100]	; (8002148 <task_process+0x15c>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	091a      	lsrs	r2, r3, #4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	321e      	adds	r2, #30
 80020f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002100:	d90c      	bls.n	800211c <task_process+0x130>
		task->duration_us_average_array[task->average_index] ++ ;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	f103 011e 	add.w	r1, r3, #30
 800210e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002112:	1c51      	adds	r1, r2, #1
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	331e      	adds	r3, #30
 8002118:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002130:	2b14      	cmp	r3, #20
 8002132:	d103      	bne.n	800213c <task_process+0x150>
		task->average_index = 0 ;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 800213c:	683b      	ldr	r3, [r7, #0]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	cccccccd 	.word	0xcccccccd

0800214c <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
	if(enable)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <SCHEDULER_enable_task+0x24>
		queu_add(TASK_get_task(id));
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fa35 	bl	80025d0 <TASK_get_task>
 8002166:	4603      	mov	r3, r0
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f861 	bl	8002230 <queu_add>
	else
		queu_remove(TASK_get_task(id));
}
 800216e:	e007      	b.n	8002180 <SCHEDULER_enable_task+0x34>
		queu_remove(TASK_get_task(id));
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fa2c 	bl	80025d0 <TASK_get_task>
 8002178:	4603      	mov	r3, r0
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f8b8 	bl	80022f0 <queu_remove>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <SCHEDULER_task_set_mode>:

void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	460a      	mov	r2, r1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	4613      	mov	r3, r2
 8002196:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8002198:	b672      	cpsid	i
	__disable_irq();
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <SCHEDULER_task_set_mode+0x4c>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461c      	mov	r4, r3
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fa13 	bl	80025d0 <TASK_get_task>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <SCHEDULER_task_set_mode+0x50>)
 80021ae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <SCHEDULER_task_set_mode+0x4c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	b2d1      	uxtb	r1, r2
 80021bc:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <SCHEDULER_task_set_mode+0x4c>)
 80021be:	7011      	strb	r1, [r2, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	4a06      	ldr	r2, [pc, #24]	; (80021dc <SCHEDULER_task_set_mode+0x54>)
 80021c4:	79bb      	ldrb	r3, [r7, #6]
 80021c6:	5453      	strb	r3, [r2, r1]
  __ASM volatile ("cpsie i" : : : "memory");
 80021c8:	b662      	cpsie	i
	__enable_irq();
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20001284 	.word	0x20001284
 80021d8:	20001248 	.word	0x20001248
 80021dc:	20001278 	.word	0x20001278

080021e0 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <queu_contains+0x12>
		return FALSE ;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e014      	b.n	800221c <queu_contains+0x3c>

	for(uint32_t t = 0; t < task_queu_size; t++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e00b      	b.n	8002210 <queu_contains+0x30>
		if(task_queu[t] == task)
 80021f8:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <queu_contains+0x48>)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	d101      	bne.n	800220a <queu_contains+0x2a>
			return TRUE ;
 8002206:	2301      	movs	r3, #1
 8002208:	e008      	b.n	800221c <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3301      	adds	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <queu_contains+0x4c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	429a      	cmp	r2, r3
 8002218:	d3ee      	bcc.n	80021f8 <queu_contains+0x18>
	return FALSE ;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	2000120c 	.word	0x2000120c
 800222c:	2000123c 	.word	0x2000123c

08002230 <queu_add>:

static bool_e queu_add(task_t * task){
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffd1 	bl	80021e0 <queu_contains>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <queu_add+0x22>
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <queu_add+0xb8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b0b      	cmp	r3, #11
 800224a:	d802      	bhi.n	8002252 <queu_add+0x22>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <queu_add+0x26>
		return FALSE ;
 8002252:	2300      	movs	r3, #0
 8002254:	e043      	b.n	80022de <queu_add+0xae>


	uint32_t t = 0 ;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 800225a:	e03c      	b.n	80022d6 <queu_add+0xa6>
	{
		if(task_queu[t] == NULL)
 800225c:	4a23      	ldr	r2, [pc, #140]	; (80022ec <queu_add+0xbc>)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <queu_add+0x50>
		{
			task_queu[t] = task ;
 8002268:	4920      	ldr	r1, [pc, #128]	; (80022ec <queu_add+0xbc>)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <queu_add+0xb8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <queu_add+0xb8>)
 800227a:	6013      	str	r3, [r2, #0]
			return TRUE;
 800227c:	2301      	movs	r3, #1
 800227e:	e02e      	b.n	80022de <queu_add+0xae>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f993 2000 	ldrsb.w	r2, [r3]
 8002286:	4919      	ldr	r1, [pc, #100]	; (80022ec <queu_add+0xbc>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800228e:	f993 3000 	ldrsb.w	r3, [r3]
 8002292:	429a      	cmp	r2, r3
 8002294:	dd1c      	ble.n	80022d0 <queu_add+0xa0>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4a13      	ldr	r2, [pc, #76]	; (80022ec <queu_add+0xbc>)
 800229e:	1898      	adds	r0, r3, r2
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4a11      	ldr	r2, [pc, #68]	; (80022ec <queu_add+0xbc>)
 80022a6:	1899      	adds	r1, r3, r2
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <queu_add+0xb8>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	461a      	mov	r2, r3
 80022b4:	f007 ff2e 	bl	800a114 <memmove>
			task_queu[t] = task ;
 80022b8:	490c      	ldr	r1, [pc, #48]	; (80022ec <queu_add+0xbc>)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <queu_add+0xb8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <queu_add+0xb8>)
 80022ca:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e006      	b.n	80022de <queu_add+0xae>
		}
		t++;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3301      	adds	r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b0b      	cmp	r3, #11
 80022da:	d9bf      	bls.n	800225c <queu_add+0x2c>
	}
	return FALSE ;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000123c 	.word	0x2000123c
 80022ec:	2000120c 	.word	0x2000120c

080022f0 <queu_remove>:

static bool_e queu_remove(task_t * task){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff71 	bl	80021e0 <queu_contains>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <queu_remove+0x1a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <queu_remove+0x1e>
		return FALSE ;
 800230a:	2300      	movs	r3, #0
 800230c:	e02a      	b.n	8002364 <queu_remove+0x74>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e021      	b.n	8002358 <queu_remove+0x68>
		if(task == task_queu[t]){
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <queu_remove+0x7c>)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	d117      	bne.n	8002352 <queu_remove+0x62>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4a11      	ldr	r2, [pc, #68]	; (800236c <queu_remove+0x7c>)
 8002328:	1898      	adds	r0, r3, r2
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3301      	adds	r3, #1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <queu_remove+0x7c>)
 8002332:	1899      	adds	r1, r3, r2
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <queu_remove+0x80>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	461a      	mov	r2, r3
 8002340:	f007 fee8 	bl	800a114 <memmove>
			task_queu_size -- ;
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <queu_remove+0x80>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <queu_remove+0x80>)
 800234c:	6013      	str	r3, [r2, #0]
			return TRUE ;
 800234e:	2301      	movs	r3, #1
 8002350:	e008      	b.n	8002364 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <queu_remove+0x80>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	429a      	cmp	r2, r3
 8002360:	d3d8      	bcc.n	8002314 <queu_remove+0x24>
		}
	}
	return FALSE ;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2000120c 	.word	0x2000120c
 8002370:	2000123c 	.word	0x2000123c

08002374 <tasks_init>:

static uint32_t start_time_gyro = 0;
static uint32_t end_time_filtering_gyro= 0;
static uint32_t delta_1 ;

void tasks_init(system_t * sys_){
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <tasks_init+0x68>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 8002382:	2101      	movs	r1, #1
 8002384:	2000      	movs	r0, #0
 8002386:	f7ff fee1 	bl	800214c <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 800238a:	2101      	movs	r1, #1
 800238c:	2001      	movs	r0, #1
 800238e:	f7ff fedd 	bl	800214c <SCHEDULER_enable_task>

	SCHEDULER_enable_task(TASK_LED, TRUE);
 8002392:	2101      	movs	r1, #1
 8002394:	2003      	movs	r0, #3
 8002396:	f7ff fed9 	bl	800214c <SCHEDULER_enable_task>
	//SCHEDULER_enable_task(TASK_PRINTF, TRUE);
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 800239a:	2101      	movs	r1, #1
 800239c:	2008      	movs	r0, #8
 800239e:	f7ff fed5 	bl	800214c <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 80023a2:	2101      	movs	r1, #1
 80023a4:	2005      	movs	r0, #5
 80023a6:	f7ff fed1 	bl	800214c <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 80023aa:	2101      	movs	r1, #1
 80023ac:	2004      	movs	r0, #4
 80023ae:	f7ff fecd 	bl	800214c <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 80023b2:	2101      	movs	r1, #1
 80023b4:	2007      	movs	r0, #7
 80023b6:	f7ff fec9 	bl	800214c <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_UPDATE, TRUE);
 80023ba:	2101      	movs	r1, #1
 80023bc:	2009      	movs	r0, #9
 80023be:	f7ff fec5 	bl	800214c <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_ANALYSIS, TRUE);
 80023c2:	2101      	movs	r1, #1
 80023c4:	200a      	movs	r0, #10
 80023c6:	f7ff fec1 	bl	800214c <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_MOTORS_UPDATE, TRUE);
 80023ca:	2101      	movs	r1, #1
 80023cc:	200b      	movs	r0, #11
 80023ce:	f7ff febd 	bl	800214c <SCHEDULER_enable_task>

}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20001288 	.word	0x20001288

080023e0 <process_print_f>:

void process_print_f(uint32_t current_time_us){
 80023e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023e4:	b088      	sub	sp, #32
 80023e6:	af04      	add	r7, sp, #16
 80023e8:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);
//	gyro_t * gyro = &sys->sensors.gyro ;
//	acc_t * acc = &sys->sensors.acc ;
	orientation_t * ori = &sys->orientation ;
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <process_print_f+0x5c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80023f2:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	//printf("%f\t%f\t%f\t%f\t%f\t%f\t%lu\n",acc->raw[0], acc->raw[1], acc->raw[2],gyro->raw[0], gyro->raw[1], gyro->raw[2], TASK_get_task(TASK_GYRO_UPDATE)->duration_us);
	//printf("%f\t%f\t%lu\n", acc->filtered[ACC_AXE_Z], gyro->filtered[ACC_AXE_X], delta_1);
	//printf("%f\n", acc->filtered[GYRO_AXE_X]);
	//printf("%lu\n", delta_1);
	printf("%f\t%f\t%f\n", ori->angular_position[0], ori->angular_velocity[0], ori->acc_angles[0]);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f8a5 	bl	8000548 <__aeabi_f2d>
 80023fe:	4680      	mov	r8, r0
 8002400:	4689      	mov	r9, r1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f89d 	bl	8000548 <__aeabi_f2d>
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f896 	bl	8000548 <__aeabi_f2d>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002424:	e9cd 4500 	strd	r4, r5, [sp]
 8002428:	4642      	mov	r2, r8
 800242a:	464b      	mov	r3, r9
 800242c:	4804      	ldr	r0, [pc, #16]	; (8002440 <process_print_f+0x60>)
 800242e:	f008 faef 	bl	800aa10 <iprintf>
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800243c:	20001288 	.word	0x20001288
 8002440:	0800cd40 	.word	0x0800cd40

08002444 <process_led>:


void process_led(uint32_t current_time_us){
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	LED_SEQUENCE_play(&sys->ihm.led_blue, current_time_us);
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <process_led+0x38>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3338      	adds	r3, #56	; 0x38
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4618      	mov	r0, r3
 8002456:	f007 fddf 	bl	800a018 <LED_SEQUENCE_play>
	LED_SEQUENCE_play(&sys->ihm.led_red, current_time_us);
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <process_led+0x38>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	f007 fdd9 	bl	800a018 <LED_SEQUENCE_play>
	LED_SEQUENCE_play(&sys->ihm.led_green, current_time_us);
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <process_led+0x38>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	331c      	adds	r3, #28
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4618      	mov	r0, r3
 8002470:	f007 fdd2 	bl	800a018 <LED_SEQUENCE_play>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20001288 	.word	0x20001288

08002480 <process_gyro_update>:

void process_gyro_update(uint32_t current_time_us){
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	start_time_gyro = current_time_us ;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <process_gyro_update+0x24>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <process_gyro_update+0x28>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3354      	adds	r3, #84	; 0x54
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fe13 	bl	80030c0 <GYRO_ACC_update_dma>

}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000128c 	.word	0x2000128c
 80024a8:	20001288 	.word	0x20001288

080024ac <process_gyro_filter>:

void process_gyro_filter(uint32_t current_time_us){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	end_time_filtering_gyro = current_time_us ;
 80024b4:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <process_gyro_filter+0x24>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
//	delta_1 = 90  * delta_1 + 10* (end_time_filtering_gyro - start_time_gyro) ;
//	delta_1 /= 100 ;

	GYRO_process_lpf(&sys->sensors.gyro);
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <process_gyro_filter+0x28>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3354      	adds	r3, #84	; 0x54
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fe19 	bl	80030f8 <GYRO_process_lpf>

}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20001290 	.word	0x20001290
 80024d4:	20001288 	.word	0x20001288

080024d8 <process_acc_update>:

void process_acc_update(uint32_t current_time_us){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <process_acc_update+0x1c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	33bc      	adds	r3, #188	; 0xbc
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fd42 	bl	8002f70 <ACC_update>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20001288 	.word	0x20001288

080024f8 <process_acc_filter>:

void process_acc_filter(uint32_t current_time_us){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	ACC_process_lpf(&sys->sensors.acc);
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <process_acc_filter+0x1c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	33bc      	adds	r3, #188	; 0xbc
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fd50 	bl	8002fac <ACC_process_lpf>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20001288 	.word	0x20001288

08002518 <process_event_main>:

void process_event_main(uint32_t current_time_us){
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process_events_main();
 8002520:	f7ff f966 	bl	80017f0 <EVENT_process_events_main>
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <process_orientation_update>:

void process_orientation_update(uint32_t current_time_us){
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	delta_1 = (end_time_filtering_gyro - start_time_gyro) ;
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <process_orientation_update+0x34>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <process_orientation_update+0x38>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <process_orientation_update+0x3c>)
 8002540:	6013      	str	r3, [r2, #0]
	ORIENTATION_Update(&sys->orientation);
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <process_orientation_update+0x40>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fdbc 	bl	80010c8 <ORIENTATION_Update>
	REGULATION_ORIENTATION_Process();
 8002550:	f000 fc54 	bl	8002dfc <REGULATION_ORIENTATION_Process>
	PROPULSION_Update_Motors();
 8002554:	f000 f898 	bl	8002688 <PROPULSION_Update_Motors>
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20001290 	.word	0x20001290
 8002564:	2000128c 	.word	0x2000128c
 8002568:	20001294 	.word	0x20001294
 800256c:	20001288 	.word	0x20001288

08002570 <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 8002578:	f7ff fcea 	bl	8001f50 <SCHEDULER_task>
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <process_controller_channel_update>:

void process_controller_channel_update(uint32_t current_time_us){
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	if(CONTROLLER_Update_Channels_Array())
 800258c:	f000 fbd4 	bl	8002d38 <CONTROLLER_Update_Channels_Array>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <process_controller_channel_update+0x1a>
		SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_ANALYSIS, TASK_MODE_EVENT);
 8002596:	2102      	movs	r1, #2
 8002598:	200a      	movs	r0, #10
 800259a:	f7ff fdf5 	bl	8002188 <SCHEDULER_task_set_mode>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <process_controller_channel_analysis>:

void process_controller_channel_analysis(uint32_t current_time_us){
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
	CONTROLLER_Update_Channels_Analysis();
 80025ae:	f000 f947 	bl	8002840 <CONTROLLER_Update_Channels_Analysis>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <process_motor_update>:

void process_motor_update(uint32_t current_time_us){
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
//	sys->propulsion.duty[0] = sys->radio.controller.channels[2]-1000;
//	sys->propulsion.duty[1] = sys->radio.controller.channels[2]-1000;
//	sys->propulsion.duty[2] = sys->radio.controller.channels[2]-1000;
//	sys->propulsion.duty[3] = sys->radio.controller.channels[2]-1000;
//	MOTORS_Change_output(&sys->propulsion.motors);
	FLIGHT_MODE_Main();
 80025c2:	f7fe feeb 	bl	800139c <FLIGHT_MODE_Main>

}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <TASK_get_task>:
	[TASK_CONTROLLER_CHANNEL_UPDATE] = 		DEFINE_TASK(TASK_CONTROLLER_CHANNEL_UPDATE, 	PRIORITY_MEDIUM,	process_controller_channel_update, 	PERIOD_US_FROM_HERTZ(1), 	TASK_MODE_EVENT),
	[TASK_CONTROLLER_CHANNEL_ANALYSIS] = 	DEFINE_TASK(TASK_CONTROLLER_CHANNEL_ANALYSIS, 	PRIORITY_MEDIUM,	process_controller_channel_analysis, 	PERIOD_US_FROM_HERTZ(1), 	TASK_MODE_EVENT),
};


task_t * TASK_get_task(task_ids_t id){
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	22d0      	movs	r2, #208	; 0xd0
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <TASK_get_task+0x24>)
 80025e4:	4413      	add	r3, r2
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	200005c4 	.word	0x200005c4

080025f8 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025fe:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8002600:	f002 fc3c 	bl	8004e7c <HAL_GetTick>
 8002604:	4603      	mov	r3, r0
 8002606:	3301      	adds	r3, #1
 8002608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800260c:	fb02 f203 	mul.w	r2, r2, r3
 8002610:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <TIME_us+0x50>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	490d      	ldr	r1, [pc, #52]	; (800264c <TIME_us+0x54>)
 8002618:	fba1 1303 	umull	r1, r3, r1, r3
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8002622:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s ait pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us >= t_us)
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <TIME_us+0x58>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d803      	bhi.n	8002636 <TIME_us+0x3e>
		t_us += 1000;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002634:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 8002636:	4a06      	ldr	r2, [pc, #24]	; (8002650 <TIME_us+0x58>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6013      	str	r3, [r2, #0]

	return t_us;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010
 800264c:	18618619 	.word	0x18618619
 8002650:	20001298 	.word	0x20001298

08002654 <PROPULSION_Init>:
#define ROLL prop->consigne[PROP_CONSIGNE_ROLL]
#define PITCH prop->consigne[PROP_CONSIGNE_PITCH]
#define YAW prop->consigne[PROP_CONSIGNE_YAW]
#define THRUST prop->consigne[PROP_CONSIGNE_THRUST]

void PROPULSION_Init(propulsion_t * prop_, TIM_HandleTypeDef * htim){
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
	prop = prop_;
 800265e:	4a09      	ldr	r2, [pc, #36]	; (8002684 <PROPULSION_Init+0x30>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6013      	str	r3, [r2, #0]

	MOTORS_Init(&prop->motors, htim, prop->motors_outputs, TRUE);
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <PROPULSION_Init+0x30>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <PROPULSION_Init+0x30>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f103 0218 	add.w	r2, r3, #24
 8002672:	2301      	movs	r3, #1
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	f007 fb35 	bl	8009ce4 <MOTORS_Init>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000129c 	.word	0x2000129c

08002688 <PROPULSION_Update_Motors>:

void PROPULSION_Update_Motors(void){
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0

	//Mixage des sorties
	int16_t m1 = THRUST + PITCH + ROLL - YAW;
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002696:	b29a      	uxth	r2, r3
 8002698:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	80fb      	strh	r3, [r7, #6]
	int16_t m2 = THRUST + PITCH - ROLL + YAW ;
 80026c4:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4413      	add	r3, r2
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	4b35      	ldr	r3, [pc, #212]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	80bb      	strh	r3, [r7, #4]
	int16_t m3 = THRUST - PITCH - ROLL - YAW ;
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800270c:	b29b      	uxth	r3, r3
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	b29a      	uxth	r2, r3
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800271a:	b29b      	uxth	r3, r3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002728:	b29b      	uxth	r3, r3
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	b29b      	uxth	r3, r3
 800272e:	807b      	strh	r3, [r7, #2]
	int16_t m4 = THRUST - PITCH + ROLL + YAW ;
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002742:	b29b      	uxth	r3, r3
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	b29a      	uxth	r2, r3
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002750:	b29b      	uxth	r3, r3
 8002752:	4413      	add	r3, r2
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800275e:	b29b      	uxth	r3, r3
 8002760:	4413      	add	r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	803b      	strh	r3, [r7, #0]
	prop->motors_outputs[MOTOR_FL] = (uint16_t)((m1 > 0) ? m1 : 0);
 8002766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800276a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800276e:	b21a      	sxth	r2, r3
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b292      	uxth	r2, r2
 8002776:	831a      	strh	r2, [r3, #24]
	prop->motors_outputs[MOTOR_FR] = (uint16_t)((m2 > 0) ? m2 : 0);
 8002778:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800277c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002780:	b21a      	sxth	r2, r3
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b292      	uxth	r2, r2
 8002788:	835a      	strh	r2, [r3, #26]
	prop->motors_outputs[MOTOR_BR] = (uint16_t)((m3 > 0) ? m3 : 0);
 800278a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800278e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002792:	b21a      	sxth	r2, r3
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	b292      	uxth	r2, r2
 800279a:	839a      	strh	r2, [r3, #28]
	prop->motors_outputs[MOTOR_BL] = (uint16_t)((m4 > 0) ? m4 : 0);
 800279c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80027a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b292      	uxth	r2, r2
 80027ac:	83da      	strh	r2, [r3, #30]
	MOTORS_Change_output(&prop->motors);
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <PROPULSION_Update_Motors+0x138>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f007 facd 	bl	8009d52 <MOTORS_Change_output>

}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	2000129c 	.word	0x2000129c

080027c4 <CONTROLLER_Init>:
//Controller used
static controller_t * controller ;
//Private functions prototypes
static void flag_process();

void CONTROLLER_Init(controller_t * controller_, ibus_t * ibus){
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
	//Sauvegarde la structure utilsié
	controller = controller_ ;
 80027ce:	4a1b      	ldr	r2, [pc, #108]	; (800283c <CONTROLLER_Init+0x78>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6013      	str	r3, [r2, #0]
	controller->channels = ibus->channels ;
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <CONTROLLER_Init+0x78>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	321a      	adds	r2, #26
 80027dc:	601a      	str	r2, [r3, #0]

	//Configuration du mode d'analyse pour les channels
	controller->analysis_mode[0] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <CONTROLLER_Init+0x78>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	711a      	strb	r2, [r3, #4]
	controller->analysis_mode[1] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <CONTROLLER_Init+0x78>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2201      	movs	r2, #1
 80027ec:	715a      	strb	r2, [r3, #5]
	controller->analysis_mode[2] = ANALYSIS_MODE_STICK_LVL ;
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <CONTROLLER_Init+0x78>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2202      	movs	r2, #2
 80027f4:	719a      	strb	r2, [r3, #6]
	controller->analysis_mode[3] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <CONTROLLER_Init+0x78>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	71da      	strb	r2, [r3, #7]
	controller->analysis_mode[4] = ANALYSIS_MODE_SWITCH_MODE ;
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <CONTROLLER_Init+0x78>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2204      	movs	r2, #4
 8002804:	721a      	strb	r2, [r3, #8]
	controller->analysis_mode[5] = ANALYSIS_MODE_SWITCH_MODE ;
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <CONTROLLER_Init+0x78>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2204      	movs	r2, #4
 800280c:	725a      	strb	r2, [r3, #9]
	controller->analysis_mode[6] = ANALYSIS_MODE_SWITCH_MODE ;
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <CONTROLLER_Init+0x78>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2204      	movs	r2, #4
 8002814:	729a      	strb	r2, [r3, #10]
	controller->analysis_mode[7] = ANALYSIS_MODE_SWITCH_MODE ;
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <CONTROLLER_Init+0x78>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2204      	movs	r2, #4
 800281c:	72da      	strb	r2, [r3, #11]
	controller->analysis_mode[8] = ANALYSIS_MODE_BUTTON_PUSH ;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <CONTROLLER_Init+0x78>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2206      	movs	r2, #6
 8002824:	731a      	strb	r2, [r3, #12]
	controller->analysis_mode[9] = ANALYSIS_MODE_BUTTON_ON_OFF ;
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <CONTROLLER_Init+0x78>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2205      	movs	r2, #5
 800282c:	735a      	strb	r2, [r3, #13]

}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	200012a0 	.word	0x200012a0

08002840 <CONTROLLER_Update_Channels_Analysis>:

void CONTROLLER_Update_Channels_Analysis(void){
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
	//Analyse des channels
		bool_e button_state ;
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8002846:	2300      	movs	r3, #0
 8002848:	71fb      	strb	r3, [r7, #7]
 800284a:	e19e      	b.n	8002b8a <CONTROLLER_Update_Channels_Analysis+0x34a>
			switch (controller->analysis_mode[ch]) {
 800284c:	4bab      	ldr	r3, [pc, #684]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	4413      	add	r3, r2
 8002856:	791b      	ldrb	r3, [r3, #4]
 8002858:	2b06      	cmp	r3, #6
 800285a:	f200 818b 	bhi.w	8002b74 <CONTROLLER_Update_Channels_Analysis+0x334>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <CONTROLLER_Update_Channels_Analysis+0x24>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002b75 	.word	0x08002b75
 8002868:	08002881 	.word	0x08002881
 800286c:	080028cd 	.word	0x080028cd
 8002870:	08002b75 	.word	0x08002b75
 8002874:	08002ad5 	.word	0x08002ad5
 8002878:	08002991 	.word	0x08002991
 800287c:	08002a45 	.word	0x08002a45
				case ANALYSIS_MODE_NONE:
					//On fait R
					break;

				case ANALYSIS_MODE_STICK_DEAD_BAND :
					if(abs(controller->channels[ch] - 1500) < JOYCTICK_DEAD_BAND)
 8002880:	4b9e      	ldr	r3, [pc, #632]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8002894:	f113 0f1d 	cmn.w	r3, #29
 8002898:	f2c0 816e 	blt.w	8002b78 <CONTROLLER_Update_Channels_Analysis+0x338>
 800289c:	4b97      	ldr	r3, [pc, #604]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80028b0:	2b1d      	cmp	r3, #29
 80028b2:	f300 8161 	bgt.w	8002b78 <CONTROLLER_Update_Channels_Analysis+0x338>
						controller->channels[ch] = 1500 ;
 80028b6:	4b91      	ldr	r3, [pc, #580]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80028c8:	801a      	strh	r2, [r3, #0]
					break;
 80028ca:	e155      	b.n	8002b78 <CONTROLLER_Update_Channels_Analysis+0x338>

				case ANALYSIS_MODE_STICK_LVL :
					if(controller->channels[ch] > 1000 && controller->channels[ch] <= 1070)
 80028cc:	4b8b      	ldr	r3, [pc, #556]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e0:	d914      	bls.n	800290c <CONTROLLER_Update_Channels_Analysis+0xcc>
 80028e2:	4b86      	ldr	r3, [pc, #536]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	f240 422e 	movw	r2, #1070	; 0x42e
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d808      	bhi.n	800290c <CONTROLLER_Update_Channels_Analysis+0xcc>
						controller->throttle_lvl[ch] = THROTTLE_LVL_NULL ;
 80028fa:	4b80      	ldr	r3, [pc, #512]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	4413      	add	r3, r2
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2020 	strb.w	r2, [r3, #32]
 800290a:	e040      	b.n	800298e <CONTROLLER_Update_Channels_Analysis+0x14e>
					else if(controller->channels[ch] > 1070 && controller->channels[ch] <= 1120)
 800290c:	4b7b      	ldr	r3, [pc, #492]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	f240 422e 	movw	r2, #1070	; 0x42e
 8002920:	4293      	cmp	r3, r2
 8002922:	d913      	bls.n	800294c <CONTROLLER_Update_Channels_Analysis+0x10c>
 8002924:	4b75      	ldr	r3, [pc, #468]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8002938:	d808      	bhi.n	800294c <CONTROLLER_Update_Channels_Analysis+0x10c>
						controller->throttle_lvl[ch] = THROTTLE_LVL_LOW ;
 800293a:	4b70      	ldr	r3, [pc, #448]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	4413      	add	r3, r2
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2020 	strb.w	r2, [r3, #32]
 800294a:	e020      	b.n	800298e <CONTROLLER_Update_Channels_Analysis+0x14e>
					else if(controller->channels[ch] > 1120 && controller->channels[ch] < 2000)
 800294c:	4b6b      	ldr	r3, [pc, #428]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8002960:	f240 810c 	bls.w	8002b7c <CONTROLLER_Update_Channels_Analysis+0x33c>
 8002964:	4b65      	ldr	r3, [pc, #404]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002978:	f080 8100 	bcs.w	8002b7c <CONTROLLER_Update_Channels_Analysis+0x33c>
						controller->throttle_lvl[ch] = THROTTLE_LVL_HIGH ;
 800297c:	4b5f      	ldr	r3, [pc, #380]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	4413      	add	r3, r2
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2020 	strb.w	r2, [r3, #32]


					break;
 800298c:	e0f6      	b.n	8002b7c <CONTROLLER_Update_Channels_Analysis+0x33c>
 800298e:	e0f5      	b.n	8002b7c <CONTROLLER_Update_Channels_Analysis+0x33c>

				case ANALYSIS_MODE_BUTTON_ON_OFF :
					//Active le boutton dans le code
					if(!controller->button_on_off[ch])
 8002990:	4b5a      	ldr	r3, [pc, #360]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	4413      	add	r3, r2
 800299a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <CONTROLLER_Update_Channels_Analysis+0x172>
						controller->button_on_off[ch] = BUTTON_OFF ;
 80029a2:	4b56      	ldr	r3, [pc, #344]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	4413      	add	r3, r2
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 80029b2:	4b52      	ldr	r3, [pc, #328]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80029c6:	4293      	cmp	r3, r2
 80029c8:	bf8c      	ite	hi
 80029ca:	2301      	movhi	r3, #1
 80029cc:	2300      	movls	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 80029d2:	4b4a      	ldr	r3, [pc, #296]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	4413      	add	r3, r2
 80029dc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80029e0:	461a      	mov	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <CONTROLLER_Update_Channels_Analysis+0x1ee>
 80029e8:	4b44      	ldr	r3, [pc, #272]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	4413      	add	r3, r2
 80029f2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d119      	bne.n	8002a2e <CONTROLLER_Update_Channels_Analysis+0x1ee>
						if(controller->button_on_off[ch] == BUTTON_ON)
 80029fa:	4b40      	ldr	r3, [pc, #256]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	4413      	add	r3, r2
 8002a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d108      	bne.n	8002a1e <CONTROLLER_Update_Channels_Analysis+0x1de>
							controller->button_on_off[ch] = BUTTON_OFF ;
 8002a0c:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4413      	add	r3, r2
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a1c:	e007      	b.n	8002a2e <CONTROLLER_Update_Channels_Analysis+0x1ee>
						else
							controller->button_on_off[ch] = BUTTON_ON ;
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	4413      	add	r3, r2
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}

					controller->button_state[ch] = button_state ;
 8002a2e:	4b33      	ldr	r3, [pc, #204]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	6839      	ldr	r1, [r7, #0]
 8002a38:	b2c9      	uxtb	r1, r1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	460a      	mov	r2, r1
 8002a3e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8002a42:	e09c      	b.n	8002b7e <CONTROLLER_Update_Channels_Analysis+0x33e>

				case ANALYSIS_MODE_BUTTON_PUSH :
					//Active le boutton dans le code
					if(!controller->button_pushed[ch])
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d107      	bne.n	8002a66 <CONTROLLER_Update_Channels_Analysis+0x226>
						controller->button_pushed[ch] = BUTTON_PUSHED_NO_REQUEST ;
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	4413      	add	r3, r2
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8002a66:	4b25      	ldr	r3, [pc, #148]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	bf8c      	ite	hi
 8002a7e:	2301      	movhi	r3, #1
 8002a80:	2300      	movls	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002a94:	461a      	mov	r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d010      	beq.n	8002abe <CONTROLLER_Update_Channels_Analysis+0x27e>
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d107      	bne.n	8002abe <CONTROLLER_Update_Channels_Analysis+0x27e>
						controller->button_pushed[ch] = BUTTON_PUSHED_REQUEST ;
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					}

					controller->button_state[ch] = button_state ;
 8002abe:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	b2c9      	uxtb	r1, r1
 8002aca:	4413      	add	r3, r2
 8002acc:	460a      	mov	r2, r1
 8002ace:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8002ad2:	e054      	b.n	8002b7e <CONTROLLER_Update_Channels_Analysis+0x33e>
				case ANALYSIS_MODE_SEQUENCE:
					//todo analyse de séquences sur les switchs
					break;

				case ANALYSIS_MODE_SWITCH_MODE:
					if(controller->channels[ch] < 1300)
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	f240 5213 	movw	r2, #1299	; 0x513
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d809      	bhi.n	8002b00 <CONTROLLER_Update_Channels_Analysis+0x2c0>
						controller->switch_pos[ch] = SWITCH_POS_1 ;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <CONTROLLER_Update_Channels_Analysis+0x2bc>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af4:	4413      	add	r3, r2
 8002af6:	2200      	movs	r2, #0
 8002af8:	749a      	strb	r2, [r3, #18]
						controller->switch_pos[ch] = SWITCH_POS_2 ;
					else if(controller->channels[ch] > 1600)
						controller->switch_pos[ch] = SWITCH_POS_3 ;
					else
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
					break;
 8002afa:	e040      	b.n	8002b7e <CONTROLLER_Update_Channels_Analysis+0x33e>
 8002afc:	200012a0 	.word	0x200012a0
					else if(controller->channels[ch] > 1300 && controller->channels[ch] < 1600)
 8002b00:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <CONTROLLER_Update_Channels_Analysis+0x360>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	f240 5214 	movw	r2, #1300	; 0x514
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d912      	bls.n	8002b3e <CONTROLLER_Update_Channels_Analysis+0x2fe>
 8002b18:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <CONTROLLER_Update_Channels_Analysis+0x360>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002b2c:	d207      	bcs.n	8002b3e <CONTROLLER_Update_Channels_Analysis+0x2fe>
						controller->switch_pos[ch] = SWITCH_POS_2 ;
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <CONTROLLER_Update_Channels_Analysis+0x360>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	4413      	add	r3, r2
 8002b38:	2201      	movs	r2, #1
 8002b3a:	749a      	strb	r2, [r3, #18]
					break;
 8002b3c:	e01f      	b.n	8002b7e <CONTROLLER_Update_Channels_Analysis+0x33e>
					else if(controller->channels[ch] > 1600)
 8002b3e:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <CONTROLLER_Update_Channels_Analysis+0x360>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002b52:	d907      	bls.n	8002b64 <CONTROLLER_Update_Channels_Analysis+0x324>
						controller->switch_pos[ch] = SWITCH_POS_3 ;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <CONTROLLER_Update_Channels_Analysis+0x360>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	2202      	movs	r2, #2
 8002b60:	749a      	strb	r2, [r3, #18]
					break;
 8002b62:	e00c      	b.n	8002b7e <CONTROLLER_Update_Channels_Analysis+0x33e>
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <CONTROLLER_Update_Channels_Analysis+0x360>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	2203      	movs	r2, #3
 8002b70:	749a      	strb	r2, [r3, #18]
					break;
 8002b72:	e004      	b.n	8002b7e <CONTROLLER_Update_Channels_Analysis+0x33e>
				default:
					break;
 8002b74:	bf00      	nop
 8002b76:	e002      	b.n	8002b7e <CONTROLLER_Update_Channels_Analysis+0x33e>
					break;
 8002b78:	bf00      	nop
 8002b7a:	e000      	b.n	8002b7e <CONTROLLER_Update_Channels_Analysis+0x33e>
					break;
 8002b7c:	bf00      	nop
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	71fb      	strb	r3, [r7, #7]
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	f77f ae5c 	ble.w	800284c <CONTROLLER_Update_Channels_Analysis+0xc>
			}
		}

		flag_process();
 8002b94:	f000 f806 	bl	8002ba4 <flag_process>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	200012a0 	.word	0x200012a0

08002ba4 <flag_process>:

static void flag_process()
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	//Throttle lvl
	switch(controller->throttle_lvl[2]){
 8002ba8:	4b62      	ldr	r3, [pc, #392]	; (8002d34 <flag_process+0x190>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d00d      	beq.n	8002bd0 <flag_process+0x2c>
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d015      	beq.n	8002be4 <flag_process+0x40>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11d      	bne.n	8002bf8 <flag_process+0x54>
		case THROTTLE_LVL_NULL :
			EVENT_Set_flag(FLAG_THROTTLE_NULL);
 8002bbc:	2017      	movs	r0, #23
 8002bbe:	f7fe ff1b 	bl	80019f8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8002bc2:	2016      	movs	r0, #22
 8002bc4:	f7fe ff30 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8002bc8:	2015      	movs	r0, #21
 8002bca:	f7fe ff2d 	bl	8001a28 <EVENT_Clean_flag>
			break;
 8002bce:	e013      	b.n	8002bf8 <flag_process+0x54>
		case THROTTLE_LVL_LOW :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8002bd0:	2017      	movs	r0, #23
 8002bd2:	f7fe ff29 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_LOW);
 8002bd6:	2016      	movs	r0, #22
 8002bd8:	f7fe ff0e 	bl	80019f8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8002bdc:	2015      	movs	r0, #21
 8002bde:	f7fe ff23 	bl	8001a28 <EVENT_Clean_flag>
			break;
 8002be2:	e009      	b.n	8002bf8 <flag_process+0x54>
		case THROTTLE_LVL_HIGH :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8002be4:	2017      	movs	r0, #23
 8002be6:	f7fe ff1f 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8002bea:	2016      	movs	r0, #22
 8002bec:	f7fe ff1c 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_HIGH);
 8002bf0:	2015      	movs	r0, #21
 8002bf2:	f7fe ff01 	bl	80019f8 <EVENT_Set_flag>
			break;
 8002bf6:	bf00      	nop
	}

	//Switch 1 (ch5 soit ch[4])
	if(controller->switch_pos[4] == SWITCH_POS_1){
 8002bf8:	4b4e      	ldr	r3, [pc, #312]	; (8002d34 <flag_process+0x190>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	7d9b      	ldrb	r3, [r3, #22]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <flag_process+0x6c>
		EVENT_Set_flag(FLAG_CHAN_5_POS_1);
 8002c02:	2009      	movs	r0, #9
 8002c04:	f7fe fef8 	bl	80019f8 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_5_POS_3);
 8002c08:	200a      	movs	r0, #10
 8002c0a:	f7fe ff0d 	bl	8001a28 <EVENT_Clean_flag>
 8002c0e:	e005      	b.n	8002c1c <flag_process+0x78>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_5_POS_1);
 8002c10:	2009      	movs	r0, #9
 8002c12:	f7fe ff09 	bl	8001a28 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_5_POS_3);
 8002c16:	200a      	movs	r0, #10
 8002c18:	f7fe feee 	bl	80019f8 <EVENT_Set_flag>
	}
	//Switch 2(ch6 soit ch[5])
	switch(controller->switch_pos[5]){
 8002c1c:	4b45      	ldr	r3, [pc, #276]	; (8002d34 <flag_process+0x190>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	7ddb      	ldrb	r3, [r3, #23]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d828      	bhi.n	8002c78 <flag_process+0xd4>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <flag_process+0x88>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c51 	.word	0x08002c51
 8002c34:	08002c65 	.word	0x08002c65
 8002c38:	08002c79 	.word	0x08002c79
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_6_POS_1);
 8002c3c:	200b      	movs	r0, #11
 8002c3e:	f7fe fedb 	bl	80019f8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8002c42:	200c      	movs	r0, #12
 8002c44:	f7fe fef0 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8002c48:	200d      	movs	r0, #13
 8002c4a:	f7fe feed 	bl	8001a28 <EVENT_Clean_flag>
			break;
 8002c4e:	e013      	b.n	8002c78 <flag_process+0xd4>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8002c50:	200b      	movs	r0, #11
 8002c52:	f7fe fee9 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_2);
 8002c56:	200c      	movs	r0, #12
 8002c58:	f7fe fece 	bl	80019f8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8002c5c:	200d      	movs	r0, #13
 8002c5e:	f7fe fee3 	bl	8001a28 <EVENT_Clean_flag>
			break;
 8002c62:	e009      	b.n	8002c78 <flag_process+0xd4>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8002c64:	200b      	movs	r0, #11
 8002c66:	f7fe fedf 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8002c6a:	200c      	movs	r0, #12
 8002c6c:	f7fe fedc 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_3);
 8002c70:	200d      	movs	r0, #13
 8002c72:	f7fe fec1 	bl	80019f8 <EVENT_Set_flag>
			break;
 8002c76:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 3(ch7 soit ch[6])
	switch(controller->switch_pos[6]){
 8002c78:	4b2e      	ldr	r3, [pc, #184]	; (8002d34 <flag_process+0x190>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	7e1b      	ldrb	r3, [r3, #24]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d828      	bhi.n	8002cd4 <flag_process+0x130>
 8002c82:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <flag_process+0xe4>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002c99 	.word	0x08002c99
 8002c8c:	08002cad 	.word	0x08002cad
 8002c90:	08002cc1 	.word	0x08002cc1
 8002c94:	08002cd5 	.word	0x08002cd5
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_7_POS_1);
 8002c98:	200e      	movs	r0, #14
 8002c9a:	f7fe fead 	bl	80019f8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8002c9e:	200f      	movs	r0, #15
 8002ca0:	f7fe fec2 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8002ca4:	2010      	movs	r0, #16
 8002ca6:	f7fe febf 	bl	8001a28 <EVENT_Clean_flag>
			break;
 8002caa:	e013      	b.n	8002cd4 <flag_process+0x130>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8002cac:	200e      	movs	r0, #14
 8002cae:	f7fe febb 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_2);
 8002cb2:	200f      	movs	r0, #15
 8002cb4:	f7fe fea0 	bl	80019f8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8002cb8:	2010      	movs	r0, #16
 8002cba:	f7fe feb5 	bl	8001a28 <EVENT_Clean_flag>
			break;
 8002cbe:	e009      	b.n	8002cd4 <flag_process+0x130>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8002cc0:	200e      	movs	r0, #14
 8002cc2:	f7fe feb1 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8002cc6:	200f      	movs	r0, #15
 8002cc8:	f7fe feae 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_3);
 8002ccc:	2010      	movs	r0, #16
 8002cce:	f7fe fe93 	bl	80019f8 <EVENT_Set_flag>
			break;
 8002cd2:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 4 (ch8 soit ch[7])
	if(controller->switch_pos[7] == SWITCH_POS_1){
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <flag_process+0x190>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	7e5b      	ldrb	r3, [r3, #25]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <flag_process+0x148>
		EVENT_Set_flag(FLAG_CHAN_8_POS_1);
 8002cde:	2011      	movs	r0, #17
 8002ce0:	f7fe fe8a 	bl	80019f8 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_8_POS_3);
 8002ce4:	2012      	movs	r0, #18
 8002ce6:	f7fe fe9f 	bl	8001a28 <EVENT_Clean_flag>
 8002cea:	e005      	b.n	8002cf8 <flag_process+0x154>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_8_POS_1);
 8002cec:	2011      	movs	r0, #17
 8002cee:	f7fe fe9b 	bl	8001a28 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_8_POS_3);
 8002cf2:	2012      	movs	r0, #18
 8002cf4:	f7fe fe80 	bl	80019f8 <EVENT_Set_flag>
	}

	//Button 1 (ch9 soit ch[8]) en mode push
	if(controller->button_pushed[8] == BUTTON_PUSHED_REQUEST){
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <flag_process+0x190>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d107      	bne.n	8002d14 <flag_process+0x170>
		EVENT_Set_flag(FLAG_CHAN_9_PUSH);
 8002d04:	2013      	movs	r0, #19
 8002d06:	f7fe fe77 	bl	80019f8 <EVENT_Set_flag>
		controller->button_pushed[8] = BUTTON_PUSHED_NO_REQUEST ;
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <flag_process+0x190>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	//Button 2 (ch10 soit ch[9]) en mode on/off
	if(controller->button_on_off[9] == BUTTON_ON)
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <flag_process+0x190>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d103      	bne.n	8002d28 <flag_process+0x184>
		EVENT_Set_flag(FLAG_CHAN_10_ON);
 8002d20:	2014      	movs	r0, #20
 8002d22:	f7fe fe69 	bl	80019f8 <EVENT_Set_flag>
	else
		EVENT_Clean_flag(FLAG_CHAN_10_ON);



}
 8002d26:	e002      	b.n	8002d2e <flag_process+0x18a>
		EVENT_Clean_flag(FLAG_CHAN_10_ON);
 8002d28:	2014      	movs	r0, #20
 8002d2a:	f7fe fe7d 	bl	8001a28 <EVENT_Clean_flag>
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200012a0 	.word	0x200012a0

08002d38 <CONTROLLER_Update_Channels_Array>:

bool_e CONTROLLER_Update_Channels_Array(void){
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
	//Utilisation de l'ibus atm
	return IBUS_Channel_Update();
 8002d3c:	f006 fe4a 	bl	80099d4 <IBUS_Channel_Update>
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <CONTROLLER_Rx_Data_Rdy>:

void CONTROLLER_Rx_Data_Rdy(void){
 8002d46:	b580      	push	{r7, lr}
 8002d48:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_IBUS_DATA_RDY);
 8002d4a:	2008      	movs	r0, #8
 8002d4c:	f7fe fe54 	bl	80019f8 <EVENT_Set_flag>
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <REGULATION_ORIENTATION_Init>:
float pid_velocity_settings_yaw[PID_NB_SETTINGS] = {0.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 200};


//	------------------------------	Angular Pos Regulation settings	-----------------------------------------

void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
	orientation = orientation_ ;
 8002d60:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <REGULATION_ORIENTATION_Init+0x68>)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_ ;
 8002d66:	4a16      	ldr	r2, [pc, #88]	; (8002dc0 <REGULATION_ORIENTATION_Init+0x6c>)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6013      	str	r3, [r2, #0]
	regu_orientation->mode = REGULATION_ORIENTATION_MODE_OFF ;
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <REGULATION_ORIENTATION_Init+0x6c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2200      	movs	r2, #0
 8002d72:	711a      	strb	r2, [r3, #4]
	regu_orientation->outputs = output ;
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <REGULATION_ORIENTATION_Init+0x6c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	//Init PIDs angular speed
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], pid_velocity_settings_roll, FILTER_FIRST_ORDER, filter_pid_velocity_roll_pitch);
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <REGULATION_ORIENTATION_Init+0x6c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f103 0008 	add.w	r0, r3, #8
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <REGULATION_ORIENTATION_Init+0x70>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	490f      	ldr	r1, [pc, #60]	; (8002dc8 <REGULATION_ORIENTATION_Init+0x74>)
 8002d8c:	f007 f8e4 	bl	8009f58 <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], pid_velocity_settings_pitch, FILTER_FIRST_ORDER, filter_pid_velocity_roll_pitch);
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <REGULATION_ORIENTATION_Init+0x6c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <REGULATION_ORIENTATION_Init+0x70>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	490b      	ldr	r1, [pc, #44]	; (8002dcc <REGULATION_ORIENTATION_Init+0x78>)
 8002d9e:	f007 f8db 	bl	8009f58 <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], pid_velocity_settings_yaw, FILTER_FIRST_ORDER, filter_pid_velocity_yaw);
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <REGULATION_ORIENTATION_Init+0x6c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <REGULATION_ORIENTATION_Init+0x7c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	4909      	ldr	r1, [pc, #36]	; (8002dd4 <REGULATION_ORIENTATION_Init+0x80>)
 8002db0:	f007 f8d2 	bl	8009f58 <PID_init>



}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	200012a8 	.word	0x200012a8
 8002dc0:	200012a4 	.word	0x200012a4
 8002dc4:	20000f84 	.word	0x20000f84
 8002dc8:	20000f9c 	.word	0x20000f9c
 8002dcc:	20000fb0 	.word	0x20000fb0
 8002dd0:	20000f90 	.word	0x20000f90
 8002dd4:	20000fc4 	.word	0x20000fc4

08002dd8 <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_orientation_mode_e regu_mode){
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
	regu_orientation->mode = regu_mode;
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <REGULATION_ORIENTATION_Set_Regulation_Mode+0x20>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	79fa      	ldrb	r2, [r7, #7]
 8002de8:	711a      	strb	r2, [r3, #4]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	200012a4 	.word	0x200012a4

08002dfc <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0

	switch(regu_orientation->mode){
 8002e00:	4b38      	ldr	r3, [pc, #224]	; (8002ee4 <REGULATION_ORIENTATION_Process+0xe8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	791b      	ldrb	r3, [r3, #4]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d003      	beq.n	8002e12 <REGULATION_ORIENTATION_Process+0x16>
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d066      	beq.n	8002edc <REGULATION_ORIENTATION_Process+0xe0>
 8002e0e:	2b00      	cmp	r3, #0
		case REGULATION_ORIENTATION_MODE_OFF:
			//Set motors low
			break;
 8002e10:	e065      	b.n	8002ede <REGULATION_ORIENTATION_Process+0xe2>
		case REGULATION_ORIENTATION_MODE_ACCRO:
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 8002e12:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <REGULATION_ORIENTATION_Process+0xe8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f103 0208 	add.w	r2, r3, #8
 8002e1a:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <REGULATION_ORIENTATION_Process+0xe8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8002e22:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <REGULATION_ORIENTATION_Process+0xec>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	ed93 7a00 	vldr	s14, [r3]
 8002e2c:	eef0 0a47 	vmov.f32	s1, s14
 8002e30:	eeb0 0a67 	vmov.f32	s0, s15
 8002e34:	4610      	mov	r0, r2
 8002e36:	f006 fff3 	bl	8009e20 <PID_compute>
 8002e3a:	eef0 7a40 	vmov.f32	s15, s0
 8002e3e:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <REGULATION_ORIENTATION_Process+0xe8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e4a:	ee17 2a90 	vmov	r2, s15
 8002e4e:	b212      	sxth	r2, r2
 8002e50:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <REGULATION_ORIENTATION_Process+0xe8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <REGULATION_ORIENTATION_Process+0xe8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <REGULATION_ORIENTATION_Process+0xec>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	ed93 7a00 	vldr	s14, [r3]
 8002e6e:	eef0 0a47 	vmov.f32	s1, s14
 8002e72:	eeb0 0a67 	vmov.f32	s0, s15
 8002e76:	4610      	mov	r0, r2
 8002e78:	f006 ffd2 	bl	8009e20 <PID_compute>
 8002e7c:	eef0 7a40 	vmov.f32	s15, s0
 8002e80:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <REGULATION_ORIENTATION_Process+0xe8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002e88:	3302      	adds	r3, #2
 8002e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e8e:	ee17 2a90 	vmov	r2, s15
 8002e92:	b212      	sxth	r2, r2
 8002e94:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <REGULATION_ORIENTATION_Process+0xe8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <REGULATION_ORIENTATION_Process+0xe8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <REGULATION_ORIENTATION_Process+0xec>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	3308      	adds	r3, #8
 8002eae:	ed93 7a00 	vldr	s14, [r3]
 8002eb2:	eef0 0a47 	vmov.f32	s1, s14
 8002eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f006 ffb0 	bl	8009e20 <PID_compute>
 8002ec0:	eef0 7a40 	vmov.f32	s15, s0
 8002ec4:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <REGULATION_ORIENTATION_Process+0xe8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002ecc:	3304      	adds	r3, #4
 8002ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ed2:	ee17 2a90 	vmov	r2, s15
 8002ed6:	b212      	sxth	r2, r2
 8002ed8:	801a      	strh	r2, [r3, #0]
			break;
 8002eda:	e000      	b.n	8002ede <REGULATION_ORIENTATION_Process+0xe2>
		case REGULATION_ORIENTATION_MODE_ANGLE:
			break;
 8002edc:	bf00      	nop
	}

}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200012a4 	.word	0x200012a4
 8002ee8:	200012a8 	.word	0x200012a8

08002eec <ACC_init>:

static void acc_data_callback(void);

float filter_config [3] = {0.1f, 0.9f, 0};

void ACC_init(acc_t * acc, mpu_t * mpu){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]

	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_FIRST_ORDER);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	2200      	movs	r2, #0
 8002efc:	491a      	ldr	r1, [pc, #104]	; (8002f68 <ACC_init+0x7c>)
 8002efe:	4618      	mov	r0, r3
 8002f00:	f006 fc66 	bl	80097d0 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_FIRST_ORDER);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3330      	adds	r3, #48	; 0x30
 8002f08:	2200      	movs	r2, #0
 8002f0a:	4917      	ldr	r1, [pc, #92]	; (8002f68 <ACC_init+0x7c>)
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f006 fc5f 	bl	80097d0 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_FIRST_ORDER);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	334c      	adds	r3, #76	; 0x4c
 8002f16:	2200      	movs	r2, #0
 8002f18:	4913      	ldr	r1, [pc, #76]	; (8002f68 <ACC_init+0x7c>)
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f006 fc58 	bl	80097d0 <FILTER_init>


	acc->mpu = mpu ;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	601a      	str	r2, [r3, #0]
	acc->raw = acc->mpu->acc ;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	605a      	str	r2, [r3, #4]

	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a0d      	ldr	r2, [pc, #52]	; (8002f6c <ACC_init+0x80>)
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fb20 	bl	8003580 <MPU_init_acc>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d008      	beq.n	8002f58 <ACC_init+0x6c>
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d008      	beq.n	8002f5c <ACC_init+0x70>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d000      	beq.n	8002f50 <ACC_init+0x64>
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}

}
 8002f4e:	e006      	b.n	8002f5e <ACC_init+0x72>
			EVENT_Set_flag(FLAG_ACC_OK);
 8002f50:	2004      	movs	r0, #4
 8002f52:	f7fe fd51 	bl	80019f8 <EVENT_Set_flag>
			break;
 8002f56:	e002      	b.n	8002f5e <ACC_init+0x72>
			break;
 8002f58:	bf00      	nop
 8002f5a:	e000      	b.n	8002f5e <ACC_init+0x72>
			break;
 8002f5c:	bf00      	nop
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000fd8 	.word	0x20000fd8
 8002f6c:	0800302d 	.word	0x0800302d

08002f70 <ACC_update>:

void ACC_update(acc_t * acc){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	switch(MPU_update_acc(acc->mpu)){
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fba3 	bl	80036c8 <MPU_update_acc>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d00c      	beq.n	8002fa2 <ACC_update+0x32>
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d006      	beq.n	8002f9a <ACC_update+0x2a>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d000      	beq.n	8002f92 <ACC_update+0x22>
			EVENT_Clean_flag(FLAG_ACC_OK);
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8002f90:	e008      	b.n	8002fa4 <ACC_update+0x34>
			EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8002f92:	2006      	movs	r0, #6
 8002f94:	f7fe fd30 	bl	80019f8 <EVENT_Set_flag>
			break;
 8002f98:	e004      	b.n	8002fa4 <ACC_update+0x34>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8002f9a:	2004      	movs	r0, #4
 8002f9c:	f7fe fd44 	bl	8001a28 <EVENT_Clean_flag>
			break;
 8002fa0:	e000      	b.n	8002fa4 <ACC_update+0x34>
			break;
 8002fa2:	bf00      	nop
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <ACC_process_lpf>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void ACC_process_lpf(acc_t * acc){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f103 0214 	add.w	r2, r3, #20
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f006 fc25 	bl	8009816 <FILTER_process>
 8002fcc:	eef0 7a40 	vmov.f32	s15, s0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fea:	4610      	mov	r0, r2
 8002fec:	f006 fc13 	bl	8009816 <FILTER_process>
 8002ff0:	eef0 7a40 	vmov.f32	s15, s0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	edc3 7a03 	vstr	s15, [r3, #12]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	3308      	adds	r3, #8
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	eeb0 0a67 	vmov.f32	s0, s15
 800300e:	4610      	mov	r0, r2
 8003010:	f006 fc01 	bl	8009816 <FILTER_process>
 8003014:	eef0 7a40 	vmov.f32	s15, s0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	edc3 7a04 	vstr	s15, [r3, #16]
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 800301e:	2007      	movs	r0, #7
 8003020:	f7fe fcea 	bl	80019f8 <EVENT_Set_flag>
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <acc_data_callback>:

static void acc_data_callback(void){
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8003030:	2006      	movs	r0, #6
 8003032:	f7fe fce1 	bl	80019f8 <EVENT_Set_flag>
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <GYRO_init>:

float filter[3] = {0.1f, 0.9f, 0};

static void gyro_data_callback(void);

void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]

	//Filters init
	FILTER_init(&gyro->filters[GYRO_AXE_X], filter, FILTER_FIRST_ORDER);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3314      	adds	r3, #20
 800304a:	2200      	movs	r2, #0
 800304c:	491a      	ldr	r1, [pc, #104]	; (80030b8 <GYRO_init+0x7c>)
 800304e:	4618      	mov	r0, r3
 8003050:	f006 fbbe 	bl	80097d0 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Y], filter, FILTER_FIRST_ORDER);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3330      	adds	r3, #48	; 0x30
 8003058:	2200      	movs	r2, #0
 800305a:	4917      	ldr	r1, [pc, #92]	; (80030b8 <GYRO_init+0x7c>)
 800305c:	4618      	mov	r0, r3
 800305e:	f006 fbb7 	bl	80097d0 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Z], filter, FILTER_FIRST_ORDER);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	334c      	adds	r3, #76	; 0x4c
 8003066:	2200      	movs	r2, #0
 8003068:	4913      	ldr	r1, [pc, #76]	; (80030b8 <GYRO_init+0x7c>)
 800306a:	4618      	mov	r0, r3
 800306c:	f006 fbb0 	bl	80097d0 <FILTER_init>

	gyro->mpu = mpu ;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	601a      	str	r2, [r3, #0]
	gyro->raw = gyro->mpu->gyro ;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	605a      	str	r2, [r3, #4]

	//Raise the flag "ok" if the gyro get succesfully initiated
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a0d      	ldr	r2, [pc, #52]	; (80030bc <GYRO_init+0x80>)
 8003088:	2103      	movs	r1, #3
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f9c8 	bl	8003420 <MPU_init_gyro>
 8003090:	4603      	mov	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	d008      	beq.n	80030a8 <GYRO_init+0x6c>
 8003096:	2b02      	cmp	r3, #2
 8003098:	d008      	beq.n	80030ac <GYRO_init+0x70>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d000      	beq.n	80030a0 <GYRO_init+0x64>
		case SENSOR_REQUEST_FAIL:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 800309e:	e006      	b.n	80030ae <GYRO_init+0x72>
			EVENT_Set_flag(FLAG_GYRO_OK);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7fe fca9 	bl	80019f8 <EVENT_Set_flag>
			break;
 80030a6:	e002      	b.n	80030ae <GYRO_init+0x72>
			break;
 80030a8:	bf00      	nop
 80030aa:	e000      	b.n	80030ae <GYRO_init+0x72>
			break;
 80030ac:	bf00      	nop
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000fe4 	.word	0x20000fe4
 80030bc:	08003179 	.word	0x08003179

080030c0 <GYRO_ACC_update_dma>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void GYRO_ACC_update_dma(gyro_t * gyro){
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	switch(MPU_update_all_dma(gyro->mpu)){
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fb3a 	bl	8003746 <MPU_update_all_dma>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d00a      	beq.n	80030ee <GYRO_ACC_update_dma+0x2e>
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d001      	beq.n	80030e0 <GYRO_ACC_update_dma+0x20>
 80030dc:	2b00      	cmp	r3, #0
		case SENSOR_REQUEST_OK:
			break;
 80030de:	e007      	b.n	80030f0 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_FAIL:
			EVENT_Clean_flag(FLAG_GYRO_OK);
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7fe fca1 	bl	8001a28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 80030e6:	2004      	movs	r0, #4
 80030e8:	f7fe fc9e 	bl	8001a28 <EVENT_Clean_flag>
			break;
 80030ec:	e000      	b.n	80030f0 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_BUSY:
			break;
 80030ee:	bf00      	nop
	}
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <GYRO_process_lpf>:

void GYRO_process_lpf(gyro_t * gyro){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	gyro->filtered[GYRO_AXE_X] =  FILTER_process(&gyro->filters[GYRO_AXE_X], gyro->raw[GYRO_AXE_X]);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f103 0214 	add.w	r2, r3, #20
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	eeb0 0a67 	vmov.f32	s0, s15
 8003112:	4610      	mov	r0, r2
 8003114:	f006 fb7f 	bl	8009816 <FILTER_process>
 8003118:	eef0 7a40 	vmov.f32	s15, s0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[GYRO_AXE_Y] =  FILTER_process(&gyro->filters[GYRO_AXE_Y], gyro->raw[GYRO_AXE_Y]);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	3304      	adds	r3, #4
 800312e:	edd3 7a00 	vldr	s15, [r3]
 8003132:	eeb0 0a67 	vmov.f32	s0, s15
 8003136:	4610      	mov	r0, r2
 8003138:	f006 fb6d 	bl	8009816 <FILTER_process>
 800313c:	eef0 7a40 	vmov.f32	s15, s0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro->filtered[GYRO_AXE_Z] =  FILTER_process(&gyro->filters[GYRO_AXE_Z], gyro->raw[GYRO_AXE_Z]);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	3308      	adds	r3, #8
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	eeb0 0a67 	vmov.f32	s0, s15
 800315a:	4610      	mov	r0, r2
 800315c:	f006 fb5b 	bl	8009816 <FILTER_process>
 8003160:	eef0 7a40 	vmov.f32	s15, s0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	edc3 7a04 	vstr	s15, [r3, #16]
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 800316a:	2003      	movs	r0, #3
 800316c:	f7fe fc44 	bl	80019f8 <EVENT_Set_flag>
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <gyro_data_callback>:

static void gyro_data_callback(void){
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 800317c:	2002      	movs	r0, #2
 800317e:	f7fe fc3b 	bl	80019f8 <EVENT_Set_flag>
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}

08003186 <convert_gyro>:
static void MPU_cs_lock(mpu_t * mpu);
static void MPU_cs_unlock(mpu_t * mpu);


//Private functions def
static void convert_gyro(mpu_t * mpu){
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	3301      	adds	r3, #1
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	b21a      	sxth	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b21b      	sxth	r3, r3
 80031a2:	4313      	orrs	r3, r2
 80031a4:	b21a      	sxth	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	3303      	adds	r3, #3
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	b21a      	sxth	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	3302      	adds	r3, #2
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	b21b      	sxth	r3, r3
 80031c0:	4313      	orrs	r3, r2
 80031c2:	b21a      	sxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	3305      	adds	r3, #5
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	b21a      	sxth	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	3304      	adds	r3, #4
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b21b      	sxth	r3, r3
 80031de:	4313      	orrs	r3, r2
 80031e0:	b21a      	sxth	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <convert_acc>:
static void convert_acc(mpu_t * mpu){
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	3301      	adds	r3, #1
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	b21a      	sxth	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	b21b      	sxth	r3, r3
 8003268:	4313      	orrs	r3, r2
 800326a:	b21a      	sxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	3303      	adds	r3, #3
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	b21a      	sxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	3302      	adds	r3, #2
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b21b      	sxth	r3, r3
 8003288:	4313      	orrs	r3, r2
 800328a:	b21a      	sxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	3305      	adds	r3, #5
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	b21a      	sxth	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	3304      	adds	r3, #4
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b21a      	sxth	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80032c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80032e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <MPU_cs_lock>:

static void MPU_cs_lock(mpu_t * mpu){
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6898      	ldr	r0, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	899b      	ldrh	r3, [r3, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	4619      	mov	r1, r3
 800332c:	f002 fe72 	bl	8006014 <HAL_GPIO_WritePin>
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <MPU_cs_unlock>:
static void MPU_cs_unlock(mpu_t * mpu){
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6898      	ldr	r0, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	899b      	ldrh	r3, [r3, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	4619      	mov	r1, r3
 800334c:	f002 fe62 	bl	8006014 <HAL_GPIO_WritePin>
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <MPU_init>:

/*
 *
 */
sensor_request_e MPU_init(mpu_t * mpu, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	807b      	strh	r3, [r7, #2]

	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	73da      	strb	r2, [r3, #15]

	//Définit d'après la doc pour les registres du mpu
	mpu->gyro_data = &mpu->data[8] ;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f103 021a 	add.w	r2, r3, #26
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	621a      	str	r2, [r3, #32]
	mpu->acc_data = &mpu->data[0] ;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f103 0212 	add.w	r2, r3, #18
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	645a      	str	r2, [r3, #68]	; 0x44


	//Requiert un I2C ou SPI pour fonctionner
	if(hspi == NULL)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <MPU_init+0x32>
		return SENSOR_REQUEST_FAIL ;
 8003386:	2302      	movs	r3, #2
 8003388:	e040      	b.n	800340c <MPU_init+0xb4>

	//Application des paramètres de connexion
	mpu->hspi = hspi ;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	22d0      	movs	r2, #208	; 0xd0
 80033a0:	745a      	strb	r2, [r3, #17]

	mpu_handlers[mpu_init_compteur] = mpu ;
 80033a2:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <MPU_init+0xbc>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	4619      	mov	r1, r3
 80033a8:	4a1b      	ldr	r2, [pc, #108]	; (8003418 <MPU_init+0xc0>)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	SPI_handlers[mpu_init_compteur++] = hspi ;
 80033b0:	4b18      	ldr	r3, [pc, #96]	; (8003414 <MPU_init+0xbc>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	b2d1      	uxtb	r1, r2
 80033b8:	4a16      	ldr	r2, [pc, #88]	; (8003414 <MPU_init+0xbc>)
 80033ba:	7011      	strb	r1, [r2, #0]
 80033bc:	4619      	mov	r1, r3
 80033be:	4a17      	ldr	r2, [pc, #92]	; (800341c <MPU_init+0xc4>)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x00} ;
 80033c6:	236b      	movs	r3, #107	; 0x6b
 80033c8:	753b      	strb	r3, [r7, #20]
 80033ca:	2300      	movs	r3, #0
 80033cc:	757b      	strb	r3, [r7, #21]

	MPU_cs_lock(mpu);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7ff ffa2 	bl	8003318 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6858      	ldr	r0, [r3, #4]
 80033d8:	f107 0114 	add.w	r1, r7, #20
 80033dc:	2302      	movs	r3, #2
 80033de:	2202      	movs	r2, #2
 80033e0:	f003 fc0a 	bl	8006bf8 <HAL_SPI_Transmit>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff ffa3 	bl	8003338 <MPU_cs_unlock>

	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	7b9b      	ldrb	r3, [r3, #14]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <MPU_init+0xac>
		mpu->state = SENSOR_ERROR ;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2204      	movs	r2, #4
 80033fe:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8003400:	2302      	movs	r3, #2
 8003402:	e003      	b.n	800340c <MPU_init+0xb4>
	}

	mpu->state = SENSOR_IDDLE ;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	73da      	strb	r2, [r3, #15]
	return SENSOR_REQUEST_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	200012b4 	.word	0x200012b4
 8003418:	200012b0 	.word	0x200012b0
 800341c:	200012ac 	.word	0x200012ac

08003420 <MPU_init_gyro>:

/*
 *
 */
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	460b      	mov	r3, r1
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	72fb      	strb	r3, [r7, #11]

	mpu->gyro_range = gyro_range ;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	7afa      	ldrb	r2, [r7, #11]
 8003432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mpu->gyro_data_callback = gyro_data_callback ;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	7bdb      	ldrb	r3, [r3, #15]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MPU_init_gyro+0x28>
		return SENSOR_REQUEST_FAIL ;
 8003444:	2302      	movs	r3, #2
 8003446:	e08e      	b.n	8003566 <MPU_init_gyro+0x146>

	//Configuration de la sensi du gyro dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8003448:	239b      	movs	r3, #155	; 0x9b
 800344a:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7ff ff63 	bl	8003318 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6858      	ldr	r0, [r3, #4]
 8003456:	f107 0214 	add.w	r2, r7, #20
 800345a:	f107 0114 	add.w	r1, r7, #20
 800345e:	2302      	movs	r3, #2
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2302      	movs	r3, #2
 8003464:	f003 fcfc 	bl	8006e60 <HAL_SPI_TransmitReceive>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff ff61 	bl	8003338 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	7b9b      	ldrb	r3, [r3, #14]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d122      	bne.n	80034c4 <MPU_init_gyro+0xa4>
		HAL_Delay(1);
 800347e:	2001      	movs	r0, #1
 8003480:	f001 fd08 	bl	8004e94 <HAL_Delay>
		MPU_cs_lock(mpu);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff ff47 	bl	8003318 <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 800348a:	231b      	movs	r3, #27
 800348c:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 800348e:	7d7b      	ldrb	r3, [r7, #21]
 8003490:	b25b      	sxtb	r3, r3
 8003492:	f023 0318 	bic.w	r3, r3, #24
 8003496:	b25a      	sxtb	r2, r3
 8003498:	7afb      	ldrb	r3, [r7, #11]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	b25b      	sxtb	r3, r3
 800349e:	4313      	orrs	r3, r2
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6858      	ldr	r0, [r3, #4]
 80034aa:	f107 0114 	add.w	r1, r7, #20
 80034ae:	2302      	movs	r3, #2
 80034b0:	2202      	movs	r2, #2
 80034b2:	f003 fba1 	bl	8006bf8 <HAL_SPI_Transmit>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff ff3a 	bl	8003338 <MPU_cs_unlock>
	}

	//ON vérifi si on a bien écris ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	7b9b      	ldrb	r3, [r3, #14]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d124      	bne.n	8003516 <MPU_init_gyro+0xf6>
		uint8_t temp2 = temp[1];
 80034cc:	7d7b      	ldrb	r3, [r7, #21]
 80034ce:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 80034d0:	239b      	movs	r3, #155	; 0x9b
 80034d2:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 80034d4:	2001      	movs	r0, #1
 80034d6:	f001 fcdd 	bl	8004e94 <HAL_Delay>
		MPU_cs_lock(mpu);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff ff1c 	bl	8003318 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6858      	ldr	r0, [r3, #4]
 80034e4:	f107 0214 	add.w	r2, r7, #20
 80034e8:	f107 0114 	add.w	r1, r7, #20
 80034ec:	2302      	movs	r3, #2
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2302      	movs	r3, #2
 80034f2:	f003 fcb5 	bl	8006e60 <HAL_SPI_TransmitReceive>
 80034f6:	4603      	mov	r3, r0
 80034f8:	461a      	mov	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff1a 	bl	8003338 <MPU_cs_unlock>

		if(temp[1] != temp2)
 8003504:	7d7b      	ldrb	r3, [r7, #21]
 8003506:	7dfa      	ldrb	r2, [r7, #23]
 8003508:	429a      	cmp	r2, r3
 800350a:	d004      	beq.n	8003516 <MPU_init_gyro+0xf6>
		{
			mpu->state = SENSOR_ERROR ;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2204      	movs	r2, #4
 8003510:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8003512:	2302      	movs	r3, #2
 8003514:	e027      	b.n	8003566 <MPU_init_gyro+0x146>

	}



	if(mpu->hal_state != HAL_OK)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	7b9b      	ldrb	r3, [r3, #14]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <MPU_init_gyro+0x108>
	{
		mpu->state = SENSOR_ERROR ;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2204      	movs	r2, #4
 8003522:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8003524:	2302      	movs	r3, #2
 8003526:	e01e      	b.n	8003566 <MPU_init_gyro+0x146>
	}

	switch(gyro_range){
 8003528:	7afb      	ldrb	r3, [r7, #11]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d81a      	bhi.n	8003564 <MPU_init_gyro+0x144>
 800352e:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <MPU_init_gyro+0x114>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003545 	.word	0x08003545
 8003538:	0800354d 	.word	0x0800354d
 800353c:	08003555 	.word	0x08003555
 8003540:	0800355d 	.word	0x0800355d
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <MPU_init_gyro+0x150>)
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800354a:	e00b      	b.n	8003564 <MPU_init_gyro+0x144>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a09      	ldr	r2, [pc, #36]	; (8003574 <MPU_init_gyro+0x154>)
 8003550:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8003552:	e007      	b.n	8003564 <MPU_init_gyro+0x144>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a08      	ldr	r2, [pc, #32]	; (8003578 <MPU_init_gyro+0x158>)
 8003558:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800355a:	e003      	b.n	8003564 <MPU_init_gyro+0x144>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a07      	ldr	r2, [pc, #28]	; (800357c <MPU_init_gyro+0x15c>)
 8003560:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8003562:	bf00      	nop
	}
	return SENSOR_REQUEST_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	3bfa232d 	.word	0x3bfa232d
 8003574:	3c7a232d 	.word	0x3c7a232d
 8003578:	3cf9c190 	.word	0x3cf9c190
 800357c:	3d79c190 	.word	0x3d79c190

08003580 <MPU_init_acc>:

/*
 *
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	460b      	mov	r3, r1
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	72fb      	strb	r3, [r7, #11]
	mpu->acc_range = acc_range ;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	7afa      	ldrb	r2, [r7, #11]
 8003592:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	mpu->acc_data_callback = acc_data_callback ;
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	665a      	str	r2, [r3, #100]	; 0x64
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	7bdb      	ldrb	r3, [r3, #15]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MPU_init_acc+0x28>
		return SENSOR_REQUEST_FAIL ;
 80035a4:	2302      	movs	r3, #2
 80035a6:	e08a      	b.n	80036be <MPU_init_acc+0x13e>


	//Configuration de la sensi de l'acc dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 80035a8:	239c      	movs	r3, #156	; 0x9c
 80035aa:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff feb3 	bl	8003318 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6858      	ldr	r0, [r3, #4]
 80035b6:	f107 0214 	add.w	r2, r7, #20
 80035ba:	f107 0114 	add.w	r1, r7, #20
 80035be:	2302      	movs	r3, #2
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2302      	movs	r3, #2
 80035c4:	f003 fc4c 	bl	8006e60 <HAL_SPI_TransmitReceive>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff feb1 	bl	8003338 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){	//Si mpu ok on écrit en spi dans le registre de config du mpu dédié au gyro
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	7b9b      	ldrb	r3, [r3, #14]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d122      	bne.n	8003624 <MPU_init_acc+0xa4>
		HAL_Delay(1);
 80035de:	2001      	movs	r0, #1
 80035e0:	f001 fc58 	bl	8004e94 <HAL_Delay>
		MPU_cs_lock(mpu);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fe97 	bl	8003318 <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 80035ea:	231c      	movs	r3, #28
 80035ec:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 80035ee:	7d7b      	ldrb	r3, [r7, #21]
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	f023 0318 	bic.w	r3, r3, #24
 80035f6:	b25a      	sxtb	r2, r3
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	4313      	orrs	r3, r2
 8003600:	b25b      	sxtb	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6858      	ldr	r0, [r3, #4]
 800360a:	f107 0114 	add.w	r1, r7, #20
 800360e:	2302      	movs	r3, #2
 8003610:	2202      	movs	r2, #2
 8003612:	f003 faf1 	bl	8006bf8 <HAL_SPI_Transmit>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff fe8a 	bl	8003338 <MPU_cs_unlock>
	}

	//On test si on a bien écrit ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	7b9b      	ldrb	r3, [r3, #14]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d124      	bne.n	8003676 <MPU_init_acc+0xf6>
		uint8_t temp2 = temp[1];
 800362c:	7d7b      	ldrb	r3, [r7, #21]
 800362e:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8003630:	239c      	movs	r3, #156	; 0x9c
 8003632:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8003634:	2001      	movs	r0, #1
 8003636:	f001 fc2d 	bl	8004e94 <HAL_Delay>
		MPU_cs_lock(mpu);
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff fe6c 	bl	8003318 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6858      	ldr	r0, [r3, #4]
 8003644:	f107 0214 	add.w	r2, r7, #20
 8003648:	f107 0114 	add.w	r1, r7, #20
 800364c:	2302      	movs	r3, #2
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2302      	movs	r3, #2
 8003652:	f003 fc05 	bl	8006e60 <HAL_SPI_TransmitReceive>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff fe6a 	bl	8003338 <MPU_cs_unlock>

		if(temp[1] != temp2)
 8003664:	7d7b      	ldrb	r3, [r7, #21]
 8003666:	7dfa      	ldrb	r2, [r7, #23]
 8003668:	429a      	cmp	r2, r3
 800366a:	d004      	beq.n	8003676 <MPU_init_acc+0xf6>
		{
			mpu->state = SENSOR_ERROR ;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2204      	movs	r2, #4
 8003670:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8003672:	2302      	movs	r3, #2
 8003674:	e023      	b.n	80036be <MPU_init_acc+0x13e>
		}
	}



	switch(acc_range){
 8003676:	7afb      	ldrb	r3, [r7, #11]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d81f      	bhi.n	80036bc <MPU_init_acc+0x13c>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <MPU_init_acc+0x104>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	08003695 	.word	0x08003695
 8003688:	0800369f 	.word	0x0800369f
 800368c:	080036a9 	.word	0x080036a9
 8003690:	080036b3 	.word	0x080036b3
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800369a:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 800369c:	e00e      	b.n	80036bc <MPU_init_acc+0x13c>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 80036a6:	e009      	b.n	80036bc <MPU_init_acc+0x13c>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80036ae:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 80036b0:	e004      	b.n	80036bc <MPU_init_acc+0x13c>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80036b8:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 80036ba:	bf00      	nop
	}
	return SENSOR_REQUEST_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop

080036c8 <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_REQUEST_OK ;

}

sensor_request_e MPU_update_acc(mpu_t * mpu){
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	6078      	str	r0, [r7, #4]

	if(mpu->state != SENSOR_IDDLE){
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	7bdb      	ldrb	r3, [r3, #15]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MPU_update_acc+0x14>
		return SENSOR_REQUEST_FAIL ;
 80036d8:	2302      	movs	r3, #2
 80036da:	e030      	b.n	800373e <MPU_update_acc+0x76>
	}

	//Update des valeurs
	uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 80036dc:	23bb      	movs	r3, #187	; 0xbb
 80036de:	723b      	strb	r3, [r7, #8]
 80036e0:	2300      	movs	r3, #0
 80036e2:	727b      	strb	r3, [r7, #9]
 80036e4:	2300      	movs	r3, #0
 80036e6:	72bb      	strb	r3, [r7, #10]
 80036e8:	2300      	movs	r3, #0
 80036ea:	72fb      	strb	r3, [r7, #11]
 80036ec:	2300      	movs	r3, #0
 80036ee:	733b      	strb	r3, [r7, #12]
 80036f0:	2300      	movs	r3, #0
 80036f2:	737b      	strb	r3, [r7, #13]
	MPU_cs_lock(mpu);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff fe0f 	bl	8003318 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6858      	ldr	r0, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003702:	f107 0108 	add.w	r1, r7, #8
 8003706:	2302      	movs	r3, #2
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2306      	movs	r3, #6
 800370c:	f003 fba8 	bl	8006e60 <HAL_SPI_TransmitReceive>
 8003710:	4603      	mov	r3, r0
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fe0d 	bl	8003338 <MPU_cs_unlock>


	if(mpu->hal_state == HAL_BUSY)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	7b9b      	ldrb	r3, [r3, #14]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d101      	bne.n	800372a <MPU_update_acc+0x62>
		return SENSOR_REQUEST_BUSY ;
 8003726:	2301      	movs	r3, #1
 8003728:	e009      	b.n	800373e <MPU_update_acc+0x76>
	if(mpu->hal_state != HAL_OK){
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7b9b      	ldrb	r3, [r3, #14]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MPU_update_acc+0x6e>
		return SENSOR_REQUEST_FAIL ;
 8003732:	2302      	movs	r3, #2
 8003734:	e003      	b.n	800373e <MPU_update_acc+0x76>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fd88 	bl	800324c <convert_acc>
	return SENSOR_REQUEST_OK ;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <MPU_update_all_dma>:
	}

	return SENSOR_REQUEST_OK;
}

sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]

	uint8_t registers [14] = {0};
 800374e:	f107 0308 	add.w	r3, r7, #8
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	819a      	strh	r2, [r3, #12]
	registers[0] = MPU6050_ACCEL_XOUT_H | MPU6050_READ ;
 800375c:	23bb      	movs	r3, #187	; 0xbb
 800375e:	723b      	strb	r3, [r7, #8]
	MPU_cs_lock(mpu);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fdd9 	bl	8003318 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive_DMA(mpu->hspi, registers, mpu->data, 14);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6858      	ldr	r0, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f103 0212 	add.w	r2, r3, #18
 8003770:	f107 0108 	add.w	r1, r7, #8
 8003774:	230e      	movs	r3, #14
 8003776:	f003 fd15 	bl	80071a4 <HAL_SPI_TransmitReceive_DMA>
 800377a:	4603      	mov	r3, r0
 800377c:	461a      	mov	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	7b9b      	ldrb	r3, [r3, #14]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d107      	bne.n	800379a <MPU_update_all_dma+0x54>
	{
		mpu->state = SENSOR_BUSY ;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2203      	movs	r2, #3
 800378e:	73da      	strb	r2, [r3, #15]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2203      	movs	r2, #3
 8003794:	741a      	strb	r2, [r3, #16]
	{
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	return SENSOR_REQUEST_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e009      	b.n	80037ae <MPU_update_all_dma+0x68>
	else if(mpu->hal_state == HAL_BUSY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	7b9b      	ldrb	r3, [r3, #14]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d101      	bne.n	80037a6 <MPU_update_all_dma+0x60>
		return SENSOR_REQUEST_BUSY;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e003      	b.n	80037ae <MPU_update_all_dma+0x68>
		mpu->state = SENSOR_ERROR ;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2204      	movs	r2, #4
 80037aa:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 80037ac:	2302      	movs	r3, #2
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <MPU_dma_transmit_complete>:



static void MPU_dma_transmit_complete(mpu_t * mpu){
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]

	//On relâche le pin CS du mpu
	MPU_cs_unlock(mpu);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fdba 	bl	8003338 <MPU_cs_unlock>


	switch(mpu->dma_state){
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7c1b      	ldrb	r3, [r3, #16]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d00b      	beq.n	80037e4 <MPU_dma_transmit_complete+0x2e>
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d010      	beq.n	80037f2 <MPU_dma_transmit_complete+0x3c>
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d000      	beq.n	80037d6 <MPU_dma_transmit_complete+0x20>
			mpu->gyro_data_callback();

			break;
		case MPU_DMA_IDDLE:
		default:
			break;
 80037d4:	e014      	b.n	8003800 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fcd5 	bl	8003186 <convert_gyro>
			mpu->gyro_data_callback();
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	4798      	blx	r3
			break;
 80037e2:	e00d      	b.n	8003800 <MPU_dma_transmit_complete+0x4a>
			convert_acc(mpu);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fd31 	bl	800324c <convert_acc>
			mpu->acc_data_callback();
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ee:	4798      	blx	r3
			break;
 80037f0:	e006      	b.n	8003800 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fcc7 	bl	8003186 <convert_gyro>
			mpu->gyro_data_callback();
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	4798      	blx	r3
			break;
 80037fe:	bf00      	nop

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	741a      	strb	r2, [r3, #16]
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <MPU_dma_transmit_half_complete>:
static void MPU_dma_transmit_half_complete(mpu_t * mpu){
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]

	if(mpu->dma_state == MPU_DMA_ACC_AND_GYRO_IN_PROGRESS)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7c1b      	ldrb	r3, [r3, #16]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d105      	bne.n	800382a <MPU_dma_transmit_half_complete+0x1c>
	{
		//A la moitié donc les données de l'acc sont arrivées
		convert_acc(mpu);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff fd14 	bl	800324c <convert_acc>
		mpu->acc_data_callback();
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003828:	4798      	blx	r3
	}
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
	if(hspi == SPI_handlers[0])
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_SPI_TxRxCpltCallback+0x24>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d104      	bne.n	8003850 <HAL_SPI_TxRxCpltCallback+0x1c>
		MPU_dma_transmit_complete(mpu_handlers[0]);
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_SPI_TxRxCpltCallback+0x28>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff ffb3 	bl	80037b6 <MPU_dma_transmit_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200012ac 	.word	0x200012ac
 800385c:	200012b0 	.word	0x200012b0

08003860 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
if(hspi == SPI_handlers[0])
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d104      	bne.n	800387c <HAL_SPI_TxRxHalfCpltCallback+0x1c>
	MPU_dma_transmit_half_complete(mpu_handlers[0]);
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff ffc9 	bl	800380e <MPU_dma_transmit_half_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif

}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200012ac 	.word	0x200012ac
 8003888:	200012b0 	.word	0x200012b0

0800388c <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003892:	463b      	mov	r3, r7
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800389e:	4b21      	ldr	r3, [pc, #132]	; (8003924 <MX_ADC2_Init+0x98>)
 80038a0:	4a21      	ldr	r2, [pc, #132]	; (8003928 <MX_ADC2_Init+0x9c>)
 80038a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <MX_ADC2_Init+0x98>)
 80038a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <MX_ADC2_Init+0x98>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <MX_ADC2_Init+0x98>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80038b8:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <MX_ADC2_Init+0x98>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80038be:	4b19      	ldr	r3, [pc, #100]	; (8003924 <MX_ADC2_Init+0x98>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038c6:	4b17      	ldr	r3, [pc, #92]	; (8003924 <MX_ADC2_Init+0x98>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038cc:	4b15      	ldr	r3, [pc, #84]	; (8003924 <MX_ADC2_Init+0x98>)
 80038ce:	4a17      	ldr	r2, [pc, #92]	; (800392c <MX_ADC2_Init+0xa0>)
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <MX_ADC2_Init+0x98>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <MX_ADC2_Init+0x98>)
 80038da:	2201      	movs	r2, #1
 80038dc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <MX_ADC2_Init+0x98>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <MX_ADC2_Init+0x98>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80038ec:	480d      	ldr	r0, [pc, #52]	; (8003924 <MX_ADC2_Init+0x98>)
 80038ee:	f001 faf3 	bl	8004ed8 <HAL_ADC_Init>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80038f8:	f000 fbae 	bl	8004058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80038fc:	230b      	movs	r3, #11
 80038fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003900:	2301      	movs	r3, #1
 8003902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003908:	463b      	mov	r3, r7
 800390a:	4619      	mov	r1, r3
 800390c:	4805      	ldr	r0, [pc, #20]	; (8003924 <MX_ADC2_Init+0x98>)
 800390e:	f001 fb27 	bl	8004f60 <HAL_ADC_ConfigChannel>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003918:	f000 fb9e 	bl	8004058 <Error_Handler>
  }

}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	200012d0 	.word	0x200012d0
 8003928:	40012100 	.word	0x40012100
 800392c:	0f000001 	.word	0x0f000001

08003930 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a3c      	ldr	r2, [pc, #240]	; (8003a40 <HAL_ADC_MspInit+0x110>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d171      	bne.n	8003a36 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_ADC_MspInit+0x114>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	4a3a      	ldr	r2, [pc, #232]	; (8003a44 <HAL_ADC_MspInit+0x114>)
 800395c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003960:	6453      	str	r3, [r2, #68]	; 0x44
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_ADC_MspInit+0x114>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <HAL_ADC_MspInit+0x114>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a33      	ldr	r2, [pc, #204]	; (8003a44 <HAL_ADC_MspInit+0x114>)
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_ADC_MspInit+0x114>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_ADC_MspInit+0x114>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a2c      	ldr	r2, [pc, #176]	; (8003a44 <HAL_ADC_MspInit+0x114>)
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <HAL_ADC_MspInit+0x114>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 80039a6:	2302      	movs	r3, #2
 80039a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039aa:	2303      	movs	r3, #3
 80039ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 80039b2:	f107 0314 	add.w	r3, r7, #20
 80039b6:	4619      	mov	r1, r3
 80039b8:	4823      	ldr	r0, [pc, #140]	; (8003a48 <HAL_ADC_MspInit+0x118>)
 80039ba:	f002 f991 	bl	8005ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 80039be:	2302      	movs	r3, #2
 80039c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039c2:	2303      	movs	r3, #3
 80039c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	4619      	mov	r1, r3
 80039d0:	481e      	ldr	r0, [pc, #120]	; (8003a4c <HAL_ADC_MspInit+0x11c>)
 80039d2:	f002 f985 	bl	8005ce0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 80039d8:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <HAL_ADC_MspInit+0x124>)
 80039da:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 80039de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ea:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 80039f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 80039fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 8003a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a06:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a14:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003a1a:	480d      	ldr	r0, [pc, #52]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 8003a1c:	f001 fdd0 	bl	80055c0 <HAL_DMA_Init>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003a26:	f000 fb17 	bl	8004058 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
 8003a30:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <HAL_ADC_MspInit+0x120>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003a36:	bf00      	nop
 8003a38:	3728      	adds	r7, #40	; 0x28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40012100 	.word	0x40012100
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40020800 	.word	0x40020800
 8003a4c:	40020400 	.word	0x40020400
 8003a50:	20001318 	.word	0x20001318
 8003a54:	40026440 	.word	0x40026440

08003a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <MX_DMA_Init+0xf8>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4a3a      	ldr	r2, [pc, #232]	; (8003b50 <MX_DMA_Init+0xf8>)
 8003a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6e:	4b38      	ldr	r3, [pc, #224]	; (8003b50 <MX_DMA_Init+0xf8>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <MX_DMA_Init+0xf8>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <MX_DMA_Init+0xf8>)
 8003a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a88:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8a:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <MX_DMA_Init+0xf8>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	200b      	movs	r0, #11
 8003a9c:	f001 fd59 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003aa0:	200b      	movs	r0, #11
 8003aa2:	f001 fd72 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	200c      	movs	r0, #12
 8003aac:	f001 fd51 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003ab0:	200c      	movs	r0, #12
 8003ab2:	f001 fd6a 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2100      	movs	r1, #0
 8003aba:	200e      	movs	r0, #14
 8003abc:	f001 fd49 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003ac0:	200e      	movs	r0, #14
 8003ac2:	f001 fd62 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2100      	movs	r1, #0
 8003aca:	200f      	movs	r0, #15
 8003acc:	f001 fd41 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003ad0:	200f      	movs	r0, #15
 8003ad2:	f001 fd5a 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2100      	movs	r1, #0
 8003ada:	2010      	movs	r0, #16
 8003adc:	f001 fd39 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003ae0:	2010      	movs	r0, #16
 8003ae2:	f001 fd52 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2100      	movs	r1, #0
 8003aea:	202f      	movs	r0, #47	; 0x2f
 8003aec:	f001 fd31 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003af0:	202f      	movs	r0, #47	; 0x2f
 8003af2:	f001 fd4a 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2100      	movs	r1, #0
 8003afa:	2038      	movs	r0, #56	; 0x38
 8003afc:	f001 fd29 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003b00:	2038      	movs	r0, #56	; 0x38
 8003b02:	f001 fd42 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	2039      	movs	r0, #57	; 0x39
 8003b0c:	f001 fd21 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003b10:	2039      	movs	r0, #57	; 0x39
 8003b12:	f001 fd3a 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2100      	movs	r1, #0
 8003b1a:	203a      	movs	r0, #58	; 0x3a
 8003b1c:	f001 fd19 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003b20:	203a      	movs	r0, #58	; 0x3a
 8003b22:	f001 fd32 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003b26:	2200      	movs	r2, #0
 8003b28:	2100      	movs	r1, #0
 8003b2a:	203b      	movs	r0, #59	; 0x3b
 8003b2c:	f001 fd11 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003b30:	203b      	movs	r0, #59	; 0x3b
 8003b32:	f001 fd2a 	bl	800558a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	2100      	movs	r1, #0
 8003b3a:	2045      	movs	r0, #69	; 0x45
 8003b3c:	f001 fd09 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003b40:	2045      	movs	r0, #69	; 0x45
 8003b42:	f001 fd22 	bl	800558a <HAL_NVIC_EnableIRQ>

}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800

08003b54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5a:	f107 0314 	add.w	r3, r7, #20
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	4b44      	ldr	r3, [pc, #272]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4a43      	ldr	r2, [pc, #268]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003b74:	f043 0304 	orr.w	r3, r3, #4
 8003b78:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7a:	4b41      	ldr	r3, [pc, #260]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	4b3d      	ldr	r3, [pc, #244]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a3c      	ldr	r2, [pc, #240]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b3a      	ldr	r3, [pc, #232]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	4a35      	ldr	r2, [pc, #212]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb2:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	4b2f      	ldr	r3, [pc, #188]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	4a2e      	ldr	r2, [pc, #184]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bce:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <MX_GPIO_Init+0x12c>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8003be0:	4828      	ldr	r0, [pc, #160]	; (8003c84 <MX_GPIO_Init+0x130>)
 8003be2:	f002 fa17 	bl	8006014 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 8003be6:	2201      	movs	r2, #1
 8003be8:	2101      	movs	r1, #1
 8003bea:	4826      	ldr	r0, [pc, #152]	; (8003c84 <MX_GPIO_Init+0x130>)
 8003bec:	f002 fa12 	bl	8006014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4824      	ldr	r0, [pc, #144]	; (8003c88 <MX_GPIO_Init+0x134>)
 8003bf6:	f002 fa0d 	bl	8006014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c00:	4822      	ldr	r0, [pc, #136]	; (8003c8c <MX_GPIO_Init+0x138>)
 8003c02:	f002 fa07 	bl	8006014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 8003c06:	f24e 231d 	movw	r3, #57885	; 0xe21d
 8003c0a:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c14:	2300      	movs	r3, #0
 8003c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4819      	ldr	r0, [pc, #100]	; (8003c84 <MX_GPIO_Init+0x130>)
 8003c20:	f002 f85e 	bl	8005ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c30:	2300      	movs	r3, #0
 8003c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 8003c34:	f107 0314 	add.w	r3, r7, #20
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4813      	ldr	r0, [pc, #76]	; (8003c88 <MX_GPIO_Init+0x134>)
 8003c3c:	f002 f850 	bl	8005ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 8003c40:	2302      	movs	r3, #2
 8003c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	4619      	mov	r1, r3
 8003c52:	480d      	ldr	r0, [pc, #52]	; (8003c88 <MX_GPIO_Init+0x134>)
 8003c54:	f002 f844 	bl	8005ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 8003c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c66:	2300      	movs	r3, #0
 8003c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 8003c6a:	f107 0314 	add.w	r3, r7, #20
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4806      	ldr	r0, [pc, #24]	; (8003c8c <MX_GPIO_Init+0x138>)
 8003c72:	f002 f835 	bl	8005ce0 <HAL_GPIO_Init>

}
 8003c76:	bf00      	nop
 8003c78:	3728      	adds	r7, #40	; 0x28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40020800 	.word	0x40020800
 8003c88:	40020000 	.word	0x40020000
 8003c8c:	40020400 	.word	0x40020400

08003c90 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003c94:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <MX_I2C1_Init+0x50>)
 8003c96:	4a13      	ldr	r2, [pc, #76]	; (8003ce4 <MX_I2C1_Init+0x54>)
 8003c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <MX_I2C1_Init+0x50>)
 8003c9c:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <MX_I2C1_Init+0x58>)
 8003c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <MX_I2C1_Init+0x50>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <MX_I2C1_Init+0x50>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <MX_I2C1_Init+0x50>)
 8003cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <MX_I2C1_Init+0x50>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <MX_I2C1_Init+0x50>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <MX_I2C1_Init+0x50>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <MX_I2C1_Init+0x50>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ccc:	4804      	ldr	r0, [pc, #16]	; (8003ce0 <MX_I2C1_Init+0x50>)
 8003cce:	f002 f9bb 	bl	8006048 <HAL_I2C_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003cd8:	f000 f9be 	bl	8004058 <Error_Handler>
  }

}
 8003cdc:	bf00      	nop
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	200013d8 	.word	0x200013d8
 8003ce4:	40005400 	.word	0x40005400
 8003ce8:	00061a80 	.word	0x00061a80

08003cec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a47      	ldr	r2, [pc, #284]	; (8003e28 <HAL_I2C_MspInit+0x13c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	f040 8088 	bne.w	8003e20 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	4b45      	ldr	r3, [pc, #276]	; (8003e2c <HAL_I2C_MspInit+0x140>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	4a44      	ldr	r2, [pc, #272]	; (8003e2c <HAL_I2C_MspInit+0x140>)
 8003d1a:	f043 0302 	orr.w	r3, r3, #2
 8003d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d20:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <HAL_I2C_MspInit+0x140>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d2c:	23c0      	movs	r3, #192	; 0xc0
 8003d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d30:	2312      	movs	r3, #18
 8003d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d34:	2301      	movs	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d40:	f107 0314 	add.w	r3, r7, #20
 8003d44:	4619      	mov	r1, r3
 8003d46:	483a      	ldr	r0, [pc, #232]	; (8003e30 <HAL_I2C_MspInit+0x144>)
 8003d48:	f001 ffca 	bl	8005ce0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <HAL_I2C_MspInit+0x140>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	4a35      	ldr	r2, [pc, #212]	; (8003e2c <HAL_I2C_MspInit+0x140>)
 8003d56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5c:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <HAL_I2C_MspInit+0x140>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003d68:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003d6a:	4a33      	ldr	r2, [pc, #204]	; (8003e38 <HAL_I2C_MspInit+0x14c>)
 8003d6c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d74:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d7c:	4b2d      	ldr	r3, [pc, #180]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d82:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d88:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d8a:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d90:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003da8:	4822      	ldr	r0, [pc, #136]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003daa:	f001 fc09 	bl	80055c0 <HAL_DMA_Init>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003db4:	f000 f950 	bl	8004058 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <HAL_I2C_MspInit+0x148>)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003dc4:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <HAL_I2C_MspInit+0x154>)
 8003dc8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003dca:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003dcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dd0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003dd4:	2240      	movs	r2, #64	; 0x40
 8003dd6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003de4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dec:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003df8:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003e04:	480d      	ldr	r0, [pc, #52]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003e06:	f001 fbdb 	bl	80055c0 <HAL_DMA_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8003e10:	f000 f922 	bl	8004058 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003e18:	635a      	str	r2, [r3, #52]	; 0x34
 8003e1a:	4a08      	ldr	r2, [pc, #32]	; (8003e3c <HAL_I2C_MspInit+0x150>)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003e20:	bf00      	nop
 8003e22:	3728      	adds	r7, #40	; 0x28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40005400 	.word	0x40005400
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40020400 	.word	0x40020400
 8003e34:	2000142c 	.word	0x2000142c
 8003e38:	40026010 	.word	0x40026010
 8003e3c:	20001378 	.word	0x20001378
 8003e40:	400260b8 	.word	0x400260b8

08003e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e4a:	f000 ffb1 	bl	8004db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e4e:	f000 f899 	bl	8003f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e52:	f7ff fe7f 	bl	8003b54 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e56:	f7ff fdff 	bl	8003a58 <MX_DMA_Init>
  MX_I2C1_Init();
 8003e5a:	f7ff ff19 	bl	8003c90 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003e5e:	f000 f903 	bl	8004068 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003e62:	f000 f937 	bl	80040d4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003e66:	f000 fbeb 	bl	8004640 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8003e6a:	f000 fd71 	bl	8004950 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003e6e:	f000 fd99 	bl	80049a4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003e72:	f000 fdc1 	bl	80049f8 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8003e76:	f7ff fd09 	bl	800388c <MX_ADC2_Init>
  MX_TIM2_Init();
 8003e7a:	f000 fca7 	bl	80047cc <MX_TIM2_Init>

  //Init du baromètre
  //MS5611_init(&sys.sensors.ms5611, &hi2c1);

  //Init du GYRO et de l ACC en utilisant un MPU6000
  MPU_init(&sys.sensors.mpu, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 8003e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e82:	4a2d      	ldr	r2, [pc, #180]	; (8003f38 <main+0xf4>)
 8003e84:	492d      	ldr	r1, [pc, #180]	; (8003f3c <main+0xf8>)
 8003e86:	482e      	ldr	r0, [pc, #184]	; (8003f40 <main+0xfc>)
 8003e88:	f7ff fa66 	bl	8003358 <MPU_init>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 8003e8c:	492c      	ldr	r1, [pc, #176]	; (8003f40 <main+0xfc>)
 8003e8e:	482d      	ldr	r0, [pc, #180]	; (8003f44 <main+0x100>)
 8003e90:	f7ff f8d4 	bl	800303c <GYRO_init>
  ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 8003e94:	492a      	ldr	r1, [pc, #168]	; (8003f40 <main+0xfc>)
 8003e96:	482c      	ldr	r0, [pc, #176]	; (8003f48 <main+0x104>)
 8003e98:	f7ff f828 	bl	8002eec <ACC_init>



  LED_SEQUENCE_init(&sys.ihm.led_blue, PIN_LED_BLUE_GPIO_Port, PIN_LED_BLUE_Pin, SEQUENCE_LED_5, 1, 12, 1);
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	9302      	str	r3, [sp, #8]
 8003ea0:	230c      	movs	r3, #12
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003eac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003eb0:	4926      	ldr	r1, [pc, #152]	; (8003f4c <main+0x108>)
 8003eb2:	4827      	ldr	r0, [pc, #156]	; (8003f50 <main+0x10c>)
 8003eb4:	f006 f883 	bl	8009fbe <LED_SEQUENCE_init>
  LED_SEQUENCE_init(&sys.ihm.led_red, PIN_LED_RED_GPIO_Port, PIN_LED_RED_Pin, SEQUENCE_LED_OFF, 200, 12, 1);
 8003eb8:	2301      	movs	r3, #1
 8003eba:	9302      	str	r3, [sp, #8]
 8003ebc:	230c      	movs	r3, #12
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	23c8      	movs	r3, #200	; 0xc8
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eca:	4920      	ldr	r1, [pc, #128]	; (8003f4c <main+0x108>)
 8003ecc:	4821      	ldr	r0, [pc, #132]	; (8003f54 <main+0x110>)
 8003ece:	f006 f876 	bl	8009fbe <LED_SEQUENCE_init>
  LED_SEQUENCE_init(&sys.ihm.led_green, PIN_LED_GREEN_GPIO_Port, PIN_LED_GREEN_Pin, SEQUENCE_LED_OFF, 200, 12, 1);
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	9302      	str	r3, [sp, #8]
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	23c8      	movs	r3, #200	; 0xc8
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ee4:	4919      	ldr	r1, [pc, #100]	; (8003f4c <main+0x108>)
 8003ee6:	481c      	ldr	r0, [pc, #112]	; (8003f58 <main+0x114>)
 8003ee8:	f006 f869 	bl	8009fbe <LED_SEQUENCE_init>

  CONTROLLER_Init(&sys.radio.controller, &sys.radio.ibus);
 8003eec:	491b      	ldr	r1, [pc, #108]	; (8003f5c <main+0x118>)
 8003eee:	481c      	ldr	r0, [pc, #112]	; (8003f60 <main+0x11c>)
 8003ef0:	f7fe fc68 	bl	80027c4 <CONTROLLER_Init>
  IBUS_init(&sys.radio.ibus, &huart3, CONTROLLER_Rx_Data_Rdy);
 8003ef4:	4a1b      	ldr	r2, [pc, #108]	; (8003f64 <main+0x120>)
 8003ef6:	491c      	ldr	r1, [pc, #112]	; (8003f68 <main+0x124>)
 8003ef8:	4818      	ldr	r0, [pc, #96]	; (8003f5c <main+0x118>)
 8003efa:	f005 fd11 	bl	8009920 <IBUS_init>

  ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_LOOP_FREQUENCY);
 8003efe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003f02:	4a11      	ldr	r2, [pc, #68]	; (8003f48 <main+0x104>)
 8003f04:	490f      	ldr	r1, [pc, #60]	; (8003f44 <main+0x100>)
 8003f06:	4819      	ldr	r0, [pc, #100]	; (8003f6c <main+0x128>)
 8003f08:	f7fd f89a 	bl	8001040 <ORIENTATION_Init>
  REGULATION_ORIENTATION_Init(&sys.regulation.orientation, &sys.orientation, sys.propulsion.consigne);
 8003f0c:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <main+0x12c>)
 8003f0e:	4917      	ldr	r1, [pc, #92]	; (8003f6c <main+0x128>)
 8003f10:	4818      	ldr	r0, [pc, #96]	; (8003f74 <main+0x130>)
 8003f12:	f7fe ff1f 	bl	8002d54 <REGULATION_ORIENTATION_Init>
  PROPULSION_Init(&sys.propulsion, &htim1);
 8003f16:	4918      	ldr	r1, [pc, #96]	; (8003f78 <main+0x134>)
 8003f18:	4818      	ldr	r0, [pc, #96]	; (8003f7c <main+0x138>)
 8003f1a:	f7fe fb9b 	bl	8002654 <PROPULSION_Init>

  FLIGHT_MODE_Init(&sys);
 8003f1e:	480d      	ldr	r0, [pc, #52]	; (8003f54 <main+0x110>)
 8003f20:	f7fd fa1c 	bl	800135c <FLIGHT_MODE_Init>

  SCHEDULER_init(&sys);
 8003f24:	480b      	ldr	r0, [pc, #44]	; (8003f54 <main+0x110>)
 8003f26:	f7fd ff9b 	bl	8001e60 <SCHEDULER_init>
  EVENT_init(&sys, &htim2);
 8003f2a:	4915      	ldr	r1, [pc, #84]	; (8003f80 <main+0x13c>)
 8003f2c:	4809      	ldr	r0, [pc, #36]	; (8003f54 <main+0x110>)
 8003f2e:	f7fd fdad 	bl	8001a8c <EVENT_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 8003f32:	f7fd ffa7 	bl	8001e84 <SCHEDULER_run>
 8003f36:	e7fc      	b.n	8003f32 <main+0xee>
 8003f38:	40020400 	.word	0x40020400
 8003f3c:	20001854 	.word	0x20001854
 8003f40:	200015b0 	.word	0x200015b0
 8003f44:	200014e0 	.word	0x200014e0
 8003f48:	20001548 	.word	0x20001548
 8003f4c:	40020800 	.word	0x40020800
 8003f50:	200014c4 	.word	0x200014c4
 8003f54:	2000148c 	.word	0x2000148c
 8003f58:	200014a8 	.word	0x200014a8
 8003f5c:	20001674 	.word	0x20001674
 8003f60:	200016d4 	.word	0x200016d4
 8003f64:	08002d47 	.word	0x08002d47
 8003f68:	20001c24 	.word	0x20001c24
 8003f6c:	20001640 	.word	0x20001640
 8003f70:	2000173c 	.word	0x2000173c
 8003f74:	2000174c 	.word	0x2000174c
 8003f78:	20001a84 	.word	0x20001a84
 8003f7c:	2000172c 	.word	0x2000172c
 8003f80:	20001ac4 	.word	0x20001ac4

08003f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b094      	sub	sp, #80	; 0x50
 8003f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8a:	f107 0320 	add.w	r3, r7, #32
 8003f8e:	2230      	movs	r2, #48	; 0x30
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f006 f8d7 	bl	800a146 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f98:	f107 030c 	add.w	r3, r7, #12
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	4b28      	ldr	r3, [pc, #160]	; (8004050 <SystemClock_Config+0xcc>)
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	4a27      	ldr	r2, [pc, #156]	; (8004050 <SystemClock_Config+0xcc>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb8:	4b25      	ldr	r3, [pc, #148]	; (8004050 <SystemClock_Config+0xcc>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	607b      	str	r3, [r7, #4]
 8003fc8:	4b22      	ldr	r3, [pc, #136]	; (8004054 <SystemClock_Config+0xd0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a21      	ldr	r2, [pc, #132]	; (8004054 <SystemClock_Config+0xd0>)
 8003fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <SystemClock_Config+0xd0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fe8:	2310      	movs	r3, #16
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fec:	2302      	movs	r3, #2
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003ff8:	23a8      	movs	r3, #168	; 0xa8
 8003ffa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004000:	2304      	movs	r3, #4
 8004002:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004004:	f107 0320 	add.w	r3, r7, #32
 8004008:	4618      	mov	r0, r3
 800400a:	f002 f955 	bl	80062b8 <HAL_RCC_OscConfig>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004014:	f000 f820 	bl	8004058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004018:	230f      	movs	r3, #15
 800401a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800401c:	2302      	movs	r3, #2
 800401e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004024:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004028:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800402a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800402e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	2105      	movs	r1, #5
 8004036:	4618      	mov	r0, r3
 8004038:	f002 fbae 	bl	8006798 <HAL_RCC_ClockConfig>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004042:	f000 f809 	bl	8004058 <Error_Handler>
  }
}
 8004046:	bf00      	nop
 8004048:	3750      	adds	r7, #80	; 0x50
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800
 8004054:	40007000 	.word	0x40007000

08004058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <MX_SPI1_Init+0x64>)
 800406e:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <MX_SPI1_Init+0x68>)
 8004070:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <MX_SPI1_Init+0x64>)
 8004074:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004078:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <MX_SPI1_Init+0x64>)
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <MX_SPI1_Init+0x64>)
 8004082:	2200      	movs	r2, #0
 8004084:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <MX_SPI1_Init+0x64>)
 8004088:	2200      	movs	r2, #0
 800408a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <MX_SPI1_Init+0x64>)
 800408e:	2200      	movs	r2, #0
 8004090:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <MX_SPI1_Init+0x64>)
 8004094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004098:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800409a:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <MX_SPI1_Init+0x64>)
 800409c:	2220      	movs	r2, #32
 800409e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <MX_SPI1_Init+0x64>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <MX_SPI1_Init+0x64>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <MX_SPI1_Init+0x64>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <MX_SPI1_Init+0x64>)
 80040b4:	220a      	movs	r2, #10
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80040b8:	4804      	ldr	r0, [pc, #16]	; (80040cc <MX_SPI1_Init+0x64>)
 80040ba:	f002 fd39 	bl	8006b30 <HAL_SPI_Init>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80040c4:	f7ff ffc8 	bl	8004058 <Error_Handler>
  }

}
 80040c8:	bf00      	nop
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	2000190c 	.word	0x2000190c
 80040d0:	40013000 	.word	0x40013000

080040d4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80040d8:	4b17      	ldr	r3, [pc, #92]	; (8004138 <MX_SPI2_Init+0x64>)
 80040da:	4a18      	ldr	r2, [pc, #96]	; (800413c <MX_SPI2_Init+0x68>)
 80040dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040de:	4b16      	ldr	r3, [pc, #88]	; (8004138 <MX_SPI2_Init+0x64>)
 80040e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <MX_SPI2_Init+0x64>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040ec:	4b12      	ldr	r3, [pc, #72]	; (8004138 <MX_SPI2_Init+0x64>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <MX_SPI2_Init+0x64>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040f8:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <MX_SPI2_Init+0x64>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040fe:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <MX_SPI2_Init+0x64>)
 8004100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004104:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <MX_SPI2_Init+0x64>)
 8004108:	2208      	movs	r2, #8
 800410a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <MX_SPI2_Init+0x64>)
 800410e:	2200      	movs	r2, #0
 8004110:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <MX_SPI2_Init+0x64>)
 8004114:	2200      	movs	r2, #0
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <MX_SPI2_Init+0x64>)
 800411a:	2200      	movs	r2, #0
 800411c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <MX_SPI2_Init+0x64>)
 8004120:	220a      	movs	r2, #10
 8004122:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004124:	4804      	ldr	r0, [pc, #16]	; (8004138 <MX_SPI2_Init+0x64>)
 8004126:	f002 fd03 	bl	8006b30 <HAL_SPI_Init>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004130:	f7ff ff92 	bl	8004058 <Error_Handler>
  }

}
 8004134:	bf00      	nop
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20001854 	.word	0x20001854
 800413c:	40003800 	.word	0x40003800

08004140 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08c      	sub	sp, #48	; 0x30
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 031c 	add.w	r3, r7, #28
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a8e      	ldr	r2, [pc, #568]	; (8004398 <HAL_SPI_MspInit+0x258>)
 800415e:	4293      	cmp	r3, r2
 8004160:	f040 8089 	bne.w	8004276 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	4b8c      	ldr	r3, [pc, #560]	; (800439c <HAL_SPI_MspInit+0x25c>)
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	4a8b      	ldr	r2, [pc, #556]	; (800439c <HAL_SPI_MspInit+0x25c>)
 800416e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004172:	6453      	str	r3, [r2, #68]	; 0x44
 8004174:	4b89      	ldr	r3, [pc, #548]	; (800439c <HAL_SPI_MspInit+0x25c>)
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	4b85      	ldr	r3, [pc, #532]	; (800439c <HAL_SPI_MspInit+0x25c>)
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	4a84      	ldr	r2, [pc, #528]	; (800439c <HAL_SPI_MspInit+0x25c>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6313      	str	r3, [r2, #48]	; 0x30
 8004190:	4b82      	ldr	r3, [pc, #520]	; (800439c <HAL_SPI_MspInit+0x25c>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800419c:	23e0      	movs	r3, #224	; 0xe0
 800419e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a0:	2302      	movs	r3, #2
 80041a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a8:	2303      	movs	r3, #3
 80041aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80041ac:	2305      	movs	r3, #5
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b0:	f107 031c 	add.w	r3, r7, #28
 80041b4:	4619      	mov	r1, r3
 80041b6:	487a      	ldr	r0, [pc, #488]	; (80043a0 <HAL_SPI_MspInit+0x260>)
 80041b8:	f001 fd92 	bl	8005ce0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80041bc:	4b79      	ldr	r3, [pc, #484]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041be:	4a7a      	ldr	r2, [pc, #488]	; (80043a8 <HAL_SPI_MspInit+0x268>)
 80041c0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80041c2:	4b78      	ldr	r3, [pc, #480]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041c4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80041c8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ca:	4b76      	ldr	r3, [pc, #472]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d0:	4b74      	ldr	r3, [pc, #464]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041d6:	4b73      	ldr	r3, [pc, #460]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041dc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041de:	4b71      	ldr	r3, [pc, #452]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041e4:	4b6f      	ldr	r3, [pc, #444]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80041ea:	4b6e      	ldr	r3, [pc, #440]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041f0:	4b6c      	ldr	r3, [pc, #432]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041f6:	4b6b      	ldr	r3, [pc, #428]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80041fc:	4869      	ldr	r0, [pc, #420]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 80041fe:	f001 f9df 	bl	80055c0 <HAL_DMA_Init>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004208:	f7ff ff26 	bl	8004058 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a65      	ldr	r2, [pc, #404]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 8004210:	64da      	str	r2, [r3, #76]	; 0x4c
 8004212:	4a64      	ldr	r2, [pc, #400]	; (80043a4 <HAL_SPI_MspInit+0x264>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004218:	4b64      	ldr	r3, [pc, #400]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 800421a:	4a65      	ldr	r2, [pc, #404]	; (80043b0 <HAL_SPI_MspInit+0x270>)
 800421c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800421e:	4b63      	ldr	r3, [pc, #396]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 8004220:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004224:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 8004228:	2240      	movs	r2, #64	; 0x40
 800422a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800422c:	4b5f      	ldr	r3, [pc, #380]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 800422e:	2200      	movs	r2, #0
 8004230:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004232:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 8004234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004238:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800423a:	4b5c      	ldr	r3, [pc, #368]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 800423c:	2200      	movs	r2, #0
 800423e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004240:	4b5a      	ldr	r3, [pc, #360]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 8004242:	2200      	movs	r2, #0
 8004244:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004246:	4b59      	ldr	r3, [pc, #356]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 8004248:	2200      	movs	r2, #0
 800424a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800424c:	4b57      	ldr	r3, [pc, #348]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 800424e:	2200      	movs	r2, #0
 8004250:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004252:	4b56      	ldr	r3, [pc, #344]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 8004254:	2200      	movs	r2, #0
 8004256:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004258:	4854      	ldr	r0, [pc, #336]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 800425a:	f001 f9b1 	bl	80055c0 <HAL_DMA_Init>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8004264:	f7ff fef8 	bl	8004058 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a50      	ldr	r2, [pc, #320]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 800426c:	649a      	str	r2, [r3, #72]	; 0x48
 800426e:	4a4f      	ldr	r2, [pc, #316]	; (80043ac <HAL_SPI_MspInit+0x26c>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004274:	e08c      	b.n	8004390 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a4e      	ldr	r2, [pc, #312]	; (80043b4 <HAL_SPI_MspInit+0x274>)
 800427c:	4293      	cmp	r3, r2
 800427e:	f040 8087 	bne.w	8004390 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	4b45      	ldr	r3, [pc, #276]	; (800439c <HAL_SPI_MspInit+0x25c>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a44      	ldr	r2, [pc, #272]	; (800439c <HAL_SPI_MspInit+0x25c>)
 800428c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
 8004292:	4b42      	ldr	r3, [pc, #264]	; (800439c <HAL_SPI_MspInit+0x25c>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_SPI_MspInit+0x25c>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	4a3d      	ldr	r2, [pc, #244]	; (800439c <HAL_SPI_MspInit+0x25c>)
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	6313      	str	r3, [r2, #48]	; 0x30
 80042ae:	4b3b      	ldr	r3, [pc, #236]	; (800439c <HAL_SPI_MspInit+0x25c>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80042ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80042be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c0:	2302      	movs	r3, #2
 80042c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c8:	2303      	movs	r3, #3
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042cc:	2305      	movs	r3, #5
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d0:	f107 031c 	add.w	r3, r7, #28
 80042d4:	4619      	mov	r1, r3
 80042d6:	4838      	ldr	r0, [pc, #224]	; (80043b8 <HAL_SPI_MspInit+0x278>)
 80042d8:	f001 fd02 	bl	8005ce0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80042dc:	4b37      	ldr	r3, [pc, #220]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 80042de:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <HAL_SPI_MspInit+0x280>)
 80042e0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80042e2:	4b36      	ldr	r3, [pc, #216]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042e8:	4b34      	ldr	r3, [pc, #208]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042ee:	4b33      	ldr	r3, [pc, #204]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042f4:	4b31      	ldr	r3, [pc, #196]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 80042f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042fa:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042fc:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004302:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 8004304:	2200      	movs	r2, #0
 8004306:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004308:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 800430a:	2200      	movs	r2, #0
 800430c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800430e:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 8004310:	2200      	movs	r2, #0
 8004312:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004314:	4b29      	ldr	r3, [pc, #164]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 8004316:	2200      	movs	r2, #0
 8004318:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800431a:	4828      	ldr	r0, [pc, #160]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 800431c:	f001 f950 	bl	80055c0 <HAL_DMA_Init>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 8004326:	f7ff fe97 	bl	8004058 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a23      	ldr	r2, [pc, #140]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 800432e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004330:	4a22      	ldr	r2, [pc, #136]	; (80043bc <HAL_SPI_MspInit+0x27c>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004336:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 8004338:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <HAL_SPI_MspInit+0x288>)
 800433a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800433c:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 800433e:	2200      	movs	r2, #0
 8004340:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004342:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 8004344:	2240      	movs	r2, #64	; 0x40
 8004346:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 800434a:	2200      	movs	r2, #0
 800434c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800434e:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 8004350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004354:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004356:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 800435e:	2200      	movs	r2, #0
 8004360:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004362:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 8004364:	2200      	movs	r2, #0
 8004366:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004368:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 800436a:	2200      	movs	r2, #0
 800436c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 8004370:	2200      	movs	r2, #0
 8004372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004374:	4813      	ldr	r0, [pc, #76]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 8004376:	f001 f923 	bl	80055c0 <HAL_DMA_Init>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 8004380:	f7ff fe6a 	bl	8004058 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 8004388:	649a      	str	r2, [r3, #72]	; 0x48
 800438a:	4a0e      	ldr	r2, [pc, #56]	; (80043c4 <HAL_SPI_MspInit+0x284>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004390:	bf00      	nop
 8004392:	3730      	adds	r7, #48	; 0x30
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40013000 	.word	0x40013000
 800439c:	40023800 	.word	0x40023800
 80043a0:	40020000 	.word	0x40020000
 80043a4:	20001964 	.word	0x20001964
 80043a8:	40026410 	.word	0x40026410
 80043ac:	20001a24 	.word	0x20001a24
 80043b0:	40026458 	.word	0x40026458
 80043b4:	40003800 	.word	0x40003800
 80043b8:	40020400 	.word	0x40020400
 80043bc:	200018ac 	.word	0x200018ac
 80043c0:	40026058 	.word	0x40026058
 80043c4:	200019c4 	.word	0x200019c4
 80043c8:	40026070 	.word	0x40026070

080043cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_MspInit+0x4c>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	4a0f      	ldr	r2, [pc, #60]	; (8004418 <HAL_MspInit+0x4c>)
 80043dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e0:	6453      	str	r3, [r2, #68]	; 0x44
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <HAL_MspInit+0x4c>)
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ea:	607b      	str	r3, [r7, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_MspInit+0x4c>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	4a08      	ldr	r2, [pc, #32]	; (8004418 <HAL_MspInit+0x4c>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6413      	str	r3, [r2, #64]	; 0x40
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_MspInit+0x4c>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800

0800441c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800442a:	b480      	push	{r7}
 800442c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800442e:	e7fe      	b.n	800442e <HardFault_Handler+0x4>

08004430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004434:	e7fe      	b.n	8004434 <MemManage_Handler+0x4>

08004436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800443a:	e7fe      	b.n	800443a <BusFault_Handler+0x4>

0800443c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004440:	e7fe      	b.n	8004440 <UsageFault_Handler+0x4>

08004442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004442:	b480      	push	{r7}
 8004444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004446:	bf00      	nop
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800445e:	b480      	push	{r7}
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004462:	bf00      	nop
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004470:	f000 fcf0 	bl	8004e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004474:	bf00      	nop
 8004476:	bd80      	pop	{r7, pc}

08004478 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800447c:	4802      	ldr	r0, [pc, #8]	; (8004488 <DMA1_Stream0_IRQHandler+0x10>)
 800447e:	f001 f9c7 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	2000142c 	.word	0x2000142c

0800448c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004490:	4802      	ldr	r0, [pc, #8]	; (800449c <DMA1_Stream1_IRQHandler+0x10>)
 8004492:	f001 f9bd 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20001bc4 	.word	0x20001bc4

080044a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80044a4:	4802      	ldr	r0, [pc, #8]	; (80044b0 <DMA1_Stream3_IRQHandler+0x10>)
 80044a6:	f001 f9b3 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	200018ac 	.word	0x200018ac

080044b4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80044b8:	4802      	ldr	r0, [pc, #8]	; (80044c4 <DMA1_Stream4_IRQHandler+0x10>)
 80044ba:	f001 f9a9 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200019c4 	.word	0x200019c4

080044c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80044cc:	4802      	ldr	r0, [pc, #8]	; (80044d8 <DMA1_Stream5_IRQHandler+0x10>)
 80044ce:	f001 f99f 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20001b04 	.word	0x20001b04

080044dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80044e0:	4802      	ldr	r0, [pc, #8]	; (80044ec <TIM2_IRQHandler+0x10>)
 80044e2:	f003 fa2b 	bl	800793c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20001ac4 	.word	0x20001ac4

080044f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80044f4:	4802      	ldr	r0, [pc, #8]	; (8004500 <USART3_IRQHandler+0x10>)
 80044f6:	f004 facd 	bl	8008a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20001c24 	.word	0x20001c24

08004504 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <DMA1_Stream7_IRQHandler+0x10>)
 800450a:	f001 f981 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20001378 	.word	0x20001378

08004518 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800451c:	4802      	ldr	r0, [pc, #8]	; (8004528 <DMA2_Stream0_IRQHandler+0x10>)
 800451e:	f001 f977 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20001964 	.word	0x20001964

0800452c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <DMA2_Stream1_IRQHandler+0x10>)
 8004532:	f001 f96d 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20001b64 	.word	0x20001b64

08004540 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004544:	4802      	ldr	r0, [pc, #8]	; (8004550 <DMA2_Stream2_IRQHandler+0x10>)
 8004546:	f001 f963 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20001318 	.word	0x20001318

08004554 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004558:	4802      	ldr	r0, [pc, #8]	; (8004564 <DMA2_Stream3_IRQHandler+0x10>)
 800455a:	f001 f959 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20001a24 	.word	0x20001a24

08004568 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800456c:	4802      	ldr	r0, [pc, #8]	; (8004578 <DMA2_Stream6_IRQHandler+0x10>)
 800456e:	f001 f94f 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20001c64 	.word	0x20001c64

0800457c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	IBUS_RxCplt(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f005 f9f1 	bl	800996c <IBUS_RxCplt>
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
	IBUS_RxHalfCplt(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f005 fa00 	bl	80099a0 <IBUS_RxHalfCplt>
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <_sbrk+0x5c>)
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <_sbrk+0x60>)
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <_sbrk+0x64>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <_sbrk+0x64>)
 80045c6:	4a12      	ldr	r2, [pc, #72]	; (8004610 <_sbrk+0x68>)
 80045c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <_sbrk+0x64>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d207      	bcs.n	80045e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045d8:	f005 fd72 	bl	800a0c0 <__errno>
 80045dc:	4602      	mov	r2, r0
 80045de:	230c      	movs	r3, #12
 80045e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80045e2:	f04f 33ff 	mov.w	r3, #4294967295
 80045e6:	e009      	b.n	80045fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045e8:	4b08      	ldr	r3, [pc, #32]	; (800460c <_sbrk+0x64>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <_sbrk+0x64>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	4a05      	ldr	r2, [pc, #20]	; (800460c <_sbrk+0x64>)
 80045f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045fa:	68fb      	ldr	r3, [r7, #12]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20020000 	.word	0x20020000
 8004608:	00000400 	.word	0x00000400
 800460c:	200012b8 	.word	0x200012b8
 8004610:	20001d50 	.word	0x20001d50

08004614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <SystemInit+0x28>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <SystemInit+0x28>)
 8004620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <SystemInit+0x28>)
 800462a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800462e:	609a      	str	r2, [r3, #8]
#endif
}
 8004630:	bf00      	nop
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b096      	sub	sp, #88	; 0x58
 8004644:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004646:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	609a      	str	r2, [r3, #8]
 8004652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004654:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800465e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	609a      	str	r2, [r3, #8]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	611a      	str	r2, [r3, #16]
 800466e:	615a      	str	r2, [r3, #20]
 8004670:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	2220      	movs	r2, #32
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f005 fd64 	bl	800a146 <memset>

  htim1.Instance = TIM1;
 800467e:	4b51      	ldr	r3, [pc, #324]	; (80047c4 <MX_TIM1_Init+0x184>)
 8004680:	4a51      	ldr	r2, [pc, #324]	; (80047c8 <MX_TIM1_Init+0x188>)
 8004682:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8004684:	4b4f      	ldr	r3, [pc, #316]	; (80047c4 <MX_TIM1_Init+0x184>)
 8004686:	2214      	movs	r2, #20
 8004688:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800468a:	4b4e      	ldr	r3, [pc, #312]	; (80047c4 <MX_TIM1_Init+0x184>)
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8004690:	4b4c      	ldr	r3, [pc, #304]	; (80047c4 <MX_TIM1_Init+0x184>)
 8004692:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004696:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004698:	4b4a      	ldr	r3, [pc, #296]	; (80047c4 <MX_TIM1_Init+0x184>)
 800469a:	2200      	movs	r2, #0
 800469c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800469e:	4b49      	ldr	r3, [pc, #292]	; (80047c4 <MX_TIM1_Init+0x184>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046a4:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <MX_TIM1_Init+0x184>)
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80046aa:	4846      	ldr	r0, [pc, #280]	; (80047c4 <MX_TIM1_Init+0x184>)
 80046ac:	f003 f884 	bl	80077b8 <HAL_TIM_Base_Init>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80046b6:	f7ff fccf 	bl	8004058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80046c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046c4:	4619      	mov	r1, r3
 80046c6:	483f      	ldr	r0, [pc, #252]	; (80047c4 <MX_TIM1_Init+0x184>)
 80046c8:	f003 fb06 	bl	8007cd8 <HAL_TIM_ConfigClockSource>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80046d2:	f7ff fcc1 	bl	8004058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80046d6:	483b      	ldr	r0, [pc, #236]	; (80047c4 <MX_TIM1_Init+0x184>)
 80046d8:	f003 f8bd 	bl	8007856 <HAL_TIM_PWM_Init>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80046e2:	f7ff fcb9 	bl	8004058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046e6:	2300      	movs	r3, #0
 80046e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ea:	2300      	movs	r3, #0
 80046ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80046ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046f2:	4619      	mov	r1, r3
 80046f4:	4833      	ldr	r0, [pc, #204]	; (80047c4 <MX_TIM1_Init+0x184>)
 80046f6:	f003 fedf 	bl	80084b8 <HAL_TIMEx_MasterConfigSynchronization>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004700:	f7ff fcaa 	bl	8004058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004704:	2360      	movs	r3, #96	; 0x60
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 8004708:	f240 33e7 	movw	r3, #999	; 0x3e7
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800470e:	2300      	movs	r3, #0
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004712:	2300      	movs	r3, #0
 8004714:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004716:	2300      	movs	r3, #0
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800471a:	2300      	movs	r3, #0
 800471c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004726:	2200      	movs	r2, #0
 8004728:	4619      	mov	r1, r3
 800472a:	4826      	ldr	r0, [pc, #152]	; (80047c4 <MX_TIM1_Init+0x184>)
 800472c:	f003 fa0e 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004736:	f7ff fc8f 	bl	8004058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800473a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800473e:	2204      	movs	r2, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4820      	ldr	r0, [pc, #128]	; (80047c4 <MX_TIM1_Init+0x184>)
 8004744:	f003 fa02 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800474e:	f7ff fc83 	bl	8004058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004756:	2208      	movs	r2, #8
 8004758:	4619      	mov	r1, r3
 800475a:	481a      	ldr	r0, [pc, #104]	; (80047c4 <MX_TIM1_Init+0x184>)
 800475c:	f003 f9f6 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004766:	f7ff fc77 	bl	8004058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800476a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800476e:	220c      	movs	r2, #12
 8004770:	4619      	mov	r1, r3
 8004772:	4814      	ldr	r0, [pc, #80]	; (80047c4 <MX_TIM1_Init+0x184>)
 8004774:	f003 f9ea 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800477e:	f7ff fc6b 	bl	8004058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800479a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800479c:	2300      	movs	r3, #0
 800479e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4807      	ldr	r0, [pc, #28]	; (80047c4 <MX_TIM1_Init+0x184>)
 80047a6:	f003 ff03 	bl	80085b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80047b0:	f7ff fc52 	bl	8004058 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80047b4:	4803      	ldr	r0, [pc, #12]	; (80047c4 <MX_TIM1_Init+0x184>)
 80047b6:	f000 f891 	bl	80048dc <HAL_TIM_MspPostInit>

}
 80047ba:	bf00      	nop
 80047bc:	3758      	adds	r7, #88	; 0x58
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20001a84 	.word	0x20001a84
 80047c8:	40010000 	.word	0x40010000

080047cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047d2:	f107 0308 	add.w	r3, r7, #8
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047e0:	463b      	mov	r3, r7
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80047e8:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <MX_TIM2_Init+0x94>)
 80047ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <MX_TIM2_Init+0x94>)
 80047f2:	22a7      	movs	r2, #167	; 0xa7
 80047f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047f6:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <MX_TIM2_Init+0x94>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 80047fc:	4b18      	ldr	r3, [pc, #96]	; (8004860 <MX_TIM2_Init+0x94>)
 80047fe:	2203      	movs	r2, #3
 8004800:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004802:	4b17      	ldr	r3, [pc, #92]	; (8004860 <MX_TIM2_Init+0x94>)
 8004804:	2200      	movs	r2, #0
 8004806:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <MX_TIM2_Init+0x94>)
 800480a:	2200      	movs	r2, #0
 800480c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800480e:	4814      	ldr	r0, [pc, #80]	; (8004860 <MX_TIM2_Init+0x94>)
 8004810:	f002 ffd2 	bl	80077b8 <HAL_TIM_Base_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800481a:	f7ff fc1d 	bl	8004058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800481e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004822:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004824:	f107 0308 	add.w	r3, r7, #8
 8004828:	4619      	mov	r1, r3
 800482a:	480d      	ldr	r0, [pc, #52]	; (8004860 <MX_TIM2_Init+0x94>)
 800482c:	f003 fa54 	bl	8007cd8 <HAL_TIM_ConfigClockSource>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8004836:	f7ff fc0f 	bl	8004058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800483a:	2300      	movs	r3, #0
 800483c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800483e:	2300      	movs	r3, #0
 8004840:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004842:	463b      	mov	r3, r7
 8004844:	4619      	mov	r1, r3
 8004846:	4806      	ldr	r0, [pc, #24]	; (8004860 <MX_TIM2_Init+0x94>)
 8004848:	f003 fe36 	bl	80084b8 <HAL_TIMEx_MasterConfigSynchronization>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8004852:	f7ff fc01 	bl	8004058 <Error_Handler>
  }

}
 8004856:	bf00      	nop
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20001ac4 	.word	0x20001ac4

08004864 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <HAL_TIM_Base_MspInit+0x70>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d10e      	bne.n	8004894 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <HAL_TIM_Base_MspInit+0x74>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <HAL_TIM_Base_MspInit+0x74>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	6453      	str	r3, [r2, #68]	; 0x44
 8004886:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <HAL_TIM_Base_MspInit+0x74>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004892:	e01a      	b.n	80048ca <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d115      	bne.n	80048ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_TIM_Base_MspInit+0x74>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <HAL_TIM_Base_MspInit+0x74>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	6413      	str	r3, [r2, #64]	; 0x40
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_TIM_Base_MspInit+0x74>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80048ba:	2200      	movs	r2, #0
 80048bc:	2100      	movs	r1, #0
 80048be:	201c      	movs	r0, #28
 80048c0:	f000 fe47 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048c4:	201c      	movs	r0, #28
 80048c6:	f000 fe60 	bl	800558a <HAL_NVIC_EnableIRQ>
}
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40023800 	.word	0x40023800

080048dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a12      	ldr	r2, [pc, #72]	; (8004944 <HAL_TIM_MspPostInit+0x68>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d11e      	bne.n	800493c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <HAL_TIM_MspPostInit+0x6c>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	4a10      	ldr	r2, [pc, #64]	; (8004948 <HAL_TIM_MspPostInit+0x6c>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	6313      	str	r3, [r2, #48]	; 0x30
 800490e:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <HAL_TIM_MspPostInit+0x6c>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800491a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800491e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004920:	2302      	movs	r3, #2
 8004922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004928:	2300      	movs	r3, #0
 800492a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800492c:	2301      	movs	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004930:	f107 030c 	add.w	r3, r7, #12
 8004934:	4619      	mov	r1, r3
 8004936:	4805      	ldr	r0, [pc, #20]	; (800494c <HAL_TIM_MspPostInit+0x70>)
 8004938:	f001 f9d2 	bl	8005ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800493c:	bf00      	nop
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40010000 	.word	0x40010000
 8004948:	40023800 	.word	0x40023800
 800494c:	40020000 	.word	0x40020000

08004950 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004954:	4b11      	ldr	r3, [pc, #68]	; (800499c <MX_USART2_UART_Init+0x4c>)
 8004956:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <MX_USART2_UART_Init+0x50>)
 8004958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <MX_USART2_UART_Init+0x4c>)
 800495c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004962:	4b0e      	ldr	r3, [pc, #56]	; (800499c <MX_USART2_UART_Init+0x4c>)
 8004964:	2200      	movs	r2, #0
 8004966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <MX_USART2_UART_Init+0x4c>)
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800496e:	4b0b      	ldr	r3, [pc, #44]	; (800499c <MX_USART2_UART_Init+0x4c>)
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004974:	4b09      	ldr	r3, [pc, #36]	; (800499c <MX_USART2_UART_Init+0x4c>)
 8004976:	220c      	movs	r2, #12
 8004978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800497a:	4b08      	ldr	r3, [pc, #32]	; (800499c <MX_USART2_UART_Init+0x4c>)
 800497c:	2200      	movs	r2, #0
 800497e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <MX_USART2_UART_Init+0x4c>)
 8004982:	2200      	movs	r2, #0
 8004984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004986:	4805      	ldr	r0, [pc, #20]	; (800499c <MX_USART2_UART_Init+0x4c>)
 8004988:	f003 fe78 	bl	800867c <HAL_UART_Init>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004992:	f7ff fb61 	bl	8004058 <Error_Handler>
  }

}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20001d04 	.word	0x20001d04
 80049a0:	40004400 	.word	0x40004400

080049a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <MX_USART3_UART_Init+0x4c>)
 80049aa:	4a12      	ldr	r2, [pc, #72]	; (80049f4 <MX_USART3_UART_Init+0x50>)
 80049ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <MX_USART3_UART_Init+0x4c>)
 80049b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80049b6:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <MX_USART3_UART_Init+0x4c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80049bc:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <MX_USART3_UART_Init+0x4c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <MX_USART3_UART_Init+0x4c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <MX_USART3_UART_Init+0x4c>)
 80049ca:	220c      	movs	r2, #12
 80049cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <MX_USART3_UART_Init+0x4c>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <MX_USART3_UART_Init+0x4c>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80049da:	4805      	ldr	r0, [pc, #20]	; (80049f0 <MX_USART3_UART_Init+0x4c>)
 80049dc:	f003 fe4e 	bl	800867c <HAL_UART_Init>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80049e6:	f7ff fb37 	bl	8004058 <Error_Handler>
  }

}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20001c24 	.word	0x20001c24
 80049f4:	40004800 	.word	0x40004800

080049f8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <MX_USART6_UART_Init+0x4c>)
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <MX_USART6_UART_Init+0x50>)
 8004a00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8004a02:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <MX_USART6_UART_Init+0x4c>)
 8004a04:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8004a08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <MX_USART6_UART_Init+0x4c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <MX_USART6_UART_Init+0x4c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <MX_USART6_UART_Init+0x4c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <MX_USART6_UART_Init+0x4c>)
 8004a1e:	220c      	movs	r2, #12
 8004a20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <MX_USART6_UART_Init+0x4c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <MX_USART6_UART_Init+0x4c>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004a2e:	4805      	ldr	r0, [pc, #20]	; (8004a44 <MX_USART6_UART_Init+0x4c>)
 8004a30:	f003 fe24 	bl	800867c <HAL_UART_Init>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004a3a:	f7ff fb0d 	bl	8004058 <Error_Handler>
  }

}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20001cc4 	.word	0x20001cc4
 8004a48:	40011400 	.word	0x40011400

08004a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08e      	sub	sp, #56	; 0x38
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	605a      	str	r2, [r3, #4]
 8004a5e:	609a      	str	r2, [r3, #8]
 8004a60:	60da      	str	r2, [r3, #12]
 8004a62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a63      	ldr	r2, [pc, #396]	; (8004bf8 <HAL_UART_MspInit+0x1ac>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d15a      	bne.n	8004b24 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	623b      	str	r3, [r7, #32]
 8004a72:	4b62      	ldr	r3, [pc, #392]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	4a61      	ldr	r2, [pc, #388]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7e:	4b5f      	ldr	r3, [pc, #380]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	4b5b      	ldr	r3, [pc, #364]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	4a5a      	ldr	r2, [pc, #360]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9a:	4b58      	ldr	r3, [pc, #352]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ab6:	2307      	movs	r3, #7
 8004ab8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004abe:	4619      	mov	r1, r3
 8004ac0:	484f      	ldr	r0, [pc, #316]	; (8004c00 <HAL_UART_MspInit+0x1b4>)
 8004ac2:	f001 f90d 	bl	8005ce0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004ac6:	4b4f      	ldr	r3, [pc, #316]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004ac8:	4a4f      	ldr	r2, [pc, #316]	; (8004c08 <HAL_UART_MspInit+0x1bc>)
 8004aca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004acc:	4b4d      	ldr	r3, [pc, #308]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ad2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ad4:	4b4b      	ldr	r3, [pc, #300]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ada:	4b4a      	ldr	r3, [pc, #296]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ae0:	4b48      	ldr	r3, [pc, #288]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ae6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ae8:	4b46      	ldr	r3, [pc, #280]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004aee:	4b45      	ldr	r3, [pc, #276]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004af4:	4b43      	ldr	r3, [pc, #268]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004afa:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b00:	4b40      	ldr	r3, [pc, #256]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004b06:	483f      	ldr	r0, [pc, #252]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004b08:	f000 fd5a 	bl	80055c0 <HAL_DMA_Init>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004b12:	f7ff faa1 	bl	8004058 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a3a      	ldr	r2, [pc, #232]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004b1a:	635a      	str	r2, [r3, #52]	; 0x34
 8004b1c:	4a39      	ldr	r2, [pc, #228]	; (8004c04 <HAL_UART_MspInit+0x1b8>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004b22:	e109      	b.n	8004d38 <HAL_UART_MspInit+0x2ec>
  else if(uartHandle->Instance==USART3)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a38      	ldr	r2, [pc, #224]	; (8004c0c <HAL_UART_MspInit+0x1c0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d176      	bne.n	8004c1c <HAL_UART_MspInit+0x1d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	4b32      	ldr	r3, [pc, #200]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	4a31      	ldr	r2, [pc, #196]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3e:	4b2f      	ldr	r3, [pc, #188]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004b54:	f043 0302 	orr.w	r3, r3, #2
 8004b58:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5a:	4b28      	ldr	r3, [pc, #160]	; (8004bfc <HAL_UART_MspInit+0x1b0>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b74:	2303      	movs	r3, #3
 8004b76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b78:	2307      	movs	r3, #7
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b80:	4619      	mov	r1, r3
 8004b82:	4823      	ldr	r0, [pc, #140]	; (8004c10 <HAL_UART_MspInit+0x1c4>)
 8004b84:	f001 f8ac 	bl	8005ce0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004b88:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004b8a:	4a23      	ldr	r2, [pc, #140]	; (8004c18 <HAL_UART_MspInit+0x1cc>)
 8004b8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004b8e:	4b21      	ldr	r3, [pc, #132]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004b90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b94:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b96:	4b1f      	ldr	r3, [pc, #124]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ba2:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ba8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004baa:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bb0:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004bb6:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bbc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004bbe:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004bca:	4812      	ldr	r0, [pc, #72]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004bcc:	f000 fcf8 	bl	80055c0 <HAL_DMA_Init>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8004bd6:	f7ff fa3f 	bl	8004058 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a0d      	ldr	r2, [pc, #52]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004bde:	635a      	str	r2, [r3, #52]	; 0x34
 8004be0:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <HAL_UART_MspInit+0x1c8>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004be6:	2200      	movs	r2, #0
 8004be8:	2100      	movs	r1, #0
 8004bea:	2027      	movs	r0, #39	; 0x27
 8004bec:	f000 fcb1 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004bf0:	2027      	movs	r0, #39	; 0x27
 8004bf2:	f000 fcca 	bl	800558a <HAL_NVIC_EnableIRQ>
}
 8004bf6:	e09f      	b.n	8004d38 <HAL_UART_MspInit+0x2ec>
 8004bf8:	40004400 	.word	0x40004400
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	40020000 	.word	0x40020000
 8004c04:	20001b04 	.word	0x20001b04
 8004c08:	40026088 	.word	0x40026088
 8004c0c:	40004800 	.word	0x40004800
 8004c10:	40020400 	.word	0x40020400
 8004c14:	20001bc4 	.word	0x20001bc4
 8004c18:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a47      	ldr	r2, [pc, #284]	; (8004d40 <HAL_UART_MspInit+0x2f4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	f040 8088 	bne.w	8004d38 <HAL_UART_MspInit+0x2ec>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	4b45      	ldr	r3, [pc, #276]	; (8004d44 <HAL_UART_MspInit+0x2f8>)
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	4a44      	ldr	r2, [pc, #272]	; (8004d44 <HAL_UART_MspInit+0x2f8>)
 8004c32:	f043 0320 	orr.w	r3, r3, #32
 8004c36:	6453      	str	r3, [r2, #68]	; 0x44
 8004c38:	4b42      	ldr	r3, [pc, #264]	; (8004d44 <HAL_UART_MspInit+0x2f8>)
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	4b3e      	ldr	r3, [pc, #248]	; (8004d44 <HAL_UART_MspInit+0x2f8>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	4a3d      	ldr	r2, [pc, #244]	; (8004d44 <HAL_UART_MspInit+0x2f8>)
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	6313      	str	r3, [r2, #48]	; 0x30
 8004c54:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <HAL_UART_MspInit+0x2f8>)
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c60:	23c0      	movs	r3, #192	; 0xc0
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c64:	2302      	movs	r3, #2
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c70:	2308      	movs	r3, #8
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4833      	ldr	r0, [pc, #204]	; (8004d48 <HAL_UART_MspInit+0x2fc>)
 8004c7c:	f001 f830 	bl	8005ce0 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004c80:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004c82:	4a33      	ldr	r2, [pc, #204]	; (8004d50 <HAL_UART_MspInit+0x304>)
 8004c84:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004c86:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004c88:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004c8c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c8e:	4b2f      	ldr	r3, [pc, #188]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004c90:	2240      	movs	r2, #64	; 0x40
 8004c92:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c94:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ca0:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ca2:	4b2a      	ldr	r3, [pc, #168]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ca8:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004cae:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cba:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004cc0:	4822      	ldr	r0, [pc, #136]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004cc2:	f000 fc7d 	bl	80055c0 <HAL_DMA_Init>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8004ccc:	f7ff f9c4 	bl	8004058 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8004cd6:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <HAL_UART_MspInit+0x300>)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004cdc:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004cde:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <HAL_UART_MspInit+0x30c>)
 8004ce0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004ce4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004ce8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cea:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cf0:	4b18      	ldr	r3, [pc, #96]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cf6:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cfc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d04:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d10:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004d1c:	480d      	ldr	r0, [pc, #52]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004d1e:	f000 fc4f 	bl	80055c0 <HAL_DMA_Init>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8004d28:	f7ff f996 	bl	8004058 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004d30:	635a      	str	r2, [r3, #52]	; 0x34
 8004d32:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <HAL_UART_MspInit+0x308>)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004d38:	bf00      	nop
 8004d3a:	3738      	adds	r7, #56	; 0x38
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40011400 	.word	0x40011400
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40020800 	.word	0x40020800
 8004d4c:	20001c64 	.word	0x20001c64
 8004d50:	400264a0 	.word	0x400264a0
 8004d54:	20001b64 	.word	0x20001b64
 8004d58:	40026428 	.word	0x40026428

08004d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d62:	e003      	b.n	8004d6c <LoopCopyDataInit>

08004d64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d6a:	3104      	adds	r1, #4

08004d6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d6c:	480b      	ldr	r0, [pc, #44]	; (8004d9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d6e:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d74:	d3f6      	bcc.n	8004d64 <CopyDataInit>
  ldr  r2, =_sbss
 8004d76:	4a0b      	ldr	r2, [pc, #44]	; (8004da4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d78:	e002      	b.n	8004d80 <LoopFillZerobss>

08004d7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d7c:	f842 3b04 	str.w	r3, [r2], #4

08004d80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d84:	d3f9      	bcc.n	8004d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d86:	f7ff fc45 	bl	8004614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d8a:	f005 f99f 	bl	800a0cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d8e:	f7ff f859 	bl	8003e44 <main>
  bx  lr    
 8004d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004d98:	0800d044 	.word	0x0800d044
  ldr  r0, =_sdata
 8004d9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004da0:	200011d0 	.word	0x200011d0
  ldr  r2, =_sbss
 8004da4:	200011d0 	.word	0x200011d0
  ldr  r3, = _ebss
 8004da8:	20001d4c 	.word	0x20001d4c

08004dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dac:	e7fe      	b.n	8004dac <ADC_IRQHandler>
	...

08004db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <HAL_Init+0x40>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <HAL_Init+0x40>)
 8004dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_Init+0x40>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <HAL_Init+0x40>)
 8004dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <HAL_Init+0x40>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a07      	ldr	r2, [pc, #28]	; (8004df0 <HAL_Init+0x40>)
 8004dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dd8:	2003      	movs	r0, #3
 8004dda:	f000 fbaf 	bl	800553c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dde:	2000      	movs	r0, #0
 8004de0:	f000 f808 	bl	8004df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004de4:	f7ff faf2 	bl	80043cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40023c00 	.word	0x40023c00

08004df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_InitTick+0x54>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_InitTick+0x58>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	4619      	mov	r1, r3
 8004e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fbc7 	bl	80055a6 <HAL_SYSTICK_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e00e      	b.n	8004e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b0f      	cmp	r3, #15
 8004e26:	d80a      	bhi.n	8004e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	f000 fb8f 	bl	8005552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e34:	4a06      	ldr	r2, [pc, #24]	; (8004e50 <HAL_InitTick+0x5c>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e000      	b.n	8004e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000ff0 	.word	0x20000ff0
 8004e4c:	20000ff8 	.word	0x20000ff8
 8004e50:	20000ff4 	.word	0x20000ff4

08004e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_IncTick+0x20>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_IncTick+0x24>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4413      	add	r3, r2
 8004e64:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <HAL_IncTick+0x24>)
 8004e66:	6013      	str	r3, [r2, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000ff8 	.word	0x20000ff8
 8004e78:	20001d44 	.word	0x20001d44

08004e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <HAL_GetTick+0x14>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20001d44 	.word	0x20001d44

08004e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e9c:	f7ff ffee 	bl	8004e7c <HAL_GetTick>
 8004ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d005      	beq.n	8004eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_Delay+0x40>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004eba:	bf00      	nop
 8004ebc:	f7ff ffde 	bl	8004e7c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d8f7      	bhi.n	8004ebc <HAL_Delay+0x28>
  {
  }
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000ff8 	.word	0x20000ff8

08004ed8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e033      	b.n	8004f56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fe fd1a 	bl	8003930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d118      	bne.n	8004f48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f1e:	f023 0302 	bic.w	r3, r3, #2
 8004f22:	f043 0202 	orr.w	r2, r3, #2
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f93a 	bl	80051a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	f043 0201 	orr.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40
 8004f46:	e001      	b.n	8004f4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x1c>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e105      	b.n	8005188 <HAL_ADC_ConfigChannel+0x228>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b09      	cmp	r3, #9
 8004f8a:	d925      	bls.n	8004fd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68d9      	ldr	r1, [r3, #12]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3b1e      	subs	r3, #30
 8004fa2:	2207      	movs	r2, #7
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	400a      	ands	r2, r1
 8004fb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68d9      	ldr	r1, [r3, #12]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	4403      	add	r3, r0
 8004fca:	3b1e      	subs	r3, #30
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	60da      	str	r2, [r3, #12]
 8004fd6:	e022      	b.n	800501e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6919      	ldr	r1, [r3, #16]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4413      	add	r3, r2
 8004fec:	2207      	movs	r2, #7
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6919      	ldr	r1, [r3, #16]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	4618      	mov	r0, r3
 800500e:	4603      	mov	r3, r0
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	4403      	add	r3, r0
 8005014:	409a      	lsls	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b06      	cmp	r3, #6
 8005024:	d824      	bhi.n	8005070 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	3b05      	subs	r3, #5
 8005038:	221f      	movs	r2, #31
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	43da      	mvns	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	400a      	ands	r2, r1
 8005046:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	4618      	mov	r0, r3
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	3b05      	subs	r3, #5
 8005062:	fa00 f203 	lsl.w	r2, r0, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	635a      	str	r2, [r3, #52]	; 0x34
 800506e:	e04c      	b.n	800510a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b0c      	cmp	r3, #12
 8005076:	d824      	bhi.n	80050c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	3b23      	subs	r3, #35	; 0x23
 800508a:	221f      	movs	r2, #31
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43da      	mvns	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	400a      	ands	r2, r1
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	4618      	mov	r0, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	3b23      	subs	r3, #35	; 0x23
 80050b4:	fa00 f203 	lsl.w	r2, r0, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
 80050c0:	e023      	b.n	800510a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	3b41      	subs	r3, #65	; 0x41
 80050d4:	221f      	movs	r2, #31
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43da      	mvns	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	400a      	ands	r2, r1
 80050e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	4618      	mov	r0, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	3b41      	subs	r3, #65	; 0x41
 80050fe:	fa00 f203 	lsl.w	r2, r0, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800510a:	4b22      	ldr	r3, [pc, #136]	; (8005194 <HAL_ADC_ConfigChannel+0x234>)
 800510c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a21      	ldr	r2, [pc, #132]	; (8005198 <HAL_ADC_ConfigChannel+0x238>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d109      	bne.n	800512c <HAL_ADC_ConfigChannel+0x1cc>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b12      	cmp	r3, #18
 800511e:	d105      	bne.n	800512c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a19      	ldr	r2, [pc, #100]	; (8005198 <HAL_ADC_ConfigChannel+0x238>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d123      	bne.n	800517e <HAL_ADC_ConfigChannel+0x21e>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b10      	cmp	r3, #16
 800513c:	d003      	beq.n	8005146 <HAL_ADC_ConfigChannel+0x1e6>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b11      	cmp	r3, #17
 8005144:	d11b      	bne.n	800517e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b10      	cmp	r3, #16
 8005158:	d111      	bne.n	800517e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <HAL_ADC_ConfigChannel+0x23c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a10      	ldr	r2, [pc, #64]	; (80051a0 <HAL_ADC_ConfigChannel+0x240>)
 8005160:	fba2 2303 	umull	r2, r3, r2, r3
 8005164:	0c9a      	lsrs	r2, r3, #18
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005170:	e002      	b.n	8005178 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	3b01      	subs	r3, #1
 8005176:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f9      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	40012300 	.word	0x40012300
 8005198:	40012000 	.word	0x40012000
 800519c:	20000ff0 	.word	0x20000ff0
 80051a0:	431bde83 	.word	0x431bde83

080051a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051ac:	4b79      	ldr	r3, [pc, #484]	; (8005394 <ADC_Init+0x1f0>)
 80051ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	021a      	lsls	r2, r3, #8
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80051fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6859      	ldr	r1, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800521e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6899      	ldr	r1, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	4a58      	ldr	r2, [pc, #352]	; (8005398 <ADC_Init+0x1f4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d022      	beq.n	8005282 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800524a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6899      	ldr	r1, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800526c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6899      	ldr	r1, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	e00f      	b.n	80052a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0202 	bic.w	r2, r2, #2
 80052b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6899      	ldr	r1, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	7e1b      	ldrb	r3, [r3, #24]
 80052bc:	005a      	lsls	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80052ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	3b01      	subs	r3, #1
 80052fc:	035a      	lsls	r2, r3, #13
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	e007      	b.n	8005318 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005316:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	3b01      	subs	r3, #1
 8005334:	051a      	lsls	r2, r3, #20
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800534c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6899      	ldr	r1, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800535a:	025a      	lsls	r2, r3, #9
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6899      	ldr	r1, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	029a      	lsls	r2, r3, #10
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	609a      	str	r2, [r3, #8]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	40012300 	.word	0x40012300
 8005398:	0f000001 	.word	0x0f000001

0800539c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053ac:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <__NVIC_SetPriorityGrouping+0x44>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053b8:	4013      	ands	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ce:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <__NVIC_SetPriorityGrouping+0x44>)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	60d3      	str	r3, [r2, #12]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	e000ed00 	.word	0xe000ed00

080053e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <__NVIC_GetPriorityGrouping+0x18>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	0a1b      	lsrs	r3, r3, #8
 80053ee:	f003 0307 	and.w	r3, r3, #7
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	e000ed00 	.word	0xe000ed00

08005400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	2b00      	cmp	r3, #0
 8005410:	db0b      	blt.n	800542a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	f003 021f 	and.w	r2, r3, #31
 8005418:	4907      	ldr	r1, [pc, #28]	; (8005438 <__NVIC_EnableIRQ+0x38>)
 800541a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2001      	movs	r0, #1
 8005422:	fa00 f202 	lsl.w	r2, r0, r2
 8005426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	e000e100 	.word	0xe000e100

0800543c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	6039      	str	r1, [r7, #0]
 8005446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544c:	2b00      	cmp	r3, #0
 800544e:	db0a      	blt.n	8005466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	490c      	ldr	r1, [pc, #48]	; (8005488 <__NVIC_SetPriority+0x4c>)
 8005456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545a:	0112      	lsls	r2, r2, #4
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	440b      	add	r3, r1
 8005460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005464:	e00a      	b.n	800547c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4908      	ldr	r1, [pc, #32]	; (800548c <__NVIC_SetPriority+0x50>)
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	3b04      	subs	r3, #4
 8005474:	0112      	lsls	r2, r2, #4
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	440b      	add	r3, r1
 800547a:	761a      	strb	r2, [r3, #24]
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	e000e100 	.word	0xe000e100
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	; 0x24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f1c3 0307 	rsb	r3, r3, #7
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	bf28      	it	cs
 80054ae:	2304      	movcs	r3, #4
 80054b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d902      	bls.n	80054c0 <NVIC_EncodePriority+0x30>
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3b03      	subs	r3, #3
 80054be:	e000      	b.n	80054c2 <NVIC_EncodePriority+0x32>
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43da      	mvns	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	401a      	ands	r2, r3
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054d8:	f04f 31ff 	mov.w	r1, #4294967295
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	43d9      	mvns	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e8:	4313      	orrs	r3, r2
         );
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	; 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3b01      	subs	r3, #1
 8005504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005508:	d301      	bcc.n	800550e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800550a:	2301      	movs	r3, #1
 800550c:	e00f      	b.n	800552e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800550e:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <SysTick_Config+0x40>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005516:	210f      	movs	r1, #15
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	f7ff ff8e 	bl	800543c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <SysTick_Config+0x40>)
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005526:	4b04      	ldr	r3, [pc, #16]	; (8005538 <SysTick_Config+0x40>)
 8005528:	2207      	movs	r2, #7
 800552a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	e000e010 	.word	0xe000e010

0800553c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff29 	bl	800539c <__NVIC_SetPriorityGrouping>
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af00      	add	r7, sp, #0
 8005558:	4603      	mov	r3, r0
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005564:	f7ff ff3e 	bl	80053e4 <__NVIC_GetPriorityGrouping>
 8005568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	6978      	ldr	r0, [r7, #20]
 8005570:	f7ff ff8e 	bl	8005490 <NVIC_EncodePriority>
 8005574:	4602      	mov	r2, r0
 8005576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800557a:	4611      	mov	r1, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff ff5d 	bl	800543c <__NVIC_SetPriority>
}
 8005582:	bf00      	nop
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	4603      	mov	r3, r0
 8005592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff ff31 	bl	8005400 <__NVIC_EnableIRQ>
}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff ffa2 	bl	80054f8 <SysTick_Config>
 80055b4:	4603      	mov	r3, r0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055cc:	f7ff fc56 	bl	8004e7c <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e099      	b.n	8005710 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055fc:	e00f      	b.n	800561e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055fe:	f7ff fc3d 	bl	8004e7c <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b05      	cmp	r3, #5
 800560a:	d908      	bls.n	800561e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2203      	movs	r2, #3
 8005616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e078      	b.n	8005710 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e8      	bne.n	80055fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4b38      	ldr	r3, [pc, #224]	; (8005718 <HAL_DMA_Init+0x158>)
 8005638:	4013      	ands	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800564a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005656:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005662:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	2b04      	cmp	r3, #4
 8005676:	d107      	bne.n	8005688 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	4313      	orrs	r3, r2
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0307 	bic.w	r3, r3, #7
 800569e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d117      	bne.n	80056e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00e      	beq.n	80056e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fa91 	bl	8005bec <DMA_CheckFifoParam>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2240      	movs	r2, #64	; 0x40
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056de:	2301      	movs	r3, #1
 80056e0:	e016      	b.n	8005710 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa48 	bl	8005b80 <DMA_CalcBaseAndBitshift>
 80056f0:	4603      	mov	r3, r0
 80056f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f8:	223f      	movs	r2, #63	; 0x3f
 80056fa:	409a      	lsls	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	f010803f 	.word	0xf010803f

0800571c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005732:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_DMA_Start_IT+0x26>
 800573e:	2302      	movs	r3, #2
 8005740:	e040      	b.n	80057c4 <HAL_DMA_Start_IT+0xa8>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	d12f      	bne.n	80057b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2202      	movs	r2, #2
 800575a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f9da 	bl	8005b24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005774:	223f      	movs	r2, #63	; 0x3f
 8005776:	409a      	lsls	r2, r3
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0216 	orr.w	r2, r2, #22
 800578a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d007      	beq.n	80057a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0208 	orr.w	r2, r2, #8
 80057a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	e005      	b.n	80057c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057be:	2302      	movs	r3, #2
 80057c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d004      	beq.n	80057ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2280      	movs	r2, #128	; 0x80
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e00c      	b.n	8005804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2205      	movs	r2, #5
 80057ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800581c:	4b92      	ldr	r3, [pc, #584]	; (8005a68 <HAL_DMA_IRQHandler+0x258>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a92      	ldr	r2, [pc, #584]	; (8005a6c <HAL_DMA_IRQHandler+0x25c>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	0a9b      	lsrs	r3, r3, #10
 8005828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	2208      	movs	r2, #8
 800583c:	409a      	lsls	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4013      	ands	r3, r2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01a      	beq.n	800587c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d013      	beq.n	800587c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0204 	bic.w	r2, r2, #4
 8005862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005868:	2208      	movs	r2, #8
 800586a:	409a      	lsls	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	f043 0201 	orr.w	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005880:	2201      	movs	r2, #1
 8005882:	409a      	lsls	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4013      	ands	r3, r2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d012      	beq.n	80058b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589e:	2201      	movs	r2, #1
 80058a0:	409a      	lsls	r2, r3
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b6:	2204      	movs	r2, #4
 80058b8:	409a      	lsls	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4013      	ands	r3, r2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d012      	beq.n	80058e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00b      	beq.n	80058e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d4:	2204      	movs	r2, #4
 80058d6:	409a      	lsls	r2, r3
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e0:	f043 0204 	orr.w	r2, r3, #4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ec:	2210      	movs	r2, #16
 80058ee:	409a      	lsls	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d043      	beq.n	8005980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d03c      	beq.n	8005980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590a:	2210      	movs	r2, #16
 800590c:	409a      	lsls	r2, r3
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d018      	beq.n	8005952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d024      	beq.n	8005980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
 800593e:	e01f      	b.n	8005980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01b      	beq.n	8005980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
 8005950:	e016      	b.n	8005980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d107      	bne.n	8005970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0208 	bic.w	r2, r2, #8
 800596e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	2220      	movs	r2, #32
 8005986:	409a      	lsls	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 808e 	beq.w	8005aae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8086 	beq.w	8005aae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a6:	2220      	movs	r2, #32
 80059a8:	409a      	lsls	r2, r3
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b05      	cmp	r3, #5
 80059b8:	d136      	bne.n	8005a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0216 	bic.w	r2, r2, #22
 80059c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695a      	ldr	r2, [r3, #20]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <HAL_DMA_IRQHandler+0x1da>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0208 	bic.w	r2, r2, #8
 80059f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fe:	223f      	movs	r2, #63	; 0x3f
 8005a00:	409a      	lsls	r2, r3
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d07d      	beq.n	8005b1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	4798      	blx	r3
        }
        return;
 8005a26:	e078      	b.n	8005b1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01c      	beq.n	8005a70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d108      	bne.n	8005a56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d030      	beq.n	8005aae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
 8005a54:	e02b      	b.n	8005aae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d027      	beq.n	8005aae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	4798      	blx	r3
 8005a66:	e022      	b.n	8005aae <HAL_DMA_IRQHandler+0x29e>
 8005a68:	20000ff0 	.word	0x20000ff0
 8005a6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10f      	bne.n	8005a9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0210 	bic.w	r2, r2, #16
 8005a8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d032      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d022      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2205      	movs	r2, #5
 8005ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d307      	bcc.n	8005af6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f2      	bne.n	8005ada <HAL_DMA_IRQHandler+0x2ca>
 8005af4:	e000      	b.n	8005af8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005af6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	4798      	blx	r3
 8005b18:	e000      	b.n	8005b1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8005b1a:	bf00      	nop
    }
  }
}
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop

08005b24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b40      	cmp	r3, #64	; 0x40
 8005b50:	d108      	bne.n	8005b64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b62:	e007      	b.n	8005b74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	60da      	str	r2, [r3, #12]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	3b10      	subs	r3, #16
 8005b90:	4a14      	ldr	r2, [pc, #80]	; (8005be4 <DMA_CalcBaseAndBitshift+0x64>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	091b      	lsrs	r3, r3, #4
 8005b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b9a:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <DMA_CalcBaseAndBitshift+0x68>)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d909      	bls.n	8005bc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	1d1a      	adds	r2, r3, #4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	659a      	str	r2, [r3, #88]	; 0x58
 8005bc0:	e007      	b.n	8005bd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	aaaaaaab 	.word	0xaaaaaaab
 8005be8:	0800cd64 	.word	0x0800cd64

08005bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d11f      	bne.n	8005c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d855      	bhi.n	8005cb8 <DMA_CheckFifoParam+0xcc>
 8005c0c:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <DMA_CheckFifoParam+0x28>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c25 	.word	0x08005c25
 8005c18:	08005c37 	.word	0x08005c37
 8005c1c:	08005c25 	.word	0x08005c25
 8005c20:	08005cb9 	.word	0x08005cb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d045      	beq.n	8005cbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c34:	e042      	b.n	8005cbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c3e:	d13f      	bne.n	8005cc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c44:	e03c      	b.n	8005cc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4e:	d121      	bne.n	8005c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d836      	bhi.n	8005cc4 <DMA_CheckFifoParam+0xd8>
 8005c56:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <DMA_CheckFifoParam+0x70>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005c6d 	.word	0x08005c6d
 8005c60:	08005c73 	.word	0x08005c73
 8005c64:	08005c6d 	.word	0x08005c6d
 8005c68:	08005c85 	.word	0x08005c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c70:	e02f      	b.n	8005cd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d024      	beq.n	8005cc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c82:	e021      	b.n	8005cc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c8c:	d11e      	bne.n	8005ccc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c92:	e01b      	b.n	8005ccc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d902      	bls.n	8005ca0 <DMA_CheckFifoParam+0xb4>
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d003      	beq.n	8005ca6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c9e:	e018      	b.n	8005cd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca4:	e015      	b.n	8005cd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00e      	beq.n	8005cd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb6:	e00b      	b.n	8005cd0 <DMA_CheckFifoParam+0xe4>
      break;
 8005cb8:	bf00      	nop
 8005cba:	e00a      	b.n	8005cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005cbc:	bf00      	nop
 8005cbe:	e008      	b.n	8005cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005cc0:	bf00      	nop
 8005cc2:	e006      	b.n	8005cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005cc4:	bf00      	nop
 8005cc6:	e004      	b.n	8005cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005cc8:	bf00      	nop
 8005cca:	e002      	b.n	8005cd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8005ccc:	bf00      	nop
 8005cce:	e000      	b.n	8005cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005cd0:	bf00      	nop
    }
  } 
  
  return status; 
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b089      	sub	sp, #36	; 0x24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61fb      	str	r3, [r7, #28]
 8005cfa:	e16b      	b.n	8005fd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	f040 815a 	bne.w	8005fce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d00b      	beq.n	8005d3a <HAL_GPIO_Init+0x5a>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d007      	beq.n	8005d3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d2e:	2b11      	cmp	r3, #17
 8005d30:	d003      	beq.n	8005d3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b12      	cmp	r3, #18
 8005d38:	d130      	bne.n	8005d9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	2203      	movs	r2, #3
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d70:	2201      	movs	r2, #1
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	091b      	lsrs	r3, r3, #4
 8005d86:	f003 0201 	and.w	r2, r3, #1
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	2203      	movs	r2, #3
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	4013      	ands	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d003      	beq.n	8005ddc <HAL_GPIO_Init+0xfc>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b12      	cmp	r3, #18
 8005dda:	d123      	bne.n	8005e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	08da      	lsrs	r2, r3, #3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3208      	adds	r2, #8
 8005de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	220f      	movs	r2, #15
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	08da      	lsrs	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3208      	adds	r2, #8
 8005e1e:	69b9      	ldr	r1, [r7, #24]
 8005e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	2203      	movs	r2, #3
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	43db      	mvns	r3, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f003 0203 	and.w	r2, r3, #3
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 80b4 	beq.w	8005fce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	4b5f      	ldr	r3, [pc, #380]	; (8005fe8 <HAL_GPIO_Init+0x308>)
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	4a5e      	ldr	r2, [pc, #376]	; (8005fe8 <HAL_GPIO_Init+0x308>)
 8005e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e74:	6453      	str	r3, [r2, #68]	; 0x44
 8005e76:	4b5c      	ldr	r3, [pc, #368]	; (8005fe8 <HAL_GPIO_Init+0x308>)
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e82:	4a5a      	ldr	r2, [pc, #360]	; (8005fec <HAL_GPIO_Init+0x30c>)
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	089b      	lsrs	r3, r3, #2
 8005e88:	3302      	adds	r3, #2
 8005e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	220f      	movs	r2, #15
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a51      	ldr	r2, [pc, #324]	; (8005ff0 <HAL_GPIO_Init+0x310>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d02b      	beq.n	8005f06 <HAL_GPIO_Init+0x226>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a50      	ldr	r2, [pc, #320]	; (8005ff4 <HAL_GPIO_Init+0x314>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d025      	beq.n	8005f02 <HAL_GPIO_Init+0x222>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a4f      	ldr	r2, [pc, #316]	; (8005ff8 <HAL_GPIO_Init+0x318>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01f      	beq.n	8005efe <HAL_GPIO_Init+0x21e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a4e      	ldr	r2, [pc, #312]	; (8005ffc <HAL_GPIO_Init+0x31c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d019      	beq.n	8005efa <HAL_GPIO_Init+0x21a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a4d      	ldr	r2, [pc, #308]	; (8006000 <HAL_GPIO_Init+0x320>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_GPIO_Init+0x216>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a4c      	ldr	r2, [pc, #304]	; (8006004 <HAL_GPIO_Init+0x324>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00d      	beq.n	8005ef2 <HAL_GPIO_Init+0x212>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a4b      	ldr	r2, [pc, #300]	; (8006008 <HAL_GPIO_Init+0x328>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <HAL_GPIO_Init+0x20e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a4a      	ldr	r2, [pc, #296]	; (800600c <HAL_GPIO_Init+0x32c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <HAL_GPIO_Init+0x20a>
 8005ee6:	2307      	movs	r3, #7
 8005ee8:	e00e      	b.n	8005f08 <HAL_GPIO_Init+0x228>
 8005eea:	2308      	movs	r3, #8
 8005eec:	e00c      	b.n	8005f08 <HAL_GPIO_Init+0x228>
 8005eee:	2306      	movs	r3, #6
 8005ef0:	e00a      	b.n	8005f08 <HAL_GPIO_Init+0x228>
 8005ef2:	2305      	movs	r3, #5
 8005ef4:	e008      	b.n	8005f08 <HAL_GPIO_Init+0x228>
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	e006      	b.n	8005f08 <HAL_GPIO_Init+0x228>
 8005efa:	2303      	movs	r3, #3
 8005efc:	e004      	b.n	8005f08 <HAL_GPIO_Init+0x228>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e002      	b.n	8005f08 <HAL_GPIO_Init+0x228>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <HAL_GPIO_Init+0x228>
 8005f06:	2300      	movs	r3, #0
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	f002 0203 	and.w	r2, r2, #3
 8005f0e:	0092      	lsls	r2, r2, #2
 8005f10:	4093      	lsls	r3, r2
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f18:	4934      	ldr	r1, [pc, #208]	; (8005fec <HAL_GPIO_Init+0x30c>)
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	089b      	lsrs	r3, r3, #2
 8005f1e:	3302      	adds	r3, #2
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f26:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <HAL_GPIO_Init+0x330>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4013      	ands	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f4a:	4a31      	ldr	r2, [pc, #196]	; (8006010 <HAL_GPIO_Init+0x330>)
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f50:	4b2f      	ldr	r3, [pc, #188]	; (8006010 <HAL_GPIO_Init+0x330>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	43db      	mvns	r3, r3
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f74:	4a26      	ldr	r2, [pc, #152]	; (8006010 <HAL_GPIO_Init+0x330>)
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f7a:	4b25      	ldr	r3, [pc, #148]	; (8006010 <HAL_GPIO_Init+0x330>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	43db      	mvns	r3, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	4013      	ands	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f9e:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <HAL_GPIO_Init+0x330>)
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fa4:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <HAL_GPIO_Init+0x330>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	43db      	mvns	r3, r3
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fc8:	4a11      	ldr	r2, [pc, #68]	; (8006010 <HAL_GPIO_Init+0x330>)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b0f      	cmp	r3, #15
 8005fd8:	f67f ae90 	bls.w	8005cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fdc:	bf00      	nop
 8005fde:	3724      	adds	r7, #36	; 0x24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	40013800 	.word	0x40013800
 8005ff0:	40020000 	.word	0x40020000
 8005ff4:	40020400 	.word	0x40020400
 8005ff8:	40020800 	.word	0x40020800
 8005ffc:	40020c00 	.word	0x40020c00
 8006000:	40021000 	.word	0x40021000
 8006004:	40021400 	.word	0x40021400
 8006008:	40021800 	.word	0x40021800
 800600c:	40021c00 	.word	0x40021c00
 8006010:	40013c00 	.word	0x40013c00

08006014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	807b      	strh	r3, [r7, #2]
 8006020:	4613      	mov	r3, r2
 8006022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006024:	787b      	ldrb	r3, [r7, #1]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800602a:	887a      	ldrh	r2, [r7, #2]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006030:	e003      	b.n	800603a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006032:	887b      	ldrh	r3, [r7, #2]
 8006034:	041a      	lsls	r2, r3, #16
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	619a      	str	r2, [r3, #24]
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
	...

08006048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e11f      	b.n	800629a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fd fe3c 	bl	8003cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2224      	movs	r2, #36	; 0x24
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800609a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060ac:	f000 fd18 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 80060b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	4a7b      	ldr	r2, [pc, #492]	; (80062a4 <HAL_I2C_Init+0x25c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d807      	bhi.n	80060cc <HAL_I2C_Init+0x84>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4a7a      	ldr	r2, [pc, #488]	; (80062a8 <HAL_I2C_Init+0x260>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	bf94      	ite	ls
 80060c4:	2301      	movls	r3, #1
 80060c6:	2300      	movhi	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	e006      	b.n	80060da <HAL_I2C_Init+0x92>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4a77      	ldr	r2, [pc, #476]	; (80062ac <HAL_I2C_Init+0x264>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	bf94      	ite	ls
 80060d4:	2301      	movls	r3, #1
 80060d6:	2300      	movhi	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e0db      	b.n	800629a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a72      	ldr	r2, [pc, #456]	; (80062b0 <HAL_I2C_Init+0x268>)
 80060e6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ea:	0c9b      	lsrs	r3, r3, #18
 80060ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	4a64      	ldr	r2, [pc, #400]	; (80062a4 <HAL_I2C_Init+0x25c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d802      	bhi.n	800611c <HAL_I2C_Init+0xd4>
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	3301      	adds	r3, #1
 800611a:	e009      	b.n	8006130 <HAL_I2C_Init+0xe8>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006122:	fb02 f303 	mul.w	r3, r2, r3
 8006126:	4a63      	ldr	r2, [pc, #396]	; (80062b4 <HAL_I2C_Init+0x26c>)
 8006128:	fba2 2303 	umull	r2, r3, r2, r3
 800612c:	099b      	lsrs	r3, r3, #6
 800612e:	3301      	adds	r3, #1
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	430b      	orrs	r3, r1
 8006136:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006142:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4956      	ldr	r1, [pc, #344]	; (80062a4 <HAL_I2C_Init+0x25c>)
 800614c:	428b      	cmp	r3, r1
 800614e:	d80d      	bhi.n	800616c <HAL_I2C_Init+0x124>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	1e59      	subs	r1, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	fbb1 f3f3 	udiv	r3, r1, r3
 800615e:	3301      	adds	r3, #1
 8006160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006164:	2b04      	cmp	r3, #4
 8006166:	bf38      	it	cc
 8006168:	2304      	movcc	r3, #4
 800616a:	e04f      	b.n	800620c <HAL_I2C_Init+0x1c4>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d111      	bne.n	8006198 <HAL_I2C_Init+0x150>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	1e58      	subs	r0, r3, #1
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6859      	ldr	r1, [r3, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	440b      	add	r3, r1
 8006182:	fbb0 f3f3 	udiv	r3, r0, r3
 8006186:	3301      	adds	r3, #1
 8006188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e012      	b.n	80061be <HAL_I2C_Init+0x176>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1e58      	subs	r0, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	0099      	lsls	r1, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ae:	3301      	adds	r3, #1
 80061b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_I2C_Init+0x17e>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e022      	b.n	800620c <HAL_I2C_Init+0x1c4>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10e      	bne.n	80061ec <HAL_I2C_Init+0x1a4>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1e58      	subs	r0, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6859      	ldr	r1, [r3, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	440b      	add	r3, r1
 80061dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e0:	3301      	adds	r3, #1
 80061e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ea:	e00f      	b.n	800620c <HAL_I2C_Init+0x1c4>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1e58      	subs	r0, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6859      	ldr	r1, [r3, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	440b      	add	r3, r1
 80061fa:	0099      	lsls	r1, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006202:	3301      	adds	r3, #1
 8006204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	6809      	ldr	r1, [r1, #0]
 8006210:	4313      	orrs	r3, r2
 8006212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69da      	ldr	r2, [r3, #28]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800623a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6911      	ldr	r1, [r2, #16]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	68d2      	ldr	r2, [r2, #12]
 8006246:	4311      	orrs	r1, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	430b      	orrs	r3, r1
 800624e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	000186a0 	.word	0x000186a0
 80062a8:	001e847f 	.word	0x001e847f
 80062ac:	003d08ff 	.word	0x003d08ff
 80062b0:	431bde83 	.word	0x431bde83
 80062b4:	10624dd3 	.word	0x10624dd3

080062b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e25b      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d075      	beq.n	80063c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062d6:	4ba3      	ldr	r3, [pc, #652]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d00c      	beq.n	80062fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062e2:	4ba0      	ldr	r3, [pc, #640]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d112      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ee:	4b9d      	ldr	r3, [pc, #628]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062fa:	d10b      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	4b99      	ldr	r3, [pc, #612]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d05b      	beq.n	80063c0 <HAL_RCC_OscConfig+0x108>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d157      	bne.n	80063c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e236      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631c:	d106      	bne.n	800632c <HAL_RCC_OscConfig+0x74>
 800631e:	4b91      	ldr	r3, [pc, #580]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a90      	ldr	r2, [pc, #576]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	e01d      	b.n	8006368 <HAL_RCC_OscConfig+0xb0>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006334:	d10c      	bne.n	8006350 <HAL_RCC_OscConfig+0x98>
 8006336:	4b8b      	ldr	r3, [pc, #556]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a8a      	ldr	r2, [pc, #552]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	4b88      	ldr	r3, [pc, #544]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a87      	ldr	r2, [pc, #540]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e00b      	b.n	8006368 <HAL_RCC_OscConfig+0xb0>
 8006350:	4b84      	ldr	r3, [pc, #528]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a83      	ldr	r2, [pc, #524]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	4b81      	ldr	r3, [pc, #516]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a80      	ldr	r2, [pc, #512]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d013      	beq.n	8006398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006370:	f7fe fd84 	bl	8004e7c <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006378:	f7fe fd80 	bl	8004e7c <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b64      	cmp	r3, #100	; 0x64
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e1fb      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	4b76      	ldr	r3, [pc, #472]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0xc0>
 8006396:	e014      	b.n	80063c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7fe fd70 	bl	8004e7c <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063a0:	f7fe fd6c 	bl	8004e7c <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b64      	cmp	r3, #100	; 0x64
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e1e7      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063b2:	4b6c      	ldr	r3, [pc, #432]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0xe8>
 80063be:	e000      	b.n	80063c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d063      	beq.n	8006496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063ce:	4b65      	ldr	r3, [pc, #404]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063da:	4b62      	ldr	r3, [pc, #392]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d11c      	bne.n	8006420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e6:	4b5f      	ldr	r3, [pc, #380]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d116      	bne.n	8006420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	4b5c      	ldr	r3, [pc, #368]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_RCC_OscConfig+0x152>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d001      	beq.n	800640a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e1bb      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640a:	4b56      	ldr	r3, [pc, #344]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4952      	ldr	r1, [pc, #328]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641e:	e03a      	b.n	8006496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d020      	beq.n	800646a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006428:	4b4f      	ldr	r3, [pc, #316]	; (8006568 <HAL_RCC_OscConfig+0x2b0>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fe fd25 	bl	8004e7c <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006436:	f7fe fd21 	bl	8004e7c <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e19c      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006448:	4b46      	ldr	r3, [pc, #280]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006454:	4b43      	ldr	r3, [pc, #268]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4940      	ldr	r1, [pc, #256]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006464:	4313      	orrs	r3, r2
 8006466:	600b      	str	r3, [r1, #0]
 8006468:	e015      	b.n	8006496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800646a:	4b3f      	ldr	r3, [pc, #252]	; (8006568 <HAL_RCC_OscConfig+0x2b0>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fe fd04 	bl	8004e7c <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006478:	f7fe fd00 	bl	8004e7c <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e17b      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648a:	4b36      	ldr	r3, [pc, #216]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d030      	beq.n	8006504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064aa:	4b30      	ldr	r3, [pc, #192]	; (800656c <HAL_RCC_OscConfig+0x2b4>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fe fce4 	bl	8004e7c <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064b8:	f7fe fce0 	bl	8004e7c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e15b      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCC_OscConfig+0x200>
 80064d6:	e015      	b.n	8006504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064d8:	4b24      	ldr	r3, [pc, #144]	; (800656c <HAL_RCC_OscConfig+0x2b4>)
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064de:	f7fe fccd 	bl	8004e7c <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e6:	f7fe fcc9 	bl	8004e7c <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e144      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f8:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80064fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f0      	bne.n	80064e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80a0 	beq.w	8006652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006516:	4b13      	ldr	r3, [pc, #76]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	4a0e      	ldr	r2, [pc, #56]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006530:	6413      	str	r3, [r2, #64]	; 0x40
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d121      	bne.n	8006592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800654e:	4b08      	ldr	r3, [pc, #32]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a07      	ldr	r2, [pc, #28]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800655a:	f7fe fc8f 	bl	8004e7c <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006560:	e011      	b.n	8006586 <HAL_RCC_OscConfig+0x2ce>
 8006562:	bf00      	nop
 8006564:	40023800 	.word	0x40023800
 8006568:	42470000 	.word	0x42470000
 800656c:	42470e80 	.word	0x42470e80
 8006570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006574:	f7fe fc82 	bl	8004e7c <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e0fd      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006586:	4b81      	ldr	r3, [pc, #516]	; (800678c <HAL_RCC_OscConfig+0x4d4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f0      	beq.n	8006574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d106      	bne.n	80065a8 <HAL_RCC_OscConfig+0x2f0>
 800659a:	4b7d      	ldr	r3, [pc, #500]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	4a7c      	ldr	r2, [pc, #496]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	6713      	str	r3, [r2, #112]	; 0x70
 80065a6:	e01c      	b.n	80065e2 <HAL_RCC_OscConfig+0x32a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	2b05      	cmp	r3, #5
 80065ae:	d10c      	bne.n	80065ca <HAL_RCC_OscConfig+0x312>
 80065b0:	4b77      	ldr	r3, [pc, #476]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b4:	4a76      	ldr	r2, [pc, #472]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065b6:	f043 0304 	orr.w	r3, r3, #4
 80065ba:	6713      	str	r3, [r2, #112]	; 0x70
 80065bc:	4b74      	ldr	r3, [pc, #464]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c0:	4a73      	ldr	r2, [pc, #460]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	6713      	str	r3, [r2, #112]	; 0x70
 80065c8:	e00b      	b.n	80065e2 <HAL_RCC_OscConfig+0x32a>
 80065ca:	4b71      	ldr	r3, [pc, #452]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	4a70      	ldr	r2, [pc, #448]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	6713      	str	r3, [r2, #112]	; 0x70
 80065d6:	4b6e      	ldr	r3, [pc, #440]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	4a6d      	ldr	r2, [pc, #436]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065dc:	f023 0304 	bic.w	r3, r3, #4
 80065e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d015      	beq.n	8006616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ea:	f7fe fc47 	bl	8004e7c <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f0:	e00a      	b.n	8006608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f2:	f7fe fc43 	bl	8004e7c <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006600:	4293      	cmp	r3, r2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e0bc      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006608:	4b61      	ldr	r3, [pc, #388]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0ee      	beq.n	80065f2 <HAL_RCC_OscConfig+0x33a>
 8006614:	e014      	b.n	8006640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006616:	f7fe fc31 	bl	8004e7c <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800661c:	e00a      	b.n	8006634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800661e:	f7fe fc2d 	bl	8004e7c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	f241 3288 	movw	r2, #5000	; 0x1388
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e0a6      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006634:	4b56      	ldr	r3, [pc, #344]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1ee      	bne.n	800661e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d105      	bne.n	8006652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006646:	4b52      	ldr	r3, [pc, #328]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	4a51      	ldr	r2, [pc, #324]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800664c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8092 	beq.w	8006780 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800665c:	4b4c      	ldr	r3, [pc, #304]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 030c 	and.w	r3, r3, #12
 8006664:	2b08      	cmp	r3, #8
 8006666:	d05c      	beq.n	8006722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d141      	bne.n	80066f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006670:	4b48      	ldr	r3, [pc, #288]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006676:	f7fe fc01 	bl	8004e7c <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800667e:	f7fe fbfd 	bl	8004e7c <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e078      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006690:	4b3f      	ldr	r3, [pc, #252]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f0      	bne.n	800667e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	019b      	lsls	r3, r3, #6
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	3b01      	subs	r3, #1
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	061b      	lsls	r3, r3, #24
 80066c0:	4933      	ldr	r1, [pc, #204]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c6:	4b33      	ldr	r3, [pc, #204]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80066c8:	2201      	movs	r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066cc:	f7fe fbd6 	bl	8004e7c <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d4:	f7fe fbd2 	bl	8004e7c <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e04d      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e6:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0x41c>
 80066f2:	e045      	b.n	8006780 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f4:	4b27      	ldr	r3, [pc, #156]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066fa:	f7fe fbbf 	bl	8004e7c <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006702:	f7fe fbbb 	bl	8004e7c <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e036      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006714:	4b1e      	ldr	r3, [pc, #120]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_RCC_OscConfig+0x44a>
 8006720:	e02e      	b.n	8006780 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e029      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800672e:	4b18      	ldr	r3, [pc, #96]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	429a      	cmp	r2, r3
 8006740:	d11c      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674c:	429a      	cmp	r2, r3
 800674e:	d115      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006756:	4013      	ands	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800675c:	4293      	cmp	r3, r2
 800675e:	d10d      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800676a:	429a      	cmp	r2, r3
 800676c:	d106      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006778:	429a      	cmp	r2, r3
 800677a:	d001      	beq.n	8006780 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40007000 	.word	0x40007000
 8006790:	40023800 	.word	0x40023800
 8006794:	42470060 	.word	0x42470060

08006798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0cc      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067ac:	4b68      	ldr	r3, [pc, #416]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d90c      	bls.n	80067d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ba:	4b65      	ldr	r3, [pc, #404]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c2:	4b63      	ldr	r3, [pc, #396]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0b8      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d020      	beq.n	8006822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067ec:	4b59      	ldr	r3, [pc, #356]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4a58      	ldr	r2, [pc, #352]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006804:	4b53      	ldr	r3, [pc, #332]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	4a52      	ldr	r2, [pc, #328]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800680e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006810:	4b50      	ldr	r3, [pc, #320]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	494d      	ldr	r1, [pc, #308]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	4313      	orrs	r3, r2
 8006820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d044      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d107      	bne.n	8006846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006836:	4b47      	ldr	r3, [pc, #284]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d119      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e07f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d003      	beq.n	8006856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006852:	2b03      	cmp	r3, #3
 8006854:	d107      	bne.n	8006866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006856:	4b3f      	ldr	r3, [pc, #252]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e06f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006866:	4b3b      	ldr	r3, [pc, #236]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e067      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006876:	4b37      	ldr	r3, [pc, #220]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f023 0203 	bic.w	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4934      	ldr	r1, [pc, #208]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	4313      	orrs	r3, r2
 8006886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006888:	f7fe faf8 	bl	8004e7c <HAL_GetTick>
 800688c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688e:	e00a      	b.n	80068a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006890:	f7fe faf4 	bl	8004e7c <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	f241 3288 	movw	r2, #5000	; 0x1388
 800689e:	4293      	cmp	r3, r2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e04f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a6:	4b2b      	ldr	r3, [pc, #172]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 020c 	and.w	r2, r3, #12
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d1eb      	bne.n	8006890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068b8:	4b25      	ldr	r3, [pc, #148]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d20c      	bcs.n	80068e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c6:	4b22      	ldr	r3, [pc, #136]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b20      	ldr	r3, [pc, #128]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e032      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ec:	4b19      	ldr	r3, [pc, #100]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	4916      	ldr	r1, [pc, #88]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	490e      	ldr	r1, [pc, #56]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800691a:	4313      	orrs	r3, r2
 800691c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800691e:	f000 f821 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8006922:	4601      	mov	r1, r0
 8006924:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <HAL_RCC_ClockConfig+0x1c0>)
 8006930:	5cd3      	ldrb	r3, [r2, r3]
 8006932:	fa21 f303 	lsr.w	r3, r1, r3
 8006936:	4a09      	ldr	r2, [pc, #36]	; (800695c <HAL_RCC_ClockConfig+0x1c4>)
 8006938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800693a:	4b09      	ldr	r3, [pc, #36]	; (8006960 <HAL_RCC_ClockConfig+0x1c8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fa58 	bl	8004df4 <HAL_InitTick>

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40023c00 	.word	0x40023c00
 8006954:	40023800 	.word	0x40023800
 8006958:	0800cd4c 	.word	0x0800cd4c
 800695c:	20000ff0 	.word	0x20000ff0
 8006960:	20000ff4 	.word	0x20000ff4

08006964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	607b      	str	r3, [r7, #4]
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	2300      	movs	r3, #0
 8006974:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800697a:	4b50      	ldr	r3, [pc, #320]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 030c 	and.w	r3, r3, #12
 8006982:	2b04      	cmp	r3, #4
 8006984:	d007      	beq.n	8006996 <HAL_RCC_GetSysClockFreq+0x32>
 8006986:	2b08      	cmp	r3, #8
 8006988:	d008      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0x38>
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 808d 	bne.w	8006aaa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006990:	4b4b      	ldr	r3, [pc, #300]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006992:	60bb      	str	r3, [r7, #8]
       break;
 8006994:	e08c      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006996:	4b4b      	ldr	r3, [pc, #300]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006998:	60bb      	str	r3, [r7, #8]
      break;
 800699a:	e089      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800699c:	4b47      	ldr	r3, [pc, #284]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069a6:	4b45      	ldr	r3, [pc, #276]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d023      	beq.n	80069fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069b2:	4b42      	ldr	r3, [pc, #264]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	099b      	lsrs	r3, r3, #6
 80069b8:	f04f 0400 	mov.w	r4, #0
 80069bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	ea03 0501 	and.w	r5, r3, r1
 80069c8:	ea04 0602 	and.w	r6, r4, r2
 80069cc:	4a3d      	ldr	r2, [pc, #244]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80069ce:	fb02 f106 	mul.w	r1, r2, r6
 80069d2:	2200      	movs	r2, #0
 80069d4:	fb02 f205 	mul.w	r2, r2, r5
 80069d8:	440a      	add	r2, r1
 80069da:	493a      	ldr	r1, [pc, #232]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80069dc:	fba5 0101 	umull	r0, r1, r5, r1
 80069e0:	1853      	adds	r3, r2, r1
 80069e2:	4619      	mov	r1, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f04f 0400 	mov.w	r4, #0
 80069ea:	461a      	mov	r2, r3
 80069ec:	4623      	mov	r3, r4
 80069ee:	f7fa f92b 	bl	8000c48 <__aeabi_uldivmod>
 80069f2:	4603      	mov	r3, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e049      	b.n	8006a8e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069fa:	4b30      	ldr	r3, [pc, #192]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	099b      	lsrs	r3, r3, #6
 8006a00:	f04f 0400 	mov.w	r4, #0
 8006a04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	ea03 0501 	and.w	r5, r3, r1
 8006a10:	ea04 0602 	and.w	r6, r4, r2
 8006a14:	4629      	mov	r1, r5
 8006a16:	4632      	mov	r2, r6
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	f04f 0400 	mov.w	r4, #0
 8006a20:	0154      	lsls	r4, r2, #5
 8006a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a26:	014b      	lsls	r3, r1, #5
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	1b49      	subs	r1, r1, r5
 8006a2e:	eb62 0206 	sbc.w	r2, r2, r6
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	f04f 0400 	mov.w	r4, #0
 8006a3a:	0194      	lsls	r4, r2, #6
 8006a3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a40:	018b      	lsls	r3, r1, #6
 8006a42:	1a5b      	subs	r3, r3, r1
 8006a44:	eb64 0402 	sbc.w	r4, r4, r2
 8006a48:	f04f 0100 	mov.w	r1, #0
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	00e2      	lsls	r2, r4, #3
 8006a52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a56:	00d9      	lsls	r1, r3, #3
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4614      	mov	r4, r2
 8006a5c:	195b      	adds	r3, r3, r5
 8006a5e:	eb44 0406 	adc.w	r4, r4, r6
 8006a62:	f04f 0100 	mov.w	r1, #0
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	02a2      	lsls	r2, r4, #10
 8006a6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006a70:	0299      	lsls	r1, r3, #10
 8006a72:	460b      	mov	r3, r1
 8006a74:	4614      	mov	r4, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	4621      	mov	r1, r4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f04f 0400 	mov.w	r4, #0
 8006a80:	461a      	mov	r2, r3
 8006a82:	4623      	mov	r3, r4
 8006a84:	f7fa f8e0 	bl	8000c48 <__aeabi_uldivmod>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	0c1b      	lsrs	r3, r3, #16
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	3301      	adds	r3, #1
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	60bb      	str	r3, [r7, #8]
      break;
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006aac:	60bb      	str	r3, [r7, #8]
      break;
 8006aae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	00f42400 	.word	0x00f42400
 8006ac4:	017d7840 	.word	0x017d7840

08006ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006acc:	4b03      	ldr	r3, [pc, #12]	; (8006adc <HAL_RCC_GetHCLKFreq+0x14>)
 8006ace:	681b      	ldr	r3, [r3, #0]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000ff0 	.word	0x20000ff0

08006ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ae4:	f7ff fff0 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006ae8:	4601      	mov	r1, r0
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	0a9b      	lsrs	r3, r3, #10
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	4a03      	ldr	r2, [pc, #12]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006af6:	5cd3      	ldrb	r3, [r2, r3]
 8006af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40023800 	.word	0x40023800
 8006b04:	0800cd5c 	.word	0x0800cd5c

08006b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b0c:	f7ff ffdc 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006b10:	4601      	mov	r1, r0
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	0b5b      	lsrs	r3, r3, #13
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4a03      	ldr	r2, [pc, #12]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b1e:	5cd3      	ldrb	r3, [r2, r3]
 8006b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	0800cd5c 	.word	0x0800cd5c

08006b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e056      	b.n	8006bf0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d106      	bne.n	8006b62 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7fd faef 	bl	8004140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2202      	movs	r2, #2
 8006b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	ea42 0103 	orr.w	r1, r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	f003 0104 	and.w	r1, r3, #4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69da      	ldr	r2, [r3, #28]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_SPI_Transmit+0x22>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e11e      	b.n	8006e58 <HAL_SPI_Transmit+0x260>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c22:	f7fe f92b 	bl	8004e7c <HAL_GetTick>
 8006c26:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c28:	88fb      	ldrh	r3, [r7, #6]
 8006c2a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d002      	beq.n	8006c3e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c3c:	e103      	b.n	8006e46 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <HAL_SPI_Transmit+0x52>
 8006c44:	88fb      	ldrh	r3, [r7, #6]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c4e:	e0fa      	b.n	8006e46 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2203      	movs	r2, #3
 8006c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	88fa      	ldrh	r2, [r7, #6]
 8006c6e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c96:	d107      	bne.n	8006ca8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ca6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb2:	2b40      	cmp	r3, #64	; 0x40
 8006cb4:	d007      	beq.n	8006cc6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cce:	d14b      	bne.n	8006d68 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_SPI_Transmit+0xe6>
 8006cd8:	8afb      	ldrh	r3, [r7, #22]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d13e      	bne.n	8006d5c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	881a      	ldrh	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	1c9a      	adds	r2, r3, #2
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d02:	e02b      	b.n	8006d5c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d112      	bne.n	8006d38 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	881a      	ldrh	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	1c9a      	adds	r2, r3, #2
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d36:	e011      	b.n	8006d5c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d38:	f7fe f8a0 	bl	8004e7c <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d803      	bhi.n	8006d50 <HAL_SPI_Transmit+0x158>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d102      	bne.n	8006d56 <HAL_SPI_Transmit+0x15e>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d102      	bne.n	8006d5c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d5a:	e074      	b.n	8006e46 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1ce      	bne.n	8006d04 <HAL_SPI_Transmit+0x10c>
 8006d66:	e04c      	b.n	8006e02 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <HAL_SPI_Transmit+0x17e>
 8006d70:	8afb      	ldrh	r3, [r7, #22]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d140      	bne.n	8006df8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	330c      	adds	r3, #12
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d9c:	e02c      	b.n	8006df8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d113      	bne.n	8006dd4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	7812      	ldrb	r2, [r2, #0]
 8006db8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dd2:	e011      	b.n	8006df8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd4:	f7fe f852 	bl	8004e7c <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d803      	bhi.n	8006dec <HAL_SPI_Transmit+0x1f4>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dea:	d102      	bne.n	8006df2 <HAL_SPI_Transmit+0x1fa>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d102      	bne.n	8006df8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006df6:	e026      	b.n	8006e46 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1cd      	bne.n	8006d9e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fc94 	bl	8007734 <SPI_EndRxTxTransaction>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	613b      	str	r3, [r7, #16]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	77fb      	strb	r3, [r7, #31]
 8006e42:	e000      	b.n	8006e46 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006e44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e56:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08c      	sub	sp, #48	; 0x30
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <HAL_SPI_TransmitReceive+0x26>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e18a      	b.n	800719c <HAL_SPI_TransmitReceive+0x33c>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e8e:	f7fd fff5 	bl	8004e7c <HAL_GetTick>
 8006e92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ea4:	887b      	ldrh	r3, [r7, #2]
 8006ea6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d00f      	beq.n	8006ed0 <HAL_SPI_TransmitReceive+0x70>
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eb6:	d107      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x68>
 8006ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d003      	beq.n	8006ed0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ece:	e15b      	b.n	8007188 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x82>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x82>
 8006edc:	887b      	ldrh	r3, [r7, #2]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d103      	bne.n	8006eea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ee8:	e14e      	b.n	8007188 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d003      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2205      	movs	r2, #5
 8006efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	887a      	ldrh	r2, [r7, #2]
 8006f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	887a      	ldrh	r2, [r7, #2]
 8006f14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	887a      	ldrh	r2, [r7, #2]
 8006f20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	887a      	ldrh	r2, [r7, #2]
 8006f26:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	d007      	beq.n	8006f52 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5a:	d178      	bne.n	800704e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_SPI_TransmitReceive+0x10a>
 8006f64:	8b7b      	ldrh	r3, [r7, #26]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d166      	bne.n	8007038 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	881a      	ldrh	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	1c9a      	adds	r2, r3, #2
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f8e:	e053      	b.n	8007038 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d11b      	bne.n	8006fd6 <HAL_SPI_TransmitReceive+0x176>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d016      	beq.n	8006fd6 <HAL_SPI_TransmitReceive+0x176>
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d113      	bne.n	8006fd6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb2:	881a      	ldrh	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	1c9a      	adds	r2, r3, #2
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d119      	bne.n	8007018 <HAL_SPI_TransmitReceive+0x1b8>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d014      	beq.n	8007018 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	b292      	uxth	r2, r2
 8006ffa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	1c9a      	adds	r2, r3, #2
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007014:	2301      	movs	r3, #1
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007018:	f7fd ff30 	bl	8004e7c <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007024:	429a      	cmp	r2, r3
 8007026:	d807      	bhi.n	8007038 <HAL_SPI_TransmitReceive+0x1d8>
 8007028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702e:	d003      	beq.n	8007038 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007036:	e0a7      	b.n	8007188 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1a6      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x130>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1a1      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x130>
 800704c:	e07c      	b.n	8007148 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_SPI_TransmitReceive+0x1fc>
 8007056:	8b7b      	ldrh	r3, [r7, #26]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d16b      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	7812      	ldrb	r2, [r2, #0]
 8007068:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007082:	e057      	b.n	8007134 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b02      	cmp	r3, #2
 8007090:	d11c      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x26c>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d017      	beq.n	80070cc <HAL_SPI_TransmitReceive+0x26c>
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d114      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	330c      	adds	r3, #12
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d119      	bne.n	800710e <HAL_SPI_TransmitReceive+0x2ae>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d014      	beq.n	800710e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68da      	ldr	r2, [r3, #12]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007100:	b29b      	uxth	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800710a:	2301      	movs	r3, #1
 800710c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800710e:	f7fd feb5 	bl	8004e7c <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800711a:	429a      	cmp	r2, r3
 800711c:	d803      	bhi.n	8007126 <HAL_SPI_TransmitReceive+0x2c6>
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d102      	bne.n	800712c <HAL_SPI_TransmitReceive+0x2cc>
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d103      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007132:	e029      	b.n	8007188 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1a2      	bne.n	8007084 <HAL_SPI_TransmitReceive+0x224>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d19d      	bne.n	8007084 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 faf1 	bl	8007734 <SPI_EndRxTxTransaction>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d006      	beq.n	8007166 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2220      	movs	r2, #32
 8007162:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007164:	e010      	b.n	8007188 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10b      	bne.n	8007186 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	e000      	b.n	8007188 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007186:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007198:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800719c:	4618      	mov	r0, r3
 800719e:	3730      	adds	r7, #48	; 0x30
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e0e3      	b.n	800738c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80071da:	7dbb      	ldrb	r3, [r7, #22]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d00d      	beq.n	80071fc <HAL_SPI_TransmitReceive_DMA+0x58>
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071e6:	d106      	bne.n	80071f6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80071f0:	7dbb      	ldrb	r3, [r7, #22]
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d002      	beq.n	80071fc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80071f6:	2302      	movs	r3, #2
 80071f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071fa:	e0c2      	b.n	8007382 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007208:	887b      	ldrh	r3, [r7, #2]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007212:	e0b6      	b.n	8007382 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b04      	cmp	r3, #4
 800721e:	d003      	beq.n	8007228 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2205      	movs	r2, #5
 8007224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	887a      	ldrh	r2, [r7, #2]
 8007238:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	887a      	ldrh	r2, [r7, #2]
 800723e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	887a      	ldrh	r2, [r7, #2]
 800724a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	887a      	ldrh	r2, [r7, #2]
 8007250:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b04      	cmp	r3, #4
 8007268:	d108      	bne.n	800727c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726e:	4a49      	ldr	r2, [pc, #292]	; (8007394 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007270:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007276:	4a48      	ldr	r2, [pc, #288]	; (8007398 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007278:	63da      	str	r2, [r3, #60]	; 0x3c
 800727a:	e007      	b.n	800728c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007280:	4a46      	ldr	r2, [pc, #280]	; (800739c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8007282:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007288:	4a45      	ldr	r2, [pc, #276]	; (80073a0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800728a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007290:	4a44      	ldr	r2, [pc, #272]	; (80073a4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8007292:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007298:	2200      	movs	r2, #0
 800729a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	4619      	mov	r1, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80072b4:	f7fe fa32 	bl	800571c <HAL_DMA_Start_IT>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00c      	beq.n	80072d8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	f043 0210 	orr.w	r2, r3, #16
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80072d6:	e054      	b.n	8007382 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ec:	2200      	movs	r2, #0
 80072ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f4:	2200      	movs	r2, #0
 80072f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fc:	2200      	movs	r2, #0
 80072fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007304:	2200      	movs	r2, #0
 8007306:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	4619      	mov	r1, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	330c      	adds	r3, #12
 8007318:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800731e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007320:	f7fe f9fc 	bl	800571c <HAL_DMA_Start_IT>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00c      	beq.n	8007344 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732e:	f043 0210 	orr.w	r2, r3, #16
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007342:	e01e      	b.n	8007382 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d007      	beq.n	8007362 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007360:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0220 	orr.w	r2, r2, #32
 8007370:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f042 0202 	orr.w	r2, r2, #2
 8007380:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	0800751d 	.word	0x0800751d
 8007398:	080073e5 	.word	0x080073e5
 800739c:	08007539 	.word	0x08007539
 80073a0:	0800748d 	.word	0x0800748d
 80073a4:	08007555 	.word	0x08007555

080073a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073f2:	f7fd fd43 	bl	8004e7c <HAL_GetTick>
 80073f6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007406:	d03b      	beq.n	8007480 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0220 	bic.w	r2, r2, #32
 8007416:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10d      	bne.n	800743c <SPI_DMAReceiveCplt+0x58>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007428:	d108      	bne.n	800743c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0203 	bic.w	r2, r2, #3
 8007438:	605a      	str	r2, [r3, #4]
 800743a:	e007      	b.n	800744c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0201 	bic.w	r2, r2, #1
 800744a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	2164      	movs	r1, #100	; 0x64
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f909 	bl	8007668 <SPI_EndRxTransaction>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f7ff ffa9 	bl	80073d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800747e:	e002      	b.n	8007486 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff ff91 	bl	80073a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800749a:	f7fd fcef 	bl	8004e7c <HAL_GetTick>
 800749e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ae:	d02f      	beq.n	8007510 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0220 	bic.w	r2, r2, #32
 80074be:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	2164      	movs	r1, #100	; 0x64
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 f935 	bl	8007734 <SPI_EndRxTxTransaction>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d4:	f043 0220 	orr.w	r2, r3, #32
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0203 	bic.w	r2, r2, #3
 80074ea:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7ff ff61 	bl	80073d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800750e:	e002      	b.n	8007516 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7fc f98f 	bl	8003834 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007528:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f7ff ff46 	bl	80073bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7fc f98a 	bl	8003860 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800754c:	bf00      	nop
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0203 	bic.w	r2, r2, #3
 8007570:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007576:	f043 0210 	orr.w	r2, r3, #16
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f7ff ff22 	bl	80073d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	4613      	mov	r3, r2
 80075a2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075a4:	e04c      	b.n	8007640 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d048      	beq.n	8007640 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80075ae:	f7fd fc65 	bl	8004e7c <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d902      	bls.n	80075c4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d13d      	bne.n	8007640 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075dc:	d111      	bne.n	8007602 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e6:	d004      	beq.n	80075f2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f0:	d107      	bne.n	8007602 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007600:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800760a:	d10f      	bne.n	800762c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800762a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e00f      	b.n	8007660 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689a      	ldr	r2, [r3, #8]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	4013      	ands	r3, r2
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	429a      	cmp	r2, r3
 800764e:	bf0c      	ite	eq
 8007650:	2301      	moveq	r3, #1
 8007652:	2300      	movne	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	461a      	mov	r2, r3
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	429a      	cmp	r2, r3
 800765c:	d1a3      	bne.n	80075a6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af02      	add	r7, sp, #8
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800767c:	d111      	bne.n	80076a2 <SPI_EndRxTransaction+0x3a>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007686:	d004      	beq.n	8007692 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007690:	d107      	bne.n	80076a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076aa:	d12a      	bne.n	8007702 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b4:	d012      	beq.n	80076dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2200      	movs	r2, #0
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff ff67 	bl	8007594 <SPI_WaitFlagStateUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d02d      	beq.n	8007728 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d0:	f043 0220 	orr.w	r2, r3, #32
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e026      	b.n	800772a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	2101      	movs	r1, #1
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f7ff ff54 	bl	8007594 <SPI_WaitFlagStateUntilTimeout>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01a      	beq.n	8007728 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f6:	f043 0220 	orr.w	r2, r3, #32
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e013      	b.n	800772a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2200      	movs	r2, #0
 800770a:	2101      	movs	r1, #1
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f7ff ff41 	bl	8007594 <SPI_WaitFlagStateUntilTimeout>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d007      	beq.n	8007728 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771c:	f043 0220 	orr.w	r2, r3, #32
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e000      	b.n	800772a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007740:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <SPI_EndRxTxTransaction+0x7c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a1b      	ldr	r2, [pc, #108]	; (80077b4 <SPI_EndRxTxTransaction+0x80>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	0d5b      	lsrs	r3, r3, #21
 800774c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007750:	fb02 f303 	mul.w	r3, r2, r3
 8007754:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800775e:	d112      	bne.n	8007786 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	2180      	movs	r1, #128	; 0x80
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff ff12 	bl	8007594 <SPI_WaitFlagStateUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d016      	beq.n	80077a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	f043 0220 	orr.w	r2, r3, #32
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e00f      	b.n	80077a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	3b01      	subs	r3, #1
 8007790:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779c:	2b80      	cmp	r3, #128	; 0x80
 800779e:	d0f2      	beq.n	8007786 <SPI_EndRxTxTransaction+0x52>
 80077a0:	e000      	b.n	80077a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80077a2:	bf00      	nop
  }

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20000ff0 	.word	0x20000ff0
 80077b4:	165e9f81 	.word	0x165e9f81

080077b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e01d      	b.n	8007806 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fd f840 	bl	8004864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f000 fb4e 	bl	8007e98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0201 	orr.w	r2, r2, #1
 8007824:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b06      	cmp	r3, #6
 8007836:	d007      	beq.n	8007848 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e01d      	b.n	80078a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d106      	bne.n	8007882 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f815 	bl	80078ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2202      	movs	r2, #2
 8007886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3304      	adds	r3, #4
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f000 faff 	bl	8007e98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2201      	movs	r2, #1
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fdca 	bl	800846c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a15      	ldr	r2, [pc, #84]	; (8007934 <HAL_TIM_PWM_Start+0x74>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_TIM_PWM_Start+0x2c>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a14      	ldr	r2, [pc, #80]	; (8007938 <HAL_TIM_PWM_Start+0x78>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d101      	bne.n	80078f0 <HAL_TIM_PWM_Start+0x30>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <HAL_TIM_PWM_Start+0x32>
 80078f0:	2300      	movs	r3, #0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d007      	beq.n	8007906 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007904:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b06      	cmp	r3, #6
 8007916:	d007      	beq.n	8007928 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0201 	orr.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40010000 	.word	0x40010000
 8007938:	40010400 	.word	0x40010400

0800793c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b02      	cmp	r3, #2
 8007950:	d122      	bne.n	8007998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b02      	cmp	r3, #2
 800795e:	d11b      	bne.n	8007998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f06f 0202 	mvn.w	r2, #2
 8007968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fa6b 	bl	8007e5a <HAL_TIM_IC_CaptureCallback>
 8007984:	e005      	b.n	8007992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fa5d 	bl	8007e46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fa6e 	bl	8007e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0304 	and.w	r3, r3, #4
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d122      	bne.n	80079ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d11b      	bne.n	80079ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f06f 0204 	mvn.w	r2, #4
 80079bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa41 	bl	8007e5a <HAL_TIM_IC_CaptureCallback>
 80079d8:	e005      	b.n	80079e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa33 	bl	8007e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa44 	bl	8007e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d122      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d11b      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0208 	mvn.w	r2, #8
 8007a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2204      	movs	r2, #4
 8007a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa17 	bl	8007e5a <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa09 	bl	8007e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa1a 	bl	8007e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0310 	and.w	r3, r3, #16
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d122      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0310 	and.w	r3, r3, #16
 8007a58:	2b10      	cmp	r3, #16
 8007a5a:	d11b      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0210 	mvn.w	r2, #16
 8007a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2208      	movs	r2, #8
 8007a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f9ed 	bl	8007e5a <HAL_TIM_IC_CaptureCallback>
 8007a80:	e005      	b.n	8007a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f9df 	bl	8007e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f9f0 	bl	8007e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d10e      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d107      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0201 	mvn.w	r2, #1
 8007ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7fa f816 	bl	8001aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b80      	cmp	r3, #128	; 0x80
 8007acc:	d10e      	bne.n	8007aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad8:	2b80      	cmp	r3, #128	; 0x80
 8007ada:	d107      	bne.n	8007aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fdbe 	bl	8008668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b40      	cmp	r3, #64	; 0x40
 8007af8:	d10e      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b04:	2b40      	cmp	r3, #64	; 0x40
 8007b06:	d107      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f9b5 	bl	8007e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b20      	cmp	r3, #32
 8007b24:	d10e      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d107      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0220 	mvn.w	r2, #32
 8007b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fd88 	bl	8008654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e0b4      	b.n	8007cd0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2202      	movs	r2, #2
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b0c      	cmp	r3, #12
 8007b7a:	f200 809f 	bhi.w	8007cbc <HAL_TIM_PWM_ConfigChannel+0x170>
 8007b7e:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b84:	08007bb9 	.word	0x08007bb9
 8007b88:	08007cbd 	.word	0x08007cbd
 8007b8c:	08007cbd 	.word	0x08007cbd
 8007b90:	08007cbd 	.word	0x08007cbd
 8007b94:	08007bf9 	.word	0x08007bf9
 8007b98:	08007cbd 	.word	0x08007cbd
 8007b9c:	08007cbd 	.word	0x08007cbd
 8007ba0:	08007cbd 	.word	0x08007cbd
 8007ba4:	08007c3b 	.word	0x08007c3b
 8007ba8:	08007cbd 	.word	0x08007cbd
 8007bac:	08007cbd 	.word	0x08007cbd
 8007bb0:	08007cbd 	.word	0x08007cbd
 8007bb4:	08007c7b 	.word	0x08007c7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68b9      	ldr	r1, [r7, #8]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fa0a 	bl	8007fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699a      	ldr	r2, [r3, #24]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0208 	orr.w	r2, r2, #8
 8007bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0204 	bic.w	r2, r2, #4
 8007be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6999      	ldr	r1, [r3, #24]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	691a      	ldr	r2, [r3, #16]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	619a      	str	r2, [r3, #24]
      break;
 8007bf6:	e062      	b.n	8007cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fa5a 	bl	80080b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6999      	ldr	r1, [r3, #24]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	021a      	lsls	r2, r3, #8
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	619a      	str	r2, [r3, #24]
      break;
 8007c38:	e041      	b.n	8007cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68b9      	ldr	r1, [r7, #8]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 faaf 	bl	80081a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69da      	ldr	r2, [r3, #28]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 0208 	orr.w	r2, r2, #8
 8007c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69da      	ldr	r2, [r3, #28]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0204 	bic.w	r2, r2, #4
 8007c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69d9      	ldr	r1, [r3, #28]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	61da      	str	r2, [r3, #28]
      break;
 8007c78:	e021      	b.n	8007cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fb03 	bl	800828c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69da      	ldr	r2, [r3, #28]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69d9      	ldr	r1, [r3, #28]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	021a      	lsls	r2, r3, #8
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	61da      	str	r2, [r3, #28]
      break;
 8007cba:	e000      	b.n	8007cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007cbc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <HAL_TIM_ConfigClockSource+0x18>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e0a6      	b.n	8007e3e <HAL_TIM_ConfigClockSource+0x166>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b40      	cmp	r3, #64	; 0x40
 8007d26:	d067      	beq.n	8007df8 <HAL_TIM_ConfigClockSource+0x120>
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	d80b      	bhi.n	8007d44 <HAL_TIM_ConfigClockSource+0x6c>
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	d073      	beq.n	8007e18 <HAL_TIM_ConfigClockSource+0x140>
 8007d30:	2b10      	cmp	r3, #16
 8007d32:	d802      	bhi.n	8007d3a <HAL_TIM_ConfigClockSource+0x62>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d06f      	beq.n	8007e18 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d38:	e078      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d06c      	beq.n	8007e18 <HAL_TIM_ConfigClockSource+0x140>
 8007d3e:	2b30      	cmp	r3, #48	; 0x30
 8007d40:	d06a      	beq.n	8007e18 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007d42:	e073      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d44:	2b70      	cmp	r3, #112	; 0x70
 8007d46:	d00d      	beq.n	8007d64 <HAL_TIM_ConfigClockSource+0x8c>
 8007d48:	2b70      	cmp	r3, #112	; 0x70
 8007d4a:	d804      	bhi.n	8007d56 <HAL_TIM_ConfigClockSource+0x7e>
 8007d4c:	2b50      	cmp	r3, #80	; 0x50
 8007d4e:	d033      	beq.n	8007db8 <HAL_TIM_ConfigClockSource+0xe0>
 8007d50:	2b60      	cmp	r3, #96	; 0x60
 8007d52:	d041      	beq.n	8007dd8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007d54:	e06a      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5a:	d066      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x152>
 8007d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d60:	d017      	beq.n	8007d92 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007d62:	e063      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	6899      	ldr	r1, [r3, #8]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f000 fb5a 	bl	800842c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d86:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	609a      	str	r2, [r3, #8]
      break;
 8007d90:	e04c      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	6899      	ldr	r1, [r3, #8]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	f000 fb43 	bl	800842c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007db4:	609a      	str	r2, [r3, #8]
      break;
 8007db6:	e039      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	6859      	ldr	r1, [r3, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f000 fab7 	bl	8008338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2150      	movs	r1, #80	; 0x50
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fb10 	bl	80083f6 <TIM_ITRx_SetConfig>
      break;
 8007dd6:	e029      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	6859      	ldr	r1, [r3, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	461a      	mov	r2, r3
 8007de6:	f000 fad6 	bl	8008396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2160      	movs	r1, #96	; 0x60
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fb00 	bl	80083f6 <TIM_ITRx_SetConfig>
      break;
 8007df6:	e019      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	6859      	ldr	r1, [r3, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	461a      	mov	r2, r3
 8007e06:	f000 fa97 	bl	8008338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2140      	movs	r1, #64	; 0x40
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 faf0 	bl	80083f6 <TIM_ITRx_SetConfig>
      break;
 8007e16:	e009      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f000 fae7 	bl	80083f6 <TIM_ITRx_SetConfig>
      break;
 8007e28:	e000      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007e2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
	...

08007e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a40      	ldr	r2, [pc, #256]	; (8007fac <TIM_Base_SetConfig+0x114>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d013      	beq.n	8007ed8 <TIM_Base_SetConfig+0x40>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb6:	d00f      	beq.n	8007ed8 <TIM_Base_SetConfig+0x40>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a3d      	ldr	r2, [pc, #244]	; (8007fb0 <TIM_Base_SetConfig+0x118>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00b      	beq.n	8007ed8 <TIM_Base_SetConfig+0x40>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a3c      	ldr	r2, [pc, #240]	; (8007fb4 <TIM_Base_SetConfig+0x11c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d007      	beq.n	8007ed8 <TIM_Base_SetConfig+0x40>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a3b      	ldr	r2, [pc, #236]	; (8007fb8 <TIM_Base_SetConfig+0x120>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d003      	beq.n	8007ed8 <TIM_Base_SetConfig+0x40>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a3a      	ldr	r2, [pc, #232]	; (8007fbc <TIM_Base_SetConfig+0x124>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d108      	bne.n	8007eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a2f      	ldr	r2, [pc, #188]	; (8007fac <TIM_Base_SetConfig+0x114>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d02b      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef8:	d027      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a2c      	ldr	r2, [pc, #176]	; (8007fb0 <TIM_Base_SetConfig+0x118>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d023      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a2b      	ldr	r2, [pc, #172]	; (8007fb4 <TIM_Base_SetConfig+0x11c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d01f      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a2a      	ldr	r2, [pc, #168]	; (8007fb8 <TIM_Base_SetConfig+0x120>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d01b      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a29      	ldr	r2, [pc, #164]	; (8007fbc <TIM_Base_SetConfig+0x124>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d017      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a28      	ldr	r2, [pc, #160]	; (8007fc0 <TIM_Base_SetConfig+0x128>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d013      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a27      	ldr	r2, [pc, #156]	; (8007fc4 <TIM_Base_SetConfig+0x12c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d00f      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a26      	ldr	r2, [pc, #152]	; (8007fc8 <TIM_Base_SetConfig+0x130>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00b      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a25      	ldr	r2, [pc, #148]	; (8007fcc <TIM_Base_SetConfig+0x134>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d007      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a24      	ldr	r2, [pc, #144]	; (8007fd0 <TIM_Base_SetConfig+0x138>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d003      	beq.n	8007f4a <TIM_Base_SetConfig+0xb2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a23      	ldr	r2, [pc, #140]	; (8007fd4 <TIM_Base_SetConfig+0x13c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d108      	bne.n	8007f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <TIM_Base_SetConfig+0x114>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_Base_SetConfig+0xf8>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a0c      	ldr	r2, [pc, #48]	; (8007fbc <TIM_Base_SetConfig+0x124>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d103      	bne.n	8007f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	615a      	str	r2, [r3, #20]
}
 8007f9e:	bf00      	nop
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40000400 	.word	0x40000400
 8007fb4:	40000800 	.word	0x40000800
 8007fb8:	40000c00 	.word	0x40000c00
 8007fbc:	40010400 	.word	0x40010400
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40014400 	.word	0x40014400
 8007fc8:	40014800 	.word	0x40014800
 8007fcc:	40001800 	.word	0x40001800
 8007fd0:	40001c00 	.word	0x40001c00
 8007fd4:	40002000 	.word	0x40002000

08007fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f023 0201 	bic.w	r2, r3, #1
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0303 	bic.w	r3, r3, #3
 800800e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f023 0302 	bic.w	r3, r3, #2
 8008020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	4313      	orrs	r3, r2
 800802a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a20      	ldr	r2, [pc, #128]	; (80080b0 <TIM_OC1_SetConfig+0xd8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d003      	beq.n	800803c <TIM_OC1_SetConfig+0x64>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a1f      	ldr	r2, [pc, #124]	; (80080b4 <TIM_OC1_SetConfig+0xdc>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d10c      	bne.n	8008056 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f023 0308 	bic.w	r3, r3, #8
 8008042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f023 0304 	bic.w	r3, r3, #4
 8008054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <TIM_OC1_SetConfig+0xd8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d003      	beq.n	8008066 <TIM_OC1_SetConfig+0x8e>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a14      	ldr	r2, [pc, #80]	; (80080b4 <TIM_OC1_SetConfig+0xdc>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d111      	bne.n	800808a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800806c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4313      	orrs	r3, r2
 800807e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	621a      	str	r2, [r3, #32]
}
 80080a4:	bf00      	nop
 80080a6:	371c      	adds	r7, #28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	40010000 	.word	0x40010000
 80080b4:	40010400 	.word	0x40010400

080080b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f023 0210 	bic.w	r2, r3, #16
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	021b      	lsls	r3, r3, #8
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 0320 	bic.w	r3, r3, #32
 8008102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a22      	ldr	r2, [pc, #136]	; (800819c <TIM_OC2_SetConfig+0xe4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d003      	beq.n	8008120 <TIM_OC2_SetConfig+0x68>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a21      	ldr	r2, [pc, #132]	; (80081a0 <TIM_OC2_SetConfig+0xe8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d10d      	bne.n	800813c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800813a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a17      	ldr	r2, [pc, #92]	; (800819c <TIM_OC2_SetConfig+0xe4>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d003      	beq.n	800814c <TIM_OC2_SetConfig+0x94>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a16      	ldr	r2, [pc, #88]	; (80081a0 <TIM_OC2_SetConfig+0xe8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d113      	bne.n	8008174 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800815a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	4313      	orrs	r3, r2
 8008172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40010000 	.word	0x40010000
 80081a0:	40010400 	.word	0x40010400

080081a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a21      	ldr	r2, [pc, #132]	; (8008284 <TIM_OC3_SetConfig+0xe0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d003      	beq.n	800820a <TIM_OC3_SetConfig+0x66>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a20      	ldr	r2, [pc, #128]	; (8008288 <TIM_OC3_SetConfig+0xe4>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d10d      	bne.n	8008226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	4313      	orrs	r3, r2
 800821c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a16      	ldr	r2, [pc, #88]	; (8008284 <TIM_OC3_SetConfig+0xe0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d003      	beq.n	8008236 <TIM_OC3_SetConfig+0x92>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a15      	ldr	r2, [pc, #84]	; (8008288 <TIM_OC3_SetConfig+0xe4>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d113      	bne.n	800825e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800823c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	4313      	orrs	r3, r2
 8008250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	621a      	str	r2, [r3, #32]
}
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	40010000 	.word	0x40010000
 8008288:	40010400 	.word	0x40010400

0800828c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	031b      	lsls	r3, r3, #12
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a12      	ldr	r2, [pc, #72]	; (8008330 <TIM_OC4_SetConfig+0xa4>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d003      	beq.n	80082f4 <TIM_OC4_SetConfig+0x68>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a11      	ldr	r2, [pc, #68]	; (8008334 <TIM_OC4_SetConfig+0xa8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d109      	bne.n	8008308 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	019b      	lsls	r3, r3, #6
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	621a      	str	r2, [r3, #32]
}
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40010000 	.word	0x40010000
 8008334:	40010400 	.word	0x40010400

08008338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f023 0201 	bic.w	r2, r3, #1
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	4313      	orrs	r3, r2
 800836c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f023 030a 	bic.w	r3, r3, #10
 8008374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	621a      	str	r2, [r3, #32]
}
 800838a:	bf00      	nop
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008396:	b480      	push	{r7}
 8008398:	b087      	sub	sp, #28
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	f023 0210 	bic.w	r2, r3, #16
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	031b      	lsls	r3, r3, #12
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	621a      	str	r2, [r3, #32]
}
 80083ea:	bf00      	nop
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b085      	sub	sp, #20
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4313      	orrs	r3, r2
 8008414:	f043 0307 	orr.w	r3, r3, #7
 8008418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	609a      	str	r2, [r3, #8]
}
 8008420:	bf00      	nop
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	021a      	lsls	r2, r3, #8
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	431a      	orrs	r2, r3
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	4313      	orrs	r3, r2
 8008454:	697a      	ldr	r2, [r7, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	609a      	str	r2, [r3, #8]
}
 8008460:	bf00      	nop
 8008462:	371c      	adds	r7, #28
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f003 031f 	and.w	r3, r3, #31
 800847e:	2201      	movs	r2, #1
 8008480:	fa02 f303 	lsl.w	r3, r2, r3
 8008484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a1a      	ldr	r2, [r3, #32]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	43db      	mvns	r3, r3
 800848e:	401a      	ands	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1a      	ldr	r2, [r3, #32]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f003 031f 	and.w	r3, r3, #31
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	fa01 f303 	lsl.w	r3, r1, r3
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	621a      	str	r2, [r3, #32]
}
 80084aa:	bf00      	nop
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e05a      	b.n	8008586 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a21      	ldr	r2, [pc, #132]	; (8008594 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d022      	beq.n	800855a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800851c:	d01d      	beq.n	800855a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1d      	ldr	r2, [pc, #116]	; (8008598 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d018      	beq.n	800855a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1b      	ldr	r2, [pc, #108]	; (800859c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d013      	beq.n	800855a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1a      	ldr	r2, [pc, #104]	; (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00e      	beq.n	800855a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a18      	ldr	r2, [pc, #96]	; (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d009      	beq.n	800855a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a17      	ldr	r2, [pc, #92]	; (80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d004      	beq.n	800855a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a15      	ldr	r2, [pc, #84]	; (80085ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d10c      	bne.n	8008574 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	4313      	orrs	r3, r2
 800856a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	40010000 	.word	0x40010000
 8008598:	40000400 	.word	0x40000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	40000c00 	.word	0x40000c00
 80085a4:	40010400 	.word	0x40010400
 80085a8:	40014000 	.word	0x40014000
 80085ac:	40001800 	.word	0x40001800

080085b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e03d      	b.n	8008648 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	4313      	orrs	r3, r2
 8008618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e03f      	b.n	800870e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d106      	bne.n	80086a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7fc f9d2 	bl	8004a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2224      	movs	r2, #36	; 0x24
 80086ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fd09 	bl	80090d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695a      	ldr	r2, [r3, #20]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2220      	movs	r2, #32
 8008700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b088      	sub	sp, #32
 800871a:	af02      	add	r7, sp, #8
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	603b      	str	r3, [r7, #0]
 8008722:	4613      	mov	r3, r2
 8008724:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b20      	cmp	r3, #32
 8008734:	f040 8083 	bne.w	800883e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <HAL_UART_Transmit+0x2e>
 800873e:	88fb      	ldrh	r3, [r7, #6]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e07b      	b.n	8008840 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800874e:	2b01      	cmp	r3, #1
 8008750:	d101      	bne.n	8008756 <HAL_UART_Transmit+0x40>
 8008752:	2302      	movs	r3, #2
 8008754:	e074      	b.n	8008840 <HAL_UART_Transmit+0x12a>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2221      	movs	r2, #33	; 0x21
 8008768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800876c:	f7fc fb86 	bl	8004e7c <HAL_GetTick>
 8008770:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	88fa      	ldrh	r2, [r7, #6]
 8008776:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	88fa      	ldrh	r2, [r7, #6]
 800877c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008786:	e042      	b.n	800880e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800878c:	b29b      	uxth	r3, r3
 800878e:	3b01      	subs	r3, #1
 8008790:	b29a      	uxth	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800879e:	d122      	bne.n	80087e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2200      	movs	r2, #0
 80087a8:	2180      	movs	r1, #128	; 0x80
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fb12 	bl	8008dd4 <UART_WaitOnFlagUntilTimeout>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e042      	b.n	8008840 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d103      	bne.n	80087de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	3302      	adds	r3, #2
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	e017      	b.n	800880e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	3301      	adds	r3, #1
 80087e2:	60bb      	str	r3, [r7, #8]
 80087e4:	e013      	b.n	800880e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2200      	movs	r2, #0
 80087ee:	2180      	movs	r1, #128	; 0x80
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 faef 	bl	8008dd4 <UART_WaitOnFlagUntilTimeout>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e01f      	b.n	8008840 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	60ba      	str	r2, [r7, #8]
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008812:	b29b      	uxth	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1b7      	bne.n	8008788 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2200      	movs	r2, #0
 8008820:	2140      	movs	r1, #64	; 0x40
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 fad6 	bl	8008dd4 <UART_WaitOnFlagUntilTimeout>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e006      	b.n	8008840 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2220      	movs	r2, #32
 8008836:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	e000      	b.n	8008840 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800883e:	2302      	movs	r3, #2
  }
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af02      	add	r7, sp, #8
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	4613      	mov	r3, r2
 8008856:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b20      	cmp	r3, #32
 8008866:	f040 8090 	bne.w	800898a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_UART_Receive+0x2e>
 8008870:	88fb      	ldrh	r3, [r7, #6]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e088      	b.n	800898c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008880:	2b01      	cmp	r3, #1
 8008882:	d101      	bne.n	8008888 <HAL_UART_Receive+0x40>
 8008884:	2302      	movs	r3, #2
 8008886:	e081      	b.n	800898c <HAL_UART_Receive+0x144>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2222      	movs	r2, #34	; 0x22
 800889a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800889e:	f7fc faed 	bl	8004e7c <HAL_GetTick>
 80088a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	88fa      	ldrh	r2, [r7, #6]
 80088a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	88fa      	ldrh	r2, [r7, #6]
 80088ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80088b8:	e05c      	b.n	8008974 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088be:	b29b      	uxth	r3, r3
 80088c0:	3b01      	subs	r3, #1
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d0:	d12b      	bne.n	800892a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2200      	movs	r2, #0
 80088da:	2120      	movs	r1, #32
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fa79 	bl	8008dd4 <UART_WaitOnFlagUntilTimeout>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e04f      	b.n	800898c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10c      	bne.n	8008912 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008904:	b29a      	uxth	r2, r3
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	3302      	adds	r3, #2
 800890e:	60bb      	str	r3, [r7, #8]
 8008910:	e030      	b.n	8008974 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	b29b      	uxth	r3, r3
 800891a:	b2db      	uxtb	r3, r3
 800891c:	b29a      	uxth	r2, r3
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	3301      	adds	r3, #1
 8008926:	60bb      	str	r3, [r7, #8]
 8008928:	e024      	b.n	8008974 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2200      	movs	r2, #0
 8008932:	2120      	movs	r1, #32
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 fa4d 	bl	8008dd4 <UART_WaitOnFlagUntilTimeout>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e023      	b.n	800898c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d108      	bne.n	800895e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6859      	ldr	r1, [r3, #4]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	60ba      	str	r2, [r7, #8]
 8008958:	b2ca      	uxtb	r2, r1
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	e00a      	b.n	8008974 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	b2da      	uxtb	r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	1c59      	adds	r1, r3, #1
 800896a:	60b9      	str	r1, [r7, #8]
 800896c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008978:	b29b      	uxth	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d19d      	bne.n	80088ba <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2220      	movs	r2, #32
 8008982:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	e000      	b.n	800898c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800898a:	2302      	movs	r3, #2
  }
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4613      	mov	r3, r2
 80089a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b20      	cmp	r3, #32
 80089ac:	d166      	bne.n	8008a7c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <HAL_UART_Receive_DMA+0x26>
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e05f      	b.n	8008a7e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d101      	bne.n	80089cc <HAL_UART_Receive_DMA+0x38>
 80089c8:	2302      	movs	r3, #2
 80089ca:	e058      	b.n	8008a7e <HAL_UART_Receive_DMA+0xea>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	88fa      	ldrh	r2, [r7, #6]
 80089de:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2222      	movs	r2, #34	; 0x22
 80089ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f2:	4a25      	ldr	r2, [pc, #148]	; (8008a88 <HAL_UART_Receive_DMA+0xf4>)
 80089f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fa:	4a24      	ldr	r2, [pc, #144]	; (8008a8c <HAL_UART_Receive_DMA+0xf8>)
 80089fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a02:	4a23      	ldr	r2, [pc, #140]	; (8008a90 <HAL_UART_Receive_DMA+0xfc>)
 8008a04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008a0e:	f107 0308 	add.w	r3, r7, #8
 8008a12:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	4619      	mov	r1, r3
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	88fb      	ldrh	r3, [r7, #6]
 8008a26:	f7fc fe79 	bl	800571c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a56:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695a      	ldr	r2, [r3, #20]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0201 	orr.w	r2, r2, #1
 8008a66:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695a      	ldr	r2, [r3, #20]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a76:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e000      	b.n	8008a7e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008a7c:	2302      	movs	r3, #2
  }
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	08008cbd 	.word	0x08008cbd
 8008a8c:	08008d25 	.word	0x08008d25
 8008a90:	08008d41 	.word	0x08008d41

08008a94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10d      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d008      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x52>
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa78 	bl	8008fd4 <UART_Receive_IT>
      return;
 8008ae4:	e0d1      	b.n	8008c8a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 80b0 	beq.w	8008c4e <HAL_UART_IRQHandler+0x1ba>
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d105      	bne.n	8008b04 <HAL_UART_IRQHandler+0x70>
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 80a5 	beq.w	8008c4e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <HAL_UART_IRQHandler+0x90>
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1c:	f043 0201 	orr.w	r2, r3, #1
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	f003 0304 	and.w	r3, r3, #4
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <HAL_UART_IRQHandler+0xb0>
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3c:	f043 0202 	orr.w	r2, r3, #2
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <HAL_UART_IRQHandler+0xd0>
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5c:	f043 0204 	orr.w	r2, r3, #4
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	f003 0308 	and.w	r3, r3, #8
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00f      	beq.n	8008b8e <HAL_UART_IRQHandler+0xfa>
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	f003 0320 	and.w	r3, r3, #32
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <HAL_UART_IRQHandler+0xee>
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d005      	beq.n	8008b8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b86:	f043 0208 	orr.w	r2, r3, #8
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d078      	beq.n	8008c88 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f003 0320 	and.w	r3, r3, #32
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <HAL_UART_IRQHandler+0x11c>
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	f003 0320 	and.w	r3, r3, #32
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa12 	bl	8008fd4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bba:	2b40      	cmp	r3, #64	; 0x40
 8008bbc:	bf0c      	ite	eq
 8008bbe:	2301      	moveq	r3, #1
 8008bc0:	2300      	movne	r3, #0
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d102      	bne.n	8008bd8 <HAL_UART_IRQHandler+0x144>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d031      	beq.n	8008c3c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f95b 	bl	8008e94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be8:	2b40      	cmp	r3, #64	; 0x40
 8008bea:	d123      	bne.n	8008c34 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	695a      	ldr	r2, [r3, #20]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bfa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d013      	beq.n	8008c2c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c08:	4a21      	ldr	r2, [pc, #132]	; (8008c90 <HAL_UART_IRQHandler+0x1fc>)
 8008c0a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fc fddb 	bl	80057cc <HAL_DMA_Abort_IT>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d016      	beq.n	8008c4a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008c26:	4610      	mov	r0, r2
 8008c28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c2a:	e00e      	b.n	8008c4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f83b 	bl	8008ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c32:	e00a      	b.n	8008c4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f837 	bl	8008ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3a:	e006      	b.n	8008c4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f833 	bl	8008ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008c48:	e01e      	b.n	8008c88 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c4a:	bf00      	nop
    return;
 8008c4c:	e01c      	b.n	8008c88 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <HAL_UART_IRQHandler+0x1d6>
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f948 	bl	8008ef8 <UART_Transmit_IT>
    return;
 8008c68:	e00f      	b.n	8008c8a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00a      	beq.n	8008c8a <HAL_UART_IRQHandler+0x1f6>
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d005      	beq.n	8008c8a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f990 	bl	8008fa4 <UART_EndTransmit_IT>
    return;
 8008c84:	bf00      	nop
 8008c86:	e000      	b.n	8008c8a <HAL_UART_IRQHandler+0x1f6>
    return;
 8008c88:	bf00      	nop
  }
}
 8008c8a:	3720      	adds	r7, #32
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	08008ed1 	.word	0x08008ed1

08008c94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d11e      	bne.n	8008d16 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cec:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	695a      	ldr	r2, [r3, #20]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f022 0201 	bic.w	r2, r2, #1
 8008cfc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	695a      	ldr	r2, [r3, #20]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d0c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7fb fc30 	bl	800457c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d1c:	bf00      	nop
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d30:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7fb fc2d 	bl	8004592 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d38:	bf00      	nop
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d50:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5c:	2b80      	cmp	r3, #128	; 0x80
 8008d5e:	bf0c      	ite	eq
 8008d60:	2301      	moveq	r3, #1
 8008d62:	2300      	movne	r3, #0
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b21      	cmp	r3, #33	; 0x21
 8008d72:	d108      	bne.n	8008d86 <UART_DMAError+0x46>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008d80:	68b8      	ldr	r0, [r7, #8]
 8008d82:	f000 f871 	bl	8008e68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d90:	2b40      	cmp	r3, #64	; 0x40
 8008d92:	bf0c      	ite	eq
 8008d94:	2301      	moveq	r3, #1
 8008d96:	2300      	movne	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b22      	cmp	r3, #34	; 0x22
 8008da6:	d108      	bne.n	8008dba <UART_DMAError+0x7a>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2200      	movs	r2, #0
 8008db2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008db4:	68b8      	ldr	r0, [r7, #8]
 8008db6:	f000 f86d 	bl	8008e94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dbe:	f043 0210 	orr.w	r2, r3, #16
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dc6:	68b8      	ldr	r0, [r7, #8]
 8008dc8:	f7ff ff6e 	bl	8008ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dcc:	bf00      	nop
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	603b      	str	r3, [r7, #0]
 8008de0:	4613      	mov	r3, r2
 8008de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de4:	e02c      	b.n	8008e40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dec:	d028      	beq.n	8008e40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d007      	beq.n	8008e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8008df4:	f7fc f842 	bl	8004e7c <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d21d      	bcs.n	8008e40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	695a      	ldr	r2, [r3, #20]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f022 0201 	bic.w	r2, r2, #1
 8008e22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2220      	movs	r2, #32
 8008e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e00f      	b.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	bf0c      	ite	eq
 8008e50:	2301      	moveq	r3, #1
 8008e52:	2300      	movne	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	461a      	mov	r2, r3
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d0c3      	beq.n	8008de6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008e7e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68da      	ldr	r2, [r3, #12]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008eaa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	695a      	ldr	r2, [r3, #20]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f022 0201 	bic.w	r2, r2, #1
 8008eba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f7ff fedc 	bl	8008ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b21      	cmp	r3, #33	; 0x21
 8008f0a:	d144      	bne.n	8008f96 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f14:	d11a      	bne.n	8008f4c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f2a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d105      	bne.n	8008f40 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	1c9a      	adds	r2, r3, #2
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	621a      	str	r2, [r3, #32]
 8008f3e:	e00e      	b.n	8008f5e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a1b      	ldr	r3, [r3, #32]
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	621a      	str	r2, [r3, #32]
 8008f4a:	e008      	b.n	8008f5e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	1c59      	adds	r1, r3, #1
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6211      	str	r1, [r2, #32]
 8008f56:	781a      	ldrb	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10f      	bne.n	8008f92 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68da      	ldr	r2, [r3, #12]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e000      	b.n	8008f98 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008f96:	2302      	movs	r3, #2
  }
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68da      	ldr	r2, [r3, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff fe65 	bl	8008c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b22      	cmp	r3, #34	; 0x22
 8008fe6:	d171      	bne.n	80090cc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff0:	d123      	bne.n	800903a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10e      	bne.n	800901e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b29b      	uxth	r3, r3
 8009008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900c:	b29a      	uxth	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	1c9a      	adds	r2, r3, #2
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	629a      	str	r2, [r3, #40]	; 0x28
 800901c:	e029      	b.n	8009072 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	b29b      	uxth	r3, r3
 8009026:	b2db      	uxtb	r3, r3
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	629a      	str	r2, [r3, #40]	; 0x28
 8009038:	e01b      	b.n	8009072 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6858      	ldr	r0, [r3, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904c:	1c59      	adds	r1, r3, #1
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	6291      	str	r1, [r2, #40]	; 0x28
 8009052:	b2c2      	uxtb	r2, r0
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	e00c      	b.n	8009072 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	b2da      	uxtb	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	1c58      	adds	r0, r3, #1
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	6288      	str	r0, [r1, #40]	; 0x28
 800906a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800906e:	b2d2      	uxtb	r2, r2
 8009070:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009076:	b29b      	uxth	r3, r3
 8009078:	3b01      	subs	r3, #1
 800907a:	b29b      	uxth	r3, r3
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	4619      	mov	r1, r3
 8009080:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009082:	2b00      	cmp	r3, #0
 8009084:	d120      	bne.n	80090c8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 0220 	bic.w	r2, r2, #32
 8009094:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68da      	ldr	r2, [r3, #12]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	695a      	ldr	r2, [r3, #20]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0201 	bic.w	r2, r2, #1
 80090b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7fb fa5c 	bl	800457c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e002      	b.n	80090ce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	e000      	b.n	80090ce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80090cc:	2302      	movs	r3, #2
  }
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	430a      	orrs	r2, r1
 80090f6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	431a      	orrs	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800911a:	f023 030c 	bic.w	r3, r3, #12
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	6812      	ldr	r2, [r2, #0]
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	430b      	orrs	r3, r1
 8009126:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699a      	ldr	r2, [r3, #24]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009146:	f040 818b 	bne.w	8009460 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4ac1      	ldr	r2, [pc, #772]	; (8009454 <UART_SetConfig+0x37c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d005      	beq.n	8009160 <UART_SetConfig+0x88>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4abf      	ldr	r2, [pc, #764]	; (8009458 <UART_SetConfig+0x380>)
 800915a:	4293      	cmp	r3, r2
 800915c:	f040 80bd 	bne.w	80092da <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009160:	f7fd fcd2 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 8009164:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	461d      	mov	r5, r3
 800916a:	f04f 0600 	mov.w	r6, #0
 800916e:	46a8      	mov	r8, r5
 8009170:	46b1      	mov	r9, r6
 8009172:	eb18 0308 	adds.w	r3, r8, r8
 8009176:	eb49 0409 	adc.w	r4, r9, r9
 800917a:	4698      	mov	r8, r3
 800917c:	46a1      	mov	r9, r4
 800917e:	eb18 0805 	adds.w	r8, r8, r5
 8009182:	eb49 0906 	adc.w	r9, r9, r6
 8009186:	f04f 0100 	mov.w	r1, #0
 800918a:	f04f 0200 	mov.w	r2, #0
 800918e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009192:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009196:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800919a:	4688      	mov	r8, r1
 800919c:	4691      	mov	r9, r2
 800919e:	eb18 0005 	adds.w	r0, r8, r5
 80091a2:	eb49 0106 	adc.w	r1, r9, r6
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	461d      	mov	r5, r3
 80091ac:	f04f 0600 	mov.w	r6, #0
 80091b0:	196b      	adds	r3, r5, r5
 80091b2:	eb46 0406 	adc.w	r4, r6, r6
 80091b6:	461a      	mov	r2, r3
 80091b8:	4623      	mov	r3, r4
 80091ba:	f7f7 fd45 	bl	8000c48 <__aeabi_uldivmod>
 80091be:	4603      	mov	r3, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	461a      	mov	r2, r3
 80091c4:	4ba5      	ldr	r3, [pc, #660]	; (800945c <UART_SetConfig+0x384>)
 80091c6:	fba3 2302 	umull	r2, r3, r3, r2
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	461d      	mov	r5, r3
 80091d4:	f04f 0600 	mov.w	r6, #0
 80091d8:	46a9      	mov	r9, r5
 80091da:	46b2      	mov	sl, r6
 80091dc:	eb19 0309 	adds.w	r3, r9, r9
 80091e0:	eb4a 040a 	adc.w	r4, sl, sl
 80091e4:	4699      	mov	r9, r3
 80091e6:	46a2      	mov	sl, r4
 80091e8:	eb19 0905 	adds.w	r9, r9, r5
 80091ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80091f0:	f04f 0100 	mov.w	r1, #0
 80091f4:	f04f 0200 	mov.w	r2, #0
 80091f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009200:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009204:	4689      	mov	r9, r1
 8009206:	4692      	mov	sl, r2
 8009208:	eb19 0005 	adds.w	r0, r9, r5
 800920c:	eb4a 0106 	adc.w	r1, sl, r6
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	461d      	mov	r5, r3
 8009216:	f04f 0600 	mov.w	r6, #0
 800921a:	196b      	adds	r3, r5, r5
 800921c:	eb46 0406 	adc.w	r4, r6, r6
 8009220:	461a      	mov	r2, r3
 8009222:	4623      	mov	r3, r4
 8009224:	f7f7 fd10 	bl	8000c48 <__aeabi_uldivmod>
 8009228:	4603      	mov	r3, r0
 800922a:	460c      	mov	r4, r1
 800922c:	461a      	mov	r2, r3
 800922e:	4b8b      	ldr	r3, [pc, #556]	; (800945c <UART_SetConfig+0x384>)
 8009230:	fba3 1302 	umull	r1, r3, r3, r2
 8009234:	095b      	lsrs	r3, r3, #5
 8009236:	2164      	movs	r1, #100	; 0x64
 8009238:	fb01 f303 	mul.w	r3, r1, r3
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	3332      	adds	r3, #50	; 0x32
 8009242:	4a86      	ldr	r2, [pc, #536]	; (800945c <UART_SetConfig+0x384>)
 8009244:	fba2 2303 	umull	r2, r3, r2, r3
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009250:	4498      	add	r8, r3
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	461d      	mov	r5, r3
 8009256:	f04f 0600 	mov.w	r6, #0
 800925a:	46a9      	mov	r9, r5
 800925c:	46b2      	mov	sl, r6
 800925e:	eb19 0309 	adds.w	r3, r9, r9
 8009262:	eb4a 040a 	adc.w	r4, sl, sl
 8009266:	4699      	mov	r9, r3
 8009268:	46a2      	mov	sl, r4
 800926a:	eb19 0905 	adds.w	r9, r9, r5
 800926e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009272:	f04f 0100 	mov.w	r1, #0
 8009276:	f04f 0200 	mov.w	r2, #0
 800927a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800927e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009282:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009286:	4689      	mov	r9, r1
 8009288:	4692      	mov	sl, r2
 800928a:	eb19 0005 	adds.w	r0, r9, r5
 800928e:	eb4a 0106 	adc.w	r1, sl, r6
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	461d      	mov	r5, r3
 8009298:	f04f 0600 	mov.w	r6, #0
 800929c:	196b      	adds	r3, r5, r5
 800929e:	eb46 0406 	adc.w	r4, r6, r6
 80092a2:	461a      	mov	r2, r3
 80092a4:	4623      	mov	r3, r4
 80092a6:	f7f7 fccf 	bl	8000c48 <__aeabi_uldivmod>
 80092aa:	4603      	mov	r3, r0
 80092ac:	460c      	mov	r4, r1
 80092ae:	461a      	mov	r2, r3
 80092b0:	4b6a      	ldr	r3, [pc, #424]	; (800945c <UART_SetConfig+0x384>)
 80092b2:	fba3 1302 	umull	r1, r3, r3, r2
 80092b6:	095b      	lsrs	r3, r3, #5
 80092b8:	2164      	movs	r1, #100	; 0x64
 80092ba:	fb01 f303 	mul.w	r3, r1, r3
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	00db      	lsls	r3, r3, #3
 80092c2:	3332      	adds	r3, #50	; 0x32
 80092c4:	4a65      	ldr	r2, [pc, #404]	; (800945c <UART_SetConfig+0x384>)
 80092c6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ca:	095b      	lsrs	r3, r3, #5
 80092cc:	f003 0207 	and.w	r2, r3, #7
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4442      	add	r2, r8
 80092d6:	609a      	str	r2, [r3, #8]
 80092d8:	e26f      	b.n	80097ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092da:	f7fd fc01 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 80092de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	461d      	mov	r5, r3
 80092e4:	f04f 0600 	mov.w	r6, #0
 80092e8:	46a8      	mov	r8, r5
 80092ea:	46b1      	mov	r9, r6
 80092ec:	eb18 0308 	adds.w	r3, r8, r8
 80092f0:	eb49 0409 	adc.w	r4, r9, r9
 80092f4:	4698      	mov	r8, r3
 80092f6:	46a1      	mov	r9, r4
 80092f8:	eb18 0805 	adds.w	r8, r8, r5
 80092fc:	eb49 0906 	adc.w	r9, r9, r6
 8009300:	f04f 0100 	mov.w	r1, #0
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800930c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009310:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009314:	4688      	mov	r8, r1
 8009316:	4691      	mov	r9, r2
 8009318:	eb18 0005 	adds.w	r0, r8, r5
 800931c:	eb49 0106 	adc.w	r1, r9, r6
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	461d      	mov	r5, r3
 8009326:	f04f 0600 	mov.w	r6, #0
 800932a:	196b      	adds	r3, r5, r5
 800932c:	eb46 0406 	adc.w	r4, r6, r6
 8009330:	461a      	mov	r2, r3
 8009332:	4623      	mov	r3, r4
 8009334:	f7f7 fc88 	bl	8000c48 <__aeabi_uldivmod>
 8009338:	4603      	mov	r3, r0
 800933a:	460c      	mov	r4, r1
 800933c:	461a      	mov	r2, r3
 800933e:	4b47      	ldr	r3, [pc, #284]	; (800945c <UART_SetConfig+0x384>)
 8009340:	fba3 2302 	umull	r2, r3, r3, r2
 8009344:	095b      	lsrs	r3, r3, #5
 8009346:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	461d      	mov	r5, r3
 800934e:	f04f 0600 	mov.w	r6, #0
 8009352:	46a9      	mov	r9, r5
 8009354:	46b2      	mov	sl, r6
 8009356:	eb19 0309 	adds.w	r3, r9, r9
 800935a:	eb4a 040a 	adc.w	r4, sl, sl
 800935e:	4699      	mov	r9, r3
 8009360:	46a2      	mov	sl, r4
 8009362:	eb19 0905 	adds.w	r9, r9, r5
 8009366:	eb4a 0a06 	adc.w	sl, sl, r6
 800936a:	f04f 0100 	mov.w	r1, #0
 800936e:	f04f 0200 	mov.w	r2, #0
 8009372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800937a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800937e:	4689      	mov	r9, r1
 8009380:	4692      	mov	sl, r2
 8009382:	eb19 0005 	adds.w	r0, r9, r5
 8009386:	eb4a 0106 	adc.w	r1, sl, r6
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	461d      	mov	r5, r3
 8009390:	f04f 0600 	mov.w	r6, #0
 8009394:	196b      	adds	r3, r5, r5
 8009396:	eb46 0406 	adc.w	r4, r6, r6
 800939a:	461a      	mov	r2, r3
 800939c:	4623      	mov	r3, r4
 800939e:	f7f7 fc53 	bl	8000c48 <__aeabi_uldivmod>
 80093a2:	4603      	mov	r3, r0
 80093a4:	460c      	mov	r4, r1
 80093a6:	461a      	mov	r2, r3
 80093a8:	4b2c      	ldr	r3, [pc, #176]	; (800945c <UART_SetConfig+0x384>)
 80093aa:	fba3 1302 	umull	r1, r3, r3, r2
 80093ae:	095b      	lsrs	r3, r3, #5
 80093b0:	2164      	movs	r1, #100	; 0x64
 80093b2:	fb01 f303 	mul.w	r3, r1, r3
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	3332      	adds	r3, #50	; 0x32
 80093bc:	4a27      	ldr	r2, [pc, #156]	; (800945c <UART_SetConfig+0x384>)
 80093be:	fba2 2303 	umull	r2, r3, r2, r3
 80093c2:	095b      	lsrs	r3, r3, #5
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093ca:	4498      	add	r8, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	461d      	mov	r5, r3
 80093d0:	f04f 0600 	mov.w	r6, #0
 80093d4:	46a9      	mov	r9, r5
 80093d6:	46b2      	mov	sl, r6
 80093d8:	eb19 0309 	adds.w	r3, r9, r9
 80093dc:	eb4a 040a 	adc.w	r4, sl, sl
 80093e0:	4699      	mov	r9, r3
 80093e2:	46a2      	mov	sl, r4
 80093e4:	eb19 0905 	adds.w	r9, r9, r5
 80093e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80093ec:	f04f 0100 	mov.w	r1, #0
 80093f0:	f04f 0200 	mov.w	r2, #0
 80093f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009400:	4689      	mov	r9, r1
 8009402:	4692      	mov	sl, r2
 8009404:	eb19 0005 	adds.w	r0, r9, r5
 8009408:	eb4a 0106 	adc.w	r1, sl, r6
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	461d      	mov	r5, r3
 8009412:	f04f 0600 	mov.w	r6, #0
 8009416:	196b      	adds	r3, r5, r5
 8009418:	eb46 0406 	adc.w	r4, r6, r6
 800941c:	461a      	mov	r2, r3
 800941e:	4623      	mov	r3, r4
 8009420:	f7f7 fc12 	bl	8000c48 <__aeabi_uldivmod>
 8009424:	4603      	mov	r3, r0
 8009426:	460c      	mov	r4, r1
 8009428:	461a      	mov	r2, r3
 800942a:	4b0c      	ldr	r3, [pc, #48]	; (800945c <UART_SetConfig+0x384>)
 800942c:	fba3 1302 	umull	r1, r3, r3, r2
 8009430:	095b      	lsrs	r3, r3, #5
 8009432:	2164      	movs	r1, #100	; 0x64
 8009434:	fb01 f303 	mul.w	r3, r1, r3
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	3332      	adds	r3, #50	; 0x32
 800943e:	4a07      	ldr	r2, [pc, #28]	; (800945c <UART_SetConfig+0x384>)
 8009440:	fba2 2303 	umull	r2, r3, r2, r3
 8009444:	095b      	lsrs	r3, r3, #5
 8009446:	f003 0207 	and.w	r2, r3, #7
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4442      	add	r2, r8
 8009450:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009452:	e1b2      	b.n	80097ba <UART_SetConfig+0x6e2>
 8009454:	40011000 	.word	0x40011000
 8009458:	40011400 	.word	0x40011400
 800945c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4ad7      	ldr	r2, [pc, #860]	; (80097c4 <UART_SetConfig+0x6ec>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d005      	beq.n	8009476 <UART_SetConfig+0x39e>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4ad6      	ldr	r2, [pc, #856]	; (80097c8 <UART_SetConfig+0x6f0>)
 8009470:	4293      	cmp	r3, r2
 8009472:	f040 80d1 	bne.w	8009618 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009476:	f7fd fb47 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 800947a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	469a      	mov	sl, r3
 8009480:	f04f 0b00 	mov.w	fp, #0
 8009484:	46d0      	mov	r8, sl
 8009486:	46d9      	mov	r9, fp
 8009488:	eb18 0308 	adds.w	r3, r8, r8
 800948c:	eb49 0409 	adc.w	r4, r9, r9
 8009490:	4698      	mov	r8, r3
 8009492:	46a1      	mov	r9, r4
 8009494:	eb18 080a 	adds.w	r8, r8, sl
 8009498:	eb49 090b 	adc.w	r9, r9, fp
 800949c:	f04f 0100 	mov.w	r1, #0
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80094a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80094ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80094b0:	4688      	mov	r8, r1
 80094b2:	4691      	mov	r9, r2
 80094b4:	eb1a 0508 	adds.w	r5, sl, r8
 80094b8:	eb4b 0609 	adc.w	r6, fp, r9
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	4619      	mov	r1, r3
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	f04f 0300 	mov.w	r3, #0
 80094ca:	f04f 0400 	mov.w	r4, #0
 80094ce:	0094      	lsls	r4, r2, #2
 80094d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094d4:	008b      	lsls	r3, r1, #2
 80094d6:	461a      	mov	r2, r3
 80094d8:	4623      	mov	r3, r4
 80094da:	4628      	mov	r0, r5
 80094dc:	4631      	mov	r1, r6
 80094de:	f7f7 fbb3 	bl	8000c48 <__aeabi_uldivmod>
 80094e2:	4603      	mov	r3, r0
 80094e4:	460c      	mov	r4, r1
 80094e6:	461a      	mov	r2, r3
 80094e8:	4bb8      	ldr	r3, [pc, #736]	; (80097cc <UART_SetConfig+0x6f4>)
 80094ea:	fba3 2302 	umull	r2, r3, r3, r2
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	469b      	mov	fp, r3
 80094f8:	f04f 0c00 	mov.w	ip, #0
 80094fc:	46d9      	mov	r9, fp
 80094fe:	46e2      	mov	sl, ip
 8009500:	eb19 0309 	adds.w	r3, r9, r9
 8009504:	eb4a 040a 	adc.w	r4, sl, sl
 8009508:	4699      	mov	r9, r3
 800950a:	46a2      	mov	sl, r4
 800950c:	eb19 090b 	adds.w	r9, r9, fp
 8009510:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009514:	f04f 0100 	mov.w	r1, #0
 8009518:	f04f 0200 	mov.w	r2, #0
 800951c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009520:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009524:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009528:	4689      	mov	r9, r1
 800952a:	4692      	mov	sl, r2
 800952c:	eb1b 0509 	adds.w	r5, fp, r9
 8009530:	eb4c 060a 	adc.w	r6, ip, sl
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	4619      	mov	r1, r3
 800953a:	f04f 0200 	mov.w	r2, #0
 800953e:	f04f 0300 	mov.w	r3, #0
 8009542:	f04f 0400 	mov.w	r4, #0
 8009546:	0094      	lsls	r4, r2, #2
 8009548:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800954c:	008b      	lsls	r3, r1, #2
 800954e:	461a      	mov	r2, r3
 8009550:	4623      	mov	r3, r4
 8009552:	4628      	mov	r0, r5
 8009554:	4631      	mov	r1, r6
 8009556:	f7f7 fb77 	bl	8000c48 <__aeabi_uldivmod>
 800955a:	4603      	mov	r3, r0
 800955c:	460c      	mov	r4, r1
 800955e:	461a      	mov	r2, r3
 8009560:	4b9a      	ldr	r3, [pc, #616]	; (80097cc <UART_SetConfig+0x6f4>)
 8009562:	fba3 1302 	umull	r1, r3, r3, r2
 8009566:	095b      	lsrs	r3, r3, #5
 8009568:	2164      	movs	r1, #100	; 0x64
 800956a:	fb01 f303 	mul.w	r3, r1, r3
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	3332      	adds	r3, #50	; 0x32
 8009574:	4a95      	ldr	r2, [pc, #596]	; (80097cc <UART_SetConfig+0x6f4>)
 8009576:	fba2 2303 	umull	r2, r3, r2, r3
 800957a:	095b      	lsrs	r3, r3, #5
 800957c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009580:	4498      	add	r8, r3
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	469b      	mov	fp, r3
 8009586:	f04f 0c00 	mov.w	ip, #0
 800958a:	46d9      	mov	r9, fp
 800958c:	46e2      	mov	sl, ip
 800958e:	eb19 0309 	adds.w	r3, r9, r9
 8009592:	eb4a 040a 	adc.w	r4, sl, sl
 8009596:	4699      	mov	r9, r3
 8009598:	46a2      	mov	sl, r4
 800959a:	eb19 090b 	adds.w	r9, r9, fp
 800959e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80095a2:	f04f 0100 	mov.w	r1, #0
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80095b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095b6:	4689      	mov	r9, r1
 80095b8:	4692      	mov	sl, r2
 80095ba:	eb1b 0509 	adds.w	r5, fp, r9
 80095be:	eb4c 060a 	adc.w	r6, ip, sl
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	4619      	mov	r1, r3
 80095c8:	f04f 0200 	mov.w	r2, #0
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	f04f 0400 	mov.w	r4, #0
 80095d4:	0094      	lsls	r4, r2, #2
 80095d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095da:	008b      	lsls	r3, r1, #2
 80095dc:	461a      	mov	r2, r3
 80095de:	4623      	mov	r3, r4
 80095e0:	4628      	mov	r0, r5
 80095e2:	4631      	mov	r1, r6
 80095e4:	f7f7 fb30 	bl	8000c48 <__aeabi_uldivmod>
 80095e8:	4603      	mov	r3, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	461a      	mov	r2, r3
 80095ee:	4b77      	ldr	r3, [pc, #476]	; (80097cc <UART_SetConfig+0x6f4>)
 80095f0:	fba3 1302 	umull	r1, r3, r3, r2
 80095f4:	095b      	lsrs	r3, r3, #5
 80095f6:	2164      	movs	r1, #100	; 0x64
 80095f8:	fb01 f303 	mul.w	r3, r1, r3
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	011b      	lsls	r3, r3, #4
 8009600:	3332      	adds	r3, #50	; 0x32
 8009602:	4a72      	ldr	r2, [pc, #456]	; (80097cc <UART_SetConfig+0x6f4>)
 8009604:	fba2 2303 	umull	r2, r3, r2, r3
 8009608:	095b      	lsrs	r3, r3, #5
 800960a:	f003 020f 	and.w	r2, r3, #15
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4442      	add	r2, r8
 8009614:	609a      	str	r2, [r3, #8]
 8009616:	e0d0      	b.n	80097ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009618:	f7fd fa62 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 800961c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	469a      	mov	sl, r3
 8009622:	f04f 0b00 	mov.w	fp, #0
 8009626:	46d0      	mov	r8, sl
 8009628:	46d9      	mov	r9, fp
 800962a:	eb18 0308 	adds.w	r3, r8, r8
 800962e:	eb49 0409 	adc.w	r4, r9, r9
 8009632:	4698      	mov	r8, r3
 8009634:	46a1      	mov	r9, r4
 8009636:	eb18 080a 	adds.w	r8, r8, sl
 800963a:	eb49 090b 	adc.w	r9, r9, fp
 800963e:	f04f 0100 	mov.w	r1, #0
 8009642:	f04f 0200 	mov.w	r2, #0
 8009646:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800964a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800964e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009652:	4688      	mov	r8, r1
 8009654:	4691      	mov	r9, r2
 8009656:	eb1a 0508 	adds.w	r5, sl, r8
 800965a:	eb4b 0609 	adc.w	r6, fp, r9
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	4619      	mov	r1, r3
 8009664:	f04f 0200 	mov.w	r2, #0
 8009668:	f04f 0300 	mov.w	r3, #0
 800966c:	f04f 0400 	mov.w	r4, #0
 8009670:	0094      	lsls	r4, r2, #2
 8009672:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009676:	008b      	lsls	r3, r1, #2
 8009678:	461a      	mov	r2, r3
 800967a:	4623      	mov	r3, r4
 800967c:	4628      	mov	r0, r5
 800967e:	4631      	mov	r1, r6
 8009680:	f7f7 fae2 	bl	8000c48 <__aeabi_uldivmod>
 8009684:	4603      	mov	r3, r0
 8009686:	460c      	mov	r4, r1
 8009688:	461a      	mov	r2, r3
 800968a:	4b50      	ldr	r3, [pc, #320]	; (80097cc <UART_SetConfig+0x6f4>)
 800968c:	fba3 2302 	umull	r2, r3, r3, r2
 8009690:	095b      	lsrs	r3, r3, #5
 8009692:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	469b      	mov	fp, r3
 800969a:	f04f 0c00 	mov.w	ip, #0
 800969e:	46d9      	mov	r9, fp
 80096a0:	46e2      	mov	sl, ip
 80096a2:	eb19 0309 	adds.w	r3, r9, r9
 80096a6:	eb4a 040a 	adc.w	r4, sl, sl
 80096aa:	4699      	mov	r9, r3
 80096ac:	46a2      	mov	sl, r4
 80096ae:	eb19 090b 	adds.w	r9, r9, fp
 80096b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80096b6:	f04f 0100 	mov.w	r1, #0
 80096ba:	f04f 0200 	mov.w	r2, #0
 80096be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80096c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096ca:	4689      	mov	r9, r1
 80096cc:	4692      	mov	sl, r2
 80096ce:	eb1b 0509 	adds.w	r5, fp, r9
 80096d2:	eb4c 060a 	adc.w	r6, ip, sl
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	4619      	mov	r1, r3
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	f04f 0300 	mov.w	r3, #0
 80096e4:	f04f 0400 	mov.w	r4, #0
 80096e8:	0094      	lsls	r4, r2, #2
 80096ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80096ee:	008b      	lsls	r3, r1, #2
 80096f0:	461a      	mov	r2, r3
 80096f2:	4623      	mov	r3, r4
 80096f4:	4628      	mov	r0, r5
 80096f6:	4631      	mov	r1, r6
 80096f8:	f7f7 faa6 	bl	8000c48 <__aeabi_uldivmod>
 80096fc:	4603      	mov	r3, r0
 80096fe:	460c      	mov	r4, r1
 8009700:	461a      	mov	r2, r3
 8009702:	4b32      	ldr	r3, [pc, #200]	; (80097cc <UART_SetConfig+0x6f4>)
 8009704:	fba3 1302 	umull	r1, r3, r3, r2
 8009708:	095b      	lsrs	r3, r3, #5
 800970a:	2164      	movs	r1, #100	; 0x64
 800970c:	fb01 f303 	mul.w	r3, r1, r3
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	3332      	adds	r3, #50	; 0x32
 8009716:	4a2d      	ldr	r2, [pc, #180]	; (80097cc <UART_SetConfig+0x6f4>)
 8009718:	fba2 2303 	umull	r2, r3, r2, r3
 800971c:	095b      	lsrs	r3, r3, #5
 800971e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009722:	4498      	add	r8, r3
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	469b      	mov	fp, r3
 8009728:	f04f 0c00 	mov.w	ip, #0
 800972c:	46d9      	mov	r9, fp
 800972e:	46e2      	mov	sl, ip
 8009730:	eb19 0309 	adds.w	r3, r9, r9
 8009734:	eb4a 040a 	adc.w	r4, sl, sl
 8009738:	4699      	mov	r9, r3
 800973a:	46a2      	mov	sl, r4
 800973c:	eb19 090b 	adds.w	r9, r9, fp
 8009740:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009744:	f04f 0100 	mov.w	r1, #0
 8009748:	f04f 0200 	mov.w	r2, #0
 800974c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009750:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009754:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009758:	4689      	mov	r9, r1
 800975a:	4692      	mov	sl, r2
 800975c:	eb1b 0509 	adds.w	r5, fp, r9
 8009760:	eb4c 060a 	adc.w	r6, ip, sl
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	4619      	mov	r1, r3
 800976a:	f04f 0200 	mov.w	r2, #0
 800976e:	f04f 0300 	mov.w	r3, #0
 8009772:	f04f 0400 	mov.w	r4, #0
 8009776:	0094      	lsls	r4, r2, #2
 8009778:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800977c:	008b      	lsls	r3, r1, #2
 800977e:	461a      	mov	r2, r3
 8009780:	4623      	mov	r3, r4
 8009782:	4628      	mov	r0, r5
 8009784:	4631      	mov	r1, r6
 8009786:	f7f7 fa5f 	bl	8000c48 <__aeabi_uldivmod>
 800978a:	4603      	mov	r3, r0
 800978c:	460c      	mov	r4, r1
 800978e:	461a      	mov	r2, r3
 8009790:	4b0e      	ldr	r3, [pc, #56]	; (80097cc <UART_SetConfig+0x6f4>)
 8009792:	fba3 1302 	umull	r1, r3, r3, r2
 8009796:	095b      	lsrs	r3, r3, #5
 8009798:	2164      	movs	r1, #100	; 0x64
 800979a:	fb01 f303 	mul.w	r3, r1, r3
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	3332      	adds	r3, #50	; 0x32
 80097a4:	4a09      	ldr	r2, [pc, #36]	; (80097cc <UART_SetConfig+0x6f4>)
 80097a6:	fba2 2303 	umull	r2, r3, r2, r3
 80097aa:	095b      	lsrs	r3, r3, #5
 80097ac:	f003 020f 	and.w	r2, r3, #15
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4442      	add	r2, r8
 80097b6:	609a      	str	r2, [r3, #8]
}
 80097b8:	e7ff      	b.n	80097ba <UART_SetConfig+0x6e2>
 80097ba:	bf00      	nop
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c4:	40011000 	.word	0x40011000
 80097c8:	40011400 	.word	0x40011400
 80097cc:	51eb851f 	.word	0x51eb851f

080097d0 <FILTER_init>:
 *  Created on: 20 ao�t 2020
 *      Author: Th�o
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	71fb      	strb	r3, [r7, #7]
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 80097de:	2300      	movs	r3, #0
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	e00c      	b.n	80097fe <FILTER_init+0x2e>
		filter->settings[s] = settings[s] ;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	4413      	add	r3, r2
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	440b      	add	r3, r1
 80097f6:	601a      	str	r2, [r3, #0]
	for(int32_t s = 0; s < 3; s++)
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	3301      	adds	r3, #1
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2b02      	cmp	r3, #2
 8009802:	ddef      	ble.n	80097e4 <FILTER_init+0x14>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	79fa      	ldrb	r2, [r7, #7]
 8009808:	761a      	strb	r2, [r3, #24]
}
 800980a:	bf00      	nop
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
 8009816:	b480      	push	{r7}
 8009818:	b085      	sub	sp, #20
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	ed87 0a00 	vstr	s0, [r7]
	float to_return = 0 ;
 8009822:	f04f 0300 	mov.w	r3, #0
 8009826:	60fb      	str	r3, [r7, #12]
	switch(filter->order){
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	7e1b      	ldrb	r3, [r3, #24]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d01f      	beq.n	8009870 <FILTER_process+0x5a>
 8009830:	2b02      	cmp	r3, #2
 8009832:	d047      	beq.n	80098c4 <FILTER_process+0xae>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d148      	bne.n	80098ca <FILTER_process+0xb4>
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	ed93 7a00 	vldr	s14, [r3]
 800983e:	edd7 7a00 	vldr	s15, [r7]
 8009842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	edd3 6a04 	vldr	s13, [r3, #16]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[1] = filter->values[0];
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	611a      	str	r2, [r3, #16]
			to_return =  filter->values[0];
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	60fb      	str	r3, [r7, #12]
			break ;
 800986e:	e02f      	b.n	80098d0 <FILTER_process+0xba>

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	ed93 7a00 	vldr	s14, [r3]
 8009876:	edd7 7a00 	vldr	s15, [r7]
 800987a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	edd3 6a04 	vldr	s13, [r3, #16]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	edd3 7a01 	vldr	s15, [r3, #4]
 800988a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800988e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	edd3 6a05 	vldr	s13, [r3, #20]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	edd3 7a02 	vldr	s15, [r3, #8]
 800989e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[2] = filter->values[1];
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691a      	ldr	r2, [r3, #16]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	615a      	str	r2, [r3, #20]
			filter->values[1] = filter->values[0];
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	611a      	str	r2, [r3, #16]
			to_return = filter->values[0];
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	60fb      	str	r3, [r7, #12]
			break;
 80098c2:	e005      	b.n	80098d0 <FILTER_process+0xba>

		case FILTER_NO_FILTERING :
			to_return = new_value ;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	60fb      	str	r3, [r7, #12]
			break;
 80098c8:	e002      	b.n	80098d0 <FILTER_process+0xba>
		default:
			to_return = new_value ;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	60fb      	str	r3, [r7, #12]
			break;
 80098ce:	bf00      	nop
	}

	return to_return ;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	ee07 3a90 	vmov	s15, r3
};
 80098d6:	eeb0 0a67 	vmov.f32	s0, s15
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <check_sum_f>:
static rx_cplt_mode_e rx_cplt_mode ;
static ibus_t * ibus ;	//On ne peut utilsier qu'une radio en ibus à la fois

//Fonction privé qui test si le checsum est bon sur un buffer
uint32_t check_sum_f(uint8_t * buffer);
uint32_t check_sum_f(uint8_t * buffer){
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 80098ec:	2300      	movs	r3, #0
 80098ee:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 80098f0:	2300      	movs	r3, #0
 80098f2:	72fb      	strb	r3, [r7, #11]
 80098f4:	e00a      	b.n	800990c <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 80098f6:	7afb      	ldrb	r3, [r7, #11]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	4413      	add	r3, r2
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4413      	add	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 8009906:	7afb      	ldrb	r3, [r7, #11]
 8009908:	3301      	adds	r3, #1
 800990a:	72fb      	strb	r3, [r7, #11]
 800990c:	7afb      	ldrb	r3, [r7, #11]
 800990e:	2b1d      	cmp	r3, #29
 8009910:	d9f1      	bls.n	80098f6 <check_sum_f+0x12>
	return sum ;
 8009912:	68fb      	ldr	r3, [r7, #12]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <IBUS_init>:

void IBUS_init(ibus_t * ibus_, UART_HandleTypeDef * huart, void(*data_rdy_callback)){
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
	ibus = ibus_;
 800992c:	4a0e      	ldr	r2, [pc, #56]	; (8009968 <IBUS_init+0x48>)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6013      	str	r3, [r2, #0]
	ibus->huart = huart ;
 8009932:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <IBUS_init+0x48>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	601a      	str	r2, [r3, #0]
	ibus->data_rdy_callback = data_rdy_callback ;
 800993a:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <IBUS_init+0x48>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	639a      	str	r2, [r3, #56]	; 0x38
	//On lance la lecture
	HAL_UART_Receive_DMA(ibus->huart, ibus->dma_buffer, SIZE_DMA_BUFFER);
 8009942:	4b09      	ldr	r3, [pc, #36]	; (8009968 <IBUS_init+0x48>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6818      	ldr	r0, [r3, #0]
 8009948:	4b07      	ldr	r3, [pc, #28]	; (8009968 <IBUS_init+0x48>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3304      	adds	r3, #4
 800994e:	2214      	movs	r2, #20
 8009950:	4619      	mov	r1, r3
 8009952:	f7ff f81f 	bl	8008994 <HAL_UART_Receive_DMA>
	ibus->index_write = 1 ;
 8009956:	4b04      	ldr	r3, [pc, #16]	; (8009968 <IBUS_init+0x48>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2201      	movs	r2, #1
 800995c:	761a      	strb	r2, [r3, #24]
}
 800995e:	bf00      	nop
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	200012c0 	.word	0x200012c0

0800996c <IBUS_RxCplt>:

void IBUS_RxCplt(UART_HandleTypeDef * huart){
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 8009974:	4b08      	ldr	r3, [pc, #32]	; (8009998 <IBUS_RxCplt+0x2c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d106      	bne.n	800998e <IBUS_RxCplt+0x22>
		rx_cplt_mode = MODE_CPLT_FULL;
 8009980:	4b06      	ldr	r3, [pc, #24]	; (800999c <IBUS_RxCplt+0x30>)
 8009982:	2201      	movs	r2, #1
 8009984:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 8009986:	4b04      	ldr	r3, [pc, #16]	; (8009998 <IBUS_RxCplt+0x2c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998c:	4798      	blx	r3
	}
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	200012c0 	.word	0x200012c0
 800999c:	200012bc 	.word	0x200012bc

080099a0 <IBUS_RxHalfCplt>:
void IBUS_RxHalfCplt(UART_HandleTypeDef * huart){
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 80099a8:	4b08      	ldr	r3, [pc, #32]	; (80099cc <IBUS_RxHalfCplt+0x2c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d106      	bne.n	80099c2 <IBUS_RxHalfCplt+0x22>
		rx_cplt_mode = MODE_CPLT_HALF ;
 80099b4:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <IBUS_RxHalfCplt+0x30>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 80099ba:	4b04      	ldr	r3, [pc, #16]	; (80099cc <IBUS_RxHalfCplt+0x2c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	4798      	blx	r3
	}
}
 80099c2:	bf00      	nop
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	200012c0 	.word	0x200012c0
 80099d0:	200012bc 	.word	0x200012bc

080099d4 <IBUS_Channel_Update>:

bool_e IBUS_Channel_Update(void){
 80099d4:	b5b0      	push	{r4, r5, r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af00      	add	r7, sp, #0

	bool_e to_return = FALSE ;
 80099da:	2300      	movs	r3, #0
 80099dc:	61fb      	str	r3, [r7, #28]

	if(rx_cplt_mode == MODE_CPLT_HALF)
 80099de:	4ba0      	ldr	r3, [pc, #640]	; (8009c60 <IBUS_Channel_Update+0x28c>)
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f040 80ba 	bne.w	8009b5c <IBUS_Channel_Update+0x188>
	{
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 80099e8:	2300      	movs	r3, #0
 80099ea:	76fb      	strb	r3, [r7, #27]
 80099ec:	e0b1      	b.n	8009b52 <IBUS_Channel_Update+0x17e>
			switch(ibus->state){
 80099ee:	4b9d      	ldr	r3, [pc, #628]	; (8009c64 <IBUS_Channel_Update+0x290>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d01b      	beq.n	8009a32 <IBUS_Channel_Update+0x5e>
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d041      	beq.n	8009a82 <IBUS_Channel_Update+0xae>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f040 80a4 	bne.w	8009b4c <IBUS_Channel_Update+0x178>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 8009a04:	4b97      	ldr	r3, [pc, #604]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	7efb      	ldrb	r3, [r7, #27]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	791b      	ldrb	r3, [r3, #4]
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	f040 8097 	bne.w	8009b42 <IBUS_Channel_Update+0x16e>
						ibus->state = STATE_IBUS_COMMAND ;
 8009a14:	4b93      	ldr	r3, [pc, #588]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 8009a1e:	4b91      	ldr	r3, [pc, #580]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a20:	6819      	ldr	r1, [r3, #0]
 8009a22:	7efa      	ldrb	r2, [r7, #27]
 8009a24:	4b8f      	ldr	r3, [pc, #572]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	440a      	add	r2, r1
 8009a2a:	7912      	ldrb	r2, [r2, #4]
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 8009a30:	e087      	b.n	8009b42 <IBUS_Channel_Update+0x16e>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 8009a32:	4b8c      	ldr	r3, [pc, #560]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	7efb      	ldrb	r3, [r7, #27]
 8009a38:	4413      	add	r3, r2
 8009a3a:	791b      	ldrb	r3, [r3, #4]
 8009a3c:	2b40      	cmp	r3, #64	; 0x40
 8009a3e:	d113      	bne.n	8009a68 <IBUS_Channel_Update+0x94>
						ibus->state = STATE_IBUS_CHANNELS ;
 8009a40:	4b88      	ldr	r3, [pc, #544]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2202      	movs	r2, #2
 8009a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 8009a4a:	4b86      	ldr	r3, [pc, #536]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a4c:	6819      	ldr	r1, [r3, #0]
 8009a4e:	7efa      	ldrb	r2, [r7, #27]
 8009a50:	4b84      	ldr	r3, [pc, #528]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	440a      	add	r2, r1
 8009a56:	7912      	ldrb	r2, [r2, #4]
 8009a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 8009a5c:	4b81      	ldr	r3, [pc, #516]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2202      	movs	r2, #2
 8009a62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 8009a66:	e06e      	b.n	8009b46 <IBUS_Channel_Update+0x172>
					else if(ibus->dma_buffer[c] != 0x20)
 8009a68:	4b7e      	ldr	r3, [pc, #504]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	7efb      	ldrb	r3, [r7, #27]
 8009a6e:	4413      	add	r3, r2
 8009a70:	791b      	ldrb	r3, [r3, #4]
 8009a72:	2b20      	cmp	r3, #32
 8009a74:	d067      	beq.n	8009b46 <IBUS_Channel_Update+0x172>
						ibus->state = STATE_IBUS_LENGTH ;
 8009a76:	4b7b      	ldr	r3, [pc, #492]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 8009a80:	e061      	b.n	8009b46 <IBUS_Channel_Update+0x172>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 8009a82:	4b78      	ldr	r3, [pc, #480]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a84:	681c      	ldr	r4, [r3, #0]
 8009a86:	7ef8      	ldrb	r0, [r7, #27]
 8009a88:	4b76      	ldr	r3, [pc, #472]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a8a:	6819      	ldr	r1, [r3, #0]
 8009a8c:	4b75      	ldr	r3, [pc, #468]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8009a94:	1c55      	adds	r5, r2, #1
 8009a96:	b2ad      	uxth	r5, r5
 8009a98:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 8009a9c:	4615      	mov	r5, r2
 8009a9e:	1823      	adds	r3, r4, r0
 8009aa0:	791a      	ldrb	r2, [r3, #4]
 8009aa2:	194b      	adds	r3, r1, r5
 8009aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 8009aa8:	4b6e      	ldr	r3, [pc, #440]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ab0:	2b20      	cmp	r3, #32
 8009ab2:	d14a      	bne.n	8009b4a <IBUS_Channel_Update+0x176>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 8009ab4:	4b6b      	ldr	r3, [pc, #428]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8009abc:	461a      	mov	r2, r3
 8009abe:	4b69      	ldr	r3, [pc, #420]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009ac6:	021b      	lsls	r3, r3, #8
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	607b      	str	r3, [r7, #4]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 8009acc:	4b65      	ldr	r3, [pc, #404]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	333d      	adds	r3, #61	; 0x3d
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7ff ff06 	bl	80098e4 <check_sum_f>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8009ade:	33ff      	adds	r3, #255	; 0xff
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d127      	bne.n	8009b36 <IBUS_Channel_Update+0x162>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	617b      	str	r3, [r7, #20]
 8009aea:	e01f      	b.n	8009b2c <IBUS_Channel_Update+0x158>
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 8009aec:	4b5d      	ldr	r3, [pc, #372]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	3302      	adds	r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009afa:	b21a      	sxth	r2, r3
 8009afc:	4b59      	ldr	r3, [pc, #356]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009afe:	6819      	ldr	r1, [r3, #0]
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	3303      	adds	r3, #3
 8009b04:	440b      	add	r3, r1
 8009b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	b21b      	sxth	r3, r3
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	b219      	sxth	r1, r3
 8009b12:	4b54      	ldr	r3, [pc, #336]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	085b      	lsrs	r3, r3, #1
 8009b1a:	b289      	uxth	r1, r1
 8009b1c:	330c      	adds	r3, #12
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	4413      	add	r3, r2
 8009b22:	460a      	mov	r2, r1
 8009b24:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	3302      	adds	r3, #2
 8009b2a:	617b      	str	r3, [r7, #20]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2b1b      	cmp	r3, #27
 8009b30:	d9dc      	bls.n	8009aec <IBUS_Channel_Update+0x118>
							to_return = TRUE;
 8009b32:	2301      	movs	r3, #1
 8009b34:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 8009b36:	4b4b      	ldr	r3, [pc, #300]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 8009b40:	e003      	b.n	8009b4a <IBUS_Channel_Update+0x176>
					break;
 8009b42:	bf00      	nop
 8009b44:	e002      	b.n	8009b4c <IBUS_Channel_Update+0x178>
					break ;
 8009b46:	bf00      	nop
 8009b48:	e000      	b.n	8009b4c <IBUS_Channel_Update+0x178>
					break;
 8009b4a:	bf00      	nop
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 8009b4c:	7efb      	ldrb	r3, [r7, #27]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	76fb      	strb	r3, [r7, #27]
 8009b52:	7efb      	ldrb	r3, [r7, #27]
 8009b54:	2b09      	cmp	r3, #9
 8009b56:	f67f af4a 	bls.w	80099ee <IBUS_Channel_Update+0x1a>
 8009b5a:	e0bc      	b.n	8009cd6 <IBUS_Channel_Update+0x302>
			}
		}
	}
	else
	{
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 8009b5c:	230a      	movs	r3, #10
 8009b5e:	74fb      	strb	r3, [r7, #19]
 8009b60:	e0b5      	b.n	8009cce <IBUS_Channel_Update+0x2fa>
			switch(ibus->state){
 8009b62:	4b40      	ldr	r3, [pc, #256]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d01b      	beq.n	8009ba6 <IBUS_Channel_Update+0x1d2>
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d041      	beq.n	8009bf6 <IBUS_Channel_Update+0x222>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f040 80a8 	bne.w	8009cc8 <IBUS_Channel_Update+0x2f4>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 8009b78:	4b3a      	ldr	r3, [pc, #232]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	7cfb      	ldrb	r3, [r7, #19]
 8009b7e:	4413      	add	r3, r2
 8009b80:	791b      	ldrb	r3, [r3, #4]
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	f040 809b 	bne.w	8009cbe <IBUS_Channel_Update+0x2ea>
						ibus->state = STATE_IBUS_COMMAND ;
 8009b88:	4b36      	ldr	r3, [pc, #216]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 8009b92:	4b34      	ldr	r3, [pc, #208]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009b94:	6819      	ldr	r1, [r3, #0]
 8009b96:	7cfa      	ldrb	r2, [r7, #19]
 8009b98:	4b32      	ldr	r3, [pc, #200]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	7912      	ldrb	r2, [r2, #4]
 8009ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 8009ba4:	e08b      	b.n	8009cbe <IBUS_Channel_Update+0x2ea>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 8009ba6:	4b2f      	ldr	r3, [pc, #188]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	7cfb      	ldrb	r3, [r7, #19]
 8009bac:	4413      	add	r3, r2
 8009bae:	791b      	ldrb	r3, [r3, #4]
 8009bb0:	2b40      	cmp	r3, #64	; 0x40
 8009bb2:	d113      	bne.n	8009bdc <IBUS_Channel_Update+0x208>
						ibus->state = STATE_IBUS_CHANNELS ;
 8009bb4:	4b2b      	ldr	r3, [pc, #172]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2202      	movs	r2, #2
 8009bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 8009bbe:	4b29      	ldr	r3, [pc, #164]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009bc0:	6819      	ldr	r1, [r3, #0]
 8009bc2:	7cfa      	ldrb	r2, [r7, #19]
 8009bc4:	4b27      	ldr	r3, [pc, #156]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	440a      	add	r2, r1
 8009bca:	7912      	ldrb	r2, [r2, #4]
 8009bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 8009bd0:	4b24      	ldr	r3, [pc, #144]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 8009bda:	e072      	b.n	8009cc2 <IBUS_Channel_Update+0x2ee>
					else if(ibus->dma_buffer[c] != 0x20)
 8009bdc:	4b21      	ldr	r3, [pc, #132]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	7cfb      	ldrb	r3, [r7, #19]
 8009be2:	4413      	add	r3, r2
 8009be4:	791b      	ldrb	r3, [r3, #4]
 8009be6:	2b20      	cmp	r3, #32
 8009be8:	d06b      	beq.n	8009cc2 <IBUS_Channel_Update+0x2ee>
						ibus->state = STATE_IBUS_LENGTH ;
 8009bea:	4b1e      	ldr	r3, [pc, #120]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 8009bf4:	e065      	b.n	8009cc2 <IBUS_Channel_Update+0x2ee>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 8009bf6:	4b1b      	ldr	r3, [pc, #108]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009bf8:	681c      	ldr	r4, [r3, #0]
 8009bfa:	7cf8      	ldrb	r0, [r7, #19]
 8009bfc:	4b19      	ldr	r3, [pc, #100]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009bfe:	6819      	ldr	r1, [r3, #0]
 8009c00:	4b18      	ldr	r3, [pc, #96]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8009c08:	1c55      	adds	r5, r2, #1
 8009c0a:	b2ad      	uxth	r5, r5
 8009c0c:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 8009c10:	4615      	mov	r5, r2
 8009c12:	1823      	adds	r3, r4, r0
 8009c14:	791a      	ldrb	r2, [r3, #4]
 8009c16:	194b      	adds	r3, r1, r5
 8009c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 8009c1c:	4b11      	ldr	r3, [pc, #68]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c24:	2b20      	cmp	r3, #32
 8009c26:	d14e      	bne.n	8009cc6 <IBUS_Channel_Update+0x2f2>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 8009c28:	4b0e      	ldr	r3, [pc, #56]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8009c30:	461a      	mov	r2, r3
 8009c32:	4b0c      	ldr	r3, [pc, #48]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009c3a:	021b      	lsls	r3, r3, #8
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	60bb      	str	r3, [r7, #8]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 8009c40:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <IBUS_Channel_Update+0x290>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	333d      	adds	r3, #61	; 0x3d
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff fe4c 	bl	80098e4 <check_sum_f>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8009c52:	33ff      	adds	r3, #255	; 0xff
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d12b      	bne.n	8009cb2 <IBUS_Channel_Update+0x2de>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	e023      	b.n	8009ca8 <IBUS_Channel_Update+0x2d4>
 8009c60:	200012bc 	.word	0x200012bc
 8009c64:	200012c0 	.word	0x200012c0
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 8009c68:	4b1d      	ldr	r3, [pc, #116]	; (8009ce0 <IBUS_Channel_Update+0x30c>)
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	3302      	adds	r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c76:	b21a      	sxth	r2, r3
 8009c78:	4b19      	ldr	r3, [pc, #100]	; (8009ce0 <IBUS_Channel_Update+0x30c>)
 8009c7a:	6819      	ldr	r1, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3303      	adds	r3, #3
 8009c80:	440b      	add	r3, r1
 8009c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	b21b      	sxth	r3, r3
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	b219      	sxth	r1, r3
 8009c8e:	4b14      	ldr	r3, [pc, #80]	; (8009ce0 <IBUS_Channel_Update+0x30c>)
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	085b      	lsrs	r3, r3, #1
 8009c96:	b289      	uxth	r1, r1
 8009c98:	330c      	adds	r3, #12
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	4413      	add	r3, r2
 8009c9e:	460a      	mov	r2, r1
 8009ca0:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3302      	adds	r3, #2
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b1b      	cmp	r3, #27
 8009cac:	d9dc      	bls.n	8009c68 <IBUS_Channel_Update+0x294>
							to_return = TRUE;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 8009cb2:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <IBUS_Channel_Update+0x30c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 8009cbc:	e003      	b.n	8009cc6 <IBUS_Channel_Update+0x2f2>
					break;
 8009cbe:	bf00      	nop
 8009cc0:	e002      	b.n	8009cc8 <IBUS_Channel_Update+0x2f4>
					break ;
 8009cc2:	bf00      	nop
 8009cc4:	e000      	b.n	8009cc8 <IBUS_Channel_Update+0x2f4>
					break;
 8009cc6:	bf00      	nop
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 8009cc8:	7cfb      	ldrb	r3, [r7, #19]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	74fb      	strb	r3, [r7, #19]
 8009cce:	7cfb      	ldrb	r3, [r7, #19]
 8009cd0:	2b13      	cmp	r3, #19
 8009cd2:	f67f af46 	bls.w	8009b62 <IBUS_Channel_Update+0x18e>
		}
	}



	return to_return ;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3720      	adds	r7, #32
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce0:	200012c0 	.word	0x200012c0

08009ce4 <MOTORS_Init>:
 */

#include "../Inc/Motors.h"


void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, uint16_t * duty, bool_e start){
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
 8009cf0:	603b      	str	r3, [r7, #0]
	motors->htim = htim ;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	601a      	str	r2, [r3, #0]
	motors->duty = duty;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	609a      	str	r2, [r3, #8]
	if(start){
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d022      	beq.n	8009d4a <MOTORS_Init+0x66>
		motors->state = MOTORS_STATE_RUNNING ;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2201      	movs	r2, #1
 8009d08:	711a      	strb	r2, [r3, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	68b8      	ldr	r0, [r7, #8]
 8009d0e:	f7fd fdd7 	bl	80078c0 <HAL_TIM_PWM_Start>
 8009d12:	4603      	mov	r3, r0
 8009d14:	461a      	mov	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8009d1a:	2104      	movs	r1, #4
 8009d1c:	68b8      	ldr	r0, [r7, #8]
 8009d1e:	f7fd fdcf 	bl	80078c0 <HAL_TIM_PWM_Start>
 8009d22:	4603      	mov	r3, r0
 8009d24:	461a      	mov	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8009d2a:	2108      	movs	r1, #8
 8009d2c:	68b8      	ldr	r0, [r7, #8]
 8009d2e:	f7fd fdc7 	bl	80078c0 <HAL_TIM_PWM_Start>
 8009d32:	4603      	mov	r3, r0
 8009d34:	461a      	mov	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8009d3a:	210c      	movs	r1, #12
 8009d3c:	68b8      	ldr	r0, [r7, #8]
 8009d3e:	f7fd fdbf 	bl	80078c0 <HAL_TIM_PWM_Start>
 8009d42:	4603      	mov	r3, r0
 8009d44:	461a      	mov	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	731a      	strb	r2, [r3, #12]
	}
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_2);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_3);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]

	motors->duty[0] = MIN(1000, motors->duty[0]);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	881a      	ldrh	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8009d68:	bf28      	it	cs
 8009d6a:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 8009d6e:	b292      	uxth	r2, r2
 8009d70:	801a      	strh	r2, [r3, #0]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	3302      	adds	r3, #2
 8009d78:	881a      	ldrh	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	3302      	adds	r3, #2
 8009d80:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8009d84:	bf28      	it	cs
 8009d86:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 8009d8a:	b292      	uxth	r2, r2
 8009d8c:	801a      	strh	r2, [r3, #0]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	3304      	adds	r3, #4
 8009d94:	881a      	ldrh	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8009da0:	bf28      	it	cs
 8009da2:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 8009da6:	b292      	uxth	r2, r2
 8009da8:	801a      	strh	r2, [r3, #0]
	motors->duty[3] = MIN(1000, motors->duty[3]);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	3306      	adds	r3, #6
 8009db0:	881a      	ldrh	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	3306      	adds	r3, #6
 8009db8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8009dbc:	bf28      	it	cs
 8009dbe:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 8009dc2:	b292      	uxth	r2, r2
 8009dc4:	801a      	strh	r2, [r3, #0]


	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	635a      	str	r2, [r3, #52]	; 0x34
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	3302      	adds	r3, #2
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	639a      	str	r2, [r3, #56]	; 0x38
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	3304      	adds	r3, #4
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	63da      	str	r2, [r3, #60]	; 0x3c
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	3306      	adds	r3, #6
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <PID_compute>:
 */

#include "../Inc/Pid.h"

//renvoit la sortie du pid
float PID_compute(PID_t * pid, float consigne, float measurement){
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	ed87 0a02 	vstr	s0, [r7, #8]
 8009e2c:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calcul de l'erreur
	pid->error = measurement - consigne ;
 8009e30:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e34:	edd7 7a02 	vldr	s15, [r7, #8]
 8009e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Calcul des P I D
	pid->P = pid->settings[PID_KP] * pid->error ;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	ed93 7a04 	vldr	s14, [r3, #16]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->I += pid->settings[PID_KI] * pid->error / pid->settings[PID_FREQUENCY];
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	edd3 6a05 	vldr	s13, [r3, #20]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009e6a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	edd3 6a07 	vldr	s13, [r3, #28]
 8009e74:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	edc3 7a02 	vstr	s15, [r3, #8]
	pid->D = pid->settings[PID_KD] * (measurement - pid->previous_measurement) * pid->settings[PID_FREQUENCY] ;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	ed93 7a06 	vldr	s14, [r3, #24]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009e8e:	edd7 6a01 	vldr	s13, [r7, #4]
 8009e92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8009ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	edc3 7a03 	vstr	s15, [r3, #12]

	//Filtrage
	pid->D = FILTER_process(&pid->d_filter, pid->D);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8009eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f7ff fcab 	bl	8009816 <FILTER_process>
 8009ec0:	eef0 7a40 	vmov.f32	s15, s0
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	edc3 7a03 	vstr	s15, [r3, #12]

	//On somme le tout
	pid->output = pid->P + pid->I + pid->D ;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	ed93 7a01 	vldr	s14, [r3, #4]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	edd3 7a02 	vldr	s15, [r3, #8]
 8009ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	edd3 7a03 	vldr	s15, [r3, #12]
 8009ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	edc3 7a00 	vstr	s15, [r3]

	//Check mid and max
	pid->output = MIN(pid->settings[PID_MAX_OUTPUT], pid->output);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	ed93 7a08 	vldr	s14, [r3, #32]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	edd3 7a00 	vldr	s15, [r3]
 8009ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009efe:	dd02      	ble.n	8009f06 <PID_compute+0xe6>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	e001      	b.n	8009f0a <PID_compute+0xea>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	6013      	str	r3, [r2, #0]
	pid->output = MAX(-pid->settings[PID_MAX_OUTPUT], pid->output);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	edd3 7a08 	vldr	s15, [r3, #32]
 8009f14:	eeb1 7a67 	vneg.f32	s14, s15
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	edd3 7a00 	vldr	s15, [r3]
 8009f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f26:	dd05      	ble.n	8009f34 <PID_compute+0x114>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	edd3 7a08 	vldr	s15, [r3, #32]
 8009f2e:	eef1 7a67 	vneg.f32	s15, s15
 8009f32:	e002      	b.n	8009f3a <PID_compute+0x11a>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	edd3 7a00 	vldr	s15, [r3]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	edc3 7a00 	vstr	s15, [r3]

	//Mise � jour des valeurs ant�rieures
	pid->previous_measurement = measurement ;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	629a      	str	r2, [r3, #40]	; 0x28
	return pid->output ;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	ee07 3a90 	vmov	s15, r3
}
 8009f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <PID_init>:



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	603b      	str	r3, [r7, #0]
 8009f64:	4613      	mov	r3, r2
 8009f66:	71fb      	strb	r3, [r7, #7]
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	75fb      	strb	r3, [r7, #23]
 8009f6c:	e00d      	b.n	8009f8a <PID_init+0x32>
		pid->settings[s] = settings[s] ;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	441a      	add	r2, r3
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	68f9      	ldr	r1, [r7, #12]
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	440b      	add	r3, r1
 8009f82:	601a      	str	r2, [r3, #0]
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
 8009f86:	3301      	adds	r3, #1
 8009f88:	75fb      	strb	r3, [r7, #23]
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	d9ee      	bls.n	8009f6e <PID_init+0x16>

	//Init values
	pid->P = 0 ;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f04f 0200 	mov.w	r2, #0
 8009f96:	605a      	str	r2, [r3, #4]
	pid->I = 0 ;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f04f 0200 	mov.w	r2, #0
 8009f9e:	609a      	str	r2, [r3, #8]
	pid->D = 0 ;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f04f 0200 	mov.w	r2, #0
 8009fa6:	60da      	str	r2, [r3, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	332c      	adds	r3, #44	; 0x2c
 8009fac:	79fa      	ldrb	r2, [r7, #7]
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7ff fc0d 	bl	80097d0 <FILTER_init>
}
 8009fb6:	bf00      	nop
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <LED_SEQUENCE_init>:

#include "../Inc/Sequence_led.h"


//On initialise les paramètres
void LED_SEQUENCE_init(sequence_led_t * seq_led, GPIO_TypeDef* gpio, uint16_t gpio_pin, int32_t init_seq, uint32_t periode, int8_t length_sequence, bool_e output_logic){
 8009fbe:	b480      	push	{r7}
 8009fc0:	b085      	sub	sp, #20
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	80fb      	strh	r3, [r7, #6]
	//Init des varaibles
	seq_led->compteur = 0;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	741a      	strb	r2, [r3, #16]
	seq_led->gpio = gpio ;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	601a      	str	r2, [r3, #0]
	seq_led->gpio_pin = gpio_pin ;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	88fa      	ldrh	r2, [r7, #6]
 8009fde:	809a      	strh	r2, [r3, #4]
	seq_led->length_sequence = length_sequence ;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	7f3a      	ldrb	r2, [r7, #28]
 8009fe4:	745a      	strb	r2, [r3, #17]
	seq_led->periode = periode ;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	609a      	str	r2, [r3, #8]
	seq_led->output_logic = output_logic ;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a3a      	ldr	r2, [r7, #32]
 8009ff0:	619a      	str	r2, [r3, #24]
	if(seq_led->output_logic == 1)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d102      	bne.n	800a000 <LED_SEQUENCE_init+0x42>
		//Si logique négative on inverse la séquence
		init_seq = ~init_seq ;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	43db      	mvns	r3, r3
 8009ffe:	603b      	str	r3, [r7, #0]
	seq_led->sequence = init_seq ;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	60da      	str	r2, [r3, #12]
	seq_led->previous_time = 0 ;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	615a      	str	r2, [r3, #20]



}
 800a00c:	bf00      	nop
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <LED_SEQUENCE_play>:
	seq_led->compteur = 0 ;
	seq_led->sequence = seq ;
}

//On change la sortie de la led en fonction de la séquence active
void LED_SEQUENCE_play(sequence_led_t * seq_led, uint32_t current_time_us){
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
	if(current_time_us / 1000 > seq_led->previous_time + seq_led->periode){
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	4a25      	ldr	r2, [pc, #148]	; (800a0bc <LED_SEQUENCE_play+0xa4>)
 800a026:	fba2 2303 	umull	r2, r3, r2, r3
 800a02a:	099a      	lsrs	r2, r3, #6
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6959      	ldr	r1, [r3, #20]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	440b      	add	r3, r1
 800a036:	429a      	cmp	r2, r3
 800a038:	d93a      	bls.n	800a0b0 <LED_SEQUENCE_play+0x98>
		seq_led->previous_time += seq_led->periode ;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	695a      	ldr	r2, [r3, #20]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	441a      	add	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	615a      	str	r2, [r3, #20]
		//on récupère le niveau logique de la sortie
		bool_e output = ((seq_led->sequence) >> ((seq_led->length_sequence - seq_led->compteur) - 1)) & 1 ;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68da      	ldr	r2, [r3, #12]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800a052:	4619      	mov	r1, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800a05a:	1acb      	subs	r3, r1, r3
 800a05c:	3b01      	subs	r3, #1
 800a05e:	fa42 f303 	asr.w	r3, r2, r3
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
		//On update la sortie
		if(output)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d005      	beq.n	800a07a <LED_SEQUENCE_play+0x62>
			seq_led->gpio->BSRR = seq_led->gpio_pin ;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	889a      	ldrh	r2, [r3, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	619a      	str	r2, [r3, #24]
 800a078:	e006      	b.n	800a088 <LED_SEQUENCE_play+0x70>
		else
			seq_led->gpio->BSRR = (uint32_t)(seq_led->gpio_pin) << 16U ;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	889b      	ldrh	r3, [r3, #4]
 800a07e:	461a      	mov	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	0412      	lsls	r2, r2, #16
 800a086:	619a      	str	r2, [r3, #24]
		//on update le compteur
		seq_led->compteur ++ ;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	3301      	adds	r3, #1
 800a092:	b2db      	uxtb	r3, r3
 800a094:	b25a      	sxtb	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	741a      	strb	r2, [r3, #16]
		//TODO : verif l'init si length > 0
		if(seq_led->compteur == seq_led->length_sequence)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f993 2010 	ldrsb.w	r2, [r3, #16]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d102      	bne.n	800a0b0 <LED_SEQUENCE_play+0x98>
			seq_led->compteur = 0 ;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	741a      	strb	r2, [r3, #16]
	}
}
 800a0b0:	bf00      	nop
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	10624dd3 	.word	0x10624dd3

0800a0c0 <__errno>:
 800a0c0:	4b01      	ldr	r3, [pc, #4]	; (800a0c8 <__errno+0x8>)
 800a0c2:	6818      	ldr	r0, [r3, #0]
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000ffc 	.word	0x20000ffc

0800a0cc <__libc_init_array>:
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	4e0d      	ldr	r6, [pc, #52]	; (800a104 <__libc_init_array+0x38>)
 800a0d0:	4c0d      	ldr	r4, [pc, #52]	; (800a108 <__libc_init_array+0x3c>)
 800a0d2:	1ba4      	subs	r4, r4, r6
 800a0d4:	10a4      	asrs	r4, r4, #2
 800a0d6:	2500      	movs	r5, #0
 800a0d8:	42a5      	cmp	r5, r4
 800a0da:	d109      	bne.n	800a0f0 <__libc_init_array+0x24>
 800a0dc:	4e0b      	ldr	r6, [pc, #44]	; (800a10c <__libc_init_array+0x40>)
 800a0de:	4c0c      	ldr	r4, [pc, #48]	; (800a110 <__libc_init_array+0x44>)
 800a0e0:	f002 fe1a 	bl	800cd18 <_init>
 800a0e4:	1ba4      	subs	r4, r4, r6
 800a0e6:	10a4      	asrs	r4, r4, #2
 800a0e8:	2500      	movs	r5, #0
 800a0ea:	42a5      	cmp	r5, r4
 800a0ec:	d105      	bne.n	800a0fa <__libc_init_array+0x2e>
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0f4:	4798      	blx	r3
 800a0f6:	3501      	adds	r5, #1
 800a0f8:	e7ee      	b.n	800a0d8 <__libc_init_array+0xc>
 800a0fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0fe:	4798      	blx	r3
 800a100:	3501      	adds	r5, #1
 800a102:	e7f2      	b.n	800a0ea <__libc_init_array+0x1e>
 800a104:	0800d03c 	.word	0x0800d03c
 800a108:	0800d03c 	.word	0x0800d03c
 800a10c:	0800d03c 	.word	0x0800d03c
 800a110:	0800d040 	.word	0x0800d040

0800a114 <memmove>:
 800a114:	4288      	cmp	r0, r1
 800a116:	b510      	push	{r4, lr}
 800a118:	eb01 0302 	add.w	r3, r1, r2
 800a11c:	d807      	bhi.n	800a12e <memmove+0x1a>
 800a11e:	1e42      	subs	r2, r0, #1
 800a120:	4299      	cmp	r1, r3
 800a122:	d00a      	beq.n	800a13a <memmove+0x26>
 800a124:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a128:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a12c:	e7f8      	b.n	800a120 <memmove+0xc>
 800a12e:	4283      	cmp	r3, r0
 800a130:	d9f5      	bls.n	800a11e <memmove+0xa>
 800a132:	1881      	adds	r1, r0, r2
 800a134:	1ad2      	subs	r2, r2, r3
 800a136:	42d3      	cmn	r3, r2
 800a138:	d100      	bne.n	800a13c <memmove+0x28>
 800a13a:	bd10      	pop	{r4, pc}
 800a13c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a140:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a144:	e7f7      	b.n	800a136 <memmove+0x22>

0800a146 <memset>:
 800a146:	4402      	add	r2, r0
 800a148:	4603      	mov	r3, r0
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d100      	bne.n	800a150 <memset+0xa>
 800a14e:	4770      	bx	lr
 800a150:	f803 1b01 	strb.w	r1, [r3], #1
 800a154:	e7f9      	b.n	800a14a <memset+0x4>

0800a156 <__cvt>:
 800a156:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a15a:	ec55 4b10 	vmov	r4, r5, d0
 800a15e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a160:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a164:	2d00      	cmp	r5, #0
 800a166:	460e      	mov	r6, r1
 800a168:	4691      	mov	r9, r2
 800a16a:	4619      	mov	r1, r3
 800a16c:	bfb8      	it	lt
 800a16e:	4622      	movlt	r2, r4
 800a170:	462b      	mov	r3, r5
 800a172:	f027 0720 	bic.w	r7, r7, #32
 800a176:	bfbb      	ittet	lt
 800a178:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a17c:	461d      	movlt	r5, r3
 800a17e:	2300      	movge	r3, #0
 800a180:	232d      	movlt	r3, #45	; 0x2d
 800a182:	bfb8      	it	lt
 800a184:	4614      	movlt	r4, r2
 800a186:	2f46      	cmp	r7, #70	; 0x46
 800a188:	700b      	strb	r3, [r1, #0]
 800a18a:	d004      	beq.n	800a196 <__cvt+0x40>
 800a18c:	2f45      	cmp	r7, #69	; 0x45
 800a18e:	d100      	bne.n	800a192 <__cvt+0x3c>
 800a190:	3601      	adds	r6, #1
 800a192:	2102      	movs	r1, #2
 800a194:	e000      	b.n	800a198 <__cvt+0x42>
 800a196:	2103      	movs	r1, #3
 800a198:	ab03      	add	r3, sp, #12
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	ab02      	add	r3, sp, #8
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	4632      	mov	r2, r6
 800a1a2:	4653      	mov	r3, sl
 800a1a4:	ec45 4b10 	vmov	d0, r4, r5
 800a1a8:	f000 feaa 	bl	800af00 <_dtoa_r>
 800a1ac:	2f47      	cmp	r7, #71	; 0x47
 800a1ae:	4680      	mov	r8, r0
 800a1b0:	d102      	bne.n	800a1b8 <__cvt+0x62>
 800a1b2:	f019 0f01 	tst.w	r9, #1
 800a1b6:	d026      	beq.n	800a206 <__cvt+0xb0>
 800a1b8:	2f46      	cmp	r7, #70	; 0x46
 800a1ba:	eb08 0906 	add.w	r9, r8, r6
 800a1be:	d111      	bne.n	800a1e4 <__cvt+0x8e>
 800a1c0:	f898 3000 	ldrb.w	r3, [r8]
 800a1c4:	2b30      	cmp	r3, #48	; 0x30
 800a1c6:	d10a      	bne.n	800a1de <__cvt+0x88>
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	f7f6 fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1d4:	b918      	cbnz	r0, 800a1de <__cvt+0x88>
 800a1d6:	f1c6 0601 	rsb	r6, r6, #1
 800a1da:	f8ca 6000 	str.w	r6, [sl]
 800a1de:	f8da 3000 	ldr.w	r3, [sl]
 800a1e2:	4499      	add	r9, r3
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	f7f6 fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1f0:	b938      	cbnz	r0, 800a202 <__cvt+0xac>
 800a1f2:	2230      	movs	r2, #48	; 0x30
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	454b      	cmp	r3, r9
 800a1f8:	d205      	bcs.n	800a206 <__cvt+0xb0>
 800a1fa:	1c59      	adds	r1, r3, #1
 800a1fc:	9103      	str	r1, [sp, #12]
 800a1fe:	701a      	strb	r2, [r3, #0]
 800a200:	e7f8      	b.n	800a1f4 <__cvt+0x9e>
 800a202:	f8cd 900c 	str.w	r9, [sp, #12]
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a20a:	eba3 0308 	sub.w	r3, r3, r8
 800a20e:	4640      	mov	r0, r8
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	b004      	add	sp, #16
 800a214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a218 <__exponent>:
 800a218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a21a:	2900      	cmp	r1, #0
 800a21c:	4604      	mov	r4, r0
 800a21e:	bfba      	itte	lt
 800a220:	4249      	neglt	r1, r1
 800a222:	232d      	movlt	r3, #45	; 0x2d
 800a224:	232b      	movge	r3, #43	; 0x2b
 800a226:	2909      	cmp	r1, #9
 800a228:	f804 2b02 	strb.w	r2, [r4], #2
 800a22c:	7043      	strb	r3, [r0, #1]
 800a22e:	dd20      	ble.n	800a272 <__exponent+0x5a>
 800a230:	f10d 0307 	add.w	r3, sp, #7
 800a234:	461f      	mov	r7, r3
 800a236:	260a      	movs	r6, #10
 800a238:	fb91 f5f6 	sdiv	r5, r1, r6
 800a23c:	fb06 1115 	mls	r1, r6, r5, r1
 800a240:	3130      	adds	r1, #48	; 0x30
 800a242:	2d09      	cmp	r5, #9
 800a244:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a248:	f103 32ff 	add.w	r2, r3, #4294967295
 800a24c:	4629      	mov	r1, r5
 800a24e:	dc09      	bgt.n	800a264 <__exponent+0x4c>
 800a250:	3130      	adds	r1, #48	; 0x30
 800a252:	3b02      	subs	r3, #2
 800a254:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a258:	42bb      	cmp	r3, r7
 800a25a:	4622      	mov	r2, r4
 800a25c:	d304      	bcc.n	800a268 <__exponent+0x50>
 800a25e:	1a10      	subs	r0, r2, r0
 800a260:	b003      	add	sp, #12
 800a262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a264:	4613      	mov	r3, r2
 800a266:	e7e7      	b.n	800a238 <__exponent+0x20>
 800a268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a26c:	f804 2b01 	strb.w	r2, [r4], #1
 800a270:	e7f2      	b.n	800a258 <__exponent+0x40>
 800a272:	2330      	movs	r3, #48	; 0x30
 800a274:	4419      	add	r1, r3
 800a276:	7083      	strb	r3, [r0, #2]
 800a278:	1d02      	adds	r2, r0, #4
 800a27a:	70c1      	strb	r1, [r0, #3]
 800a27c:	e7ef      	b.n	800a25e <__exponent+0x46>
	...

0800a280 <_printf_float>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	b08d      	sub	sp, #52	; 0x34
 800a286:	460c      	mov	r4, r1
 800a288:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a28c:	4616      	mov	r6, r2
 800a28e:	461f      	mov	r7, r3
 800a290:	4605      	mov	r5, r0
 800a292:	f001 fd67 	bl	800bd64 <_localeconv_r>
 800a296:	6803      	ldr	r3, [r0, #0]
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f5 ff98 	bl	80001d0 <strlen>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2a8:	9005      	str	r0, [sp, #20]
 800a2aa:	3307      	adds	r3, #7
 800a2ac:	f023 0307 	bic.w	r3, r3, #7
 800a2b0:	f103 0208 	add.w	r2, r3, #8
 800a2b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2b8:	f8d4 b000 	ldr.w	fp, [r4]
 800a2bc:	f8c8 2000 	str.w	r2, [r8]
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a2c8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a2cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2d0:	9307      	str	r3, [sp, #28]
 800a2d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2da:	4ba7      	ldr	r3, [pc, #668]	; (800a578 <_printf_float+0x2f8>)
 800a2dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2e0:	f7f6 fc24 	bl	8000b2c <__aeabi_dcmpun>
 800a2e4:	bb70      	cbnz	r0, 800a344 <_printf_float+0xc4>
 800a2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ea:	4ba3      	ldr	r3, [pc, #652]	; (800a578 <_printf_float+0x2f8>)
 800a2ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2f0:	f7f6 fbfe 	bl	8000af0 <__aeabi_dcmple>
 800a2f4:	bb30      	cbnz	r0, 800a344 <_printf_float+0xc4>
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	f7f6 fbed 	bl	8000adc <__aeabi_dcmplt>
 800a302:	b110      	cbz	r0, 800a30a <_printf_float+0x8a>
 800a304:	232d      	movs	r3, #45	; 0x2d
 800a306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a30a:	4a9c      	ldr	r2, [pc, #624]	; (800a57c <_printf_float+0x2fc>)
 800a30c:	4b9c      	ldr	r3, [pc, #624]	; (800a580 <_printf_float+0x300>)
 800a30e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a312:	bf8c      	ite	hi
 800a314:	4690      	movhi	r8, r2
 800a316:	4698      	movls	r8, r3
 800a318:	2303      	movs	r3, #3
 800a31a:	f02b 0204 	bic.w	r2, fp, #4
 800a31e:	6123      	str	r3, [r4, #16]
 800a320:	6022      	str	r2, [r4, #0]
 800a322:	f04f 0900 	mov.w	r9, #0
 800a326:	9700      	str	r7, [sp, #0]
 800a328:	4633      	mov	r3, r6
 800a32a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a32c:	4621      	mov	r1, r4
 800a32e:	4628      	mov	r0, r5
 800a330:	f000 f9e6 	bl	800a700 <_printf_common>
 800a334:	3001      	adds	r0, #1
 800a336:	f040 808d 	bne.w	800a454 <_printf_float+0x1d4>
 800a33a:	f04f 30ff 	mov.w	r0, #4294967295
 800a33e:	b00d      	add	sp, #52	; 0x34
 800a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a344:	4642      	mov	r2, r8
 800a346:	464b      	mov	r3, r9
 800a348:	4640      	mov	r0, r8
 800a34a:	4649      	mov	r1, r9
 800a34c:	f7f6 fbee 	bl	8000b2c <__aeabi_dcmpun>
 800a350:	b110      	cbz	r0, 800a358 <_printf_float+0xd8>
 800a352:	4a8c      	ldr	r2, [pc, #560]	; (800a584 <_printf_float+0x304>)
 800a354:	4b8c      	ldr	r3, [pc, #560]	; (800a588 <_printf_float+0x308>)
 800a356:	e7da      	b.n	800a30e <_printf_float+0x8e>
 800a358:	6861      	ldr	r1, [r4, #4]
 800a35a:	1c4b      	adds	r3, r1, #1
 800a35c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a360:	a80a      	add	r0, sp, #40	; 0x28
 800a362:	d13e      	bne.n	800a3e2 <_printf_float+0x162>
 800a364:	2306      	movs	r3, #6
 800a366:	6063      	str	r3, [r4, #4]
 800a368:	2300      	movs	r3, #0
 800a36a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a36e:	ab09      	add	r3, sp, #36	; 0x24
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	ec49 8b10 	vmov	d0, r8, r9
 800a376:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a37a:	6022      	str	r2, [r4, #0]
 800a37c:	f8cd a004 	str.w	sl, [sp, #4]
 800a380:	6861      	ldr	r1, [r4, #4]
 800a382:	4628      	mov	r0, r5
 800a384:	f7ff fee7 	bl	800a156 <__cvt>
 800a388:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a38c:	2b47      	cmp	r3, #71	; 0x47
 800a38e:	4680      	mov	r8, r0
 800a390:	d109      	bne.n	800a3a6 <_printf_float+0x126>
 800a392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a394:	1cd8      	adds	r0, r3, #3
 800a396:	db02      	blt.n	800a39e <_printf_float+0x11e>
 800a398:	6862      	ldr	r2, [r4, #4]
 800a39a:	4293      	cmp	r3, r2
 800a39c:	dd47      	ble.n	800a42e <_printf_float+0x1ae>
 800a39e:	f1aa 0a02 	sub.w	sl, sl, #2
 800a3a2:	fa5f fa8a 	uxtb.w	sl, sl
 800a3a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a3aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3ac:	d824      	bhi.n	800a3f8 <_printf_float+0x178>
 800a3ae:	3901      	subs	r1, #1
 800a3b0:	4652      	mov	r2, sl
 800a3b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a3b6:	9109      	str	r1, [sp, #36]	; 0x24
 800a3b8:	f7ff ff2e 	bl	800a218 <__exponent>
 800a3bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3be:	1813      	adds	r3, r2, r0
 800a3c0:	2a01      	cmp	r2, #1
 800a3c2:	4681      	mov	r9, r0
 800a3c4:	6123      	str	r3, [r4, #16]
 800a3c6:	dc02      	bgt.n	800a3ce <_printf_float+0x14e>
 800a3c8:	6822      	ldr	r2, [r4, #0]
 800a3ca:	07d1      	lsls	r1, r2, #31
 800a3cc:	d501      	bpl.n	800a3d2 <_printf_float+0x152>
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	6123      	str	r3, [r4, #16]
 800a3d2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0a5      	beq.n	800a326 <_printf_float+0xa6>
 800a3da:	232d      	movs	r3, #45	; 0x2d
 800a3dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e0:	e7a1      	b.n	800a326 <_printf_float+0xa6>
 800a3e2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a3e6:	f000 8177 	beq.w	800a6d8 <_printf_float+0x458>
 800a3ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a3ee:	d1bb      	bne.n	800a368 <_printf_float+0xe8>
 800a3f0:	2900      	cmp	r1, #0
 800a3f2:	d1b9      	bne.n	800a368 <_printf_float+0xe8>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e7b6      	b.n	800a366 <_printf_float+0xe6>
 800a3f8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a3fc:	d119      	bne.n	800a432 <_printf_float+0x1b2>
 800a3fe:	2900      	cmp	r1, #0
 800a400:	6863      	ldr	r3, [r4, #4]
 800a402:	dd0c      	ble.n	800a41e <_printf_float+0x19e>
 800a404:	6121      	str	r1, [r4, #16]
 800a406:	b913      	cbnz	r3, 800a40e <_printf_float+0x18e>
 800a408:	6822      	ldr	r2, [r4, #0]
 800a40a:	07d2      	lsls	r2, r2, #31
 800a40c:	d502      	bpl.n	800a414 <_printf_float+0x194>
 800a40e:	3301      	adds	r3, #1
 800a410:	440b      	add	r3, r1
 800a412:	6123      	str	r3, [r4, #16]
 800a414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a416:	65a3      	str	r3, [r4, #88]	; 0x58
 800a418:	f04f 0900 	mov.w	r9, #0
 800a41c:	e7d9      	b.n	800a3d2 <_printf_float+0x152>
 800a41e:	b913      	cbnz	r3, 800a426 <_printf_float+0x1a6>
 800a420:	6822      	ldr	r2, [r4, #0]
 800a422:	07d0      	lsls	r0, r2, #31
 800a424:	d501      	bpl.n	800a42a <_printf_float+0x1aa>
 800a426:	3302      	adds	r3, #2
 800a428:	e7f3      	b.n	800a412 <_printf_float+0x192>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e7f1      	b.n	800a412 <_printf_float+0x192>
 800a42e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a432:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a436:	4293      	cmp	r3, r2
 800a438:	db05      	blt.n	800a446 <_printf_float+0x1c6>
 800a43a:	6822      	ldr	r2, [r4, #0]
 800a43c:	6123      	str	r3, [r4, #16]
 800a43e:	07d1      	lsls	r1, r2, #31
 800a440:	d5e8      	bpl.n	800a414 <_printf_float+0x194>
 800a442:	3301      	adds	r3, #1
 800a444:	e7e5      	b.n	800a412 <_printf_float+0x192>
 800a446:	2b00      	cmp	r3, #0
 800a448:	bfd4      	ite	le
 800a44a:	f1c3 0302 	rsble	r3, r3, #2
 800a44e:	2301      	movgt	r3, #1
 800a450:	4413      	add	r3, r2
 800a452:	e7de      	b.n	800a412 <_printf_float+0x192>
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	055a      	lsls	r2, r3, #21
 800a458:	d407      	bmi.n	800a46a <_printf_float+0x1ea>
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	4642      	mov	r2, r8
 800a45e:	4631      	mov	r1, r6
 800a460:	4628      	mov	r0, r5
 800a462:	47b8      	blx	r7
 800a464:	3001      	adds	r0, #1
 800a466:	d12b      	bne.n	800a4c0 <_printf_float+0x240>
 800a468:	e767      	b.n	800a33a <_printf_float+0xba>
 800a46a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a46e:	f240 80dc 	bls.w	800a62a <_printf_float+0x3aa>
 800a472:	2200      	movs	r2, #0
 800a474:	2300      	movs	r3, #0
 800a476:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a47a:	f7f6 fb25 	bl	8000ac8 <__aeabi_dcmpeq>
 800a47e:	2800      	cmp	r0, #0
 800a480:	d033      	beq.n	800a4ea <_printf_float+0x26a>
 800a482:	2301      	movs	r3, #1
 800a484:	4a41      	ldr	r2, [pc, #260]	; (800a58c <_printf_float+0x30c>)
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	f43f af54 	beq.w	800a33a <_printf_float+0xba>
 800a492:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a496:	429a      	cmp	r2, r3
 800a498:	db02      	blt.n	800a4a0 <_printf_float+0x220>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	07d8      	lsls	r0, r3, #31
 800a49e:	d50f      	bpl.n	800a4c0 <_printf_float+0x240>
 800a4a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	47b8      	blx	r7
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	f43f af45 	beq.w	800a33a <_printf_float+0xba>
 800a4b0:	f04f 0800 	mov.w	r8, #0
 800a4b4:	f104 091a 	add.w	r9, r4, #26
 800a4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	4543      	cmp	r3, r8
 800a4be:	dc09      	bgt.n	800a4d4 <_printf_float+0x254>
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	079b      	lsls	r3, r3, #30
 800a4c4:	f100 8103 	bmi.w	800a6ce <_printf_float+0x44e>
 800a4c8:	68e0      	ldr	r0, [r4, #12]
 800a4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4cc:	4298      	cmp	r0, r3
 800a4ce:	bfb8      	it	lt
 800a4d0:	4618      	movlt	r0, r3
 800a4d2:	e734      	b.n	800a33e <_printf_float+0xbe>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	464a      	mov	r2, r9
 800a4d8:	4631      	mov	r1, r6
 800a4da:	4628      	mov	r0, r5
 800a4dc:	47b8      	blx	r7
 800a4de:	3001      	adds	r0, #1
 800a4e0:	f43f af2b 	beq.w	800a33a <_printf_float+0xba>
 800a4e4:	f108 0801 	add.w	r8, r8, #1
 800a4e8:	e7e6      	b.n	800a4b8 <_printf_float+0x238>
 800a4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	dc2b      	bgt.n	800a548 <_printf_float+0x2c8>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	4a26      	ldr	r2, [pc, #152]	; (800a58c <_printf_float+0x30c>)
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	47b8      	blx	r7
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	f43f af1d 	beq.w	800a33a <_printf_float+0xba>
 800a500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a502:	b923      	cbnz	r3, 800a50e <_printf_float+0x28e>
 800a504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a506:	b913      	cbnz	r3, 800a50e <_printf_float+0x28e>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	07d9      	lsls	r1, r3, #31
 800a50c:	d5d8      	bpl.n	800a4c0 <_printf_float+0x240>
 800a50e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a512:	4631      	mov	r1, r6
 800a514:	4628      	mov	r0, r5
 800a516:	47b8      	blx	r7
 800a518:	3001      	adds	r0, #1
 800a51a:	f43f af0e 	beq.w	800a33a <_printf_float+0xba>
 800a51e:	f04f 0900 	mov.w	r9, #0
 800a522:	f104 0a1a 	add.w	sl, r4, #26
 800a526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a528:	425b      	negs	r3, r3
 800a52a:	454b      	cmp	r3, r9
 800a52c:	dc01      	bgt.n	800a532 <_printf_float+0x2b2>
 800a52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a530:	e794      	b.n	800a45c <_printf_float+0x1dc>
 800a532:	2301      	movs	r3, #1
 800a534:	4652      	mov	r2, sl
 800a536:	4631      	mov	r1, r6
 800a538:	4628      	mov	r0, r5
 800a53a:	47b8      	blx	r7
 800a53c:	3001      	adds	r0, #1
 800a53e:	f43f aefc 	beq.w	800a33a <_printf_float+0xba>
 800a542:	f109 0901 	add.w	r9, r9, #1
 800a546:	e7ee      	b.n	800a526 <_printf_float+0x2a6>
 800a548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a54a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a54c:	429a      	cmp	r2, r3
 800a54e:	bfa8      	it	ge
 800a550:	461a      	movge	r2, r3
 800a552:	2a00      	cmp	r2, #0
 800a554:	4691      	mov	r9, r2
 800a556:	dd07      	ble.n	800a568 <_printf_float+0x2e8>
 800a558:	4613      	mov	r3, r2
 800a55a:	4631      	mov	r1, r6
 800a55c:	4642      	mov	r2, r8
 800a55e:	4628      	mov	r0, r5
 800a560:	47b8      	blx	r7
 800a562:	3001      	adds	r0, #1
 800a564:	f43f aee9 	beq.w	800a33a <_printf_float+0xba>
 800a568:	f104 031a 	add.w	r3, r4, #26
 800a56c:	f04f 0b00 	mov.w	fp, #0
 800a570:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a574:	9306      	str	r3, [sp, #24]
 800a576:	e015      	b.n	800a5a4 <_printf_float+0x324>
 800a578:	7fefffff 	.word	0x7fefffff
 800a57c:	0800d02a 	.word	0x0800d02a
 800a580:	0800cd70 	.word	0x0800cd70
 800a584:	0800cd78 	.word	0x0800cd78
 800a588:	0800cd74 	.word	0x0800cd74
 800a58c:	0800cd7c 	.word	0x0800cd7c
 800a590:	2301      	movs	r3, #1
 800a592:	9a06      	ldr	r2, [sp, #24]
 800a594:	4631      	mov	r1, r6
 800a596:	4628      	mov	r0, r5
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	f43f aecd 	beq.w	800a33a <_printf_float+0xba>
 800a5a0:	f10b 0b01 	add.w	fp, fp, #1
 800a5a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a5a8:	ebaa 0309 	sub.w	r3, sl, r9
 800a5ac:	455b      	cmp	r3, fp
 800a5ae:	dcef      	bgt.n	800a590 <_printf_float+0x310>
 800a5b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	44d0      	add	r8, sl
 800a5b8:	db15      	blt.n	800a5e6 <_printf_float+0x366>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	07da      	lsls	r2, r3, #31
 800a5be:	d412      	bmi.n	800a5e6 <_printf_float+0x366>
 800a5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5c4:	eba3 020a 	sub.w	r2, r3, sl
 800a5c8:	eba3 0a01 	sub.w	sl, r3, r1
 800a5cc:	4592      	cmp	sl, r2
 800a5ce:	bfa8      	it	ge
 800a5d0:	4692      	movge	sl, r2
 800a5d2:	f1ba 0f00 	cmp.w	sl, #0
 800a5d6:	dc0e      	bgt.n	800a5f6 <_printf_float+0x376>
 800a5d8:	f04f 0800 	mov.w	r8, #0
 800a5dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5e0:	f104 091a 	add.w	r9, r4, #26
 800a5e4:	e019      	b.n	800a61a <_printf_float+0x39a>
 800a5e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	47b8      	blx	r7
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d1e5      	bne.n	800a5c0 <_printf_float+0x340>
 800a5f4:	e6a1      	b.n	800a33a <_printf_float+0xba>
 800a5f6:	4653      	mov	r3, sl
 800a5f8:	4642      	mov	r2, r8
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	47b8      	blx	r7
 800a600:	3001      	adds	r0, #1
 800a602:	d1e9      	bne.n	800a5d8 <_printf_float+0x358>
 800a604:	e699      	b.n	800a33a <_printf_float+0xba>
 800a606:	2301      	movs	r3, #1
 800a608:	464a      	mov	r2, r9
 800a60a:	4631      	mov	r1, r6
 800a60c:	4628      	mov	r0, r5
 800a60e:	47b8      	blx	r7
 800a610:	3001      	adds	r0, #1
 800a612:	f43f ae92 	beq.w	800a33a <_printf_float+0xba>
 800a616:	f108 0801 	add.w	r8, r8, #1
 800a61a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a61e:	1a9b      	subs	r3, r3, r2
 800a620:	eba3 030a 	sub.w	r3, r3, sl
 800a624:	4543      	cmp	r3, r8
 800a626:	dcee      	bgt.n	800a606 <_printf_float+0x386>
 800a628:	e74a      	b.n	800a4c0 <_printf_float+0x240>
 800a62a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a62c:	2a01      	cmp	r2, #1
 800a62e:	dc01      	bgt.n	800a634 <_printf_float+0x3b4>
 800a630:	07db      	lsls	r3, r3, #31
 800a632:	d53a      	bpl.n	800a6aa <_printf_float+0x42a>
 800a634:	2301      	movs	r3, #1
 800a636:	4642      	mov	r2, r8
 800a638:	4631      	mov	r1, r6
 800a63a:	4628      	mov	r0, r5
 800a63c:	47b8      	blx	r7
 800a63e:	3001      	adds	r0, #1
 800a640:	f43f ae7b 	beq.w	800a33a <_printf_float+0xba>
 800a644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a648:	4631      	mov	r1, r6
 800a64a:	4628      	mov	r0, r5
 800a64c:	47b8      	blx	r7
 800a64e:	3001      	adds	r0, #1
 800a650:	f108 0801 	add.w	r8, r8, #1
 800a654:	f43f ae71 	beq.w	800a33a <_printf_float+0xba>
 800a658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65a:	2200      	movs	r2, #0
 800a65c:	f103 3aff 	add.w	sl, r3, #4294967295
 800a660:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a664:	2300      	movs	r3, #0
 800a666:	f7f6 fa2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a66a:	b9c8      	cbnz	r0, 800a6a0 <_printf_float+0x420>
 800a66c:	4653      	mov	r3, sl
 800a66e:	4642      	mov	r2, r8
 800a670:	4631      	mov	r1, r6
 800a672:	4628      	mov	r0, r5
 800a674:	47b8      	blx	r7
 800a676:	3001      	adds	r0, #1
 800a678:	d10e      	bne.n	800a698 <_printf_float+0x418>
 800a67a:	e65e      	b.n	800a33a <_printf_float+0xba>
 800a67c:	2301      	movs	r3, #1
 800a67e:	4652      	mov	r2, sl
 800a680:	4631      	mov	r1, r6
 800a682:	4628      	mov	r0, r5
 800a684:	47b8      	blx	r7
 800a686:	3001      	adds	r0, #1
 800a688:	f43f ae57 	beq.w	800a33a <_printf_float+0xba>
 800a68c:	f108 0801 	add.w	r8, r8, #1
 800a690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a692:	3b01      	subs	r3, #1
 800a694:	4543      	cmp	r3, r8
 800a696:	dcf1      	bgt.n	800a67c <_printf_float+0x3fc>
 800a698:	464b      	mov	r3, r9
 800a69a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a69e:	e6de      	b.n	800a45e <_printf_float+0x1de>
 800a6a0:	f04f 0800 	mov.w	r8, #0
 800a6a4:	f104 0a1a 	add.w	sl, r4, #26
 800a6a8:	e7f2      	b.n	800a690 <_printf_float+0x410>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e7df      	b.n	800a66e <_printf_float+0x3ee>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	464a      	mov	r2, r9
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	47b8      	blx	r7
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	f43f ae3e 	beq.w	800a33a <_printf_float+0xba>
 800a6be:	f108 0801 	add.w	r8, r8, #1
 800a6c2:	68e3      	ldr	r3, [r4, #12]
 800a6c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6c6:	1a9b      	subs	r3, r3, r2
 800a6c8:	4543      	cmp	r3, r8
 800a6ca:	dcf0      	bgt.n	800a6ae <_printf_float+0x42e>
 800a6cc:	e6fc      	b.n	800a4c8 <_printf_float+0x248>
 800a6ce:	f04f 0800 	mov.w	r8, #0
 800a6d2:	f104 0919 	add.w	r9, r4, #25
 800a6d6:	e7f4      	b.n	800a6c2 <_printf_float+0x442>
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	f43f ae8b 	beq.w	800a3f4 <_printf_float+0x174>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a6e4:	ab09      	add	r3, sp, #36	; 0x24
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	ec49 8b10 	vmov	d0, r8, r9
 800a6ec:	6022      	str	r2, [r4, #0]
 800a6ee:	f8cd a004 	str.w	sl, [sp, #4]
 800a6f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	f7ff fd2d 	bl	800a156 <__cvt>
 800a6fc:	4680      	mov	r8, r0
 800a6fe:	e648      	b.n	800a392 <_printf_float+0x112>

0800a700 <_printf_common>:
 800a700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a704:	4691      	mov	r9, r2
 800a706:	461f      	mov	r7, r3
 800a708:	688a      	ldr	r2, [r1, #8]
 800a70a:	690b      	ldr	r3, [r1, #16]
 800a70c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a710:	4293      	cmp	r3, r2
 800a712:	bfb8      	it	lt
 800a714:	4613      	movlt	r3, r2
 800a716:	f8c9 3000 	str.w	r3, [r9]
 800a71a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a71e:	4606      	mov	r6, r0
 800a720:	460c      	mov	r4, r1
 800a722:	b112      	cbz	r2, 800a72a <_printf_common+0x2a>
 800a724:	3301      	adds	r3, #1
 800a726:	f8c9 3000 	str.w	r3, [r9]
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	0699      	lsls	r1, r3, #26
 800a72e:	bf42      	ittt	mi
 800a730:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a734:	3302      	addmi	r3, #2
 800a736:	f8c9 3000 	strmi.w	r3, [r9]
 800a73a:	6825      	ldr	r5, [r4, #0]
 800a73c:	f015 0506 	ands.w	r5, r5, #6
 800a740:	d107      	bne.n	800a752 <_printf_common+0x52>
 800a742:	f104 0a19 	add.w	sl, r4, #25
 800a746:	68e3      	ldr	r3, [r4, #12]
 800a748:	f8d9 2000 	ldr.w	r2, [r9]
 800a74c:	1a9b      	subs	r3, r3, r2
 800a74e:	42ab      	cmp	r3, r5
 800a750:	dc28      	bgt.n	800a7a4 <_printf_common+0xa4>
 800a752:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a756:	6822      	ldr	r2, [r4, #0]
 800a758:	3300      	adds	r3, #0
 800a75a:	bf18      	it	ne
 800a75c:	2301      	movne	r3, #1
 800a75e:	0692      	lsls	r2, r2, #26
 800a760:	d42d      	bmi.n	800a7be <_printf_common+0xbe>
 800a762:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a766:	4639      	mov	r1, r7
 800a768:	4630      	mov	r0, r6
 800a76a:	47c0      	blx	r8
 800a76c:	3001      	adds	r0, #1
 800a76e:	d020      	beq.n	800a7b2 <_printf_common+0xb2>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	68e5      	ldr	r5, [r4, #12]
 800a774:	f8d9 2000 	ldr.w	r2, [r9]
 800a778:	f003 0306 	and.w	r3, r3, #6
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	bf08      	it	eq
 800a780:	1aad      	subeq	r5, r5, r2
 800a782:	68a3      	ldr	r3, [r4, #8]
 800a784:	6922      	ldr	r2, [r4, #16]
 800a786:	bf0c      	ite	eq
 800a788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a78c:	2500      	movne	r5, #0
 800a78e:	4293      	cmp	r3, r2
 800a790:	bfc4      	itt	gt
 800a792:	1a9b      	subgt	r3, r3, r2
 800a794:	18ed      	addgt	r5, r5, r3
 800a796:	f04f 0900 	mov.w	r9, #0
 800a79a:	341a      	adds	r4, #26
 800a79c:	454d      	cmp	r5, r9
 800a79e:	d11a      	bne.n	800a7d6 <_printf_common+0xd6>
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	e008      	b.n	800a7b6 <_printf_common+0xb6>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	4652      	mov	r2, sl
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	47c0      	blx	r8
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d103      	bne.n	800a7ba <_printf_common+0xba>
 800a7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ba:	3501      	adds	r5, #1
 800a7bc:	e7c3      	b.n	800a746 <_printf_common+0x46>
 800a7be:	18e1      	adds	r1, r4, r3
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	2030      	movs	r0, #48	; 0x30
 800a7c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7c8:	4422      	add	r2, r4
 800a7ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7d2:	3302      	adds	r3, #2
 800a7d4:	e7c5      	b.n	800a762 <_printf_common+0x62>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	4622      	mov	r2, r4
 800a7da:	4639      	mov	r1, r7
 800a7dc:	4630      	mov	r0, r6
 800a7de:	47c0      	blx	r8
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d0e6      	beq.n	800a7b2 <_printf_common+0xb2>
 800a7e4:	f109 0901 	add.w	r9, r9, #1
 800a7e8:	e7d8      	b.n	800a79c <_printf_common+0x9c>
	...

0800a7ec <_printf_i>:
 800a7ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	7e09      	ldrb	r1, [r1, #24]
 800a7f8:	b085      	sub	sp, #20
 800a7fa:	296e      	cmp	r1, #110	; 0x6e
 800a7fc:	4617      	mov	r7, r2
 800a7fe:	4606      	mov	r6, r0
 800a800:	4698      	mov	r8, r3
 800a802:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a804:	f000 80b3 	beq.w	800a96e <_printf_i+0x182>
 800a808:	d822      	bhi.n	800a850 <_printf_i+0x64>
 800a80a:	2963      	cmp	r1, #99	; 0x63
 800a80c:	d036      	beq.n	800a87c <_printf_i+0x90>
 800a80e:	d80a      	bhi.n	800a826 <_printf_i+0x3a>
 800a810:	2900      	cmp	r1, #0
 800a812:	f000 80b9 	beq.w	800a988 <_printf_i+0x19c>
 800a816:	2958      	cmp	r1, #88	; 0x58
 800a818:	f000 8083 	beq.w	800a922 <_printf_i+0x136>
 800a81c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a820:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a824:	e032      	b.n	800a88c <_printf_i+0xa0>
 800a826:	2964      	cmp	r1, #100	; 0x64
 800a828:	d001      	beq.n	800a82e <_printf_i+0x42>
 800a82a:	2969      	cmp	r1, #105	; 0x69
 800a82c:	d1f6      	bne.n	800a81c <_printf_i+0x30>
 800a82e:	6820      	ldr	r0, [r4, #0]
 800a830:	6813      	ldr	r3, [r2, #0]
 800a832:	0605      	lsls	r5, r0, #24
 800a834:	f103 0104 	add.w	r1, r3, #4
 800a838:	d52a      	bpl.n	800a890 <_printf_i+0xa4>
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6011      	str	r1, [r2, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	da03      	bge.n	800a84a <_printf_i+0x5e>
 800a842:	222d      	movs	r2, #45	; 0x2d
 800a844:	425b      	negs	r3, r3
 800a846:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a84a:	486f      	ldr	r0, [pc, #444]	; (800aa08 <_printf_i+0x21c>)
 800a84c:	220a      	movs	r2, #10
 800a84e:	e039      	b.n	800a8c4 <_printf_i+0xd8>
 800a850:	2973      	cmp	r1, #115	; 0x73
 800a852:	f000 809d 	beq.w	800a990 <_printf_i+0x1a4>
 800a856:	d808      	bhi.n	800a86a <_printf_i+0x7e>
 800a858:	296f      	cmp	r1, #111	; 0x6f
 800a85a:	d020      	beq.n	800a89e <_printf_i+0xb2>
 800a85c:	2970      	cmp	r1, #112	; 0x70
 800a85e:	d1dd      	bne.n	800a81c <_printf_i+0x30>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	f043 0320 	orr.w	r3, r3, #32
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	e003      	b.n	800a872 <_printf_i+0x86>
 800a86a:	2975      	cmp	r1, #117	; 0x75
 800a86c:	d017      	beq.n	800a89e <_printf_i+0xb2>
 800a86e:	2978      	cmp	r1, #120	; 0x78
 800a870:	d1d4      	bne.n	800a81c <_printf_i+0x30>
 800a872:	2378      	movs	r3, #120	; 0x78
 800a874:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a878:	4864      	ldr	r0, [pc, #400]	; (800aa0c <_printf_i+0x220>)
 800a87a:	e055      	b.n	800a928 <_printf_i+0x13c>
 800a87c:	6813      	ldr	r3, [r2, #0]
 800a87e:	1d19      	adds	r1, r3, #4
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6011      	str	r1, [r2, #0]
 800a884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a88c:	2301      	movs	r3, #1
 800a88e:	e08c      	b.n	800a9aa <_printf_i+0x1be>
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6011      	str	r1, [r2, #0]
 800a894:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a898:	bf18      	it	ne
 800a89a:	b21b      	sxthne	r3, r3
 800a89c:	e7cf      	b.n	800a83e <_printf_i+0x52>
 800a89e:	6813      	ldr	r3, [r2, #0]
 800a8a0:	6825      	ldr	r5, [r4, #0]
 800a8a2:	1d18      	adds	r0, r3, #4
 800a8a4:	6010      	str	r0, [r2, #0]
 800a8a6:	0628      	lsls	r0, r5, #24
 800a8a8:	d501      	bpl.n	800a8ae <_printf_i+0xc2>
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	e002      	b.n	800a8b4 <_printf_i+0xc8>
 800a8ae:	0668      	lsls	r0, r5, #25
 800a8b0:	d5fb      	bpl.n	800a8aa <_printf_i+0xbe>
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	4854      	ldr	r0, [pc, #336]	; (800aa08 <_printf_i+0x21c>)
 800a8b6:	296f      	cmp	r1, #111	; 0x6f
 800a8b8:	bf14      	ite	ne
 800a8ba:	220a      	movne	r2, #10
 800a8bc:	2208      	moveq	r2, #8
 800a8be:	2100      	movs	r1, #0
 800a8c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8c4:	6865      	ldr	r5, [r4, #4]
 800a8c6:	60a5      	str	r5, [r4, #8]
 800a8c8:	2d00      	cmp	r5, #0
 800a8ca:	f2c0 8095 	blt.w	800a9f8 <_printf_i+0x20c>
 800a8ce:	6821      	ldr	r1, [r4, #0]
 800a8d0:	f021 0104 	bic.w	r1, r1, #4
 800a8d4:	6021      	str	r1, [r4, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d13d      	bne.n	800a956 <_printf_i+0x16a>
 800a8da:	2d00      	cmp	r5, #0
 800a8dc:	f040 808e 	bne.w	800a9fc <_printf_i+0x210>
 800a8e0:	4665      	mov	r5, ip
 800a8e2:	2a08      	cmp	r2, #8
 800a8e4:	d10b      	bne.n	800a8fe <_printf_i+0x112>
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	07db      	lsls	r3, r3, #31
 800a8ea:	d508      	bpl.n	800a8fe <_printf_i+0x112>
 800a8ec:	6923      	ldr	r3, [r4, #16]
 800a8ee:	6862      	ldr	r2, [r4, #4]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	bfde      	ittt	le
 800a8f4:	2330      	movle	r3, #48	; 0x30
 800a8f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8fe:	ebac 0305 	sub.w	r3, ip, r5
 800a902:	6123      	str	r3, [r4, #16]
 800a904:	f8cd 8000 	str.w	r8, [sp]
 800a908:	463b      	mov	r3, r7
 800a90a:	aa03      	add	r2, sp, #12
 800a90c:	4621      	mov	r1, r4
 800a90e:	4630      	mov	r0, r6
 800a910:	f7ff fef6 	bl	800a700 <_printf_common>
 800a914:	3001      	adds	r0, #1
 800a916:	d14d      	bne.n	800a9b4 <_printf_i+0x1c8>
 800a918:	f04f 30ff 	mov.w	r0, #4294967295
 800a91c:	b005      	add	sp, #20
 800a91e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a922:	4839      	ldr	r0, [pc, #228]	; (800aa08 <_printf_i+0x21c>)
 800a924:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a928:	6813      	ldr	r3, [r2, #0]
 800a92a:	6821      	ldr	r1, [r4, #0]
 800a92c:	1d1d      	adds	r5, r3, #4
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6015      	str	r5, [r2, #0]
 800a932:	060a      	lsls	r2, r1, #24
 800a934:	d50b      	bpl.n	800a94e <_printf_i+0x162>
 800a936:	07ca      	lsls	r2, r1, #31
 800a938:	bf44      	itt	mi
 800a93a:	f041 0120 	orrmi.w	r1, r1, #32
 800a93e:	6021      	strmi	r1, [r4, #0]
 800a940:	b91b      	cbnz	r3, 800a94a <_printf_i+0x15e>
 800a942:	6822      	ldr	r2, [r4, #0]
 800a944:	f022 0220 	bic.w	r2, r2, #32
 800a948:	6022      	str	r2, [r4, #0]
 800a94a:	2210      	movs	r2, #16
 800a94c:	e7b7      	b.n	800a8be <_printf_i+0xd2>
 800a94e:	064d      	lsls	r5, r1, #25
 800a950:	bf48      	it	mi
 800a952:	b29b      	uxthmi	r3, r3
 800a954:	e7ef      	b.n	800a936 <_printf_i+0x14a>
 800a956:	4665      	mov	r5, ip
 800a958:	fbb3 f1f2 	udiv	r1, r3, r2
 800a95c:	fb02 3311 	mls	r3, r2, r1, r3
 800a960:	5cc3      	ldrb	r3, [r0, r3]
 800a962:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a966:	460b      	mov	r3, r1
 800a968:	2900      	cmp	r1, #0
 800a96a:	d1f5      	bne.n	800a958 <_printf_i+0x16c>
 800a96c:	e7b9      	b.n	800a8e2 <_printf_i+0xf6>
 800a96e:	6813      	ldr	r3, [r2, #0]
 800a970:	6825      	ldr	r5, [r4, #0]
 800a972:	6961      	ldr	r1, [r4, #20]
 800a974:	1d18      	adds	r0, r3, #4
 800a976:	6010      	str	r0, [r2, #0]
 800a978:	0628      	lsls	r0, r5, #24
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	d501      	bpl.n	800a982 <_printf_i+0x196>
 800a97e:	6019      	str	r1, [r3, #0]
 800a980:	e002      	b.n	800a988 <_printf_i+0x19c>
 800a982:	066a      	lsls	r2, r5, #25
 800a984:	d5fb      	bpl.n	800a97e <_printf_i+0x192>
 800a986:	8019      	strh	r1, [r3, #0]
 800a988:	2300      	movs	r3, #0
 800a98a:	6123      	str	r3, [r4, #16]
 800a98c:	4665      	mov	r5, ip
 800a98e:	e7b9      	b.n	800a904 <_printf_i+0x118>
 800a990:	6813      	ldr	r3, [r2, #0]
 800a992:	1d19      	adds	r1, r3, #4
 800a994:	6011      	str	r1, [r2, #0]
 800a996:	681d      	ldr	r5, [r3, #0]
 800a998:	6862      	ldr	r2, [r4, #4]
 800a99a:	2100      	movs	r1, #0
 800a99c:	4628      	mov	r0, r5
 800a99e:	f7f5 fc1f 	bl	80001e0 <memchr>
 800a9a2:	b108      	cbz	r0, 800a9a8 <_printf_i+0x1bc>
 800a9a4:	1b40      	subs	r0, r0, r5
 800a9a6:	6060      	str	r0, [r4, #4]
 800a9a8:	6863      	ldr	r3, [r4, #4]
 800a9aa:	6123      	str	r3, [r4, #16]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b2:	e7a7      	b.n	800a904 <_printf_i+0x118>
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	47c0      	blx	r8
 800a9be:	3001      	adds	r0, #1
 800a9c0:	d0aa      	beq.n	800a918 <_printf_i+0x12c>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	079b      	lsls	r3, r3, #30
 800a9c6:	d413      	bmi.n	800a9f0 <_printf_i+0x204>
 800a9c8:	68e0      	ldr	r0, [r4, #12]
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	4298      	cmp	r0, r3
 800a9ce:	bfb8      	it	lt
 800a9d0:	4618      	movlt	r0, r3
 800a9d2:	e7a3      	b.n	800a91c <_printf_i+0x130>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	464a      	mov	r2, r9
 800a9d8:	4639      	mov	r1, r7
 800a9da:	4630      	mov	r0, r6
 800a9dc:	47c0      	blx	r8
 800a9de:	3001      	adds	r0, #1
 800a9e0:	d09a      	beq.n	800a918 <_printf_i+0x12c>
 800a9e2:	3501      	adds	r5, #1
 800a9e4:	68e3      	ldr	r3, [r4, #12]
 800a9e6:	9a03      	ldr	r2, [sp, #12]
 800a9e8:	1a9b      	subs	r3, r3, r2
 800a9ea:	42ab      	cmp	r3, r5
 800a9ec:	dcf2      	bgt.n	800a9d4 <_printf_i+0x1e8>
 800a9ee:	e7eb      	b.n	800a9c8 <_printf_i+0x1dc>
 800a9f0:	2500      	movs	r5, #0
 800a9f2:	f104 0919 	add.w	r9, r4, #25
 800a9f6:	e7f5      	b.n	800a9e4 <_printf_i+0x1f8>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1ac      	bne.n	800a956 <_printf_i+0x16a>
 800a9fc:	7803      	ldrb	r3, [r0, #0]
 800a9fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa06:	e76c      	b.n	800a8e2 <_printf_i+0xf6>
 800aa08:	0800cd7e 	.word	0x0800cd7e
 800aa0c:	0800cd8f 	.word	0x0800cd8f

0800aa10 <iprintf>:
 800aa10:	b40f      	push	{r0, r1, r2, r3}
 800aa12:	4b0a      	ldr	r3, [pc, #40]	; (800aa3c <iprintf+0x2c>)
 800aa14:	b513      	push	{r0, r1, r4, lr}
 800aa16:	681c      	ldr	r4, [r3, #0]
 800aa18:	b124      	cbz	r4, 800aa24 <iprintf+0x14>
 800aa1a:	69a3      	ldr	r3, [r4, #24]
 800aa1c:	b913      	cbnz	r3, 800aa24 <iprintf+0x14>
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f001 f916 	bl	800bc50 <__sinit>
 800aa24:	ab05      	add	r3, sp, #20
 800aa26:	9a04      	ldr	r2, [sp, #16]
 800aa28:	68a1      	ldr	r1, [r4, #8]
 800aa2a:	9301      	str	r3, [sp, #4]
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f001 fdd9 	bl	800c5e4 <_vfiprintf_r>
 800aa32:	b002      	add	sp, #8
 800aa34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa38:	b004      	add	sp, #16
 800aa3a:	4770      	bx	lr
 800aa3c:	20000ffc 	.word	0x20000ffc

0800aa40 <_puts_r>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	460e      	mov	r6, r1
 800aa44:	4605      	mov	r5, r0
 800aa46:	b118      	cbz	r0, 800aa50 <_puts_r+0x10>
 800aa48:	6983      	ldr	r3, [r0, #24]
 800aa4a:	b90b      	cbnz	r3, 800aa50 <_puts_r+0x10>
 800aa4c:	f001 f900 	bl	800bc50 <__sinit>
 800aa50:	69ab      	ldr	r3, [r5, #24]
 800aa52:	68ac      	ldr	r4, [r5, #8]
 800aa54:	b913      	cbnz	r3, 800aa5c <_puts_r+0x1c>
 800aa56:	4628      	mov	r0, r5
 800aa58:	f001 f8fa 	bl	800bc50 <__sinit>
 800aa5c:	4b23      	ldr	r3, [pc, #140]	; (800aaec <_puts_r+0xac>)
 800aa5e:	429c      	cmp	r4, r3
 800aa60:	d117      	bne.n	800aa92 <_puts_r+0x52>
 800aa62:	686c      	ldr	r4, [r5, #4]
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	071b      	lsls	r3, r3, #28
 800aa68:	d51d      	bpl.n	800aaa6 <_puts_r+0x66>
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	b1db      	cbz	r3, 800aaa6 <_puts_r+0x66>
 800aa6e:	3e01      	subs	r6, #1
 800aa70:	68a3      	ldr	r3, [r4, #8]
 800aa72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa76:	3b01      	subs	r3, #1
 800aa78:	60a3      	str	r3, [r4, #8]
 800aa7a:	b9e9      	cbnz	r1, 800aab8 <_puts_r+0x78>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	da2e      	bge.n	800aade <_puts_r+0x9e>
 800aa80:	4622      	mov	r2, r4
 800aa82:	210a      	movs	r1, #10
 800aa84:	4628      	mov	r0, r5
 800aa86:	f000 f8ed 	bl	800ac64 <__swbuf_r>
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	d011      	beq.n	800aab2 <_puts_r+0x72>
 800aa8e:	200a      	movs	r0, #10
 800aa90:	e011      	b.n	800aab6 <_puts_r+0x76>
 800aa92:	4b17      	ldr	r3, [pc, #92]	; (800aaf0 <_puts_r+0xb0>)
 800aa94:	429c      	cmp	r4, r3
 800aa96:	d101      	bne.n	800aa9c <_puts_r+0x5c>
 800aa98:	68ac      	ldr	r4, [r5, #8]
 800aa9a:	e7e3      	b.n	800aa64 <_puts_r+0x24>
 800aa9c:	4b15      	ldr	r3, [pc, #84]	; (800aaf4 <_puts_r+0xb4>)
 800aa9e:	429c      	cmp	r4, r3
 800aaa0:	bf08      	it	eq
 800aaa2:	68ec      	ldreq	r4, [r5, #12]
 800aaa4:	e7de      	b.n	800aa64 <_puts_r+0x24>
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f000 f92d 	bl	800ad08 <__swsetup_r>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d0dd      	beq.n	800aa6e <_puts_r+0x2e>
 800aab2:	f04f 30ff 	mov.w	r0, #4294967295
 800aab6:	bd70      	pop	{r4, r5, r6, pc}
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	da04      	bge.n	800aac6 <_puts_r+0x86>
 800aabc:	69a2      	ldr	r2, [r4, #24]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	dc06      	bgt.n	800aad0 <_puts_r+0x90>
 800aac2:	290a      	cmp	r1, #10
 800aac4:	d004      	beq.n	800aad0 <_puts_r+0x90>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	1c5a      	adds	r2, r3, #1
 800aaca:	6022      	str	r2, [r4, #0]
 800aacc:	7019      	strb	r1, [r3, #0]
 800aace:	e7cf      	b.n	800aa70 <_puts_r+0x30>
 800aad0:	4622      	mov	r2, r4
 800aad2:	4628      	mov	r0, r5
 800aad4:	f000 f8c6 	bl	800ac64 <__swbuf_r>
 800aad8:	3001      	adds	r0, #1
 800aada:	d1c9      	bne.n	800aa70 <_puts_r+0x30>
 800aadc:	e7e9      	b.n	800aab2 <_puts_r+0x72>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	200a      	movs	r0, #10
 800aae2:	1c5a      	adds	r2, r3, #1
 800aae4:	6022      	str	r2, [r4, #0]
 800aae6:	7018      	strb	r0, [r3, #0]
 800aae8:	e7e5      	b.n	800aab6 <_puts_r+0x76>
 800aaea:	bf00      	nop
 800aaec:	0800cdd0 	.word	0x0800cdd0
 800aaf0:	0800cdf0 	.word	0x0800cdf0
 800aaf4:	0800cdb0 	.word	0x0800cdb0

0800aaf8 <puts>:
 800aaf8:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <puts+0xc>)
 800aafa:	4601      	mov	r1, r0
 800aafc:	6818      	ldr	r0, [r3, #0]
 800aafe:	f7ff bf9f 	b.w	800aa40 <_puts_r>
 800ab02:	bf00      	nop
 800ab04:	20000ffc 	.word	0x20000ffc

0800ab08 <setvbuf>:
 800ab08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab0c:	461d      	mov	r5, r3
 800ab0e:	4b51      	ldr	r3, [pc, #324]	; (800ac54 <setvbuf+0x14c>)
 800ab10:	681e      	ldr	r6, [r3, #0]
 800ab12:	4604      	mov	r4, r0
 800ab14:	460f      	mov	r7, r1
 800ab16:	4690      	mov	r8, r2
 800ab18:	b126      	cbz	r6, 800ab24 <setvbuf+0x1c>
 800ab1a:	69b3      	ldr	r3, [r6, #24]
 800ab1c:	b913      	cbnz	r3, 800ab24 <setvbuf+0x1c>
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f001 f896 	bl	800bc50 <__sinit>
 800ab24:	4b4c      	ldr	r3, [pc, #304]	; (800ac58 <setvbuf+0x150>)
 800ab26:	429c      	cmp	r4, r3
 800ab28:	d152      	bne.n	800abd0 <setvbuf+0xc8>
 800ab2a:	6874      	ldr	r4, [r6, #4]
 800ab2c:	f1b8 0f02 	cmp.w	r8, #2
 800ab30:	d006      	beq.n	800ab40 <setvbuf+0x38>
 800ab32:	f1b8 0f01 	cmp.w	r8, #1
 800ab36:	f200 8089 	bhi.w	800ac4c <setvbuf+0x144>
 800ab3a:	2d00      	cmp	r5, #0
 800ab3c:	f2c0 8086 	blt.w	800ac4c <setvbuf+0x144>
 800ab40:	4621      	mov	r1, r4
 800ab42:	4630      	mov	r0, r6
 800ab44:	f001 f81a 	bl	800bb7c <_fflush_r>
 800ab48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab4a:	b141      	cbz	r1, 800ab5e <setvbuf+0x56>
 800ab4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab50:	4299      	cmp	r1, r3
 800ab52:	d002      	beq.n	800ab5a <setvbuf+0x52>
 800ab54:	4630      	mov	r0, r6
 800ab56:	f001 fc73 	bl	800c440 <_free_r>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	6363      	str	r3, [r4, #52]	; 0x34
 800ab5e:	2300      	movs	r3, #0
 800ab60:	61a3      	str	r3, [r4, #24]
 800ab62:	6063      	str	r3, [r4, #4]
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	061b      	lsls	r3, r3, #24
 800ab68:	d503      	bpl.n	800ab72 <setvbuf+0x6a>
 800ab6a:	6921      	ldr	r1, [r4, #16]
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f001 fc67 	bl	800c440 <_free_r>
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ab78:	f023 0303 	bic.w	r3, r3, #3
 800ab7c:	f1b8 0f02 	cmp.w	r8, #2
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	d05d      	beq.n	800ac40 <setvbuf+0x138>
 800ab84:	ab01      	add	r3, sp, #4
 800ab86:	466a      	mov	r2, sp
 800ab88:	4621      	mov	r1, r4
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f001 f8f8 	bl	800bd80 <__swhatbuf_r>
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	4318      	orrs	r0, r3
 800ab94:	81a0      	strh	r0, [r4, #12]
 800ab96:	bb2d      	cbnz	r5, 800abe4 <setvbuf+0xdc>
 800ab98:	9d00      	ldr	r5, [sp, #0]
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f001 f954 	bl	800be48 <malloc>
 800aba0:	4607      	mov	r7, r0
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d14e      	bne.n	800ac44 <setvbuf+0x13c>
 800aba6:	f8dd 9000 	ldr.w	r9, [sp]
 800abaa:	45a9      	cmp	r9, r5
 800abac:	d13c      	bne.n	800ac28 <setvbuf+0x120>
 800abae:	f04f 30ff 	mov.w	r0, #4294967295
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	f043 0302 	orr.w	r3, r3, #2
 800abb8:	81a3      	strh	r3, [r4, #12]
 800abba:	2300      	movs	r3, #0
 800abbc:	60a3      	str	r3, [r4, #8]
 800abbe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	6123      	str	r3, [r4, #16]
 800abc6:	2301      	movs	r3, #1
 800abc8:	6163      	str	r3, [r4, #20]
 800abca:	b003      	add	sp, #12
 800abcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abd0:	4b22      	ldr	r3, [pc, #136]	; (800ac5c <setvbuf+0x154>)
 800abd2:	429c      	cmp	r4, r3
 800abd4:	d101      	bne.n	800abda <setvbuf+0xd2>
 800abd6:	68b4      	ldr	r4, [r6, #8]
 800abd8:	e7a8      	b.n	800ab2c <setvbuf+0x24>
 800abda:	4b21      	ldr	r3, [pc, #132]	; (800ac60 <setvbuf+0x158>)
 800abdc:	429c      	cmp	r4, r3
 800abde:	bf08      	it	eq
 800abe0:	68f4      	ldreq	r4, [r6, #12]
 800abe2:	e7a3      	b.n	800ab2c <setvbuf+0x24>
 800abe4:	2f00      	cmp	r7, #0
 800abe6:	d0d8      	beq.n	800ab9a <setvbuf+0x92>
 800abe8:	69b3      	ldr	r3, [r6, #24]
 800abea:	b913      	cbnz	r3, 800abf2 <setvbuf+0xea>
 800abec:	4630      	mov	r0, r6
 800abee:	f001 f82f 	bl	800bc50 <__sinit>
 800abf2:	f1b8 0f01 	cmp.w	r8, #1
 800abf6:	bf08      	it	eq
 800abf8:	89a3      	ldrheq	r3, [r4, #12]
 800abfa:	6027      	str	r7, [r4, #0]
 800abfc:	bf04      	itt	eq
 800abfe:	f043 0301 	orreq.w	r3, r3, #1
 800ac02:	81a3      	strheq	r3, [r4, #12]
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	f013 0008 	ands.w	r0, r3, #8
 800ac0a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800ac0e:	d01b      	beq.n	800ac48 <setvbuf+0x140>
 800ac10:	f013 0001 	ands.w	r0, r3, #1
 800ac14:	bf18      	it	ne
 800ac16:	426d      	negne	r5, r5
 800ac18:	f04f 0300 	mov.w	r3, #0
 800ac1c:	bf1d      	ittte	ne
 800ac1e:	60a3      	strne	r3, [r4, #8]
 800ac20:	61a5      	strne	r5, [r4, #24]
 800ac22:	4618      	movne	r0, r3
 800ac24:	60a5      	streq	r5, [r4, #8]
 800ac26:	e7d0      	b.n	800abca <setvbuf+0xc2>
 800ac28:	4648      	mov	r0, r9
 800ac2a:	f001 f90d 	bl	800be48 <malloc>
 800ac2e:	4607      	mov	r7, r0
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d0bc      	beq.n	800abae <setvbuf+0xa6>
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac3a:	81a3      	strh	r3, [r4, #12]
 800ac3c:	464d      	mov	r5, r9
 800ac3e:	e7d3      	b.n	800abe8 <setvbuf+0xe0>
 800ac40:	2000      	movs	r0, #0
 800ac42:	e7b6      	b.n	800abb2 <setvbuf+0xaa>
 800ac44:	46a9      	mov	r9, r5
 800ac46:	e7f5      	b.n	800ac34 <setvbuf+0x12c>
 800ac48:	60a0      	str	r0, [r4, #8]
 800ac4a:	e7be      	b.n	800abca <setvbuf+0xc2>
 800ac4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac50:	e7bb      	b.n	800abca <setvbuf+0xc2>
 800ac52:	bf00      	nop
 800ac54:	20000ffc 	.word	0x20000ffc
 800ac58:	0800cdd0 	.word	0x0800cdd0
 800ac5c:	0800cdf0 	.word	0x0800cdf0
 800ac60:	0800cdb0 	.word	0x0800cdb0

0800ac64 <__swbuf_r>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	460e      	mov	r6, r1
 800ac68:	4614      	mov	r4, r2
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	b118      	cbz	r0, 800ac76 <__swbuf_r+0x12>
 800ac6e:	6983      	ldr	r3, [r0, #24]
 800ac70:	b90b      	cbnz	r3, 800ac76 <__swbuf_r+0x12>
 800ac72:	f000 ffed 	bl	800bc50 <__sinit>
 800ac76:	4b21      	ldr	r3, [pc, #132]	; (800acfc <__swbuf_r+0x98>)
 800ac78:	429c      	cmp	r4, r3
 800ac7a:	d12a      	bne.n	800acd2 <__swbuf_r+0x6e>
 800ac7c:	686c      	ldr	r4, [r5, #4]
 800ac7e:	69a3      	ldr	r3, [r4, #24]
 800ac80:	60a3      	str	r3, [r4, #8]
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	071a      	lsls	r2, r3, #28
 800ac86:	d52e      	bpl.n	800ace6 <__swbuf_r+0x82>
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	b363      	cbz	r3, 800ace6 <__swbuf_r+0x82>
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	6820      	ldr	r0, [r4, #0]
 800ac90:	1ac0      	subs	r0, r0, r3
 800ac92:	6963      	ldr	r3, [r4, #20]
 800ac94:	b2f6      	uxtb	r6, r6
 800ac96:	4283      	cmp	r3, r0
 800ac98:	4637      	mov	r7, r6
 800ac9a:	dc04      	bgt.n	800aca6 <__swbuf_r+0x42>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 ff6c 	bl	800bb7c <_fflush_r>
 800aca4:	bb28      	cbnz	r0, 800acf2 <__swbuf_r+0x8e>
 800aca6:	68a3      	ldr	r3, [r4, #8]
 800aca8:	3b01      	subs	r3, #1
 800acaa:	60a3      	str	r3, [r4, #8]
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	1c5a      	adds	r2, r3, #1
 800acb0:	6022      	str	r2, [r4, #0]
 800acb2:	701e      	strb	r6, [r3, #0]
 800acb4:	6963      	ldr	r3, [r4, #20]
 800acb6:	3001      	adds	r0, #1
 800acb8:	4283      	cmp	r3, r0
 800acba:	d004      	beq.n	800acc6 <__swbuf_r+0x62>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	07db      	lsls	r3, r3, #31
 800acc0:	d519      	bpl.n	800acf6 <__swbuf_r+0x92>
 800acc2:	2e0a      	cmp	r6, #10
 800acc4:	d117      	bne.n	800acf6 <__swbuf_r+0x92>
 800acc6:	4621      	mov	r1, r4
 800acc8:	4628      	mov	r0, r5
 800acca:	f000 ff57 	bl	800bb7c <_fflush_r>
 800acce:	b190      	cbz	r0, 800acf6 <__swbuf_r+0x92>
 800acd0:	e00f      	b.n	800acf2 <__swbuf_r+0x8e>
 800acd2:	4b0b      	ldr	r3, [pc, #44]	; (800ad00 <__swbuf_r+0x9c>)
 800acd4:	429c      	cmp	r4, r3
 800acd6:	d101      	bne.n	800acdc <__swbuf_r+0x78>
 800acd8:	68ac      	ldr	r4, [r5, #8]
 800acda:	e7d0      	b.n	800ac7e <__swbuf_r+0x1a>
 800acdc:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <__swbuf_r+0xa0>)
 800acde:	429c      	cmp	r4, r3
 800ace0:	bf08      	it	eq
 800ace2:	68ec      	ldreq	r4, [r5, #12]
 800ace4:	e7cb      	b.n	800ac7e <__swbuf_r+0x1a>
 800ace6:	4621      	mov	r1, r4
 800ace8:	4628      	mov	r0, r5
 800acea:	f000 f80d 	bl	800ad08 <__swsetup_r>
 800acee:	2800      	cmp	r0, #0
 800acf0:	d0cc      	beq.n	800ac8c <__swbuf_r+0x28>
 800acf2:	f04f 37ff 	mov.w	r7, #4294967295
 800acf6:	4638      	mov	r0, r7
 800acf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acfa:	bf00      	nop
 800acfc:	0800cdd0 	.word	0x0800cdd0
 800ad00:	0800cdf0 	.word	0x0800cdf0
 800ad04:	0800cdb0 	.word	0x0800cdb0

0800ad08 <__swsetup_r>:
 800ad08:	4b32      	ldr	r3, [pc, #200]	; (800add4 <__swsetup_r+0xcc>)
 800ad0a:	b570      	push	{r4, r5, r6, lr}
 800ad0c:	681d      	ldr	r5, [r3, #0]
 800ad0e:	4606      	mov	r6, r0
 800ad10:	460c      	mov	r4, r1
 800ad12:	b125      	cbz	r5, 800ad1e <__swsetup_r+0x16>
 800ad14:	69ab      	ldr	r3, [r5, #24]
 800ad16:	b913      	cbnz	r3, 800ad1e <__swsetup_r+0x16>
 800ad18:	4628      	mov	r0, r5
 800ad1a:	f000 ff99 	bl	800bc50 <__sinit>
 800ad1e:	4b2e      	ldr	r3, [pc, #184]	; (800add8 <__swsetup_r+0xd0>)
 800ad20:	429c      	cmp	r4, r3
 800ad22:	d10f      	bne.n	800ad44 <__swsetup_r+0x3c>
 800ad24:	686c      	ldr	r4, [r5, #4]
 800ad26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	0715      	lsls	r5, r2, #28
 800ad2e:	d42c      	bmi.n	800ad8a <__swsetup_r+0x82>
 800ad30:	06d0      	lsls	r0, r2, #27
 800ad32:	d411      	bmi.n	800ad58 <__swsetup_r+0x50>
 800ad34:	2209      	movs	r2, #9
 800ad36:	6032      	str	r2, [r6, #0]
 800ad38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad3c:	81a3      	strh	r3, [r4, #12]
 800ad3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad42:	e03e      	b.n	800adc2 <__swsetup_r+0xba>
 800ad44:	4b25      	ldr	r3, [pc, #148]	; (800addc <__swsetup_r+0xd4>)
 800ad46:	429c      	cmp	r4, r3
 800ad48:	d101      	bne.n	800ad4e <__swsetup_r+0x46>
 800ad4a:	68ac      	ldr	r4, [r5, #8]
 800ad4c:	e7eb      	b.n	800ad26 <__swsetup_r+0x1e>
 800ad4e:	4b24      	ldr	r3, [pc, #144]	; (800ade0 <__swsetup_r+0xd8>)
 800ad50:	429c      	cmp	r4, r3
 800ad52:	bf08      	it	eq
 800ad54:	68ec      	ldreq	r4, [r5, #12]
 800ad56:	e7e6      	b.n	800ad26 <__swsetup_r+0x1e>
 800ad58:	0751      	lsls	r1, r2, #29
 800ad5a:	d512      	bpl.n	800ad82 <__swsetup_r+0x7a>
 800ad5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad5e:	b141      	cbz	r1, 800ad72 <__swsetup_r+0x6a>
 800ad60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad64:	4299      	cmp	r1, r3
 800ad66:	d002      	beq.n	800ad6e <__swsetup_r+0x66>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f001 fb69 	bl	800c440 <_free_r>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	6363      	str	r3, [r4, #52]	; 0x34
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad78:	81a3      	strh	r3, [r4, #12]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	6063      	str	r3, [r4, #4]
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	f043 0308 	orr.w	r3, r3, #8
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	6923      	ldr	r3, [r4, #16]
 800ad8c:	b94b      	cbnz	r3, 800ada2 <__swsetup_r+0x9a>
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad98:	d003      	beq.n	800ada2 <__swsetup_r+0x9a>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	f001 f813 	bl	800bdc8 <__smakebuf_r>
 800ada2:	89a2      	ldrh	r2, [r4, #12]
 800ada4:	f012 0301 	ands.w	r3, r2, #1
 800ada8:	d00c      	beq.n	800adc4 <__swsetup_r+0xbc>
 800adaa:	2300      	movs	r3, #0
 800adac:	60a3      	str	r3, [r4, #8]
 800adae:	6963      	ldr	r3, [r4, #20]
 800adb0:	425b      	negs	r3, r3
 800adb2:	61a3      	str	r3, [r4, #24]
 800adb4:	6923      	ldr	r3, [r4, #16]
 800adb6:	b953      	cbnz	r3, 800adce <__swsetup_r+0xc6>
 800adb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adbc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800adc0:	d1ba      	bne.n	800ad38 <__swsetup_r+0x30>
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	0792      	lsls	r2, r2, #30
 800adc6:	bf58      	it	pl
 800adc8:	6963      	ldrpl	r3, [r4, #20]
 800adca:	60a3      	str	r3, [r4, #8]
 800adcc:	e7f2      	b.n	800adb4 <__swsetup_r+0xac>
 800adce:	2000      	movs	r0, #0
 800add0:	e7f7      	b.n	800adc2 <__swsetup_r+0xba>
 800add2:	bf00      	nop
 800add4:	20000ffc 	.word	0x20000ffc
 800add8:	0800cdd0 	.word	0x0800cdd0
 800addc:	0800cdf0 	.word	0x0800cdf0
 800ade0:	0800cdb0 	.word	0x0800cdb0

0800ade4 <quorem>:
 800ade4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade8:	6903      	ldr	r3, [r0, #16]
 800adea:	690c      	ldr	r4, [r1, #16]
 800adec:	42a3      	cmp	r3, r4
 800adee:	4680      	mov	r8, r0
 800adf0:	f2c0 8082 	blt.w	800aef8 <quorem+0x114>
 800adf4:	3c01      	subs	r4, #1
 800adf6:	f101 0714 	add.w	r7, r1, #20
 800adfa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800adfe:	f100 0614 	add.w	r6, r0, #20
 800ae02:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ae06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ae0a:	eb06 030c 	add.w	r3, r6, ip
 800ae0e:	3501      	adds	r5, #1
 800ae10:	eb07 090c 	add.w	r9, r7, ip
 800ae14:	9301      	str	r3, [sp, #4]
 800ae16:	fbb0 f5f5 	udiv	r5, r0, r5
 800ae1a:	b395      	cbz	r5, 800ae82 <quorem+0x9e>
 800ae1c:	f04f 0a00 	mov.w	sl, #0
 800ae20:	4638      	mov	r0, r7
 800ae22:	46b6      	mov	lr, r6
 800ae24:	46d3      	mov	fp, sl
 800ae26:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae2a:	b293      	uxth	r3, r2
 800ae2c:	fb05 a303 	mla	r3, r5, r3, sl
 800ae30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	ebab 0303 	sub.w	r3, fp, r3
 800ae3a:	0c12      	lsrs	r2, r2, #16
 800ae3c:	f8de b000 	ldr.w	fp, [lr]
 800ae40:	fb05 a202 	mla	r2, r5, r2, sl
 800ae44:	fa13 f38b 	uxtah	r3, r3, fp
 800ae48:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ae4c:	fa1f fb82 	uxth.w	fp, r2
 800ae50:	f8de 2000 	ldr.w	r2, [lr]
 800ae54:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ae58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae62:	4581      	cmp	r9, r0
 800ae64:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ae68:	f84e 3b04 	str.w	r3, [lr], #4
 800ae6c:	d2db      	bcs.n	800ae26 <quorem+0x42>
 800ae6e:	f856 300c 	ldr.w	r3, [r6, ip]
 800ae72:	b933      	cbnz	r3, 800ae82 <quorem+0x9e>
 800ae74:	9b01      	ldr	r3, [sp, #4]
 800ae76:	3b04      	subs	r3, #4
 800ae78:	429e      	cmp	r6, r3
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	d330      	bcc.n	800aee0 <quorem+0xfc>
 800ae7e:	f8c8 4010 	str.w	r4, [r8, #16]
 800ae82:	4640      	mov	r0, r8
 800ae84:	f001 fa08 	bl	800c298 <__mcmp>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	db25      	blt.n	800aed8 <quorem+0xf4>
 800ae8c:	3501      	adds	r5, #1
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f04f 0c00 	mov.w	ip, #0
 800ae94:	f857 2b04 	ldr.w	r2, [r7], #4
 800ae98:	f8d0 e000 	ldr.w	lr, [r0]
 800ae9c:	b293      	uxth	r3, r2
 800ae9e:	ebac 0303 	sub.w	r3, ip, r3
 800aea2:	0c12      	lsrs	r2, r2, #16
 800aea4:	fa13 f38e 	uxtah	r3, r3, lr
 800aea8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aeac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeb6:	45b9      	cmp	r9, r7
 800aeb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aebc:	f840 3b04 	str.w	r3, [r0], #4
 800aec0:	d2e8      	bcs.n	800ae94 <quorem+0xb0>
 800aec2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800aec6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800aeca:	b92a      	cbnz	r2, 800aed8 <quorem+0xf4>
 800aecc:	3b04      	subs	r3, #4
 800aece:	429e      	cmp	r6, r3
 800aed0:	461a      	mov	r2, r3
 800aed2:	d30b      	bcc.n	800aeec <quorem+0x108>
 800aed4:	f8c8 4010 	str.w	r4, [r8, #16]
 800aed8:	4628      	mov	r0, r5
 800aeda:	b003      	add	sp, #12
 800aedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee0:	6812      	ldr	r2, [r2, #0]
 800aee2:	3b04      	subs	r3, #4
 800aee4:	2a00      	cmp	r2, #0
 800aee6:	d1ca      	bne.n	800ae7e <quorem+0x9a>
 800aee8:	3c01      	subs	r4, #1
 800aeea:	e7c5      	b.n	800ae78 <quorem+0x94>
 800aeec:	6812      	ldr	r2, [r2, #0]
 800aeee:	3b04      	subs	r3, #4
 800aef0:	2a00      	cmp	r2, #0
 800aef2:	d1ef      	bne.n	800aed4 <quorem+0xf0>
 800aef4:	3c01      	subs	r4, #1
 800aef6:	e7ea      	b.n	800aece <quorem+0xea>
 800aef8:	2000      	movs	r0, #0
 800aefa:	e7ee      	b.n	800aeda <quorem+0xf6>
 800aefc:	0000      	movs	r0, r0
	...

0800af00 <_dtoa_r>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	ec57 6b10 	vmov	r6, r7, d0
 800af08:	b097      	sub	sp, #92	; 0x5c
 800af0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af0c:	9106      	str	r1, [sp, #24]
 800af0e:	4604      	mov	r4, r0
 800af10:	920b      	str	r2, [sp, #44]	; 0x2c
 800af12:	9312      	str	r3, [sp, #72]	; 0x48
 800af14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af18:	e9cd 6700 	strd	r6, r7, [sp]
 800af1c:	b93d      	cbnz	r5, 800af2e <_dtoa_r+0x2e>
 800af1e:	2010      	movs	r0, #16
 800af20:	f000 ff92 	bl	800be48 <malloc>
 800af24:	6260      	str	r0, [r4, #36]	; 0x24
 800af26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af2a:	6005      	str	r5, [r0, #0]
 800af2c:	60c5      	str	r5, [r0, #12]
 800af2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af30:	6819      	ldr	r1, [r3, #0]
 800af32:	b151      	cbz	r1, 800af4a <_dtoa_r+0x4a>
 800af34:	685a      	ldr	r2, [r3, #4]
 800af36:	604a      	str	r2, [r1, #4]
 800af38:	2301      	movs	r3, #1
 800af3a:	4093      	lsls	r3, r2
 800af3c:	608b      	str	r3, [r1, #8]
 800af3e:	4620      	mov	r0, r4
 800af40:	f000 ffc9 	bl	800bed6 <_Bfree>
 800af44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af46:	2200      	movs	r2, #0
 800af48:	601a      	str	r2, [r3, #0]
 800af4a:	1e3b      	subs	r3, r7, #0
 800af4c:	bfbb      	ittet	lt
 800af4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af52:	9301      	strlt	r3, [sp, #4]
 800af54:	2300      	movge	r3, #0
 800af56:	2201      	movlt	r2, #1
 800af58:	bfac      	ite	ge
 800af5a:	f8c8 3000 	strge.w	r3, [r8]
 800af5e:	f8c8 2000 	strlt.w	r2, [r8]
 800af62:	4baf      	ldr	r3, [pc, #700]	; (800b220 <_dtoa_r+0x320>)
 800af64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800af68:	ea33 0308 	bics.w	r3, r3, r8
 800af6c:	d114      	bne.n	800af98 <_dtoa_r+0x98>
 800af6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af70:	f242 730f 	movw	r3, #9999	; 0x270f
 800af74:	6013      	str	r3, [r2, #0]
 800af76:	9b00      	ldr	r3, [sp, #0]
 800af78:	b923      	cbnz	r3, 800af84 <_dtoa_r+0x84>
 800af7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800af7e:	2800      	cmp	r0, #0
 800af80:	f000 8542 	beq.w	800ba08 <_dtoa_r+0xb08>
 800af84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b234 <_dtoa_r+0x334>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 8544 	beq.w	800ba18 <_dtoa_r+0xb18>
 800af90:	f10b 0303 	add.w	r3, fp, #3
 800af94:	f000 bd3e 	b.w	800ba14 <_dtoa_r+0xb14>
 800af98:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af9c:	2200      	movs	r2, #0
 800af9e:	2300      	movs	r3, #0
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 fd90 	bl	8000ac8 <__aeabi_dcmpeq>
 800afa8:	4681      	mov	r9, r0
 800afaa:	b168      	cbz	r0, 800afc8 <_dtoa_r+0xc8>
 800afac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afae:	2301      	movs	r3, #1
 800afb0:	6013      	str	r3, [r2, #0]
 800afb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f000 8524 	beq.w	800ba02 <_dtoa_r+0xb02>
 800afba:	4b9a      	ldr	r3, [pc, #616]	; (800b224 <_dtoa_r+0x324>)
 800afbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afbe:	f103 3bff 	add.w	fp, r3, #4294967295
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	f000 bd28 	b.w	800ba18 <_dtoa_r+0xb18>
 800afc8:	aa14      	add	r2, sp, #80	; 0x50
 800afca:	a915      	add	r1, sp, #84	; 0x54
 800afcc:	ec47 6b10 	vmov	d0, r6, r7
 800afd0:	4620      	mov	r0, r4
 800afd2:	f001 f9d8 	bl	800c386 <__d2b>
 800afd6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800afda:	9004      	str	r0, [sp, #16]
 800afdc:	2d00      	cmp	r5, #0
 800afde:	d07c      	beq.n	800b0da <_dtoa_r+0x1da>
 800afe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afe4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800afe8:	46b2      	mov	sl, r6
 800afea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800afee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aff2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800aff6:	2200      	movs	r2, #0
 800aff8:	4b8b      	ldr	r3, [pc, #556]	; (800b228 <_dtoa_r+0x328>)
 800affa:	4650      	mov	r0, sl
 800affc:	4659      	mov	r1, fp
 800affe:	f7f5 f943 	bl	8000288 <__aeabi_dsub>
 800b002:	a381      	add	r3, pc, #516	; (adr r3, 800b208 <_dtoa_r+0x308>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f7f5 faf6 	bl	80005f8 <__aeabi_dmul>
 800b00c:	a380      	add	r3, pc, #512	; (adr r3, 800b210 <_dtoa_r+0x310>)
 800b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b012:	f7f5 f93b 	bl	800028c <__adddf3>
 800b016:	4606      	mov	r6, r0
 800b018:	4628      	mov	r0, r5
 800b01a:	460f      	mov	r7, r1
 800b01c:	f7f5 fa82 	bl	8000524 <__aeabi_i2d>
 800b020:	a37d      	add	r3, pc, #500	; (adr r3, 800b218 <_dtoa_r+0x318>)
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f7f5 fae7 	bl	80005f8 <__aeabi_dmul>
 800b02a:	4602      	mov	r2, r0
 800b02c:	460b      	mov	r3, r1
 800b02e:	4630      	mov	r0, r6
 800b030:	4639      	mov	r1, r7
 800b032:	f7f5 f92b 	bl	800028c <__adddf3>
 800b036:	4606      	mov	r6, r0
 800b038:	460f      	mov	r7, r1
 800b03a:	f7f5 fd8d 	bl	8000b58 <__aeabi_d2iz>
 800b03e:	2200      	movs	r2, #0
 800b040:	4682      	mov	sl, r0
 800b042:	2300      	movs	r3, #0
 800b044:	4630      	mov	r0, r6
 800b046:	4639      	mov	r1, r7
 800b048:	f7f5 fd48 	bl	8000adc <__aeabi_dcmplt>
 800b04c:	b148      	cbz	r0, 800b062 <_dtoa_r+0x162>
 800b04e:	4650      	mov	r0, sl
 800b050:	f7f5 fa68 	bl	8000524 <__aeabi_i2d>
 800b054:	4632      	mov	r2, r6
 800b056:	463b      	mov	r3, r7
 800b058:	f7f5 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800b05c:	b908      	cbnz	r0, 800b062 <_dtoa_r+0x162>
 800b05e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b062:	f1ba 0f16 	cmp.w	sl, #22
 800b066:	d859      	bhi.n	800b11c <_dtoa_r+0x21c>
 800b068:	4970      	ldr	r1, [pc, #448]	; (800b22c <_dtoa_r+0x32c>)
 800b06a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b06e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b072:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b076:	f7f5 fd4f 	bl	8000b18 <__aeabi_dcmpgt>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d050      	beq.n	800b120 <_dtoa_r+0x220>
 800b07e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b082:	2300      	movs	r3, #0
 800b084:	930f      	str	r3, [sp, #60]	; 0x3c
 800b086:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b088:	1b5d      	subs	r5, r3, r5
 800b08a:	f1b5 0801 	subs.w	r8, r5, #1
 800b08e:	bf49      	itett	mi
 800b090:	f1c5 0301 	rsbmi	r3, r5, #1
 800b094:	2300      	movpl	r3, #0
 800b096:	9305      	strmi	r3, [sp, #20]
 800b098:	f04f 0800 	movmi.w	r8, #0
 800b09c:	bf58      	it	pl
 800b09e:	9305      	strpl	r3, [sp, #20]
 800b0a0:	f1ba 0f00 	cmp.w	sl, #0
 800b0a4:	db3e      	blt.n	800b124 <_dtoa_r+0x224>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	44d0      	add	r8, sl
 800b0aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b0ae:	9307      	str	r3, [sp, #28]
 800b0b0:	9b06      	ldr	r3, [sp, #24]
 800b0b2:	2b09      	cmp	r3, #9
 800b0b4:	f200 8090 	bhi.w	800b1d8 <_dtoa_r+0x2d8>
 800b0b8:	2b05      	cmp	r3, #5
 800b0ba:	bfc4      	itt	gt
 800b0bc:	3b04      	subgt	r3, #4
 800b0be:	9306      	strgt	r3, [sp, #24]
 800b0c0:	9b06      	ldr	r3, [sp, #24]
 800b0c2:	f1a3 0302 	sub.w	r3, r3, #2
 800b0c6:	bfcc      	ite	gt
 800b0c8:	2500      	movgt	r5, #0
 800b0ca:	2501      	movle	r5, #1
 800b0cc:	2b03      	cmp	r3, #3
 800b0ce:	f200 808f 	bhi.w	800b1f0 <_dtoa_r+0x2f0>
 800b0d2:	e8df f003 	tbb	[pc, r3]
 800b0d6:	7f7d      	.short	0x7f7d
 800b0d8:	7131      	.short	0x7131
 800b0da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b0de:	441d      	add	r5, r3
 800b0e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b0e4:	2820      	cmp	r0, #32
 800b0e6:	dd13      	ble.n	800b110 <_dtoa_r+0x210>
 800b0e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b0ec:	9b00      	ldr	r3, [sp, #0]
 800b0ee:	fa08 f800 	lsl.w	r8, r8, r0
 800b0f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b0f6:	fa23 f000 	lsr.w	r0, r3, r0
 800b0fa:	ea48 0000 	orr.w	r0, r8, r0
 800b0fe:	f7f5 fa01 	bl	8000504 <__aeabi_ui2d>
 800b102:	2301      	movs	r3, #1
 800b104:	4682      	mov	sl, r0
 800b106:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b10a:	3d01      	subs	r5, #1
 800b10c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b10e:	e772      	b.n	800aff6 <_dtoa_r+0xf6>
 800b110:	9b00      	ldr	r3, [sp, #0]
 800b112:	f1c0 0020 	rsb	r0, r0, #32
 800b116:	fa03 f000 	lsl.w	r0, r3, r0
 800b11a:	e7f0      	b.n	800b0fe <_dtoa_r+0x1fe>
 800b11c:	2301      	movs	r3, #1
 800b11e:	e7b1      	b.n	800b084 <_dtoa_r+0x184>
 800b120:	900f      	str	r0, [sp, #60]	; 0x3c
 800b122:	e7b0      	b.n	800b086 <_dtoa_r+0x186>
 800b124:	9b05      	ldr	r3, [sp, #20]
 800b126:	eba3 030a 	sub.w	r3, r3, sl
 800b12a:	9305      	str	r3, [sp, #20]
 800b12c:	f1ca 0300 	rsb	r3, sl, #0
 800b130:	9307      	str	r3, [sp, #28]
 800b132:	2300      	movs	r3, #0
 800b134:	930e      	str	r3, [sp, #56]	; 0x38
 800b136:	e7bb      	b.n	800b0b0 <_dtoa_r+0x1b0>
 800b138:	2301      	movs	r3, #1
 800b13a:	930a      	str	r3, [sp, #40]	; 0x28
 800b13c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	dd59      	ble.n	800b1f6 <_dtoa_r+0x2f6>
 800b142:	9302      	str	r3, [sp, #8]
 800b144:	4699      	mov	r9, r3
 800b146:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b148:	2200      	movs	r2, #0
 800b14a:	6072      	str	r2, [r6, #4]
 800b14c:	2204      	movs	r2, #4
 800b14e:	f102 0014 	add.w	r0, r2, #20
 800b152:	4298      	cmp	r0, r3
 800b154:	6871      	ldr	r1, [r6, #4]
 800b156:	d953      	bls.n	800b200 <_dtoa_r+0x300>
 800b158:	4620      	mov	r0, r4
 800b15a:	f000 fe88 	bl	800be6e <_Balloc>
 800b15e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b160:	6030      	str	r0, [r6, #0]
 800b162:	f1b9 0f0e 	cmp.w	r9, #14
 800b166:	f8d3 b000 	ldr.w	fp, [r3]
 800b16a:	f200 80e6 	bhi.w	800b33a <_dtoa_r+0x43a>
 800b16e:	2d00      	cmp	r5, #0
 800b170:	f000 80e3 	beq.w	800b33a <_dtoa_r+0x43a>
 800b174:	ed9d 7b00 	vldr	d7, [sp]
 800b178:	f1ba 0f00 	cmp.w	sl, #0
 800b17c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b180:	dd74      	ble.n	800b26c <_dtoa_r+0x36c>
 800b182:	4a2a      	ldr	r2, [pc, #168]	; (800b22c <_dtoa_r+0x32c>)
 800b184:	f00a 030f 	and.w	r3, sl, #15
 800b188:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b18c:	ed93 7b00 	vldr	d7, [r3]
 800b190:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b194:	06f0      	lsls	r0, r6, #27
 800b196:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b19a:	d565      	bpl.n	800b268 <_dtoa_r+0x368>
 800b19c:	4b24      	ldr	r3, [pc, #144]	; (800b230 <_dtoa_r+0x330>)
 800b19e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b1a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1a6:	f7f5 fb51 	bl	800084c <__aeabi_ddiv>
 800b1aa:	e9cd 0100 	strd	r0, r1, [sp]
 800b1ae:	f006 060f 	and.w	r6, r6, #15
 800b1b2:	2503      	movs	r5, #3
 800b1b4:	4f1e      	ldr	r7, [pc, #120]	; (800b230 <_dtoa_r+0x330>)
 800b1b6:	e04c      	b.n	800b252 <_dtoa_r+0x352>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b1bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1be:	4453      	add	r3, sl
 800b1c0:	f103 0901 	add.w	r9, r3, #1
 800b1c4:	9302      	str	r3, [sp, #8]
 800b1c6:	464b      	mov	r3, r9
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	bfb8      	it	lt
 800b1cc:	2301      	movlt	r3, #1
 800b1ce:	e7ba      	b.n	800b146 <_dtoa_r+0x246>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	e7b2      	b.n	800b13a <_dtoa_r+0x23a>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	e7f0      	b.n	800b1ba <_dtoa_r+0x2ba>
 800b1d8:	2501      	movs	r5, #1
 800b1da:	2300      	movs	r3, #0
 800b1dc:	9306      	str	r3, [sp, #24]
 800b1de:	950a      	str	r5, [sp, #40]	; 0x28
 800b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e4:	9302      	str	r3, [sp, #8]
 800b1e6:	4699      	mov	r9, r3
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2312      	movs	r3, #18
 800b1ec:	920b      	str	r2, [sp, #44]	; 0x2c
 800b1ee:	e7aa      	b.n	800b146 <_dtoa_r+0x246>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b1f4:	e7f4      	b.n	800b1e0 <_dtoa_r+0x2e0>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	9302      	str	r3, [sp, #8]
 800b1fa:	4699      	mov	r9, r3
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	e7f5      	b.n	800b1ec <_dtoa_r+0x2ec>
 800b200:	3101      	adds	r1, #1
 800b202:	6071      	str	r1, [r6, #4]
 800b204:	0052      	lsls	r2, r2, #1
 800b206:	e7a2      	b.n	800b14e <_dtoa_r+0x24e>
 800b208:	636f4361 	.word	0x636f4361
 800b20c:	3fd287a7 	.word	0x3fd287a7
 800b210:	8b60c8b3 	.word	0x8b60c8b3
 800b214:	3fc68a28 	.word	0x3fc68a28
 800b218:	509f79fb 	.word	0x509f79fb
 800b21c:	3fd34413 	.word	0x3fd34413
 800b220:	7ff00000 	.word	0x7ff00000
 800b224:	0800cd7d 	.word	0x0800cd7d
 800b228:	3ff80000 	.word	0x3ff80000
 800b22c:	0800ce38 	.word	0x0800ce38
 800b230:	0800ce10 	.word	0x0800ce10
 800b234:	0800cda9 	.word	0x0800cda9
 800b238:	07f1      	lsls	r1, r6, #31
 800b23a:	d508      	bpl.n	800b24e <_dtoa_r+0x34e>
 800b23c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b244:	f7f5 f9d8 	bl	80005f8 <__aeabi_dmul>
 800b248:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b24c:	3501      	adds	r5, #1
 800b24e:	1076      	asrs	r6, r6, #1
 800b250:	3708      	adds	r7, #8
 800b252:	2e00      	cmp	r6, #0
 800b254:	d1f0      	bne.n	800b238 <_dtoa_r+0x338>
 800b256:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b25a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b25e:	f7f5 faf5 	bl	800084c <__aeabi_ddiv>
 800b262:	e9cd 0100 	strd	r0, r1, [sp]
 800b266:	e01a      	b.n	800b29e <_dtoa_r+0x39e>
 800b268:	2502      	movs	r5, #2
 800b26a:	e7a3      	b.n	800b1b4 <_dtoa_r+0x2b4>
 800b26c:	f000 80a0 	beq.w	800b3b0 <_dtoa_r+0x4b0>
 800b270:	f1ca 0600 	rsb	r6, sl, #0
 800b274:	4b9f      	ldr	r3, [pc, #636]	; (800b4f4 <_dtoa_r+0x5f4>)
 800b276:	4fa0      	ldr	r7, [pc, #640]	; (800b4f8 <_dtoa_r+0x5f8>)
 800b278:	f006 020f 	and.w	r2, r6, #15
 800b27c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b284:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b288:	f7f5 f9b6 	bl	80005f8 <__aeabi_dmul>
 800b28c:	e9cd 0100 	strd	r0, r1, [sp]
 800b290:	1136      	asrs	r6, r6, #4
 800b292:	2300      	movs	r3, #0
 800b294:	2502      	movs	r5, #2
 800b296:	2e00      	cmp	r6, #0
 800b298:	d17f      	bne.n	800b39a <_dtoa_r+0x49a>
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1e1      	bne.n	800b262 <_dtoa_r+0x362>
 800b29e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 8087 	beq.w	800b3b4 <_dtoa_r+0x4b4>
 800b2a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	4b93      	ldr	r3, [pc, #588]	; (800b4fc <_dtoa_r+0x5fc>)
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f5 fc13 	bl	8000adc <__aeabi_dcmplt>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d07c      	beq.n	800b3b4 <_dtoa_r+0x4b4>
 800b2ba:	f1b9 0f00 	cmp.w	r9, #0
 800b2be:	d079      	beq.n	800b3b4 <_dtoa_r+0x4b4>
 800b2c0:	9b02      	ldr	r3, [sp, #8]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dd35      	ble.n	800b332 <_dtoa_r+0x432>
 800b2c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b2ca:	9308      	str	r3, [sp, #32]
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	4b8b      	ldr	r3, [pc, #556]	; (800b500 <_dtoa_r+0x600>)
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7f5 f990 	bl	80005f8 <__aeabi_dmul>
 800b2d8:	e9cd 0100 	strd	r0, r1, [sp]
 800b2dc:	9f02      	ldr	r7, [sp, #8]
 800b2de:	3501      	adds	r5, #1
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f7f5 f91f 	bl	8000524 <__aeabi_i2d>
 800b2e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2ea:	f7f5 f985 	bl	80005f8 <__aeabi_dmul>
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	4b84      	ldr	r3, [pc, #528]	; (800b504 <_dtoa_r+0x604>)
 800b2f2:	f7f4 ffcb 	bl	800028c <__adddf3>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b2fc:	2f00      	cmp	r7, #0
 800b2fe:	d15d      	bne.n	800b3bc <_dtoa_r+0x4bc>
 800b300:	2200      	movs	r2, #0
 800b302:	4b81      	ldr	r3, [pc, #516]	; (800b508 <_dtoa_r+0x608>)
 800b304:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b308:	f7f4 ffbe 	bl	8000288 <__aeabi_dsub>
 800b30c:	462a      	mov	r2, r5
 800b30e:	4633      	mov	r3, r6
 800b310:	e9cd 0100 	strd	r0, r1, [sp]
 800b314:	f7f5 fc00 	bl	8000b18 <__aeabi_dcmpgt>
 800b318:	2800      	cmp	r0, #0
 800b31a:	f040 8288 	bne.w	800b82e <_dtoa_r+0x92e>
 800b31e:	462a      	mov	r2, r5
 800b320:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b324:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b328:	f7f5 fbd8 	bl	8000adc <__aeabi_dcmplt>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	f040 827c 	bne.w	800b82a <_dtoa_r+0x92a>
 800b332:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b336:	e9cd 2300 	strd	r2, r3, [sp]
 800b33a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f2c0 8150 	blt.w	800b5e2 <_dtoa_r+0x6e2>
 800b342:	f1ba 0f0e 	cmp.w	sl, #14
 800b346:	f300 814c 	bgt.w	800b5e2 <_dtoa_r+0x6e2>
 800b34a:	4b6a      	ldr	r3, [pc, #424]	; (800b4f4 <_dtoa_r+0x5f4>)
 800b34c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b350:	ed93 7b00 	vldr	d7, [r3]
 800b354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b356:	2b00      	cmp	r3, #0
 800b358:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b35c:	f280 80d8 	bge.w	800b510 <_dtoa_r+0x610>
 800b360:	f1b9 0f00 	cmp.w	r9, #0
 800b364:	f300 80d4 	bgt.w	800b510 <_dtoa_r+0x610>
 800b368:	f040 825e 	bne.w	800b828 <_dtoa_r+0x928>
 800b36c:	2200      	movs	r2, #0
 800b36e:	4b66      	ldr	r3, [pc, #408]	; (800b508 <_dtoa_r+0x608>)
 800b370:	ec51 0b17 	vmov	r0, r1, d7
 800b374:	f7f5 f940 	bl	80005f8 <__aeabi_dmul>
 800b378:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b37c:	f7f5 fbc2 	bl	8000b04 <__aeabi_dcmpge>
 800b380:	464f      	mov	r7, r9
 800b382:	464e      	mov	r6, r9
 800b384:	2800      	cmp	r0, #0
 800b386:	f040 8234 	bne.w	800b7f2 <_dtoa_r+0x8f2>
 800b38a:	2331      	movs	r3, #49	; 0x31
 800b38c:	f10b 0501 	add.w	r5, fp, #1
 800b390:	f88b 3000 	strb.w	r3, [fp]
 800b394:	f10a 0a01 	add.w	sl, sl, #1
 800b398:	e22f      	b.n	800b7fa <_dtoa_r+0x8fa>
 800b39a:	07f2      	lsls	r2, r6, #31
 800b39c:	d505      	bpl.n	800b3aa <_dtoa_r+0x4aa>
 800b39e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a2:	f7f5 f929 	bl	80005f8 <__aeabi_dmul>
 800b3a6:	3501      	adds	r5, #1
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	1076      	asrs	r6, r6, #1
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	e772      	b.n	800b296 <_dtoa_r+0x396>
 800b3b0:	2502      	movs	r5, #2
 800b3b2:	e774      	b.n	800b29e <_dtoa_r+0x39e>
 800b3b4:	f8cd a020 	str.w	sl, [sp, #32]
 800b3b8:	464f      	mov	r7, r9
 800b3ba:	e791      	b.n	800b2e0 <_dtoa_r+0x3e0>
 800b3bc:	4b4d      	ldr	r3, [pc, #308]	; (800b4f4 <_dtoa_r+0x5f4>)
 800b3be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b3c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d047      	beq.n	800b45c <_dtoa_r+0x55c>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	494e      	ldr	r1, [pc, #312]	; (800b50c <_dtoa_r+0x60c>)
 800b3d4:	f7f5 fa3a 	bl	800084c <__aeabi_ddiv>
 800b3d8:	462a      	mov	r2, r5
 800b3da:	4633      	mov	r3, r6
 800b3dc:	f7f4 ff54 	bl	8000288 <__aeabi_dsub>
 800b3e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b3e4:	465d      	mov	r5, fp
 800b3e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3ea:	f7f5 fbb5 	bl	8000b58 <__aeabi_d2iz>
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	f7f5 f898 	bl	8000524 <__aeabi_i2d>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3fc:	f7f4 ff44 	bl	8000288 <__aeabi_dsub>
 800b400:	3630      	adds	r6, #48	; 0x30
 800b402:	f805 6b01 	strb.w	r6, [r5], #1
 800b406:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b40a:	e9cd 0100 	strd	r0, r1, [sp]
 800b40e:	f7f5 fb65 	bl	8000adc <__aeabi_dcmplt>
 800b412:	2800      	cmp	r0, #0
 800b414:	d163      	bne.n	800b4de <_dtoa_r+0x5de>
 800b416:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b41a:	2000      	movs	r0, #0
 800b41c:	4937      	ldr	r1, [pc, #220]	; (800b4fc <_dtoa_r+0x5fc>)
 800b41e:	f7f4 ff33 	bl	8000288 <__aeabi_dsub>
 800b422:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b426:	f7f5 fb59 	bl	8000adc <__aeabi_dcmplt>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	f040 80b7 	bne.w	800b59e <_dtoa_r+0x69e>
 800b430:	eba5 030b 	sub.w	r3, r5, fp
 800b434:	429f      	cmp	r7, r3
 800b436:	f77f af7c 	ble.w	800b332 <_dtoa_r+0x432>
 800b43a:	2200      	movs	r2, #0
 800b43c:	4b30      	ldr	r3, [pc, #192]	; (800b500 <_dtoa_r+0x600>)
 800b43e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b442:	f7f5 f8d9 	bl	80005f8 <__aeabi_dmul>
 800b446:	2200      	movs	r2, #0
 800b448:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b44c:	4b2c      	ldr	r3, [pc, #176]	; (800b500 <_dtoa_r+0x600>)
 800b44e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b452:	f7f5 f8d1 	bl	80005f8 <__aeabi_dmul>
 800b456:	e9cd 0100 	strd	r0, r1, [sp]
 800b45a:	e7c4      	b.n	800b3e6 <_dtoa_r+0x4e6>
 800b45c:	462a      	mov	r2, r5
 800b45e:	4633      	mov	r3, r6
 800b460:	f7f5 f8ca 	bl	80005f8 <__aeabi_dmul>
 800b464:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b468:	eb0b 0507 	add.w	r5, fp, r7
 800b46c:	465e      	mov	r6, fp
 800b46e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b472:	f7f5 fb71 	bl	8000b58 <__aeabi_d2iz>
 800b476:	4607      	mov	r7, r0
 800b478:	f7f5 f854 	bl	8000524 <__aeabi_i2d>
 800b47c:	3730      	adds	r7, #48	; 0x30
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b486:	f7f4 feff 	bl	8000288 <__aeabi_dsub>
 800b48a:	f806 7b01 	strb.w	r7, [r6], #1
 800b48e:	42ae      	cmp	r6, r5
 800b490:	e9cd 0100 	strd	r0, r1, [sp]
 800b494:	f04f 0200 	mov.w	r2, #0
 800b498:	d126      	bne.n	800b4e8 <_dtoa_r+0x5e8>
 800b49a:	4b1c      	ldr	r3, [pc, #112]	; (800b50c <_dtoa_r+0x60c>)
 800b49c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4a0:	f7f4 fef4 	bl	800028c <__adddf3>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4ac:	f7f5 fb34 	bl	8000b18 <__aeabi_dcmpgt>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d174      	bne.n	800b59e <_dtoa_r+0x69e>
 800b4b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	4914      	ldr	r1, [pc, #80]	; (800b50c <_dtoa_r+0x60c>)
 800b4bc:	f7f4 fee4 	bl	8000288 <__aeabi_dsub>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4c8:	f7f5 fb08 	bl	8000adc <__aeabi_dcmplt>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	f43f af30 	beq.w	800b332 <_dtoa_r+0x432>
 800b4d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4d6:	2b30      	cmp	r3, #48	; 0x30
 800b4d8:	f105 32ff 	add.w	r2, r5, #4294967295
 800b4dc:	d002      	beq.n	800b4e4 <_dtoa_r+0x5e4>
 800b4de:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b4e2:	e04a      	b.n	800b57a <_dtoa_r+0x67a>
 800b4e4:	4615      	mov	r5, r2
 800b4e6:	e7f4      	b.n	800b4d2 <_dtoa_r+0x5d2>
 800b4e8:	4b05      	ldr	r3, [pc, #20]	; (800b500 <_dtoa_r+0x600>)
 800b4ea:	f7f5 f885 	bl	80005f8 <__aeabi_dmul>
 800b4ee:	e9cd 0100 	strd	r0, r1, [sp]
 800b4f2:	e7bc      	b.n	800b46e <_dtoa_r+0x56e>
 800b4f4:	0800ce38 	.word	0x0800ce38
 800b4f8:	0800ce10 	.word	0x0800ce10
 800b4fc:	3ff00000 	.word	0x3ff00000
 800b500:	40240000 	.word	0x40240000
 800b504:	401c0000 	.word	0x401c0000
 800b508:	40140000 	.word	0x40140000
 800b50c:	3fe00000 	.word	0x3fe00000
 800b510:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b514:	465d      	mov	r5, fp
 800b516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b51a:	4630      	mov	r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	f7f5 f995 	bl	800084c <__aeabi_ddiv>
 800b522:	f7f5 fb19 	bl	8000b58 <__aeabi_d2iz>
 800b526:	4680      	mov	r8, r0
 800b528:	f7f4 fffc 	bl	8000524 <__aeabi_i2d>
 800b52c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b530:	f7f5 f862 	bl	80005f8 <__aeabi_dmul>
 800b534:	4602      	mov	r2, r0
 800b536:	460b      	mov	r3, r1
 800b538:	4630      	mov	r0, r6
 800b53a:	4639      	mov	r1, r7
 800b53c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b540:	f7f4 fea2 	bl	8000288 <__aeabi_dsub>
 800b544:	f805 6b01 	strb.w	r6, [r5], #1
 800b548:	eba5 060b 	sub.w	r6, r5, fp
 800b54c:	45b1      	cmp	r9, r6
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	d139      	bne.n	800b5c8 <_dtoa_r+0x6c8>
 800b554:	f7f4 fe9a 	bl	800028c <__adddf3>
 800b558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b55c:	4606      	mov	r6, r0
 800b55e:	460f      	mov	r7, r1
 800b560:	f7f5 fada 	bl	8000b18 <__aeabi_dcmpgt>
 800b564:	b9c8      	cbnz	r0, 800b59a <_dtoa_r+0x69a>
 800b566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b56a:	4630      	mov	r0, r6
 800b56c:	4639      	mov	r1, r7
 800b56e:	f7f5 faab 	bl	8000ac8 <__aeabi_dcmpeq>
 800b572:	b110      	cbz	r0, 800b57a <_dtoa_r+0x67a>
 800b574:	f018 0f01 	tst.w	r8, #1
 800b578:	d10f      	bne.n	800b59a <_dtoa_r+0x69a>
 800b57a:	9904      	ldr	r1, [sp, #16]
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 fcaa 	bl	800bed6 <_Bfree>
 800b582:	2300      	movs	r3, #0
 800b584:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b586:	702b      	strb	r3, [r5, #0]
 800b588:	f10a 0301 	add.w	r3, sl, #1
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 8241 	beq.w	800ba18 <_dtoa_r+0xb18>
 800b596:	601d      	str	r5, [r3, #0]
 800b598:	e23e      	b.n	800ba18 <_dtoa_r+0xb18>
 800b59a:	f8cd a020 	str.w	sl, [sp, #32]
 800b59e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b5a2:	2a39      	cmp	r2, #57	; 0x39
 800b5a4:	f105 33ff 	add.w	r3, r5, #4294967295
 800b5a8:	d108      	bne.n	800b5bc <_dtoa_r+0x6bc>
 800b5aa:	459b      	cmp	fp, r3
 800b5ac:	d10a      	bne.n	800b5c4 <_dtoa_r+0x6c4>
 800b5ae:	9b08      	ldr	r3, [sp, #32]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	9308      	str	r3, [sp, #32]
 800b5b4:	2330      	movs	r3, #48	; 0x30
 800b5b6:	f88b 3000 	strb.w	r3, [fp]
 800b5ba:	465b      	mov	r3, fp
 800b5bc:	781a      	ldrb	r2, [r3, #0]
 800b5be:	3201      	adds	r2, #1
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	e78c      	b.n	800b4de <_dtoa_r+0x5de>
 800b5c4:	461d      	mov	r5, r3
 800b5c6:	e7ea      	b.n	800b59e <_dtoa_r+0x69e>
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	4b9b      	ldr	r3, [pc, #620]	; (800b838 <_dtoa_r+0x938>)
 800b5cc:	f7f5 f814 	bl	80005f8 <__aeabi_dmul>
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	f7f5 fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d09a      	beq.n	800b516 <_dtoa_r+0x616>
 800b5e0:	e7cb      	b.n	800b57a <_dtoa_r+0x67a>
 800b5e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5e4:	2a00      	cmp	r2, #0
 800b5e6:	f000 808b 	beq.w	800b700 <_dtoa_r+0x800>
 800b5ea:	9a06      	ldr	r2, [sp, #24]
 800b5ec:	2a01      	cmp	r2, #1
 800b5ee:	dc6e      	bgt.n	800b6ce <_dtoa_r+0x7ce>
 800b5f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b5f2:	2a00      	cmp	r2, #0
 800b5f4:	d067      	beq.n	800b6c6 <_dtoa_r+0x7c6>
 800b5f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5fa:	9f07      	ldr	r7, [sp, #28]
 800b5fc:	9d05      	ldr	r5, [sp, #20]
 800b5fe:	9a05      	ldr	r2, [sp, #20]
 800b600:	2101      	movs	r1, #1
 800b602:	441a      	add	r2, r3
 800b604:	4620      	mov	r0, r4
 800b606:	9205      	str	r2, [sp, #20]
 800b608:	4498      	add	r8, r3
 800b60a:	f000 fd04 	bl	800c016 <__i2b>
 800b60e:	4606      	mov	r6, r0
 800b610:	2d00      	cmp	r5, #0
 800b612:	dd0c      	ble.n	800b62e <_dtoa_r+0x72e>
 800b614:	f1b8 0f00 	cmp.w	r8, #0
 800b618:	dd09      	ble.n	800b62e <_dtoa_r+0x72e>
 800b61a:	4545      	cmp	r5, r8
 800b61c:	9a05      	ldr	r2, [sp, #20]
 800b61e:	462b      	mov	r3, r5
 800b620:	bfa8      	it	ge
 800b622:	4643      	movge	r3, r8
 800b624:	1ad2      	subs	r2, r2, r3
 800b626:	9205      	str	r2, [sp, #20]
 800b628:	1aed      	subs	r5, r5, r3
 800b62a:	eba8 0803 	sub.w	r8, r8, r3
 800b62e:	9b07      	ldr	r3, [sp, #28]
 800b630:	b1eb      	cbz	r3, 800b66e <_dtoa_r+0x76e>
 800b632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b634:	2b00      	cmp	r3, #0
 800b636:	d067      	beq.n	800b708 <_dtoa_r+0x808>
 800b638:	b18f      	cbz	r7, 800b65e <_dtoa_r+0x75e>
 800b63a:	4631      	mov	r1, r6
 800b63c:	463a      	mov	r2, r7
 800b63e:	4620      	mov	r0, r4
 800b640:	f000 fd88 	bl	800c154 <__pow5mult>
 800b644:	9a04      	ldr	r2, [sp, #16]
 800b646:	4601      	mov	r1, r0
 800b648:	4606      	mov	r6, r0
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 fcec 	bl	800c028 <__multiply>
 800b650:	9904      	ldr	r1, [sp, #16]
 800b652:	9008      	str	r0, [sp, #32]
 800b654:	4620      	mov	r0, r4
 800b656:	f000 fc3e 	bl	800bed6 <_Bfree>
 800b65a:	9b08      	ldr	r3, [sp, #32]
 800b65c:	9304      	str	r3, [sp, #16]
 800b65e:	9b07      	ldr	r3, [sp, #28]
 800b660:	1bda      	subs	r2, r3, r7
 800b662:	d004      	beq.n	800b66e <_dtoa_r+0x76e>
 800b664:	9904      	ldr	r1, [sp, #16]
 800b666:	4620      	mov	r0, r4
 800b668:	f000 fd74 	bl	800c154 <__pow5mult>
 800b66c:	9004      	str	r0, [sp, #16]
 800b66e:	2101      	movs	r1, #1
 800b670:	4620      	mov	r0, r4
 800b672:	f000 fcd0 	bl	800c016 <__i2b>
 800b676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b678:	4607      	mov	r7, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f000 81d0 	beq.w	800ba20 <_dtoa_r+0xb20>
 800b680:	461a      	mov	r2, r3
 800b682:	4601      	mov	r1, r0
 800b684:	4620      	mov	r0, r4
 800b686:	f000 fd65 	bl	800c154 <__pow5mult>
 800b68a:	9b06      	ldr	r3, [sp, #24]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	4607      	mov	r7, r0
 800b690:	dc40      	bgt.n	800b714 <_dtoa_r+0x814>
 800b692:	9b00      	ldr	r3, [sp, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d139      	bne.n	800b70c <_dtoa_r+0x80c>
 800b698:	9b01      	ldr	r3, [sp, #4]
 800b69a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d136      	bne.n	800b710 <_dtoa_r+0x810>
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6a8:	0d1b      	lsrs	r3, r3, #20
 800b6aa:	051b      	lsls	r3, r3, #20
 800b6ac:	b12b      	cbz	r3, 800b6ba <_dtoa_r+0x7ba>
 800b6ae:	9b05      	ldr	r3, [sp, #20]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	9305      	str	r3, [sp, #20]
 800b6b4:	f108 0801 	add.w	r8, r8, #1
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	9307      	str	r3, [sp, #28]
 800b6bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d12a      	bne.n	800b718 <_dtoa_r+0x818>
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	e030      	b.n	800b728 <_dtoa_r+0x828>
 800b6c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b6cc:	e795      	b.n	800b5fa <_dtoa_r+0x6fa>
 800b6ce:	9b07      	ldr	r3, [sp, #28]
 800b6d0:	f109 37ff 	add.w	r7, r9, #4294967295
 800b6d4:	42bb      	cmp	r3, r7
 800b6d6:	bfbf      	itttt	lt
 800b6d8:	9b07      	ldrlt	r3, [sp, #28]
 800b6da:	9707      	strlt	r7, [sp, #28]
 800b6dc:	1afa      	sublt	r2, r7, r3
 800b6de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b6e0:	bfbb      	ittet	lt
 800b6e2:	189b      	addlt	r3, r3, r2
 800b6e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b6e6:	1bdf      	subge	r7, r3, r7
 800b6e8:	2700      	movlt	r7, #0
 800b6ea:	f1b9 0f00 	cmp.w	r9, #0
 800b6ee:	bfb5      	itete	lt
 800b6f0:	9b05      	ldrlt	r3, [sp, #20]
 800b6f2:	9d05      	ldrge	r5, [sp, #20]
 800b6f4:	eba3 0509 	sublt.w	r5, r3, r9
 800b6f8:	464b      	movge	r3, r9
 800b6fa:	bfb8      	it	lt
 800b6fc:	2300      	movlt	r3, #0
 800b6fe:	e77e      	b.n	800b5fe <_dtoa_r+0x6fe>
 800b700:	9f07      	ldr	r7, [sp, #28]
 800b702:	9d05      	ldr	r5, [sp, #20]
 800b704:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b706:	e783      	b.n	800b610 <_dtoa_r+0x710>
 800b708:	9a07      	ldr	r2, [sp, #28]
 800b70a:	e7ab      	b.n	800b664 <_dtoa_r+0x764>
 800b70c:	2300      	movs	r3, #0
 800b70e:	e7d4      	b.n	800b6ba <_dtoa_r+0x7ba>
 800b710:	9b00      	ldr	r3, [sp, #0]
 800b712:	e7d2      	b.n	800b6ba <_dtoa_r+0x7ba>
 800b714:	2300      	movs	r3, #0
 800b716:	9307      	str	r3, [sp, #28]
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b71e:	6918      	ldr	r0, [r3, #16]
 800b720:	f000 fc2b 	bl	800bf7a <__hi0bits>
 800b724:	f1c0 0020 	rsb	r0, r0, #32
 800b728:	4440      	add	r0, r8
 800b72a:	f010 001f 	ands.w	r0, r0, #31
 800b72e:	d047      	beq.n	800b7c0 <_dtoa_r+0x8c0>
 800b730:	f1c0 0320 	rsb	r3, r0, #32
 800b734:	2b04      	cmp	r3, #4
 800b736:	dd3b      	ble.n	800b7b0 <_dtoa_r+0x8b0>
 800b738:	9b05      	ldr	r3, [sp, #20]
 800b73a:	f1c0 001c 	rsb	r0, r0, #28
 800b73e:	4403      	add	r3, r0
 800b740:	9305      	str	r3, [sp, #20]
 800b742:	4405      	add	r5, r0
 800b744:	4480      	add	r8, r0
 800b746:	9b05      	ldr	r3, [sp, #20]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	dd05      	ble.n	800b758 <_dtoa_r+0x858>
 800b74c:	461a      	mov	r2, r3
 800b74e:	9904      	ldr	r1, [sp, #16]
 800b750:	4620      	mov	r0, r4
 800b752:	f000 fd4d 	bl	800c1f0 <__lshift>
 800b756:	9004      	str	r0, [sp, #16]
 800b758:	f1b8 0f00 	cmp.w	r8, #0
 800b75c:	dd05      	ble.n	800b76a <_dtoa_r+0x86a>
 800b75e:	4639      	mov	r1, r7
 800b760:	4642      	mov	r2, r8
 800b762:	4620      	mov	r0, r4
 800b764:	f000 fd44 	bl	800c1f0 <__lshift>
 800b768:	4607      	mov	r7, r0
 800b76a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b76c:	b353      	cbz	r3, 800b7c4 <_dtoa_r+0x8c4>
 800b76e:	4639      	mov	r1, r7
 800b770:	9804      	ldr	r0, [sp, #16]
 800b772:	f000 fd91 	bl	800c298 <__mcmp>
 800b776:	2800      	cmp	r0, #0
 800b778:	da24      	bge.n	800b7c4 <_dtoa_r+0x8c4>
 800b77a:	2300      	movs	r3, #0
 800b77c:	220a      	movs	r2, #10
 800b77e:	9904      	ldr	r1, [sp, #16]
 800b780:	4620      	mov	r0, r4
 800b782:	f000 fbbf 	bl	800bf04 <__multadd>
 800b786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b788:	9004      	str	r0, [sp, #16]
 800b78a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 814d 	beq.w	800ba2e <_dtoa_r+0xb2e>
 800b794:	2300      	movs	r3, #0
 800b796:	4631      	mov	r1, r6
 800b798:	220a      	movs	r2, #10
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 fbb2 	bl	800bf04 <__multadd>
 800b7a0:	9b02      	ldr	r3, [sp, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	dc4f      	bgt.n	800b848 <_dtoa_r+0x948>
 800b7a8:	9b06      	ldr	r3, [sp, #24]
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	dd4c      	ble.n	800b848 <_dtoa_r+0x948>
 800b7ae:	e011      	b.n	800b7d4 <_dtoa_r+0x8d4>
 800b7b0:	d0c9      	beq.n	800b746 <_dtoa_r+0x846>
 800b7b2:	9a05      	ldr	r2, [sp, #20]
 800b7b4:	331c      	adds	r3, #28
 800b7b6:	441a      	add	r2, r3
 800b7b8:	9205      	str	r2, [sp, #20]
 800b7ba:	441d      	add	r5, r3
 800b7bc:	4498      	add	r8, r3
 800b7be:	e7c2      	b.n	800b746 <_dtoa_r+0x846>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	e7f6      	b.n	800b7b2 <_dtoa_r+0x8b2>
 800b7c4:	f1b9 0f00 	cmp.w	r9, #0
 800b7c8:	dc38      	bgt.n	800b83c <_dtoa_r+0x93c>
 800b7ca:	9b06      	ldr	r3, [sp, #24]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	dd35      	ble.n	800b83c <_dtoa_r+0x93c>
 800b7d0:	f8cd 9008 	str.w	r9, [sp, #8]
 800b7d4:	9b02      	ldr	r3, [sp, #8]
 800b7d6:	b963      	cbnz	r3, 800b7f2 <_dtoa_r+0x8f2>
 800b7d8:	4639      	mov	r1, r7
 800b7da:	2205      	movs	r2, #5
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f000 fb91 	bl	800bf04 <__multadd>
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	9804      	ldr	r0, [sp, #16]
 800b7e8:	f000 fd56 	bl	800c298 <__mcmp>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	f73f adcc 	bgt.w	800b38a <_dtoa_r+0x48a>
 800b7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f4:	465d      	mov	r5, fp
 800b7f6:	ea6f 0a03 	mvn.w	sl, r3
 800b7fa:	f04f 0900 	mov.w	r9, #0
 800b7fe:	4639      	mov	r1, r7
 800b800:	4620      	mov	r0, r4
 800b802:	f000 fb68 	bl	800bed6 <_Bfree>
 800b806:	2e00      	cmp	r6, #0
 800b808:	f43f aeb7 	beq.w	800b57a <_dtoa_r+0x67a>
 800b80c:	f1b9 0f00 	cmp.w	r9, #0
 800b810:	d005      	beq.n	800b81e <_dtoa_r+0x91e>
 800b812:	45b1      	cmp	r9, r6
 800b814:	d003      	beq.n	800b81e <_dtoa_r+0x91e>
 800b816:	4649      	mov	r1, r9
 800b818:	4620      	mov	r0, r4
 800b81a:	f000 fb5c 	bl	800bed6 <_Bfree>
 800b81e:	4631      	mov	r1, r6
 800b820:	4620      	mov	r0, r4
 800b822:	f000 fb58 	bl	800bed6 <_Bfree>
 800b826:	e6a8      	b.n	800b57a <_dtoa_r+0x67a>
 800b828:	2700      	movs	r7, #0
 800b82a:	463e      	mov	r6, r7
 800b82c:	e7e1      	b.n	800b7f2 <_dtoa_r+0x8f2>
 800b82e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b832:	463e      	mov	r6, r7
 800b834:	e5a9      	b.n	800b38a <_dtoa_r+0x48a>
 800b836:	bf00      	nop
 800b838:	40240000 	.word	0x40240000
 800b83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b83e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 80fa 	beq.w	800ba3c <_dtoa_r+0xb3c>
 800b848:	2d00      	cmp	r5, #0
 800b84a:	dd05      	ble.n	800b858 <_dtoa_r+0x958>
 800b84c:	4631      	mov	r1, r6
 800b84e:	462a      	mov	r2, r5
 800b850:	4620      	mov	r0, r4
 800b852:	f000 fccd 	bl	800c1f0 <__lshift>
 800b856:	4606      	mov	r6, r0
 800b858:	9b07      	ldr	r3, [sp, #28]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d04c      	beq.n	800b8f8 <_dtoa_r+0x9f8>
 800b85e:	6871      	ldr	r1, [r6, #4]
 800b860:	4620      	mov	r0, r4
 800b862:	f000 fb04 	bl	800be6e <_Balloc>
 800b866:	6932      	ldr	r2, [r6, #16]
 800b868:	3202      	adds	r2, #2
 800b86a:	4605      	mov	r5, r0
 800b86c:	0092      	lsls	r2, r2, #2
 800b86e:	f106 010c 	add.w	r1, r6, #12
 800b872:	300c      	adds	r0, #12
 800b874:	f000 faf0 	bl	800be58 <memcpy>
 800b878:	2201      	movs	r2, #1
 800b87a:	4629      	mov	r1, r5
 800b87c:	4620      	mov	r0, r4
 800b87e:	f000 fcb7 	bl	800c1f0 <__lshift>
 800b882:	9b00      	ldr	r3, [sp, #0]
 800b884:	f8cd b014 	str.w	fp, [sp, #20]
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	46b1      	mov	r9, r6
 800b88e:	9307      	str	r3, [sp, #28]
 800b890:	4606      	mov	r6, r0
 800b892:	4639      	mov	r1, r7
 800b894:	9804      	ldr	r0, [sp, #16]
 800b896:	f7ff faa5 	bl	800ade4 <quorem>
 800b89a:	4649      	mov	r1, r9
 800b89c:	4605      	mov	r5, r0
 800b89e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b8a2:	9804      	ldr	r0, [sp, #16]
 800b8a4:	f000 fcf8 	bl	800c298 <__mcmp>
 800b8a8:	4632      	mov	r2, r6
 800b8aa:	9000      	str	r0, [sp, #0]
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 fd0c 	bl	800c2cc <__mdiff>
 800b8b4:	68c3      	ldr	r3, [r0, #12]
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	bb03      	cbnz	r3, 800b8fc <_dtoa_r+0x9fc>
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	9008      	str	r0, [sp, #32]
 800b8be:	9804      	ldr	r0, [sp, #16]
 800b8c0:	f000 fcea 	bl	800c298 <__mcmp>
 800b8c4:	9a08      	ldr	r2, [sp, #32]
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	9308      	str	r3, [sp, #32]
 800b8ce:	f000 fb02 	bl	800bed6 <_Bfree>
 800b8d2:	9b08      	ldr	r3, [sp, #32]
 800b8d4:	b9a3      	cbnz	r3, 800b900 <_dtoa_r+0xa00>
 800b8d6:	9a06      	ldr	r2, [sp, #24]
 800b8d8:	b992      	cbnz	r2, 800b900 <_dtoa_r+0xa00>
 800b8da:	9a07      	ldr	r2, [sp, #28]
 800b8dc:	b982      	cbnz	r2, 800b900 <_dtoa_r+0xa00>
 800b8de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b8e2:	d029      	beq.n	800b938 <_dtoa_r+0xa38>
 800b8e4:	9b00      	ldr	r3, [sp, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	dd01      	ble.n	800b8ee <_dtoa_r+0x9ee>
 800b8ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b8ee:	9b05      	ldr	r3, [sp, #20]
 800b8f0:	1c5d      	adds	r5, r3, #1
 800b8f2:	f883 8000 	strb.w	r8, [r3]
 800b8f6:	e782      	b.n	800b7fe <_dtoa_r+0x8fe>
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	e7c2      	b.n	800b882 <_dtoa_r+0x982>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e7e3      	b.n	800b8c8 <_dtoa_r+0x9c8>
 800b900:	9a00      	ldr	r2, [sp, #0]
 800b902:	2a00      	cmp	r2, #0
 800b904:	db04      	blt.n	800b910 <_dtoa_r+0xa10>
 800b906:	d125      	bne.n	800b954 <_dtoa_r+0xa54>
 800b908:	9a06      	ldr	r2, [sp, #24]
 800b90a:	bb1a      	cbnz	r2, 800b954 <_dtoa_r+0xa54>
 800b90c:	9a07      	ldr	r2, [sp, #28]
 800b90e:	bb0a      	cbnz	r2, 800b954 <_dtoa_r+0xa54>
 800b910:	2b00      	cmp	r3, #0
 800b912:	ddec      	ble.n	800b8ee <_dtoa_r+0x9ee>
 800b914:	2201      	movs	r2, #1
 800b916:	9904      	ldr	r1, [sp, #16]
 800b918:	4620      	mov	r0, r4
 800b91a:	f000 fc69 	bl	800c1f0 <__lshift>
 800b91e:	4639      	mov	r1, r7
 800b920:	9004      	str	r0, [sp, #16]
 800b922:	f000 fcb9 	bl	800c298 <__mcmp>
 800b926:	2800      	cmp	r0, #0
 800b928:	dc03      	bgt.n	800b932 <_dtoa_r+0xa32>
 800b92a:	d1e0      	bne.n	800b8ee <_dtoa_r+0x9ee>
 800b92c:	f018 0f01 	tst.w	r8, #1
 800b930:	d0dd      	beq.n	800b8ee <_dtoa_r+0x9ee>
 800b932:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b936:	d1d8      	bne.n	800b8ea <_dtoa_r+0x9ea>
 800b938:	9b05      	ldr	r3, [sp, #20]
 800b93a:	9a05      	ldr	r2, [sp, #20]
 800b93c:	1c5d      	adds	r5, r3, #1
 800b93e:	2339      	movs	r3, #57	; 0x39
 800b940:	7013      	strb	r3, [r2, #0]
 800b942:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b946:	2b39      	cmp	r3, #57	; 0x39
 800b948:	f105 32ff 	add.w	r2, r5, #4294967295
 800b94c:	d04f      	beq.n	800b9ee <_dtoa_r+0xaee>
 800b94e:	3301      	adds	r3, #1
 800b950:	7013      	strb	r3, [r2, #0]
 800b952:	e754      	b.n	800b7fe <_dtoa_r+0x8fe>
 800b954:	9a05      	ldr	r2, [sp, #20]
 800b956:	2b00      	cmp	r3, #0
 800b958:	f102 0501 	add.w	r5, r2, #1
 800b95c:	dd06      	ble.n	800b96c <_dtoa_r+0xa6c>
 800b95e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b962:	d0e9      	beq.n	800b938 <_dtoa_r+0xa38>
 800b964:	f108 0801 	add.w	r8, r8, #1
 800b968:	9b05      	ldr	r3, [sp, #20]
 800b96a:	e7c2      	b.n	800b8f2 <_dtoa_r+0x9f2>
 800b96c:	9a02      	ldr	r2, [sp, #8]
 800b96e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b972:	eba5 030b 	sub.w	r3, r5, fp
 800b976:	4293      	cmp	r3, r2
 800b978:	d021      	beq.n	800b9be <_dtoa_r+0xabe>
 800b97a:	2300      	movs	r3, #0
 800b97c:	220a      	movs	r2, #10
 800b97e:	9904      	ldr	r1, [sp, #16]
 800b980:	4620      	mov	r0, r4
 800b982:	f000 fabf 	bl	800bf04 <__multadd>
 800b986:	45b1      	cmp	r9, r6
 800b988:	9004      	str	r0, [sp, #16]
 800b98a:	f04f 0300 	mov.w	r3, #0
 800b98e:	f04f 020a 	mov.w	r2, #10
 800b992:	4649      	mov	r1, r9
 800b994:	4620      	mov	r0, r4
 800b996:	d105      	bne.n	800b9a4 <_dtoa_r+0xaa4>
 800b998:	f000 fab4 	bl	800bf04 <__multadd>
 800b99c:	4681      	mov	r9, r0
 800b99e:	4606      	mov	r6, r0
 800b9a0:	9505      	str	r5, [sp, #20]
 800b9a2:	e776      	b.n	800b892 <_dtoa_r+0x992>
 800b9a4:	f000 faae 	bl	800bf04 <__multadd>
 800b9a8:	4631      	mov	r1, r6
 800b9aa:	4681      	mov	r9, r0
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	220a      	movs	r2, #10
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f000 faa7 	bl	800bf04 <__multadd>
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	e7f2      	b.n	800b9a0 <_dtoa_r+0xaa0>
 800b9ba:	f04f 0900 	mov.w	r9, #0
 800b9be:	2201      	movs	r2, #1
 800b9c0:	9904      	ldr	r1, [sp, #16]
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f000 fc14 	bl	800c1f0 <__lshift>
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	9004      	str	r0, [sp, #16]
 800b9cc:	f000 fc64 	bl	800c298 <__mcmp>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	dcb6      	bgt.n	800b942 <_dtoa_r+0xa42>
 800b9d4:	d102      	bne.n	800b9dc <_dtoa_r+0xadc>
 800b9d6:	f018 0f01 	tst.w	r8, #1
 800b9da:	d1b2      	bne.n	800b942 <_dtoa_r+0xa42>
 800b9dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b9e0:	2b30      	cmp	r3, #48	; 0x30
 800b9e2:	f105 32ff 	add.w	r2, r5, #4294967295
 800b9e6:	f47f af0a 	bne.w	800b7fe <_dtoa_r+0x8fe>
 800b9ea:	4615      	mov	r5, r2
 800b9ec:	e7f6      	b.n	800b9dc <_dtoa_r+0xadc>
 800b9ee:	4593      	cmp	fp, r2
 800b9f0:	d105      	bne.n	800b9fe <_dtoa_r+0xafe>
 800b9f2:	2331      	movs	r3, #49	; 0x31
 800b9f4:	f10a 0a01 	add.w	sl, sl, #1
 800b9f8:	f88b 3000 	strb.w	r3, [fp]
 800b9fc:	e6ff      	b.n	800b7fe <_dtoa_r+0x8fe>
 800b9fe:	4615      	mov	r5, r2
 800ba00:	e79f      	b.n	800b942 <_dtoa_r+0xa42>
 800ba02:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ba68 <_dtoa_r+0xb68>
 800ba06:	e007      	b.n	800ba18 <_dtoa_r+0xb18>
 800ba08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba0a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ba6c <_dtoa_r+0xb6c>
 800ba0e:	b11b      	cbz	r3, 800ba18 <_dtoa_r+0xb18>
 800ba10:	f10b 0308 	add.w	r3, fp, #8
 800ba14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba16:	6013      	str	r3, [r2, #0]
 800ba18:	4658      	mov	r0, fp
 800ba1a:	b017      	add	sp, #92	; 0x5c
 800ba1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba20:	9b06      	ldr	r3, [sp, #24]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	f77f ae35 	ble.w	800b692 <_dtoa_r+0x792>
 800ba28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba2a:	9307      	str	r3, [sp, #28]
 800ba2c:	e649      	b.n	800b6c2 <_dtoa_r+0x7c2>
 800ba2e:	9b02      	ldr	r3, [sp, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	dc03      	bgt.n	800ba3c <_dtoa_r+0xb3c>
 800ba34:	9b06      	ldr	r3, [sp, #24]
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	f73f aecc 	bgt.w	800b7d4 <_dtoa_r+0x8d4>
 800ba3c:	465d      	mov	r5, fp
 800ba3e:	4639      	mov	r1, r7
 800ba40:	9804      	ldr	r0, [sp, #16]
 800ba42:	f7ff f9cf 	bl	800ade4 <quorem>
 800ba46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ba4a:	f805 8b01 	strb.w	r8, [r5], #1
 800ba4e:	9a02      	ldr	r2, [sp, #8]
 800ba50:	eba5 030b 	sub.w	r3, r5, fp
 800ba54:	429a      	cmp	r2, r3
 800ba56:	ddb0      	ble.n	800b9ba <_dtoa_r+0xaba>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	220a      	movs	r2, #10
 800ba5c:	9904      	ldr	r1, [sp, #16]
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f000 fa50 	bl	800bf04 <__multadd>
 800ba64:	9004      	str	r0, [sp, #16]
 800ba66:	e7ea      	b.n	800ba3e <_dtoa_r+0xb3e>
 800ba68:	0800cd7c 	.word	0x0800cd7c
 800ba6c:	0800cda0 	.word	0x0800cda0

0800ba70 <__sflush_r>:
 800ba70:	898a      	ldrh	r2, [r1, #12]
 800ba72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba76:	4605      	mov	r5, r0
 800ba78:	0710      	lsls	r0, r2, #28
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	d458      	bmi.n	800bb30 <__sflush_r+0xc0>
 800ba7e:	684b      	ldr	r3, [r1, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	dc05      	bgt.n	800ba90 <__sflush_r+0x20>
 800ba84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	dc02      	bgt.n	800ba90 <__sflush_r+0x20>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	d0f9      	beq.n	800ba8a <__sflush_r+0x1a>
 800ba96:	2300      	movs	r3, #0
 800ba98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba9c:	682f      	ldr	r7, [r5, #0]
 800ba9e:	6a21      	ldr	r1, [r4, #32]
 800baa0:	602b      	str	r3, [r5, #0]
 800baa2:	d032      	beq.n	800bb0a <__sflush_r+0x9a>
 800baa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800baa6:	89a3      	ldrh	r3, [r4, #12]
 800baa8:	075a      	lsls	r2, r3, #29
 800baaa:	d505      	bpl.n	800bab8 <__sflush_r+0x48>
 800baac:	6863      	ldr	r3, [r4, #4]
 800baae:	1ac0      	subs	r0, r0, r3
 800bab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bab2:	b10b      	cbz	r3, 800bab8 <__sflush_r+0x48>
 800bab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bab6:	1ac0      	subs	r0, r0, r3
 800bab8:	2300      	movs	r3, #0
 800baba:	4602      	mov	r2, r0
 800babc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800babe:	6a21      	ldr	r1, [r4, #32]
 800bac0:	4628      	mov	r0, r5
 800bac2:	47b0      	blx	r6
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	d106      	bne.n	800bad8 <__sflush_r+0x68>
 800baca:	6829      	ldr	r1, [r5, #0]
 800bacc:	291d      	cmp	r1, #29
 800bace:	d848      	bhi.n	800bb62 <__sflush_r+0xf2>
 800bad0:	4a29      	ldr	r2, [pc, #164]	; (800bb78 <__sflush_r+0x108>)
 800bad2:	40ca      	lsrs	r2, r1
 800bad4:	07d6      	lsls	r6, r2, #31
 800bad6:	d544      	bpl.n	800bb62 <__sflush_r+0xf2>
 800bad8:	2200      	movs	r2, #0
 800bada:	6062      	str	r2, [r4, #4]
 800badc:	04d9      	lsls	r1, r3, #19
 800bade:	6922      	ldr	r2, [r4, #16]
 800bae0:	6022      	str	r2, [r4, #0]
 800bae2:	d504      	bpl.n	800baee <__sflush_r+0x7e>
 800bae4:	1c42      	adds	r2, r0, #1
 800bae6:	d101      	bne.n	800baec <__sflush_r+0x7c>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b903      	cbnz	r3, 800baee <__sflush_r+0x7e>
 800baec:	6560      	str	r0, [r4, #84]	; 0x54
 800baee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baf0:	602f      	str	r7, [r5, #0]
 800baf2:	2900      	cmp	r1, #0
 800baf4:	d0c9      	beq.n	800ba8a <__sflush_r+0x1a>
 800baf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bafa:	4299      	cmp	r1, r3
 800bafc:	d002      	beq.n	800bb04 <__sflush_r+0x94>
 800bafe:	4628      	mov	r0, r5
 800bb00:	f000 fc9e 	bl	800c440 <_free_r>
 800bb04:	2000      	movs	r0, #0
 800bb06:	6360      	str	r0, [r4, #52]	; 0x34
 800bb08:	e7c0      	b.n	800ba8c <__sflush_r+0x1c>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	47b0      	blx	r6
 800bb10:	1c41      	adds	r1, r0, #1
 800bb12:	d1c8      	bne.n	800baa6 <__sflush_r+0x36>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d0c5      	beq.n	800baa6 <__sflush_r+0x36>
 800bb1a:	2b1d      	cmp	r3, #29
 800bb1c:	d001      	beq.n	800bb22 <__sflush_r+0xb2>
 800bb1e:	2b16      	cmp	r3, #22
 800bb20:	d101      	bne.n	800bb26 <__sflush_r+0xb6>
 800bb22:	602f      	str	r7, [r5, #0]
 800bb24:	e7b1      	b.n	800ba8a <__sflush_r+0x1a>
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb2c:	81a3      	strh	r3, [r4, #12]
 800bb2e:	e7ad      	b.n	800ba8c <__sflush_r+0x1c>
 800bb30:	690f      	ldr	r7, [r1, #16]
 800bb32:	2f00      	cmp	r7, #0
 800bb34:	d0a9      	beq.n	800ba8a <__sflush_r+0x1a>
 800bb36:	0793      	lsls	r3, r2, #30
 800bb38:	680e      	ldr	r6, [r1, #0]
 800bb3a:	bf08      	it	eq
 800bb3c:	694b      	ldreq	r3, [r1, #20]
 800bb3e:	600f      	str	r7, [r1, #0]
 800bb40:	bf18      	it	ne
 800bb42:	2300      	movne	r3, #0
 800bb44:	eba6 0807 	sub.w	r8, r6, r7
 800bb48:	608b      	str	r3, [r1, #8]
 800bb4a:	f1b8 0f00 	cmp.w	r8, #0
 800bb4e:	dd9c      	ble.n	800ba8a <__sflush_r+0x1a>
 800bb50:	4643      	mov	r3, r8
 800bb52:	463a      	mov	r2, r7
 800bb54:	6a21      	ldr	r1, [r4, #32]
 800bb56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb58:	4628      	mov	r0, r5
 800bb5a:	47b0      	blx	r6
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	dc06      	bgt.n	800bb6e <__sflush_r+0xfe>
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb66:	81a3      	strh	r3, [r4, #12]
 800bb68:	f04f 30ff 	mov.w	r0, #4294967295
 800bb6c:	e78e      	b.n	800ba8c <__sflush_r+0x1c>
 800bb6e:	4407      	add	r7, r0
 800bb70:	eba8 0800 	sub.w	r8, r8, r0
 800bb74:	e7e9      	b.n	800bb4a <__sflush_r+0xda>
 800bb76:	bf00      	nop
 800bb78:	20400001 	.word	0x20400001

0800bb7c <_fflush_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	690b      	ldr	r3, [r1, #16]
 800bb80:	4605      	mov	r5, r0
 800bb82:	460c      	mov	r4, r1
 800bb84:	b1db      	cbz	r3, 800bbbe <_fflush_r+0x42>
 800bb86:	b118      	cbz	r0, 800bb90 <_fflush_r+0x14>
 800bb88:	6983      	ldr	r3, [r0, #24]
 800bb8a:	b90b      	cbnz	r3, 800bb90 <_fflush_r+0x14>
 800bb8c:	f000 f860 	bl	800bc50 <__sinit>
 800bb90:	4b0c      	ldr	r3, [pc, #48]	; (800bbc4 <_fflush_r+0x48>)
 800bb92:	429c      	cmp	r4, r3
 800bb94:	d109      	bne.n	800bbaa <_fflush_r+0x2e>
 800bb96:	686c      	ldr	r4, [r5, #4]
 800bb98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb9c:	b17b      	cbz	r3, 800bbbe <_fflush_r+0x42>
 800bb9e:	4621      	mov	r1, r4
 800bba0:	4628      	mov	r0, r5
 800bba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bba6:	f7ff bf63 	b.w	800ba70 <__sflush_r>
 800bbaa:	4b07      	ldr	r3, [pc, #28]	; (800bbc8 <_fflush_r+0x4c>)
 800bbac:	429c      	cmp	r4, r3
 800bbae:	d101      	bne.n	800bbb4 <_fflush_r+0x38>
 800bbb0:	68ac      	ldr	r4, [r5, #8]
 800bbb2:	e7f1      	b.n	800bb98 <_fflush_r+0x1c>
 800bbb4:	4b05      	ldr	r3, [pc, #20]	; (800bbcc <_fflush_r+0x50>)
 800bbb6:	429c      	cmp	r4, r3
 800bbb8:	bf08      	it	eq
 800bbba:	68ec      	ldreq	r4, [r5, #12]
 800bbbc:	e7ec      	b.n	800bb98 <_fflush_r+0x1c>
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	bd38      	pop	{r3, r4, r5, pc}
 800bbc2:	bf00      	nop
 800bbc4:	0800cdd0 	.word	0x0800cdd0
 800bbc8:	0800cdf0 	.word	0x0800cdf0
 800bbcc:	0800cdb0 	.word	0x0800cdb0

0800bbd0 <std>:
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	b510      	push	{r4, lr}
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	e9c0 3300 	strd	r3, r3, [r0]
 800bbda:	6083      	str	r3, [r0, #8]
 800bbdc:	8181      	strh	r1, [r0, #12]
 800bbde:	6643      	str	r3, [r0, #100]	; 0x64
 800bbe0:	81c2      	strh	r2, [r0, #14]
 800bbe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbe6:	6183      	str	r3, [r0, #24]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	2208      	movs	r2, #8
 800bbec:	305c      	adds	r0, #92	; 0x5c
 800bbee:	f7fe faaa 	bl	800a146 <memset>
 800bbf2:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <std+0x38>)
 800bbf4:	6263      	str	r3, [r4, #36]	; 0x24
 800bbf6:	4b05      	ldr	r3, [pc, #20]	; (800bc0c <std+0x3c>)
 800bbf8:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbfa:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <std+0x40>)
 800bbfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbfe:	4b05      	ldr	r3, [pc, #20]	; (800bc14 <std+0x44>)
 800bc00:	6224      	str	r4, [r4, #32]
 800bc02:	6323      	str	r3, [r4, #48]	; 0x30
 800bc04:	bd10      	pop	{r4, pc}
 800bc06:	bf00      	nop
 800bc08:	0800c831 	.word	0x0800c831
 800bc0c:	0800c853 	.word	0x0800c853
 800bc10:	0800c88b 	.word	0x0800c88b
 800bc14:	0800c8af 	.word	0x0800c8af

0800bc18 <_cleanup_r>:
 800bc18:	4901      	ldr	r1, [pc, #4]	; (800bc20 <_cleanup_r+0x8>)
 800bc1a:	f000 b885 	b.w	800bd28 <_fwalk_reent>
 800bc1e:	bf00      	nop
 800bc20:	0800bb7d 	.word	0x0800bb7d

0800bc24 <__sfmoreglue>:
 800bc24:	b570      	push	{r4, r5, r6, lr}
 800bc26:	1e4a      	subs	r2, r1, #1
 800bc28:	2568      	movs	r5, #104	; 0x68
 800bc2a:	4355      	muls	r5, r2
 800bc2c:	460e      	mov	r6, r1
 800bc2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc32:	f000 fc53 	bl	800c4dc <_malloc_r>
 800bc36:	4604      	mov	r4, r0
 800bc38:	b140      	cbz	r0, 800bc4c <__sfmoreglue+0x28>
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	e9c0 1600 	strd	r1, r6, [r0]
 800bc40:	300c      	adds	r0, #12
 800bc42:	60a0      	str	r0, [r4, #8]
 800bc44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc48:	f7fe fa7d 	bl	800a146 <memset>
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}

0800bc50 <__sinit>:
 800bc50:	6983      	ldr	r3, [r0, #24]
 800bc52:	b510      	push	{r4, lr}
 800bc54:	4604      	mov	r4, r0
 800bc56:	bb33      	cbnz	r3, 800bca6 <__sinit+0x56>
 800bc58:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bc5c:	6503      	str	r3, [r0, #80]	; 0x50
 800bc5e:	4b12      	ldr	r3, [pc, #72]	; (800bca8 <__sinit+0x58>)
 800bc60:	4a12      	ldr	r2, [pc, #72]	; (800bcac <__sinit+0x5c>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6282      	str	r2, [r0, #40]	; 0x28
 800bc66:	4298      	cmp	r0, r3
 800bc68:	bf04      	itt	eq
 800bc6a:	2301      	moveq	r3, #1
 800bc6c:	6183      	streq	r3, [r0, #24]
 800bc6e:	f000 f81f 	bl	800bcb0 <__sfp>
 800bc72:	6060      	str	r0, [r4, #4]
 800bc74:	4620      	mov	r0, r4
 800bc76:	f000 f81b 	bl	800bcb0 <__sfp>
 800bc7a:	60a0      	str	r0, [r4, #8]
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f000 f817 	bl	800bcb0 <__sfp>
 800bc82:	2200      	movs	r2, #0
 800bc84:	60e0      	str	r0, [r4, #12]
 800bc86:	2104      	movs	r1, #4
 800bc88:	6860      	ldr	r0, [r4, #4]
 800bc8a:	f7ff ffa1 	bl	800bbd0 <std>
 800bc8e:	2201      	movs	r2, #1
 800bc90:	2109      	movs	r1, #9
 800bc92:	68a0      	ldr	r0, [r4, #8]
 800bc94:	f7ff ff9c 	bl	800bbd0 <std>
 800bc98:	2202      	movs	r2, #2
 800bc9a:	2112      	movs	r1, #18
 800bc9c:	68e0      	ldr	r0, [r4, #12]
 800bc9e:	f7ff ff97 	bl	800bbd0 <std>
 800bca2:	2301      	movs	r3, #1
 800bca4:	61a3      	str	r3, [r4, #24]
 800bca6:	bd10      	pop	{r4, pc}
 800bca8:	0800cd6c 	.word	0x0800cd6c
 800bcac:	0800bc19 	.word	0x0800bc19

0800bcb0 <__sfp>:
 800bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb2:	4b1b      	ldr	r3, [pc, #108]	; (800bd20 <__sfp+0x70>)
 800bcb4:	681e      	ldr	r6, [r3, #0]
 800bcb6:	69b3      	ldr	r3, [r6, #24]
 800bcb8:	4607      	mov	r7, r0
 800bcba:	b913      	cbnz	r3, 800bcc2 <__sfp+0x12>
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f7ff ffc7 	bl	800bc50 <__sinit>
 800bcc2:	3648      	adds	r6, #72	; 0x48
 800bcc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	d503      	bpl.n	800bcd4 <__sfp+0x24>
 800bccc:	6833      	ldr	r3, [r6, #0]
 800bcce:	b133      	cbz	r3, 800bcde <__sfp+0x2e>
 800bcd0:	6836      	ldr	r6, [r6, #0]
 800bcd2:	e7f7      	b.n	800bcc4 <__sfp+0x14>
 800bcd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcd8:	b16d      	cbz	r5, 800bcf6 <__sfp+0x46>
 800bcda:	3468      	adds	r4, #104	; 0x68
 800bcdc:	e7f4      	b.n	800bcc8 <__sfp+0x18>
 800bcde:	2104      	movs	r1, #4
 800bce0:	4638      	mov	r0, r7
 800bce2:	f7ff ff9f 	bl	800bc24 <__sfmoreglue>
 800bce6:	6030      	str	r0, [r6, #0]
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d1f1      	bne.n	800bcd0 <__sfp+0x20>
 800bcec:	230c      	movs	r3, #12
 800bcee:	603b      	str	r3, [r7, #0]
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcf6:	4b0b      	ldr	r3, [pc, #44]	; (800bd24 <__sfp+0x74>)
 800bcf8:	6665      	str	r5, [r4, #100]	; 0x64
 800bcfa:	e9c4 5500 	strd	r5, r5, [r4]
 800bcfe:	60a5      	str	r5, [r4, #8]
 800bd00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bd04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bd08:	2208      	movs	r2, #8
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd10:	f7fe fa19 	bl	800a146 <memset>
 800bd14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd1c:	e7e9      	b.n	800bcf2 <__sfp+0x42>
 800bd1e:	bf00      	nop
 800bd20:	0800cd6c 	.word	0x0800cd6c
 800bd24:	ffff0001 	.word	0xffff0001

0800bd28 <_fwalk_reent>:
 800bd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd2c:	4680      	mov	r8, r0
 800bd2e:	4689      	mov	r9, r1
 800bd30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd34:	2600      	movs	r6, #0
 800bd36:	b914      	cbnz	r4, 800bd3e <_fwalk_reent+0x16>
 800bd38:	4630      	mov	r0, r6
 800bd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bd42:	3f01      	subs	r7, #1
 800bd44:	d501      	bpl.n	800bd4a <_fwalk_reent+0x22>
 800bd46:	6824      	ldr	r4, [r4, #0]
 800bd48:	e7f5      	b.n	800bd36 <_fwalk_reent+0xe>
 800bd4a:	89ab      	ldrh	r3, [r5, #12]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d907      	bls.n	800bd60 <_fwalk_reent+0x38>
 800bd50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd54:	3301      	adds	r3, #1
 800bd56:	d003      	beq.n	800bd60 <_fwalk_reent+0x38>
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	47c8      	blx	r9
 800bd5e:	4306      	orrs	r6, r0
 800bd60:	3568      	adds	r5, #104	; 0x68
 800bd62:	e7ee      	b.n	800bd42 <_fwalk_reent+0x1a>

0800bd64 <_localeconv_r>:
 800bd64:	4b04      	ldr	r3, [pc, #16]	; (800bd78 <_localeconv_r+0x14>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6a18      	ldr	r0, [r3, #32]
 800bd6a:	4b04      	ldr	r3, [pc, #16]	; (800bd7c <_localeconv_r+0x18>)
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	bf08      	it	eq
 800bd70:	4618      	moveq	r0, r3
 800bd72:	30f0      	adds	r0, #240	; 0xf0
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	20000ffc 	.word	0x20000ffc
 800bd7c:	20001060 	.word	0x20001060

0800bd80 <__swhatbuf_r>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	460e      	mov	r6, r1
 800bd84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd88:	2900      	cmp	r1, #0
 800bd8a:	b096      	sub	sp, #88	; 0x58
 800bd8c:	4614      	mov	r4, r2
 800bd8e:	461d      	mov	r5, r3
 800bd90:	da07      	bge.n	800bda2 <__swhatbuf_r+0x22>
 800bd92:	2300      	movs	r3, #0
 800bd94:	602b      	str	r3, [r5, #0]
 800bd96:	89b3      	ldrh	r3, [r6, #12]
 800bd98:	061a      	lsls	r2, r3, #24
 800bd9a:	d410      	bmi.n	800bdbe <__swhatbuf_r+0x3e>
 800bd9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bda0:	e00e      	b.n	800bdc0 <__swhatbuf_r+0x40>
 800bda2:	466a      	mov	r2, sp
 800bda4:	f000 fdaa 	bl	800c8fc <_fstat_r>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	dbf2      	blt.n	800bd92 <__swhatbuf_r+0x12>
 800bdac:	9a01      	ldr	r2, [sp, #4]
 800bdae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bdb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bdb6:	425a      	negs	r2, r3
 800bdb8:	415a      	adcs	r2, r3
 800bdba:	602a      	str	r2, [r5, #0]
 800bdbc:	e7ee      	b.n	800bd9c <__swhatbuf_r+0x1c>
 800bdbe:	2340      	movs	r3, #64	; 0x40
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	6023      	str	r3, [r4, #0]
 800bdc4:	b016      	add	sp, #88	; 0x58
 800bdc6:	bd70      	pop	{r4, r5, r6, pc}

0800bdc8 <__smakebuf_r>:
 800bdc8:	898b      	ldrh	r3, [r1, #12]
 800bdca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdcc:	079d      	lsls	r5, r3, #30
 800bdce:	4606      	mov	r6, r0
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	d507      	bpl.n	800bde4 <__smakebuf_r+0x1c>
 800bdd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	6123      	str	r3, [r4, #16]
 800bddc:	2301      	movs	r3, #1
 800bdde:	6163      	str	r3, [r4, #20]
 800bde0:	b002      	add	sp, #8
 800bde2:	bd70      	pop	{r4, r5, r6, pc}
 800bde4:	ab01      	add	r3, sp, #4
 800bde6:	466a      	mov	r2, sp
 800bde8:	f7ff ffca 	bl	800bd80 <__swhatbuf_r>
 800bdec:	9900      	ldr	r1, [sp, #0]
 800bdee:	4605      	mov	r5, r0
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	f000 fb73 	bl	800c4dc <_malloc_r>
 800bdf6:	b948      	cbnz	r0, 800be0c <__smakebuf_r+0x44>
 800bdf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdfc:	059a      	lsls	r2, r3, #22
 800bdfe:	d4ef      	bmi.n	800bde0 <__smakebuf_r+0x18>
 800be00:	f023 0303 	bic.w	r3, r3, #3
 800be04:	f043 0302 	orr.w	r3, r3, #2
 800be08:	81a3      	strh	r3, [r4, #12]
 800be0a:	e7e3      	b.n	800bdd4 <__smakebuf_r+0xc>
 800be0c:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <__smakebuf_r+0x7c>)
 800be0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	6020      	str	r0, [r4, #0]
 800be14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be18:	81a3      	strh	r3, [r4, #12]
 800be1a:	9b00      	ldr	r3, [sp, #0]
 800be1c:	6163      	str	r3, [r4, #20]
 800be1e:	9b01      	ldr	r3, [sp, #4]
 800be20:	6120      	str	r0, [r4, #16]
 800be22:	b15b      	cbz	r3, 800be3c <__smakebuf_r+0x74>
 800be24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be28:	4630      	mov	r0, r6
 800be2a:	f000 fd79 	bl	800c920 <_isatty_r>
 800be2e:	b128      	cbz	r0, 800be3c <__smakebuf_r+0x74>
 800be30:	89a3      	ldrh	r3, [r4, #12]
 800be32:	f023 0303 	bic.w	r3, r3, #3
 800be36:	f043 0301 	orr.w	r3, r3, #1
 800be3a:	81a3      	strh	r3, [r4, #12]
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	431d      	orrs	r5, r3
 800be40:	81a5      	strh	r5, [r4, #12]
 800be42:	e7cd      	b.n	800bde0 <__smakebuf_r+0x18>
 800be44:	0800bc19 	.word	0x0800bc19

0800be48 <malloc>:
 800be48:	4b02      	ldr	r3, [pc, #8]	; (800be54 <malloc+0xc>)
 800be4a:	4601      	mov	r1, r0
 800be4c:	6818      	ldr	r0, [r3, #0]
 800be4e:	f000 bb45 	b.w	800c4dc <_malloc_r>
 800be52:	bf00      	nop
 800be54:	20000ffc 	.word	0x20000ffc

0800be58 <memcpy>:
 800be58:	b510      	push	{r4, lr}
 800be5a:	1e43      	subs	r3, r0, #1
 800be5c:	440a      	add	r2, r1
 800be5e:	4291      	cmp	r1, r2
 800be60:	d100      	bne.n	800be64 <memcpy+0xc>
 800be62:	bd10      	pop	{r4, pc}
 800be64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be6c:	e7f7      	b.n	800be5e <memcpy+0x6>

0800be6e <_Balloc>:
 800be6e:	b570      	push	{r4, r5, r6, lr}
 800be70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be72:	4604      	mov	r4, r0
 800be74:	460e      	mov	r6, r1
 800be76:	b93d      	cbnz	r5, 800be88 <_Balloc+0x1a>
 800be78:	2010      	movs	r0, #16
 800be7a:	f7ff ffe5 	bl	800be48 <malloc>
 800be7e:	6260      	str	r0, [r4, #36]	; 0x24
 800be80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be84:	6005      	str	r5, [r0, #0]
 800be86:	60c5      	str	r5, [r0, #12]
 800be88:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800be8a:	68eb      	ldr	r3, [r5, #12]
 800be8c:	b183      	cbz	r3, 800beb0 <_Balloc+0x42>
 800be8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800be96:	b9b8      	cbnz	r0, 800bec8 <_Balloc+0x5a>
 800be98:	2101      	movs	r1, #1
 800be9a:	fa01 f506 	lsl.w	r5, r1, r6
 800be9e:	1d6a      	adds	r2, r5, #5
 800bea0:	0092      	lsls	r2, r2, #2
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 fabe 	bl	800c424 <_calloc_r>
 800bea8:	b160      	cbz	r0, 800bec4 <_Balloc+0x56>
 800beaa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800beae:	e00e      	b.n	800bece <_Balloc+0x60>
 800beb0:	2221      	movs	r2, #33	; 0x21
 800beb2:	2104      	movs	r1, #4
 800beb4:	4620      	mov	r0, r4
 800beb6:	f000 fab5 	bl	800c424 <_calloc_r>
 800beba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bebc:	60e8      	str	r0, [r5, #12]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e4      	bne.n	800be8e <_Balloc+0x20>
 800bec4:	2000      	movs	r0, #0
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	6802      	ldr	r2, [r0, #0]
 800beca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bece:	2300      	movs	r3, #0
 800bed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bed4:	e7f7      	b.n	800bec6 <_Balloc+0x58>

0800bed6 <_Bfree>:
 800bed6:	b570      	push	{r4, r5, r6, lr}
 800bed8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800beda:	4606      	mov	r6, r0
 800bedc:	460d      	mov	r5, r1
 800bede:	b93c      	cbnz	r4, 800bef0 <_Bfree+0x1a>
 800bee0:	2010      	movs	r0, #16
 800bee2:	f7ff ffb1 	bl	800be48 <malloc>
 800bee6:	6270      	str	r0, [r6, #36]	; 0x24
 800bee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800beec:	6004      	str	r4, [r0, #0]
 800beee:	60c4      	str	r4, [r0, #12]
 800bef0:	b13d      	cbz	r5, 800bf02 <_Bfree+0x2c>
 800bef2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bef4:	686a      	ldr	r2, [r5, #4]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800befc:	6029      	str	r1, [r5, #0]
 800befe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bf02:	bd70      	pop	{r4, r5, r6, pc}

0800bf04 <__multadd>:
 800bf04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf08:	690d      	ldr	r5, [r1, #16]
 800bf0a:	461f      	mov	r7, r3
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	460c      	mov	r4, r1
 800bf10:	f101 0c14 	add.w	ip, r1, #20
 800bf14:	2300      	movs	r3, #0
 800bf16:	f8dc 0000 	ldr.w	r0, [ip]
 800bf1a:	b281      	uxth	r1, r0
 800bf1c:	fb02 7101 	mla	r1, r2, r1, r7
 800bf20:	0c0f      	lsrs	r7, r1, #16
 800bf22:	0c00      	lsrs	r0, r0, #16
 800bf24:	fb02 7000 	mla	r0, r2, r0, r7
 800bf28:	b289      	uxth	r1, r1
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bf30:	429d      	cmp	r5, r3
 800bf32:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bf36:	f84c 1b04 	str.w	r1, [ip], #4
 800bf3a:	dcec      	bgt.n	800bf16 <__multadd+0x12>
 800bf3c:	b1d7      	cbz	r7, 800bf74 <__multadd+0x70>
 800bf3e:	68a3      	ldr	r3, [r4, #8]
 800bf40:	42ab      	cmp	r3, r5
 800bf42:	dc12      	bgt.n	800bf6a <__multadd+0x66>
 800bf44:	6861      	ldr	r1, [r4, #4]
 800bf46:	4630      	mov	r0, r6
 800bf48:	3101      	adds	r1, #1
 800bf4a:	f7ff ff90 	bl	800be6e <_Balloc>
 800bf4e:	6922      	ldr	r2, [r4, #16]
 800bf50:	3202      	adds	r2, #2
 800bf52:	f104 010c 	add.w	r1, r4, #12
 800bf56:	4680      	mov	r8, r0
 800bf58:	0092      	lsls	r2, r2, #2
 800bf5a:	300c      	adds	r0, #12
 800bf5c:	f7ff ff7c 	bl	800be58 <memcpy>
 800bf60:	4621      	mov	r1, r4
 800bf62:	4630      	mov	r0, r6
 800bf64:	f7ff ffb7 	bl	800bed6 <_Bfree>
 800bf68:	4644      	mov	r4, r8
 800bf6a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf6e:	3501      	adds	r5, #1
 800bf70:	615f      	str	r7, [r3, #20]
 800bf72:	6125      	str	r5, [r4, #16]
 800bf74:	4620      	mov	r0, r4
 800bf76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf7a <__hi0bits>:
 800bf7a:	0c02      	lsrs	r2, r0, #16
 800bf7c:	0412      	lsls	r2, r2, #16
 800bf7e:	4603      	mov	r3, r0
 800bf80:	b9b2      	cbnz	r2, 800bfb0 <__hi0bits+0x36>
 800bf82:	0403      	lsls	r3, r0, #16
 800bf84:	2010      	movs	r0, #16
 800bf86:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bf8a:	bf04      	itt	eq
 800bf8c:	021b      	lsleq	r3, r3, #8
 800bf8e:	3008      	addeq	r0, #8
 800bf90:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bf94:	bf04      	itt	eq
 800bf96:	011b      	lsleq	r3, r3, #4
 800bf98:	3004      	addeq	r0, #4
 800bf9a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bf9e:	bf04      	itt	eq
 800bfa0:	009b      	lsleq	r3, r3, #2
 800bfa2:	3002      	addeq	r0, #2
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	db06      	blt.n	800bfb6 <__hi0bits+0x3c>
 800bfa8:	005b      	lsls	r3, r3, #1
 800bfaa:	d503      	bpl.n	800bfb4 <__hi0bits+0x3a>
 800bfac:	3001      	adds	r0, #1
 800bfae:	4770      	bx	lr
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	e7e8      	b.n	800bf86 <__hi0bits+0xc>
 800bfb4:	2020      	movs	r0, #32
 800bfb6:	4770      	bx	lr

0800bfb8 <__lo0bits>:
 800bfb8:	6803      	ldr	r3, [r0, #0]
 800bfba:	f013 0207 	ands.w	r2, r3, #7
 800bfbe:	4601      	mov	r1, r0
 800bfc0:	d00b      	beq.n	800bfda <__lo0bits+0x22>
 800bfc2:	07da      	lsls	r2, r3, #31
 800bfc4:	d423      	bmi.n	800c00e <__lo0bits+0x56>
 800bfc6:	0798      	lsls	r0, r3, #30
 800bfc8:	bf49      	itett	mi
 800bfca:	085b      	lsrmi	r3, r3, #1
 800bfcc:	089b      	lsrpl	r3, r3, #2
 800bfce:	2001      	movmi	r0, #1
 800bfd0:	600b      	strmi	r3, [r1, #0]
 800bfd2:	bf5c      	itt	pl
 800bfd4:	600b      	strpl	r3, [r1, #0]
 800bfd6:	2002      	movpl	r0, #2
 800bfd8:	4770      	bx	lr
 800bfda:	b298      	uxth	r0, r3
 800bfdc:	b9a8      	cbnz	r0, 800c00a <__lo0bits+0x52>
 800bfde:	0c1b      	lsrs	r3, r3, #16
 800bfe0:	2010      	movs	r0, #16
 800bfe2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bfe6:	bf04      	itt	eq
 800bfe8:	0a1b      	lsreq	r3, r3, #8
 800bfea:	3008      	addeq	r0, #8
 800bfec:	071a      	lsls	r2, r3, #28
 800bfee:	bf04      	itt	eq
 800bff0:	091b      	lsreq	r3, r3, #4
 800bff2:	3004      	addeq	r0, #4
 800bff4:	079a      	lsls	r2, r3, #30
 800bff6:	bf04      	itt	eq
 800bff8:	089b      	lsreq	r3, r3, #2
 800bffa:	3002      	addeq	r0, #2
 800bffc:	07da      	lsls	r2, r3, #31
 800bffe:	d402      	bmi.n	800c006 <__lo0bits+0x4e>
 800c000:	085b      	lsrs	r3, r3, #1
 800c002:	d006      	beq.n	800c012 <__lo0bits+0x5a>
 800c004:	3001      	adds	r0, #1
 800c006:	600b      	str	r3, [r1, #0]
 800c008:	4770      	bx	lr
 800c00a:	4610      	mov	r0, r2
 800c00c:	e7e9      	b.n	800bfe2 <__lo0bits+0x2a>
 800c00e:	2000      	movs	r0, #0
 800c010:	4770      	bx	lr
 800c012:	2020      	movs	r0, #32
 800c014:	4770      	bx	lr

0800c016 <__i2b>:
 800c016:	b510      	push	{r4, lr}
 800c018:	460c      	mov	r4, r1
 800c01a:	2101      	movs	r1, #1
 800c01c:	f7ff ff27 	bl	800be6e <_Balloc>
 800c020:	2201      	movs	r2, #1
 800c022:	6144      	str	r4, [r0, #20]
 800c024:	6102      	str	r2, [r0, #16]
 800c026:	bd10      	pop	{r4, pc}

0800c028 <__multiply>:
 800c028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02c:	4614      	mov	r4, r2
 800c02e:	690a      	ldr	r2, [r1, #16]
 800c030:	6923      	ldr	r3, [r4, #16]
 800c032:	429a      	cmp	r2, r3
 800c034:	bfb8      	it	lt
 800c036:	460b      	movlt	r3, r1
 800c038:	4688      	mov	r8, r1
 800c03a:	bfbc      	itt	lt
 800c03c:	46a0      	movlt	r8, r4
 800c03e:	461c      	movlt	r4, r3
 800c040:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c044:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c048:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c04c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c050:	eb07 0609 	add.w	r6, r7, r9
 800c054:	42b3      	cmp	r3, r6
 800c056:	bfb8      	it	lt
 800c058:	3101      	addlt	r1, #1
 800c05a:	f7ff ff08 	bl	800be6e <_Balloc>
 800c05e:	f100 0514 	add.w	r5, r0, #20
 800c062:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c066:	462b      	mov	r3, r5
 800c068:	2200      	movs	r2, #0
 800c06a:	4573      	cmp	r3, lr
 800c06c:	d316      	bcc.n	800c09c <__multiply+0x74>
 800c06e:	f104 0214 	add.w	r2, r4, #20
 800c072:	f108 0114 	add.w	r1, r8, #20
 800c076:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c07a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	9b00      	ldr	r3, [sp, #0]
 800c082:	9201      	str	r2, [sp, #4]
 800c084:	4293      	cmp	r3, r2
 800c086:	d80c      	bhi.n	800c0a2 <__multiply+0x7a>
 800c088:	2e00      	cmp	r6, #0
 800c08a:	dd03      	ble.n	800c094 <__multiply+0x6c>
 800c08c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c090:	2b00      	cmp	r3, #0
 800c092:	d05d      	beq.n	800c150 <__multiply+0x128>
 800c094:	6106      	str	r6, [r0, #16]
 800c096:	b003      	add	sp, #12
 800c098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09c:	f843 2b04 	str.w	r2, [r3], #4
 800c0a0:	e7e3      	b.n	800c06a <__multiply+0x42>
 800c0a2:	f8b2 b000 	ldrh.w	fp, [r2]
 800c0a6:	f1bb 0f00 	cmp.w	fp, #0
 800c0aa:	d023      	beq.n	800c0f4 <__multiply+0xcc>
 800c0ac:	4689      	mov	r9, r1
 800c0ae:	46ac      	mov	ip, r5
 800c0b0:	f04f 0800 	mov.w	r8, #0
 800c0b4:	f859 4b04 	ldr.w	r4, [r9], #4
 800c0b8:	f8dc a000 	ldr.w	sl, [ip]
 800c0bc:	b2a3      	uxth	r3, r4
 800c0be:	fa1f fa8a 	uxth.w	sl, sl
 800c0c2:	fb0b a303 	mla	r3, fp, r3, sl
 800c0c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c0ca:	f8dc 4000 	ldr.w	r4, [ip]
 800c0ce:	4443      	add	r3, r8
 800c0d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c0d4:	fb0b 840a 	mla	r4, fp, sl, r8
 800c0d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c0dc:	46e2      	mov	sl, ip
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c0e4:	454f      	cmp	r7, r9
 800c0e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c0ea:	f84a 3b04 	str.w	r3, [sl], #4
 800c0ee:	d82b      	bhi.n	800c148 <__multiply+0x120>
 800c0f0:	f8cc 8004 	str.w	r8, [ip, #4]
 800c0f4:	9b01      	ldr	r3, [sp, #4]
 800c0f6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c0fa:	3204      	adds	r2, #4
 800c0fc:	f1ba 0f00 	cmp.w	sl, #0
 800c100:	d020      	beq.n	800c144 <__multiply+0x11c>
 800c102:	682b      	ldr	r3, [r5, #0]
 800c104:	4689      	mov	r9, r1
 800c106:	46a8      	mov	r8, r5
 800c108:	f04f 0b00 	mov.w	fp, #0
 800c10c:	f8b9 c000 	ldrh.w	ip, [r9]
 800c110:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c114:	fb0a 440c 	mla	r4, sl, ip, r4
 800c118:	445c      	add	r4, fp
 800c11a:	46c4      	mov	ip, r8
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c122:	f84c 3b04 	str.w	r3, [ip], #4
 800c126:	f859 3b04 	ldr.w	r3, [r9], #4
 800c12a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c12e:	0c1b      	lsrs	r3, r3, #16
 800c130:	fb0a b303 	mla	r3, sl, r3, fp
 800c134:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c138:	454f      	cmp	r7, r9
 800c13a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c13e:	d805      	bhi.n	800c14c <__multiply+0x124>
 800c140:	f8c8 3004 	str.w	r3, [r8, #4]
 800c144:	3504      	adds	r5, #4
 800c146:	e79b      	b.n	800c080 <__multiply+0x58>
 800c148:	46d4      	mov	ip, sl
 800c14a:	e7b3      	b.n	800c0b4 <__multiply+0x8c>
 800c14c:	46e0      	mov	r8, ip
 800c14e:	e7dd      	b.n	800c10c <__multiply+0xe4>
 800c150:	3e01      	subs	r6, #1
 800c152:	e799      	b.n	800c088 <__multiply+0x60>

0800c154 <__pow5mult>:
 800c154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c158:	4615      	mov	r5, r2
 800c15a:	f012 0203 	ands.w	r2, r2, #3
 800c15e:	4606      	mov	r6, r0
 800c160:	460f      	mov	r7, r1
 800c162:	d007      	beq.n	800c174 <__pow5mult+0x20>
 800c164:	3a01      	subs	r2, #1
 800c166:	4c21      	ldr	r4, [pc, #132]	; (800c1ec <__pow5mult+0x98>)
 800c168:	2300      	movs	r3, #0
 800c16a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c16e:	f7ff fec9 	bl	800bf04 <__multadd>
 800c172:	4607      	mov	r7, r0
 800c174:	10ad      	asrs	r5, r5, #2
 800c176:	d035      	beq.n	800c1e4 <__pow5mult+0x90>
 800c178:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c17a:	b93c      	cbnz	r4, 800c18c <__pow5mult+0x38>
 800c17c:	2010      	movs	r0, #16
 800c17e:	f7ff fe63 	bl	800be48 <malloc>
 800c182:	6270      	str	r0, [r6, #36]	; 0x24
 800c184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c188:	6004      	str	r4, [r0, #0]
 800c18a:	60c4      	str	r4, [r0, #12]
 800c18c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c194:	b94c      	cbnz	r4, 800c1aa <__pow5mult+0x56>
 800c196:	f240 2171 	movw	r1, #625	; 0x271
 800c19a:	4630      	mov	r0, r6
 800c19c:	f7ff ff3b 	bl	800c016 <__i2b>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	6003      	str	r3, [r0, #0]
 800c1aa:	f04f 0800 	mov.w	r8, #0
 800c1ae:	07eb      	lsls	r3, r5, #31
 800c1b0:	d50a      	bpl.n	800c1c8 <__pow5mult+0x74>
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f7ff ff36 	bl	800c028 <__multiply>
 800c1bc:	4639      	mov	r1, r7
 800c1be:	4681      	mov	r9, r0
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	f7ff fe88 	bl	800bed6 <_Bfree>
 800c1c6:	464f      	mov	r7, r9
 800c1c8:	106d      	asrs	r5, r5, #1
 800c1ca:	d00b      	beq.n	800c1e4 <__pow5mult+0x90>
 800c1cc:	6820      	ldr	r0, [r4, #0]
 800c1ce:	b938      	cbnz	r0, 800c1e0 <__pow5mult+0x8c>
 800c1d0:	4622      	mov	r2, r4
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f7ff ff27 	bl	800c028 <__multiply>
 800c1da:	6020      	str	r0, [r4, #0]
 800c1dc:	f8c0 8000 	str.w	r8, [r0]
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	e7e4      	b.n	800c1ae <__pow5mult+0x5a>
 800c1e4:	4638      	mov	r0, r7
 800c1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ea:	bf00      	nop
 800c1ec:	0800cf00 	.word	0x0800cf00

0800c1f0 <__lshift>:
 800c1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1fa:	6923      	ldr	r3, [r4, #16]
 800c1fc:	6849      	ldr	r1, [r1, #4]
 800c1fe:	eb0a 0903 	add.w	r9, sl, r3
 800c202:	68a3      	ldr	r3, [r4, #8]
 800c204:	4607      	mov	r7, r0
 800c206:	4616      	mov	r6, r2
 800c208:	f109 0501 	add.w	r5, r9, #1
 800c20c:	42ab      	cmp	r3, r5
 800c20e:	db32      	blt.n	800c276 <__lshift+0x86>
 800c210:	4638      	mov	r0, r7
 800c212:	f7ff fe2c 	bl	800be6e <_Balloc>
 800c216:	2300      	movs	r3, #0
 800c218:	4680      	mov	r8, r0
 800c21a:	f100 0114 	add.w	r1, r0, #20
 800c21e:	461a      	mov	r2, r3
 800c220:	4553      	cmp	r3, sl
 800c222:	db2b      	blt.n	800c27c <__lshift+0x8c>
 800c224:	6920      	ldr	r0, [r4, #16]
 800c226:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c22a:	f104 0314 	add.w	r3, r4, #20
 800c22e:	f016 021f 	ands.w	r2, r6, #31
 800c232:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c236:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c23a:	d025      	beq.n	800c288 <__lshift+0x98>
 800c23c:	f1c2 0e20 	rsb	lr, r2, #32
 800c240:	2000      	movs	r0, #0
 800c242:	681e      	ldr	r6, [r3, #0]
 800c244:	468a      	mov	sl, r1
 800c246:	4096      	lsls	r6, r2
 800c248:	4330      	orrs	r0, r6
 800c24a:	f84a 0b04 	str.w	r0, [sl], #4
 800c24e:	f853 0b04 	ldr.w	r0, [r3], #4
 800c252:	459c      	cmp	ip, r3
 800c254:	fa20 f00e 	lsr.w	r0, r0, lr
 800c258:	d814      	bhi.n	800c284 <__lshift+0x94>
 800c25a:	6048      	str	r0, [r1, #4]
 800c25c:	b108      	cbz	r0, 800c262 <__lshift+0x72>
 800c25e:	f109 0502 	add.w	r5, r9, #2
 800c262:	3d01      	subs	r5, #1
 800c264:	4638      	mov	r0, r7
 800c266:	f8c8 5010 	str.w	r5, [r8, #16]
 800c26a:	4621      	mov	r1, r4
 800c26c:	f7ff fe33 	bl	800bed6 <_Bfree>
 800c270:	4640      	mov	r0, r8
 800c272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c276:	3101      	adds	r1, #1
 800c278:	005b      	lsls	r3, r3, #1
 800c27a:	e7c7      	b.n	800c20c <__lshift+0x1c>
 800c27c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c280:	3301      	adds	r3, #1
 800c282:	e7cd      	b.n	800c220 <__lshift+0x30>
 800c284:	4651      	mov	r1, sl
 800c286:	e7dc      	b.n	800c242 <__lshift+0x52>
 800c288:	3904      	subs	r1, #4
 800c28a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c28e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c292:	459c      	cmp	ip, r3
 800c294:	d8f9      	bhi.n	800c28a <__lshift+0x9a>
 800c296:	e7e4      	b.n	800c262 <__lshift+0x72>

0800c298 <__mcmp>:
 800c298:	6903      	ldr	r3, [r0, #16]
 800c29a:	690a      	ldr	r2, [r1, #16]
 800c29c:	1a9b      	subs	r3, r3, r2
 800c29e:	b530      	push	{r4, r5, lr}
 800c2a0:	d10c      	bne.n	800c2bc <__mcmp+0x24>
 800c2a2:	0092      	lsls	r2, r2, #2
 800c2a4:	3014      	adds	r0, #20
 800c2a6:	3114      	adds	r1, #20
 800c2a8:	1884      	adds	r4, r0, r2
 800c2aa:	4411      	add	r1, r2
 800c2ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c2b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c2b4:	4295      	cmp	r5, r2
 800c2b6:	d003      	beq.n	800c2c0 <__mcmp+0x28>
 800c2b8:	d305      	bcc.n	800c2c6 <__mcmp+0x2e>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	4618      	mov	r0, r3
 800c2be:	bd30      	pop	{r4, r5, pc}
 800c2c0:	42a0      	cmp	r0, r4
 800c2c2:	d3f3      	bcc.n	800c2ac <__mcmp+0x14>
 800c2c4:	e7fa      	b.n	800c2bc <__mcmp+0x24>
 800c2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ca:	e7f7      	b.n	800c2bc <__mcmp+0x24>

0800c2cc <__mdiff>:
 800c2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	4607      	mov	r7, r0
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	4614      	mov	r4, r2
 800c2da:	f7ff ffdd 	bl	800c298 <__mcmp>
 800c2de:	1e06      	subs	r6, r0, #0
 800c2e0:	d108      	bne.n	800c2f4 <__mdiff+0x28>
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	4638      	mov	r0, r7
 800c2e6:	f7ff fdc2 	bl	800be6e <_Balloc>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2f4:	bfa4      	itt	ge
 800c2f6:	4623      	movge	r3, r4
 800c2f8:	462c      	movge	r4, r5
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	6861      	ldr	r1, [r4, #4]
 800c2fe:	bfa6      	itte	ge
 800c300:	461d      	movge	r5, r3
 800c302:	2600      	movge	r6, #0
 800c304:	2601      	movlt	r6, #1
 800c306:	f7ff fdb2 	bl	800be6e <_Balloc>
 800c30a:	692b      	ldr	r3, [r5, #16]
 800c30c:	60c6      	str	r6, [r0, #12]
 800c30e:	6926      	ldr	r6, [r4, #16]
 800c310:	f105 0914 	add.w	r9, r5, #20
 800c314:	f104 0214 	add.w	r2, r4, #20
 800c318:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c31c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c320:	f100 0514 	add.w	r5, r0, #20
 800c324:	f04f 0e00 	mov.w	lr, #0
 800c328:	f852 ab04 	ldr.w	sl, [r2], #4
 800c32c:	f859 4b04 	ldr.w	r4, [r9], #4
 800c330:	fa1e f18a 	uxtah	r1, lr, sl
 800c334:	b2a3      	uxth	r3, r4
 800c336:	1ac9      	subs	r1, r1, r3
 800c338:	0c23      	lsrs	r3, r4, #16
 800c33a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c33e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c342:	b289      	uxth	r1, r1
 800c344:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c348:	45c8      	cmp	r8, r9
 800c34a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c34e:	4694      	mov	ip, r2
 800c350:	f845 3b04 	str.w	r3, [r5], #4
 800c354:	d8e8      	bhi.n	800c328 <__mdiff+0x5c>
 800c356:	45bc      	cmp	ip, r7
 800c358:	d304      	bcc.n	800c364 <__mdiff+0x98>
 800c35a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c35e:	b183      	cbz	r3, 800c382 <__mdiff+0xb6>
 800c360:	6106      	str	r6, [r0, #16]
 800c362:	e7c5      	b.n	800c2f0 <__mdiff+0x24>
 800c364:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c368:	fa1e f381 	uxtah	r3, lr, r1
 800c36c:	141a      	asrs	r2, r3, #16
 800c36e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c372:	b29b      	uxth	r3, r3
 800c374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c378:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c37c:	f845 3b04 	str.w	r3, [r5], #4
 800c380:	e7e9      	b.n	800c356 <__mdiff+0x8a>
 800c382:	3e01      	subs	r6, #1
 800c384:	e7e9      	b.n	800c35a <__mdiff+0x8e>

0800c386 <__d2b>:
 800c386:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c38a:	460e      	mov	r6, r1
 800c38c:	2101      	movs	r1, #1
 800c38e:	ec59 8b10 	vmov	r8, r9, d0
 800c392:	4615      	mov	r5, r2
 800c394:	f7ff fd6b 	bl	800be6e <_Balloc>
 800c398:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c39c:	4607      	mov	r7, r0
 800c39e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3a2:	bb34      	cbnz	r4, 800c3f2 <__d2b+0x6c>
 800c3a4:	9301      	str	r3, [sp, #4]
 800c3a6:	f1b8 0300 	subs.w	r3, r8, #0
 800c3aa:	d027      	beq.n	800c3fc <__d2b+0x76>
 800c3ac:	a802      	add	r0, sp, #8
 800c3ae:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c3b2:	f7ff fe01 	bl	800bfb8 <__lo0bits>
 800c3b6:	9900      	ldr	r1, [sp, #0]
 800c3b8:	b1f0      	cbz	r0, 800c3f8 <__d2b+0x72>
 800c3ba:	9a01      	ldr	r2, [sp, #4]
 800c3bc:	f1c0 0320 	rsb	r3, r0, #32
 800c3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c4:	430b      	orrs	r3, r1
 800c3c6:	40c2      	lsrs	r2, r0
 800c3c8:	617b      	str	r3, [r7, #20]
 800c3ca:	9201      	str	r2, [sp, #4]
 800c3cc:	9b01      	ldr	r3, [sp, #4]
 800c3ce:	61bb      	str	r3, [r7, #24]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	bf14      	ite	ne
 800c3d4:	2102      	movne	r1, #2
 800c3d6:	2101      	moveq	r1, #1
 800c3d8:	6139      	str	r1, [r7, #16]
 800c3da:	b1c4      	cbz	r4, 800c40e <__d2b+0x88>
 800c3dc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c3e0:	4404      	add	r4, r0
 800c3e2:	6034      	str	r4, [r6, #0]
 800c3e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3e8:	6028      	str	r0, [r5, #0]
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	b003      	add	sp, #12
 800c3ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3f6:	e7d5      	b.n	800c3a4 <__d2b+0x1e>
 800c3f8:	6179      	str	r1, [r7, #20]
 800c3fa:	e7e7      	b.n	800c3cc <__d2b+0x46>
 800c3fc:	a801      	add	r0, sp, #4
 800c3fe:	f7ff fddb 	bl	800bfb8 <__lo0bits>
 800c402:	9b01      	ldr	r3, [sp, #4]
 800c404:	617b      	str	r3, [r7, #20]
 800c406:	2101      	movs	r1, #1
 800c408:	6139      	str	r1, [r7, #16]
 800c40a:	3020      	adds	r0, #32
 800c40c:	e7e5      	b.n	800c3da <__d2b+0x54>
 800c40e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c412:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c416:	6030      	str	r0, [r6, #0]
 800c418:	6918      	ldr	r0, [r3, #16]
 800c41a:	f7ff fdae 	bl	800bf7a <__hi0bits>
 800c41e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c422:	e7e1      	b.n	800c3e8 <__d2b+0x62>

0800c424 <_calloc_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	fb02 f401 	mul.w	r4, r2, r1
 800c42a:	4621      	mov	r1, r4
 800c42c:	f000 f856 	bl	800c4dc <_malloc_r>
 800c430:	4605      	mov	r5, r0
 800c432:	b118      	cbz	r0, 800c43c <_calloc_r+0x18>
 800c434:	4622      	mov	r2, r4
 800c436:	2100      	movs	r1, #0
 800c438:	f7fd fe85 	bl	800a146 <memset>
 800c43c:	4628      	mov	r0, r5
 800c43e:	bd38      	pop	{r3, r4, r5, pc}

0800c440 <_free_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4605      	mov	r5, r0
 800c444:	2900      	cmp	r1, #0
 800c446:	d045      	beq.n	800c4d4 <_free_r+0x94>
 800c448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c44c:	1f0c      	subs	r4, r1, #4
 800c44e:	2b00      	cmp	r3, #0
 800c450:	bfb8      	it	lt
 800c452:	18e4      	addlt	r4, r4, r3
 800c454:	f000 fa98 	bl	800c988 <__malloc_lock>
 800c458:	4a1f      	ldr	r2, [pc, #124]	; (800c4d8 <_free_r+0x98>)
 800c45a:	6813      	ldr	r3, [r2, #0]
 800c45c:	4610      	mov	r0, r2
 800c45e:	b933      	cbnz	r3, 800c46e <_free_r+0x2e>
 800c460:	6063      	str	r3, [r4, #4]
 800c462:	6014      	str	r4, [r2, #0]
 800c464:	4628      	mov	r0, r5
 800c466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c46a:	f000 ba8e 	b.w	800c98a <__malloc_unlock>
 800c46e:	42a3      	cmp	r3, r4
 800c470:	d90c      	bls.n	800c48c <_free_r+0x4c>
 800c472:	6821      	ldr	r1, [r4, #0]
 800c474:	1862      	adds	r2, r4, r1
 800c476:	4293      	cmp	r3, r2
 800c478:	bf04      	itt	eq
 800c47a:	681a      	ldreq	r2, [r3, #0]
 800c47c:	685b      	ldreq	r3, [r3, #4]
 800c47e:	6063      	str	r3, [r4, #4]
 800c480:	bf04      	itt	eq
 800c482:	1852      	addeq	r2, r2, r1
 800c484:	6022      	streq	r2, [r4, #0]
 800c486:	6004      	str	r4, [r0, #0]
 800c488:	e7ec      	b.n	800c464 <_free_r+0x24>
 800c48a:	4613      	mov	r3, r2
 800c48c:	685a      	ldr	r2, [r3, #4]
 800c48e:	b10a      	cbz	r2, 800c494 <_free_r+0x54>
 800c490:	42a2      	cmp	r2, r4
 800c492:	d9fa      	bls.n	800c48a <_free_r+0x4a>
 800c494:	6819      	ldr	r1, [r3, #0]
 800c496:	1858      	adds	r0, r3, r1
 800c498:	42a0      	cmp	r0, r4
 800c49a:	d10b      	bne.n	800c4b4 <_free_r+0x74>
 800c49c:	6820      	ldr	r0, [r4, #0]
 800c49e:	4401      	add	r1, r0
 800c4a0:	1858      	adds	r0, r3, r1
 800c4a2:	4282      	cmp	r2, r0
 800c4a4:	6019      	str	r1, [r3, #0]
 800c4a6:	d1dd      	bne.n	800c464 <_free_r+0x24>
 800c4a8:	6810      	ldr	r0, [r2, #0]
 800c4aa:	6852      	ldr	r2, [r2, #4]
 800c4ac:	605a      	str	r2, [r3, #4]
 800c4ae:	4401      	add	r1, r0
 800c4b0:	6019      	str	r1, [r3, #0]
 800c4b2:	e7d7      	b.n	800c464 <_free_r+0x24>
 800c4b4:	d902      	bls.n	800c4bc <_free_r+0x7c>
 800c4b6:	230c      	movs	r3, #12
 800c4b8:	602b      	str	r3, [r5, #0]
 800c4ba:	e7d3      	b.n	800c464 <_free_r+0x24>
 800c4bc:	6820      	ldr	r0, [r4, #0]
 800c4be:	1821      	adds	r1, r4, r0
 800c4c0:	428a      	cmp	r2, r1
 800c4c2:	bf04      	itt	eq
 800c4c4:	6811      	ldreq	r1, [r2, #0]
 800c4c6:	6852      	ldreq	r2, [r2, #4]
 800c4c8:	6062      	str	r2, [r4, #4]
 800c4ca:	bf04      	itt	eq
 800c4cc:	1809      	addeq	r1, r1, r0
 800c4ce:	6021      	streq	r1, [r4, #0]
 800c4d0:	605c      	str	r4, [r3, #4]
 800c4d2:	e7c7      	b.n	800c464 <_free_r+0x24>
 800c4d4:	bd38      	pop	{r3, r4, r5, pc}
 800c4d6:	bf00      	nop
 800c4d8:	200012c4 	.word	0x200012c4

0800c4dc <_malloc_r>:
 800c4dc:	b570      	push	{r4, r5, r6, lr}
 800c4de:	1ccd      	adds	r5, r1, #3
 800c4e0:	f025 0503 	bic.w	r5, r5, #3
 800c4e4:	3508      	adds	r5, #8
 800c4e6:	2d0c      	cmp	r5, #12
 800c4e8:	bf38      	it	cc
 800c4ea:	250c      	movcc	r5, #12
 800c4ec:	2d00      	cmp	r5, #0
 800c4ee:	4606      	mov	r6, r0
 800c4f0:	db01      	blt.n	800c4f6 <_malloc_r+0x1a>
 800c4f2:	42a9      	cmp	r1, r5
 800c4f4:	d903      	bls.n	800c4fe <_malloc_r+0x22>
 800c4f6:	230c      	movs	r3, #12
 800c4f8:	6033      	str	r3, [r6, #0]
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	bd70      	pop	{r4, r5, r6, pc}
 800c4fe:	f000 fa43 	bl	800c988 <__malloc_lock>
 800c502:	4a21      	ldr	r2, [pc, #132]	; (800c588 <_malloc_r+0xac>)
 800c504:	6814      	ldr	r4, [r2, #0]
 800c506:	4621      	mov	r1, r4
 800c508:	b991      	cbnz	r1, 800c530 <_malloc_r+0x54>
 800c50a:	4c20      	ldr	r4, [pc, #128]	; (800c58c <_malloc_r+0xb0>)
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	b91b      	cbnz	r3, 800c518 <_malloc_r+0x3c>
 800c510:	4630      	mov	r0, r6
 800c512:	f000 f97d 	bl	800c810 <_sbrk_r>
 800c516:	6020      	str	r0, [r4, #0]
 800c518:	4629      	mov	r1, r5
 800c51a:	4630      	mov	r0, r6
 800c51c:	f000 f978 	bl	800c810 <_sbrk_r>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d124      	bne.n	800c56e <_malloc_r+0x92>
 800c524:	230c      	movs	r3, #12
 800c526:	6033      	str	r3, [r6, #0]
 800c528:	4630      	mov	r0, r6
 800c52a:	f000 fa2e 	bl	800c98a <__malloc_unlock>
 800c52e:	e7e4      	b.n	800c4fa <_malloc_r+0x1e>
 800c530:	680b      	ldr	r3, [r1, #0]
 800c532:	1b5b      	subs	r3, r3, r5
 800c534:	d418      	bmi.n	800c568 <_malloc_r+0x8c>
 800c536:	2b0b      	cmp	r3, #11
 800c538:	d90f      	bls.n	800c55a <_malloc_r+0x7e>
 800c53a:	600b      	str	r3, [r1, #0]
 800c53c:	50cd      	str	r5, [r1, r3]
 800c53e:	18cc      	adds	r4, r1, r3
 800c540:	4630      	mov	r0, r6
 800c542:	f000 fa22 	bl	800c98a <__malloc_unlock>
 800c546:	f104 000b 	add.w	r0, r4, #11
 800c54a:	1d23      	adds	r3, r4, #4
 800c54c:	f020 0007 	bic.w	r0, r0, #7
 800c550:	1ac3      	subs	r3, r0, r3
 800c552:	d0d3      	beq.n	800c4fc <_malloc_r+0x20>
 800c554:	425a      	negs	r2, r3
 800c556:	50e2      	str	r2, [r4, r3]
 800c558:	e7d0      	b.n	800c4fc <_malloc_r+0x20>
 800c55a:	428c      	cmp	r4, r1
 800c55c:	684b      	ldr	r3, [r1, #4]
 800c55e:	bf16      	itet	ne
 800c560:	6063      	strne	r3, [r4, #4]
 800c562:	6013      	streq	r3, [r2, #0]
 800c564:	460c      	movne	r4, r1
 800c566:	e7eb      	b.n	800c540 <_malloc_r+0x64>
 800c568:	460c      	mov	r4, r1
 800c56a:	6849      	ldr	r1, [r1, #4]
 800c56c:	e7cc      	b.n	800c508 <_malloc_r+0x2c>
 800c56e:	1cc4      	adds	r4, r0, #3
 800c570:	f024 0403 	bic.w	r4, r4, #3
 800c574:	42a0      	cmp	r0, r4
 800c576:	d005      	beq.n	800c584 <_malloc_r+0xa8>
 800c578:	1a21      	subs	r1, r4, r0
 800c57a:	4630      	mov	r0, r6
 800c57c:	f000 f948 	bl	800c810 <_sbrk_r>
 800c580:	3001      	adds	r0, #1
 800c582:	d0cf      	beq.n	800c524 <_malloc_r+0x48>
 800c584:	6025      	str	r5, [r4, #0]
 800c586:	e7db      	b.n	800c540 <_malloc_r+0x64>
 800c588:	200012c4 	.word	0x200012c4
 800c58c:	200012c8 	.word	0x200012c8

0800c590 <__sfputc_r>:
 800c590:	6893      	ldr	r3, [r2, #8]
 800c592:	3b01      	subs	r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	b410      	push	{r4}
 800c598:	6093      	str	r3, [r2, #8]
 800c59a:	da08      	bge.n	800c5ae <__sfputc_r+0x1e>
 800c59c:	6994      	ldr	r4, [r2, #24]
 800c59e:	42a3      	cmp	r3, r4
 800c5a0:	db01      	blt.n	800c5a6 <__sfputc_r+0x16>
 800c5a2:	290a      	cmp	r1, #10
 800c5a4:	d103      	bne.n	800c5ae <__sfputc_r+0x1e>
 800c5a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5aa:	f7fe bb5b 	b.w	800ac64 <__swbuf_r>
 800c5ae:	6813      	ldr	r3, [r2, #0]
 800c5b0:	1c58      	adds	r0, r3, #1
 800c5b2:	6010      	str	r0, [r2, #0]
 800c5b4:	7019      	strb	r1, [r3, #0]
 800c5b6:	4608      	mov	r0, r1
 800c5b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5bc:	4770      	bx	lr

0800c5be <__sfputs_r>:
 800c5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c0:	4606      	mov	r6, r0
 800c5c2:	460f      	mov	r7, r1
 800c5c4:	4614      	mov	r4, r2
 800c5c6:	18d5      	adds	r5, r2, r3
 800c5c8:	42ac      	cmp	r4, r5
 800c5ca:	d101      	bne.n	800c5d0 <__sfputs_r+0x12>
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	e007      	b.n	800c5e0 <__sfputs_r+0x22>
 800c5d0:	463a      	mov	r2, r7
 800c5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	f7ff ffda 	bl	800c590 <__sfputc_r>
 800c5dc:	1c43      	adds	r3, r0, #1
 800c5de:	d1f3      	bne.n	800c5c8 <__sfputs_r+0xa>
 800c5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5e4 <_vfiprintf_r>:
 800c5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	b09d      	sub	sp, #116	; 0x74
 800c5ec:	4617      	mov	r7, r2
 800c5ee:	461d      	mov	r5, r3
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	b118      	cbz	r0, 800c5fc <_vfiprintf_r+0x18>
 800c5f4:	6983      	ldr	r3, [r0, #24]
 800c5f6:	b90b      	cbnz	r3, 800c5fc <_vfiprintf_r+0x18>
 800c5f8:	f7ff fb2a 	bl	800bc50 <__sinit>
 800c5fc:	4b7c      	ldr	r3, [pc, #496]	; (800c7f0 <_vfiprintf_r+0x20c>)
 800c5fe:	429c      	cmp	r4, r3
 800c600:	d158      	bne.n	800c6b4 <_vfiprintf_r+0xd0>
 800c602:	6874      	ldr	r4, [r6, #4]
 800c604:	89a3      	ldrh	r3, [r4, #12]
 800c606:	0718      	lsls	r0, r3, #28
 800c608:	d55e      	bpl.n	800c6c8 <_vfiprintf_r+0xe4>
 800c60a:	6923      	ldr	r3, [r4, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d05b      	beq.n	800c6c8 <_vfiprintf_r+0xe4>
 800c610:	2300      	movs	r3, #0
 800c612:	9309      	str	r3, [sp, #36]	; 0x24
 800c614:	2320      	movs	r3, #32
 800c616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c61a:	2330      	movs	r3, #48	; 0x30
 800c61c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c620:	9503      	str	r5, [sp, #12]
 800c622:	f04f 0b01 	mov.w	fp, #1
 800c626:	46b8      	mov	r8, r7
 800c628:	4645      	mov	r5, r8
 800c62a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c62e:	b10b      	cbz	r3, 800c634 <_vfiprintf_r+0x50>
 800c630:	2b25      	cmp	r3, #37	; 0x25
 800c632:	d154      	bne.n	800c6de <_vfiprintf_r+0xfa>
 800c634:	ebb8 0a07 	subs.w	sl, r8, r7
 800c638:	d00b      	beq.n	800c652 <_vfiprintf_r+0x6e>
 800c63a:	4653      	mov	r3, sl
 800c63c:	463a      	mov	r2, r7
 800c63e:	4621      	mov	r1, r4
 800c640:	4630      	mov	r0, r6
 800c642:	f7ff ffbc 	bl	800c5be <__sfputs_r>
 800c646:	3001      	adds	r0, #1
 800c648:	f000 80c2 	beq.w	800c7d0 <_vfiprintf_r+0x1ec>
 800c64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c64e:	4453      	add	r3, sl
 800c650:	9309      	str	r3, [sp, #36]	; 0x24
 800c652:	f898 3000 	ldrb.w	r3, [r8]
 800c656:	2b00      	cmp	r3, #0
 800c658:	f000 80ba 	beq.w	800c7d0 <_vfiprintf_r+0x1ec>
 800c65c:	2300      	movs	r3, #0
 800c65e:	f04f 32ff 	mov.w	r2, #4294967295
 800c662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c666:	9304      	str	r3, [sp, #16]
 800c668:	9307      	str	r3, [sp, #28]
 800c66a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c66e:	931a      	str	r3, [sp, #104]	; 0x68
 800c670:	46a8      	mov	r8, r5
 800c672:	2205      	movs	r2, #5
 800c674:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c678:	485e      	ldr	r0, [pc, #376]	; (800c7f4 <_vfiprintf_r+0x210>)
 800c67a:	f7f3 fdb1 	bl	80001e0 <memchr>
 800c67e:	9b04      	ldr	r3, [sp, #16]
 800c680:	bb78      	cbnz	r0, 800c6e2 <_vfiprintf_r+0xfe>
 800c682:	06d9      	lsls	r1, r3, #27
 800c684:	bf44      	itt	mi
 800c686:	2220      	movmi	r2, #32
 800c688:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c68c:	071a      	lsls	r2, r3, #28
 800c68e:	bf44      	itt	mi
 800c690:	222b      	movmi	r2, #43	; 0x2b
 800c692:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c696:	782a      	ldrb	r2, [r5, #0]
 800c698:	2a2a      	cmp	r2, #42	; 0x2a
 800c69a:	d02a      	beq.n	800c6f2 <_vfiprintf_r+0x10e>
 800c69c:	9a07      	ldr	r2, [sp, #28]
 800c69e:	46a8      	mov	r8, r5
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	250a      	movs	r5, #10
 800c6a4:	4641      	mov	r1, r8
 800c6a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6aa:	3b30      	subs	r3, #48	; 0x30
 800c6ac:	2b09      	cmp	r3, #9
 800c6ae:	d969      	bls.n	800c784 <_vfiprintf_r+0x1a0>
 800c6b0:	b360      	cbz	r0, 800c70c <_vfiprintf_r+0x128>
 800c6b2:	e024      	b.n	800c6fe <_vfiprintf_r+0x11a>
 800c6b4:	4b50      	ldr	r3, [pc, #320]	; (800c7f8 <_vfiprintf_r+0x214>)
 800c6b6:	429c      	cmp	r4, r3
 800c6b8:	d101      	bne.n	800c6be <_vfiprintf_r+0xda>
 800c6ba:	68b4      	ldr	r4, [r6, #8]
 800c6bc:	e7a2      	b.n	800c604 <_vfiprintf_r+0x20>
 800c6be:	4b4f      	ldr	r3, [pc, #316]	; (800c7fc <_vfiprintf_r+0x218>)
 800c6c0:	429c      	cmp	r4, r3
 800c6c2:	bf08      	it	eq
 800c6c4:	68f4      	ldreq	r4, [r6, #12]
 800c6c6:	e79d      	b.n	800c604 <_vfiprintf_r+0x20>
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7fe fb1c 	bl	800ad08 <__swsetup_r>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d09d      	beq.n	800c610 <_vfiprintf_r+0x2c>
 800c6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d8:	b01d      	add	sp, #116	; 0x74
 800c6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6de:	46a8      	mov	r8, r5
 800c6e0:	e7a2      	b.n	800c628 <_vfiprintf_r+0x44>
 800c6e2:	4a44      	ldr	r2, [pc, #272]	; (800c7f4 <_vfiprintf_r+0x210>)
 800c6e4:	1a80      	subs	r0, r0, r2
 800c6e6:	fa0b f000 	lsl.w	r0, fp, r0
 800c6ea:	4318      	orrs	r0, r3
 800c6ec:	9004      	str	r0, [sp, #16]
 800c6ee:	4645      	mov	r5, r8
 800c6f0:	e7be      	b.n	800c670 <_vfiprintf_r+0x8c>
 800c6f2:	9a03      	ldr	r2, [sp, #12]
 800c6f4:	1d11      	adds	r1, r2, #4
 800c6f6:	6812      	ldr	r2, [r2, #0]
 800c6f8:	9103      	str	r1, [sp, #12]
 800c6fa:	2a00      	cmp	r2, #0
 800c6fc:	db01      	blt.n	800c702 <_vfiprintf_r+0x11e>
 800c6fe:	9207      	str	r2, [sp, #28]
 800c700:	e004      	b.n	800c70c <_vfiprintf_r+0x128>
 800c702:	4252      	negs	r2, r2
 800c704:	f043 0302 	orr.w	r3, r3, #2
 800c708:	9207      	str	r2, [sp, #28]
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	f898 3000 	ldrb.w	r3, [r8]
 800c710:	2b2e      	cmp	r3, #46	; 0x2e
 800c712:	d10e      	bne.n	800c732 <_vfiprintf_r+0x14e>
 800c714:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c718:	2b2a      	cmp	r3, #42	; 0x2a
 800c71a:	d138      	bne.n	800c78e <_vfiprintf_r+0x1aa>
 800c71c:	9b03      	ldr	r3, [sp, #12]
 800c71e:	1d1a      	adds	r2, r3, #4
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	9203      	str	r2, [sp, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	bfb8      	it	lt
 800c728:	f04f 33ff 	movlt.w	r3, #4294967295
 800c72c:	f108 0802 	add.w	r8, r8, #2
 800c730:	9305      	str	r3, [sp, #20]
 800c732:	4d33      	ldr	r5, [pc, #204]	; (800c800 <_vfiprintf_r+0x21c>)
 800c734:	f898 1000 	ldrb.w	r1, [r8]
 800c738:	2203      	movs	r2, #3
 800c73a:	4628      	mov	r0, r5
 800c73c:	f7f3 fd50 	bl	80001e0 <memchr>
 800c740:	b140      	cbz	r0, 800c754 <_vfiprintf_r+0x170>
 800c742:	2340      	movs	r3, #64	; 0x40
 800c744:	1b40      	subs	r0, r0, r5
 800c746:	fa03 f000 	lsl.w	r0, r3, r0
 800c74a:	9b04      	ldr	r3, [sp, #16]
 800c74c:	4303      	orrs	r3, r0
 800c74e:	f108 0801 	add.w	r8, r8, #1
 800c752:	9304      	str	r3, [sp, #16]
 800c754:	f898 1000 	ldrb.w	r1, [r8]
 800c758:	482a      	ldr	r0, [pc, #168]	; (800c804 <_vfiprintf_r+0x220>)
 800c75a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c75e:	2206      	movs	r2, #6
 800c760:	f108 0701 	add.w	r7, r8, #1
 800c764:	f7f3 fd3c 	bl	80001e0 <memchr>
 800c768:	2800      	cmp	r0, #0
 800c76a:	d037      	beq.n	800c7dc <_vfiprintf_r+0x1f8>
 800c76c:	4b26      	ldr	r3, [pc, #152]	; (800c808 <_vfiprintf_r+0x224>)
 800c76e:	bb1b      	cbnz	r3, 800c7b8 <_vfiprintf_r+0x1d4>
 800c770:	9b03      	ldr	r3, [sp, #12]
 800c772:	3307      	adds	r3, #7
 800c774:	f023 0307 	bic.w	r3, r3, #7
 800c778:	3308      	adds	r3, #8
 800c77a:	9303      	str	r3, [sp, #12]
 800c77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c77e:	444b      	add	r3, r9
 800c780:	9309      	str	r3, [sp, #36]	; 0x24
 800c782:	e750      	b.n	800c626 <_vfiprintf_r+0x42>
 800c784:	fb05 3202 	mla	r2, r5, r2, r3
 800c788:	2001      	movs	r0, #1
 800c78a:	4688      	mov	r8, r1
 800c78c:	e78a      	b.n	800c6a4 <_vfiprintf_r+0xc0>
 800c78e:	2300      	movs	r3, #0
 800c790:	f108 0801 	add.w	r8, r8, #1
 800c794:	9305      	str	r3, [sp, #20]
 800c796:	4619      	mov	r1, r3
 800c798:	250a      	movs	r5, #10
 800c79a:	4640      	mov	r0, r8
 800c79c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7a0:	3a30      	subs	r2, #48	; 0x30
 800c7a2:	2a09      	cmp	r2, #9
 800c7a4:	d903      	bls.n	800c7ae <_vfiprintf_r+0x1ca>
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d0c3      	beq.n	800c732 <_vfiprintf_r+0x14e>
 800c7aa:	9105      	str	r1, [sp, #20]
 800c7ac:	e7c1      	b.n	800c732 <_vfiprintf_r+0x14e>
 800c7ae:	fb05 2101 	mla	r1, r5, r1, r2
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	4680      	mov	r8, r0
 800c7b6:	e7f0      	b.n	800c79a <_vfiprintf_r+0x1b6>
 800c7b8:	ab03      	add	r3, sp, #12
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	4622      	mov	r2, r4
 800c7be:	4b13      	ldr	r3, [pc, #76]	; (800c80c <_vfiprintf_r+0x228>)
 800c7c0:	a904      	add	r1, sp, #16
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	f7fd fd5c 	bl	800a280 <_printf_float>
 800c7c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c7cc:	4681      	mov	r9, r0
 800c7ce:	d1d5      	bne.n	800c77c <_vfiprintf_r+0x198>
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	065b      	lsls	r3, r3, #25
 800c7d4:	f53f af7e 	bmi.w	800c6d4 <_vfiprintf_r+0xf0>
 800c7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7da:	e77d      	b.n	800c6d8 <_vfiprintf_r+0xf4>
 800c7dc:	ab03      	add	r3, sp, #12
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	4622      	mov	r2, r4
 800c7e2:	4b0a      	ldr	r3, [pc, #40]	; (800c80c <_vfiprintf_r+0x228>)
 800c7e4:	a904      	add	r1, sp, #16
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f7fe f800 	bl	800a7ec <_printf_i>
 800c7ec:	e7ec      	b.n	800c7c8 <_vfiprintf_r+0x1e4>
 800c7ee:	bf00      	nop
 800c7f0:	0800cdd0 	.word	0x0800cdd0
 800c7f4:	0800cf0c 	.word	0x0800cf0c
 800c7f8:	0800cdf0 	.word	0x0800cdf0
 800c7fc:	0800cdb0 	.word	0x0800cdb0
 800c800:	0800cf12 	.word	0x0800cf12
 800c804:	0800cf16 	.word	0x0800cf16
 800c808:	0800a281 	.word	0x0800a281
 800c80c:	0800c5bf 	.word	0x0800c5bf

0800c810 <_sbrk_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4c06      	ldr	r4, [pc, #24]	; (800c82c <_sbrk_r+0x1c>)
 800c814:	2300      	movs	r3, #0
 800c816:	4605      	mov	r5, r0
 800c818:	4608      	mov	r0, r1
 800c81a:	6023      	str	r3, [r4, #0]
 800c81c:	f7f7 fec4 	bl	80045a8 <_sbrk>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d102      	bne.n	800c82a <_sbrk_r+0x1a>
 800c824:	6823      	ldr	r3, [r4, #0]
 800c826:	b103      	cbz	r3, 800c82a <_sbrk_r+0x1a>
 800c828:	602b      	str	r3, [r5, #0]
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	20001d48 	.word	0x20001d48

0800c830 <__sread>:
 800c830:	b510      	push	{r4, lr}
 800c832:	460c      	mov	r4, r1
 800c834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c838:	f000 f8a8 	bl	800c98c <_read_r>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	bfab      	itete	ge
 800c840:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c842:	89a3      	ldrhlt	r3, [r4, #12]
 800c844:	181b      	addge	r3, r3, r0
 800c846:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c84a:	bfac      	ite	ge
 800c84c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c84e:	81a3      	strhlt	r3, [r4, #12]
 800c850:	bd10      	pop	{r4, pc}

0800c852 <__swrite>:
 800c852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c856:	461f      	mov	r7, r3
 800c858:	898b      	ldrh	r3, [r1, #12]
 800c85a:	05db      	lsls	r3, r3, #23
 800c85c:	4605      	mov	r5, r0
 800c85e:	460c      	mov	r4, r1
 800c860:	4616      	mov	r6, r2
 800c862:	d505      	bpl.n	800c870 <__swrite+0x1e>
 800c864:	2302      	movs	r3, #2
 800c866:	2200      	movs	r2, #0
 800c868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c86c:	f000 f868 	bl	800c940 <_lseek_r>
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c87a:	81a3      	strh	r3, [r4, #12]
 800c87c:	4632      	mov	r2, r6
 800c87e:	463b      	mov	r3, r7
 800c880:	4628      	mov	r0, r5
 800c882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c886:	f000 b817 	b.w	800c8b8 <_write_r>

0800c88a <__sseek>:
 800c88a:	b510      	push	{r4, lr}
 800c88c:	460c      	mov	r4, r1
 800c88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c892:	f000 f855 	bl	800c940 <_lseek_r>
 800c896:	1c43      	adds	r3, r0, #1
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	bf15      	itete	ne
 800c89c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c89e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8a6:	81a3      	strheq	r3, [r4, #12]
 800c8a8:	bf18      	it	ne
 800c8aa:	81a3      	strhne	r3, [r4, #12]
 800c8ac:	bd10      	pop	{r4, pc}

0800c8ae <__sclose>:
 800c8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8b2:	f000 b813 	b.w	800c8dc <_close_r>
	...

0800c8b8 <_write_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4c07      	ldr	r4, [pc, #28]	; (800c8d8 <_write_r+0x20>)
 800c8bc:	4605      	mov	r5, r0
 800c8be:	4608      	mov	r0, r1
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	6022      	str	r2, [r4, #0]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f7f4 fe44 	bl	8001554 <_write>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_write_r+0x1e>
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_write_r+0x1e>
 800c8d4:	602b      	str	r3, [r5, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	20001d48 	.word	0x20001d48

0800c8dc <_close_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	4c06      	ldr	r4, [pc, #24]	; (800c8f8 <_close_r+0x1c>)
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	4608      	mov	r0, r1
 800c8e6:	6023      	str	r3, [r4, #0]
 800c8e8:	f7f4 fe5e 	bl	80015a8 <_close>
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	d102      	bne.n	800c8f6 <_close_r+0x1a>
 800c8f0:	6823      	ldr	r3, [r4, #0]
 800c8f2:	b103      	cbz	r3, 800c8f6 <_close_r+0x1a>
 800c8f4:	602b      	str	r3, [r5, #0]
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}
 800c8f8:	20001d48 	.word	0x20001d48

0800c8fc <_fstat_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	4c07      	ldr	r4, [pc, #28]	; (800c91c <_fstat_r+0x20>)
 800c900:	2300      	movs	r3, #0
 800c902:	4605      	mov	r5, r0
 800c904:	4608      	mov	r0, r1
 800c906:	4611      	mov	r1, r2
 800c908:	6023      	str	r3, [r4, #0]
 800c90a:	f7f4 fe9d 	bl	8001648 <_fstat>
 800c90e:	1c43      	adds	r3, r0, #1
 800c910:	d102      	bne.n	800c918 <_fstat_r+0x1c>
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	b103      	cbz	r3, 800c918 <_fstat_r+0x1c>
 800c916:	602b      	str	r3, [r5, #0]
 800c918:	bd38      	pop	{r3, r4, r5, pc}
 800c91a:	bf00      	nop
 800c91c:	20001d48 	.word	0x20001d48

0800c920 <_isatty_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4c06      	ldr	r4, [pc, #24]	; (800c93c <_isatty_r+0x1c>)
 800c924:	2300      	movs	r3, #0
 800c926:	4605      	mov	r5, r0
 800c928:	4608      	mov	r0, r1
 800c92a:	6023      	str	r3, [r4, #0]
 800c92c:	f7f4 fdfc 	bl	8001528 <_isatty>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d102      	bne.n	800c93a <_isatty_r+0x1a>
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	b103      	cbz	r3, 800c93a <_isatty_r+0x1a>
 800c938:	602b      	str	r3, [r5, #0]
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
 800c93c:	20001d48 	.word	0x20001d48

0800c940 <_lseek_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4c07      	ldr	r4, [pc, #28]	; (800c960 <_lseek_r+0x20>)
 800c944:	4605      	mov	r5, r0
 800c946:	4608      	mov	r0, r1
 800c948:	4611      	mov	r1, r2
 800c94a:	2200      	movs	r2, #0
 800c94c:	6022      	str	r2, [r4, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	f7f4 fe41 	bl	80015d6 <_lseek>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_lseek_r+0x1e>
 800c958:	6823      	ldr	r3, [r4, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_lseek_r+0x1e>
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	20001d48 	.word	0x20001d48

0800c964 <__ascii_mbtowc>:
 800c964:	b082      	sub	sp, #8
 800c966:	b901      	cbnz	r1, 800c96a <__ascii_mbtowc+0x6>
 800c968:	a901      	add	r1, sp, #4
 800c96a:	b142      	cbz	r2, 800c97e <__ascii_mbtowc+0x1a>
 800c96c:	b14b      	cbz	r3, 800c982 <__ascii_mbtowc+0x1e>
 800c96e:	7813      	ldrb	r3, [r2, #0]
 800c970:	600b      	str	r3, [r1, #0]
 800c972:	7812      	ldrb	r2, [r2, #0]
 800c974:	1c10      	adds	r0, r2, #0
 800c976:	bf18      	it	ne
 800c978:	2001      	movne	r0, #1
 800c97a:	b002      	add	sp, #8
 800c97c:	4770      	bx	lr
 800c97e:	4610      	mov	r0, r2
 800c980:	e7fb      	b.n	800c97a <__ascii_mbtowc+0x16>
 800c982:	f06f 0001 	mvn.w	r0, #1
 800c986:	e7f8      	b.n	800c97a <__ascii_mbtowc+0x16>

0800c988 <__malloc_lock>:
 800c988:	4770      	bx	lr

0800c98a <__malloc_unlock>:
 800c98a:	4770      	bx	lr

0800c98c <_read_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	4c07      	ldr	r4, [pc, #28]	; (800c9ac <_read_r+0x20>)
 800c990:	4605      	mov	r5, r0
 800c992:	4608      	mov	r0, r1
 800c994:	4611      	mov	r1, r2
 800c996:	2200      	movs	r2, #0
 800c998:	6022      	str	r2, [r4, #0]
 800c99a:	461a      	mov	r2, r3
 800c99c:	f7f4 fe2c 	bl	80015f8 <_read>
 800c9a0:	1c43      	adds	r3, r0, #1
 800c9a2:	d102      	bne.n	800c9aa <_read_r+0x1e>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	b103      	cbz	r3, 800c9aa <_read_r+0x1e>
 800c9a8:	602b      	str	r3, [r5, #0]
 800c9aa:	bd38      	pop	{r3, r4, r5, pc}
 800c9ac:	20001d48 	.word	0x20001d48

0800c9b0 <__ascii_wctomb>:
 800c9b0:	b149      	cbz	r1, 800c9c6 <__ascii_wctomb+0x16>
 800c9b2:	2aff      	cmp	r2, #255	; 0xff
 800c9b4:	bf85      	ittet	hi
 800c9b6:	238a      	movhi	r3, #138	; 0x8a
 800c9b8:	6003      	strhi	r3, [r0, #0]
 800c9ba:	700a      	strbls	r2, [r1, #0]
 800c9bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800c9c0:	bf98      	it	ls
 800c9c2:	2001      	movls	r0, #1
 800c9c4:	4770      	bx	lr
 800c9c6:	4608      	mov	r0, r1
 800c9c8:	4770      	bx	lr
	...

0800c9cc <asinf>:
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	ed2d 8b02 	vpush	{d8}
 800c9d2:	4c27      	ldr	r4, [pc, #156]	; (800ca70 <asinf+0xa4>)
 800c9d4:	b08a      	sub	sp, #40	; 0x28
 800c9d6:	eeb0 8a40 	vmov.f32	s16, s0
 800c9da:	f000 f89f 	bl	800cb1c <__ieee754_asinf>
 800c9de:	f994 3000 	ldrsb.w	r3, [r4]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	eef0 8a40 	vmov.f32	s17, s0
 800c9e8:	d03c      	beq.n	800ca64 <asinf+0x98>
 800c9ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800c9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9f2:	d637      	bvs.n	800ca64 <asinf+0x98>
 800c9f4:	eeb0 0a48 	vmov.f32	s0, s16
 800c9f8:	f000 f986 	bl	800cd08 <fabsf>
 800c9fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ca04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca08:	dd2c      	ble.n	800ca64 <asinf+0x98>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	4b19      	ldr	r3, [pc, #100]	; (800ca74 <asinf+0xa8>)
 800ca10:	9301      	str	r3, [sp, #4]
 800ca12:	ee18 0a10 	vmov	r0, s16
 800ca16:	2300      	movs	r3, #0
 800ca18:	9308      	str	r3, [sp, #32]
 800ca1a:	f7f3 fd95 	bl	8000548 <__aeabi_f2d>
 800ca1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca26:	4814      	ldr	r0, [pc, #80]	; (800ca78 <asinf+0xac>)
 800ca28:	f000 f966 	bl	800ccf8 <nan>
 800ca2c:	f994 3000 	ldrsb.w	r3, [r4]
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ca36:	d104      	bne.n	800ca42 <asinf+0x76>
 800ca38:	f7fd fb42 	bl	800a0c0 <__errno>
 800ca3c:	2321      	movs	r3, #33	; 0x21
 800ca3e:	6003      	str	r3, [r0, #0]
 800ca40:	e004      	b.n	800ca4c <asinf+0x80>
 800ca42:	4668      	mov	r0, sp
 800ca44:	f000 f955 	bl	800ccf2 <matherr>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d0f5      	beq.n	800ca38 <asinf+0x6c>
 800ca4c:	9b08      	ldr	r3, [sp, #32]
 800ca4e:	b11b      	cbz	r3, 800ca58 <asinf+0x8c>
 800ca50:	f7fd fb36 	bl	800a0c0 <__errno>
 800ca54:	9b08      	ldr	r3, [sp, #32]
 800ca56:	6003      	str	r3, [r0, #0]
 800ca58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca5c:	f7f4 f8a4 	bl	8000ba8 <__aeabi_d2f>
 800ca60:	ee08 0a90 	vmov	s17, r0
 800ca64:	eeb0 0a68 	vmov.f32	s0, s17
 800ca68:	b00a      	add	sp, #40	; 0x28
 800ca6a:	ecbd 8b02 	vpop	{d8}
 800ca6e:	bd10      	pop	{r4, pc}
 800ca70:	200011cc 	.word	0x200011cc
 800ca74:	0800d028 	.word	0x0800d028
 800ca78:	0800cf11 	.word	0x0800cf11

0800ca7c <sqrtf>:
 800ca7c:	b510      	push	{r4, lr}
 800ca7e:	ed2d 8b02 	vpush	{d8}
 800ca82:	b08a      	sub	sp, #40	; 0x28
 800ca84:	eeb0 8a40 	vmov.f32	s16, s0
 800ca88:	f000 f930 	bl	800ccec <__ieee754_sqrtf>
 800ca8c:	4b21      	ldr	r3, [pc, #132]	; (800cb14 <sqrtf+0x98>)
 800ca8e:	f993 4000 	ldrsb.w	r4, [r3]
 800ca92:	1c63      	adds	r3, r4, #1
 800ca94:	d02c      	beq.n	800caf0 <sqrtf+0x74>
 800ca96:	eeb4 8a48 	vcmp.f32	s16, s16
 800ca9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9e:	d627      	bvs.n	800caf0 <sqrtf+0x74>
 800caa0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800caa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa8:	d522      	bpl.n	800caf0 <sqrtf+0x74>
 800caaa:	2301      	movs	r3, #1
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	4b1a      	ldr	r3, [pc, #104]	; (800cb18 <sqrtf+0x9c>)
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	ee18 0a10 	vmov	r0, s16
 800cab6:	2300      	movs	r3, #0
 800cab8:	9308      	str	r3, [sp, #32]
 800caba:	f7f3 fd45 	bl	8000548 <__aeabi_f2d>
 800cabe:	2200      	movs	r2, #0
 800cac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cac8:	2300      	movs	r3, #0
 800caca:	b9ac      	cbnz	r4, 800caf8 <sqrtf+0x7c>
 800cacc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cad0:	4668      	mov	r0, sp
 800cad2:	f000 f90e 	bl	800ccf2 <matherr>
 800cad6:	b1b8      	cbz	r0, 800cb08 <sqrtf+0x8c>
 800cad8:	9b08      	ldr	r3, [sp, #32]
 800cada:	b11b      	cbz	r3, 800cae4 <sqrtf+0x68>
 800cadc:	f7fd faf0 	bl	800a0c0 <__errno>
 800cae0:	9b08      	ldr	r3, [sp, #32]
 800cae2:	6003      	str	r3, [r0, #0]
 800cae4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cae8:	f7f4 f85e 	bl	8000ba8 <__aeabi_d2f>
 800caec:	ee00 0a10 	vmov	s0, r0
 800caf0:	b00a      	add	sp, #40	; 0x28
 800caf2:	ecbd 8b02 	vpop	{d8}
 800caf6:	bd10      	pop	{r4, pc}
 800caf8:	4610      	mov	r0, r2
 800cafa:	4619      	mov	r1, r3
 800cafc:	f7f3 fea6 	bl	800084c <__aeabi_ddiv>
 800cb00:	2c02      	cmp	r4, #2
 800cb02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cb06:	d1e3      	bne.n	800cad0 <sqrtf+0x54>
 800cb08:	f7fd fada 	bl	800a0c0 <__errno>
 800cb0c:	2321      	movs	r3, #33	; 0x21
 800cb0e:	6003      	str	r3, [r0, #0]
 800cb10:	e7e2      	b.n	800cad8 <sqrtf+0x5c>
 800cb12:	bf00      	nop
 800cb14:	200011cc 	.word	0x200011cc
 800cb18:	0800d02e 	.word	0x0800d02e

0800cb1c <__ieee754_asinf>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	ee10 5a10 	vmov	r5, s0
 800cb22:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800cb26:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cb2a:	ed2d 8b04 	vpush	{d8-d9}
 800cb2e:	d10c      	bne.n	800cb4a <__ieee754_asinf+0x2e>
 800cb30:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800ccac <__ieee754_asinf+0x190>
 800cb34:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800ccb0 <__ieee754_asinf+0x194>
 800cb38:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cb3c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cb40:	eeb0 0a67 	vmov.f32	s0, s15
 800cb44:	ecbd 8b04 	vpop	{d8-d9}
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	dd04      	ble.n	800cb56 <__ieee754_asinf+0x3a>
 800cb4c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cb50:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cb54:	e7f6      	b.n	800cb44 <__ieee754_asinf+0x28>
 800cb56:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800cb5a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800cb5e:	da0b      	bge.n	800cb78 <__ieee754_asinf+0x5c>
 800cb60:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800cb64:	da52      	bge.n	800cc0c <__ieee754_asinf+0xf0>
 800cb66:	eddf 7a53 	vldr	s15, [pc, #332]	; 800ccb4 <__ieee754_asinf+0x198>
 800cb6a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cb6e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800cb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb76:	dce5      	bgt.n	800cb44 <__ieee754_asinf+0x28>
 800cb78:	f000 f8c6 	bl	800cd08 <fabsf>
 800cb7c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800cb80:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800cb84:	ee20 8a08 	vmul.f32	s16, s0, s16
 800cb88:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800ccb8 <__ieee754_asinf+0x19c>
 800cb8c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ccbc <__ieee754_asinf+0x1a0>
 800cb90:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800ccc0 <__ieee754_asinf+0x1a4>
 800cb94:	eea8 7a27 	vfma.f32	s14, s16, s15
 800cb98:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ccc4 <__ieee754_asinf+0x1a8>
 800cb9c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cba0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ccc8 <__ieee754_asinf+0x1ac>
 800cba4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800cba8:	eddf 7a48 	vldr	s15, [pc, #288]	; 800cccc <__ieee754_asinf+0x1b0>
 800cbac:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cbb0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ccd0 <__ieee754_asinf+0x1b4>
 800cbb4:	eea7 9a88 	vfma.f32	s18, s15, s16
 800cbb8:	eddf 7a46 	vldr	s15, [pc, #280]	; 800ccd4 <__ieee754_asinf+0x1b8>
 800cbbc:	eee8 7a07 	vfma.f32	s15, s16, s14
 800cbc0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800ccd8 <__ieee754_asinf+0x1bc>
 800cbc4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800cbc8:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ccdc <__ieee754_asinf+0x1c0>
 800cbcc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cbd0:	eeb0 0a48 	vmov.f32	s0, s16
 800cbd4:	eee7 8a88 	vfma.f32	s17, s15, s16
 800cbd8:	f000 f888 	bl	800ccec <__ieee754_sqrtf>
 800cbdc:	4b40      	ldr	r3, [pc, #256]	; (800cce0 <__ieee754_asinf+0x1c4>)
 800cbde:	ee29 9a08 	vmul.f32	s18, s18, s16
 800cbe2:	429c      	cmp	r4, r3
 800cbe4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800cbe8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800cbec:	dd3d      	ble.n	800cc6a <__ieee754_asinf+0x14e>
 800cbee:	eea0 0a06 	vfma.f32	s0, s0, s12
 800cbf2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800cce4 <__ieee754_asinf+0x1c8>
 800cbf6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cbfa:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800ccb0 <__ieee754_asinf+0x194>
 800cbfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cc02:	2d00      	cmp	r5, #0
 800cc04:	bfd8      	it	le
 800cc06:	eeb1 0a40 	vnegle.f32	s0, s0
 800cc0a:	e79b      	b.n	800cb44 <__ieee754_asinf+0x28>
 800cc0c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800cc10:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ccb8 <__ieee754_asinf+0x19c>
 800cc14:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ccbc <__ieee754_asinf+0x1a0>
 800cc18:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ccd0 <__ieee754_asinf+0x1b4>
 800cc1c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800cc20:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ccc4 <__ieee754_asinf+0x1a8>
 800cc24:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cc28:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800ccc8 <__ieee754_asinf+0x1ac>
 800cc2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cc30:	eddf 6a26 	vldr	s13, [pc, #152]	; 800cccc <__ieee754_asinf+0x1b0>
 800cc34:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cc38:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800ccc0 <__ieee754_asinf+0x1a4>
 800cc3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cc40:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ccd4 <__ieee754_asinf+0x1b8>
 800cc44:	eee7 6a86 	vfma.f32	s13, s15, s12
 800cc48:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800ccd8 <__ieee754_asinf+0x1bc>
 800cc4c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800cc50:	eddf 6a22 	vldr	s13, [pc, #136]	; 800ccdc <__ieee754_asinf+0x1c0>
 800cc54:	eee6 6a27 	vfma.f32	s13, s12, s15
 800cc58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc5c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800cc60:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800cc64:	eea0 0a27 	vfma.f32	s0, s0, s15
 800cc68:	e76c      	b.n	800cb44 <__ieee754_asinf+0x28>
 800cc6a:	ee10 3a10 	vmov	r3, s0
 800cc6e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cc72:	f023 030f 	bic.w	r3, r3, #15
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eef1 6a67 	vneg.f32	s13, s15
 800cc7e:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800cc82:	ee70 5a00 	vadd.f32	s11, s0, s0
 800cc86:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cc8a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ccac <__ieee754_asinf+0x190>
 800cc8e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800cc92:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800cce8 <__ieee754_asinf+0x1cc>
 800cc96:	eee5 7a47 	vfms.f32	s15, s10, s14
 800cc9a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800cc9e:	eeb0 6a40 	vmov.f32	s12, s0
 800cca2:	eea6 6a87 	vfma.f32	s12, s13, s14
 800cca6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ccaa:	e7a8      	b.n	800cbfe <__ieee754_asinf+0xe2>
 800ccac:	b33bbd2e 	.word	0xb33bbd2e
 800ccb0:	3fc90fdb 	.word	0x3fc90fdb
 800ccb4:	7149f2ca 	.word	0x7149f2ca
 800ccb8:	3811ef08 	.word	0x3811ef08
 800ccbc:	3a4f7f04 	.word	0x3a4f7f04
 800ccc0:	3e2aaaab 	.word	0x3e2aaaab
 800ccc4:	bd241146 	.word	0xbd241146
 800ccc8:	3e4e0aa8 	.word	0x3e4e0aa8
 800cccc:	bea6b090 	.word	0xbea6b090
 800ccd0:	3d9dc62e 	.word	0x3d9dc62e
 800ccd4:	bf303361 	.word	0xbf303361
 800ccd8:	4001572d 	.word	0x4001572d
 800ccdc:	c019d139 	.word	0xc019d139
 800cce0:	3f799999 	.word	0x3f799999
 800cce4:	333bbd2e 	.word	0x333bbd2e
 800cce8:	3f490fdb 	.word	0x3f490fdb

0800ccec <__ieee754_sqrtf>:
 800ccec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ccf0:	4770      	bx	lr

0800ccf2 <matherr>:
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	4770      	bx	lr
	...

0800ccf8 <nan>:
 800ccf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cd00 <nan+0x8>
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	00000000 	.word	0x00000000
 800cd04:	7ff80000 	.word	0x7ff80000

0800cd08 <fabsf>:
 800cd08:	ee10 3a10 	vmov	r3, s0
 800cd0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd10:	ee00 3a10 	vmov	s0, r3
 800cd14:	4770      	bx	lr
	...

0800cd18 <_init>:
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	bf00      	nop
 800cd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1e:	bc08      	pop	{r3}
 800cd20:	469e      	mov	lr, r3
 800cd22:	4770      	bx	lr

0800cd24 <_fini>:
 800cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd26:	bf00      	nop
 800cd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd2a:	bc08      	pop	{r3}
 800cd2c:	469e      	mov	lr, r3
 800cd2e:	4770      	bx	lr
