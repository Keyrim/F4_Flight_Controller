
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013938  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  08013ac8  08013ac8  00023ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141d4  080141d4  00031c7c  2**0
                  CONTENTS
  4 .ARM          00000008  080141d4  080141d4  000241d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141dc  080141dc  00031c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141dc  080141dc  000241dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141e0  080141e0  000241e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001c7c  20000000  080141e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001700  20001c7c  08015e60  00031c7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000337c  08015e60  0003337c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031c7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e3f8  00000000  00000000  00031cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007893  00000000  00000000  000800a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bf0  00000000  00000000  00087938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018a8  00000000  00000000  00089528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cbfc  00000000  00000000  0008add0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002ec03  00000000  00000000  000b79cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce670  00000000  00000000  000e65cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b4c3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ec4  00000000  00000000  001b4cbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001c7c 	.word	0x20001c7c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ab0 	.word	0x08013ab0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001c80 	.word	0x20001c80
 80001cc:	08013ab0 	.word	0x08013ab0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DATA_LOGGER_Init>:



static uint8_t name_flight_mode[] = "Flight Mode";

void DATA_LOGGER_Init(system_t * sys_){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	sys = sys_;
 8000f50:	4ab4      	ldr	r2, [pc, #720]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]

	//	-----------------------------------------------	Définitions des data	-----------------------------------------------------------------
	//Angle
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							TRUE);
 8000f56:	4bb4      	ldr	r3, [pc, #720]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	4bb1      	ldr	r3, [pc, #708]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000f64:	4ab0      	ldr	r2, [pc, #704]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f66:	6053      	str	r3, [r2, #4]
 8000f68:	4baf      	ldr	r3, [pc, #700]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f6a:	2229      	movs	r2, #41	; 0x29
 8000f6c:	725a      	strb	r2, [r3, #9]
 8000f6e:	4bae      	ldr	r3, [pc, #696]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f70:	4aae      	ldr	r2, [pc, #696]	; (800122c <DATA_LOGGER_Init+0x2e4>)
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4bac      	ldr	r3, [pc, #688]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f76:	220a      	movs	r2, #10
 8000f78:	741a      	strb	r2, [r3, #16]
 8000f7a:	4bab      	ldr	r3, [pc, #684]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	615a      	str	r2, [r3, #20]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							TRUE);
 8000f80:	4ba9      	ldr	r3, [pc, #676]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
 8000f88:	4ba6      	ldr	r3, [pc, #664]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f90:	4aa5      	ldr	r2, [pc, #660]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4ba4      	ldr	r3, [pc, #656]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f96:	2229      	movs	r2, #41	; 0x29
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f9c:	4ba2      	ldr	r3, [pc, #648]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f9e:	4aa4      	ldr	r2, [pc, #656]	; (8001230 <DATA_LOGGER_Init+0x2e8>)
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	4ba1      	ldr	r3, [pc, #644]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000faa:	4b9f      	ldr	r3, [pc, #636]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c

	//Consignes angles
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_roll,					FALSE);
 8000fb0:	4b9d      	ldr	r3, [pc, #628]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fb2:	2213      	movs	r2, #19
 8000fb4:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8000fb8:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 8000fc0:	4a99      	ldr	r2, [pc, #612]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fc2:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 8000fc6:	4b98      	ldr	r3, [pc, #608]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fc8:	2229      	movs	r2, #41	; 0x29
 8000fca:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8000fce:	4b96      	ldr	r3, [pc, #600]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fd0:	4a98      	ldr	r2, [pc, #608]	; (8001234 <DATA_LOGGER_Init+0x2ec>)
 8000fd2:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 8000fd6:	4b94      	ldr	r3, [pc, #592]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fd8:	220b      	movs	r2, #11
 8000fda:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8000fde:	4b92      	ldr	r3, [pc, #584]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_pitch,					FALSE);
 8000fe6:	4b90      	ldr	r3, [pc, #576]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fe8:	2214      	movs	r2, #20
 8000fea:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8000fee:	4b8d      	ldr	r3, [pc, #564]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8000ff6:	4a8c      	ldr	r2, [pc, #560]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ff8:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
 8000ffc:	4b8a      	ldr	r3, [pc, #552]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ffe:	2229      	movs	r2, #41	; 0x29
 8001000:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8001004:	4b88      	ldr	r3, [pc, #544]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001006:	4a8c      	ldr	r2, [pc, #560]	; (8001238 <DATA_LOGGER_Init+0x2f0>)
 8001008:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 800100c:	4b86      	ldr	r3, [pc, #536]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800100e:	220c      	movs	r2, #12
 8001010:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8001014:	4b84      	ldr	r3, [pc, #528]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

	//Pid gyro roll
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].output, 		DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll, 						FALSE);
 800101c:	4b82      	ldr	r3, [pc, #520]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800101e:	2210      	movs	r2, #16
 8001020:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8001024:	4b7f      	ldr	r3, [pc, #508]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f603 138c 	addw	r3, r3, #2444	; 0x98c
 800102c:	4a7e      	ldr	r2, [pc, #504]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800102e:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 8001032:	4b7d      	ldr	r3, [pc, #500]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001034:	2229      	movs	r2, #41	; 0x29
 8001036:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800103c:	4a7f      	ldr	r2, [pc, #508]	; (800123c <DATA_LOGGER_Init+0x2f4>)
 800103e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8001042:	4b79      	ldr	r3, [pc, #484]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001044:	220d      	movs	r2, #13
 8001046:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 800104a:	4b77      	ldr	r3, [pc, #476]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800104c:	2200      	movs	r2, #0
 800104e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_P, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].P, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_p, 						FALSE);
 8001052:	4b75      	ldr	r3, [pc, #468]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001054:	2211      	movs	r2, #17
 8001056:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 800105a:	4b72      	ldr	r3, [pc, #456]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8001062:	4a71      	ldr	r2, [pc, #452]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001064:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 8001068:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800106a:	2229      	movs	r2, #41	; 0x29
 800106c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8001070:	4b6d      	ldr	r3, [pc, #436]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001072:	4a73      	ldr	r2, [pc, #460]	; (8001240 <DATA_LOGGER_Init+0x2f8>)
 8001074:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8001078:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800107a:	220d      	movs	r2, #13
 800107c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8001080:	4b69      	ldr	r3, [pc, #420]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001082:	2200      	movs	r2, #0
 8001084:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_D, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].D, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_d, 						FALSE);
 8001088:	4b67      	ldr	r3, [pc, #412]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800108a:	2212      	movs	r2, #18
 800108c:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8001090:	4b64      	ldr	r3, [pc, #400]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f603 1398 	addw	r3, r3, #2456	; 0x998
 8001098:	4a63      	ldr	r2, [pc, #396]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800109a:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 800109e:	4b62      	ldr	r3, [pc, #392]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010a0:	2229      	movs	r2, #41	; 0x29
 80010a2:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 80010a6:	4b60      	ldr	r3, [pc, #384]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010a8:	4a66      	ldr	r2, [pc, #408]	; (8001244 <DATA_LOGGER_Init+0x2fc>)
 80010aa:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 80010ae:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010b0:	220d      	movs	r2, #13
 80010b2:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 80010b6:	4b5c      	ldr	r3, [pc, #368]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

	//Angle rate
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							TRUE);
 80010be:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80010c6:	4b57      	ldr	r3, [pc, #348]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3338      	adds	r3, #56	; 0x38
 80010cc:	4a56      	ldr	r2, [pc, #344]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ce:	6353      	str	r3, [r2, #52]	; 0x34
 80010d0:	4b55      	ldr	r3, [pc, #340]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010d2:	2229      	movs	r2, #41	; 0x29
 80010d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80010d8:	4b53      	ldr	r3, [pc, #332]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010da:	4a5b      	ldr	r2, [pc, #364]	; (8001248 <DATA_LOGGER_Init+0x300>)
 80010dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80010de:	4b52      	ldr	r3, [pc, #328]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010e0:	2209      	movs	r2, #9
 80010e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80010e6:	4b50      	ldr	r3, [pc, #320]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							TRUE);
 80010ec:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ee:	2203      	movs	r2, #3
 80010f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	333c      	adds	r3, #60	; 0x3c
 80010fa:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001100:	2229      	movs	r2, #41	; 0x29
 8001102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001108:	4a50      	ldr	r2, [pc, #320]	; (800124c <DATA_LOGGER_Init+0x304>)
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
 800110c:	4b46      	ldr	r3, [pc, #280]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800110e:	220a      	movs	r2, #10
 8001110:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001114:	4b44      	ldr	r3, [pc, #272]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001116:	2201      	movs	r2, #1
 8001118:	65da      	str	r2, [r3, #92]	; 0x5c
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					FALSE);
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800111c:	2204      	movs	r2, #4
 800111e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001122:	4b40      	ldr	r3, [pc, #256]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3340      	adds	r3, #64	; 0x40
 8001128:	4a3f      	ldr	r2, [pc, #252]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800112a:	6653      	str	r3, [r2, #100]	; 0x64
 800112c:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800112e:	2229      	movs	r2, #41	; 0x29
 8001130:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001134:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001136:	4a46      	ldr	r2, [pc, #280]	; (8001250 <DATA_LOGGER_Init+0x308>)
 8001138:	66da      	str	r2, [r3, #108]	; 0x6c
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800113c:	2208      	movs	r2, #8
 800113e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001144:	2200      	movs	r2, #0
 8001146:	675a      	str	r2, [r3, #116]	; 0x74

	//Acceleration
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_acc, 								FALSE);
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800114a:	2208      	movs	r2, #8
 800114c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	33ac      	adds	r3, #172	; 0xac
 8001156:	4a34      	ldr	r2, [pc, #208]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001158:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800115e:	2229      	movs	r2, #41	; 0x29
 8001160:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001166:	4a3b      	ldr	r2, [pc, #236]	; (8001254 <DATA_LOGGER_Init+0x30c>)
 8001168:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800116e:	2208      	movs	r2, #8
 8001170:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001176:	2200      	movs	r2, #0
 8001178:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_acc, 							FALSE);
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800117e:	2209      	movs	r2, #9
 8001180:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	33b0      	adds	r3, #176	; 0xb0
 800118a:	4a27      	ldr	r2, [pc, #156]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800118c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001192:	2229      	movs	r2, #41	; 0x29
 8001194:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <DATA_LOGGER_Init+0x310>)
 800119c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011a2:	2209      	movs	r2, #9
 80011a4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_acc, 								FALSE);
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011b2:	220a      	movs	r2, #10
 80011b4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	33b4      	adds	r3, #180	; 0xb4
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011c6:	2229      	movs	r2, #41	; 0x29
 80011c8:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <DATA_LOGGER_Init+0x314>)
 80011d0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011d6:	2207      	movs	r2, #7
 80011d8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	//Consignes angles rates
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_roll_gyro, 							FALSE);
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011e6:	220d      	movs	r2, #13
 80011e8:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011f6:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011fc:	2229      	movs	r2, #41	; 0x29
 80011fe:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001204:	4a16      	ldr	r2, [pc, #88]	; (8001260 <DATA_LOGGER_Init+0x318>)
 8001206:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800120c:	220d      	movs	r2, #13
 800120e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001214:	2200      	movs	r2, #0
 8001216:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_pitch_gyro, 						FALSE);
 800121a:	4b03      	ldr	r3, [pc, #12]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800121c:	220e      	movs	r2, #14
 800121e:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8001222:	e01f      	b.n	8001264 <DATA_LOGGER_Init+0x31c>
 8001224:	20001c98 	.word	0x20001c98
 8001228:	20001c9c 	.word	0x20001c9c
 800122c:	20000004 	.word	0x20000004
 8001230:	20000010 	.word	0x20000010
 8001234:	2000001c 	.word	0x2000001c
 8001238:	20000028 	.word	0x20000028
 800123c:	200000dc 	.word	0x200000dc
 8001240:	200000ec 	.word	0x200000ec
 8001244:	200000fc 	.word	0x200000fc
 8001248:	20000038 	.word	0x20000038
 800124c:	20000044 	.word	0x20000044
 8001250:	20000050 	.word	0x20000050
 8001254:	2000005c 	.word	0x2000005c
 8001258:	20000068 	.word	0x20000068
 800125c:	20000074 	.word	0x20000074
 8001260:	2000007c 	.word	0x2000007c
 8001264:	4bbd      	ldr	r3, [pc, #756]	; (800155c <DATA_LOGGER_Init+0x614>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f603 3364 	addw	r3, r3, #2916	; 0xb64
 800126c:	4abc      	ldr	r2, [pc, #752]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800126e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001272:	4bbb      	ldr	r3, [pc, #748]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001274:	2229      	movs	r2, #41	; 0x29
 8001276:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 800127a:	4bb9      	ldr	r3, [pc, #740]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800127c:	4ab9      	ldr	r2, [pc, #740]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800127e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8001282:	4bb7      	ldr	r3, [pc, #732]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001284:	220e      	movs	r2, #14
 8001286:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 800128a:	4bb5      	ldr	r3, [pc, #724]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800128c:	2200      	movs	r2, #0
 800128e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_YAW, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW], 		DATA_FORMAT_16B_FLOAT_1D, 	name_target_yaw_gyro, 		 					FALSE);
 8001292:	4bb3      	ldr	r3, [pc, #716]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001294:	220f      	movs	r2, #15
 8001296:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 800129a:	4bb0      	ldr	r3, [pc, #704]	; (800155c <DATA_LOGGER_Init+0x614>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 80012a2:	4aaf      	ldr	r2, [pc, #700]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012a4:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 80012a8:	4bad      	ldr	r3, [pc, #692]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012aa:	2229      	movs	r2, #41	; 0x29
 80012ac:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 80012b0:	4bab      	ldr	r3, [pc, #684]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012b2:	4aad      	ldr	r2, [pc, #692]	; (8001568 <DATA_LOGGER_Init+0x620>)
 80012b4:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80012b8:	4ba9      	ldr	r3, [pc, #676]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 80012c0:	4ba7      	ldr	r3, [pc, #668]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	//Angle Rate raw
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 							FALSE);
 80012c8:	4ba5      	ldr	r3, [pc, #660]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012ca:	2205      	movs	r2, #5
 80012cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80012d0:	4ba2      	ldr	r3, [pc, #648]	; (800155c <DATA_LOGGER_Init+0x614>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	4aa2      	ldr	r2, [pc, #648]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012d8:	67d3      	str	r3, [r2, #124]	; 0x7c
 80012da:	4ba1      	ldr	r3, [pc, #644]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012dc:	2229      	movs	r2, #41	; 0x29
 80012de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80012e2:	4b9f      	ldr	r3, [pc, #636]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012e4:	4aa1      	ldr	r2, [pc, #644]	; (800156c <DATA_LOGGER_Init+0x624>)
 80012e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80012ea:	4b9d      	ldr	r3, [pc, #628]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012ec:	220d      	movs	r2, #13
 80012ee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80012f2:	4b9b      	ldr	r3, [pc, #620]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,							FALSE);
 80012fa:	4b99      	ldr	r3, [pc, #612]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012fc:	2206      	movs	r2, #6
 80012fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001302:	4b96      	ldr	r3, [pc, #600]	; (800155c <DATA_LOGGER_Init+0x614>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001308:	4a95      	ldr	r2, [pc, #596]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800130a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800130e:	4b94      	ldr	r3, [pc, #592]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001310:	2229      	movs	r2, #41	; 0x29
 8001312:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8001316:	4b92      	ldr	r3, [pc, #584]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001318:	4a95      	ldr	r2, [pc, #596]	; (8001570 <DATA_LOGGER_Init+0x628>)
 800131a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800131e:	4b90      	ldr	r3, [pc, #576]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001320:	220e      	movs	r2, #14
 8001322:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8001326:	4b8e      	ldr	r3, [pc, #568]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001328:	2200      	movs	r2, #0
 800132a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 								FALSE);
 800132e:	4b8c      	ldr	r3, [pc, #560]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001330:	2207      	movs	r2, #7
 8001332:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8001336:	4b89      	ldr	r3, [pc, #548]	; (800155c <DATA_LOGGER_Init+0x614>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133c:	3308      	adds	r3, #8
 800133e:	4a88      	ldr	r2, [pc, #544]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001340:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8001344:	4b86      	ldr	r3, [pc, #536]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001346:	2229      	movs	r2, #41	; 0x29
 8001348:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 800134c:	4b84      	ldr	r3, [pc, #528]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800134e:	4a89      	ldr	r2, [pc, #548]	; (8001574 <DATA_LOGGER_Init+0x62c>)
 8001350:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8001354:	4b82      	ldr	r3, [pc, #520]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001356:	220c      	movs	r2, #12
 8001358:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800135c:	4b80      	ldr	r3, [pc, #512]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800135e:	2200      	movs	r2, #0
 8001360:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	//Barometer
	DEFINE_DATA(DATA_ID_PRESSURE, 		(uint8_t*)&sys->sensors.ms5611.pressure, 												DATA_FORMAT_16B_FLOAT_1D, 	name_pressure, 									FALSE);
 8001364:	4b7e      	ldr	r3, [pc, #504]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001366:	2216      	movs	r2, #22
 8001368:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 800136c:	4b7b      	ldr	r3, [pc, #492]	; (800155c <DATA_LOGGER_Init+0x614>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001374:	4a7a      	ldr	r2, [pc, #488]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001376:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800137a:	4b79      	ldr	r3, [pc, #484]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800137c:	2229      	movs	r2, #41	; 0x29
 800137e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8001382:	4b77      	ldr	r3, [pc, #476]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001384:	4a7c      	ldr	r2, [pc, #496]	; (8001578 <DATA_LOGGER_Init+0x630>)
 8001386:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800138a:	4b75      	ldr	r3, [pc, #468]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800138c:	2208      	movs	r2, #8
 800138e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8001392:	4b73      	ldr	r3, [pc, #460]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001394:	2200      	movs	r2, #0
 8001396:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	DEFINE_DATA(DATA_ID_TEMPERATURE, 	(uint8_t*)&sys->sensors.ms5611.temperature, 											DATA_FORMAT_16B_FLOAT_1D, 	name_temperature, 								FALSE);
 800139a:	4b71      	ldr	r3, [pc, #452]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800139c:	2217      	movs	r2, #23
 800139e:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80013a2:	4b6e      	ldr	r3, [pc, #440]	; (800155c <DATA_LOGGER_Init+0x614>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013aa:	4a6d      	ldr	r2, [pc, #436]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013ac:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
 80013b0:	4b6b      	ldr	r3, [pc, #428]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013b2:	2229      	movs	r2, #41	; 0x29
 80013b4:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 80013b8:	4b69      	ldr	r3, [pc, #420]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013ba:	4a70      	ldr	r2, [pc, #448]	; (800157c <DATA_LOGGER_Init+0x634>)
 80013bc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 80013c0:	4b67      	ldr	r3, [pc, #412]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013c2:	220b      	movs	r2, #11
 80013c4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80013c8:	4b65      	ldr	r3, [pc, #404]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	DEFINE_DATA(DATA_ID_ALTITUDE, 		(uint8_t*)&sys->sensors.ms5611.altitude, 												DATA_FORMAT_16B_FLOAT_1D, 	name_altitude, 									FALSE);
 80013d0:	4b63      	ldr	r3, [pc, #396]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013d2:	2218      	movs	r2, #24
 80013d4:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 80013d8:	4b60      	ldr	r3, [pc, #384]	; (800155c <DATA_LOGGER_Init+0x614>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013e0:	4a5f      	ldr	r2, [pc, #380]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013e2:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
 80013e6:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013e8:	2229      	movs	r2, #41	; 0x29
 80013ea:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013f0:	4a63      	ldr	r2, [pc, #396]	; (8001580 <DATA_LOGGER_Init+0x638>)
 80013f2:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80013f6:	4b5a      	ldr	r3, [pc, #360]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013f8:	2208      	movs	r2, #8
 80013fa:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 80013fe:	4b58      	ldr	r3, [pc, #352]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001400:	2200      	movs	r2, #0
 8001402:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254

	//Buttons
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_config_request, 							FALSE);
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001408:	2219      	movs	r2, #25
 800140a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 800140e:	4b54      	ldr	r3, [pc, #336]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001410:	2200      	movs	r2, #0
 8001412:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8001416:	4b52      	ldr	r3, [pc, #328]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800141e:	4b50      	ldr	r3, [pc, #320]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001420:	4a58      	ldr	r2, [pc, #352]	; (8001584 <DATA_LOGGER_Init+0x63c>)
 8001422:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8001426:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001428:	220b      	movs	r2, #11
 800142a:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 800142e:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001430:	2200      	movs	r2, #0
 8001432:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	DEFINE_DATA(DATA_ID_DISABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_disable_asser_orientation,  	TRUE);
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001438:	221a      	movs	r2, #26
 800143a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001440:	2200      	movs	r2, #0
 8001442:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 8001446:	4b46      	ldr	r3, [pc, #280]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 800144e:	4b44      	ldr	r3, [pc, #272]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001450:	4a4d      	ldr	r2, [pc, #308]	; (8001588 <DATA_LOGGER_Init+0x640>)
 8001452:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8001456:	4b42      	ldr	r3, [pc, #264]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001458:	220d      	movs	r2, #13
 800145a:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 800145e:	4b40      	ldr	r3, [pc, #256]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001460:	2201      	movs	r2, #1
 8001462:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	DEFINE_DATA(DATA_ID_ENABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_enable_asser_orientation, 		TRUE);
 8001466:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001468:	221b      	movs	r2, #27
 800146a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 800146e:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001470:	2200      	movs	r2, #0
 8001472:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001480:	4a42      	ldr	r2, [pc, #264]	; (800158c <DATA_LOGGER_Init+0x644>)
 8001482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8001486:	4b36      	ldr	r3, [pc, #216]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001488:	220c      	movs	r2, #12
 800148a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001490:	2201      	movs	r2, #1
 8001492:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	DEFINE_DATA(DATA_ID_START_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 					TRUE);
 8001496:	4b32      	ldr	r3, [pc, #200]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001498:	221c      	movs	r2, #28
 800149a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800149e:	4b30      	ldr	r3, [pc, #192]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014b0:	4a37      	ldr	r2, [pc, #220]	; (8001590 <DATA_LOGGER_Init+0x648>)
 80014b2:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014b8:	220e      	movs	r2, #14
 80014ba:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 							TRUE);
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014c8:	221d      	movs	r2, #29
 80014ca:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014e0:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <DATA_LOGGER_Init+0x64c>)
 80014e2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014e8:	220d      	movs	r2, #13
 80014ea:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

	//Propulsion
	DEFINE_DATA(DATA_ID_PROP_THRUST, (uint8_t*)&sys->propulsion.consigne[PROP_CONSIGNE_THRUST], 								DATA_FORMAT_16B_UINT16,  	name_prop_thrust, 								FALSE);
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014f8:	2215      	movs	r2, #21
 80014fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <DATA_LOGGER_Init+0x614>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f603 137a 	addw	r3, r3, #2426	; 0x97a
 8001506:	4a16      	ldr	r2, [pc, #88]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001508:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800150e:	222a      	movs	r2, #42	; 0x2a
 8001510:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001516:	4a20      	ldr	r2, [pc, #128]	; (8001598 <DATA_LOGGER_Init+0x650>)
 8001518:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800151e:	220b      	movs	r2, #11
 8001520:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001526:	2200      	movs	r2, #0
 8001528:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c


	//Others
	DEFINE_DATA(DATA_ID_FLIGHT_MODE, sys->soft.flight_mode, 																	DATA_FORMAT_8B, 			name_flight_mode, 								FALSE);
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800152e:	220c      	movs	r2, #12
 8001530:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <DATA_LOGGER_Init+0x614>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8d3 3b7c 	ldr.w	r3, [r3, #2940]	; 0xb7c
 800153c:	4a08      	ldr	r2, [pc, #32]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800153e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001544:	2214      	movs	r2, #20
 8001546:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <DATA_LOGGER_Init+0x654>)
 800154e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8001552:	4b03      	ldr	r3, [pc, #12]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001554:	220b      	movs	r2, #11
 8001556:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800155a:	e021      	b.n	80015a0 <DATA_LOGGER_Init+0x658>
 800155c:	20001c98 	.word	0x20001c98
 8001560:	20001c9c 	.word	0x20001c9c
 8001564:	2000008c 	.word	0x2000008c
 8001568:	2000009c 	.word	0x2000009c
 800156c:	200000ac 	.word	0x200000ac
 8001570:	200000bc 	.word	0x200000bc
 8001574:	200000cc 	.word	0x200000cc
 8001578:	20000124 	.word	0x20000124
 800157c:	20000118 	.word	0x20000118
 8001580:	20000130 	.word	0x20000130
 8001584:	2000013c 	.word	0x2000013c
 8001588:	20000158 	.word	0x20000158
 800158c:	20000148 	.word	0x20000148
 8001590:	20000168 	.word	0x20000168
 8001594:	20000178 	.word	0x20000178
 8001598:	2000010c 	.word	0x2000010c
 800159c:	20000188 	.word	0x20000188
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <DATA_LOGGER_Init+0x66c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134


}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20001c9c 	.word	0x20001c9c

080015b8 <DATA_LOGGER_Start>:

void DATA_LOGGER_Start(){
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <DATA_LOGGER_Start+0x14>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	20001f70 	.word	0x20001f70

080015d0 <DATA_LOGGER_Stop>:

void DATA_LOGGER_Stop(){
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <DATA_LOGGER_Stop+0x14>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	20001f74 	.word	0x20001f74

080015e8 <DATA_LOGGER_Main>:

void DATA_LOGGER_Main(void){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

	static data_logger_state_e previous_state 	= LOGGER_TRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 80015ee:	4b6b      	ldr	r3, [pc, #428]	; (800179c <DATA_LOGGER_Main+0x1b4>)
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	4b6b      	ldr	r3, [pc, #428]	; (80017a0 <DATA_LOGGER_Main+0x1b8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	bf14      	ite	ne
 80015fa:	2301      	movne	r3, #1
 80015fc:	2300      	moveq	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	603b      	str	r3, [r7, #0]
	previous_state = state ;
 8001602:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <DATA_LOGGER_Main+0x1b8>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b65      	ldr	r3, [pc, #404]	; (800179c <DATA_LOGGER_Main+0x1b4>)
 8001608:	701a      	strb	r2, [r3, #0]

	switch(state){
 800160a:	4b65      	ldr	r3, [pc, #404]	; (80017a0 <DATA_LOGGER_Main+0x1b8>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d036      	beq.n	8001680 <DATA_LOGGER_Main+0x98>
 8001612:	2b02      	cmp	r3, #2
 8001614:	d07e      	beq.n	8001714 <DATA_LOGGER_Main+0x12c>
 8001616:	2b00      	cmp	r3, #0
 8001618:	d000      	beq.n	800161c <DATA_LOGGER_Main+0x34>
				}
			}
			break;
	}

}
 800161a:	e0ba      	b.n	8001792 <DATA_LOGGER_Main+0x1aa>
			if(entrance){
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <DATA_LOGGER_Main+0x42>
				SCHEDULER_reschedule_task(TASK_LOGGER, 2000000);
 8001622:	4960      	ldr	r1, [pc, #384]	; (80017a4 <DATA_LOGGER_Main+0x1bc>)
 8001624:	200d      	movs	r0, #13
 8001626:	f002 f987 	bl	8003938 <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(DATA_ID_CONFIG_REQUEST, tmp);
 800162a:	495f      	ldr	r1, [pc, #380]	; (80017a8 <DATA_LOGGER_Main+0x1c0>)
 800162c:	2019      	movs	r0, #25
 800162e:	f000 fa4d 	bl	8001acc <DATA_LOGGER_Get_Data_Config>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <DATA_LOGGER_Main+0x1c4>)
 8001638:	701a      	strb	r2, [r3, #0]
			TELEMETRY_Send_Data(tmp, tmp_len);
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <DATA_LOGGER_Main+0x1c4>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	4859      	ldr	r0, [pc, #356]	; (80017a8 <DATA_LOGGER_Main+0x1c0>)
 8001642:	f005 ffe1 	bl	8007608 <TELEMETRY_Send_Data>
			if(start_flag){
 8001646:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <DATA_LOGGER_Main+0x1c8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80a0 	beq.w	8001790 <DATA_LOGGER_Main+0x1a8>
				start_flag = FALSE;
 8001650:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <DATA_LOGGER_Main+0x1c8>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
				stop_flag = FALSE;
 8001656:	4b57      	ldr	r3, [pc, #348]	; (80017b4 <DATA_LOGGER_Main+0x1cc>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
				if(config_not_sent){
 800165c:	4b56      	ldr	r3, [pc, #344]	; (80017b8 <DATA_LOGGER_Main+0x1d0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d009      	beq.n	8001678 <DATA_LOGGER_Main+0x90>
					id_init_counter = 0;
 8001664:	4b55      	ldr	r3, [pc, #340]	; (80017bc <DATA_LOGGER_Main+0x1d4>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 800166a:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <DATA_LOGGER_Main+0x1d8>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <DATA_LOGGER_Main+0x1b8>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
			break;
 8001676:	e08b      	b.n	8001790 <DATA_LOGGER_Main+0x1a8>
					state = LOGGER_LOG;
 8001678:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <DATA_LOGGER_Main+0x1b8>)
 800167a:	2202      	movs	r2, #2
 800167c:	701a      	strb	r2, [r3, #0]
			break;
 800167e:	e087      	b.n	8001790 <DATA_LOGGER_Main+0x1a8>
			if(entrance)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00a      	beq.n	800169c <DATA_LOGGER_Main+0xb4>
				SCHEDULER_reschedule_task(TASK_LOGGER, 500000);	//On abaisse la fréquence de la tâche pendant l'init
 8001686:	494f      	ldr	r1, [pc, #316]	; (80017c4 <DATA_LOGGER_Main+0x1dc>)
 8001688:	200d      	movs	r0, #13
 800168a:	f002 f955 	bl	8003938 <SCHEDULER_reschedule_task>
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 800168e:	e005      	b.n	800169c <DATA_LOGGER_Main+0xb4>
				id_init_counter ++ ;
 8001690:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <DATA_LOGGER_Main+0x1d4>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b48      	ldr	r3, [pc, #288]	; (80017bc <DATA_LOGGER_Main+0x1d4>)
 800169a:	701a      	strb	r2, [r3, #0]
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 800169c:	4b47      	ldr	r3, [pc, #284]	; (80017bc <DATA_LOGGER_Main+0x1d4>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4a49      	ldr	r2, [pc, #292]	; (80017c8 <DATA_LOGGER_Main+0x1e0>)
 80016a4:	460b      	mov	r3, r1
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	440b      	add	r3, r1
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	3314      	adds	r3, #20
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <DATA_LOGGER_Main+0xd6>
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <DATA_LOGGER_Main+0x1d4>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b1d      	cmp	r3, #29
 80016bc:	d9e8      	bls.n	8001690 <DATA_LOGGER_Main+0xa8>
			if(id_init_counter < DATA_ID_COUNT){
 80016be:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <DATA_LOGGER_Main+0x1d4>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b1d      	cmp	r3, #29
 80016c4:	d817      	bhi.n	80016f6 <DATA_LOGGER_Main+0x10e>
				is_any_data_used = TRUE;
 80016c6:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <DATA_LOGGER_Main+0x1d8>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 80016cc:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <DATA_LOGGER_Main+0x1d4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	b2d1      	uxtb	r1, r2
 80016d4:	4a39      	ldr	r2, [pc, #228]	; (80017bc <DATA_LOGGER_Main+0x1d4>)
 80016d6:	7011      	strb	r1, [r2, #0]
 80016d8:	4933      	ldr	r1, [pc, #204]	; (80017a8 <DATA_LOGGER_Main+0x1c0>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f9f6 	bl	8001acc <DATA_LOGGER_Get_Data_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b31      	ldr	r3, [pc, #196]	; (80017ac <DATA_LOGGER_Main+0x1c4>)
 80016e6:	701a      	strb	r2, [r3, #0]
				TELEMETRY_Send_Data(tmp, tmp_len);
 80016e8:	4b30      	ldr	r3, [pc, #192]	; (80017ac <DATA_LOGGER_Main+0x1c4>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	482e      	ldr	r0, [pc, #184]	; (80017a8 <DATA_LOGGER_Main+0x1c0>)
 80016f0:	f005 ff8a 	bl	8007608 <TELEMETRY_Send_Data>
			break;
 80016f4:	e04d      	b.n	8001792 <DATA_LOGGER_Main+0x1aa>
				if(is_any_data_used)
 80016f6:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <DATA_LOGGER_Main+0x1d8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <DATA_LOGGER_Main+0x124>
					config_not_sent = FALSE ;
 80016fe:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <DATA_LOGGER_Main+0x1d0>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
					state = LOGGER_LOG ;
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <DATA_LOGGER_Main+0x1b8>)
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
			break;
 800170a:	e042      	b.n	8001792 <DATA_LOGGER_Main+0x1aa>
					state = LOGGER_IDDLE ;
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <DATA_LOGGER_Main+0x1b8>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
			break;
 8001712:	e03e      	b.n	8001792 <DATA_LOGGER_Main+0x1aa>
			if(entrance)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <DATA_LOGGER_Main+0x13c>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);	//On reprend une fréquence plus importante pour l'envoit en flux continu
 800171a:	f242 7110 	movw	r1, #10000	; 0x2710
 800171e:	200d      	movs	r0, #13
 8001720:	f002 f90a 	bl	8003938 <SCHEDULER_reschedule_task>
			if(stop_flag)
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <DATA_LOGGER_Main+0x1cc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <DATA_LOGGER_Main+0x14a>
				state = LOGGER_IDDLE;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <DATA_LOGGER_Main+0x1b8>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 8001732:	2300      	movs	r3, #0
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	e027      	b.n	8001788 <DATA_LOGGER_Main+0x1a0>
				if(data_list[d].used && (data_list[d].format != DATA_FORMAT_0B_BUTTON))
 8001738:	79fa      	ldrb	r2, [r7, #7]
 800173a:	4923      	ldr	r1, [pc, #140]	; (80017c8 <DATA_LOGGER_Main+0x1e0>)
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3314      	adds	r3, #20
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d019      	beq.n	8001782 <DATA_LOGGER_Main+0x19a>
 800174e:	79fa      	ldrb	r2, [r7, #7]
 8001750:	491d      	ldr	r1, [pc, #116]	; (80017c8 <DATA_LOGGER_Main+0x1e0>)
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3309      	adds	r3, #9
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00e      	beq.n	8001782 <DATA_LOGGER_Main+0x19a>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4910      	ldr	r1, [pc, #64]	; (80017a8 <DATA_LOGGER_Main+0x1c0>)
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f8c9 	bl	8001900 <DATA_LOGGER_Get_Data_Value>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <DATA_LOGGER_Main+0x1c4>)
 8001774:	701a      	strb	r2, [r3, #0]
					TELEMETRY_Send_Data(tmp, tmp_len);
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <DATA_LOGGER_Main+0x1c4>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4619      	mov	r1, r3
 800177c:	480a      	ldr	r0, [pc, #40]	; (80017a8 <DATA_LOGGER_Main+0x1c0>)
 800177e:	f005 ff43 	bl	8007608 <TELEMETRY_Send_Data>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	3301      	adds	r3, #1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b1d      	cmp	r3, #29
 800178c:	d9d4      	bls.n	8001738 <DATA_LOGGER_Main+0x150>
			break;
 800178e:	e000      	b.n	8001792 <DATA_LOGGER_Main+0x1aa>
			break;
 8001790:	bf00      	nop
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000194 	.word	0x20000194
 80017a0:	20001f6c 	.word	0x20001f6c
 80017a4:	001e8480 	.word	0x001e8480
 80017a8:	20001f78 	.word	0x20001f78
 80017ac:	20001f8c 	.word	0x20001f8c
 80017b0:	20001f70 	.word	0x20001f70
 80017b4:	20001f74 	.word	0x20001f74
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20001f8d 	.word	0x20001f8d
 80017c0:	20001f90 	.word	0x20001f90
 80017c4:	0007a120 	.word	0x0007a120
 80017c8:	20001c9c 	.word	0x20001c9c

080017cc <DATA_LOGGER_Reception>:

void DATA_LOGGER_Reception(uint8_t * input_buffer){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	73fb      	strb	r3, [r7, #15]

	switch(data_list[id].format){
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	4946      	ldr	r1, [pc, #280]	; (80018f8 <DATA_LOGGER_Reception+0x12c>)
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3309      	adds	r3, #9
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b29      	cmp	r3, #41	; 0x29
 80017ee:	d87d      	bhi.n	80018ec <DATA_LOGGER_Reception+0x120>
 80017f0:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <DATA_LOGGER_Reception+0x2c>)
 80017f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f6:	bf00      	nop
 80017f8:	080018a1 	.word	0x080018a1
 80017fc:	080018ed 	.word	0x080018ed
 8001800:	080018ed 	.word	0x080018ed
 8001804:	080018ed 	.word	0x080018ed
 8001808:	080018ed 	.word	0x080018ed
 800180c:	080018ed 	.word	0x080018ed
 8001810:	080018ed 	.word	0x080018ed
 8001814:	080018ed 	.word	0x080018ed
 8001818:	080018ed 	.word	0x080018ed
 800181c:	080018ed 	.word	0x080018ed
 8001820:	080018ed 	.word	0x080018ed
 8001824:	080018ed 	.word	0x080018ed
 8001828:	080018ed 	.word	0x080018ed
 800182c:	080018ed 	.word	0x080018ed
 8001830:	080018ed 	.word	0x080018ed
 8001834:	080018ed 	.word	0x080018ed
 8001838:	080018ed 	.word	0x080018ed
 800183c:	080018ed 	.word	0x080018ed
 8001840:	080018ed 	.word	0x080018ed
 8001844:	080018ed 	.word	0x080018ed
 8001848:	080018ed 	.word	0x080018ed
 800184c:	080018ed 	.word	0x080018ed
 8001850:	080018ed 	.word	0x080018ed
 8001854:	080018ed 	.word	0x080018ed
 8001858:	080018ed 	.word	0x080018ed
 800185c:	080018ed 	.word	0x080018ed
 8001860:	080018ed 	.word	0x080018ed
 8001864:	080018ed 	.word	0x080018ed
 8001868:	080018ed 	.word	0x080018ed
 800186c:	080018ed 	.word	0x080018ed
 8001870:	080018ed 	.word	0x080018ed
 8001874:	080018ed 	.word	0x080018ed
 8001878:	080018ed 	.word	0x080018ed
 800187c:	080018ed 	.word	0x080018ed
 8001880:	080018ed 	.word	0x080018ed
 8001884:	080018ed 	.word	0x080018ed
 8001888:	080018ed 	.word	0x080018ed
 800188c:	080018ed 	.word	0x080018ed
 8001890:	080018ed 	.word	0x080018ed
 8001894:	080018ed 	.word	0x080018ed
 8001898:	080018ed 	.word	0x080018ed
 800189c:	080018ed 	.word	0x080018ed
		case DATA_FORMAT_0B_BUTTON:
			//We can create an action for each id
			switch(id)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	3b19      	subs	r3, #25
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d81f      	bhi.n	80018e8 <DATA_LOGGER_Reception+0x11c>
 80018a8:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <DATA_LOGGER_Reception+0xe4>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018c5 	.word	0x080018c5
 80018b4:	080018d5 	.word	0x080018d5
 80018b8:	080018cd 	.word	0x080018cd
 80018bc:	080018dd 	.word	0x080018dd
 80018c0:	080018e3 	.word	0x080018e3
			{
				default:
					break;
				case DATA_ID_CONFIG_REQUEST:
					start_flag = TRUE;
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <DATA_LOGGER_Reception+0x130>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
					break;
 80018ca:	e00e      	b.n	80018ea <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_ENABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f002 feef 	bl	80046b0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 80018d2:	e00a      	b.n	80018ea <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_DISABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f002 feeb 	bl	80046b0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 80018da:	e006      	b.n	80018ea <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_START_TRANSFER:
					DATA_LOGGER_Start();
 80018dc:	f7ff fe6c 	bl	80015b8 <DATA_LOGGER_Start>
					break;
 80018e0:	e003      	b.n	80018ea <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_STOP_TRANSFER:
					DATA_LOGGER_Stop();
 80018e2:	f7ff fe75 	bl	80015d0 <DATA_LOGGER_Stop>
					break;
 80018e6:	e000      	b.n	80018ea <DATA_LOGGER_Reception+0x11e>
					break;
 80018e8:	bf00      	nop
			}
			break;
 80018ea:	e000      	b.n	80018ee <DATA_LOGGER_Reception+0x122>
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			break;
		default:
			break;
 80018ec:	bf00      	nop

	}
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20001c9c 	.word	0x20001c9c
 80018fc:	20001f70 	.word	0x20001f70

08001900 <DATA_LOGGER_Get_Data_Value>:

uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer){
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	73fb      	strb	r3, [r7, #15]

//	uint16_t tmp_u16 = 0;
	int16_t tmp_16 = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	613b      	str	r3, [r7, #16]

	//Premier octet contient l'id
	buffer[0] = id ;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	701a      	strb	r2, [r3, #0]

	//Formatage de la donnée en fonction du type et du format
	switch(data_list[id].format){
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	4969      	ldr	r1, [pc, #420]	; (8001ac4 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	3309      	adds	r3, #9
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	3b14      	subs	r3, #20
 8001930:	2b17      	cmp	r3, #23
 8001932:	f200 80af 	bhi.w	8001a94 <DATA_LOGGER_Get_Data_Value+0x194>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <DATA_LOGGER_Get_Data_Value+0x3c>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	0800199d 	.word	0x0800199d
 8001940:	08001a95 	.word	0x08001a95
 8001944:	08001a95 	.word	0x08001a95
 8001948:	080019b9 	.word	0x080019b9
 800194c:	08001a95 	.word	0x08001a95
 8001950:	08001a95 	.word	0x08001a95
 8001954:	08001a95 	.word	0x08001a95
 8001958:	08001a95 	.word	0x08001a95
 800195c:	08001a95 	.word	0x08001a95
 8001960:	08001a95 	.word	0x08001a95
 8001964:	08001a95 	.word	0x08001a95
 8001968:	08001a95 	.word	0x08001a95
 800196c:	08001a95 	.word	0x08001a95
 8001970:	08001a95 	.word	0x08001a95
 8001974:	08001a95 	.word	0x08001a95
 8001978:	08001a95 	.word	0x08001a95
 800197c:	08001a95 	.word	0x08001a95
 8001980:	08001a95 	.word	0x08001a95
 8001984:	08001a95 	.word	0x08001a95
 8001988:	08001a95 	.word	0x08001a95
 800198c:	08001a95 	.word	0x08001a95
 8001990:	080019e9 	.word	0x080019e9
 8001994:	08001a31 	.word	0x08001a31
 8001998:	08001a63 	.word	0x08001a63
		case DATA_FORMAT_8B:
			buffer[1] = *data_list[id].data ;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	4949      	ldr	r1, [pc, #292]	; (8001ac4 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	3304      	adds	r3, #4
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3301      	adds	r3, #1
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	701a      	strb	r2, [r3, #0]
			break;
 80019b6:	e06e      	b.n	8001a96 <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_8B_PWM:
			break;
		case DATA_FORMAT_8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	4942      	ldr	r1, [pc, #264]	; (8001ac4 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	3304      	adds	r3, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 80019ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80019d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80019da:	793b      	ldrb	r3, [r7, #4]
 80019dc:	b25a      	sxtb	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3301      	adds	r3, #1
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]
			break;
 80019e6:	e056      	b.n	8001a96 <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_8B_FLOAT_1D:
			break;
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	4936      	ldr	r1, [pc, #216]	; (8001ac4 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3304      	adds	r3, #4
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 80019fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0e:	ee17 3a90 	vmov	r3, s15
 8001a12:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001a14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a18:	121b      	asrs	r3, r3, #8
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	3302      	adds	r3, #2
 8001a28:	8afa      	ldrh	r2, [r7, #22]
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]
			break;
 8001a2e:	e032      	b.n	8001a96 <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	4924      	ldr	r1, [pc, #144]	; (8001ac4 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3304      	adds	r3, #4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001a46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a4a:	121b      	asrs	r3, r3, #8
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3302      	adds	r3, #2
 8001a5a:	8afa      	ldrh	r2, [r7, #22]
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
			break;
 8001a60:	e019      	b.n	8001a96 <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	4917      	ldr	r1, [pc, #92]	; (8001ac4 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	3304      	adds	r3, #4
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001a78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a7c:	121b      	asrs	r3, r3, #8
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3301      	adds	r3, #1
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	8afa      	ldrh	r2, [r7, #22]
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]
			break;
 8001a92:	e000      	b.n	8001a96 <DATA_LOGGER_Get_Data_Value+0x196>
		default:
			break;
 8001a94:	bf00      	nop
	}

	//Return the len of data
	return (data_list[id].format / 20) + 1;
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	490a      	ldr	r1, [pc, #40]	; (8001ac4 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3309      	adds	r3, #9
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <DATA_LOGGER_Get_Data_Value+0x1c8>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b2db      	uxtb	r3, r3

}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20001c9c 	.word	0x20001c9c
 8001ac8:	cccccccd 	.word	0xcccccccd

08001acc <DATA_LOGGER_Get_Data_Config>:

uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer){
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
	//New data so we start with 255
	buffer[0] = 255;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	22ff      	movs	r2, #255	; 0xff
 8001adc:	701a      	strb	r2, [r3, #0]
	//Then name len
	buffer[1] = data_list[id].len_name;
 8001ade:	79fa      	ldrb	r2, [r7, #7]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	1c59      	adds	r1, r3, #1
 8001ae4:	481f      	ldr	r0, [pc, #124]	; (8001b64 <DATA_LOGGER_Get_Data_Config+0x98>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4403      	add	r3, r0
 8001af0:	3310      	adds	r3, #16
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	700b      	strb	r3, [r1, #0]
	//Then format
	buffer[2] = data_list[id].format ;
 8001af6:	79fa      	ldrb	r2, [r7, #7]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	1c99      	adds	r1, r3, #2
 8001afc:	4819      	ldr	r0, [pc, #100]	; (8001b64 <DATA_LOGGER_Get_Data_Config+0x98>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4403      	add	r3, r0
 8001b08:	3309      	adds	r3, #9
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	700b      	strb	r3, [r1, #0]
	//Taille du nom
	buffer[3] = id	 ;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	3303      	adds	r3, #3
 8001b12:	79fa      	ldrb	r2, [r7, #7]
 8001b14:	701a      	strb	r2, [r3, #0]
	//Copie du nom
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	1d18      	adds	r0, r3, #4
 8001b1a:	79fa      	ldrb	r2, [r7, #7]
 8001b1c:	4911      	ldr	r1, [pc, #68]	; (8001b64 <DATA_LOGGER_Get_Data_Config+0x98>)
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	440b      	add	r3, r1
 8001b28:	330c      	adds	r3, #12
 8001b2a:	681c      	ldr	r4, [r3, #0]
 8001b2c:	79fa      	ldrb	r2, [r7, #7]
 8001b2e:	490d      	ldr	r1, [pc, #52]	; (8001b64 <DATA_LOGGER_Get_Data_Config+0x98>)
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	440b      	add	r3, r1
 8001b3a:	3310      	adds	r3, #16
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4621      	mov	r1, r4
 8001b42:	f00d ffa1 	bl	800fa88 <memcpy>

	//And that s it
	return 4 + data_list[id].len_name ;
 8001b46:	79fa      	ldrb	r2, [r7, #7]
 8001b48:	4906      	ldr	r1, [pc, #24]	; (8001b64 <DATA_LOGGER_Get_Data_Config+0x98>)
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	3310      	adds	r3, #16
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	b2db      	uxtb	r3, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	20001c9c 	.word	0x20001c9c

08001b68 <DATA_LOGGER_Get_Data>:

data_t * DATA_LOGGER_Get_Data(data_id_e id){
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8001b72:	79fa      	ldrb	r2, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <DATA_LOGGER_Get_Data+0x24>)
 8001b7e:	4413      	add	r3, r2
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20001c9c 	.word	0x20001c9c

08001b90 <angle_180>:
static float absolu(float x);
//static float acc_correction(float x);
static float angle_180(float x);


static float angle_180(float x){
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 180)
 8001b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b9e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001bf4 <angle_180+0x64>
 8001ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	dd08      	ble.n	8001bbe <angle_180+0x2e>
		x -= 360;
 8001bac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001bf8 <angle_180+0x68>
 8001bb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bbc:	e010      	b.n	8001be0 <angle_180+0x50>
	else if( x < -180)
 8001bbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001bfc <angle_180+0x6c>
 8001bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	d507      	bpl.n	8001be0 <angle_180+0x50>
		x += 360 ;
 8001bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bf8 <angle_180+0x68>
 8001bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bdc:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	ee07 3a90 	vmov	s15, r3
}
 8001be6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	43340000 	.word	0x43340000
 8001bf8:	43b40000 	.word	0x43b40000
 8001bfc:	c3340000 	.word	0xc3340000

08001c00 <absolu>:

static float absolu(float x){
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	ed87 0a01 	vstr	s0, [r7, #4]
	if( x > 0)
 8001c0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c16:	dd02      	ble.n	8001c1e <absolu+0x1e>
		return x ;
 8001c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c1c:	e003      	b.n	8001c26 <absolu+0x26>
	else
		return -x ;
 8001c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c22:	eef1 7a67 	vneg.f32	s15, s15
}
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <ORIENTATION_Init>:
//static float acc_correction(float x){
//	x = ( x > 0) ? 180 - x : -180 -x ;
//	return x ;
//}

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
	//Link data structures
	orientation->acc = acc ;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
	orientation->gyro = gyro ;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	621a      	str	r2, [r3, #32]
	orientation->angular_velocity = gyro->filtered ;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f103 0208 	add.w	r2, r3, #8
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	60da      	str	r2, [r3, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
	orientation->periode = (float)1 / (float)frequency ;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	orientation->alpha = ORIENTATION_ALPHA ;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <ORIENTATION_Init+0x84>)
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e011      	b.n	8001ca6 <ORIENTATION_Init+0x72>
	{
		orientation->angular_position[x] = 0 ;
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
		orientation->angular_velocity[x] = 0 ;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < 3; x++)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	ddea      	ble.n	8001c82 <ORIENTATION_Init+0x4e>
	}

}
 8001cac:	bf00      	nop
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	3f7f7cee 	.word	0x3f7f7cee

08001cbc <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	//Just to make the code shorter
	acc_t * acc = orientation->acc ;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_t * gyro = orientation->gyro ;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	623b      	str	r3, [r7, #32]

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ORIENTATION_ROLL] * acc->filtered[ORIENTATION_ROLL] ;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ORIENTATION_PITCH] * acc->filtered[ORIENTATION_PITCH] ;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ORIENTATION_YAW] * acc->filtered[ORIENTATION_YAW] ;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d10:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d18:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total = sqrtf(acc_total);
 8001d1c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001d20:	f010 fd4c 	bl	80127bc <sqrtf>
 8001d24:	ed87 0a07 	vstr	s0, [r7, #28]

	if(acc_total)	//To avoid /0
 8001d28:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	d049      	beq.n	8001dca <ORIENTATION_Update+0x10e>
	{
		if(absolu(acc->filtered[ORIENTATION_ROLL]) < acc_total)	//To avoid asin x with x greater than 1
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d40:	f7ff ff5e 	bl	8001c00 <absolu>
 8001d44:	eeb0 7a40 	vmov.f32	s14, s0
 8001d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	dd15      	ble.n	8001d82 <ORIENTATION_Update+0xc6>
			orientation->acc_angles[ORIENTATION_PITCH] = -asinf(acc->filtered[ORIENTATION_ROLL] / acc_total) * 57.32f;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d64:	eeb0 0a66 	vmov.f32	s0, s13
 8001d68:	f010 fb6c 	bl	8012444 <asinf>
 8001d6c:	eef0 7a40 	vmov.f32	s15, s0
 8001d70:	eef1 7a67 	vneg.f32	s15, s15
 8001d74:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001f5c <ORIENTATION_Update+0x2a0>
 8001d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	edc3 7a05 	vstr	s15, [r3, #20]
		if(absolu(acc->filtered[ORIENTATION_PITCH]) < acc_total) 	//To avoid asin x with x greater than 1
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	f7ff ff38 	bl	8001c00 <absolu>
 8001d90:	eeb0 7a40 	vmov.f32	s14, s0
 8001d94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	dd13      	ble.n	8001dca <ORIENTATION_Update+0x10e>
			orientation->acc_angles[ORIENTATION_ROLL] = asinf(acc->filtered[ORIENTATION_PITCH] / acc_total) * 57.32f;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001da8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001db0:	eeb0 0a66 	vmov.f32	s0, s13
 8001db4:	f010 fb46 	bl	8012444 <asinf>
 8001db8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dbc:	eddf 7a67 	vldr	s15, [pc, #412]	; 8001f5c <ORIENTATION_Update+0x2a0>
 8001dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	edc3 7a04 	vstr	s15, [r3, #16]
//			orientation->acc_angles[ACC_AXE_Y] = acc_correction(orientation->acc_angles[ACC_AXE_Y]);
//		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 8001dca:	4b65      	ldr	r3, [pc, #404]	; (8001f60 <ORIENTATION_Update+0x2a4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00f      	beq.n	8001df2 <ORIENTATION_Update+0x136>
	{
		orientation->angular_position[ORIENTATION_ROLL] = orientation->acc_angles[ORIENTATION_ROLL] ;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	601a      	str	r2, [r3, #0]
		orientation->angular_position[ORIENTATION_PITCH] = orientation->acc_angles[ORIENTATION_PITCH] ;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	605a      	str	r2, [r3, #4]
		orientation->angular_position[ORIENTATION_YAW] = 0 ;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
		first_use = FALSE ;
 8001dea:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <ORIENTATION_Update+0x2a4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
		orientation->angular_position[ORIENTATION_PITCH] = orientation->alpha * orientation->angular_position[ORIENTATION_PITCH] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_PITCH];



	}
}
 8001df0:	e0af      	b.n	8001f52 <ORIENTATION_Update+0x296>
		float dx = gyro->filtered[ORIENTATION_ROLL] * orientation->periode ;
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e02:	edc7 7a06 	vstr	s15, [r7, #24]
		float dy = gyro->filtered[ORIENTATION_PITCH] * orientation->periode ;
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e16:	edc7 7a05 	vstr	s15, [r7, #20]
		float dz = gyro->filtered[ORIENTATION_YAW] * orientation->periode ;
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	edc7 7a04 	vstr	s15, [r7, #16]
		orientation->angular_position[ORIENTATION_ROLL] += dx ;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	ed93 7a00 	vldr	s14, [r3]
 8001e34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] += dy ;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[ORIENTATION_YAW] += dz ;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edc3 7a02 	vstr	s15, [r3, #8]
		float sin_dz = sinf(0.01745329251f * dz);
 8001e6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001f64 <ORIENTATION_Update+0x2a8>
 8001e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e76:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7a:	f010 faa1 	bl	80123c0 <sinf>
 8001e7e:	ed87 0a03 	vstr	s0, [r7, #12]
		orientation->angular_position[ORIENTATION_ROLL] += sin_dz * orientation->angular_position[ORIENTATION_PITCH] ;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	ed93 7a00 	vldr	s14, [r3]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] -= sin_dz * orientation->angular_position[ORIENTATION_ROLL] ;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	edd3 6a00 	vldr	s13, [r3]
 8001eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[ORIENTATION_ROLL] = angle_180(orientation->angular_position[ORIENTATION_ROLL]);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	f7ff fe62 	bl	8001b90 <angle_180>
 8001ecc:	eef0 7a40 	vmov.f32	s15, s0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] = angle_180(orientation->angular_position[ORIENTATION_PITCH]);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001edc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee0:	f7ff fe56 	bl	8001b90 <angle_180>
 8001ee4:	eef0 7a40 	vmov.f32	s15, s0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[ORIENTATION_ROLL] = orientation->alpha * orientation->angular_position[ORIENTATION_ROLL] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_ROLL];
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001f04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] = orientation->alpha * orientation->angular_position[ORIENTATION_PITCH] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_PITCH];
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	426547ae 	.word	0x426547ae
 8001f60:	20000198 	.word	0x20000198
 8001f64:	3c8efa35 	.word	0x3c8efa35

08001f68 <POSITION_Init>:
 *      Author: Théo
 */

#include "position.h"

void POSITION_Init(position_t * position, orientation_t * orientation, acc_t * acc, int32_t frequency){
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]

	//Links to recquired data structures
	position->orientation = orientation ;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
	position->acc = acc ;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
	position->acceleration_drone = acc->filtered ;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f103 0208 	add.w	r2, r3, #8
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24

	//Configure our frequency
	position->frequency = frequency ;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
	position->periode = (float)1 / (float)frequency ;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	//Init our values to zero
	for(int axe = 0; axe < 3; axe++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e01a      	b.n	8001fe6 <POSITION_Init+0x7e>
	{
		position->position[axe] = 0 ;
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
		position->velocity[axe] = 0 ;
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
		position->acceleration[axe] = 0;
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3306      	adds	r3, #6
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
	for(int axe = 0; axe < 3; axe++)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	dde1      	ble.n	8001fb0 <POSITION_Init+0x48>
	}
}
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <POSITION_Update>:

void POSITION_Update(position_t * position){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

	//Projette l'accélération du drone dans le "repère de la terre"
	float sin_alpha = sinf(position->orientation->angular_position[ORIENTATION_ROLL] * 0.01745329251f);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002128 <POSITION_Update+0x130>
 800200c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002010:	eeb0 0a67 	vmov.f32	s0, s15
 8002014:	f010 f9d4 	bl	80123c0 <sinf>
 8002018:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float cos_alpha = cosf(position->orientation->angular_position[ORIENTATION_ROLL] * 0.01745329251f);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002128 <POSITION_Update+0x130>
 8002028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202c:	eeb0 0a67 	vmov.f32	s0, s15
 8002030:	f010 f986 	bl	8012340 <cosf>
 8002034:	ed87 0a08 	vstr	s0, [r7, #32]
	float sin_beta = sinf(position->orientation->angular_position[ORIENTATION_PITCH] * 0.01745329251f);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002040:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002128 <POSITION_Update+0x130>
 8002044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002048:	eeb0 0a67 	vmov.f32	s0, s15
 800204c:	f010 f9b8 	bl	80123c0 <sinf>
 8002050:	ed87 0a07 	vstr	s0, [r7, #28]
	float cos_beta = cosf(position->orientation->angular_position[ORIENTATION_PITCH] * 0.01745329251f);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	edd3 7a01 	vldr	s15, [r3, #4]
 800205c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002128 <POSITION_Update+0x130>
 8002060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002064:	eeb0 0a67 	vmov.f32	s0, s15
 8002068:	f010 f96a 	bl	8012340 <cosf>
 800206c:	ed87 0a06 	vstr	s0, [r7, #24]

	float acc_x = position->acc->filtered[ORIENTATION_ROLL];
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	617b      	str	r3, [r7, #20]
	float acc_y = position->acc->filtered[ORIENTATION_PITCH];
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	613b      	str	r3, [r7, #16]
	float acc_z = position->acc->filtered[ORIENTATION_YAW];
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	60fb      	str	r3, [r7, #12]

	//Equations :
	// https://fr.wikipedia.org/wiki/Matrice_de_rotation
	// https://photos.google.com/photo/AF1QipPC2YkgS1dSJ5Y0lUlfNZ84SxoZOmHYG-Z7rT-n

	position->acceleration[POSITION_AXE_X] = acc_x * cos_beta + sin_beta * (sin_alpha * acc_y + cos_alpha * acc_z) ;
 8002088:	ed97 7a05 	vldr	s14, [r7, #20]
 800208c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002094:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002098:	edd7 7a04 	vldr	s15, [r7, #16]
 800209c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020a0:	ed97 6a08 	vldr	s12, [r7, #32]
 80020a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	edc3 7a06 	vstr	s15, [r3, #24]
	position->acceleration[POSITION_AXE_Y] = acc_y * sin_beta - acc_z * sin_alpha ;
 80020c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80020c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80020ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ce:	edd7 6a03 	vldr	s13, [r7, #12]
 80020d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	edc3 7a07 	vstr	s15, [r3, #28]
	position->acceleration[POSITION_AXE_Z] = cos_beta * (sin_alpha * acc_y + cos_alpha * acc_z) - acc_x * sin_beta ;
 80020e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80020e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f0:	edd7 6a08 	vldr	s13, [r7, #32]
 80020f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002100:	edd7 7a06 	vldr	s15, [r7, #24]
 8002104:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002108:	edd7 6a05 	vldr	s13, [r7, #20]
 800210c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	edc3 7a08 	vstr	s15, [r3, #32]




}
 800211e:	bf00      	nop
 8002120:	3728      	adds	r7, #40	; 0x28
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	3c8efa35 	.word	0x3c8efa35

0800212c <arming_entrance>:
static state_arming_e state = 0;
static uint8_t state_vroum_vroum = 0;
static uint32_t next_change = 0 ;
static float elapsed = 0 ;

void arming_entrance(system_t * sys){
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8002134:	2000      	movs	r0, #0
 8002136:	f002 fabb 	bl	80046b0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 800213a:	2001      	movs	r0, #1
 800213c:	f002 fc10 	bl	8004960 <REGULATION_POSITION_Set_Regulation_Mode>
	sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2228      	movs	r2, #40	; 0x28
 8002144:	f8a3 2b70 	strh.w	r2, [r3, #2928]	; 0xb70
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_10, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002150:	2000      	movs	r0, #0
 8002152:	f000 fb49 	bl	80027e8 <IHM_Set_Sequences>
	state = ARMING_THROTTLE_LOW ;
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <arming_entrance+0x40>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
	state_vroum_vroum= 0 ;
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <arming_entrance+0x44>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20001f94 	.word	0x20001f94
 8002170:	20001f95 	.word	0x20001f95

08002174 <arming_main>:

void arming_main(system_t * sys, uint32_t time_us){
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]



	switch(state){
 800217e:	4b7b      	ldr	r3, [pc, #492]	; (800236c <arming_main+0x1f8>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d019      	beq.n	80021ba <arming_main+0x46>
 8002186:	2b02      	cmp	r3, #2
 8002188:	d036      	beq.n	80021f8 <arming_main+0x84>
 800218a:	2b00      	cmp	r3, #0
 800218c:	d000      	beq.n	8002190 <arming_main+0x1c>
				default:
					break;
			}
			break;
	}
}
 800218e:	e0e8      	b.n	8002362 <arming_main+0x1ee>
			if(sys->radio.controller.channels[2]<1100){
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002196:	3304      	adds	r3, #4
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	f240 424b 	movw	r2, #1099	; 0x44b
 800219e:	4293      	cmp	r3, r2
 80021a0:	f200 80dc 	bhi.w	800235c <arming_main+0x1e8>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_11, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 80021a4:	2300      	movs	r3, #0
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 80021ac:	2000      	movs	r0, #0
 80021ae:	f000 fb1b 	bl	80027e8 <IHM_Set_Sequences>
				state = ARMING_STICK_ON_THE_RIGHT;
 80021b2:	4b6e      	ldr	r3, [pc, #440]	; (800236c <arming_main+0x1f8>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
			break;
 80021b8:	e0d0      	b.n	800235c <arming_main+0x1e8>
			if(sys->radio.controller.channels[3]>1950 && sys->radio.controller.channels[2]<1100){
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 80021c0:	3306      	adds	r3, #6
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f240 729e 	movw	r2, #1950	; 0x79e
 80021c8:	4293      	cmp	r3, r2
 80021ca:	f240 80c9 	bls.w	8002360 <arming_main+0x1ec>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 80021d4:	3304      	adds	r3, #4
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	f240 424b 	movw	r2, #1099	; 0x44b
 80021dc:	4293      	cmp	r3, r2
 80021de:	f200 80bf 	bhi.w	8002360 <arming_main+0x1ec>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_ON, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 80021e2:	2300      	movs	r3, #0
 80021e4:	2200      	movs	r2, #0
 80021e6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80021ea:	2000      	movs	r0, #0
 80021ec:	f000 fafc 	bl	80027e8 <IHM_Set_Sequences>
				state = ARMING_VROUM_VOUM;
 80021f0:	4b5e      	ldr	r3, [pc, #376]	; (800236c <arming_main+0x1f8>)
 80021f2:	2202      	movs	r2, #2
 80021f4:	701a      	strb	r2, [r3, #0]
			break;
 80021f6:	e0b3      	b.n	8002360 <arming_main+0x1ec>
			switch(state_vroum_vroum){
 80021f8:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <arming_main+0x1fc>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	f200 80a3 	bhi.w	8002348 <arming_main+0x1d4>
 8002202:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <arming_main+0x94>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	0800221d 	.word	0x0800221d
 800220c:	08002241 	.word	0x08002241
 8002210:	080022cf 	.word	0x080022cf
 8002214:	080022fd 	.word	0x080022fd
 8002218:	0800232b 	.word	0x0800232b
					next_change = time_us + PERIODE_1;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 8002222:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002226:	4a53      	ldr	r2, [pc, #332]	; (8002374 <arming_main+0x200>)
 8002228:	6013      	str	r3, [r2, #0]
					sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	22c8      	movs	r2, #200	; 0xc8
 800222e:	f8a3 2b70 	strh.w	r2, [r3, #2928]	; 0xb70
					state_vroum_vroum++;
 8002232:	4b4f      	ldr	r3, [pc, #316]	; (8002370 <arming_main+0x1fc>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <arming_main+0x1fc>)
 800223c:	701a      	strb	r2, [r3, #0]
					break;
 800223e:	e08c      	b.n	800235a <arming_main+0x1e6>
					elapsed = (float)time_us - (float)(next_change-PERIODE_1);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <arming_main+0x200>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f5a3 23c3 	sub.w	r3, r3, #399360	; 0x61800
 8002252:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	4b45      	ldr	r3, [pc, #276]	; (8002378 <arming_main+0x204>)
 8002264:	edc3 7a00 	vstr	s15, [r3]
					elapsed /= (float)PERIODE_1;
 8002268:	4b43      	ldr	r3, [pc, #268]	; (8002378 <arming_main+0x204>)
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800237c <arming_main+0x208>
 8002272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002276:	4b40      	ldr	r3, [pc, #256]	; (8002378 <arming_main+0x204>)
 8002278:	edc3 7a00 	vstr	s15, [r3]
					sys->regulation.position.consigne = MOTORS_LOW_POWER + (uint32_t)((float)(MOTORS_HIGH_POWER - MOTORS_LOW_POWER) * elapsed);
 800227c:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <arming_main+0x204>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002380 <arming_main+0x20c>
 8002286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228e:	ee17 3a90 	vmov	r3, s15
 8002292:	b29b      	uxth	r3, r3
 8002294:	3328      	adds	r3, #40	; 0x28
 8002296:	b29b      	uxth	r3, r3
 8002298:	b21a      	sxth	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8a3 2b70 	strh.w	r2, [r3, #2928]	; 0xb70
					if(time_us > next_change){
 80022a0:	4b34      	ldr	r3, [pc, #208]	; (8002374 <arming_main+0x200>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d950      	bls.n	800234c <arming_main+0x1d8>
						next_change = time_us + PERIODE_2;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80022b0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80022b4:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <arming_main+0x200>)
 80022b6:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2228      	movs	r2, #40	; 0x28
 80022bc:	f8a3 2b70 	strh.w	r2, [r3, #2928]	; 0xb70
						state_vroum_vroum++;
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <arming_main+0x1fc>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <arming_main+0x1fc>)
 80022ca:	701a      	strb	r2, [r3, #0]
					break;
 80022cc:	e03e      	b.n	800234c <arming_main+0x1d8>
					if(time_us > next_change){
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <arming_main+0x200>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d93b      	bls.n	8002350 <arming_main+0x1dc>
						next_change = time_us + PERIODE_3;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 80022de:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80022e2:	4a24      	ldr	r2, [pc, #144]	; (8002374 <arming_main+0x200>)
 80022e4:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	22c8      	movs	r2, #200	; 0xc8
 80022ea:	f8a3 2b70 	strh.w	r2, [r3, #2928]	; 0xb70
						state_vroum_vroum++;
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <arming_main+0x1fc>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <arming_main+0x1fc>)
 80022f8:	701a      	strb	r2, [r3, #0]
					break;
 80022fa:	e029      	b.n	8002350 <arming_main+0x1dc>
					if(time_us > next_change){
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <arming_main+0x200>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d926      	bls.n	8002354 <arming_main+0x1e0>
						next_change = time_us + PERIODE_4;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 800230c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002310:	4a18      	ldr	r2, [pc, #96]	; (8002374 <arming_main+0x200>)
 8002312:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2228      	movs	r2, #40	; 0x28
 8002318:	f8a3 2b70 	strh.w	r2, [r3, #2928]	; 0xb70
						state_vroum_vroum++;
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <arming_main+0x1fc>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <arming_main+0x1fc>)
 8002326:	701a      	strb	r2, [r3, #0]
					break;
 8002328:	e014      	b.n	8002354 <arming_main+0x1e0>
					if(time_us > next_change){
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <arming_main+0x200>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d911      	bls.n	8002358 <arming_main+0x1e4>
						EVENT_Set_flag(FLAG_ARMED);
 8002334:	201d      	movs	r0, #29
 8002336:	f000 fe7b 	bl	8003030 <EVENT_Set_flag>
						state_vroum_vroum++;
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <arming_main+0x1fc>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <arming_main+0x1fc>)
 8002344:	701a      	strb	r2, [r3, #0]
					break;
 8002346:	e007      	b.n	8002358 <arming_main+0x1e4>
					break;
 8002348:	bf00      	nop
 800234a:	e00a      	b.n	8002362 <arming_main+0x1ee>
					break;
 800234c:	bf00      	nop
 800234e:	e008      	b.n	8002362 <arming_main+0x1ee>
					break;
 8002350:	bf00      	nop
 8002352:	e006      	b.n	8002362 <arming_main+0x1ee>
					break;
 8002354:	bf00      	nop
 8002356:	e004      	b.n	8002362 <arming_main+0x1ee>
					break;
 8002358:	bf00      	nop
			break;
 800235a:	e002      	b.n	8002362 <arming_main+0x1ee>
			break;
 800235c:	bf00      	nop
 800235e:	e000      	b.n	8002362 <arming_main+0x1ee>
			break;
 8002360:	bf00      	nop
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20001f94 	.word	0x20001f94
 8002370:	20001f95 	.word	0x20001f95
 8002374:	20001f98 	.word	0x20001f98
 8002378:	20001f9c 	.word	0x20001f9c
 800237c:	48c35000 	.word	0x48c35000
 8002380:	43200000 	.word	0x43200000

08002384 <FLIGHT_MODE_Init>:
		[FLIGHT_MODE_GYRO_ACC_CALIBRATION] = 	DEF_FLIGHT_MODE(FLIGHT_MODE_GYRO_ACC_CALIBRATION, 		gyro_acc_calibration_entrance, 	gyro_acc_calibration_main),

};

//	-------------------------	Public functions	-------------------------
void FLIGHT_MODE_Init(system_t * sys_){
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	sys = sys_;
 800238c:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <FLIGHT_MODE_Init+0x24>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
	sys->soft.flight_mode = &current_flight_mode;
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <FLIGHT_MODE_Init+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <FLIGHT_MODE_Init+0x28>)
 8002398:	f8c3 2b7c 	str.w	r2, [r3, #2940]	; 0xb7c
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	20001fa0 	.word	0x20001fa0
 80023ac:	20001fa4 	.word	0x20001fa4

080023b0 <FLIGHT_MODE_Set_Flight_Mode>:

//Dont call it from an it plz for now ..
void FLIGHT_MODE_Set_Flight_Mode(flight_modes_names_e new){
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
	next_flight_mode = new ;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <FLIGHT_MODE_Set_Flight_Mode+0x1c>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	7013      	strb	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	20001fa5 	.word	0x20001fa5

080023d0 <FLIGHT_MODE_Main>:

void FLIGHT_MODE_Main(uint32_t time_us){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	//Check if we have to change the current flight mode
	if(next_flight_mode != current_flight_mode){
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <FLIGHT_MODE_Main+0xa0>)
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <FLIGHT_MODE_Main+0xa4>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d02b      	beq.n	800243c <FLIGHT_MODE_Main+0x6c>

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(flights_modes[current_flight_mode].function_leave != NULL)
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <FLIGHT_MODE_Main+0xa4>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4a23      	ldr	r2, [pc, #140]	; (8002478 <FLIGHT_MODE_Main+0xa8>)
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	330c      	adds	r3, #12
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <FLIGHT_MODE_Main+0x3c>
			flights_modes[current_flight_mode].function_leave(sys);
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <FLIGHT_MODE_Main+0xa4>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <FLIGHT_MODE_Main+0xa8>)
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	4413      	add	r3, r2
 8002400:	330c      	adds	r3, #12
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1d      	ldr	r2, [pc, #116]	; (800247c <FLIGHT_MODE_Main+0xac>)
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4610      	mov	r0, r2
 800240a:	4798      	blx	r3

		//Call the entrance function associated to the next flight mode if it exists
		if(flights_modes[next_flight_mode].function_entrance != NULL)
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <FLIGHT_MODE_Main+0xa0>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4a19      	ldr	r2, [pc, #100]	; (8002478 <FLIGHT_MODE_Main+0xa8>)
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	4413      	add	r3, r2
 8002416:	3304      	adds	r3, #4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <FLIGHT_MODE_Main+0x64>
			flights_modes[next_flight_mode].function_entrance(sys);
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <FLIGHT_MODE_Main+0xa0>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4a15      	ldr	r2, [pc, #84]	; (8002478 <FLIGHT_MODE_Main+0xa8>)
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	4413      	add	r3, r2
 8002428:	3304      	adds	r3, #4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a13      	ldr	r2, [pc, #76]	; (800247c <FLIGHT_MODE_Main+0xac>)
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	4610      	mov	r0, r2
 8002432:	4798      	blx	r3

		//Change the current flight mode
		current_flight_mode = next_flight_mode ;
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <FLIGHT_MODE_Main+0xa0>)
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <FLIGHT_MODE_Main+0xa4>)
 800243a:	701a      	strb	r2, [r3, #0]
	}
	//Call the function associated to the current flight mode
	if(flights_modes[next_flight_mode].function_main != NULL)
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <FLIGHT_MODE_Main+0xa0>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <FLIGHT_MODE_Main+0xa8>)
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	4413      	add	r3, r2
 8002446:	3308      	adds	r3, #8
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <FLIGHT_MODE_Main+0x96>
		flights_modes[current_flight_mode].function_main(sys, time_us);
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <FLIGHT_MODE_Main+0xa4>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <FLIGHT_MODE_Main+0xa8>)
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	4413      	add	r3, r2
 8002458:	3308      	adds	r3, #8
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <FLIGHT_MODE_Main+0xac>)
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4610      	mov	r0, r2
 8002464:	4798      	blx	r3

}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20001fa5 	.word	0x20001fa5
 8002474:	20001fa4 	.word	0x20001fa4
 8002478:	2000019c 	.word	0x2000019c
 800247c:	20001fa0 	.word	0x20001fa0

08002480 <gyro_acc_calibration_entrance>:

#include "Flight_mode.h"
#include "../OS/events/events.h"
#include "../OS/events/flags.h"

void gyro_acc_calibration_entrance(system_t * sys){
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_3);
 8002488:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	2001      	movs	r0, #1
 8002492:	f000 f9a9 	bl	80027e8 <IHM_Set_Sequences>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <gyro_acc_calibration_main>:
void gyro_acc_calibration_main(system_t * sys, uint32_t time_us){
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]

	if(GYRO_calibrate(&sys->sensors.gyro, 1500)){	//The high lvl runs at 500 HZ so 1500 by 500 => 3 secs of calibration
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3330      	adds	r3, #48	; 0x30
 80024ac:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 fc37 	bl	8004d24 <GYRO_calibrate>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <gyro_acc_calibration_main+0x32>
		EVENT_Set_flag(FLAG_GYRO_CALI_DONE);
 80024bc:	2020      	movs	r0, #32
 80024be:	f000 fdb7 	bl	8003030 <EVENT_Set_flag>
		IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80024c2:	2300      	movs	r3, #0
 80024c4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80024c8:	2100      	movs	r1, #0
 80024ca:	2001      	movs	r0, #1
 80024cc:	f000 f98c 	bl	80027e8 <IHM_Set_Sequences>
	}

}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <manual_accro_entrance>:
 */


#include "Flight_mode.h"

void manual_accro_entrance(system_t * sys){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f002 f8e5 	bl	80046b0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f002 fa3a 	bl	8004960 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_1);
 80024ec:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80024f0:	2200      	movs	r2, #0
 80024f2:	2100      	movs	r1, #0
 80024f4:	2000      	movs	r0, #0
 80024f6:	f000 f977 	bl	80027e8 <IHM_Set_Sequences>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <manual_accro_main>:

void manual_accro_main(system_t * sys, uint32_t time_us){
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL] = ((float)sys->radio.controller.channels[0]-1500)*1.5f;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80025b8 <manual_accro_main+0xb4>
 8002522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002526:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800252a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 8002534:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH] = ((float)sys->radio.controller.channels[1]-1500)*1.5f;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800253e:	3302      	adds	r3, #2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80025b8 <manual_accro_main+0xb4>
 800254e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002552:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f603 3364 	addw	r3, r3, #2916	; 0xb64
 8002560:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800256a:	3306      	adds	r3, #6
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002576:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80025b8 <manual_accro_main+0xb4>
 800257a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800257e:	eef1 7a67 	vneg.f32	s15, s15
 8002582:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80025bc <manual_accro_main+0xb8>
 8002586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8002590:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800259a:	3304      	adds	r3, #4
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	b21a      	sxth	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8a3 2b70 	strh.w	r2, [r3, #2928]	; 0xb70
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	44bb8000 	.word	0x44bb8000
 80025bc:	3f99999a 	.word	0x3f99999a

080025c0 <manual_angle_entrance>:
 *      Author: Théo
 */

#include "Flight_mode.h"

void manual_angle_entrance(system_t * sys){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ANGLE);
 80025c8:	2002      	movs	r0, #2
 80025ca:	f002 f871 	bl	80046b0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f002 f9c6 	bl	8004960 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_7);
 80025d4:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	2000      	movs	r0, #0
 80025de:	f000 f903 	bl	80027e8 <IHM_Set_Sequences>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <manual_angle_main>:
void manual_angle_main(system_t * sys, uint32_t time_us){
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL] = ((float)sys->radio.controller.channels[0]-1500)*0.14f;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002606:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80026a0 <manual_angle_main+0xb4>
 800260a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800260e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80026a4 <manual_angle_main+0xb8>
 8002612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f603 3354 	addw	r3, r3, #2900	; 0xb54
 800261c:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH] = ((float)sys->radio.controller.channels[1]-1500)*0.14f;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002626:	3302      	adds	r3, #2
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002632:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80026a0 <manual_angle_main+0xb4>
 8002636:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800263a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80026a4 <manual_angle_main+0xb8>
 800263e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8002648:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002652:	3306      	adds	r3, #6
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80026a0 <manual_angle_main+0xb4>
 8002662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002666:	eef1 7a67 	vneg.f32	s15, s15
 800266a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80026a8 <manual_angle_main+0xbc>
 800266e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8002678:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002682:	3304      	adds	r3, #4
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800268a:	b29b      	uxth	r3, r3
 800268c:	b21a      	sxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8a3 2b70 	strh.w	r2, [r3, #2928]	; 0xb70
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	44bb8000 	.word	0x44bb8000
 80026a4:	3e0f5c29 	.word	0x3e0f5c29
 80026a8:	3f99999a 	.word	0x3f99999a

080026ac <on_the_ground_entrance>:
 *  Created on: 19 déc. 2020
 *      Author: theom
 */
#include "Flight_mode.h"

void on_the_ground_entrance(system_t * sys){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f001 fffb 	bl	80046b0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_OFF);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f002 f950 	bl	8004960 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80026c0:	2300      	movs	r3, #0
 80026c2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80026c6:	2100      	movs	r1, #0
 80026c8:	2000      	movs	r0, #0
 80026ca:	f000 f88d 	bl	80027e8 <IHM_Set_Sequences>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <on_the_ground_main>:
void on_the_ground_main(system_t * sys, uint32_t time_us){
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <IHM_Init>:





void IHM_Init(Ihm_t * ihm_){
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	ihm = ihm_;
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <IHM_Init+0x1c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20001fa8 	.word	0x20001fa8

0800270c <IHM_Led_Init>:

void IHM_Led_Init(led_name_e name, uint32_t periode, uint16_t pin, led_output_logic_e output_logic){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6039      	str	r1, [r7, #0]
 8002714:	4611      	mov	r1, r2
 8002716:	461a      	mov	r2, r3
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	460b      	mov	r3, r1
 800271e:	80bb      	strh	r3, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	71bb      	strb	r3, [r7, #6]
	ihm->leds[name].periode = periode ;
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <IHM_Led_Init+0x80>)
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	79fa      	ldrb	r2, [r7, #7]
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	330c      	adds	r3, #12
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	601a      	str	r2, [r3, #0]
	ihm->leds[name].pin = pin ;
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <IHM_Led_Init+0x80>)
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	79fa      	ldrb	r2, [r7, #7]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	3310      	adds	r3, #16
 800274c:	88ba      	ldrh	r2, [r7, #4]
 800274e:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].output_logic = output_logic ;
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <IHM_Led_Init+0x80>)
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	79fa      	ldrb	r2, [r7, #7]
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	3314      	adds	r3, #20
 8002762:	79ba      	ldrb	r2, [r7, #6]
 8002764:	701a      	strb	r2, [r3, #0]

	//Set the outputs low
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	e008      	b.n	800277e <IHM_Led_Init+0x72>
		IHM_Set_Sequence(name, c, SEQUENCE_LED_OFF);
 800276c:	7bf9      	ldrb	r1, [r7, #15]
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	2200      	movs	r2, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f80c 	bl	8002790 <IHM_Set_Sequence>
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	3301      	adds	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d9f3      	bls.n	800276c <IHM_Led_Init+0x60>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20001fa8 	.word	0x20001fa8

08002790 <IHM_Set_Sequence>:

void IHM_Set_Sequence(led_name_e name, led_color_e color, uint16_t sequence){
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
 800279a:	460b      	mov	r3, r1
 800279c:	71bb      	strb	r3, [r7, #6]
 800279e:	4613      	mov	r3, r2
 80027a0:	80bb      	strh	r3, [r7, #4]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE)
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <IHM_Set_Sequence+0x54>)
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	79fa      	ldrb	r2, [r7, #7]
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	3314      	adds	r3, #20
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d102      	bne.n	80027c0 <IHM_Set_Sequence+0x30>
		sequence = ~sequence ;
 80027ba:	88bb      	ldrh	r3, [r7, #4]
 80027bc:	43db      	mvns	r3, r3
 80027be:	80bb      	strh	r3, [r7, #4]
	ihm->leds[name].seqs[color] = sequence ;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <IHM_Set_Sequence+0x54>)
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	79b8      	ldrb	r0, [r7, #6]
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4403      	add	r3, r0
 80027d2:	88ba      	ldrh	r2, [r7, #4]
 80027d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	20001fa8 	.word	0x20001fa8

080027e8 <IHM_Set_Sequences>:

void IHM_Set_Sequences(led_name_e name, uint16_t sequence_red, uint16_t sequence_green, uint16_t sequence_blue){
 80027e8:	b490      	push	{r4, r7}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4604      	mov	r4, r0
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4623      	mov	r3, r4
 80027f8:	71fb      	strb	r3, [r7, #7]
 80027fa:	4603      	mov	r3, r0
 80027fc:	80bb      	strh	r3, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	807b      	strh	r3, [r7, #2]
 8002802:	4613      	mov	r3, r2
 8002804:	803b      	strh	r3, [r7, #0]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE){
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <IHM_Set_Sequences+0x94>)
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	79fa      	ldrb	r2, [r7, #7]
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	3314      	adds	r3, #20
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d108      	bne.n	8002830 <IHM_Set_Sequences+0x48>
		sequence_red = ~sequence_red ;
 800281e:	88bb      	ldrh	r3, [r7, #4]
 8002820:	43db      	mvns	r3, r3
 8002822:	80bb      	strh	r3, [r7, #4]
		sequence_green = ~sequence_green ;
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	43db      	mvns	r3, r3
 8002828:	807b      	strh	r3, [r7, #2]
		sequence_blue = ~sequence_blue ;
 800282a:	883b      	ldrh	r3, [r7, #0]
 800282c:	43db      	mvns	r3, r3
 800282e:	803b      	strh	r3, [r7, #0]
	}
	ihm->leds[name].seqs[LED_COLOR_RED] = sequence_red ;
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <IHM_Set_Sequences+0x94>)
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	79fa      	ldrb	r2, [r7, #7]
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	88ba      	ldrh	r2, [r7, #4]
 8002842:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_GREEN] = sequence_green ;
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <IHM_Set_Sequences+0x94>)
 8002846:	6819      	ldr	r1, [r3, #0]
 8002848:	79fa      	ldrb	r2, [r7, #7]
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	3302      	adds	r3, #2
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_BLUE] = sequence_blue ;
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <IHM_Set_Sequences+0x94>)
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	79fa      	ldrb	r2, [r7, #7]
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	3304      	adds	r3, #4
 800286c:	883a      	ldrh	r2, [r7, #0]
 800286e:	801a      	strh	r2, [r3, #0]
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bc90      	pop	{r4, r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20001fa8 	.word	0x20001fa8

08002880 <IHM_Update>:

void IHM_Update(void){
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0

	//Increment the counter each time (since we re called at 1kHz
	compteur ++ ;
 8002886:	4b8a      	ldr	r3, [pc, #552]	; (8002ab0 <IHM_Update+0x230>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	4a88      	ldr	r2, [pc, #544]	; (8002ab0 <IHM_Update+0x230>)
 800288e:	6013      	str	r3, [r2, #0]
	//Update the current color and the current led
	current_led = compteur % LED_COUNT ;
 8002890:	4b87      	ldr	r3, [pc, #540]	; (8002ab0 <IHM_Update+0x230>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b85      	ldr	r3, [pc, #532]	; (8002ab4 <IHM_Update+0x234>)
 800289e:	701a      	strb	r2, [r3, #0]

	//Check if we have to change the current bit
	if(compteur > ihm->leds[current_led].next_time)
 80028a0:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <IHM_Update+0x238>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b83      	ldr	r3, [pc, #524]	; (8002ab4 <IHM_Update+0x234>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	460b      	mov	r3, r1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	440b      	add	r3, r1
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	3308      	adds	r3, #8
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b7d      	ldr	r3, [pc, #500]	; (8002ab0 <IHM_Update+0x230>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d259      	bcs.n	8002974 <IHM_Update+0xf4>
	{
		ihm->leds[current_led].current_bit >>= 1;
 80028c0:	4b7d      	ldr	r3, [pc, #500]	; (8002ab8 <IHM_Update+0x238>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <IHM_Update+0x234>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	460b      	mov	r3, r1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	440b      	add	r3, r1
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	3312      	adds	r3, #18
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	4a77      	ldr	r2, [pc, #476]	; (8002ab8 <IHM_Update+0x238>)
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4975      	ldr	r1, [pc, #468]	; (8002ab4 <IHM_Update+0x234>)
 80028de:	7809      	ldrb	r1, [r1, #0]
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	b298      	uxth	r0, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	440b      	add	r3, r1
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	3312      	adds	r3, #18
 80028f0:	4602      	mov	r2, r0
 80028f2:	801a      	strh	r2, [r3, #0]
		ihm->leds[current_led].next_time += ihm->leds[current_led].periode ;
 80028f4:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <IHM_Update+0x238>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b6e      	ldr	r3, [pc, #440]	; (8002ab4 <IHM_Update+0x234>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	460b      	mov	r3, r1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	440b      	add	r3, r1
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	3308      	adds	r3, #8
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <IHM_Update+0x238>)
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	4b68      	ldr	r3, [pc, #416]	; (8002ab4 <IHM_Update+0x234>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	4603      	mov	r3, r0
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4403      	add	r3, r0
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	330c      	adds	r3, #12
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4964      	ldr	r1, [pc, #400]	; (8002ab8 <IHM_Update+0x238>)
 8002926:	6809      	ldr	r1, [r1, #0]
 8002928:	4862      	ldr	r0, [pc, #392]	; (8002ab4 <IHM_Update+0x234>)
 800292a:	7800      	ldrb	r0, [r0, #0]
 800292c:	441a      	add	r2, r3
 800292e:	4603      	mov	r3, r0
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4403      	add	r3, r0
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	3308      	adds	r3, #8
 800293a:	601a      	str	r2, [r3, #0]

		if(ihm->leds[current_led].current_bit == 0)
 800293c:	4b5e      	ldr	r3, [pc, #376]	; (8002ab8 <IHM_Update+0x238>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b5c      	ldr	r3, [pc, #368]	; (8002ab4 <IHM_Update+0x234>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	460b      	mov	r3, r1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	440b      	add	r3, r1
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	3312      	adds	r3, #18
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <IHM_Update+0xf4>
			ihm->leds[current_led].current_bit = 1 << (SEQUENCE_LEN-1);
 8002958:	4b57      	ldr	r3, [pc, #348]	; (8002ab8 <IHM_Update+0x238>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b55      	ldr	r3, [pc, #340]	; (8002ab4 <IHM_Update+0x234>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	460b      	mov	r3, r1
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	440b      	add	r3, r1
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	3312      	adds	r3, #18
 800296e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002972:	801a      	strh	r2, [r3, #0]
	}

	uint16_t pins_high = 0 ;
 8002974:	2300      	movs	r3, #0
 8002976:	80fb      	strh	r3, [r7, #6]
	uint16_t pins_low = 0 ;
 8002978:	2300      	movs	r3, #0
 800297a:	80bb      	strh	r3, [r7, #4]
	uint16_t current_bit =  ihm->leds[current_led].current_bit ;
 800297c:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <IHM_Update+0x238>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <IHM_Update+0x234>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4619      	mov	r1, r3
 8002986:	460b      	mov	r3, r1
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	440b      	add	r3, r1
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	3312      	adds	r3, #18
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	803b      	strh	r3, [r7, #0]

	//For each color, check if we have to set outputs high or low
	if(ihm->leds[current_led].seqs[LED_COLOR_RED] & current_bit)		//Red pin high ?
 8002996:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <IHM_Update+0x238>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <IHM_Update+0x234>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	460b      	mov	r3, r1
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	440b      	add	r3, r1
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	883b      	ldrh	r3, [r7, #0]
 80029ae:	4013      	ands	r3, r2
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <IHM_Update+0x142>
		pins_high += pin_color[LED_COLOR_RED];
 80029b6:	4b41      	ldr	r3, [pc, #260]	; (8002abc <IHM_Update+0x23c>)
 80029b8:	881a      	ldrh	r2, [r3, #0]
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	4413      	add	r3, r2
 80029be:	80fb      	strh	r3, [r7, #6]
 80029c0:	e004      	b.n	80029cc <IHM_Update+0x14c>
	else
		pins_low += pin_color[LED_COLOR_RED];
 80029c2:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <IHM_Update+0x23c>)
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	88bb      	ldrh	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_GREEN] & current_bit)		//Green pin High ?
 80029cc:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <IHM_Update+0x238>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <IHM_Update+0x234>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	460b      	mov	r3, r1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	440b      	add	r3, r1
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	3302      	adds	r3, #2
 80029e2:	881a      	ldrh	r2, [r3, #0]
 80029e4:	883b      	ldrh	r3, [r7, #0]
 80029e6:	4013      	ands	r3, r2
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <IHM_Update+0x17a>
		pins_high += pin_color[LED_COLOR_GREEN];
 80029ee:	4b33      	ldr	r3, [pc, #204]	; (8002abc <IHM_Update+0x23c>)
 80029f0:	885a      	ldrh	r2, [r3, #2]
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	4413      	add	r3, r2
 80029f6:	80fb      	strh	r3, [r7, #6]
 80029f8:	e004      	b.n	8002a04 <IHM_Update+0x184>
	else
		pins_low += pin_color[LED_COLOR_GREEN];
 80029fa:	4b30      	ldr	r3, [pc, #192]	; (8002abc <IHM_Update+0x23c>)
 80029fc:	885a      	ldrh	r2, [r3, #2]
 80029fe:	88bb      	ldrh	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_BLUE] & current_bit)		//Blue pin high ?
 8002a04:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <IHM_Update+0x238>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <IHM_Update+0x234>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	460b      	mov	r3, r1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	440b      	add	r3, r1
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	3304      	adds	r3, #4
 8002a1a:	881a      	ldrh	r2, [r3, #0]
 8002a1c:	883b      	ldrh	r3, [r7, #0]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <IHM_Update+0x1b2>
		pins_high |= pin_color[LED_COLOR_BLUE];
 8002a26:	4b25      	ldr	r3, [pc, #148]	; (8002abc <IHM_Update+0x23c>)
 8002a28:	889a      	ldrh	r2, [r3, #4]
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	80fb      	strh	r3, [r7, #6]
 8002a30:	e004      	b.n	8002a3c <IHM_Update+0x1bc>
	else
		pins_low |= pin_color[LED_COLOR_BLUE];
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <IHM_Update+0x23c>)
 8002a34:	889a      	ldrh	r2, [r3, #4]
 8002a36:	88bb      	ldrh	r3, [r7, #4]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	80bb      	strh	r3, [r7, #4]

	//Then we activate the current led
	for(uint8_t l = 0; l < LED_COUNT; l++){
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	70fb      	strb	r3, [r7, #3]
 8002a40:	e022      	b.n	8002a88 <IHM_Update+0x208>
		if(l == current_led)
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <IHM_Update+0x234>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d10d      	bne.n	8002a68 <IHM_Update+0x1e8>
			pins_high |= ihm->leds[l].pin ;
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <IHM_Update+0x238>)
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3310      	adds	r3, #16
 8002a5e:	881a      	ldrh	r2, [r3, #0]
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]
 8002a66:	e00c      	b.n	8002a82 <IHM_Update+0x202>
		else
			pins_low |= ihm->leds[l].pin ;
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <IHM_Update+0x238>)
 8002a6a:	6819      	ldr	r1, [r3, #0]
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	3310      	adds	r3, #16
 8002a7a:	881a      	ldrh	r2, [r3, #0]
 8002a7c:	88bb      	ldrh	r3, [r7, #4]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	80bb      	strh	r3, [r7, #4]
	for(uint8_t l = 0; l < LED_COUNT; l++){
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	3301      	adds	r3, #1
 8002a86:	70fb      	strb	r3, [r7, #3]
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d9d9      	bls.n	8002a42 <IHM_Update+0x1c2>
	}
	HAL_GPIO_WritePin(GPIOC, pins_high, GPIO_PIN_SET);
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2201      	movs	r2, #1
 8002a92:	4619      	mov	r1, r3
 8002a94:	480a      	ldr	r0, [pc, #40]	; (8002ac0 <IHM_Update+0x240>)
 8002a96:	f006 f947 	bl	8008d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, pins_low, GPIO_PIN_RESET);
 8002a9a:	88bb      	ldrh	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4807      	ldr	r0, [pc, #28]	; (8002ac0 <IHM_Update+0x240>)
 8002aa2:	f006 f941 	bl	8008d28 <HAL_GPIO_WritePin>





}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20001fac 	.word	0x20001fac
 8002ab4:	20001fb0 	.word	0x20001fb0
 8002ab8:	20001fa8 	.word	0x20001fa8
 8002abc:	200001fc 	.word	0x200001fc
 8002ac0:	40020800 	.word	0x40020800

08002ac4 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 8002ac8:	4803      	ldr	r0, [pc, #12]	; (8002ad8 <DEBUG_init+0x14>)
 8002aca:	f000 f809 	bl	8002ae0 <RetargetInit>
	printf("Debuger is init\n");
 8002ace:	4803      	ldr	r0, [pc, #12]	; (8002adc <DEBUG_init+0x18>)
 8002ad0:	f00d fcd6 	bl	8010480 <puts>
}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200032f4 	.word	0x200032f4
 8002adc:	08013ac8 	.word	0x08013ac8

08002ae0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <RetargetInit+0x28>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <RetargetInit+0x2c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6898      	ldr	r0, [r3, #8]
 8002af4:	2300      	movs	r3, #0
 8002af6:	2202      	movs	r2, #2
 8002af8:	2100      	movs	r1, #0
 8002afa:	f00d fcc9 	bl	8010490 <setvbuf>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200020dc 	.word	0x200020dc
 8002b0c:	20001aa8 	.word	0x20001aa8

08002b10 <_isatty>:

int _isatty(int fd) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	db04      	blt.n	8002b28 <_isatty+0x18>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	dc01      	bgt.n	8002b28 <_isatty+0x18>
    return 1;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e005      	b.n	8002b34 <_isatty+0x24>

  errno = EBADF;
 8002b28:	f00c ff84 	bl	800fa34 <__errno>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	2309      	movs	r3, #9
 8002b30:	6013      	str	r3, [r2, #0]
  return 0;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <_write>:

int _write(int fd, char* ptr, int len) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d002      	beq.n	8002b54 <_write+0x18>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d110      	bne.n	8002b76 <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <_write+0x50>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	2364      	movs	r3, #100	; 0x64
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	f00b fa67 	bl	800e032 <HAL_UART_Transmit>
 8002b64:	4603      	mov	r3, r0
 8002b66:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <_write+0x36>
      return len;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	e008      	b.n	8002b84 <_write+0x48>
    else
      return EIO;
 8002b72:	2305      	movs	r3, #5
 8002b74:	e006      	b.n	8002b84 <_write+0x48>
  }
  errno = EBADF;
 8002b76:	f00c ff5d 	bl	800fa34 <__errno>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	2309      	movs	r3, #9
 8002b7e:	6013      	str	r3, [r2, #0]
  return -1;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200020dc 	.word	0x200020dc

08002b90 <_close>:

int _close(int fd) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	db04      	blt.n	8002ba8 <_close+0x18>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	dc01      	bgt.n	8002ba8 <_close+0x18>
    return 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e006      	b.n	8002bb6 <_close+0x26>

  errno = EBADF;
 8002ba8:	f00c ff44 	bl	800fa34 <__errno>
 8002bac:	4602      	mov	r2, r0
 8002bae:	2309      	movs	r3, #9
 8002bb0:	6013      	str	r3, [r2, #0]
  return -1;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002bca:	f00c ff33 	bl	800fa34 <__errno>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	2309      	movs	r3, #9
 8002bd2:	6013      	str	r3, [r2, #0]
  return -1;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_read>:

int _read(int fd, char* ptr, int len) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d110      	bne.n	8002c14 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <_read+0x4c>)
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	f00b fab1 	bl	800e164 <HAL_UART_Receive>
 8002c02:	4603      	mov	r3, r0
 8002c04:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <_read+0x30>
      return 1;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e008      	b.n	8002c22 <_read+0x42>
    else
      return EIO;
 8002c10:	2305      	movs	r3, #5
 8002c12:	e006      	b.n	8002c22 <_read+0x42>
  }
  errno = EBADF;
 8002c14:	f00c ff0e 	bl	800fa34 <__errno>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	2309      	movs	r3, #9
 8002c1c:	6013      	str	r3, [r2, #0]
  return -1;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200020dc 	.word	0x200020dc

08002c30 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	db08      	blt.n	8002c52 <_fstat+0x22>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	dc05      	bgt.n	8002c52 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c4c:	605a      	str	r2, [r3, #4]
    return 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e005      	b.n	8002c5e <_fstat+0x2e>
  }

  errno = EBADF;
 8002c52:	f00c feef 	bl	800fa34 <__errno>
 8002c56:	4602      	mov	r2, r0
 8002c58:	2309      	movs	r3, #9
 8002c5a:	6013      	str	r3, [r2, #0]
  return 0;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <gyro_init_ok_func>:



};

static void gyro_init_ok_func(mask_def_ids_t mask_id){
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_GYRO_READING);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f000 f9dc 	bl	8003030 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 8002c78:	2101      	movs	r1, #1
 8002c7a:	2004      	movs	r0, #4
 8002c7c:	f000 fe30 	bl	80038e0 <SCHEDULER_task_set_mode>
	events_main[EVENT_GYRO_INIT_OK].state = EVENT_DISABLED ;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <gyro_init_ok_func+0x28>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000204 	.word	0x20000204

08002c94 <acc_init_ok_func>:

static void acc_init_ok_func(mask_def_ids_t mask_id){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_ACC_READING);
 8002c9e:	2005      	movs	r0, #5
 8002ca0:	f000 f9c6 	bl	8003030 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	2006      	movs	r0, #6
 8002ca8:	f000 fe1a 	bl	80038e0 <SCHEDULER_task_set_mode>
	events_main[EVENT_ACC_INIT_OK].state = EVENT_DISABLED ;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <acc_init_ok_func+0x28>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000204 	.word	0x20000204

08002cc0 <ibus_data_rdy>:

static void ibus_data_rdy(mask_def_ids_t mask_id){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cca:	b672      	cpsid	i
	//On clean le flag ibus_data_rdy
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_IBUS_DATA_RDY);
 8002ccc:	210c      	movs	r1, #12
 8002cce:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <ibus_data_rdy+0x28>)
 8002cd0:	f000 fa6d 	bl	80031ae <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002cd4:	b662      	cpsie	i
	__enable_irq();
	//On déclenche la tâche de traitement des octets pour l ibus
	SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_UPDATE, TASK_MODE_EVENT);
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	2009      	movs	r0, #9
 8002cda:	f000 fe01 	bl	80038e0 <SCHEDULER_task_set_mode>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20001fb4 	.word	0x20001fb4

08002cec <baro_data_ready_func>:

static void baro_data_ready_func(mask_def_ids_t mask_id){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
	switch(mask_id){
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d00c      	beq.n	8002d16 <baro_data_ready_func+0x2a>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d012      	beq.n	8002d26 <baro_data_ready_func+0x3a>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d000      	beq.n	8002d06 <baro_data_ready_func+0x1a>
		case MASK_BARO_DATA_READY_PRESSURE:
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RDY);
			SCHEDULER_task_set_mode(TASK_BARO_ALTITUDE, TASK_MODE_EVENT);
			break;
		default:
			break;
 8002d04:	e017      	b.n	8002d36 <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_TEMP_RAW_RDY);
 8002d06:	2009      	movs	r0, #9
 8002d08:	f000 f9aa 	bl	8003060 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_TEMP, TASK_MODE_EVENT);
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	2010      	movs	r0, #16
 8002d10:	f000 fde6 	bl	80038e0 <SCHEDULER_task_set_mode>
			break;
 8002d14:	e00f      	b.n	8002d36 <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RAW_RDY);
 8002d16:	200a      	movs	r0, #10
 8002d18:	f000 f9a2 	bl	8003060 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_PRESSURE, TASK_MODE_EVENT);
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	2011      	movs	r0, #17
 8002d20:	f000 fdde 	bl	80038e0 <SCHEDULER_task_set_mode>
			break;
 8002d24:	e007      	b.n	8002d36 <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RDY);
 8002d26:	200b      	movs	r0, #11
 8002d28:	f000 f99a 	bl	8003060 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_ALTITUDE, TASK_MODE_EVENT);
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	2012      	movs	r0, #18
 8002d30:	f000 fdd6 	bl	80038e0 <SCHEDULER_task_set_mode>
			break;
 8002d34:	bf00      	nop

	}
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <on_the_ground>:

static void on_the_ground(mask_def_ids_t mask_id){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d4a:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_FLYING);
 8002d4c:	2121      	movs	r1, #33	; 0x21
 8002d4e:	480d      	ldr	r0, [pc, #52]	; (8002d84 <on_the_ground+0x44>)
 8002d50:	f000 fa2d 	bl	80031ae <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMED);
 8002d54:	211d      	movs	r1, #29
 8002d56:	480b      	ldr	r0, [pc, #44]	; (8002d84 <on_the_ground+0x44>)
 8002d58:	f000 fa29 	bl	80031ae <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_BUSY);
 8002d5c:	211e      	movs	r1, #30
 8002d5e:	4809      	ldr	r0, [pc, #36]	; (8002d84 <on_the_ground+0x44>)
 8002d60:	f000 fa25 	bl	80031ae <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMING);
 8002d64:	211c      	movs	r1, #28
 8002d66:	4807      	ldr	r0, [pc, #28]	; (8002d84 <on_the_ground+0x44>)
 8002d68:	f000 fa21 	bl	80031ae <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8002d6c:	211f      	movs	r1, #31
 8002d6e:	4805      	ldr	r0, [pc, #20]	; (8002d84 <on_the_ground+0x44>)
 8002d70:	f000 fa1d 	bl	80031ae <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002d74:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ON_THE_GROUND);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7ff fb1a 	bl	80023b0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20001fb4 	.word	0x20001fb4

08002d88 <manual_accro>:
static void manual_accro(mask_def_ids_t mask_id){
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d92:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8002d94:	2121      	movs	r1, #33	; 0x21
 8002d96:	4807      	ldr	r0, [pc, #28]	; (8002db4 <manual_accro+0x2c>)
 8002d98:	f000 f9d9 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8002d9c:	2122      	movs	r1, #34	; 0x22
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <manual_accro+0x2c>)
 8002da0:	f000 f9d5 	bl	800314e <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002da4:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ACCRO);
 8002da6:	2001      	movs	r0, #1
 8002da8:	f7ff fb02 	bl	80023b0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20001fb4 	.word	0x20001fb4

08002db8 <manual_angle>:

static void manual_angle(mask_def_ids_t mask_id){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc2:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8002dc4:	2121      	movs	r1, #33	; 0x21
 8002dc6:	4807      	ldr	r0, [pc, #28]	; (8002de4 <manual_angle+0x2c>)
 8002dc8:	f000 f9c1 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8002dcc:	2122      	movs	r1, #34	; 0x22
 8002dce:	4805      	ldr	r0, [pc, #20]	; (8002de4 <manual_angle+0x2c>)
 8002dd0:	f000 f9bd 	bl	800314e <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002dd4:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ANGLE);
 8002dd6:	2002      	movs	r0, #2
 8002dd8:	f7ff faea 	bl	80023b0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20001fb4 	.word	0x20001fb4

08002de8 <gyro_data_ready_func>:

static void gyro_data_ready_func(mask_def_ids_t mask_id){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002df2:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 8002df4:	2102      	movs	r1, #2
 8002df6:	4806      	ldr	r0, [pc, #24]	; (8002e10 <gyro_data_ready_func+0x28>)
 8002df8:	f000 f9d9 	bl	80031ae <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002dfc:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 8002dfe:	2102      	movs	r1, #2
 8002e00:	2005      	movs	r0, #5
 8002e02:	f000 fd6d 	bl	80038e0 <SCHEDULER_task_set_mode>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20001fb4 	.word	0x20001fb4

08002e14 <acc_data_ready_func>:

static void acc_data_ready_func(mask_def_ids_t mask_id){
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e1e:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 8002e20:	2106      	movs	r1, #6
 8002e22:	4806      	ldr	r0, [pc, #24]	; (8002e3c <acc_data_ready_func+0x28>)
 8002e24:	f000 f9c3 	bl	80031ae <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e28:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	2007      	movs	r0, #7
 8002e2e:	f000 fd57 	bl	80038e0 <SCHEDULER_task_set_mode>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20001fb4 	.word	0x20001fb4

08002e40 <orientation_update>:

static void orientation_update(mask_def_ids_t mask_id){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e4a:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 8002e4c:	2107      	movs	r1, #7
 8002e4e:	4808      	ldr	r0, [pc, #32]	; (8002e70 <orientation_update+0x30>)
 8002e50:	f000 f9ad 	bl	80031ae <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 8002e54:	2103      	movs	r1, #3
 8002e56:	4806      	ldr	r0, [pc, #24]	; (8002e70 <orientation_update+0x30>)
 8002e58:	f000 f9a9 	bl	80031ae <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e5c:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 8002e5e:	2102      	movs	r1, #2
 8002e60:	2008      	movs	r0, #8
 8002e62:	f000 fd3d 	bl	80038e0 <SCHEDULER_task_set_mode>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20001fb4 	.word	0x20001fb4

08002e74 <arming>:

static void arming(mask_def_ids_t mask_id){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e7e:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_ARMING);
 8002e80:	211c      	movs	r1, #28
 8002e82:	4807      	ldr	r0, [pc, #28]	; (8002ea0 <arming+0x2c>)
 8002e84:	f000 f963 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);	//We re now busy => cant go in calibration mode or other "on the ground" modes
 8002e88:	211e      	movs	r1, #30
 8002e8a:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <arming+0x2c>)
 8002e8c:	f000 f95f 	bl	800314e <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e90:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ARMING);
 8002e92:	2003      	movs	r0, #3
 8002e94:	f7ff fa8c 	bl	80023b0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20001fb4 	.word	0x20001fb4

08002ea4 <gyro_acc_calibration>:

static void gyro_acc_calibration(mask_def_ids_t mask_id){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eae:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8002eb0:	211f      	movs	r1, #31
 8002eb2:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <gyro_acc_calibration+0x3c>)
 8002eb4:	f000 f94b 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);
 8002eb8:	211e      	movs	r1, #30
 8002eba:	4809      	ldr	r0, [pc, #36]	; (8002ee0 <gyro_acc_calibration+0x3c>)
 8002ebc:	f000 f947 	bl	800314e <MASK_set_flag>
	MASK_clean_flag(&flags, FLAG_CHAN_9_PUSH);
 8002ec0:	2117      	movs	r1, #23
 8002ec2:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <gyro_acc_calibration+0x3c>)
 8002ec4:	f000 f973 	bl	80031ae <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_DONE);
 8002ec8:	2120      	movs	r1, #32
 8002eca:	4805      	ldr	r0, [pc, #20]	; (8002ee0 <gyro_acc_calibration+0x3c>)
 8002ecc:	f000 f96f 	bl	80031ae <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ed0:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_GYRO_ACC_CALIBRATION);
 8002ed2:	2004      	movs	r0, #4
 8002ed4:	f7ff fa6c 	bl	80023b0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20001fb4 	.word	0x20001fb4

08002ee4 <EVENT_init>:


void EVENT_init(system_t * sys_){
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	initialized = TRUE ;
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <EVENT_init+0x24>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
	sys =sys_;
 8002ef2:	4a06      	ldr	r2, [pc, #24]	; (8002f0c <EVENT_init+0x28>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6013      	str	r3, [r2, #0]

	//Configuration des mask associés aux events
	mask_def_events_init(events_main);
 8002ef8:	4805      	ldr	r0, [pc, #20]	; (8002f10 <EVENT_init+0x2c>)
 8002efa:	f000 f987 	bl	800320c <mask_def_events_init>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20001fc4 	.word	0x20001fc4
 8002f0c:	20001fc0 	.word	0x20001fc0
 8002f10:	20000204 	.word	0x20000204

08002f14 <EVENT_process>:

//Déclenchement des events en main
void EVENT_process(bool_e test_all){
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	if(new_flag)
 8002f1c:	4b41      	ldr	r3, [pc, #260]	; (8003024 <EVENT_process+0x110>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d07a      	beq.n	800301a <EVENT_process+0x106>
	{
		new_flag = FALSE;
 8002f24:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <EVENT_process+0x110>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

		//Nombre d'event à tester
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <EVENT_process+0x24>
			max = EVENT_COUNT ;
 8002f34:	230c      	movs	r3, #12
 8002f36:	75fb      	strb	r3, [r7, #23]



		//Pout chaque event
		for(uint32_t e = 0; e < max; e ++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	e069      	b.n	8003012 <EVENT_process+0xfe>
		{

			uint32_t m = 0 ;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]

			//On test chaque paires de masque
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8002f46:	e049      	b.n	8002fdc <EVENT_process+0xc8>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8002f48:	4837      	ldr	r0, [pc, #220]	; (8003028 <EVENT_process+0x114>)
 8002f4a:	4938      	ldr	r1, [pc, #224]	; (800302c <EVENT_process+0x118>)
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	24b4      	movs	r4, #180	; 0xb4
 8002f54:	fb04 f303 	mul.w	r3, r4, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	4419      	add	r1, r3
 8002f5c:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002f60:	c903      	ldmia	r1, {r0, r1}
 8002f62:	f000 f895 	bl	8003090 <Mask_test_and>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d034      	beq.n	8002fd6 <EVENT_process+0xc2>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 8002f6c:	482e      	ldr	r0, [pc, #184]	; (8003028 <EVENT_process+0x114>)
 8002f6e:	492f      	ldr	r1, [pc, #188]	; (800302c <EVENT_process+0x118>)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1dda      	adds	r2, r3, #7
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	00d2      	lsls	r2, r2, #3
 8002f78:	24b4      	movs	r4, #180	; 0xb4
 8002f7a:	fb04 f303 	mul.w	r3, r4, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	4419      	add	r1, r3
 8002f82:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002f86:	c903      	ldmia	r1, {r0, r1}
 8002f88:	f000 f8b5 	bl	80030f6 <Mask_test_or>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d021      	beq.n	8002fd6 <EVENT_process+0xc2>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	//Mask not test
 8002f92:	4825      	ldr	r0, [pc, #148]	; (8003028 <EVENT_process+0x114>)
 8002f94:	4925      	ldr	r1, [pc, #148]	; (800302c <EVENT_process+0x118>)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f103 020e 	add.w	r2, r3, #14
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	00d2      	lsls	r2, r2, #3
 8002fa0:	24b4      	movs	r4, #180	; 0xb4
 8002fa2:	fb04 f303 	mul.w	r3, r4, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4419      	add	r1, r3
 8002faa:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002fae:	c903      	ldmia	r1, {r0, r1}
 8002fb0:	f000 f8a1 	bl	80030f6 <Mask_test_or>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <EVENT_process+0xc2>
						{
							events_main[e].function(m);
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <EVENT_process+0x118>)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	21b4      	movs	r1, #180	; 0xb4
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	33b0      	adds	r3, #176	; 0xb0
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	60bb      	str	r3, [r7, #8]
						}
					}
				}
				m++ ;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8002fdc:	4a13      	ldr	r2, [pc, #76]	; (800302c <EVENT_process+0x118>)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	21b4      	movs	r1, #180	; 0xb4
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	33a8      	adds	r3, #168	; 0xa8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d20c      	bcs.n	800300c <EVENT_process+0xf8>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <EVENT_process+0xf8>
 8002ff8:	4a0c      	ldr	r2, [pc, #48]	; (800302c <EVENT_process+0x118>)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	21b4      	movs	r1, #180	; 0xb4
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	33ac      	adds	r3, #172	; 0xac
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d09d      	beq.n	8002f48 <EVENT_process+0x34>
		for(uint32_t e = 0; e < max; e ++)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	3301      	adds	r3, #1
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	429a      	cmp	r2, r3
 8003018:	d391      	bcc.n	8002f3e <EVENT_process+0x2a>
			}

		}
	}
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd90      	pop	{r4, r7, pc}
 8003022:	bf00      	nop
 8003024:	20001fbc 	.word	0x20001fbc
 8003028:	20001fb4 	.word	0x20001fb4
 800302c:	20000204 	.word	0x20000204

08003030 <EVENT_Set_flag>:


//Set a flag
void EVENT_Set_flag(Flags_e flag){
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800303a:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <EVENT_Set_flag+0x28>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	4619      	mov	r1, r3
 8003046:	4805      	ldr	r0, [pc, #20]	; (800305c <EVENT_Set_flag+0x2c>)
 8003048:	f000 f881 	bl	800314e <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800304c:	b662      	cpsie	i
	__enable_irq();
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20001fbc 	.word	0x20001fbc
 800305c:	20001fb4 	.word	0x20001fb4

08003060 <EVENT_Clean_flag>:
//CleaR a flag (i know it should be called cleaR instead of cleaN but i didnt took the time to change it YET)
//Todo : cleaRRRRRRR a flag
void EVENT_Clean_flag(Flags_e flag){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800306a:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <EVENT_Clean_flag+0x28>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	4619      	mov	r1, r3
 8003076:	4805      	ldr	r0, [pc, #20]	; (800308c <EVENT_Clean_flag+0x2c>)
 8003078:	f000 f899 	bl	80031ae <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800307c:	b662      	cpsie	i
	__enable_irq();
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20001fbc 	.word	0x20001fbc
 800308c:	20001fb4 	.word	0x20001fb4

08003090 <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 8003090:	b490      	push	{r4, r7}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	f107 0408 	add.w	r4, r7, #8
 800309a:	e884 0003 	stmia.w	r4, {r0, r1}
 800309e:	4639      	mov	r1, r7
 80030a0:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	e01c      	b.n	80030e4 <Mask_test_and+0x54>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	f107 0218 	add.w	r2, r7, #24
 80030b2:	4413      	add	r3, r2
 80030b4:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	f107 0118 	add.w	r1, r7, #24
 80030c0:	440b      	add	r3, r1
 80030c2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80030c6:	401a      	ands	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	f107 0118 	add.w	r1, r7, #24
 80030d0:	440b      	add	r3, r1
 80030d2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <Mask_test_and+0x4e>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
 80030da:	2300      	movs	r3, #0
 80030dc:	e006      	b.n	80030ec <Mask_test_and+0x5c>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3301      	adds	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	dddf      	ble.n	80030aa <Mask_test_and+0x1a>
		}
	return TRUE ;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc90      	pop	{r4, r7}
 80030f4:	4770      	bx	lr

080030f6 <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 80030f6:	b490      	push	{r4, r7}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	f107 0408 	add.w	r4, r7, #8
 8003100:	e884 0003 	stmia.w	r4, {r0, r1}
 8003104:	4639      	mov	r1, r7
 8003106:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e015      	b.n	800313c <Mask_test_or+0x46>
		if(mask_test.array[m] & mask_ref.array[m])
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	f107 0218 	add.w	r2, r7, #24
 8003118:	4413      	add	r3, r2
 800311a:	f853 2c10 	ldr.w	r2, [r3, #-16]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	f107 0118 	add.w	r1, r7, #24
 8003126:	440b      	add	r3, r1
 8003128:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <Mask_test_or+0x40>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
 8003132:	2301      	movs	r3, #1
 8003134:	e006      	b.n	8003144 <Mask_test_or+0x4e>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3301      	adds	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b01      	cmp	r3, #1
 8003140:	dde6      	ble.n	8003110 <Mask_test_or+0x1a>
	return FALSE ;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bc90      	pop	{r4, r7}
 800314c:	4770      	bx	lr

0800314e <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
 800314e:	b480      	push	{r7}
 8003150:	b087      	sub	sp, #28
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	b2db      	uxtb	r3, r3
 8003160:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 800316a:	2201      	movs	r2, #1
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	60fb      	str	r3, [r7, #12]
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4013      	ands	r3, r2
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	429a      	cmp	r2, r3
 8003184:	d101      	bne.n	800318a <MASK_set_flag+0x3c>
		return FALSE ;
 8003186:	2300      	movs	r3, #0
 8003188:	e00b      	b.n	80031a2 <MASK_set_flag+0x54>
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	ea42 0103 	orr.w	r1, r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return TRUE ;
 80031a0:	2301      	movs	r3, #1
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
 80031ae:	b480      	push	{r7}
 80031b0:	b087      	sub	sp, #28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 80031ca:	2201      	movs	r2, #1
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	60fb      	str	r3, [r7, #12]
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d10b      	bne.n	80031fe <MASK_clean_flag+0x50>
		mask->array[array_nb] -= flag_mask ;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad1      	subs	r1, r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return TRUE ;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <MASK_clean_flag+0x52>
	}
	return FALSE ;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <mask_def_events_init>:
static void mask_def_gyro_acc_calibration(Event_t * event);
static void mask_def_manual_angle(Event_t * event);



void mask_def_events_init(Event_t * event){
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_init_ok(&event[EVENT_GYRO_INIT_OK]);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f842 	bl	80032a4 <mask_def_gyro_init_ok>
	mask_def_gyro_data_ready(&event[EVENT_GYRO_DATA_READY]);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f858 	bl	80032d6 <mask_def_gyro_data_ready>
	//Acc mask def
	mask_def_acc_init_ok(&event[EVENT_ACC_INIT_OK]);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f865 	bl	80032fc <mask_def_acc_init_ok>
	mask_def_acc_data_ready(&event[EVENT_ACC_DATA_READY]);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	33b4      	adds	r3, #180	; 0xb4
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f879 	bl	800332e <mask_def_acc_data_ready>
	//Ibus
	mask_def_ibus_data_rdy(&event[EVENT_IBUS_DATA_RDY]);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f8a3 	bl	800338e <mask_def_ibus_data_rdy>
	//Orientation
	mask_def_baro_data_rdy(&event[EVENT_BARO_DATA_RDY]);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f8b0 	bl	80033b4 <mask_def_baro_data_rdy>
	//Baro
	mask_def_orientation_update(&event[EVENT_ORIENTATION_UPDATE]);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f87a 	bl	8003354 <mask_def_orientation_update>
	//Flight_modes
	mask_def_on_the_ground(&event[EVENT_ON_THE_GROUND]);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f8cf 	bl	800340a <mask_def_on_the_ground>
	mask_def_manual_accro(&event[EVENT_MANUAL_ACCRO]);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f8f4 	bl	8003460 <mask_def_manual_accro>
	mask_def_arming(&event[EVENT_ARMING]);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f914 	bl	80034ac <mask_def_arming>
	mask_def_gyro_acc_calibration(&event[EVENT_GYRO_ACC_CALIBRATION]);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f92d 	bl	80034ea <mask_def_gyro_acc_calibration>
	mask_def_manual_angle(&event[EVENT_MANUAL_ANGLE]);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f8f5 	bl	8003486 <mask_def_manual_angle>

}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <mask_def_gyro_init_ok>:

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff4c 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3338      	adds	r3, #56	; 0x38
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff46 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3370      	adds	r3, #112	; 0x70
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff40 	bl	800314e <MASK_set_flag>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff33 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3338      	adds	r3, #56	; 0x38
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ff2d 	bl	800314e <MASK_set_flag>
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2104      	movs	r1, #4
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff20 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3338      	adds	r3, #56	; 0x38
 8003312:	2104      	movs	r1, #4
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff1a 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3370      	adds	r3, #112	; 0x70
 800331e:	2105      	movs	r1, #5
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff14 	bl	800314e <MASK_set_flag>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2104      	movs	r1, #4
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff07 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3338      	adds	r3, #56	; 0x38
 8003344:	2106      	movs	r1, #6
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff01 	bl	800314e <MASK_set_flag>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2104      	movs	r1, #4
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fef4 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff feef 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2103      	movs	r1, #3
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff feea 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3338      	adds	r3, #56	; 0x38
 800337e:	2107      	movs	r1, #7
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fee4 	bl	800314e <MASK_set_flag>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <mask_def_ibus_data_rdy>:

// ----------------	Radio ------------------------
static void mask_def_ibus_data_rdy(Event_t * event){
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
	//Si flag data rdy on y go
	MASK_set_flag(&event->mask_and[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	210c      	movs	r1, #12
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fed7 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3338      	adds	r3, #56	; 0x38
 80033a4:	210c      	movs	r1, #12
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fed1 	bl	800314e <MASK_set_flag>
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <mask_def_baro_data_rdy>:

// ----------------	BAaro ------------------------
static void mask_def_baro_data_rdy(Event_t * event){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_TEMP_RAW], FLAG_BARO_OK);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2108      	movs	r1, #8
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fec4 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_TEMP_RAW], FLAG_BARO_TEMP_RAW_RDY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3338      	adds	r3, #56	; 0x38
 80033ca:	2109      	movs	r1, #9
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff febe 	bl	800314e <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_PRESSURE_RAW], FLAG_BARO_OK);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3308      	adds	r3, #8
 80033d6:	2108      	movs	r1, #8
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff feb8 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_PRESSURE_RAW], FLAG_BARO_PRESSURE_RAW_RDY);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3340      	adds	r3, #64	; 0x40
 80033e2:	210a      	movs	r1, #10
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff feb2 	bl	800314e <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_PRESSURE], FLAG_BARO_OK);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3310      	adds	r3, #16
 80033ee:	2108      	movs	r1, #8
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff feac 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_PRESSURE], FLAG_BARO_PRESSURE_RDY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3348      	adds	r3, #72	; 0x48
 80033fa:	210b      	movs	r1, #11
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fea6 	bl	800314e <MASK_set_flag>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <mask_def_on_the_ground>:

// ----------------	Flight Modes ------------------------
static void mask_def_on_the_ground(Event_t * event){
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_FLYING], FLAG_FLYING);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2121      	movs	r1, #33	; 0x21
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fe99 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_FLYING], FLAG_CHAN_5_POS_1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3338      	adds	r3, #56	; 0x38
 8003420:	210d      	movs	r1, #13
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fe93 	bl	800314e <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_ARMING], FLAG_ARMING);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3308      	adds	r3, #8
 800342c:	211c      	movs	r1, #28
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fe8d 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_ARMING], FLAG_CHAN_5_POS_1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3340      	adds	r3, #64	; 0x40
 8003438:	210d      	movs	r1, #13
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fe87 	bl	800314e <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_IN_PROGRESS);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3310      	adds	r3, #16
 8003444:	211f      	movs	r1, #31
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fe81 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_DONE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3348      	adds	r3, #72	; 0x48
 8003450:	2120      	movs	r1, #32
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fe7b 	bl	800314e <MASK_set_flag>


}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <mask_def_manual_accro>:

static void mask_def_manual_accro(Event_t * event){
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_CHAN_6_POS_1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	210f      	movs	r1, #15
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fe6e 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_ARMED);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3338      	adds	r3, #56	; 0x38
 8003476:	211d      	movs	r1, #29
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fe68 	bl	800314e <MASK_set_flag>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <mask_def_manual_angle>:

static void mask_def_manual_angle(Event_t * event){
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_CHAN_6_POS_2);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2110      	movs	r1, #16
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fe5b 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_ARMED);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3338      	adds	r3, #56	; 0x38
 800349c:	211d      	movs	r1, #29
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fe55 	bl	800314e <MASK_set_flag>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <mask_def_arming>:

static void mask_def_arming(Event_t * event){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ARMING_ON_THE_GROUND], FLAG_GYRO_OK);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fe48 	bl	800314e <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_ARMING_ON_THE_GROUND], FLAG_CHAN_5_POS_3);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3338      	adds	r3, #56	; 0x38
 80034c2:	210e      	movs	r1, #14
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fe42 	bl	800314e <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_FLYING);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3370      	adds	r3, #112	; 0x70
 80034ce:	2121      	movs	r1, #33	; 0x21
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fe3c 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_BUSY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3370      	adds	r3, #112	; 0x70
 80034da:	211e      	movs	r1, #30
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fe36 	bl	800314e <MASK_set_flag>


}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <mask_def_gyro_acc_calibration>:

static void mask_def_gyro_acc_calibration(Event_t * event){
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_GYRO_ACC_CALIBRATION], FLAG_GYRO_OK);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fe29 	bl	800314e <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_GYRO_ACC_CALIBRATION], FLAG_CHAN_9_PUSH);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3338      	adds	r3, #56	; 0x38
 8003500:	2117      	movs	r1, #23
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fe23 	bl	800314e <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_BUSY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3370      	adds	r3, #112	; 0x70
 800350c:	211e      	movs	r1, #30
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fe1d 	bl	800314e <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_FLYING);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3370      	adds	r3, #112	; 0x70
 8003518:	2121      	movs	r1, #33	; 0x21
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fe17 	bl	800314e <MASK_set_flag>
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 8003530:	4a05      	ldr	r2, [pc, #20]	; (8003548 <SCHEDULER_init+0x20>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 8003536:	f7ff fac5 	bl	8002ac4 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fad6 	bl	8003aec <tasks_init>
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	2000201c 	.word	0x2000201c

0800354c <SCHEDULER_run>:

void SCHEDULER_run(void){
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8003552:	f000 fc8d 	bl	8003e70 <TIME_us>
 8003556:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 8003558:	f000 f8ce 	bl	80036f8 <get_first_task>
 800355c:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
	while(task_queu_position < task_queu_size && task != NULL){
 8003562:	e045      	b.n	80035f0 <SCHEDULER_run+0xa4>

		switch(task->mode){
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	7a1b      	ldrb	r3, [r3, #8]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d01f      	beq.n	80035ac <SCHEDULER_run+0x60>
 800356c:	2b03      	cmp	r3, #3
 800356e:	d002      	beq.n	8003576 <SCHEDULER_run+0x2a>
 8003570:	2b01      	cmp	r3, #1
 8003572:	d008      	beq.n	8003586 <SCHEDULER_run+0x3a>
				task->mode = TASK_MODE_WAIT ;
				break;
			case TASK_MODE_TIMMER :
			case TASK_MODE_WAIT:
			default:
				break;
 8003574:	e026      	b.n	80035c4 <SCHEDULER_run+0x78>
				current_time_us = task_process(task, current_time_us);
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	68b8      	ldr	r0, [r7, #8]
 800357a:	f000 f8e3 	bl	8003744 <task_process>
 800357e:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8003580:	2301      	movs	r3, #1
 8003582:	607b      	str	r3, [r7, #4]
				break;
 8003584:	e01e      	b.n	80035c4 <SCHEDULER_run+0x78>
				if(current_time_us >= task->desired_next_start_us){
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	429a      	cmp	r2, r3
 800358e:	d318      	bcc.n	80035c2 <SCHEDULER_run+0x76>
					current_time_us = task_process(task, current_time_us);
 8003590:	68f9      	ldr	r1, [r7, #12]
 8003592:	68b8      	ldr	r0, [r7, #8]
 8003594:	f000 f8d6 	bl	8003744 <task_process>
 8003598:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us = task->desired_period_us + current_time_us ;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	441a      	add	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 80035a6:	2301      	movs	r3, #1
 80035a8:	607b      	str	r3, [r7, #4]
				break;
 80035aa:	e00a      	b.n	80035c2 <SCHEDULER_run+0x76>
				current_time_us = task_process(task, current_time_us);
 80035ac:	68f9      	ldr	r1, [r7, #12]
 80035ae:	68b8      	ldr	r0, [r7, #8]
 80035b0:	f000 f8c8 	bl	8003744 <task_process>
 80035b4:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 80035b6:	2301      	movs	r3, #1
 80035b8:	607b      	str	r3, [r7, #4]
				task->mode = TASK_MODE_WAIT ;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2200      	movs	r2, #0
 80035be:	721a      	strb	r2, [r3, #8]
				break;
 80035c0:	e000      	b.n	80035c4 <SCHEDULER_run+0x78>
				break;
 80035c2:	bf00      	nop
		}
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <SCHEDULER_run+0x9a>
 80035ca:	2000      	movs	r0, #0
 80035cc:	f000 fc3c 	bl	8003e48 <TASK_get_task>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d006      	beq.n	80035e6 <SCHEDULER_run+0x9a>
 80035d8:	2001      	movs	r0, #1
 80035da:	f000 fc35 	bl	8003e48 <TASK_get_task>
 80035de:	4602      	mov	r2, r0
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10e      	bne.n	8003604 <SCHEDULER_run+0xb8>
			//Stop the while loop if we executed a task
			break;
		task_executed = FALSE ;
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
		task = get_next_task();
 80035ea:	f000 f895 	bl	8003718 <get_next_task>
 80035ee:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL){
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <SCHEDULER_run+0xc4>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <SCHEDULER_run+0xc8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d204      	bcs.n	8003606 <SCHEDULER_run+0xba>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1b0      	bne.n	8003564 <SCHEDULER_run+0x18>
	}
}
 8003602:	e000      	b.n	8003606 <SCHEDULER_run+0xba>
			break;
 8003604:	bf00      	nop
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20002018 	.word	0x20002018
 8003614:	20002014 	.word	0x20002014

08003618 <SCHEDULER_task>:

void SCHEDULER_task(void){
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
	//Changement de mode pour les tâches
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 800361e:	2300      	movs	r3, #0
 8003620:	71fb      	strb	r3, [r7, #7]
 8003622:	e00b      	b.n	800363c <SCHEDULER_task+0x24>
	{
		task_to_change[t]->mode = change_mode[t] ;
 8003624:	79fa      	ldrb	r2, [r7, #7]
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	490c      	ldr	r1, [pc, #48]	; (800365c <SCHEDULER_task+0x44>)
 800362a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800362e:	490c      	ldr	r1, [pc, #48]	; (8003660 <SCHEDULER_task+0x48>)
 8003630:	5c8a      	ldrb	r2, [r1, r2]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	721a      	strb	r2, [r3, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	3301      	adds	r3, #1
 800363a:	71fb      	strb	r3, [r7, #7]
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <SCHEDULER_task+0x4c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	79fa      	ldrb	r2, [r7, #7]
 8003644:	429a      	cmp	r2, r3
 8003646:	d3ed      	bcc.n	8003624 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <SCHEDULER_task+0x4c>)
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20002020 	.word	0x20002020
 8003660:	2000206c 	.word	0x2000206c
 8003664:	2000207f 	.word	0x2000207f

08003668 <SCHEDULER_get_cpu_load>:

float SCHEDULER_get_cpu_load(void){
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
	float load_pourcentage = 0 ;
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	607b      	str	r3, [r7, #4]
	for(uint32_t t = 2; t < task_queu_size; t++)
 8003674:	2302      	movs	r3, #2
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	e023      	b.n	80036c2 <SCHEDULER_get_cpu_load+0x5a>
		if(task_queu[t]->real_period_us)
 800367a:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <SCHEDULER_get_cpu_load+0x84>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d019      	beq.n	80036bc <SCHEDULER_get_cpu_load+0x54>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 8003688:	4a18      	ldr	r2, [pc, #96]	; (80036ec <SCHEDULER_get_cpu_load+0x84>)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8003696:	fb02 f203 	mul.w	r2, r2, r3
 800369a:	4914      	ldr	r1, [pc, #80]	; (80036ec <SCHEDULER_get_cpu_load+0x84>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b8:	edc7 7a01 	vstr	s15, [r7, #4]
	for(uint32_t t = 2; t < task_queu_size; t++)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	3301      	adds	r3, #1
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <SCHEDULER_get_cpu_load+0x88>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3d6      	bcc.n	800367a <SCHEDULER_get_cpu_load+0x12>

	return load_pourcentage / 512.0f ;
 80036cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80036d0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80036f4 <SCHEDULER_get_cpu_load+0x8c>
 80036d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80036dc:	eeb0 0a67 	vmov.f32	s0, s15
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20001fc8 	.word	0x20001fc8
 80036f0:	20002014 	.word	0x20002014
 80036f4:	44000000 	.word	0x44000000

080036f8 <get_first_task>:

static task_t * get_first_task(void){
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <get_first_task+0x18>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <get_first_task+0x1c>)
 8003704:	681b      	ldr	r3, [r3, #0]
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	20002018 	.word	0x20002018
 8003714:	20001fc8 	.word	0x20001fc8

08003718 <get_next_task>:

static task_t * get_next_task(void){
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 800371c:	4b07      	ldr	r3, [pc, #28]	; (800373c <get_next_task+0x24>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a06      	ldr	r2, [pc, #24]	; (800373c <get_next_task+0x24>)
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <get_next_task+0x24>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a05      	ldr	r2, [pc, #20]	; (8003740 <get_next_task+0x28>)
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20002018 	.word	0x20002018
 8003740:	20001fc8 	.word	0x20001fc8

08003744 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <task_process+0x16>
		return current_time_us ;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	e09d      	b.n	8003896 <task_process+0x152>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	3308      	adds	r3, #8
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	1ad2      	subs	r2, r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	1a8a      	subs	r2, r1, r2
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	3308      	adds	r3, #8
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	3308      	adds	r3, #8
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037aa:	4a3d      	ldr	r2, [pc, #244]	; (80038a0 <task_process+0x15c>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	091a      	lsrs	r2, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	619a      	str	r2, [r3, #24]

	task->last_execution_us = current_time_us ;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	6838      	ldr	r0, [r7, #0]
 80037c2:	4798      	blx	r3
	current_time_us = TIME_us();
 80037c4:	f000 fb54 	bl	8003e70 <TIME_us>
 80037c8:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	311e      	adds	r1, #30
 80037da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037de:	1ad2      	subs	r2, r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	1ac9      	subs	r1, r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	321e      	adds	r2, #30
 80037f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	311e      	adds	r1, #30
 800380a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800380e:	429a      	cmp	r2, r3
 8003810:	bf38      	it	cc
 8003812:	461a      	movcc	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	311e      	adds	r1, #30
 8003828:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800382c:	441a      	add	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800383a:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <task_process+0x15c>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	091a      	lsrs	r2, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	321e      	adds	r2, #30
 8003850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003858:	d90c      	bls.n	8003874 <task_process+0x130>
		task->duration_us_average_array[task->average_index] ++ ;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	f103 011e 	add.w	r1, r3, #30
 8003866:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800386a:	1c51      	adds	r1, r2, #1
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	331e      	adds	r3, #30
 8003870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003888:	2b14      	cmp	r3, #20
 800388a:	d103      	bne.n	8003894 <task_process+0x150>
		task->average_index = 0 ;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 8003894:	683b      	ldr	r3, [r7, #0]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	cccccccd 	.word	0xcccccccd

080038a4 <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	71fb      	strb	r3, [r7, #7]
	if(enable)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <SCHEDULER_enable_task+0x24>
		queu_add(TASK_get_task(id));
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fac5 	bl	8003e48 <TASK_get_task>
 80038be:	4603      	mov	r3, r0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f873 	bl	80039ac <queu_add>
	else
		queu_remove(TASK_get_task(id));
}
 80038c6:	e007      	b.n	80038d8 <SCHEDULER_enable_task+0x34>
		queu_remove(TASK_get_task(id));
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fabc 	bl	8003e48 <TASK_get_task>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f8c8 	bl	8003a68 <queu_remove>
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <SCHEDULER_task_set_mode>:

void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	460a      	mov	r2, r1
 80038ea:	71fb      	strb	r3, [r7, #7]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80038f0:	b672      	cpsid	i
	__disable_irq();
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <SCHEDULER_task_set_mode+0x4c>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461c      	mov	r4, r3
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 faa3 	bl	8003e48 <TASK_get_task>
 8003902:	4602      	mov	r2, r0
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <SCHEDULER_task_set_mode+0x50>)
 8003906:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <SCHEDULER_task_set_mode+0x4c>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	b2d1      	uxtb	r1, r2
 8003914:	4a05      	ldr	r2, [pc, #20]	; (800392c <SCHEDULER_task_set_mode+0x4c>)
 8003916:	7011      	strb	r1, [r2, #0]
 8003918:	4619      	mov	r1, r3
 800391a:	4a06      	ldr	r2, [pc, #24]	; (8003934 <SCHEDULER_task_set_mode+0x54>)
 800391c:	79bb      	ldrb	r3, [r7, #6]
 800391e:	5453      	strb	r3, [r2, r1]
  __ASM volatile ("cpsie i" : : : "memory");
 8003920:	b662      	cpsie	i
	__enable_irq();
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}
 800392a:	bf00      	nop
 800392c:	2000207f 	.word	0x2000207f
 8003930:	20002020 	.word	0x20002020
 8003934:	2000206c 	.word	0x2000206c

08003938 <SCHEDULER_reschedule_task>:

void SCHEDULER_reschedule_task(task_ids_t id, uint32_t new_period_us){
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
	task_t * task = TASK_get_task(id);
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fa7e 	bl	8003e48 <TASK_get_task>
 800394c:	60f8      	str	r0, [r7, #12]
	task->desired_period_us = new_period_us ;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	615a      	str	r2, [r3, #20]
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <queu_contains+0x12>
		return FALSE ;
 800396a:	2300      	movs	r3, #0
 800396c:	e014      	b.n	8003998 <queu_contains+0x3c>

	for(uint32_t t = 0; t < task_queu_size; t++)
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e00b      	b.n	800398c <queu_contains+0x30>
		if(task_queu[t] == task)
 8003974:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <queu_contains+0x48>)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	429a      	cmp	r2, r3
 8003980:	d101      	bne.n	8003986 <queu_contains+0x2a>
			return TRUE ;
 8003982:	2301      	movs	r3, #1
 8003984:	e008      	b.n	8003998 <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3301      	adds	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <queu_contains+0x4c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	429a      	cmp	r2, r3
 8003994:	d3ee      	bcc.n	8003974 <queu_contains+0x18>
	return FALSE ;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	20001fc8 	.word	0x20001fc8
 80039a8:	20002014 	.word	0x20002014

080039ac <queu_add>:

static bool_e queu_add(task_t * task){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ffd1 	bl	800395c <queu_contains>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d106      	bne.n	80039ce <queu_add+0x22>
 80039c0:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <queu_add+0xb4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b12      	cmp	r3, #18
 80039c6:	d802      	bhi.n	80039ce <queu_add+0x22>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <queu_add+0x26>
		return FALSE ;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e041      	b.n	8003a56 <queu_add+0xaa>


	uint32_t t = 0 ;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80039d6:	e03a      	b.n	8003a4e <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 80039d8:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <queu_add+0xb8>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <queu_add+0x50>
		{
			task_queu[t] = task ;
 80039e4:	491f      	ldr	r1, [pc, #124]	; (8003a64 <queu_add+0xb8>)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 80039ee:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <queu_add+0xb4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <queu_add+0xb4>)
 80039f6:	6013      	str	r3, [r2, #0]
			return TRUE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e02c      	b.n	8003a56 <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	4918      	ldr	r1, [pc, #96]	; (8003a64 <queu_add+0xb8>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d91c      	bls.n	8003a48 <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3301      	adds	r3, #1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <queu_add+0xb8>)
 8003a16:	1898      	adds	r0, r3, r2
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4a11      	ldr	r2, [pc, #68]	; (8003a64 <queu_add+0xb8>)
 8003a1e:	1899      	adds	r1, r3, r2
 8003a20:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <queu_add+0xb4>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f00c f837 	bl	800fa9e <memmove>
			task_queu[t] = task ;
 8003a30:	490c      	ldr	r1, [pc, #48]	; (8003a64 <queu_add+0xb8>)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <queu_add+0xb4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <queu_add+0xb4>)
 8003a42:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e006      	b.n	8003a56 <queu_add+0xaa>
		}
		t++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b12      	cmp	r3, #18
 8003a52:	d9c1      	bls.n	80039d8 <queu_add+0x2c>
	}
	return FALSE ;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20002014 	.word	0x20002014
 8003a64:	20001fc8 	.word	0x20001fc8

08003a68 <queu_remove>:

static bool_e queu_remove(task_t * task){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff73 	bl	800395c <queu_contains>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <queu_remove+0x1a>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <queu_remove+0x1e>
		return FALSE ;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e02a      	b.n	8003adc <queu_remove+0x74>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	e021      	b.n	8003ad0 <queu_remove+0x68>
		if(task == task_queu[t]){
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <queu_remove+0x7c>)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d117      	bne.n	8003aca <queu_remove+0x62>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4a11      	ldr	r2, [pc, #68]	; (8003ae4 <queu_remove+0x7c>)
 8003aa0:	1898      	adds	r0, r3, r2
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4a0e      	ldr	r2, [pc, #56]	; (8003ae4 <queu_remove+0x7c>)
 8003aaa:	1899      	adds	r1, r3, r2
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <queu_remove+0x80>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f00b fff1 	bl	800fa9e <memmove>
			task_queu_size -- ;
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <queu_remove+0x80>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <queu_remove+0x80>)
 8003ac4:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e008      	b.n	8003adc <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3301      	adds	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <queu_remove+0x80>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d3d8      	bcc.n	8003a8c <queu_remove+0x24>
		}
	}
	return FALSE ;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20001fc8 	.word	0x20001fc8
 8003ae8:	20002014 	.word	0x20002014

08003aec <tasks_init>:

static uint32_t start_time_gyro = 0;
static uint32_t end_time_filtering_gyro= 0;


void tasks_init(system_t * sys_){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 8003af4:	4a25      	ldr	r2, [pc, #148]	; (8003b8c <tasks_init+0xa0>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 8003afa:	2101      	movs	r1, #1
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7ff fed1 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 8003b02:	2101      	movs	r1, #1
 8003b04:	2001      	movs	r0, #1
 8003b06:	f7ff fecd 	bl	80038a4 <SCHEDULER_enable_task>

	SCHEDULER_enable_task(TASK_LED, TRUE);
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	f7ff fec9 	bl	80038a4 <SCHEDULER_enable_task>
	//SCHEDULER_enable_task(TASK_PRINTF, TRUE);
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 8003b12:	2101      	movs	r1, #1
 8003b14:	2008      	movs	r0, #8
 8003b16:	f7ff fec5 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	2005      	movs	r0, #5
 8003b1e:	f7ff fec1 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 8003b22:	2101      	movs	r1, #1
 8003b24:	2004      	movs	r0, #4
 8003b26:	f7ff febd 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	2007      	movs	r0, #7
 8003b2e:	f7ff feb9 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_UPDATE, TRUE);
 8003b32:	2101      	movs	r1, #1
 8003b34:	2009      	movs	r0, #9
 8003b36:	f7ff feb5 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_ANALYSIS, TRUE);
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	200a      	movs	r0, #10
 8003b3e:	f7ff feb1 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_HIGH_LVL, TRUE);
 8003b42:	2101      	movs	r1, #1
 8003b44:	200b      	movs	r0, #11
 8003b46:	f7ff fead 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_TELEMETRIE, TRUE);
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	200c      	movs	r0, #12
 8003b4e:	f7ff fea9 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_LOGGER, TRUE);
 8003b52:	2101      	movs	r1, #1
 8003b54:	200d      	movs	r0, #13
 8003b56:	f7ff fea5 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_SELF_TEST, TRUE);
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	200e      	movs	r0, #14
 8003b5e:	f7ff fea1 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_UPDATE, TRUE);
 8003b62:	2101      	movs	r1, #1
 8003b64:	200f      	movs	r0, #15
 8003b66:	f7ff fe9d 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_TEMP, TRUE);
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	2010      	movs	r0, #16
 8003b6e:	f7ff fe99 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_PRESSURE, TRUE);
 8003b72:	2101      	movs	r1, #1
 8003b74:	2011      	movs	r0, #17
 8003b76:	f7ff fe95 	bl	80038a4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_ALTITUDE, TRUE);
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	2012      	movs	r0, #18
 8003b7e:	f7ff fe91 	bl	80038a4 <SCHEDULER_enable_task>

}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20002080 	.word	0x20002080

08003b90 <process_print_f>:

void process_print_f(uint32_t current_time_us){
 8003b90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b94:	b088      	sub	sp, #32
 8003b96:	af04      	add	r7, sp, #16
 8003b98:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);
//	gyro_t * gyro = &sys->sensors.gyro ;
//	acc_t * acc = &sys->sensors.acc ;
	orientation_t * ori = &sys->orientation ;
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <process_print_f+0x5c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ba2:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	//printf("%f\t%f\t%f\t%f\t%f\t%f\t%lu\n",acc->raw[0], acc->raw[1], acc->raw[2],gyro->raw[0], gyro->raw[1], gyro->raw[2], TASK_get_task(TASK_GYRO_UPDATE)->duration_us);
	//printf("%f\t%f\t%lu\n", acc->filtered[ACC_AXE_Z], gyro->filtered[ACC_AXE_X], delta_1);
	//printf("%f\n", acc->filtered[GYRO_AXE_X]);
	//printf("%lu\n", delta_1);
	printf("%f\t%f\t%f\n", ori->angular_position[0], ori->angular_velocity[0], ori->acc_angles[0]);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fc fccd 	bl	8000548 <__aeabi_f2d>
 8003bae:	4680      	mov	r8, r0
 8003bb0:	4689      	mov	r9, r1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fc fcc5 	bl	8000548 <__aeabi_f2d>
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	460d      	mov	r5, r1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fc fcbe 	bl	8000548 <__aeabi_f2d>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bd4:	e9cd 4500 	strd	r4, r5, [sp]
 8003bd8:	4642      	mov	r2, r8
 8003bda:	464b      	mov	r3, r9
 8003bdc:	4804      	ldr	r0, [pc, #16]	; (8003bf0 <process_print_f+0x60>)
 8003bde:	f00c fbdb 	bl	8010398 <iprintf>
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bec:	20002080 	.word	0x20002080
 8003bf0:	08013ad8 	.word	0x08013ad8

08003bf4 <process_led>:


void process_led(uint32_t current_time_us){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
//	uint8_t data[2];
//	uint8_t len = DATA_LOGGER_Get_Data(DATA_ID_ROLL_GYRO, data);
//	TELEMETRY_Send_Data(&sys->radio.telemetry, data, len);
	IHM_Update();
 8003bfc:	f7fe fe40 	bl	8002880 <IHM_Update>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <process_gyro_update>:

void process_gyro_update(uint32_t current_time_us){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	start_time_gyro = current_time_us ;
 8003c10:	4a06      	ldr	r2, [pc, #24]	; (8003c2c <process_gyro_update+0x24>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <process_gyro_update+0x28>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3330      	adds	r3, #48	; 0x30
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 f90f 	bl	8004e40 <GYRO_ACC_update_dma>

}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20002084 	.word	0x20002084
 8003c30:	20002080 	.word	0x20002080

08003c34 <process_gyro_filter>:

void process_gyro_filter(uint32_t current_time_us){
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	end_time_filtering_gyro = current_time_us ;
 8003c3c:	4a06      	ldr	r2, [pc, #24]	; (8003c58 <process_gyro_filter+0x24>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6013      	str	r3, [r2, #0]

	GYRO_process_lpf(&sys->sensors.gyro);
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <process_gyro_filter+0x28>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3330      	adds	r3, #48	; 0x30
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 f915 	bl	8004e78 <GYRO_process_lpf>

}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20002088 	.word	0x20002088
 8003c5c:	20002080 	.word	0x20002080

08003c60 <process_acc_update>:

void process_acc_update(uint32_t current_time_us){
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <process_acc_update+0x1c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	33a4      	adds	r3, #164	; 0xa4
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 feec 	bl	8004a4c <ACC_update>
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20002080 	.word	0x20002080

08003c80 <process_acc_filter>:

void process_acc_filter(uint32_t current_time_us){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	ACC_process_lpf(&sys->sensors.acc);
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <process_acc_filter+0x1c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	33a4      	adds	r3, #164	; 0xa4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fefa 	bl	8004a88 <ACC_process_lpf>
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20002080 	.word	0x20002080

08003ca0 <process_event_main>:

void process_event_main(uint32_t current_time_us){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 8003ca8:	2000      	movs	r0, #0
 8003caa:	f7ff f933 	bl	8002f14 <EVENT_process>
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <process_orientation_update>:

void process_orientation_update(uint32_t current_time_us){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

	ORIENTATION_Update(&sys->orientation);
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <process_orientation_update+0x38>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fd fff7 	bl	8001cbc <ORIENTATION_Update>
	REGULATION_POSITION_Process();
 8003cce:	f000 fe59 	bl	8004984 <REGULATION_POSITION_Process>
	REGULATION_ORIENTATION_Process();
 8003cd2:	f000 fcff 	bl	80046d4 <REGULATION_ORIENTATION_Process>
	PROPULSION_Update_Motors();
 8003cd6:	f000 f929 	bl	8003f2c <PROPULSION_Update_Motors>

	POSITION_Update(&sys->position);
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <process_orientation_update+0x38>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe f988 	bl	8001ff8 <POSITION_Update>
	//delta_1 = (TIME_us() - start_time_gyro) ;
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20002080 	.word	0x20002080

08003cf4 <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 8003cfc:	f7ff fc8c 	bl	8003618 <SCHEDULER_task>
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <process_controller_channel_update>:

void process_controller_channel_update(uint32_t current_time_us){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	if(CONTROLLER_Update_Channels_Array())
 8003d10:	f000 fc66 	bl	80045e0 <CONTROLLER_Update_Channels_Array>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <process_controller_channel_update+0x1a>
		SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_ANALYSIS, TASK_MODE_EVENT);
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	200a      	movs	r0, #10
 8003d1e:	f7ff fddf 	bl	80038e0 <SCHEDULER_task_set_mode>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <process_controller_channel_analysis>:

void process_controller_channel_analysis(uint32_t current_time_us){
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
	CONTROLLER_Update_Channels_Analysis();
 8003d32:	f000 f9d7 	bl	80040e4 <CONTROLLER_Update_Channels_Analysis>
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <process_high_lvl>:

void process_high_lvl(uint32_t current_time_us){
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
	EVENT_process(TRUE);
 8003d46:	2001      	movs	r0, #1
 8003d48:	f7ff f8e4 	bl	8002f14 <EVENT_process>
	FLIGHT_MODE_Main(current_time_us);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fe fb3f 	bl	80023d0 <FLIGHT_MODE_Main>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <process_telemetry>:

void process_telemetry(uint32_t current_time_us){
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
	TELEMETRY_Process(current_time_us);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f003 fb66 	bl	8007434 <TELEMETRY_Process>
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <process_logger>:

void process_logger(uint32_t current_time_us){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	DATA_LOGGER_Main();
 8003d78:	f7fd fc36 	bl	80015e8 <DATA_LOGGER_Main>
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <process_self_test>:

void process_self_test(uint32_t current_time_us){
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	sys->soft.cpu_load = SCHEDULER_get_cpu_load();
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <process_self_test+0x24>)
 8003d8e:	681c      	ldr	r4, [r3, #0]
 8003d90:	f7ff fc6a 	bl	8003668 <SCHEDULER_get_cpu_load>
 8003d94:	eef0 7a40 	vmov.f32	s15, s0
 8003d98:	f504 6338 	add.w	r3, r4, #2944	; 0xb80
 8003d9c:	edc3 7a00 	vstr	s15, [r3]
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd90      	pop	{r4, r7, pc}
 8003da8:	20002080 	.word	0x20002080

08003dac <process_baro_update>:

void process_baro_update(uint32_t current_time_us){
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	SCHEDULER_reschedule_task(TASK_BARO_UPDATE, BARO_Main(&sys->sensors.baro));
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <process_baro_update+0x28>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fee1 	bl	8004b84 <BARO_Main>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	200f      	movs	r0, #15
 8003dc8:	f7ff fdb6 	bl	8003938 <SCHEDULER_reschedule_task>
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20002080 	.word	0x20002080

08003dd8 <process_baro_temp>:

void process_baro_temp(uint32_t current_time_us){
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	BARO_compute_temp(&sys->sensors.baro);
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <process_baro_temp+0x20>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 ff17 	bl	8004c1c <BARO_compute_temp>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20002080 	.word	0x20002080

08003dfc <process_baro_pressure>:

void process_baro_pressure(uint32_t current_time_us){
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	BARO_compute_pressure(&sys->sensors.baro);
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <process_baro_pressure+0x24>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 ff12 	bl	8004c36 <BARO_compute_pressure>
	EVENT_Set_flag(FLAG_BARO_PRESSURE_RDY);
 8003e12:	200b      	movs	r0, #11
 8003e14:	f7ff f90c 	bl	8003030 <EVENT_Set_flag>
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20002080 	.word	0x20002080

08003e24 <process_baro_altitude>:

void process_baro_altitude(uint32_t current_time_us){
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	BARO_compute_altitude(&sys->sensors.baro);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <process_baro_altitude+0x20>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 ff0b 	bl	8004c50 <BARO_compute_altitude>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20002080 	.word	0x20002080

08003e48 <TASK_get_task>:


};


task_t * TASK_get_task(task_ids_t id){
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	22d0      	movs	r2, #208	; 0xd0
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <TASK_get_task+0x24>)
 8003e5c:	4413      	add	r3, r2
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000a74 	.word	0x20000a74

08003e70 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e76:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8003e78:	f003 fcde 	bl	8007838 <HAL_GetTick>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e84:	fb02 f203 	mul.w	r2, r2, r3
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <TIME_us+0x50>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	08db      	lsrs	r3, r3, #3
 8003e8e:	490d      	ldr	r1, [pc, #52]	; (8003ec4 <TIME_us+0x54>)
 8003e90:	fba1 1303 	umull	r1, r3, r1, r3
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e9a:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s est pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us > t_us)
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <TIME_us+0x58>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d203      	bcs.n	8003eae <TIME_us+0x3e>
		t_us += 1000;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003eac:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 8003eae:	4a06      	ldr	r2, [pc, #24]	; (8003ec8 <TIME_us+0x58>)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6013      	str	r3, [r2, #0]

	return t_us;
 8003eb4:	687b      	ldr	r3, [r7, #4]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	e000e010 	.word	0xe000e010
 8003ec4:	18618619 	.word	0x18618619
 8003ec8:	2000208c 	.word	0x2000208c

08003ecc <TIME_delay_us_blocking>:

void TIME_delay_us_blocking(uint32_t duration_us){
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	uint32_t end_time = TIME_us() + duration_us;
 8003ed4:	f7ff ffcc 	bl	8003e70 <TIME_us>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4413      	add	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
	while(TIME_us() < end_time);
 8003ee0:	bf00      	nop
 8003ee2:	f7ff ffc5 	bl	8003e70 <TIME_us>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d8f9      	bhi.n	8003ee2 <TIME_delay_us_blocking+0x16>
}
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <PROPULSION_Init>:
#define ROLL prop->consigne[PROP_CONSIGNE_ROLL]
#define PITCH prop->consigne[PROP_CONSIGNE_PITCH]
#define YAW prop->consigne[PROP_CONSIGNE_YAW]
#define THRUST prop->consigne[PROP_CONSIGNE_THRUST]

void PROPULSION_Init(propulsion_t * prop_, TIM_HandleTypeDef * htim){
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	prop = prop_;
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <PROPULSION_Init+0x30>)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6013      	str	r3, [r2, #0]

	MOTORS_Init(&prop->motors, htim, prop->motors_outputs, TRUE);
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <PROPULSION_Init+0x30>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <PROPULSION_Init+0x30>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f103 0218 	add.w	r2, r3, #24
 8003f16:	2301      	movs	r3, #1
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	f00b fc1d 	bl	800f758 <MOTORS_Init>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20002090 	.word	0x20002090

08003f2c <PROPULSION_Update_Motors>:

void PROPULSION_Update_Motors(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0

	//Mixage des sorties
	int16_t m1 = THRUST + PITCH - ROLL + YAW;
 8003f32:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	4b49      	ldr	r3, [pc, #292]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	4b46      	ldr	r3, [pc, #280]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	4b42      	ldr	r3, [pc, #264]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	80fb      	strh	r3, [r7, #6]
	int16_t m2 = THRUST + PITCH + ROLL - YAW ;
 8003f68:	4b3e      	ldr	r3, [pc, #248]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	4b3c      	ldr	r3, [pc, #240]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	4b38      	ldr	r3, [pc, #224]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	4b35      	ldr	r3, [pc, #212]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	80bb      	strh	r3, [r7, #4]
	int16_t m3 = THRUST - PITCH + ROLL + YAW ;
 8003f9e:	4b31      	ldr	r3, [pc, #196]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	4b2e      	ldr	r3, [pc, #184]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	4413      	add	r3, r2
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	807b      	strh	r3, [r7, #2]
	int16_t m4 = THRUST - PITCH - ROLL - YAW ;
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	4b21      	ldr	r3, [pc, #132]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004002:	b29b      	uxth	r3, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	b29b      	uxth	r3, r3
 8004008:	803b      	strh	r3, [r7, #0]
	prop->motors_outputs[MOTOR_FL] = (uint16_t)((m1 > 0) ? m1 : 0);
 800400a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800400e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004012:	b21a      	sxth	r2, r3
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	b292      	uxth	r2, r2
 800401a:	83da      	strh	r2, [r3, #30]
	prop->motors_outputs[MOTOR_FR] = (uint16_t)((m2 > 0) ? m2 : 0);
 800401c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004020:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004024:	b21a      	sxth	r2, r3
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	b292      	uxth	r2, r2
 800402c:	839a      	strh	r2, [r3, #28]
	prop->motors_outputs[MOTOR_BR] = (uint16_t)((m3 > 0) ? m3 : 0);
 800402e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004032:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004036:	b21a      	sxth	r2, r3
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	b292      	uxth	r2, r2
 800403e:	831a      	strh	r2, [r3, #24]
	prop->motors_outputs[MOTOR_BL] = (uint16_t)((m4 > 0) ? m4 : 0);
 8004040:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004044:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004048:	b21a      	sxth	r2, r3
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	b292      	uxth	r2, r2
 8004050:	835a      	strh	r2, [r3, #26]
	MOTORS_Change_output(&prop->motors);
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <PROPULSION_Update_Motors+0x138>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f00b fbb5 	bl	800f7c6 <MOTORS_Change_output>

}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20002090 	.word	0x20002090

08004068 <CONTROLLER_Init>:
//Controller used
static controller_t * controller ;
//Private functions prototypes
static void flag_process();

void CONTROLLER_Init(controller_t * controller_, ibus_t * ibus){
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
	//Sauvegarde la structure utilsié
	controller = controller_ ;
 8004072:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <CONTROLLER_Init+0x78>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6013      	str	r3, [r2, #0]
	controller->channels = ibus->channels ;
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <CONTROLLER_Init+0x78>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	321a      	adds	r2, #26
 8004080:	601a      	str	r2, [r3, #0]

	//Configuration du mode d'analyse pour les channels
	controller->analysis_mode[0] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <CONTROLLER_Init+0x78>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2201      	movs	r2, #1
 8004088:	711a      	strb	r2, [r3, #4]
	controller->analysis_mode[1] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 800408a:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <CONTROLLER_Init+0x78>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2201      	movs	r2, #1
 8004090:	715a      	strb	r2, [r3, #5]
	controller->analysis_mode[2] = ANALYSIS_MODE_STICK_LVL ;
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <CONTROLLER_Init+0x78>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2202      	movs	r2, #2
 8004098:	719a      	strb	r2, [r3, #6]
	controller->analysis_mode[3] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <CONTROLLER_Init+0x78>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2201      	movs	r2, #1
 80040a0:	71da      	strb	r2, [r3, #7]
	controller->analysis_mode[4] = ANALYSIS_MODE_SWITCH_MODE ;
 80040a2:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <CONTROLLER_Init+0x78>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2204      	movs	r2, #4
 80040a8:	721a      	strb	r2, [r3, #8]
	controller->analysis_mode[5] = ANALYSIS_MODE_SWITCH_MODE ;
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <CONTROLLER_Init+0x78>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2204      	movs	r2, #4
 80040b0:	725a      	strb	r2, [r3, #9]
	controller->analysis_mode[6] = ANALYSIS_MODE_SWITCH_MODE ;
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <CONTROLLER_Init+0x78>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2204      	movs	r2, #4
 80040b8:	729a      	strb	r2, [r3, #10]
	controller->analysis_mode[7] = ANALYSIS_MODE_SWITCH_MODE ;
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <CONTROLLER_Init+0x78>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2204      	movs	r2, #4
 80040c0:	72da      	strb	r2, [r3, #11]
	controller->analysis_mode[8] = ANALYSIS_MODE_BUTTON_PUSH ;
 80040c2:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <CONTROLLER_Init+0x78>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2206      	movs	r2, #6
 80040c8:	731a      	strb	r2, [r3, #12]
	controller->analysis_mode[9] = ANALYSIS_MODE_BUTTON_ON_OFF ;
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <CONTROLLER_Init+0x78>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2205      	movs	r2, #5
 80040d0:	735a      	strb	r2, [r3, #13]

}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20002094 	.word	0x20002094

080040e4 <CONTROLLER_Update_Channels_Analysis>:

void CONTROLLER_Update_Channels_Analysis(void){
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
	//Analyse des channels
		bool_e button_state ;
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 80040ea:	2300      	movs	r3, #0
 80040ec:	71fb      	strb	r3, [r7, #7]
 80040ee:	e1a0      	b.n	8004432 <CONTROLLER_Update_Channels_Analysis+0x34e>
			switch (controller->analysis_mode[ch]) {
 80040f0:	4bac      	ldr	r3, [pc, #688]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	4413      	add	r3, r2
 80040fa:	791b      	ldrb	r3, [r3, #4]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	f200 818d 	bhi.w	800441c <CONTROLLER_Update_Channels_Analysis+0x338>
 8004102:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <CONTROLLER_Update_Channels_Analysis+0x24>)
 8004104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004108:	0800441d 	.word	0x0800441d
 800410c:	08004125 	.word	0x08004125
 8004110:	08004171 	.word	0x08004171
 8004114:	0800441d 	.word	0x0800441d
 8004118:	0800437d 	.word	0x0800437d
 800411c:	08004239 	.word	0x08004239
 8004120:	080042ed 	.word	0x080042ed
				case ANALYSIS_MODE_NONE:
					//On fait R
					break;

				case ANALYSIS_MODE_STICK_DEAD_BAND :
					if(abs(controller->channels[ch] - 1500) < JOYCTICK_DEAD_BAND)
 8004124:	4b9f      	ldr	r3, [pc, #636]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004138:	f113 0f1d 	cmn.w	r3, #29
 800413c:	f2c0 8170 	blt.w	8004420 <CONTROLLER_Update_Channels_Analysis+0x33c>
 8004140:	4b98      	ldr	r3, [pc, #608]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004154:	2b1d      	cmp	r3, #29
 8004156:	f300 8163 	bgt.w	8004420 <CONTROLLER_Update_Channels_Analysis+0x33c>
						controller->channels[ch] = 1500 ;
 800415a:	4b92      	ldr	r3, [pc, #584]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800416c:	801a      	strh	r2, [r3, #0]
					break;
 800416e:	e157      	b.n	8004420 <CONTROLLER_Update_Channels_Analysis+0x33c>

				case ANALYSIS_MODE_STICK_LVL :
					if(controller->channels[ch] > 1000 && controller->channels[ch] <= 1050)
 8004170:	4b8c      	ldr	r3, [pc, #560]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004184:	d914      	bls.n	80041b0 <CONTROLLER_Update_Channels_Analysis+0xcc>
 8004186:	4b87      	ldr	r3, [pc, #540]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	f240 421a 	movw	r2, #1050	; 0x41a
 800419a:	4293      	cmp	r3, r2
 800419c:	d808      	bhi.n	80041b0 <CONTROLLER_Update_Channels_Analysis+0xcc>
						controller->throttle_lvl[ch] = THROTTLE_LVL_NULL ;
 800419e:	4b81      	ldr	r3, [pc, #516]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a6:	4413      	add	r3, r2
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2020 	strb.w	r2, [r3, #32]
 80041ae:	e042      	b.n	8004236 <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1050 && controller->channels[ch] <= 1150)
 80041b0:	4b7c      	ldr	r3, [pc, #496]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4413      	add	r3, r2
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	f240 421a 	movw	r2, #1050	; 0x41a
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d914      	bls.n	80041f2 <CONTROLLER_Update_Channels_Analysis+0x10e>
 80041c8:	4b76      	ldr	r3, [pc, #472]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4413      	add	r3, r2
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	f240 427e 	movw	r2, #1150	; 0x47e
 80041dc:	4293      	cmp	r3, r2
 80041de:	d808      	bhi.n	80041f2 <CONTROLLER_Update_Channels_Analysis+0x10e>
						controller->throttle_lvl[ch] = THROTTLE_LVL_LOW ;
 80041e0:	4b70      	ldr	r3, [pc, #448]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e8:	4413      	add	r3, r2
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2020 	strb.w	r2, [r3, #32]
 80041f0:	e021      	b.n	8004236 <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1150 && controller->channels[ch] < 2000)
 80041f2:	4b6c      	ldr	r3, [pc, #432]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	f240 427e 	movw	r2, #1150	; 0x47e
 8004206:	4293      	cmp	r3, r2
 8004208:	f240 810c 	bls.w	8004424 <CONTROLLER_Update_Channels_Analysis+0x340>
 800420c:	4b65      	ldr	r3, [pc, #404]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004220:	f080 8100 	bcs.w	8004424 <CONTROLLER_Update_Channels_Analysis+0x340>
						controller->throttle_lvl[ch] = THROTTLE_LVL_HIGH ;
 8004224:	4b5f      	ldr	r3, [pc, #380]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	4413      	add	r3, r2
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2020 	strb.w	r2, [r3, #32]


					break;
 8004234:	e0f6      	b.n	8004424 <CONTROLLER_Update_Channels_Analysis+0x340>
 8004236:	e0f5      	b.n	8004424 <CONTROLLER_Update_Channels_Analysis+0x340>

				case ANALYSIS_MODE_BUTTON_ON_OFF :
					//Active le boutton dans le code
					if(!controller->button_on_off[ch])
 8004238:	4b5a      	ldr	r3, [pc, #360]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	4413      	add	r3, r2
 8004242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d107      	bne.n	800425a <CONTROLLER_Update_Channels_Analysis+0x176>
						controller->button_on_off[ch] = BUTTON_OFF ;
 800424a:	4b56      	ldr	r3, [pc, #344]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	4413      	add	r3, r2
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 800425a:	4b52      	ldr	r3, [pc, #328]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800426e:	4293      	cmp	r3, r2
 8004270:	bf8c      	ite	hi
 8004272:	2301      	movhi	r3, #1
 8004274:	2300      	movls	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 800427a:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	4413      	add	r3, r2
 8004284:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004288:	461a      	mov	r2, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	4293      	cmp	r3, r2
 800428e:	d022      	beq.n	80042d6 <CONTROLLER_Update_Channels_Analysis+0x1f2>
 8004290:	4b44      	ldr	r3, [pc, #272]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004298:	4413      	add	r3, r2
 800429a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d119      	bne.n	80042d6 <CONTROLLER_Update_Channels_Analysis+0x1f2>
						if(controller->button_on_off[ch] == BUTTON_ON)
 80042a2:	4b40      	ldr	r3, [pc, #256]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	4413      	add	r3, r2
 80042ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d108      	bne.n	80042c6 <CONTROLLER_Update_Channels_Analysis+0x1e2>
							controller->button_on_off[ch] = BUTTON_OFF ;
 80042b4:	4b3b      	ldr	r3, [pc, #236]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042bc:	4413      	add	r3, r2
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042c4:	e007      	b.n	80042d6 <CONTROLLER_Update_Channels_Analysis+0x1f2>
						else
							controller->button_on_off[ch] = BUTTON_ON ;
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	4413      	add	r3, r2
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}

					controller->button_state[ch] = button_state ;
 80042d6:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	6839      	ldr	r1, [r7, #0]
 80042e0:	b2c9      	uxtb	r1, r1
 80042e2:	4413      	add	r3, r2
 80042e4:	460a      	mov	r2, r1
 80042e6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 80042ea:	e09c      	b.n	8004426 <CONTROLLER_Update_Channels_Analysis+0x342>

				case ANALYSIS_MODE_BUTTON_PUSH :
					//Active le boutton dans le code
					if(!controller->button_pushed[ch])
 80042ec:	4b2d      	ldr	r3, [pc, #180]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f4:	4413      	add	r3, r2
 80042f6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d107      	bne.n	800430e <CONTROLLER_Update_Channels_Analysis+0x22a>
						controller->button_pushed[ch] = BUTTON_PUSHED_NO_REQUEST ;
 80042fe:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	4413      	add	r3, r2
 8004308:	2201      	movs	r2, #1
 800430a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 800430e:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004322:	4293      	cmp	r3, r2
 8004324:	bf8c      	ite	hi
 8004326:	2301      	movhi	r3, #1
 8004328:	2300      	movls	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 800432e:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	4413      	add	r3, r2
 8004338:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800433c:	461a      	mov	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	4293      	cmp	r3, r2
 8004342:	d010      	beq.n	8004366 <CONTROLLER_Update_Channels_Analysis+0x282>
 8004344:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434c:	4413      	add	r3, r2
 800434e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004352:	2b00      	cmp	r3, #0
 8004354:	d107      	bne.n	8004366 <CONTROLLER_Update_Channels_Analysis+0x282>
						controller->button_pushed[ch] = BUTTON_PUSHED_REQUEST ;
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	4413      	add	r3, r2
 8004360:	2202      	movs	r2, #2
 8004362:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					}

					controller->button_state[ch] = button_state ;
 8004366:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	b2c9      	uxtb	r1, r1
 8004372:	4413      	add	r3, r2
 8004374:	460a      	mov	r2, r1
 8004376:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 800437a:	e054      	b.n	8004426 <CONTROLLER_Update_Channels_Analysis+0x342>
				case ANALYSIS_MODE_SEQUENCE:
					//todo analyse de séquences sur les switchs
					break;

				case ANALYSIS_MODE_SWITCH_MODE:
					if(controller->channels[ch] < 1300)
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4413      	add	r3, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	f240 5213 	movw	r2, #1299	; 0x513
 8004390:	4293      	cmp	r3, r2
 8004392:	d809      	bhi.n	80043a8 <CONTROLLER_Update_Channels_Analysis+0x2c4>
						controller->switch_pos[ch] = SWITCH_POS_1 ;
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439c:	4413      	add	r3, r2
 800439e:	2200      	movs	r2, #0
 80043a0:	749a      	strb	r2, [r3, #18]
						controller->switch_pos[ch] = SWITCH_POS_2 ;
					else if(controller->channels[ch] > 1600)
						controller->switch_pos[ch] = SWITCH_POS_3 ;
					else
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
					break;
 80043a2:	e040      	b.n	8004426 <CONTROLLER_Update_Channels_Analysis+0x342>
 80043a4:	20002094 	.word	0x20002094
					else if(controller->channels[ch] > 1300 && controller->channels[ch] < 1600)
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <CONTROLLER_Update_Channels_Analysis+0x364>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	4413      	add	r3, r2
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	f240 5214 	movw	r2, #1300	; 0x514
 80043bc:	4293      	cmp	r3, r2
 80043be:	d912      	bls.n	80043e6 <CONTROLLER_Update_Channels_Analysis+0x302>
 80043c0:	4b21      	ldr	r3, [pc, #132]	; (8004448 <CONTROLLER_Update_Channels_Analysis+0x364>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	4413      	add	r3, r2
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043d4:	d207      	bcs.n	80043e6 <CONTROLLER_Update_Channels_Analysis+0x302>
						controller->switch_pos[ch] = SWITCH_POS_2 ;
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <CONTROLLER_Update_Channels_Analysis+0x364>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	4413      	add	r3, r2
 80043e0:	2201      	movs	r2, #1
 80043e2:	749a      	strb	r2, [r3, #18]
					break;
 80043e4:	e01f      	b.n	8004426 <CONTROLLER_Update_Channels_Analysis+0x342>
					else if(controller->channels[ch] > 1600)
 80043e6:	4b18      	ldr	r3, [pc, #96]	; (8004448 <CONTROLLER_Update_Channels_Analysis+0x364>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	4413      	add	r3, r2
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043fa:	d907      	bls.n	800440c <CONTROLLER_Update_Channels_Analysis+0x328>
						controller->switch_pos[ch] = SWITCH_POS_3 ;
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <CONTROLLER_Update_Channels_Analysis+0x364>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004404:	4413      	add	r3, r2
 8004406:	2202      	movs	r2, #2
 8004408:	749a      	strb	r2, [r3, #18]
					break;
 800440a:	e00c      	b.n	8004426 <CONTROLLER_Update_Channels_Analysis+0x342>
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <CONTROLLER_Update_Channels_Analysis+0x364>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004414:	4413      	add	r3, r2
 8004416:	2203      	movs	r2, #3
 8004418:	749a      	strb	r2, [r3, #18]
					break;
 800441a:	e004      	b.n	8004426 <CONTROLLER_Update_Channels_Analysis+0x342>
				default:
					break;
 800441c:	bf00      	nop
 800441e:	e002      	b.n	8004426 <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8004420:	bf00      	nop
 8004422:	e000      	b.n	8004426 <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8004424:	bf00      	nop
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	3301      	adds	r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	71fb      	strb	r3, [r7, #7]
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	2b09      	cmp	r3, #9
 8004438:	f77f ae5a 	ble.w	80040f0 <CONTROLLER_Update_Channels_Analysis+0xc>
			}
		}

		flag_process();
 800443c:	f000 f806 	bl	800444c <flag_process>
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20002094 	.word	0x20002094

0800444c <flag_process>:

static void flag_process()
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
	//Throttle lvl
	switch(controller->throttle_lvl[2]){
 8004450:	4b62      	ldr	r3, [pc, #392]	; (80045dc <flag_process+0x190>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004458:	2b01      	cmp	r3, #1
 800445a:	d00d      	beq.n	8004478 <flag_process+0x2c>
 800445c:	2b02      	cmp	r3, #2
 800445e:	d015      	beq.n	800448c <flag_process+0x40>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11d      	bne.n	80044a0 <flag_process+0x54>
		case THROTTLE_LVL_NULL :
			EVENT_Set_flag(FLAG_THROTTLE_NULL);
 8004464:	201b      	movs	r0, #27
 8004466:	f7fe fde3 	bl	8003030 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 800446a:	201a      	movs	r0, #26
 800446c:	f7fe fdf8 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8004470:	2019      	movs	r0, #25
 8004472:	f7fe fdf5 	bl	8003060 <EVENT_Clean_flag>
			break;
 8004476:	e013      	b.n	80044a0 <flag_process+0x54>
		case THROTTLE_LVL_LOW :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8004478:	201b      	movs	r0, #27
 800447a:	f7fe fdf1 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_LOW);
 800447e:	201a      	movs	r0, #26
 8004480:	f7fe fdd6 	bl	8003030 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8004484:	2019      	movs	r0, #25
 8004486:	f7fe fdeb 	bl	8003060 <EVENT_Clean_flag>
			break;
 800448a:	e009      	b.n	80044a0 <flag_process+0x54>
		case THROTTLE_LVL_HIGH :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 800448c:	201b      	movs	r0, #27
 800448e:	f7fe fde7 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8004492:	201a      	movs	r0, #26
 8004494:	f7fe fde4 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_HIGH);
 8004498:	2019      	movs	r0, #25
 800449a:	f7fe fdc9 	bl	8003030 <EVENT_Set_flag>
			break;
 800449e:	bf00      	nop
	}

	//Switch 1 (ch5 soit ch[4])
	if(controller->switch_pos[4] == SWITCH_POS_1){
 80044a0:	4b4e      	ldr	r3, [pc, #312]	; (80045dc <flag_process+0x190>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	7d9b      	ldrb	r3, [r3, #22]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <flag_process+0x6c>
		EVENT_Set_flag(FLAG_CHAN_5_POS_1);
 80044aa:	200d      	movs	r0, #13
 80044ac:	f7fe fdc0 	bl	8003030 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_5_POS_3);
 80044b0:	200e      	movs	r0, #14
 80044b2:	f7fe fdd5 	bl	8003060 <EVENT_Clean_flag>
 80044b6:	e005      	b.n	80044c4 <flag_process+0x78>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_5_POS_1);
 80044b8:	200d      	movs	r0, #13
 80044ba:	f7fe fdd1 	bl	8003060 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_5_POS_3);
 80044be:	200e      	movs	r0, #14
 80044c0:	f7fe fdb6 	bl	8003030 <EVENT_Set_flag>
	}
	//Switch 2(ch6 soit ch[5])
	switch(controller->switch_pos[5]){
 80044c4:	4b45      	ldr	r3, [pc, #276]	; (80045dc <flag_process+0x190>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	7ddb      	ldrb	r3, [r3, #23]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d828      	bhi.n	8004520 <flag_process+0xd4>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <flag_process+0x88>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044e5 	.word	0x080044e5
 80044d8:	080044f9 	.word	0x080044f9
 80044dc:	0800450d 	.word	0x0800450d
 80044e0:	08004521 	.word	0x08004521
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_6_POS_1);
 80044e4:	200f      	movs	r0, #15
 80044e6:	f7fe fda3 	bl	8003030 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 80044ea:	2010      	movs	r0, #16
 80044ec:	f7fe fdb8 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 80044f0:	2011      	movs	r0, #17
 80044f2:	f7fe fdb5 	bl	8003060 <EVENT_Clean_flag>
			break;
 80044f6:	e013      	b.n	8004520 <flag_process+0xd4>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 80044f8:	200f      	movs	r0, #15
 80044fa:	f7fe fdb1 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_2);
 80044fe:	2010      	movs	r0, #16
 8004500:	f7fe fd96 	bl	8003030 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8004504:	2011      	movs	r0, #17
 8004506:	f7fe fdab 	bl	8003060 <EVENT_Clean_flag>
			break;
 800450a:	e009      	b.n	8004520 <flag_process+0xd4>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 800450c:	200f      	movs	r0, #15
 800450e:	f7fe fda7 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8004512:	2010      	movs	r0, #16
 8004514:	f7fe fda4 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_3);
 8004518:	2011      	movs	r0, #17
 800451a:	f7fe fd89 	bl	8003030 <EVENT_Set_flag>
			break;
 800451e:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 3(ch7 soit ch[6])
	switch(controller->switch_pos[6]){
 8004520:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <flag_process+0x190>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	7e1b      	ldrb	r3, [r3, #24]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d828      	bhi.n	800457c <flag_process+0x130>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <flag_process+0xe4>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004541 	.word	0x08004541
 8004534:	08004555 	.word	0x08004555
 8004538:	08004569 	.word	0x08004569
 800453c:	0800457d 	.word	0x0800457d
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_7_POS_1);
 8004540:	2012      	movs	r0, #18
 8004542:	f7fe fd75 	bl	8003030 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8004546:	2013      	movs	r0, #19
 8004548:	f7fe fd8a 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 800454c:	2014      	movs	r0, #20
 800454e:	f7fe fd87 	bl	8003060 <EVENT_Clean_flag>
			break;
 8004552:	e013      	b.n	800457c <flag_process+0x130>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8004554:	2012      	movs	r0, #18
 8004556:	f7fe fd83 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_2);
 800455a:	2013      	movs	r0, #19
 800455c:	f7fe fd68 	bl	8003030 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8004560:	2014      	movs	r0, #20
 8004562:	f7fe fd7d 	bl	8003060 <EVENT_Clean_flag>
			break;
 8004566:	e009      	b.n	800457c <flag_process+0x130>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8004568:	2012      	movs	r0, #18
 800456a:	f7fe fd79 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 800456e:	2013      	movs	r0, #19
 8004570:	f7fe fd76 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_3);
 8004574:	2014      	movs	r0, #20
 8004576:	f7fe fd5b 	bl	8003030 <EVENT_Set_flag>
			break;
 800457a:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 4 (ch8 soit ch[7])
	if(controller->switch_pos[7] == SWITCH_POS_1){
 800457c:	4b17      	ldr	r3, [pc, #92]	; (80045dc <flag_process+0x190>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	7e5b      	ldrb	r3, [r3, #25]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <flag_process+0x148>
		EVENT_Set_flag(FLAG_CHAN_8_POS_1);
 8004586:	2015      	movs	r0, #21
 8004588:	f7fe fd52 	bl	8003030 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_8_POS_3);
 800458c:	2016      	movs	r0, #22
 800458e:	f7fe fd67 	bl	8003060 <EVENT_Clean_flag>
 8004592:	e005      	b.n	80045a0 <flag_process+0x154>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_8_POS_1);
 8004594:	2015      	movs	r0, #21
 8004596:	f7fe fd63 	bl	8003060 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_8_POS_3);
 800459a:	2016      	movs	r0, #22
 800459c:	f7fe fd48 	bl	8003030 <EVENT_Set_flag>
	}

	//Button 1 (ch9 soit ch[8]) en mode push
	if(controller->button_pushed[8] == BUTTON_PUSHED_REQUEST){
 80045a0:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <flag_process+0x190>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d107      	bne.n	80045bc <flag_process+0x170>
		EVENT_Set_flag(FLAG_CHAN_9_PUSH);
 80045ac:	2017      	movs	r0, #23
 80045ae:	f7fe fd3f 	bl	8003030 <EVENT_Set_flag>
		controller->button_pushed[8] = BUTTON_PUSHED_NO_REQUEST ;
 80045b2:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <flag_process+0x190>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	//Button 2 (ch10 soit ch[9]) en mode on/off
	if(controller->button_on_off[9] == BUTTON_ON)
 80045bc:	4b07      	ldr	r3, [pc, #28]	; (80045dc <flag_process+0x190>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d103      	bne.n	80045d0 <flag_process+0x184>
		EVENT_Set_flag(FLAG_CHAN_10_ON);
 80045c8:	2018      	movs	r0, #24
 80045ca:	f7fe fd31 	bl	8003030 <EVENT_Set_flag>
	else
		EVENT_Clean_flag(FLAG_CHAN_10_ON);



}
 80045ce:	e002      	b.n	80045d6 <flag_process+0x18a>
		EVENT_Clean_flag(FLAG_CHAN_10_ON);
 80045d0:	2018      	movs	r0, #24
 80045d2:	f7fe fd45 	bl	8003060 <EVENT_Clean_flag>
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20002094 	.word	0x20002094

080045e0 <CONTROLLER_Update_Channels_Array>:

bool_e CONTROLLER_Update_Channels_Array(void){
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
	//Utilisation de l'ibus atm
	return IBUS_Channel_Update();
 80045e4:	f00a ff30 	bl	800f448 <IBUS_Channel_Update>
 80045e8:	4603      	mov	r3, r0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	bd80      	pop	{r7, pc}

080045ee <CONTROLLER_Rx_Data_Rdy>:

void CONTROLLER_Rx_Data_Rdy(void){
 80045ee:	b580      	push	{r7, lr}
 80045f0:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_IBUS_DATA_RDY);
 80045f2:	200c      	movs	r0, #12
 80045f4:	f7fe fd1c 	bl	8003030 <EVENT_Set_flag>
}
 80045f8:	bf00      	nop
 80045fa:	bd80      	pop	{r7, pc}

080045fc <REGULATION_ORIENTATION_Init>:

float pid_angle_settings_roll[PID_NB_SETTINGS] = {6.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};
float pid_angle_settings_pitch[PID_NB_SETTINGS] = {7.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};


void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
	orientation = orientation_ ;
 8004608:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <REGULATION_ORIENTATION_Init+0x8c>)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_ ;
 800460e:	4a1f      	ldr	r2, [pc, #124]	; (800468c <REGULATION_ORIENTATION_Init+0x90>)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6013      	str	r3, [r2, #0]
	regu_orientation->mode = REGULATION_ORIENTATION_MODE_OFF ;
 8004614:	4b1d      	ldr	r3, [pc, #116]	; (800468c <REGULATION_ORIENTATION_Init+0x90>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2200      	movs	r2, #0
 800461a:	711a      	strb	r2, [r3, #4]
	regu_orientation->outputs = output ;
 800461c:	4b1b      	ldr	r3, [pc, #108]	; (800468c <REGULATION_ORIENTATION_Init+0x90>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8


	//Init PIDs angular speed
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], pid_velocity_settings_roll, FILTER_SECOND_ORDER, filter_pid_velocity_roll_pitch);
 8004626:	4b19      	ldr	r3, [pc, #100]	; (800468c <REGULATION_ORIENTATION_Init+0x90>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f103 0008 	add.w	r0, r3, #8
 800462e:	4b18      	ldr	r3, [pc, #96]	; (8004690 <REGULATION_ORIENTATION_Init+0x94>)
 8004630:	2201      	movs	r2, #1
 8004632:	4918      	ldr	r1, [pc, #96]	; (8004694 <REGULATION_ORIENTATION_Init+0x98>)
 8004634:	f00b f9ca 	bl	800f9cc <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], pid_velocity_settings_pitch, FILTER_SECOND_ORDER, filter_pid_velocity_roll_pitch);
 8004638:	4b14      	ldr	r3, [pc, #80]	; (800468c <REGULATION_ORIENTATION_Init+0x90>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <REGULATION_ORIENTATION_Init+0x94>)
 8004642:	2201      	movs	r2, #1
 8004644:	4914      	ldr	r1, [pc, #80]	; (8004698 <REGULATION_ORIENTATION_Init+0x9c>)
 8004646:	f00b f9c1 	bl	800f9cc <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], pid_velocity_settings_yaw, FILTER_FIRST_ORDER, filter_pid_velocity_yaw);
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <REGULATION_ORIENTATION_Init+0x90>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8004652:	4b12      	ldr	r3, [pc, #72]	; (800469c <REGULATION_ORIENTATION_Init+0xa0>)
 8004654:	2200      	movs	r2, #0
 8004656:	4912      	ldr	r1, [pc, #72]	; (80046a0 <REGULATION_ORIENTATION_Init+0xa4>)
 8004658:	f00b f9b8 	bl	800f9cc <PID_init>


	//Init PIDs angular position
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], pid_angle_settings_roll, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <REGULATION_ORIENTATION_Init+0x90>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8004664:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <REGULATION_ORIENTATION_Init+0xa8>)
 8004666:	2200      	movs	r2, #0
 8004668:	490f      	ldr	r1, [pc, #60]	; (80046a8 <REGULATION_ORIENTATION_Init+0xac>)
 800466a:	f00b f9af 	bl	800f9cc <PID_init>
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], pid_angle_settings_pitch, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 800466e:	4b07      	ldr	r3, [pc, #28]	; (800468c <REGULATION_ORIENTATION_Init+0x90>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f503 709c 	add.w	r0, r3, #312	; 0x138
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <REGULATION_ORIENTATION_Init+0xa8>)
 8004678:	2200      	movs	r2, #0
 800467a:	490c      	ldr	r1, [pc, #48]	; (80046ac <REGULATION_ORIENTATION_Init+0xb0>)
 800467c:	f00b f9a6 	bl	800f9cc <PID_init>


}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	2000209c 	.word	0x2000209c
 800468c:	20002098 	.word	0x20002098
 8004690:	200019e4 	.word	0x200019e4
 8004694:	200019fc 	.word	0x200019fc
 8004698:	20001a10 	.word	0x20001a10
 800469c:	200019f0 	.word	0x200019f0
 80046a0:	20001a24 	.word	0x20001a24
 80046a4:	20001a38 	.word	0x20001a38
 80046a8:	20001a44 	.word	0x20001a44
 80046ac:	20001a58 	.word	0x20001a58

080046b0 <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_orientation_mode_e regu_mode){
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]
	regu_orientation->mode = regu_mode;
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <REGULATION_ORIENTATION_Set_Regulation_Mode+0x20>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	79fa      	ldrb	r2, [r7, #7]
 80046c0:	711a      	strb	r2, [r3, #4]
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20002098 	.word	0x20002098

080046d4 <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0

	switch(regu_orientation->mode){
 80046d8:	4b90      	ldr	r3, [pc, #576]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	791b      	ldrb	r3, [r3, #4]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d019      	beq.n	8004716 <REGULATION_ORIENTATION_Process+0x42>
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d07c      	beq.n	80047e0 <REGULATION_ORIENTATION_Process+0x10c>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d000      	beq.n	80046ec <REGULATION_ORIENTATION_Process+0x18>
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
			break;
	}

}
 80046ea:	e114      	b.n	8004916 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = 0;
 80046ec:	4b8b      	ldr	r3, [pc, #556]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80046f4:	2200      	movs	r2, #0
 80046f6:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = 0;
 80046f8:	4b88      	ldr	r3, [pc, #544]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004700:	3302      	adds	r3, #2
 8004702:	2200      	movs	r2, #0
 8004704:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = 0;
 8004706:	4b85      	ldr	r3, [pc, #532]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800470e:	3304      	adds	r3, #4
 8004710:	2200      	movs	r2, #0
 8004712:	801a      	strh	r2, [r3, #0]
			break;
 8004714:	e0ff      	b.n	8004916 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 8004716:	4b81      	ldr	r3, [pc, #516]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f103 0208 	add.w	r2, r3, #8
 800471e:	4b7f      	ldr	r3, [pc, #508]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8004726:	4b7e      	ldr	r3, [pc, #504]	; (8004920 <REGULATION_ORIENTATION_Process+0x24c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	ed93 7a00 	vldr	s14, [r3]
 8004730:	eef0 0a47 	vmov.f32	s1, s14
 8004734:	eeb0 0a67 	vmov.f32	s0, s15
 8004738:	4610      	mov	r0, r2
 800473a:	f00b f8ab 	bl	800f894 <PID_compute>
 800473e:	eef0 7a40 	vmov.f32	s15, s0
 8004742:	4b76      	ldr	r3, [pc, #472]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800474a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800474e:	ee17 2a90 	vmov	r2, s15
 8004752:	b212      	sxth	r2, r2
 8004754:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 8004756:	4b71      	ldr	r3, [pc, #452]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800475e:	4b6f      	ldr	r3, [pc, #444]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8004766:	4b6e      	ldr	r3, [pc, #440]	; (8004920 <REGULATION_ORIENTATION_Process+0x24c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	3304      	adds	r3, #4
 800476e:	ed93 7a00 	vldr	s14, [r3]
 8004772:	eef0 0a47 	vmov.f32	s1, s14
 8004776:	eeb0 0a67 	vmov.f32	s0, s15
 800477a:	4610      	mov	r0, r2
 800477c:	f00b f88a 	bl	800f894 <PID_compute>
 8004780:	eef0 7a40 	vmov.f32	s15, s0
 8004784:	4b65      	ldr	r3, [pc, #404]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800478c:	3302      	adds	r3, #2
 800478e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004792:	ee17 2a90 	vmov	r2, s15
 8004796:	b212      	sxth	r2, r2
 8004798:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 800479a:	4b60      	ldr	r3, [pc, #384]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80047a2:	4b5e      	ldr	r3, [pc, #376]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 80047aa:	4b5d      	ldr	r3, [pc, #372]	; (8004920 <REGULATION_ORIENTATION_Process+0x24c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	3308      	adds	r3, #8
 80047b2:	ed93 7a00 	vldr	s14, [r3]
 80047b6:	eef0 0a47 	vmov.f32	s1, s14
 80047ba:	eeb0 0a67 	vmov.f32	s0, s15
 80047be:	4610      	mov	r0, r2
 80047c0:	f00b f868 	bl	800f894 <PID_compute>
 80047c4:	eef0 7a40 	vmov.f32	s15, s0
 80047c8:	4b54      	ldr	r3, [pc, #336]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80047d0:	3304      	adds	r3, #4
 80047d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047d6:	ee17 2a90 	vmov	r2, s15
 80047da:	b212      	sxth	r2, r2
 80047dc:	801a      	strh	r2, [r3, #0]
			break;
 80047de:	e09a      	b.n	8004916 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->consigne_angular_speed[ORIENTATION_ROLL] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], regu_orientation->consigne_angular_pos[ORIENTATION_ROLL], orientation->angular_position[ORIENTATION_ROLL]);
 80047e0:	4b4e      	ldr	r3, [pc, #312]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80047e8:	4b4c      	ldr	r3, [pc, #304]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80047f0:	4b4b      	ldr	r3, [pc, #300]	; (8004920 <REGULATION_ORIENTATION_Process+0x24c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	ed93 7a00 	vldr	s14, [r3]
 80047f8:	eef0 0a47 	vmov.f32	s1, s14
 80047fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004800:	4610      	mov	r0, r2
 8004802:	f00b f847 	bl	800f894 <PID_compute>
 8004806:	eef0 7a40 	vmov.f32	s15, s0
 800480a:	4b44      	ldr	r3, [pc, #272]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	eef1 7a67 	vneg.f32	s15, s15
 8004812:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
			regu_orientation->consigne_angular_speed[ORIENTATION_PITCH] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], regu_orientation->consigne_angular_pos[ORIENTATION_PITCH], orientation->angular_position[ORIENTATION_PITCH]);
 8004816:	4b41      	ldr	r3, [pc, #260]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800481e:	4b3f      	ldr	r3, [pc, #252]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8004826:	4b3e      	ldr	r3, [pc, #248]	; (8004920 <REGULATION_ORIENTATION_Process+0x24c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	ed93 7a01 	vldr	s14, [r3, #4]
 800482e:	eef0 0a47 	vmov.f32	s1, s14
 8004832:	eeb0 0a67 	vmov.f32	s0, s15
 8004836:	4610      	mov	r0, r2
 8004838:	f00b f82c 	bl	800f894 <PID_compute>
 800483c:	eef0 7a40 	vmov.f32	s15, s0
 8004840:	4b36      	ldr	r3, [pc, #216]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	eef1 7a67 	vneg.f32	s15, s15
 8004848:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 800484c:	4b33      	ldr	r3, [pc, #204]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f103 0208 	add.w	r2, r3, #8
 8004854:	4b31      	ldr	r3, [pc, #196]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800485c:	4b30      	ldr	r3, [pc, #192]	; (8004920 <REGULATION_ORIENTATION_Process+0x24c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	ed93 7a00 	vldr	s14, [r3]
 8004866:	eef0 0a47 	vmov.f32	s1, s14
 800486a:	eeb0 0a67 	vmov.f32	s0, s15
 800486e:	4610      	mov	r0, r2
 8004870:	f00b f810 	bl	800f894 <PID_compute>
 8004874:	eef0 7a40 	vmov.f32	s15, s0
 8004878:	4b28      	ldr	r3, [pc, #160]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004884:	ee17 2a90 	vmov	r2, s15
 8004888:	b212      	sxth	r2, r2
 800488a:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 800488c:	4b23      	ldr	r3, [pc, #140]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8004894:	4b21      	ldr	r3, [pc, #132]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <REGULATION_ORIENTATION_Process+0x24c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	3304      	adds	r3, #4
 80048a4:	ed93 7a00 	vldr	s14, [r3]
 80048a8:	eef0 0a47 	vmov.f32	s1, s14
 80048ac:	eeb0 0a67 	vmov.f32	s0, s15
 80048b0:	4610      	mov	r0, r2
 80048b2:	f00a ffef 	bl	800f894 <PID_compute>
 80048b6:	eef0 7a40 	vmov.f32	s15, s0
 80048ba:	4b18      	ldr	r3, [pc, #96]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80048c2:	3302      	adds	r3, #2
 80048c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c8:	ee17 2a90 	vmov	r2, s15
 80048cc:	b212      	sxth	r2, r2
 80048ce:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 80048d0:	4b12      	ldr	r3, [pc, #72]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80048d8:	4b10      	ldr	r3, [pc, #64]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 80048e0:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <REGULATION_ORIENTATION_Process+0x24c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	3308      	adds	r3, #8
 80048e8:	ed93 7a00 	vldr	s14, [r3]
 80048ec:	eef0 0a47 	vmov.f32	s1, s14
 80048f0:	eeb0 0a67 	vmov.f32	s0, s15
 80048f4:	4610      	mov	r0, r2
 80048f6:	f00a ffcd 	bl	800f894 <PID_compute>
 80048fa:	eef0 7a40 	vmov.f32	s15, s0
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <REGULATION_ORIENTATION_Process+0x248>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004906:	3304      	adds	r3, #4
 8004908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800490c:	ee17 2a90 	vmov	r2, s15
 8004910:	b212      	sxth	r2, r2
 8004912:	801a      	strh	r2, [r3, #0]
			break;
 8004914:	bf00      	nop
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20002098 	.word	0x20002098
 8004920:	2000209c 	.word	0x2000209c

08004924 <REGULATION_POSITION_Init>:





void REGULATION_POSITION_Init(regu_position_t * regu_position_, regu_orientation_t * regu_orientation_, int16_t * outputs){
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
	regu_position = regu_position_;
 8004930:	4a09      	ldr	r2, [pc, #36]	; (8004958 <REGULATION_POSITION_Init+0x34>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_;
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <REGULATION_POSITION_Init+0x38>)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6013      	str	r3, [r2, #0]
	regu_position->mode = REGULATION_POSITION_MODE_OFF ;
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <REGULATION_POSITION_Init+0x34>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2200      	movs	r2, #0
 8004942:	721a      	strb	r2, [r3, #8]
	regu_position->outputs = outputs ;
 8004944:	4b04      	ldr	r3, [pc, #16]	; (8004958 <REGULATION_POSITION_Init+0x34>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	605a      	str	r2, [r3, #4]


}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	200020a0 	.word	0x200020a0
 800495c:	200020a4 	.word	0x200020a4

08004960 <REGULATION_POSITION_Set_Regulation_Mode>:

void REGULATION_POSITION_Set_Regulation_Mode(regu_position_mode_e regu_mode){
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
	regu_position->mode = regu_mode ;
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <REGULATION_POSITION_Set_Regulation_Mode+0x20>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	79fa      	ldrb	r2, [r7, #7]
 8004970:	721a      	strb	r2, [r3, #8]
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	200020a0 	.word	0x200020a0

08004984 <REGULATION_POSITION_Process>:

void REGULATION_POSITION_Process(void){
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
	switch(regu_position->mode){
 8004988:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <REGULATION_POSITION_Process+0x40>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	7a1b      	ldrb	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <REGULATION_POSITION_Process+0x14>
 8004992:	2b01      	cmp	r3, #1
 8004994:	d007      	beq.n	80049a6 <REGULATION_POSITION_Process+0x22>
			break;
		case REGULATION_POSITION_MODE_ON:
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
			break;
	}
}
 8004996:	e010      	b.n	80049ba <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = 0;
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <REGULATION_POSITION_Process+0x40>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	3306      	adds	r3, #6
 80049a0:	2200      	movs	r2, #0
 80049a2:	801a      	strh	r2, [r3, #0]
			break;
 80049a4:	e009      	b.n	80049ba <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
 80049a6:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <REGULATION_POSITION_Process+0x40>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <REGULATION_POSITION_Process+0x40>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	3306      	adds	r3, #6
 80049b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80049b6:	801a      	strh	r2, [r3, #0]
			break;
 80049b8:	bf00      	nop
}
 80049ba:	bf00      	nop
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	200020a0 	.word	0x200020a0

080049c8 <ACC_init>:
static void acc_data_callback(void);

float filter_config [3] = {0.1f, 0.9f, 0};


void ACC_init(acc_t * acc, mpu_t * mpu){
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]

	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_FIRST_ORDER);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3330      	adds	r3, #48	; 0x30
 80049d6:	2200      	movs	r2, #0
 80049d8:	491a      	ldr	r1, [pc, #104]	; (8004a44 <ACC_init+0x7c>)
 80049da:	4618      	mov	r0, r3
 80049dc:	f00a fc32 	bl	800f244 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_FIRST_ORDER);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3314      	adds	r3, #20
 80049e4:	2200      	movs	r2, #0
 80049e6:	4917      	ldr	r1, [pc, #92]	; (8004a44 <ACC_init+0x7c>)
 80049e8:	4618      	mov	r0, r3
 80049ea:	f00a fc2b 	bl	800f244 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_FIRST_ORDER);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	334c      	adds	r3, #76	; 0x4c
 80049f2:	2200      	movs	r2, #0
 80049f4:	4913      	ldr	r1, [pc, #76]	; (8004a44 <ACC_init+0x7c>)
 80049f6:	4618      	mov	r0, r3
 80049f8:	f00a fc24 	bl	800f244 <FILTER_init>


	acc->mpu = mpu ;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	601a      	str	r2, [r3, #0]
	acc->raw = acc->mpu->acc ;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	605a      	str	r2, [r3, #4]

	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <ACC_init+0x80>)
 8004a14:	2101      	movs	r1, #1
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fd30 	bl	800547c <MPU_init_acc>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d008      	beq.n	8004a34 <ACC_init+0x6c>
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d008      	beq.n	8004a38 <ACC_init+0x70>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d000      	beq.n	8004a2c <ACC_init+0x64>
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}

}
 8004a2a:	e006      	b.n	8004a3a <ACC_init+0x72>
			EVENT_Set_flag(FLAG_ACC_OK);
 8004a2c:	2004      	movs	r0, #4
 8004a2e:	f7fe faff 	bl	8003030 <EVENT_Set_flag>
			break;
 8004a32:	e002      	b.n	8004a3a <ACC_init+0x72>
			break;
 8004a34:	bf00      	nop
 8004a36:	e000      	b.n	8004a3a <ACC_init+0x72>
			break;
 8004a38:	bf00      	nop
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20001a6c 	.word	0x20001a6c
 8004a48:	08004b09 	.word	0x08004b09

08004a4c <ACC_update>:

void ACC_update(acc_t * acc){
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	switch(MPU_update_acc(acc->mpu)){
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fdbd 	bl	80055d8 <MPU_update_acc>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d00c      	beq.n	8004a7e <ACC_update+0x32>
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d006      	beq.n	8004a76 <ACC_update+0x2a>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d000      	beq.n	8004a6e <ACC_update+0x22>
			EVENT_Clean_flag(FLAG_ACC_OK);
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8004a6c:	e008      	b.n	8004a80 <ACC_update+0x34>
			EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8004a6e:	2006      	movs	r0, #6
 8004a70:	f7fe fade 	bl	8003030 <EVENT_Set_flag>
			break;
 8004a74:	e004      	b.n	8004a80 <ACC_update+0x34>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8004a76:	2004      	movs	r0, #4
 8004a78:	f7fe faf2 	bl	8003060 <EVENT_Clean_flag>
			break;
 8004a7c:	e000      	b.n	8004a80 <ACC_update+0x34>
			break;
 8004a7e:	bf00      	nop
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <ACC_process_lpf>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void ACC_process_lpf(acc_t * acc){
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	edd3 7a00 	vldr	s15, [r3]
 8004aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f00a fbf0 	bl	800f28a <FILTER_process>
 8004aaa:	eef0 7a40 	vmov.f32	s15, s0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	edc3 7a03 	vstr	s15, [r3, #12]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f103 0214 	add.w	r2, r3, #20
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	edd3 7a00 	vldr	s15, [r3]
 8004ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f00a fbdf 	bl	800f28a <FILTER_process>
 8004acc:	eef0 7a40 	vmov.f32	s15, s0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	edd3 7a00 	vldr	s15, [r3]
 8004ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8004aea:	4610      	mov	r0, r2
 8004aec:	f00a fbcd 	bl	800f28a <FILTER_process>
 8004af0:	eef0 7a40 	vmov.f32	s15, s0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	edc3 7a04 	vstr	s15, [r3, #16]
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 8004afa:	2007      	movs	r0, #7
 8004afc:	f7fe fa98 	bl	8003030 <EVENT_Set_flag>
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <acc_data_callback>:

static void acc_data_callback(void){
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8004b0c:	2006      	movs	r0, #6
 8004b0e:	f7fe fa8f 	bl	8003030 <EVENT_Set_flag>
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <ms5611_raw_temp_rdy>:


static void ms5611_raw_temp_rdy();
static void ms5611_raw_pressure_rdy();

static void ms5611_raw_temp_rdy(){
 8004b16:	b580      	push	{r7, lr}
 8004b18:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_BARO_TEMP_RAW_RDY);
 8004b1a:	2009      	movs	r0, #9
 8004b1c:	f7fe fa88 	bl	8003030 <EVENT_Set_flag>
}
 8004b20:	bf00      	nop
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <ms5611_raw_pressure_rdy>:
static void ms5611_raw_pressure_rdy(){
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_BARO_PRESSURE_RAW_RDY);
 8004b28:	200a      	movs	r0, #10
 8004b2a:	f7fe fa81 	bl	8003030 <EVENT_Set_flag>
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <BARO_init>:

void BARO_init(baro_t * baro, ms5611_t * ms5611, I2C_HandleTypeDef * hi2c){
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
	baro->ms5611 = ms5611 ;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	601a      	str	r2, [r3, #0]

	switch(MS5611_init(baro->ms5611, hi2c, ms5611_raw_temp_rdy, ms5611_raw_pressure_rdy))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <BARO_init+0x48>)
 8004b4c:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <BARO_init+0x4c>)
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	f000 fe24 	bl	800579c <MS5611_init>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d008      	beq.n	8004b6c <BARO_init+0x38>
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d008      	beq.n	8004b70 <BARO_init+0x3c>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d000      	beq.n	8004b64 <BARO_init+0x30>
		case SENSOR_REQUEST_FAIL :
			break;
		case SENSOR_REQUEST_BUSY :
			break;
	}
}
 8004b62:	e006      	b.n	8004b72 <BARO_init+0x3e>
			EVENT_Set_flag(FLAG_BARO_OK);
 8004b64:	2008      	movs	r0, #8
 8004b66:	f7fe fa63 	bl	8003030 <EVENT_Set_flag>
			break;
 8004b6a:	e002      	b.n	8004b72 <BARO_init+0x3e>
			break;
 8004b6c:	bf00      	nop
 8004b6e:	e000      	b.n	8004b72 <BARO_init+0x3e>
			break;
 8004b70:	bf00      	nop
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	08004b25 	.word	0x08004b25
 8004b80:	08004b17 	.word	0x08004b17

08004b84 <BARO_Main>:

uint32_t BARO_Main(baro_t * baro){
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	uint32_t to_return = 9600 ;
 8004b8c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004b90:	60fb      	str	r3, [r7, #12]
	switch(baro->state){
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	791b      	ldrb	r3, [r3, #4]
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d83a      	bhi.n	8004c10 <BARO_Main+0x8c>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <BARO_Main+0x1c>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bb5 	.word	0x08004bb5
 8004ba4:	08004bbd 	.word	0x08004bbd
 8004ba8:	08004bcf 	.word	0x08004bcf
 8004bac:	08004be7 	.word	0x08004be7
 8004bb0:	08004bf9 	.word	0x08004bf9
		case BARO_STATE_IDDLE:
			baro->state = BARO_STATE_ASK_TEMP ;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	711a      	strb	r2, [r3, #4]
			break;
 8004bba:	e029      	b.n	8004c10 <BARO_Main+0x8c>
		case BARO_STATE_ASK_TEMP :
			MS5611_request_temp(baro->ms5611);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fe57 	bl	8005874 <MS5611_request_temp>
			baro->state = BARO_STATE_READ_TEMP ;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	711a      	strb	r2, [r3, #4]
			break;
 8004bcc:	e020      	b.n	8004c10 <BARO_Main+0x8c>
		case BARO_STATE_READ_TEMP :
			MS5611_read_temp(baro->ms5611);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fea6 	bl	8005924 <MS5611_read_temp>
			baro->state = BARO_STATE_ASK_PRESSURE ;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2203      	movs	r2, #3
 8004bdc:	711a      	strb	r2, [r3, #4]
			to_return = 400 ;
 8004bde:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004be2:	60fb      	str	r3, [r7, #12]
			break;
 8004be4:	e014      	b.n	8004c10 <BARO_Main+0x8c>
		case BARO_STATE_ASK_PRESSURE :
			MS5611_request_pressure(baro->ms5611);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fe6e 	bl	80058cc <MS5611_request_pressure>
			baro->state = BARO_STATE_READ_PRESSURE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	711a      	strb	r2, [r3, #4]
			break;
 8004bf6:	e00b      	b.n	8004c10 <BARO_Main+0x8c>
		case BARO_STATE_READ_PRESSURE :
			MS5611_read_pressure(baro->ms5611);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fec2 	bl	8005986 <MS5611_read_pressure>
			baro->state = BARO_STATE_ASK_TEMP ;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	711a      	strb	r2, [r3, #4]
			to_return = 400 ;
 8004c08:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004c0c:	60fb      	str	r3, [r7, #12]
			break;
 8004c0e:	bf00      	nop
	}
	return to_return ;
 8004c10:	68fb      	ldr	r3, [r7, #12]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop

08004c1c <BARO_compute_temp>:

void BARO_compute_temp(baro_t * baro){
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	MS5611_calculate_temperature(baro->ms5611);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fed9 	bl	80059e0 <MS5611_calculate_temperature>

}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <BARO_compute_pressure>:
void BARO_compute_pressure(baro_t * baro){
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
	MS5611_calculate_pressure(baro->ms5611);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 ff0c 	bl	8005a60 <MS5611_calculate_pressure>
}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <BARO_compute_altitude>:
void BARO_compute_altitude(baro_t * baro){
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	MS5611_calculate_altitude(baro->ms5611);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 ff9b 	bl	8005b98 <MS5611_calculate_altitude>
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <BATTERIE_Init>:


#include "batterie.h"


void BATTERIE_Init(batterie_t * batterie, ADC_HandleTypeDef * hadc){
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b082      	sub	sp, #8
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
	batterie->hadc = hadc ;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(hadc, batterie->reading, 16);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	2210      	movs	r2, #16
 8004c80:	4619      	mov	r1, r3
 8004c82:	6838      	ldr	r0, [r7, #0]
 8004c84:	f002 fe4a 	bl	800791c <HAL_ADC_Start_DMA>
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <GYRO_init>:

//float filter[3] = {0.01234567901f, 1.777777778f, -0.7901234568f};
float filter[3] = {0.04f, 1.6f, -0.64f};
static void gyro_data_callback(void);

void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]

	//Filters init
	FILTER_init(&gyro->filters[ORIENTATION_ROLL], filter, FILTER_SECOND_ORDER);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3320      	adds	r3, #32
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	491e      	ldr	r1, [pc, #120]	; (8004d1c <GYRO_init+0x8c>)
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f00a face 	bl	800f244 <FILTER_init>
	FILTER_init(&gyro->filters[ORIENTATION_PITCH], filter, FILTER_SECOND_ORDER);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	333c      	adds	r3, #60	; 0x3c
 8004cac:	2201      	movs	r2, #1
 8004cae:	491b      	ldr	r1, [pc, #108]	; (8004d1c <GYRO_init+0x8c>)
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f00a fac7 	bl	800f244 <FILTER_init>
	FILTER_init(&gyro->filters[ORIENTATION_YAW], filter, FILTER_SECOND_ORDER);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3358      	adds	r3, #88	; 0x58
 8004cba:	2201      	movs	r2, #1
 8004cbc:	4917      	ldr	r1, [pc, #92]	; (8004d1c <GYRO_init+0x8c>)
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f00a fac0 	bl	800f244 <FILTER_init>

	gyro->mpu = mpu ;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	601a      	str	r2, [r3, #0]
	gyro->raw = gyro->mpu->gyro ;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

	gyro->offsets[ORIENTATION_ROLL] = 0.0f ;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	615a      	str	r2, [r3, #20]
	gyro->offsets[ORIENTATION_PITCH] = 0.0f ;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	619a      	str	r2, [r3, #24]

	//Raise the flag "ok" if the gyro get succesfully initiated
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a0d      	ldr	r2, [pc, #52]	; (8004d20 <GYRO_init+0x90>)
 8004cec:	2103      	movs	r1, #3
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fb0c 	bl	800530c <MPU_init_gyro>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d008      	beq.n	8004d0c <GYRO_init+0x7c>
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d008      	beq.n	8004d10 <GYRO_init+0x80>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d000      	beq.n	8004d04 <GYRO_init+0x74>
		case SENSOR_REQUEST_FAIL:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8004d02:	e006      	b.n	8004d12 <GYRO_init+0x82>
			EVENT_Set_flag(FLAG_GYRO_OK);
 8004d04:	2000      	movs	r0, #0
 8004d06:	f7fe f993 	bl	8003030 <EVENT_Set_flag>
			break;
 8004d0a:	e002      	b.n	8004d12 <GYRO_init+0x82>
			break;
 8004d0c:	bf00      	nop
 8004d0e:	e000      	b.n	8004d12 <GYRO_init+0x82>
			break;
 8004d10:	bf00      	nop
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20001a78 	.word	0x20001a78
 8004d20:	08004f4f 	.word	0x08004f4f

08004d24 <GYRO_calibrate>:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
bool_e GYRO_calibrate(gyro_t * gyro, uint16_t iteration){
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	807b      	strh	r3, [r7, #2]
	static uint16_t compteur = 0;

	static float sum[3] = {0};

	if(!compteur){
 8004d30:	4b41      	ldr	r3, [pc, #260]	; (8004e38 <GYRO_calibrate+0x114>)
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <GYRO_calibrate+0x2c>
		sum[0] = 0 ;
 8004d38:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <GYRO_calibrate+0x118>)
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
		sum[1] = 0 ;
 8004d40:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <GYRO_calibrate+0x118>)
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	605a      	str	r2, [r3, #4]
		sum[2] = 0 ;
 8004d48:	4b3c      	ldr	r3, [pc, #240]	; (8004e3c <GYRO_calibrate+0x118>)
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	609a      	str	r2, [r3, #8]
	}

	sum[0] += gyro->raw[0] + gyro->offsets[0];
 8004d50:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <GYRO_calibrate+0x118>)
 8004d52:	ed93 7a00 	vldr	s14, [r3]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	edd3 6a00 	vldr	s13, [r3]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d6c:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <GYRO_calibrate+0x118>)
 8004d6e:	edc3 7a00 	vstr	s15, [r3]
	sum[1] += gyro->raw[1] + gyro->offsets[1];
 8004d72:	4b32      	ldr	r3, [pc, #200]	; (8004e3c <GYRO_calibrate+0x118>)
 8004d74:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	edd3 6a00 	vldr	s13, [r3]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d90:	4b2a      	ldr	r3, [pc, #168]	; (8004e3c <GYRO_calibrate+0x118>)
 8004d92:	edc3 7a01 	vstr	s15, [r3, #4]
	sum[2] += gyro->raw[2] + gyro->offsets[2];
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <GYRO_calibrate+0x118>)
 8004d98:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	3308      	adds	r3, #8
 8004da2:	edd3 6a00 	vldr	s13, [r3]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	edd3 7a07 	vldr	s15, [r3, #28]
 8004dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db4:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <GYRO_calibrate+0x118>)
 8004db6:	edc3 7a02 	vstr	s15, [r3, #8]

	compteur ++;
 8004dba:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <GYRO_calibrate+0x114>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <GYRO_calibrate+0x114>)
 8004dc4:	801a      	strh	r2, [r3, #0]

	if(compteur == iteration){
 8004dc6:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <GYRO_calibrate+0x114>)
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	887a      	ldrh	r2, [r7, #2]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d12b      	bne.n	8004e28 <GYRO_calibrate+0x104>
		gyro->offsets[0] = sum[0] / (float)iteration;
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <GYRO_calibrate+0x118>)
 8004dd2:	edd3 6a00 	vldr	s13, [r3]
 8004dd6:	887b      	ldrh	r3, [r7, #2]
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	edc3 7a05 	vstr	s15, [r3, #20]
		gyro->offsets[1] = sum[1] / (float)iteration;
 8004dea:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <GYRO_calibrate+0x118>)
 8004dec:	edd3 6a01 	vldr	s13, [r3, #4]
 8004df0:	887b      	ldrh	r3, [r7, #2]
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	edc3 7a06 	vstr	s15, [r3, #24]
		gyro->offsets[2] = sum[2] / (float)iteration;
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <GYRO_calibrate+0x118>)
 8004e06:	edd3 6a02 	vldr	s13, [r3, #8]
 8004e0a:	887b      	ldrh	r3, [r7, #2]
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	edc3 7a07 	vstr	s15, [r3, #28]
		compteur = 0;
 8004e1e:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <GYRO_calibrate+0x114>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	801a      	strh	r2, [r3, #0]
		return TRUE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <GYRO_calibrate+0x106>
	}

	return FALSE;
 8004e28:	2300      	movs	r3, #0

}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	200020a8 	.word	0x200020a8
 8004e3c:	200020ac 	.word	0x200020ac

08004e40 <GYRO_ACC_update_dma>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void GYRO_ACC_update_dma(gyro_t * gyro){
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
	switch(MPU_update_all_dma(gyro->mpu)){
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fc02 	bl	8005656 <MPU_update_all_dma>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d00a      	beq.n	8004e6e <GYRO_ACC_update_dma+0x2e>
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d001      	beq.n	8004e60 <GYRO_ACC_update_dma+0x20>
 8004e5c:	2b00      	cmp	r3, #0
		case SENSOR_REQUEST_OK:
			break;
 8004e5e:	e007      	b.n	8004e70 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_FAIL:
			EVENT_Clean_flag(FLAG_GYRO_OK);
 8004e60:	2000      	movs	r0, #0
 8004e62:	f7fe f8fd 	bl	8003060 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8004e66:	2004      	movs	r0, #4
 8004e68:	f7fe f8fa 	bl	8003060 <EVENT_Clean_flag>
			break;
 8004e6c:	e000      	b.n	8004e70 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_BUSY:
			break;
 8004e6e:	bf00      	nop
	}
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <GYRO_process_lpf>:

void GYRO_process_lpf(gyro_t * gyro){
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	//Offset correction first
	gyro->raw[0] -= gyro->offsets[0];
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	ed93 7a00 	vldr	s14, [r3]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e96:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[1] -= gyro->offsets[1];
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	ed93 7a00 	vldr	s14, [r3]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	edd3 7a06 	vldr	s15, [r3, #24]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eb4:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[2] -= gyro->offsets[2];
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	ed93 7a00 	vldr	s14, [r3]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ed2:	edc3 7a00 	vstr	s15, [r3]
	//Then the actual low pass filter
	gyro->filtered[0] =  FILTER_process(&gyro->filters[0], gyro->raw[0]);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f103 0220 	add.w	r2, r3, #32
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	edd3 7a00 	vldr	s15, [r3]
 8004ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f00a f9ce 	bl	800f28a <FILTER_process>
 8004eee:	eef0 7a40 	vmov.f32	s15, s0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[1] =  FILTER_process(&gyro->filters[1], gyro->raw[1]);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	edd3 7a00 	vldr	s15, [r3]
 8004f08:	eeb0 0a67 	vmov.f32	s0, s15
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f00a f9bc 	bl	800f28a <FILTER_process>
 8004f12:	eef0 7a40 	vmov.f32	s15, s0
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro->filtered[2] =  FILTER_process(&gyro->filters[2], gyro->raw[2]);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	3308      	adds	r3, #8
 8004f28:	edd3 7a00 	vldr	s15, [r3]
 8004f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f30:	4610      	mov	r0, r2
 8004f32:	f00a f9aa 	bl	800f28a <FILTER_process>
 8004f36:	eef0 7a40 	vmov.f32	s15, s0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	edc3 7a04 	vstr	s15, [r3, #16]
	//We warn the system that we ve got new data ready to be used :)
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 8004f40:	2003      	movs	r0, #3
 8004f42:	f7fe f875 	bl	8003030 <EVENT_Set_flag>
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <gyro_data_callback>:

static void gyro_data_callback(void){
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 8004f52:	2002      	movs	r0, #2
 8004f54:	f7fe f86c 	bl	8003030 <EVENT_Set_flag>
}
 8004f58:	bf00      	nop
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <convert_gyro>:

static void MPU_spi_slow(mpu_t * mpu);
static void MPU_spi_fast(mpu_t * mpu);

//Private functions def
static void convert_gyro(mpu_t * mpu){
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_X] = -(int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	b21a      	sxth	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	b21b      	sxth	r3, r3
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	425b      	negs	r3, r3
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	b21a      	sxth	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	3303      	adds	r3, #3
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	b21a      	sxth	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	3302      	adds	r3, #2
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b21b      	sxth	r3, r3
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	b21a      	sxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	3305      	adds	r3, #5
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	b21a      	sxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	b21b      	sxth	r3, r3
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	b21a      	sxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	851a      	strh	r2, [r3, #40]	; 0x28

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004fe8:	ee07 3a90 	vmov	s15, r3
 8004fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <convert_acc>:
static void convert_acc(mpu_t * mpu){
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_X] = -(int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	3301      	adds	r3, #1
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	b21a      	sxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	b21b      	sxth	r3, r3
 8005046:	4313      	orrs	r3, r2
 8005048:	b21b      	sxth	r3, r3
 800504a:	b29b      	uxth	r3, r3
 800504c:	425b      	negs	r3, r3
 800504e:	b29b      	uxth	r3, r3
 8005050:	b21a      	sxth	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	3303      	adds	r3, #3
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	b21a      	sxth	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005068:	3302      	adds	r3, #2
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b21b      	sxth	r3, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	b21a      	sxth	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507c:	3305      	adds	r3, #5
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	b21a      	sxth	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	3304      	adds	r3, #4
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	b21b      	sxth	r3, r3
 800508e:	4313      	orrs	r3, r2
 8005090:	b21a      	sxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80050ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80050bc:	ee07 3a90 	vmov	s15, r3
 80050c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80050ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80050e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <MPU_cs_lock>:

static void MPU_cs_lock(mpu_t * mpu){
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6898      	ldr	r0, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	899b      	ldrh	r3, [r3, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	4619      	mov	r1, r3
 8005112:	f003 fe09 	bl	8008d28 <HAL_GPIO_WritePin>
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <MPU_cs_unlock>:
static void MPU_cs_unlock(mpu_t * mpu){
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6898      	ldr	r0, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	899b      	ldrh	r3, [r3, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	4619      	mov	r1, r3
 8005132:	f003 fdf9 	bl	8008d28 <HAL_GPIO_WritePin>
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <MPU_spi_slow>:

static void MPU_spi_slow(mpu_t * mpu){
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_SLOW;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 64 ;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2240      	movs	r2, #64	; 0x40
 8005154:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	4618      	mov	r0, r3
 800515c:	f007 f990 	bl	800c480 <HAL_SPI_Init>
 8005160:	4603      	mov	r3, r0
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 8005168:	200a      	movs	r0, #10
 800516a:	f002 fb71 	bl	8007850 <HAL_Delay>
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <MPU_spi_fast>:
static void MPU_spi_fast(mpu_t * mpu){
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_FAST;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 4 ;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2204      	movs	r2, #4
 800518c:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4618      	mov	r0, r3
 8005194:	f007 f974 	bl	800c480 <HAL_SPI_Init>
 8005198:	4603      	mov	r3, r0
 800519a:	461a      	mov	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 80051a0:	200a      	movs	r0, #10
 80051a2:	f002 fb55 	bl	8007850 <HAL_Delay>
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <MPU_init>:


/*
 *
 */
sensor_request_e MPU_init(mpu_t * mpu, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	807b      	strh	r3, [r7, #2]


	//Requiert un SPI pour fonctionner
	if(hspi == NULL)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <MPU_init+0x18>
		return SENSOR_REQUEST_FAIL ;
 80051c4:	2302      	movs	r3, #2
 80051c6:	e090      	b.n	80052ea <MPU_init+0x13a>


	//CS pin must be high by default
	MPU_cs_unlock(mpu);
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f7ff ffa8 	bl	800511e <MPU_cs_unlock>
	HAL_Delay(1);
 80051ce:	2001      	movs	r0, #1
 80051d0:	f002 fb3e 	bl	8007850 <HAL_Delay>
	TIME_delay_us_blocking(1);
 80051d4:	2001      	movs	r0, #1
 80051d6:	f7fe fe79 	bl	8003ecc <TIME_delay_us_blocking>

	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	73da      	strb	r2, [r3, #15]

	//SPI slow pdt l'init, max si 1Mhz for the mpu
	if(mpu->spi_speed ==  MPU_SPI_FAST)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d102      	bne.n	80051f0 <MPU_init+0x40>
		MPU_spi_slow(mpu);
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff ffa7 	bl	800513e <MPU_spi_slow>


	//Définit d'après la doc pour les registres du mpu
	mpu->gyro_data = &mpu->data[8] ;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f103 021a 	add.w	r2, r3, #26
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
	mpu->acc_data = &mpu->data[0] ;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f103 0212 	add.w	r2, r3, #18
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	645a      	str	r2, [r3, #68]	; 0x44


	//Application des paramètres de connexion
	mpu->hspi = hspi ;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	887a      	ldrh	r2, [r7, #2]
 800520e:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	22d0      	movs	r2, #208	; 0xd0
 800521a:	745a      	strb	r2, [r3, #17]

	mpu_handlers[mpu_init_compteur] = mpu ;
 800521c:	4b35      	ldr	r3, [pc, #212]	; (80052f4 <MPU_init+0x144>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	4a35      	ldr	r2, [pc, #212]	; (80052f8 <MPU_init+0x148>)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	SPI_handlers[mpu_init_compteur++] = hspi ;
 800522a:	4b32      	ldr	r3, [pc, #200]	; (80052f4 <MPU_init+0x144>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	b2d1      	uxtb	r1, r2
 8005232:	4a30      	ldr	r2, [pc, #192]	; (80052f4 <MPU_init+0x144>)
 8005234:	7011      	strb	r1, [r2, #0]
 8005236:	4619      	mov	r1, r3
 8005238:	4a30      	ldr	r2, [pc, #192]	; (80052fc <MPU_init+0x14c>)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Wakeup mpu
	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x80} ;
 8005240:	4b2f      	ldr	r3, [pc, #188]	; (8005300 <MPU_init+0x150>)
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	83bb      	strh	r3, [r7, #28]
	MPU_cs_lock(mpu);
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff ff59 	bl	80050fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6858      	ldr	r0, [r3, #4]
 8005250:	f107 011c 	add.w	r1, r7, #28
 8005254:	2302      	movs	r3, #2
 8005256:	2202      	movs	r2, #2
 8005258:	f007 f976 	bl	800c548 <HAL_SPI_Transmit>
 800525c:	4603      	mov	r3, r0
 800525e:	461a      	mov	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff ff5a 	bl	800511e <MPU_cs_unlock>

	HAL_Delay(150);
 800526a:	2096      	movs	r0, #150	; 0x96
 800526c:	f002 faf0 	bl	8007850 <HAL_Delay>

	//Clock select
	uint8_t mpu_clock_sel_pll_gyroz[] = {MPU6050_PWR_MGMT_1, 0x03};
 8005270:	4b24      	ldr	r3, [pc, #144]	; (8005304 <MPU_init+0x154>)
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	833b      	strh	r3, [r7, #24]
	MPU_cs_lock(mpu);
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff ff41 	bl	80050fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_clock_sel_pll_gyroz, 2, 2);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6858      	ldr	r0, [r3, #4]
 8005280:	f107 0118 	add.w	r1, r7, #24
 8005284:	2302      	movs	r3, #2
 8005286:	2202      	movs	r2, #2
 8005288:	f007 f95e 	bl	800c548 <HAL_SPI_Transmit>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff ff42 	bl	800511e <MPU_cs_unlock>

	HAL_Delay(15);
 800529a:	200f      	movs	r0, #15
 800529c:	f002 fad8 	bl	8007850 <HAL_Delay>

	//Disable I2C
	uint8_t mpu_disable_i2c[] = {MPU6050_USER_CTRL, 0x10};
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <MPU_init+0x158>)
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	82bb      	strh	r3, [r7, #20]
	MPU_cs_lock(mpu);
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff ff29 	bl	80050fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_disable_i2c, 2, 2);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6858      	ldr	r0, [r3, #4]
 80052b0:	f107 0114 	add.w	r1, r7, #20
 80052b4:	2302      	movs	r3, #2
 80052b6:	2202      	movs	r2, #2
 80052b8:	f007 f946 	bl	800c548 <HAL_SPI_Transmit>
 80052bc:	4603      	mov	r3, r0
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff ff2a 	bl	800511e <MPU_cs_unlock>

	TIME_delay_us_blocking(2);
 80052ca:	2002      	movs	r0, #2
 80052cc:	f7fe fdfe 	bl	8003ecc <TIME_delay_us_blocking>
//	MPU_cs_lock(mpu);
//	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, set_dlpf, 2, 2);
//	MPU_cs_unlock(mpu);

	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	7b9b      	ldrb	r3, [r3, #14]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <MPU_init+0x132>
		mpu->state = SENSOR_ERROR ;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2204      	movs	r2, #4
 80052dc:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 80052de:	2302      	movs	r3, #2
 80052e0:	e003      	b.n	80052ea <MPU_init+0x13a>
	}

	mpu->state = SENSOR_IDDLE ;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	73da      	strb	r2, [r3, #15]
	return SENSOR_REQUEST_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	200020c0 	.word	0x200020c0
 80052f8:	200020bc 	.word	0x200020bc
 80052fc:	200020b8 	.word	0x200020b8
 8005300:	08013ae4 	.word	0x08013ae4
 8005304:	08013ae8 	.word	0x08013ae8
 8005308:	08013aec 	.word	0x08013aec

0800530c <MPU_init_gyro>:

/*
 *
 */
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	460b      	mov	r3, r1
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	72fb      	strb	r3, [r7, #11]

	mpu->gyro_range = gyro_range ;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	7afa      	ldrb	r2, [r7, #11]
 800531e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mpu->gyro_data_callback = gyro_data_callback ;
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	641a      	str	r2, [r3, #64]	; 0x40

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	7bdb      	ldrb	r3, [r3, #15]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <MPU_init_gyro+0x28>
		return SENSOR_REQUEST_FAIL ;
 8005330:	2302      	movs	r3, #2
 8005332:	e096      	b.n	8005462 <MPU_init_gyro+0x156>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800533a:	2b01      	cmp	r3, #1
 800533c:	d102      	bne.n	8005344 <MPU_init_gyro+0x38>
		MPU_spi_slow(mpu);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff fefd 	bl	800513e <MPU_spi_slow>

	//Configuration de la sensi du gyro dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8005344:	239b      	movs	r3, #155	; 0x9b
 8005346:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff fed8 	bl	80050fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6858      	ldr	r0, [r3, #4]
 8005352:	f107 0214 	add.w	r2, r7, #20
 8005356:	f107 0114 	add.w	r1, r7, #20
 800535a:	2302      	movs	r3, #2
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	2302      	movs	r3, #2
 8005360:	f007 fa26 	bl	800c7b0 <HAL_SPI_TransmitReceive>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fed6 	bl	800511e <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	7b9b      	ldrb	r3, [r3, #14]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d122      	bne.n	80053c0 <MPU_init_gyro+0xb4>
		HAL_Delay(1);
 800537a:	2001      	movs	r0, #1
 800537c:	f002 fa68 	bl	8007850 <HAL_Delay>
		MPU_cs_lock(mpu);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff febc 	bl	80050fe <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 8005386:	231b      	movs	r3, #27
 8005388:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 800538a:	7d7b      	ldrb	r3, [r7, #21]
 800538c:	b25b      	sxtb	r3, r3
 800538e:	f023 0318 	bic.w	r3, r3, #24
 8005392:	b25a      	sxtb	r2, r3
 8005394:	7afb      	ldrb	r3, [r7, #11]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	b25b      	sxtb	r3, r3
 800539a:	4313      	orrs	r3, r2
 800539c:	b25b      	sxtb	r3, r3
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6858      	ldr	r0, [r3, #4]
 80053a6:	f107 0114 	add.w	r1, r7, #20
 80053aa:	2302      	movs	r3, #2
 80053ac:	2202      	movs	r2, #2
 80053ae:	f007 f8cb 	bl	800c548 <HAL_SPI_Transmit>
 80053b2:	4603      	mov	r3, r0
 80053b4:	461a      	mov	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff feaf 	bl	800511e <MPU_cs_unlock>
	}

	//ON vérifi si on a bien écris ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	7b9b      	ldrb	r3, [r3, #14]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d124      	bne.n	8005412 <MPU_init_gyro+0x106>
		uint8_t temp2 = temp[1];
 80053c8:	7d7b      	ldrb	r3, [r7, #21]
 80053ca:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 80053cc:	239b      	movs	r3, #155	; 0x9b
 80053ce:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 80053d0:	2001      	movs	r0, #1
 80053d2:	f002 fa3d 	bl	8007850 <HAL_Delay>
		MPU_cs_lock(mpu);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff fe91 	bl	80050fe <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6858      	ldr	r0, [r3, #4]
 80053e0:	f107 0214 	add.w	r2, r7, #20
 80053e4:	f107 0114 	add.w	r1, r7, #20
 80053e8:	2302      	movs	r3, #2
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	2302      	movs	r3, #2
 80053ee:	f007 f9df 	bl	800c7b0 <HAL_SPI_TransmitReceive>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff fe8f 	bl	800511e <MPU_cs_unlock>

		if(temp[1] != temp2)
 8005400:	7d7b      	ldrb	r3, [r7, #21]
 8005402:	7dfa      	ldrb	r2, [r7, #23]
 8005404:	429a      	cmp	r2, r3
 8005406:	d004      	beq.n	8005412 <MPU_init_gyro+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2204      	movs	r2, #4
 800540c:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 800540e:	2302      	movs	r3, #2
 8005410:	e027      	b.n	8005462 <MPU_init_gyro+0x156>

	}



	if(mpu->hal_state != HAL_OK)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	7b9b      	ldrb	r3, [r3, #14]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d004      	beq.n	8005424 <MPU_init_gyro+0x118>
	{
		mpu->state = SENSOR_ERROR ;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2204      	movs	r2, #4
 800541e:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8005420:	2302      	movs	r3, #2
 8005422:	e01e      	b.n	8005462 <MPU_init_gyro+0x156>
	}

	switch(gyro_range){
 8005424:	7afb      	ldrb	r3, [r7, #11]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d81a      	bhi.n	8005460 <MPU_init_gyro+0x154>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <MPU_init_gyro+0x124>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005441 	.word	0x08005441
 8005434:	08005449 	.word	0x08005449
 8005438:	08005451 	.word	0x08005451
 800543c:	08005459 	.word	0x08005459
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a0a      	ldr	r2, [pc, #40]	; (800546c <MPU_init_gyro+0x160>)
 8005444:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8005446:	e00b      	b.n	8005460 <MPU_init_gyro+0x154>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a09      	ldr	r2, [pc, #36]	; (8005470 <MPU_init_gyro+0x164>)
 800544c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800544e:	e007      	b.n	8005460 <MPU_init_gyro+0x154>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a08      	ldr	r2, [pc, #32]	; (8005474 <MPU_init_gyro+0x168>)
 8005454:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8005456:	e003      	b.n	8005460 <MPU_init_gyro+0x154>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a07      	ldr	r2, [pc, #28]	; (8005478 <MPU_init_gyro+0x16c>)
 800545c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800545e:	bf00      	nop
	}

	return SENSOR_REQUEST_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	3bfa232d 	.word	0x3bfa232d
 8005470:	3c7a232d 	.word	0x3c7a232d
 8005474:	3cf9c190 	.word	0x3cf9c190
 8005478:	3d79c190 	.word	0x3d79c190

0800547c <MPU_init_acc>:

/*
 *
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	460b      	mov	r3, r1
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	72fb      	strb	r3, [r7, #11]
	mpu->acc_range = acc_range ;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	7afa      	ldrb	r2, [r7, #11]
 800548e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	mpu->acc_data_callback = acc_data_callback ;
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	665a      	str	r2, [r3, #100]	; 0x64
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	7bdb      	ldrb	r3, [r3, #15]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <MPU_init_acc+0x28>
		return SENSOR_REQUEST_FAIL ;
 80054a0:	2302      	movs	r3, #2
 80054a2:	e095      	b.n	80055d0 <MPU_init_acc+0x154>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d102      	bne.n	80054b4 <MPU_init_acc+0x38>
			MPU_spi_slow(mpu);
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff fe45 	bl	800513e <MPU_spi_slow>

	//Configuration de la sensi de l'acc dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 80054b4:	239c      	movs	r3, #156	; 0x9c
 80054b6:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff fe20 	bl	80050fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6858      	ldr	r0, [r3, #4]
 80054c2:	f107 0214 	add.w	r2, r7, #20
 80054c6:	f107 0114 	add.w	r1, r7, #20
 80054ca:	2302      	movs	r3, #2
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2302      	movs	r3, #2
 80054d0:	f007 f96e 	bl	800c7b0 <HAL_SPI_TransmitReceive>
 80054d4:	4603      	mov	r3, r0
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff fe1e 	bl	800511e <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){	//Si mpu ok on écrit en spi dans le registre de config du mpu dédié au gyro
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	7b9b      	ldrb	r3, [r3, #14]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d122      	bne.n	8005530 <MPU_init_acc+0xb4>
		HAL_Delay(1);
 80054ea:	2001      	movs	r0, #1
 80054ec:	f002 f9b0 	bl	8007850 <HAL_Delay>
		MPU_cs_lock(mpu);
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff fe04 	bl	80050fe <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 80054f6:	231c      	movs	r3, #28
 80054f8:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 80054fa:	7d7b      	ldrb	r3, [r7, #21]
 80054fc:	b25b      	sxtb	r3, r3
 80054fe:	f023 0318 	bic.w	r3, r3, #24
 8005502:	b25a      	sxtb	r2, r3
 8005504:	7afb      	ldrb	r3, [r7, #11]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	b25b      	sxtb	r3, r3
 800550a:	4313      	orrs	r3, r2
 800550c:	b25b      	sxtb	r3, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6858      	ldr	r0, [r3, #4]
 8005516:	f107 0114 	add.w	r1, r7, #20
 800551a:	2302      	movs	r3, #2
 800551c:	2202      	movs	r2, #2
 800551e:	f007 f813 	bl	800c548 <HAL_SPI_Transmit>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff fdf7 	bl	800511e <MPU_cs_unlock>
	}

	//On test si on a bien écrit ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	7b9b      	ldrb	r3, [r3, #14]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d124      	bne.n	8005582 <MPU_init_acc+0x106>
		uint8_t temp2 = temp[1];
 8005538:	7d7b      	ldrb	r3, [r7, #21]
 800553a:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 800553c:	239c      	movs	r3, #156	; 0x9c
 800553e:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8005540:	2001      	movs	r0, #1
 8005542:	f002 f985 	bl	8007850 <HAL_Delay>
		MPU_cs_lock(mpu);
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff fdd9 	bl	80050fe <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6858      	ldr	r0, [r3, #4]
 8005550:	f107 0214 	add.w	r2, r7, #20
 8005554:	f107 0114 	add.w	r1, r7, #20
 8005558:	2302      	movs	r3, #2
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	2302      	movs	r3, #2
 800555e:	f007 f927 	bl	800c7b0 <HAL_SPI_TransmitReceive>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff fdd7 	bl	800511e <MPU_cs_unlock>

		if(temp[1] != temp2)
 8005570:	7d7b      	ldrb	r3, [r7, #21]
 8005572:	7dfa      	ldrb	r2, [r7, #23]
 8005574:	429a      	cmp	r2, r3
 8005576:	d004      	beq.n	8005582 <MPU_init_acc+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2204      	movs	r2, #4
 800557c:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 800557e:	2302      	movs	r3, #2
 8005580:	e026      	b.n	80055d0 <MPU_init_acc+0x154>
		}
	}



	switch(acc_range){
 8005582:	7afb      	ldrb	r3, [r7, #11]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d81f      	bhi.n	80055c8 <MPU_init_acc+0x14c>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <MPU_init_acc+0x114>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055ab 	.word	0x080055ab
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055bf 	.word	0x080055bf
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80055a6:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 80055a8:	e00e      	b.n	80055c8 <MPU_init_acc+0x14c>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80055b0:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 80055b2:	e009      	b.n	80055c8 <MPU_init_acc+0x14c>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80055ba:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 80055bc:	e004      	b.n	80055c8 <MPU_init_acc+0x14c>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80055c4:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 80055c6:	bf00      	nop
	}
	MPU_spi_fast(mpu);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff fdd4 	bl	8005176 <MPU_spi_fast>
	return SENSOR_REQUEST_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_REQUEST_OK ;

}

sensor_request_e MPU_update_acc(mpu_t * mpu){
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]

	if(mpu->state != SENSOR_IDDLE){
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	7bdb      	ldrb	r3, [r3, #15]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <MPU_update_acc+0x14>
		return SENSOR_REQUEST_FAIL ;
 80055e8:	2302      	movs	r3, #2
 80055ea:	e030      	b.n	800564e <MPU_update_acc+0x76>
	}

	//Update des valeurs
	uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 80055ec:	23bb      	movs	r3, #187	; 0xbb
 80055ee:	723b      	strb	r3, [r7, #8]
 80055f0:	2300      	movs	r3, #0
 80055f2:	727b      	strb	r3, [r7, #9]
 80055f4:	2300      	movs	r3, #0
 80055f6:	72bb      	strb	r3, [r7, #10]
 80055f8:	2300      	movs	r3, #0
 80055fa:	72fb      	strb	r3, [r7, #11]
 80055fc:	2300      	movs	r3, #0
 80055fe:	733b      	strb	r3, [r7, #12]
 8005600:	2300      	movs	r3, #0
 8005602:	737b      	strb	r3, [r7, #13]
	MPU_cs_lock(mpu);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff fd7a 	bl	80050fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6858      	ldr	r0, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005612:	f107 0108 	add.w	r1, r7, #8
 8005616:	2302      	movs	r3, #2
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2306      	movs	r3, #6
 800561c:	f007 f8c8 	bl	800c7b0 <HAL_SPI_TransmitReceive>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff fd78 	bl	800511e <MPU_cs_unlock>


	if(mpu->hal_state == HAL_BUSY)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7b9b      	ldrb	r3, [r3, #14]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d101      	bne.n	800563a <MPU_update_acc+0x62>
		return SENSOR_REQUEST_BUSY ;
 8005636:	2301      	movs	r3, #1
 8005638:	e009      	b.n	800564e <MPU_update_acc+0x76>
	if(mpu->hal_state != HAL_OK){
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	7b9b      	ldrb	r3, [r3, #14]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <MPU_update_acc+0x6e>
		return SENSOR_REQUEST_FAIL ;
 8005642:	2302      	movs	r3, #2
 8005644:	e003      	b.n	800564e <MPU_update_acc+0x76>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fcef 	bl	800502a <convert_acc>
	return SENSOR_REQUEST_OK ;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <MPU_update_all_dma>:
	}

	return SENSOR_REQUEST_OK;
}

sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 8005656:	b580      	push	{r7, lr}
 8005658:	b086      	sub	sp, #24
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]

	uint8_t registers [14] = {0};
 800565e:	f107 0308 	add.w	r3, r7, #8
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	609a      	str	r2, [r3, #8]
 800566a:	819a      	strh	r2, [r3, #12]
	registers[0] = MPU6050_ACCEL_XOUT_H | MPU6050_READ ;
 800566c:	23bb      	movs	r3, #187	; 0xbb
 800566e:	723b      	strb	r3, [r7, #8]
	MPU_cs_lock(mpu);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff fd44 	bl	80050fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive_DMA(mpu->hspi, registers, mpu->data, 14);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6858      	ldr	r0, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f103 0212 	add.w	r2, r3, #18
 8005680:	f107 0108 	add.w	r1, r7, #8
 8005684:	230e      	movs	r3, #14
 8005686:	f007 fa35 	bl	800caf4 <HAL_SPI_TransmitReceive_DMA>
 800568a:	4603      	mov	r3, r0
 800568c:	461a      	mov	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	7b9b      	ldrb	r3, [r3, #14]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d107      	bne.n	80056aa <MPU_update_all_dma+0x54>
	{
		mpu->state = SENSOR_BUSY ;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2203      	movs	r2, #3
 800569e:	73da      	strb	r2, [r3, #15]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2203      	movs	r2, #3
 80056a4:	741a      	strb	r2, [r3, #16]
	{
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	return SENSOR_REQUEST_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e009      	b.n	80056be <MPU_update_all_dma+0x68>
	else if(mpu->hal_state == HAL_BUSY)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7b9b      	ldrb	r3, [r3, #14]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d101      	bne.n	80056b6 <MPU_update_all_dma+0x60>
		return SENSOR_REQUEST_BUSY;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e003      	b.n	80056be <MPU_update_all_dma+0x68>
		mpu->state = SENSOR_ERROR ;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2204      	movs	r2, #4
 80056ba:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 80056bc:	2302      	movs	r3, #2
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <MPU_dma_transmit_complete>:



static void MPU_dma_transmit_complete(mpu_t * mpu){
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]

	//On relâche le pin CS du mpu
	MPU_cs_unlock(mpu);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fd25 	bl	800511e <MPU_cs_unlock>


	switch(mpu->dma_state){
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	7c1b      	ldrb	r3, [r3, #16]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d00b      	beq.n	80056f4 <MPU_dma_transmit_complete+0x2e>
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d010      	beq.n	8005702 <MPU_dma_transmit_complete+0x3c>
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d000      	beq.n	80056e6 <MPU_dma_transmit_complete+0x20>
			mpu->gyro_data_callback();

			break;
		case MPU_DMA_IDDLE:
		default:
			break;
 80056e4:	e014      	b.n	8005710 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff fc38 	bl	8004f5c <convert_gyro>
			mpu->gyro_data_callback();
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	4798      	blx	r3
			break;
 80056f2:	e00d      	b.n	8005710 <MPU_dma_transmit_complete+0x4a>
			convert_acc(mpu);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff fc98 	bl	800502a <convert_acc>
			mpu->acc_data_callback();
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056fe:	4798      	blx	r3
			break;
 8005700:	e006      	b.n	8005710 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff fc2a 	bl	8004f5c <convert_gyro>
			mpu->gyro_data_callback();
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	4798      	blx	r3
			break;
 800570e:	bf00      	nop

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	741a      	strb	r2, [r3, #16]
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <MPU_dma_transmit_half_complete>:
static void MPU_dma_transmit_half_complete(mpu_t * mpu){
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]

	if(mpu->dma_state == MPU_DMA_ACC_AND_GYRO_IN_PROGRESS)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	7c1b      	ldrb	r3, [r3, #16]
 800572a:	2b03      	cmp	r3, #3
 800572c:	d105      	bne.n	800573a <MPU_dma_transmit_half_complete+0x1c>
	{
		//A la moitié donc les données de l'acc sont arrivées
		convert_acc(mpu);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fc7b 	bl	800502a <convert_acc>
		mpu->acc_data_callback();
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005738:	4798      	blx	r3
	}
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
	if(hspi == SPI_handlers[0])
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <HAL_SPI_TxRxCpltCallback+0x24>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	429a      	cmp	r2, r3
 8005754:	d104      	bne.n	8005760 <HAL_SPI_TxRxCpltCallback+0x1c>
		MPU_dma_transmit_complete(mpu_handlers[0]);
 8005756:	4b05      	ldr	r3, [pc, #20]	; (800576c <HAL_SPI_TxRxCpltCallback+0x28>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff ffb3 	bl	80056c6 <MPU_dma_transmit_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	200020b8 	.word	0x200020b8
 800576c:	200020bc 	.word	0x200020bc

08005770 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
if(hspi == SPI_handlers[0])
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	429a      	cmp	r2, r3
 8005780:	d104      	bne.n	800578c <HAL_SPI_TxRxHalfCpltCallback+0x1c>
	MPU_dma_transmit_half_complete(mpu_handlers[0]);
 8005782:	4b05      	ldr	r3, [pc, #20]	; (8005798 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff ffc9 	bl	800571e <MPU_dma_transmit_half_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif

}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	200020b8 	.word	0x200020b8
 8005798:	200020bc 	.word	0x200020bc

0800579c <MS5611_init>:

#include "ms5611.h"
#include "math.h"
ms5611_t * ms5611_ ;

sensor_request_e MS5611_init(ms5611_t * ms5611, I2C_HandleTypeDef * hi2c, void (*temp_data), void (*pressure_data)){
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af04      	add	r7, sp, #16
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
	ms5611->state = SENSOR_NOT_INIT ;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	715a      	strb	r2, [r3, #5]
	ms5611_ = ms5611 ;
 80057b0:	4a2f      	ldr	r2, [pc, #188]	; (8005870 <MS5611_init+0xd4>)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6013      	str	r3, [r2, #0]

	//Callback function
	ms5611->temp_data = temp_data ;
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	635a      	str	r2, [r3, #52]	; 0x34
	ms5611->pressure_data = pressure_data ;
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
	if(hi2c == NULL)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <MS5611_init+0x30>
		return SENSOR_REQUEST_FAIL ;
 80057c8:	2302      	movs	r3, #2
 80057ca:	e04c      	b.n	8005866 <MS5611_init+0xca>

	ms5611->hi2c = hi2c ;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	601a      	str	r2, [r3, #0]
	ms5611->hal_state = HAL_I2C_IsDeviceReady(ms5611->hi2c, MS5611_ADRESSE, 5, 2);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	2302      	movs	r3, #2
 80057d8:	2205      	movs	r2, #5
 80057da:	21ee      	movs	r1, #238	; 0xee
 80057dc:	f004 f8a4 	bl	8009928 <HAL_I2C_IsDeviceReady>
 80057e0:	4603      	mov	r3, r0
 80057e2:	461a      	mov	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	711a      	strb	r2, [r3, #4]
	if(ms5611->hal_state != HAL_OK)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	791b      	ldrb	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MS5611_init+0x58>
		return SENSOR_REQUEST_FAIL ;
 80057f0:	2302      	movs	r3, #2
 80057f2:	e038      	b.n	8005866 <MS5611_init+0xca>

	//Get calibrations values from the sensor
	uint8_t data[2];
	for(uint8_t d = 1; d < 7; d++){
 80057f4:	2301      	movs	r3, #1
 80057f6:	75fb      	strb	r3, [r7, #23]
 80057f8:	e02e      	b.n	8005858 <MS5611_init+0xbc>
		if(ms5611->hal_state == HAL_OK){
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	791b      	ldrb	r3, [r3, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d125      	bne.n	800584e <MS5611_init+0xb2>
			ms5611->hal_state = HAL_I2C_Mem_Read(ms5611->hi2c, MS5611_ADRESSE, (uint8_t)(MS5611_PROM + (2*d)), I2C_MEMADD_SIZE_8BIT, data, 2, 2);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	7dfb      	ldrb	r3, [r7, #23]
 8005808:	3350      	adds	r3, #80	; 0x50
 800580a:	b2db      	uxtb	r3, r3
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	b2db      	uxtb	r3, r3
 8005810:	b29a      	uxth	r2, r3
 8005812:	2302      	movs	r3, #2
 8005814:	9302      	str	r3, [sp, #8]
 8005816:	2302      	movs	r3, #2
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	f107 0314 	add.w	r3, r7, #20
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	2301      	movs	r3, #1
 8005822:	21ee      	movs	r1, #238	; 0xee
 8005824:	f003 fce8 	bl	80091f8 <HAL_I2C_Mem_Read>
 8005828:	4603      	mov	r3, r0
 800582a:	461a      	mov	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	711a      	strb	r2, [r3, #4]
			ms5611->calibration_values[d-1] = (uint16_t)((data[0] << 8) | data[1]);
 8005830:	7d3b      	ldrb	r3, [r7, #20]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	b21a      	sxth	r2, r3
 8005836:	7d7b      	ldrb	r3, [r7, #21]
 8005838:	b21b      	sxth	r3, r3
 800583a:	4313      	orrs	r3, r2
 800583c:	b219      	sxth	r1, r3
 800583e:	7dfb      	ldrb	r3, [r7, #23]
 8005840:	1e5a      	subs	r2, r3, #1
 8005842:	b289      	uxth	r1, r1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3204      	adds	r2, #4
 8005848:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800584c:	e001      	b.n	8005852 <MS5611_init+0xb6>
		}
		else
			return SENSOR_REQUEST_FAIL ;
 800584e:	2302      	movs	r3, #2
 8005850:	e009      	b.n	8005866 <MS5611_init+0xca>
	for(uint8_t d = 1; d < 7; d++){
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	3301      	adds	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	2b06      	cmp	r3, #6
 800585c:	d9cd      	bls.n	80057fa <MS5611_init+0x5e>
	}
	ms5611->state = SENSOR_IDDLE ;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	715a      	strb	r2, [r3, #5]

	return SENSOR_REQUEST_OK ;
 8005864:	2300      	movs	r3, #0

}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	200020e0 	.word	0x200020e0

08005874 <MS5611_request_temp>:

//Demande pour une mesure de température
sensor_request_e MS5611_request_temp(ms5611_t * ms5611){
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	if(ms5611->state == SENSOR_BUSY)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	795b      	ldrb	r3, [r3, #5]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d101      	bne.n	8005888 <MS5611_request_temp+0x14>
		return SENSOR_REQUEST_BUSY;
 8005884:	2301      	movs	r3, #1
 8005886:	e01d      	b.n	80058c4 <MS5611_request_temp+0x50>
	if(ms5611->state)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	795b      	ldrb	r3, [r3, #5]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <MS5611_request_temp+0x20>
		return SENSOR_REQUEST_FAIL;
 8005890:	2302      	movs	r3, #2
 8005892:	e017      	b.n	80058c4 <MS5611_request_temp+0x50>

	uint8_t temp_request = MS5611_TEMP ;
 8005894:	2358      	movs	r3, #88	; 0x58
 8005896:	73fb      	strb	r3, [r7, #15]
	ms5611->hal_state = HAL_I2C_Master_Transmit_DMA(ms5611->hi2c, MS5611_ADRESSE, &temp_request, 1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	f107 020f 	add.w	r2, r7, #15
 80058a0:	2301      	movs	r3, #1
 80058a2:	21ee      	movs	r1, #238	; 0xee
 80058a4:	f003 fb92 	bl	8008fcc <HAL_I2C_Master_Transmit_DMA>
 80058a8:	4603      	mov	r3, r0
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	711a      	strb	r2, [r3, #4]

	if(ms5611->hal_state != HAL_OK){
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	791b      	ldrb	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d004      	beq.n	80058c2 <MS5611_request_temp+0x4e>
		ms5611->state = SENSOR_ERROR ;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2204      	movs	r2, #4
 80058bc:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 80058be:	2302      	movs	r3, #2
 80058c0:	e000      	b.n	80058c4 <MS5611_request_temp+0x50>
	}
	else
		return SENSOR_REQUEST_OK ;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <MS5611_request_pressure>:

//Demande pour une mesure de pressio
sensor_request_e MS5611_request_pressure(ms5611_t * ms5611){
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	if(ms5611->state == SENSOR_BUSY)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	795b      	ldrb	r3, [r3, #5]
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d101      	bne.n	80058e0 <MS5611_request_pressure+0x14>
		return SENSOR_REQUEST_BUSY;
 80058dc:	2301      	movs	r3, #1
 80058de:	e01d      	b.n	800591c <MS5611_request_pressure+0x50>
	if(ms5611->state)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	795b      	ldrb	r3, [r3, #5]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <MS5611_request_pressure+0x20>
		return SENSOR_REQUEST_FAIL;
 80058e8:	2302      	movs	r3, #2
 80058ea:	e017      	b.n	800591c <MS5611_request_pressure+0x50>

	uint8_t pressure_request = MS5611_PRESSURE ;
 80058ec:	2348      	movs	r3, #72	; 0x48
 80058ee:	73fb      	strb	r3, [r7, #15]
	ms5611->hal_state = HAL_I2C_Master_Transmit_DMA(ms5611->hi2c, MS5611_ADRESSE, &pressure_request, 1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	f107 020f 	add.w	r2, r7, #15
 80058f8:	2301      	movs	r3, #1
 80058fa:	21ee      	movs	r1, #238	; 0xee
 80058fc:	f003 fb66 	bl	8008fcc <HAL_I2C_Master_Transmit_DMA>
 8005900:	4603      	mov	r3, r0
 8005902:	461a      	mov	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	711a      	strb	r2, [r3, #4]

	if(ms5611->hal_state != HAL_OK){
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	791b      	ldrb	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <MS5611_request_pressure+0x4e>
		ms5611->state = SENSOR_ERROR ;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2204      	movs	r2, #4
 8005914:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 8005916:	2302      	movs	r3, #2
 8005918:	e000      	b.n	800591c <MS5611_request_pressure+0x50>
	}
	else
		return SENSOR_REQUEST_OK ;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <MS5611_read_temp>:

//Lecture de la température
sensor_request_e MS5611_read_temp(ms5611_t * ms5611){
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af02      	add	r7, sp, #8
 800592a:	6078      	str	r0, [r7, #4]

	if(ms5611->state == SENSOR_BUSY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	795b      	ldrb	r3, [r3, #5]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d101      	bne.n	8005938 <MS5611_read_temp+0x14>
		return SENSOR_REQUEST_BUSY;
 8005934:	2301      	movs	r3, #1
 8005936:	e022      	b.n	800597e <MS5611_read_temp+0x5a>
	if(ms5611->state)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	795b      	ldrb	r3, [r3, #5]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <MS5611_read_temp+0x20>
		return SENSOR_REQUEST_FAIL;
 8005940:	2302      	movs	r3, #2
 8005942:	e01c      	b.n	800597e <MS5611_read_temp+0x5a>

	ms5611->hal_state = HAL_I2C_Mem_Read_DMA(ms5611->hi2c, MS5611_ADRESSE, MS5611_READ_DATA, I2C_MEMADD_SIZE_8BIT, ms5611->read_tmp, 3);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3330      	adds	r3, #48	; 0x30
 800594c:	2203      	movs	r2, #3
 800594e:	9201      	str	r2, [sp, #4]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	2301      	movs	r3, #1
 8005954:	2200      	movs	r2, #0
 8005956:	21ee      	movs	r1, #238	; 0xee
 8005958:	f003 fe74 	bl	8009644 <HAL_I2C_Mem_Read_DMA>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	711a      	strb	r2, [r3, #4]
	ms5611->read_state = MS5611_READ_TEMPERATURE ;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	719a      	strb	r2, [r3, #6]

	if(ms5611->hal_state != HAL_OK){
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	791b      	ldrb	r3, [r3, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <MS5611_read_temp+0x58>
		ms5611->state = SENSOR_ERROR ;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2204      	movs	r2, #4
 8005976:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 8005978:	2302      	movs	r3, #2
 800597a:	e000      	b.n	800597e <MS5611_read_temp+0x5a>
	}
	else
		return SENSOR_REQUEST_OK ;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <MS5611_read_pressure>:

//Lecture de la pression
sensor_request_e MS5611_read_pressure(ms5611_t * ms5611){
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af02      	add	r7, sp, #8
 800598c:	6078      	str	r0, [r7, #4]

	if(ms5611->state == SENSOR_BUSY)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	795b      	ldrb	r3, [r3, #5]
 8005992:	2b03      	cmp	r3, #3
 8005994:	d101      	bne.n	800599a <MS5611_read_pressure+0x14>
		return SENSOR_REQUEST_BUSY;
 8005996:	2301      	movs	r3, #1
 8005998:	e01e      	b.n	80059d8 <MS5611_read_pressure+0x52>
	if(ms5611->state)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	795b      	ldrb	r3, [r3, #5]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <MS5611_read_pressure+0x20>
		return SENSOR_REQUEST_FAIL;
 80059a2:	2302      	movs	r3, #2
 80059a4:	e018      	b.n	80059d8 <MS5611_read_pressure+0x52>


	HAL_I2C_Mem_Read_DMA(ms5611->hi2c, MS5611_ADRESSE, MS5611_READ_DATA, I2C_MEMADD_SIZE_8BIT, ms5611->read_tmp, 3);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3330      	adds	r3, #48	; 0x30
 80059ae:	2203      	movs	r2, #3
 80059b0:	9201      	str	r2, [sp, #4]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2301      	movs	r3, #1
 80059b6:	2200      	movs	r2, #0
 80059b8:	21ee      	movs	r1, #238	; 0xee
 80059ba:	f003 fe43 	bl	8009644 <HAL_I2C_Mem_Read_DMA>
	ms5611->read_state = MS5611_READ_PRESSURE ;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	719a      	strb	r2, [r3, #6]

	if(ms5611->hal_state != HAL_OK){
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	791b      	ldrb	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <MS5611_read_pressure+0x50>
		ms5611->state = SENSOR_ERROR ;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2204      	movs	r2, #4
 80059d0:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 80059d2:	2302      	movs	r3, #2
 80059d4:	e000      	b.n	80059d8 <MS5611_read_pressure+0x52>
	}
	else
		return SENSOR_REQUEST_OK ;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <MS5611_calculate_temperature>:

//Calcul de la température
void MS5611_calculate_temperature(ms5611_t * ms5611){
 80059e0:	b4b0      	push	{r4, r5, r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	ms5611->dT = ms5611->raw_temperature - (int32_t)ms5611->calibration_values[4] * 256;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	8a12      	ldrh	r2, [r2, #16]
 80059f0:	0212      	lsls	r2, r2, #8
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	461a      	mov	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	625a      	str	r2, [r3, #36]	; 0x24
	ms5611->temperature = 2000 +  ((int64_t) ms5611->dT * ms5611->calibration_values[5]) / 8388608 ;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	4619      	mov	r1, r3
 8005a00:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8a5b      	ldrh	r3, [r3, #18]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f04f 0400 	mov.w	r4, #0
 8005a0e:	fb03 f502 	mul.w	r5, r3, r2
 8005a12:	fb01 f004 	mul.w	r0, r1, r4
 8005a16:	4428      	add	r0, r5
 8005a18:	fba1 3403 	umull	r3, r4, r1, r3
 8005a1c:	1902      	adds	r2, r0, r4
 8005a1e:	4614      	mov	r4, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f174 0200 	sbcs.w	r2, r4, #0
 8005a26:	da05      	bge.n	8005a34 <MS5611_calculate_temperature+0x54>
 8005a28:	490c      	ldr	r1, [pc, #48]	; (8005a5c <MS5611_calculate_temperature+0x7c>)
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	185b      	adds	r3, r3, r1
 8005a30:	eb44 0402 	adc.w	r4, r4, r2
 8005a34:	f04f 0100 	mov.w	r1, #0
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	0dd9      	lsrs	r1, r3, #23
 8005a3e:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 8005a42:	15e2      	asrs	r2, r4, #23
 8005a44:	460b      	mov	r3, r1
 8005a46:	4614      	mov	r4, r2
 8005a48:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bcb0      	pop	{r4, r5, r7}
 8005a5a:	4770      	bx	lr
 8005a5c:	007fffff 	.word	0x007fffff

08005a60 <MS5611_calculate_pressure>:

//Calcul de la pression
void MS5611_calculate_pressure(ms5611_t * ms5611){
 8005a60:	b4f0      	push	{r4, r5, r6, r7}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	 int64_t OFF = (int64_t)ms5611->calibration_values[1] * 65536 + (int64_t)ms5611->calibration_values[3] * ms5611->dT / 128 ;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	895b      	ldrh	r3, [r3, #10]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f04f 0400 	mov.w	r4, #0
 8005a72:	f04f 0100 	mov.w	r1, #0
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	0422      	lsls	r2, r4, #16
 8005a7c:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 8005a80:	0419      	lsls	r1, r3, #16
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	89db      	ldrh	r3, [r3, #14]
 8005a86:	b29d      	uxth	r5, r3
 8005a88:	f04f 0600 	mov.w	r6, #0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005a94:	fb03 fc06 	mul.w	ip, r3, r6
 8005a98:	fb05 f004 	mul.w	r0, r5, r4
 8005a9c:	4460      	add	r0, ip
 8005a9e:	fba5 3403 	umull	r3, r4, r5, r3
 8005aa2:	4420      	add	r0, r4
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f174 0000 	sbcs.w	r0, r4, #0
 8005aac:	da02      	bge.n	8005ab4 <MS5611_calculate_pressure+0x54>
 8005aae:	337f      	adds	r3, #127	; 0x7f
 8005ab0:	f144 0400 	adc.w	r4, r4, #0
 8005ab4:	f04f 0500 	mov.w	r5, #0
 8005ab8:	f04f 0600 	mov.w	r6, #0
 8005abc:	09dd      	lsrs	r5, r3, #7
 8005abe:	ea45 6544 	orr.w	r5, r5, r4, lsl #25
 8005ac2:	11e6      	asrs	r6, r4, #7
 8005ac4:	186b      	adds	r3, r5, r1
 8005ac6:	eb46 0402 	adc.w	r4, r6, r2
 8005aca:	e9c7 3404 	strd	r3, r4, [r7, #16]
	 int64_t SENS = (int64_t)ms5611->calibration_values[0] * 32768 + (int64_t)ms5611->calibration_values[2] * ms5611->dT / 256 ;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	891b      	ldrh	r3, [r3, #8]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f04f 0400 	mov.w	r4, #0
 8005ad8:	f04f 0100 	mov.w	r1, #0
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	03e2      	lsls	r2, r4, #15
 8005ae2:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 8005ae6:	03d9      	lsls	r1, r3, #15
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	899b      	ldrh	r3, [r3, #12]
 8005aec:	b29d      	uxth	r5, r3
 8005aee:	f04f 0600 	mov.w	r6, #0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005afa:	fb03 fc06 	mul.w	ip, r3, r6
 8005afe:	fb05 f004 	mul.w	r0, r5, r4
 8005b02:	4460      	add	r0, ip
 8005b04:	fba5 3403 	umull	r3, r4, r5, r3
 8005b08:	4420      	add	r0, r4
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f174 0000 	sbcs.w	r0, r4, #0
 8005b12:	da02      	bge.n	8005b1a <MS5611_calculate_pressure+0xba>
 8005b14:	33ff      	adds	r3, #255	; 0xff
 8005b16:	f144 0400 	adc.w	r4, r4, #0
 8005b1a:	f04f 0500 	mov.w	r5, #0
 8005b1e:	f04f 0600 	mov.w	r6, #0
 8005b22:	0a1d      	lsrs	r5, r3, #8
 8005b24:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
 8005b28:	1226      	asrs	r6, r4, #8
 8005b2a:	186b      	adds	r3, r5, r1
 8005b2c:	eb46 0402 	adc.w	r4, r6, r2
 8005b30:	e9c7 3402 	strd	r3, r4, [r7, #8]
	 ms5611->pressure = (uint32_t)(ms5611->raw_pressure * SENS / 2097152 - OFF) / 32768 ;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	f04f 0400 	mov.w	r4, #0
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	fb04 f102 	mul.w	r1, r4, r2
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	fb03 f202 	mul.w	r2, r3, r2
 8005b48:	440a      	add	r2, r1
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	fba1 3403 	umull	r3, r4, r1, r3
 8005b50:	4422      	add	r2, r4
 8005b52:	4614      	mov	r4, r2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f174 0200 	sbcs.w	r2, r4, #0
 8005b5a:	da05      	bge.n	8005b68 <MS5611_calculate_pressure+0x108>
 8005b5c:	490d      	ldr	r1, [pc, #52]	; (8005b94 <MS5611_calculate_pressure+0x134>)
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	185b      	adds	r3, r3, r1
 8005b64:	eb44 0402 	adc.w	r4, r4, r2
 8005b68:	f04f 0100 	mov.w	r1, #0
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	0d59      	lsrs	r1, r3, #21
 8005b72:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 8005b76:	1562      	asrs	r2, r4, #21
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4614      	mov	r4, r2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	0bda      	lsrs	r2, r3, #15
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	61da      	str	r2, [r3, #28]
}
 8005b88:	bf00      	nop
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bcf0      	pop	{r4, r5, r6, r7}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	001fffff 	.word	0x001fffff

08005b98 <MS5611_calculate_altitude>:

//Calcul de l'altitude
void MS5611_calculate_altitude(ms5611_t * ms5611){
 8005b98:	b5b0      	push	{r4, r5, r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	ms5611->altitude = 44330.0f * (1.0 - powf((float)ms5611->pressure * 0.00000986923f, 0.190294957f)) - ms5611->altitude_shift ;	// 260 µs lel
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	ee07 3a90 	vmov	s15, r3
 8005ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005c48 <MS5611_calculate_altitude+0xb0>
 8005bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bb4:	eddf 0a25 	vldr	s1, [pc, #148]	; 8005c4c <MS5611_calculate_altitude+0xb4>
 8005bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8005bbc:	f00c fc9a 	bl	80124f4 <powf>
 8005bc0:	ee10 3a10 	vmov	r3, s0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fa fcbf 	bl	8000548 <__aeabi_f2d>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	461a      	mov	r2, r3
 8005bd0:	4623      	mov	r3, r4
 8005bd2:	f04f 0000 	mov.w	r0, #0
 8005bd6:	491e      	ldr	r1, [pc, #120]	; (8005c50 <MS5611_calculate_altitude+0xb8>)
 8005bd8:	f7fa fb56 	bl	8000288 <__aeabi_dsub>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	4618      	mov	r0, r3
 8005be2:	4621      	mov	r1, r4
 8005be4:	a316      	add	r3, pc, #88	; (adr r3, 8005c40 <MS5611_calculate_altitude+0xa8>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fd05 	bl	80005f8 <__aeabi_dmul>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	4625      	mov	r5, r4
 8005bf4:	461c      	mov	r4, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fa fca4 	bl	8000548 <__aeabi_f2d>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4620      	mov	r0, r4
 8005c06:	4629      	mov	r1, r5
 8005c08:	f7fa fb3e 	bl	8000288 <__aeabi_dsub>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	4618      	mov	r0, r3
 8005c12:	4621      	mov	r1, r4
 8005c14:	f7fa ffc8 	bl	8000ba8 <__aeabi_d2f>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	629a      	str	r2, [r3, #40]	; 0x28
	//Si on a le shift en altitude qui est nul, on l'init
	if(!ms5611->altitude_shift)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2c:	d103      	bne.n	8005c36 <MS5611_calculate_altitude+0x9e>
		ms5611->altitude_shift = ms5611->altitude ;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	00000000 	.word	0x00000000
 8005c44:	40e5a540 	.word	0x40e5a540
 8005c48:	37259405 	.word	0x37259405
 8005c4c:	3e42dcae 	.word	0x3e42dcae
 8005c50:	3ff00000 	.word	0x3ff00000

08005c54 <MS5611_i2c_rx_callabck>:


//Callback de l'i2c car dma finit
void MS5611_i2c_rx_callabck(I2C_HandleTypeDef * hi2c){
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	UNUSED(hi2c);
	if(ms5611_->read_state == MS5611_READ_TEMPERATURE){
 8005c5c:	4b1e      	ldr	r3, [pc, #120]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	799b      	ldrb	r3, [r3, #6]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d117      	bne.n	8005c96 <MS5611_i2c_rx_callabck+0x42>
		ms5611_->raw_temperature = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
 8005c66:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c6e:	041a      	lsls	r2, r3, #16
 8005c70:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005c84:	431a      	orrs	r2, r3
 8005c86:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	619a      	str	r2, [r3, #24]
		ms5611_->temp_data();
 8005c8c:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c92:	4798      	blx	r3
	else if(ms5611_->read_state == MS5611_READ_PRESSURE){
		ms5611_->raw_pressure = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
		ms5611_->pressure_data();
	}

}
 8005c94:	e01b      	b.n	8005cce <MS5611_i2c_rx_callabck+0x7a>
	else if(ms5611_->read_state == MS5611_READ_PRESSURE){
 8005c96:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	799b      	ldrb	r3, [r3, #6]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d116      	bne.n	8005cce <MS5611_i2c_rx_callabck+0x7a>
		ms5611_->raw_pressure = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
 8005ca0:	4b0d      	ldr	r3, [pc, #52]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ca8:	041a      	lsls	r2, r3, #16
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	615a      	str	r2, [r3, #20]
		ms5611_->pressure_data();
 8005cc6:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <MS5611_i2c_rx_callabck+0x84>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	4798      	blx	r3
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	200020e0 	.word	0x200020e0

08005cdc <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005cee:	4b21      	ldr	r3, [pc, #132]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005cf0:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <MX_ADC2_Init+0x9c>)
 8005cf2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005cf4:	4b1f      	ldr	r3, [pc, #124]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005cf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005cfa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005cfc:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005d08:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005d0e:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005d16:	4b17      	ldr	r3, [pc, #92]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d1c:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d1e:	4a17      	ldr	r2, [pc, #92]	; (8005d7c <MX_ADC2_Init+0xa0>)
 8005d20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d22:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005d28:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005d2e:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005d36:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005d3c:	480d      	ldr	r0, [pc, #52]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d3e:	f001 fda9 	bl	8007894 <HAL_ADC_Init>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005d48:	f000 fbec 	bl	8006524 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005d4c:	2309      	movs	r3, #9
 8005d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005d50:	2301      	movs	r3, #1
 8005d52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d58:	463b      	mov	r3, r7
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4805      	ldr	r0, [pc, #20]	; (8005d74 <MX_ADC2_Init+0x98>)
 8005d5e:	f001 feed 	bl	8007b3c <HAL_ADC_ConfigChannel>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005d68:	f000 fbdc 	bl	8006524 <Error_Handler>
  }

}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	200020e4 	.word	0x200020e4
 8005d78:	40012100 	.word	0x40012100
 8005d7c:	0f000001 	.word	0x0f000001

08005d80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	; 0x28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d88:	f107 0314 	add.w	r3, r7, #20
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	605a      	str	r2, [r3, #4]
 8005d92:	609a      	str	r2, [r3, #8]
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a3c      	ldr	r2, [pc, #240]	; (8005e90 <HAL_ADC_MspInit+0x110>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d172      	bne.n	8005e88 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	4b3b      	ldr	r3, [pc, #236]	; (8005e94 <HAL_ADC_MspInit+0x114>)
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	4a3a      	ldr	r2, [pc, #232]	; (8005e94 <HAL_ADC_MspInit+0x114>)
 8005dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005db0:	6453      	str	r3, [r2, #68]	; 0x44
 8005db2:	4b38      	ldr	r3, [pc, #224]	; (8005e94 <HAL_ADC_MspInit+0x114>)
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	4b34      	ldr	r3, [pc, #208]	; (8005e94 <HAL_ADC_MspInit+0x114>)
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	4a33      	ldr	r2, [pc, #204]	; (8005e94 <HAL_ADC_MspInit+0x114>)
 8005dc8:	f043 0304 	orr.w	r3, r3, #4
 8005dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005dce:	4b31      	ldr	r3, [pc, #196]	; (8005e94 <HAL_ADC_MspInit+0x114>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	4b2d      	ldr	r3, [pc, #180]	; (8005e94 <HAL_ADC_MspInit+0x114>)
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	4a2c      	ldr	r2, [pc, #176]	; (8005e94 <HAL_ADC_MspInit+0x114>)
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dea:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <HAL_ADC_MspInit+0x114>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 8005df6:	2302      	movs	r3, #2
 8005df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 8005e02:	f107 0314 	add.w	r3, r7, #20
 8005e06:	4619      	mov	r1, r3
 8005e08:	4823      	ldr	r0, [pc, #140]	; (8005e98 <HAL_ADC_MspInit+0x118>)
 8005e0a:	f002 fdf3 	bl	80089f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e12:	2303      	movs	r3, #3
 8005e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8005e1a:	f107 0314 	add.w	r3, r7, #20
 8005e1e:	4619      	mov	r1, r3
 8005e20:	481e      	ldr	r0, [pc, #120]	; (8005e9c <HAL_ADC_MspInit+0x11c>)
 8005e22:	f002 fde7 	bl	80089f4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8005e26:	4b1e      	ldr	r3, [pc, #120]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e28:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <HAL_ADC_MspInit+0x124>)
 8005e2a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005e2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e32:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e34:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e3a:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005e40:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e46:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e48:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e4e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e50:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e56:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005e58:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e5e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005e60:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e66:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005e6c:	480c      	ldr	r0, [pc, #48]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e6e:	f002 fa17 	bl	80082a0 <HAL_DMA_Init>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8005e78:	f000 fb54 	bl	8006524 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a08      	ldr	r2, [pc, #32]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38
 8005e82:	4a07      	ldr	r2, [pc, #28]	; (8005ea0 <HAL_ADC_MspInit+0x120>)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8005e88:	bf00      	nop
 8005e8a:	3728      	adds	r7, #40	; 0x28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40012100 	.word	0x40012100
 8005e94:	40023800 	.word	0x40023800
 8005e98:	40020800 	.word	0x40020800
 8005e9c:	40020400 	.word	0x40020400
 8005ea0:	2000212c 	.word	0x2000212c
 8005ea4:	40026440 	.word	0x40026440

08005ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	4b3f      	ldr	r3, [pc, #252]	; (8005fb0 <MX_DMA_Init+0x108>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	4a3e      	ldr	r2, [pc, #248]	; (8005fb0 <MX_DMA_Init+0x108>)
 8005eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ebe:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <MX_DMA_Init+0x108>)
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005eca:	2300      	movs	r3, #0
 8005ecc:	603b      	str	r3, [r7, #0]
 8005ece:	4b38      	ldr	r3, [pc, #224]	; (8005fb0 <MX_DMA_Init+0x108>)
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	4a37      	ldr	r2, [pc, #220]	; (8005fb0 <MX_DMA_Init+0x108>)
 8005ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eda:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <MX_DMA_Init+0x108>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2100      	movs	r1, #0
 8005eea:	200b      	movs	r0, #11
 8005eec:	f002 f9a1 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005ef0:	200b      	movs	r0, #11
 8005ef2:	f002 f9ba 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2100      	movs	r1, #0
 8005efa:	200c      	movs	r0, #12
 8005efc:	f002 f999 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005f00:	200c      	movs	r0, #12
 8005f02:	f002 f9b2 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8005f06:	2200      	movs	r2, #0
 8005f08:	2100      	movs	r1, #0
 8005f0a:	200e      	movs	r0, #14
 8005f0c:	f002 f991 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005f10:	200e      	movs	r0, #14
 8005f12:	f002 f9aa 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005f16:	2200      	movs	r2, #0
 8005f18:	2100      	movs	r1, #0
 8005f1a:	200f      	movs	r0, #15
 8005f1c:	f002 f989 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005f20:	200f      	movs	r0, #15
 8005f22:	f002 f9a2 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005f26:	2200      	movs	r2, #0
 8005f28:	2100      	movs	r1, #0
 8005f2a:	2010      	movs	r0, #16
 8005f2c:	f002 f981 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005f30:	2010      	movs	r0, #16
 8005f32:	f002 f99a 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8005f36:	2200      	movs	r2, #0
 8005f38:	2100      	movs	r1, #0
 8005f3a:	2011      	movs	r0, #17
 8005f3c:	f002 f979 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005f40:	2011      	movs	r0, #17
 8005f42:	f002 f992 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8005f46:	2200      	movs	r2, #0
 8005f48:	2100      	movs	r1, #0
 8005f4a:	202f      	movs	r0, #47	; 0x2f
 8005f4c:	f002 f971 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8005f50:	202f      	movs	r0, #47	; 0x2f
 8005f52:	f002 f98a 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005f56:	2200      	movs	r2, #0
 8005f58:	2100      	movs	r1, #0
 8005f5a:	2038      	movs	r0, #56	; 0x38
 8005f5c:	f002 f969 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005f60:	2038      	movs	r0, #56	; 0x38
 8005f62:	f002 f982 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8005f66:	2200      	movs	r2, #0
 8005f68:	2100      	movs	r1, #0
 8005f6a:	2039      	movs	r0, #57	; 0x39
 8005f6c:	f002 f961 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005f70:	2039      	movs	r0, #57	; 0x39
 8005f72:	f002 f97a 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005f76:	2200      	movs	r2, #0
 8005f78:	2100      	movs	r1, #0
 8005f7a:	203a      	movs	r0, #58	; 0x3a
 8005f7c:	f002 f959 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005f80:	203a      	movs	r0, #58	; 0x3a
 8005f82:	f002 f972 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005f86:	2200      	movs	r2, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	203b      	movs	r0, #59	; 0x3b
 8005f8c:	f002 f951 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005f90:	203b      	movs	r0, #59	; 0x3b
 8005f92:	f002 f96a 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8005f96:	2200      	movs	r2, #0
 8005f98:	2100      	movs	r1, #0
 8005f9a:	2045      	movs	r0, #69	; 0x45
 8005f9c:	f002 f949 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005fa0:	2045      	movs	r0, #69	; 0x45
 8005fa2:	f002 f962 	bl	800826a <HAL_NVIC_EnableIRQ>

}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40023800 	.word	0x40023800

08005fb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fba:	f107 0314 	add.w	r3, r7, #20
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
 8005fc4:	609a      	str	r2, [r3, #8]
 8005fc6:	60da      	str	r2, [r3, #12]
 8005fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fca:	2300      	movs	r3, #0
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	4b44      	ldr	r3, [pc, #272]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	4a43      	ldr	r2, [pc, #268]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8005fd4:	f043 0304 	orr.w	r3, r3, #4
 8005fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8005fda:	4b41      	ldr	r3, [pc, #260]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	613b      	str	r3, [r7, #16]
 8005fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	4b3d      	ldr	r3, [pc, #244]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	4a3c      	ldr	r2, [pc, #240]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff6:	4b3a      	ldr	r3, [pc, #232]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	4b36      	ldr	r3, [pc, #216]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	4a35      	ldr	r2, [pc, #212]	; (80060e0 <MX_GPIO_Init+0x12c>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	6313      	str	r3, [r2, #48]	; 0x30
 8006012:	4b33      	ldr	r3, [pc, #204]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	4b2f      	ldr	r3, [pc, #188]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	4a2e      	ldr	r2, [pc, #184]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8006028:	f043 0302 	orr.w	r3, r3, #2
 800602c:	6313      	str	r3, [r2, #48]	; 0x30
 800602e:	4b2c      	ldr	r3, [pc, #176]	; (80060e0 <MX_GPIO_Init+0x12c>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	607b      	str	r3, [r7, #4]
 8006038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 800603a:	2200      	movs	r2, #0
 800603c:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8006040:	4828      	ldr	r0, [pc, #160]	; (80060e4 <MX_GPIO_Init+0x130>)
 8006042:	f002 fe71 	bl	8008d28 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 8006046:	2201      	movs	r2, #1
 8006048:	2101      	movs	r1, #1
 800604a:	4826      	ldr	r0, [pc, #152]	; (80060e4 <MX_GPIO_Init+0x130>)
 800604c:	f002 fe6c 	bl	8008d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8006050:	2200      	movs	r2, #0
 8006052:	2101      	movs	r1, #1
 8006054:	4824      	ldr	r0, [pc, #144]	; (80060e8 <MX_GPIO_Init+0x134>)
 8006056:	f002 fe67 	bl	8008d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 800605a:	2200      	movs	r2, #0
 800605c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006060:	4822      	ldr	r0, [pc, #136]	; (80060ec <MX_GPIO_Init+0x138>)
 8006062:	f002 fe61 	bl	8008d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 8006066:	f24e 231d 	movw	r3, #57885	; 0xe21d
 800606a:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800606c:	2301      	movs	r3, #1
 800606e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006070:	2300      	movs	r3, #0
 8006072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006074:	2300      	movs	r3, #0
 8006076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006078:	f107 0314 	add.w	r3, r7, #20
 800607c:	4619      	mov	r1, r3
 800607e:	4819      	ldr	r0, [pc, #100]	; (80060e4 <MX_GPIO_Init+0x130>)
 8006080:	f002 fcb8 	bl	80089f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 8006084:	2301      	movs	r3, #1
 8006086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006088:	2301      	movs	r3, #1
 800608a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800608c:	2300      	movs	r3, #0
 800608e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006090:	2300      	movs	r3, #0
 8006092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 8006094:	f107 0314 	add.w	r3, r7, #20
 8006098:	4619      	mov	r1, r3
 800609a:	4813      	ldr	r0, [pc, #76]	; (80060e8 <MX_GPIO_Init+0x134>)
 800609c:	f002 fcaa 	bl	80089f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 80060a0:	2302      	movs	r3, #2
 80060a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 80060ac:	f107 0314 	add.w	r3, r7, #20
 80060b0:	4619      	mov	r1, r3
 80060b2:	480d      	ldr	r0, [pc, #52]	; (80060e8 <MX_GPIO_Init+0x134>)
 80060b4:	f002 fc9e 	bl	80089f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 80060b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060be:	2301      	movs	r3, #1
 80060c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060c6:	2300      	movs	r3, #0
 80060c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 80060ca:	f107 0314 	add.w	r3, r7, #20
 80060ce:	4619      	mov	r1, r3
 80060d0:	4806      	ldr	r0, [pc, #24]	; (80060ec <MX_GPIO_Init+0x138>)
 80060d2:	f002 fc8f 	bl	80089f4 <HAL_GPIO_Init>

}
 80060d6:	bf00      	nop
 80060d8:	3728      	adds	r7, #40	; 0x28
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40023800 	.word	0x40023800
 80060e4:	40020800 	.word	0x40020800
 80060e8:	40020000 	.word	0x40020000
 80060ec:	40020400 	.word	0x40020400

080060f0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80060f4:	4b12      	ldr	r3, [pc, #72]	; (8006140 <MX_I2C1_Init+0x50>)
 80060f6:	4a13      	ldr	r2, [pc, #76]	; (8006144 <MX_I2C1_Init+0x54>)
 80060f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80060fa:	4b11      	ldr	r3, [pc, #68]	; (8006140 <MX_I2C1_Init+0x50>)
 80060fc:	4a12      	ldr	r2, [pc, #72]	; (8006148 <MX_I2C1_Init+0x58>)
 80060fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <MX_I2C1_Init+0x50>)
 8006102:	2200      	movs	r2, #0
 8006104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <MX_I2C1_Init+0x50>)
 8006108:	2200      	movs	r2, #0
 800610a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <MX_I2C1_Init+0x50>)
 800610e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006112:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006114:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <MX_I2C1_Init+0x50>)
 8006116:	2200      	movs	r2, #0
 8006118:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <MX_I2C1_Init+0x50>)
 800611c:	2200      	movs	r2, #0
 800611e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <MX_I2C1_Init+0x50>)
 8006122:	2200      	movs	r2, #0
 8006124:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006126:	4b06      	ldr	r3, [pc, #24]	; (8006140 <MX_I2C1_Init+0x50>)
 8006128:	2200      	movs	r2, #0
 800612a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800612c:	4804      	ldr	r0, [pc, #16]	; (8006140 <MX_I2C1_Init+0x50>)
 800612e:	f002 fe15 	bl	8008d5c <HAL_I2C_Init>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006138:	f000 f9f4 	bl	8006524 <Error_Handler>
  }

}
 800613c:	bf00      	nop
 800613e:	bd80      	pop	{r7, pc}
 8006140:	200021ec 	.word	0x200021ec
 8006144:	40005400 	.word	0x40005400
 8006148:	00061a80 	.word	0x00061a80

0800614c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006154:	f107 0314 	add.w	r3, r7, #20
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	609a      	str	r2, [r3, #8]
 8006160:	60da      	str	r2, [r3, #12]
 8006162:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a4f      	ldr	r2, [pc, #316]	; (80062a8 <HAL_I2C_MspInit+0x15c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	f040 8098 	bne.w	80062a0 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006170:	2300      	movs	r3, #0
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	4b4d      	ldr	r3, [pc, #308]	; (80062ac <HAL_I2C_MspInit+0x160>)
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	4a4c      	ldr	r2, [pc, #304]	; (80062ac <HAL_I2C_MspInit+0x160>)
 800617a:	f043 0302 	orr.w	r3, r3, #2
 800617e:	6313      	str	r3, [r2, #48]	; 0x30
 8006180:	4b4a      	ldr	r3, [pc, #296]	; (80062ac <HAL_I2C_MspInit+0x160>)
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800618c:	23c0      	movs	r3, #192	; 0xc0
 800618e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006190:	2312      	movs	r3, #18
 8006192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006194:	2301      	movs	r3, #1
 8006196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006198:	2303      	movs	r3, #3
 800619a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800619c:	2304      	movs	r3, #4
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061a0:	f107 0314 	add.w	r3, r7, #20
 80061a4:	4619      	mov	r1, r3
 80061a6:	4842      	ldr	r0, [pc, #264]	; (80062b0 <HAL_I2C_MspInit+0x164>)
 80061a8:	f002 fc24 	bl	80089f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	4b3e      	ldr	r3, [pc, #248]	; (80062ac <HAL_I2C_MspInit+0x160>)
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	4a3d      	ldr	r2, [pc, #244]	; (80062ac <HAL_I2C_MspInit+0x160>)
 80061b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061ba:	6413      	str	r3, [r2, #64]	; 0x40
 80061bc:	4b3b      	ldr	r3, [pc, #236]	; (80062ac <HAL_I2C_MspInit+0x160>)
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80061c8:	4b3a      	ldr	r3, [pc, #232]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 80061ca:	4a3b      	ldr	r2, [pc, #236]	; (80062b8 <HAL_I2C_MspInit+0x16c>)
 80061cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80061ce:	4b39      	ldr	r3, [pc, #228]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 80061d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061d4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061d6:	4b37      	ldr	r3, [pc, #220]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 80061d8:	2200      	movs	r2, #0
 80061da:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061dc:	4b35      	ldr	r3, [pc, #212]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 80061de:	2200      	movs	r2, #0
 80061e0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061e2:	4b34      	ldr	r3, [pc, #208]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 80061e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061ea:	4b32      	ldr	r3, [pc, #200]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061f0:	4b30      	ldr	r3, [pc, #192]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80061f6:	4b2f      	ldr	r3, [pc, #188]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80061fc:	4b2d      	ldr	r3, [pc, #180]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 80061fe:	2200      	movs	r2, #0
 8006200:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006202:	4b2c      	ldr	r3, [pc, #176]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 8006204:	2200      	movs	r2, #0
 8006206:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006208:	482a      	ldr	r0, [pc, #168]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 800620a:	f002 f849 	bl	80082a0 <HAL_DMA_Init>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8006214:	f000 f986 	bl	8006524 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a26      	ldr	r2, [pc, #152]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 800621c:	639a      	str	r2, [r3, #56]	; 0x38
 800621e:	4a25      	ldr	r2, [pc, #148]	; (80062b4 <HAL_I2C_MspInit+0x168>)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8006224:	4b25      	ldr	r3, [pc, #148]	; (80062bc <HAL_I2C_MspInit+0x170>)
 8006226:	4a26      	ldr	r2, [pc, #152]	; (80062c0 <HAL_I2C_MspInit+0x174>)
 8006228:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800622a:	4b24      	ldr	r3, [pc, #144]	; (80062bc <HAL_I2C_MspInit+0x170>)
 800622c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006230:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006232:	4b22      	ldr	r3, [pc, #136]	; (80062bc <HAL_I2C_MspInit+0x170>)
 8006234:	2240      	movs	r2, #64	; 0x40
 8006236:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006238:	4b20      	ldr	r3, [pc, #128]	; (80062bc <HAL_I2C_MspInit+0x170>)
 800623a:	2200      	movs	r2, #0
 800623c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800623e:	4b1f      	ldr	r3, [pc, #124]	; (80062bc <HAL_I2C_MspInit+0x170>)
 8006240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006244:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006246:	4b1d      	ldr	r3, [pc, #116]	; (80062bc <HAL_I2C_MspInit+0x170>)
 8006248:	2200      	movs	r2, #0
 800624a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <HAL_I2C_MspInit+0x170>)
 800624e:	2200      	movs	r2, #0
 8006250:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006252:	4b1a      	ldr	r3, [pc, #104]	; (80062bc <HAL_I2C_MspInit+0x170>)
 8006254:	2200      	movs	r2, #0
 8006256:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006258:	4b18      	ldr	r3, [pc, #96]	; (80062bc <HAL_I2C_MspInit+0x170>)
 800625a:	2200      	movs	r2, #0
 800625c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800625e:	4b17      	ldr	r3, [pc, #92]	; (80062bc <HAL_I2C_MspInit+0x170>)
 8006260:	2200      	movs	r2, #0
 8006262:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006264:	4815      	ldr	r0, [pc, #84]	; (80062bc <HAL_I2C_MspInit+0x170>)
 8006266:	f002 f81b 	bl	80082a0 <HAL_DMA_Init>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8006270:	f000 f958 	bl	8006524 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a11      	ldr	r2, [pc, #68]	; (80062bc <HAL_I2C_MspInit+0x170>)
 8006278:	635a      	str	r2, [r3, #52]	; 0x34
 800627a:	4a10      	ldr	r2, [pc, #64]	; (80062bc <HAL_I2C_MspInit+0x170>)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006280:	2200      	movs	r2, #0
 8006282:	2100      	movs	r1, #0
 8006284:	201f      	movs	r0, #31
 8006286:	f001 ffd4 	bl	8008232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800628a:	201f      	movs	r0, #31
 800628c:	f001 ffed 	bl	800826a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006290:	2200      	movs	r2, #0
 8006292:	2100      	movs	r1, #0
 8006294:	2020      	movs	r0, #32
 8006296:	f001 ffcc 	bl	8008232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800629a:	2020      	movs	r0, #32
 800629c:	f001 ffe5 	bl	800826a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80062a0:	bf00      	nop
 80062a2:	3728      	adds	r7, #40	; 0x28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40005400 	.word	0x40005400
 80062ac:	40023800 	.word	0x40023800
 80062b0:	40020400 	.word	0x40020400
 80062b4:	20002240 	.word	0x20002240
 80062b8:	40026010 	.word	0x40026010
 80062bc:	2000218c 	.word	0x2000218c
 80062c0:	400260b8 	.word	0x400260b8

080062c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80062c8:	f001 fa50 	bl	800776c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80062cc:	f000 f8c0 	bl	8006450 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);	//Let the time to the components to start
 80062d0:	20c8      	movs	r0, #200	; 0xc8
 80062d2:	f001 fabd 	bl	8007850 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80062d6:	f7ff fe6d 	bl	8005fb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80062da:	f7ff fde5 	bl	8005ea8 <MX_DMA_Init>
  MX_I2C1_Init();
 80062de:	f7ff ff07 	bl	80060f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80062e2:	f000 f927 	bl	8006534 <MX_SPI1_Init>
  MX_SPI2_Init();
 80062e6:	f000 f95b 	bl	80065a0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80062ea:	f000 fc5f 	bl	8006bac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80062ee:	f000 fde5 	bl	8006ebc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80062f2:	f000 fe0d 	bl	8006f10 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80062f6:	f000 fe35 	bl	8006f64 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 80062fa:	f7ff fcef 	bl	8005cdc <MX_ADC2_Init>
  MX_TIM2_Init();
 80062fe:	f000 fd1b 	bl	8006d38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);	//Let the time for the components to start
 8006302:	20c8      	movs	r0, #200	; 0xc8
 8006304:	f001 faa4 	bl	8007850 <HAL_Delay>



  //Init du GYRO et de l ACC en utilisant un MPU6000
  MPU_init(&sys.sensors.mpu, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 8006308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800630c:	4a38      	ldr	r2, [pc, #224]	; (80063f0 <main+0x12c>)
 800630e:	4939      	ldr	r1, [pc, #228]	; (80063f4 <main+0x130>)
 8006310:	4839      	ldr	r0, [pc, #228]	; (80063f8 <main+0x134>)
 8006312:	f7fe ff4d 	bl	80051b0 <MPU_init>
  HAL_Delay(200);	//Let the time for the components to start
 8006316:	20c8      	movs	r0, #200	; 0xc8
 8006318:	f001 fa9a 	bl	8007850 <HAL_Delay>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 800631c:	4936      	ldr	r1, [pc, #216]	; (80063f8 <main+0x134>)
 800631e:	4837      	ldr	r0, [pc, #220]	; (80063fc <main+0x138>)
 8006320:	f7fe fcb6 	bl	8004c90 <GYRO_init>
  HAL_Delay(200);	//Let the time for the components to start
 8006324:	20c8      	movs	r0, #200	; 0xc8
 8006326:	f001 fa93 	bl	8007850 <HAL_Delay>
  ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 800632a:	4933      	ldr	r1, [pc, #204]	; (80063f8 <main+0x134>)
 800632c:	4834      	ldr	r0, [pc, #208]	; (8006400 <main+0x13c>)
 800632e:	f7fe fb4b 	bl	80049c8 <ACC_init>

  //Init du baromètre
  BARO_init(&sys.sensors.baro, &sys.sensors.ms5611, &hi2c1);
 8006332:	4a34      	ldr	r2, [pc, #208]	; (8006404 <main+0x140>)
 8006334:	4934      	ldr	r1, [pc, #208]	; (8006408 <main+0x144>)
 8006336:	4835      	ldr	r0, [pc, #212]	; (800640c <main+0x148>)
 8006338:	f7fe fbfc 	bl	8004b34 <BARO_init>

  IHM_Init(&sys.ihm);
 800633c:	4834      	ldr	r0, [pc, #208]	; (8006410 <main+0x14c>)
 800633e:	f7fc f9d5 	bl	80026ec <IHM_Init>
  IHM_Led_Init(LED_HIGH_LVL, 30, PIN_LED_RGB_1_Pin, LED_OUTPUT_NEGATIVE);
 8006342:	2301      	movs	r3, #1
 8006344:	2201      	movs	r2, #1
 8006346:	211e      	movs	r1, #30
 8006348:	2000      	movs	r0, #0
 800634a:	f7fc f9df 	bl	800270c <IHM_Led_Init>
  IHM_Led_Init(LED_SENSORS, 30, PIN_LED_RGB_2_Pin, LED_OUTPUT_NEGATIVE);
 800634e:	2301      	movs	r3, #1
 8006350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006354:	211e      	movs	r1, #30
 8006356:	2001      	movs	r0, #1
 8006358:	f7fc f9d8 	bl	800270c <IHM_Led_Init>

  IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 800635c:	2300      	movs	r3, #0
 800635e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006362:	2100      	movs	r1, #0
 8006364:	2000      	movs	r0, #0
 8006366:	f7fc fa3f 	bl	80027e8 <IHM_Set_Sequences>
  IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 800636a:	2300      	movs	r3, #0
 800636c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006370:	2100      	movs	r1, #0
 8006372:	2001      	movs	r0, #1
 8006374:	f7fc fa38 	bl	80027e8 <IHM_Set_Sequences>

  BATTERIE_Init(&sys.sensors.batterie, &hadc2);
 8006378:	4926      	ldr	r1, [pc, #152]	; (8006414 <main+0x150>)
 800637a:	4827      	ldr	r0, [pc, #156]	; (8006418 <main+0x154>)
 800637c:	f7fe fc75 	bl	8004c6a <BATTERIE_Init>

  CONTROLLER_Init(&sys.radio.controller, &sys.radio.ibus);
 8006380:	4926      	ldr	r1, [pc, #152]	; (800641c <main+0x158>)
 8006382:	4827      	ldr	r0, [pc, #156]	; (8006420 <main+0x15c>)
 8006384:	f7fd fe70 	bl	8004068 <CONTROLLER_Init>
  IBUS_init(&sys.radio.ibus, &huart3, CONTROLLER_Rx_Data_Rdy);
 8006388:	4a26      	ldr	r2, [pc, #152]	; (8006424 <main+0x160>)
 800638a:	4927      	ldr	r1, [pc, #156]	; (8006428 <main+0x164>)
 800638c:	4823      	ldr	r0, [pc, #140]	; (800641c <main+0x158>)
 800638e:	f009 f801 	bl	800f394 <IBUS_init>

  ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_FREQUENCY);
 8006392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006396:	4a1a      	ldr	r2, [pc, #104]	; (8006400 <main+0x13c>)
 8006398:	4918      	ldr	r1, [pc, #96]	; (80063fc <main+0x138>)
 800639a:	4824      	ldr	r0, [pc, #144]	; (800642c <main+0x168>)
 800639c:	f7fb fc4a 	bl	8001c34 <ORIENTATION_Init>
  POSITION_Init(&sys.position, &sys.orientation, &sys.sensors.acc, GYRO_FREQUENCY);
 80063a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063a4:	4a16      	ldr	r2, [pc, #88]	; (8006400 <main+0x13c>)
 80063a6:	4921      	ldr	r1, [pc, #132]	; (800642c <main+0x168>)
 80063a8:	4821      	ldr	r0, [pc, #132]	; (8006430 <main+0x16c>)
 80063aa:	f7fb fddd 	bl	8001f68 <POSITION_Init>
  REGULATION_ORIENTATION_Init(&sys.regulation.orientation, &sys.orientation, sys.propulsion.consigne);
 80063ae:	4a21      	ldr	r2, [pc, #132]	; (8006434 <main+0x170>)
 80063b0:	491e      	ldr	r1, [pc, #120]	; (800642c <main+0x168>)
 80063b2:	4821      	ldr	r0, [pc, #132]	; (8006438 <main+0x174>)
 80063b4:	f7fe f922 	bl	80045fc <REGULATION_ORIENTATION_Init>
  REGULATION_POSITION_Init(&sys.regulation.position, &sys.regulation.orientation, sys.propulsion.consigne);
 80063b8:	4a1e      	ldr	r2, [pc, #120]	; (8006434 <main+0x170>)
 80063ba:	491f      	ldr	r1, [pc, #124]	; (8006438 <main+0x174>)
 80063bc:	481f      	ldr	r0, [pc, #124]	; (800643c <main+0x178>)
 80063be:	f7fe fab1 	bl	8004924 <REGULATION_POSITION_Init>
  PROPULSION_Init(&sys.propulsion, &htim1);
 80063c2:	491f      	ldr	r1, [pc, #124]	; (8006440 <main+0x17c>)
 80063c4:	481f      	ldr	r0, [pc, #124]	; (8006444 <main+0x180>)
 80063c6:	f7fd fd97 	bl	8003ef8 <PROPULSION_Init>

  TELEMETRY_Init(&sys.radio.telemetry, &huart2);
 80063ca:	491f      	ldr	r1, [pc, #124]	; (8006448 <main+0x184>)
 80063cc:	481f      	ldr	r0, [pc, #124]	; (800644c <main+0x188>)
 80063ce:	f000 fffd 	bl	80073cc <TELEMETRY_Init>

  FLIGHT_MODE_Init(&sys);
 80063d2:	480f      	ldr	r0, [pc, #60]	; (8006410 <main+0x14c>)
 80063d4:	f7fb ffd6 	bl	8002384 <FLIGHT_MODE_Init>

  SCHEDULER_init(&sys);
 80063d8:	480d      	ldr	r0, [pc, #52]	; (8006410 <main+0x14c>)
 80063da:	f7fd f8a5 	bl	8003528 <SCHEDULER_init>
  EVENT_init(&sys);
 80063de:	480c      	ldr	r0, [pc, #48]	; (8006410 <main+0x14c>)
 80063e0:	f7fc fd80 	bl	8002ee4 <EVENT_init>

  DATA_LOGGER_Init(&sys);
 80063e4:	480a      	ldr	r0, [pc, #40]	; (8006410 <main+0x14c>)
 80063e6:	f7fa fdaf 	bl	8000f48 <DATA_LOGGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 80063ea:	f7fd f8af 	bl	800354c <SCHEDULER_run>
 80063ee:	e7fc      	b.n	80063ea <main+0x126>
 80063f0:	40020400 	.word	0x40020400
 80063f4:	20002e24 	.word	0x20002e24
 80063f8:	200023f8 	.word	0x200023f8
 80063fc:	200022d0 	.word	0x200022d0
 8006400:	20002344 	.word	0x20002344
 8006404:	200021ec 	.word	0x200021ec
 8006408:	20002478 	.word	0x20002478
 800640c:	200023f0 	.word	0x200023f0
 8006410:	200022a0 	.word	0x200022a0
 8006414:	200020e4 	.word	0x200020e4
 8006418:	200023ac 	.word	0x200023ac
 800641c:	20002520 	.word	0x20002520
 8006420:	20002580 	.word	0x20002580
 8006424:	080045ef 	.word	0x080045ef
 8006428:	200031f4 	.word	0x200031f4
 800642c:	200024b4 	.word	0x200024b4
 8006430:	200024e8 	.word	0x200024e8
 8006434:	20002c14 	.word	0x20002c14
 8006438:	20002c24 	.word	0x20002c24
 800643c:	20002e10 	.word	0x20002e10
 8006440:	20003054 	.word	0x20003054
 8006444:	20002c04 	.word	0x20002c04
 8006448:	20003334 	.word	0x20003334
 800644c:	200025d8 	.word	0x200025d8

08006450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b094      	sub	sp, #80	; 0x50
 8006454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006456:	f107 0320 	add.w	r3, r7, #32
 800645a:	2230      	movs	r2, #48	; 0x30
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f009 fb36 	bl	800fad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006464:	f107 030c 	add.w	r3, r7, #12
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	609a      	str	r2, [r3, #8]
 8006470:	60da      	str	r2, [r3, #12]
 8006472:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006474:	2300      	movs	r3, #0
 8006476:	60bb      	str	r3, [r7, #8]
 8006478:	4b28      	ldr	r3, [pc, #160]	; (800651c <SystemClock_Config+0xcc>)
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	4a27      	ldr	r2, [pc, #156]	; (800651c <SystemClock_Config+0xcc>)
 800647e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006482:	6413      	str	r3, [r2, #64]	; 0x40
 8006484:	4b25      	ldr	r3, [pc, #148]	; (800651c <SystemClock_Config+0xcc>)
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648c:	60bb      	str	r3, [r7, #8]
 800648e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006490:	2300      	movs	r3, #0
 8006492:	607b      	str	r3, [r7, #4]
 8006494:	4b22      	ldr	r3, [pc, #136]	; (8006520 <SystemClock_Config+0xd0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a21      	ldr	r2, [pc, #132]	; (8006520 <SystemClock_Config+0xd0>)
 800649a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	4b1f      	ldr	r3, [pc, #124]	; (8006520 <SystemClock_Config+0xd0>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80064ac:	2302      	movs	r3, #2
 80064ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80064b0:	2301      	movs	r3, #1
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80064b4:	2310      	movs	r3, #16
 80064b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80064b8:	2302      	movs	r3, #2
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80064bc:	2300      	movs	r3, #0
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80064c0:	2308      	movs	r3, #8
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80064c4:	23a8      	movs	r3, #168	; 0xa8
 80064c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80064c8:	2302      	movs	r3, #2
 80064ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80064cc:	2304      	movs	r3, #4
 80064ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80064d0:	f107 0320 	add.w	r3, r7, #32
 80064d4:	4618      	mov	r0, r3
 80064d6:	f005 fb97 	bl	800bc08 <HAL_RCC_OscConfig>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80064e0:	f000 f820 	bl	8006524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80064e4:	230f      	movs	r3, #15
 80064e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80064e8:	2302      	movs	r3, #2
 80064ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80064f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80064f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80064f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80064fc:	f107 030c 	add.w	r3, r7, #12
 8006500:	2105      	movs	r1, #5
 8006502:	4618      	mov	r0, r3
 8006504:	f005 fdf0 	bl	800c0e8 <HAL_RCC_ClockConfig>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800650e:	f000 f809 	bl	8006524 <Error_Handler>
  }
}
 8006512:	bf00      	nop
 8006514:	3750      	adds	r7, #80	; 0x50
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40023800 	.word	0x40023800
 8006520:	40007000 	.word	0x40007000

08006524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006528:	bf00      	nop
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8006538:	4b17      	ldr	r3, [pc, #92]	; (8006598 <MX_SPI1_Init+0x64>)
 800653a:	4a18      	ldr	r2, [pc, #96]	; (800659c <MX_SPI1_Init+0x68>)
 800653c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800653e:	4b16      	ldr	r3, [pc, #88]	; (8006598 <MX_SPI1_Init+0x64>)
 8006540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006544:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <MX_SPI1_Init+0x64>)
 8006548:	2200      	movs	r2, #0
 800654a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800654c:	4b12      	ldr	r3, [pc, #72]	; (8006598 <MX_SPI1_Init+0x64>)
 800654e:	2200      	movs	r2, #0
 8006550:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006552:	4b11      	ldr	r3, [pc, #68]	; (8006598 <MX_SPI1_Init+0x64>)
 8006554:	2200      	movs	r2, #0
 8006556:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <MX_SPI1_Init+0x64>)
 800655a:	2200      	movs	r2, #0
 800655c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800655e:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <MX_SPI1_Init+0x64>)
 8006560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006564:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <MX_SPI1_Init+0x64>)
 8006568:	2238      	movs	r2, #56	; 0x38
 800656a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800656c:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <MX_SPI1_Init+0x64>)
 800656e:	2200      	movs	r2, #0
 8006570:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006572:	4b09      	ldr	r3, [pc, #36]	; (8006598 <MX_SPI1_Init+0x64>)
 8006574:	2200      	movs	r2, #0
 8006576:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006578:	4b07      	ldr	r3, [pc, #28]	; (8006598 <MX_SPI1_Init+0x64>)
 800657a:	2200      	movs	r2, #0
 800657c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800657e:	4b06      	ldr	r3, [pc, #24]	; (8006598 <MX_SPI1_Init+0x64>)
 8006580:	220a      	movs	r2, #10
 8006582:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006584:	4804      	ldr	r0, [pc, #16]	; (8006598 <MX_SPI1_Init+0x64>)
 8006586:	f005 ff7b 	bl	800c480 <HAL_SPI_Init>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006590:	f7ff ffc8 	bl	8006524 <Error_Handler>
  }

}
 8006594:	bf00      	nop
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20002edc 	.word	0x20002edc
 800659c:	40013000 	.word	0x40013000

080065a0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80065a4:	4b17      	ldr	r3, [pc, #92]	; (8006604 <MX_SPI2_Init+0x64>)
 80065a6:	4a18      	ldr	r2, [pc, #96]	; (8006608 <MX_SPI2_Init+0x68>)
 80065a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80065aa:	4b16      	ldr	r3, [pc, #88]	; (8006604 <MX_SPI2_Init+0x64>)
 80065ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80065b2:	4b14      	ldr	r3, [pc, #80]	; (8006604 <MX_SPI2_Init+0x64>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80065b8:	4b12      	ldr	r3, [pc, #72]	; (8006604 <MX_SPI2_Init+0x64>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80065be:	4b11      	ldr	r3, [pc, #68]	; (8006604 <MX_SPI2_Init+0x64>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <MX_SPI2_Init+0x64>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80065ca:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <MX_SPI2_Init+0x64>)
 80065cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80065d2:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <MX_SPI2_Init+0x64>)
 80065d4:	2228      	movs	r2, #40	; 0x28
 80065d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <MX_SPI2_Init+0x64>)
 80065da:	2200      	movs	r2, #0
 80065dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80065de:	4b09      	ldr	r3, [pc, #36]	; (8006604 <MX_SPI2_Init+0x64>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065e4:	4b07      	ldr	r3, [pc, #28]	; (8006604 <MX_SPI2_Init+0x64>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80065ea:	4b06      	ldr	r3, [pc, #24]	; (8006604 <MX_SPI2_Init+0x64>)
 80065ec:	220a      	movs	r2, #10
 80065ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80065f0:	4804      	ldr	r0, [pc, #16]	; (8006604 <MX_SPI2_Init+0x64>)
 80065f2:	f005 ff45 	bl	800c480 <HAL_SPI_Init>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80065fc:	f7ff ff92 	bl	8006524 <Error_Handler>
  }

}
 8006600:	bf00      	nop
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20002e24 	.word	0x20002e24
 8006608:	40003800 	.word	0x40003800

0800660c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006614:	f107 031c 	add.w	r3, r7, #28
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	605a      	str	r2, [r3, #4]
 800661e:	609a      	str	r2, [r3, #8]
 8006620:	60da      	str	r2, [r3, #12]
 8006622:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a8e      	ldr	r2, [pc, #568]	; (8006864 <HAL_SPI_MspInit+0x258>)
 800662a:	4293      	cmp	r3, r2
 800662c:	f040 8089 	bne.w	8006742 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006630:	2300      	movs	r3, #0
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	4b8c      	ldr	r3, [pc, #560]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 8006636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006638:	4a8b      	ldr	r2, [pc, #556]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 800663a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800663e:	6453      	str	r3, [r2, #68]	; 0x44
 8006640:	4b89      	ldr	r3, [pc, #548]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 8006642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	4b85      	ldr	r3, [pc, #532]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	4a84      	ldr	r2, [pc, #528]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	6313      	str	r3, [r2, #48]	; 0x30
 800665c:	4b82      	ldr	r3, [pc, #520]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006668:	23e0      	movs	r3, #224	; 0xe0
 800666a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800666c:	2302      	movs	r3, #2
 800666e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006670:	2300      	movs	r3, #0
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006674:	2303      	movs	r3, #3
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006678:	2305      	movs	r3, #5
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800667c:	f107 031c 	add.w	r3, r7, #28
 8006680:	4619      	mov	r1, r3
 8006682:	487a      	ldr	r0, [pc, #488]	; (800686c <HAL_SPI_MspInit+0x260>)
 8006684:	f002 f9b6 	bl	80089f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006688:	4b79      	ldr	r3, [pc, #484]	; (8006870 <HAL_SPI_MspInit+0x264>)
 800668a:	4a7a      	ldr	r2, [pc, #488]	; (8006874 <HAL_SPI_MspInit+0x268>)
 800668c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800668e:	4b78      	ldr	r3, [pc, #480]	; (8006870 <HAL_SPI_MspInit+0x264>)
 8006690:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006694:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006696:	4b76      	ldr	r3, [pc, #472]	; (8006870 <HAL_SPI_MspInit+0x264>)
 8006698:	2200      	movs	r2, #0
 800669a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800669c:	4b74      	ldr	r3, [pc, #464]	; (8006870 <HAL_SPI_MspInit+0x264>)
 800669e:	2200      	movs	r2, #0
 80066a0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066a2:	4b73      	ldr	r3, [pc, #460]	; (8006870 <HAL_SPI_MspInit+0x264>)
 80066a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066aa:	4b71      	ldr	r3, [pc, #452]	; (8006870 <HAL_SPI_MspInit+0x264>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066b0:	4b6f      	ldr	r3, [pc, #444]	; (8006870 <HAL_SPI_MspInit+0x264>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80066b6:	4b6e      	ldr	r3, [pc, #440]	; (8006870 <HAL_SPI_MspInit+0x264>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80066bc:	4b6c      	ldr	r3, [pc, #432]	; (8006870 <HAL_SPI_MspInit+0x264>)
 80066be:	2200      	movs	r2, #0
 80066c0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066c2:	4b6b      	ldr	r3, [pc, #428]	; (8006870 <HAL_SPI_MspInit+0x264>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80066c8:	4869      	ldr	r0, [pc, #420]	; (8006870 <HAL_SPI_MspInit+0x264>)
 80066ca:	f001 fde9 	bl	80082a0 <HAL_DMA_Init>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80066d4:	f7ff ff26 	bl	8006524 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a65      	ldr	r2, [pc, #404]	; (8006870 <HAL_SPI_MspInit+0x264>)
 80066dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80066de:	4a64      	ldr	r2, [pc, #400]	; (8006870 <HAL_SPI_MspInit+0x264>)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80066e4:	4b64      	ldr	r3, [pc, #400]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 80066e6:	4a65      	ldr	r2, [pc, #404]	; (800687c <HAL_SPI_MspInit+0x270>)
 80066e8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80066ea:	4b63      	ldr	r3, [pc, #396]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 80066ec:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80066f0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80066f2:	4b61      	ldr	r3, [pc, #388]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 80066f4:	2240      	movs	r2, #64	; 0x40
 80066f6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066f8:	4b5f      	ldr	r3, [pc, #380]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80066fe:	4b5e      	ldr	r3, [pc, #376]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 8006700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006704:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006706:	4b5c      	ldr	r3, [pc, #368]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 8006708:	2200      	movs	r2, #0
 800670a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800670c:	4b5a      	ldr	r3, [pc, #360]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 800670e:	2200      	movs	r2, #0
 8006710:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006712:	4b59      	ldr	r3, [pc, #356]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 8006714:	2200      	movs	r2, #0
 8006716:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006718:	4b57      	ldr	r3, [pc, #348]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 800671a:	2200      	movs	r2, #0
 800671c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800671e:	4b56      	ldr	r3, [pc, #344]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 8006720:	2200      	movs	r2, #0
 8006722:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006724:	4854      	ldr	r0, [pc, #336]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 8006726:	f001 fdbb 	bl	80082a0 <HAL_DMA_Init>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8006730:	f7ff fef8 	bl	8006524 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a50      	ldr	r2, [pc, #320]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 8006738:	649a      	str	r2, [r3, #72]	; 0x48
 800673a:	4a4f      	ldr	r2, [pc, #316]	; (8006878 <HAL_SPI_MspInit+0x26c>)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006740:	e08c      	b.n	800685c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a4e      	ldr	r2, [pc, #312]	; (8006880 <HAL_SPI_MspInit+0x274>)
 8006748:	4293      	cmp	r3, r2
 800674a:	f040 8087 	bne.w	800685c <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800674e:	2300      	movs	r3, #0
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	4b45      	ldr	r3, [pc, #276]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	4a44      	ldr	r2, [pc, #272]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 8006758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800675c:	6413      	str	r3, [r2, #64]	; 0x40
 800675e:	4b42      	ldr	r3, [pc, #264]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	4b3e      	ldr	r3, [pc, #248]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 8006770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006772:	4a3d      	ldr	r2, [pc, #244]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 8006774:	f043 0302 	orr.w	r3, r3, #2
 8006778:	6313      	str	r3, [r2, #48]	; 0x30
 800677a:	4b3b      	ldr	r3, [pc, #236]	; (8006868 <HAL_SPI_MspInit+0x25c>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006786:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800678a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800678c:	2302      	movs	r3, #2
 800678e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006790:	2300      	movs	r3, #0
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006794:	2303      	movs	r3, #3
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006798:	2305      	movs	r3, #5
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800679c:	f107 031c 	add.w	r3, r7, #28
 80067a0:	4619      	mov	r1, r3
 80067a2:	4838      	ldr	r0, [pc, #224]	; (8006884 <HAL_SPI_MspInit+0x278>)
 80067a4:	f002 f926 	bl	80089f4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80067a8:	4b37      	ldr	r3, [pc, #220]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067aa:	4a38      	ldr	r2, [pc, #224]	; (800688c <HAL_SPI_MspInit+0x280>)
 80067ac:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80067ae:	4b36      	ldr	r3, [pc, #216]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067b4:	4b34      	ldr	r3, [pc, #208]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067ba:	4b33      	ldr	r3, [pc, #204]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067bc:	2200      	movs	r2, #0
 80067be:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067c0:	4b31      	ldr	r3, [pc, #196]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067c6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067c8:	4b2f      	ldr	r3, [pc, #188]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067ce:	4b2e      	ldr	r3, [pc, #184]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80067d4:	4b2c      	ldr	r3, [pc, #176]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80067da:	4b2b      	ldr	r3, [pc, #172]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067dc:	2200      	movs	r2, #0
 80067de:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067e0:	4b29      	ldr	r3, [pc, #164]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80067e6:	4828      	ldr	r0, [pc, #160]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067e8:	f001 fd5a 	bl	80082a0 <HAL_DMA_Init>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 80067f2:	f7ff fe97 	bl	8006524 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a23      	ldr	r2, [pc, #140]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80067fc:	4a22      	ldr	r2, [pc, #136]	; (8006888 <HAL_SPI_MspInit+0x27c>)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006802:	4b23      	ldr	r3, [pc, #140]	; (8006890 <HAL_SPI_MspInit+0x284>)
 8006804:	4a23      	ldr	r2, [pc, #140]	; (8006894 <HAL_SPI_MspInit+0x288>)
 8006806:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006808:	4b21      	ldr	r3, [pc, #132]	; (8006890 <HAL_SPI_MspInit+0x284>)
 800680a:	2200      	movs	r2, #0
 800680c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800680e:	4b20      	ldr	r3, [pc, #128]	; (8006890 <HAL_SPI_MspInit+0x284>)
 8006810:	2240      	movs	r2, #64	; 0x40
 8006812:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006814:	4b1e      	ldr	r3, [pc, #120]	; (8006890 <HAL_SPI_MspInit+0x284>)
 8006816:	2200      	movs	r2, #0
 8006818:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800681a:	4b1d      	ldr	r3, [pc, #116]	; (8006890 <HAL_SPI_MspInit+0x284>)
 800681c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006820:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006822:	4b1b      	ldr	r3, [pc, #108]	; (8006890 <HAL_SPI_MspInit+0x284>)
 8006824:	2200      	movs	r2, #0
 8006826:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006828:	4b19      	ldr	r3, [pc, #100]	; (8006890 <HAL_SPI_MspInit+0x284>)
 800682a:	2200      	movs	r2, #0
 800682c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800682e:	4b18      	ldr	r3, [pc, #96]	; (8006890 <HAL_SPI_MspInit+0x284>)
 8006830:	2200      	movs	r2, #0
 8006832:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006834:	4b16      	ldr	r3, [pc, #88]	; (8006890 <HAL_SPI_MspInit+0x284>)
 8006836:	2200      	movs	r2, #0
 8006838:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800683a:	4b15      	ldr	r3, [pc, #84]	; (8006890 <HAL_SPI_MspInit+0x284>)
 800683c:	2200      	movs	r2, #0
 800683e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006840:	4813      	ldr	r0, [pc, #76]	; (8006890 <HAL_SPI_MspInit+0x284>)
 8006842:	f001 fd2d 	bl	80082a0 <HAL_DMA_Init>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 800684c:	f7ff fe6a 	bl	8006524 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a0f      	ldr	r2, [pc, #60]	; (8006890 <HAL_SPI_MspInit+0x284>)
 8006854:	649a      	str	r2, [r3, #72]	; 0x48
 8006856:	4a0e      	ldr	r2, [pc, #56]	; (8006890 <HAL_SPI_MspInit+0x284>)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800685c:	bf00      	nop
 800685e:	3730      	adds	r7, #48	; 0x30
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40013000 	.word	0x40013000
 8006868:	40023800 	.word	0x40023800
 800686c:	40020000 	.word	0x40020000
 8006870:	20002f34 	.word	0x20002f34
 8006874:	40026410 	.word	0x40026410
 8006878:	20002ff4 	.word	0x20002ff4
 800687c:	40026458 	.word	0x40026458
 8006880:	40003800 	.word	0x40003800
 8006884:	40020400 	.word	0x40020400
 8006888:	20002e7c 	.word	0x20002e7c
 800688c:	40026058 	.word	0x40026058
 8006890:	20002f94 	.word	0x20002f94
 8006894:	40026070 	.word	0x40026070

08006898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800689e:	2300      	movs	r3, #0
 80068a0:	607b      	str	r3, [r7, #4]
 80068a2:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <HAL_MspInit+0x4c>)
 80068a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a6:	4a0f      	ldr	r2, [pc, #60]	; (80068e4 <HAL_MspInit+0x4c>)
 80068a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068ac:	6453      	str	r3, [r2, #68]	; 0x44
 80068ae:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <HAL_MspInit+0x4c>)
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b6:	607b      	str	r3, [r7, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068ba:	2300      	movs	r3, #0
 80068bc:	603b      	str	r3, [r7, #0]
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <HAL_MspInit+0x4c>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	4a08      	ldr	r2, [pc, #32]	; (80068e4 <HAL_MspInit+0x4c>)
 80068c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c8:	6413      	str	r3, [r2, #64]	; 0x40
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <HAL_MspInit+0x4c>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40023800 	.word	0x40023800

080068e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80068ec:	bf00      	nop
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068f6:	b480      	push	{r7}
 80068f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068fa:	e7fe      	b.n	80068fa <HardFault_Handler+0x4>

080068fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006900:	e7fe      	b.n	8006900 <MemManage_Handler+0x4>

08006902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006902:	b480      	push	{r7}
 8006904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006906:	e7fe      	b.n	8006906 <BusFault_Handler+0x4>

08006908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800690c:	e7fe      	b.n	800690c <UsageFault_Handler+0x4>

0800690e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800690e:	b480      	push	{r7}
 8006910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006912:	bf00      	nop
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006920:	bf00      	nop
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800692a:	b480      	push	{r7}
 800692c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800692e:	bf00      	nop
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800693c:	f000 ff68 	bl	8007810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006940:	bf00      	nop
 8006942:	bd80      	pop	{r7, pc}

08006944 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006948:	4802      	ldr	r0, [pc, #8]	; (8006954 <DMA1_Stream0_IRQHandler+0x10>)
 800694a:	f001 fdd1 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800694e:	bf00      	nop
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20002240 	.word	0x20002240

08006958 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800695c:	4802      	ldr	r0, [pc, #8]	; (8006968 <DMA1_Stream1_IRQHandler+0x10>)
 800695e:	f001 fdc7 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006962:	bf00      	nop
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20003194 	.word	0x20003194

0800696c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8006970:	4802      	ldr	r0, [pc, #8]	; (800697c <DMA1_Stream3_IRQHandler+0x10>)
 8006972:	f001 fdbd 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006976:	bf00      	nop
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20002e7c 	.word	0x20002e7c

08006980 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006984:	4802      	ldr	r0, [pc, #8]	; (8006990 <DMA1_Stream4_IRQHandler+0x10>)
 8006986:	f001 fdb3 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800698a:	bf00      	nop
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20002f94 	.word	0x20002f94

08006994 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006998:	4802      	ldr	r0, [pc, #8]	; (80069a4 <DMA1_Stream5_IRQHandler+0x10>)
 800699a:	f001 fda9 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800699e:	bf00      	nop
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200030d4 	.word	0x200030d4

080069a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80069ac:	4802      	ldr	r0, [pc, #8]	; (80069b8 <DMA1_Stream6_IRQHandler+0x10>)
 80069ae:	f001 fd9f 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80069b2:	bf00      	nop
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20003294 	.word	0x20003294

080069bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80069c0:	4802      	ldr	r0, [pc, #8]	; (80069cc <TIM2_IRQHandler+0x10>)
 80069c2:	f006 fc3f 	bl	800d244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80069c6:	bf00      	nop
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20003094 	.word	0x20003094

080069d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80069d4:	4802      	ldr	r0, [pc, #8]	; (80069e0 <I2C1_EV_IRQHandler+0x10>)
 80069d6:	f003 f8d5 	bl	8009b84 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80069da:	bf00      	nop
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	200021ec 	.word	0x200021ec

080069e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80069e8:	4802      	ldr	r0, [pc, #8]	; (80069f4 <I2C1_ER_IRQHandler+0x10>)
 80069ea:	f003 fa38 	bl	8009e5e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */


  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80069ee:	bf00      	nop
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	200021ec 	.word	0x200021ec

080069f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80069fe:	480d      	ldr	r0, [pc, #52]	; (8006a34 <USART2_IRQHandler+0x3c>)
 8006a00:	f007 fd42 	bl	800e488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)){
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <USART2_IRQHandler+0x3c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	d10c      	bne.n	8006a2c <USART2_IRQHandler+0x34>
	  TELEMETRY_Idle_Line_Detection();
 8006a12:	f000 fe93 	bl	800773c <TELEMETRY_Idle_Line_Detection>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <USART2_IRQHandler+0x3c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <USART2_IRQHandler+0x3c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	607b      	str	r3, [r7, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
	}
  /* USER CODE END USART2_IRQn 1 */
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20003334 	.word	0x20003334

08006a38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006a3c:	4802      	ldr	r0, [pc, #8]	; (8006a48 <USART3_IRQHandler+0x10>)
 8006a3e:	f007 fd23 	bl	800e488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006a42:	bf00      	nop
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	200031f4 	.word	0x200031f4

08006a4c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006a50:	4802      	ldr	r0, [pc, #8]	; (8006a5c <DMA1_Stream7_IRQHandler+0x10>)
 8006a52:	f001 fd4d 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8006a56:	bf00      	nop
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	2000218c 	.word	0x2000218c

08006a60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006a64:	4802      	ldr	r0, [pc, #8]	; (8006a70 <DMA2_Stream0_IRQHandler+0x10>)
 8006a66:	f001 fd43 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006a6a:	bf00      	nop
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20002f34 	.word	0x20002f34

08006a74 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006a78:	4802      	ldr	r0, [pc, #8]	; (8006a84 <DMA2_Stream1_IRQHandler+0x10>)
 8006a7a:	f001 fd39 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006a7e:	bf00      	nop
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20003134 	.word	0x20003134

08006a88 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006a8c:	4802      	ldr	r0, [pc, #8]	; (8006a98 <DMA2_Stream2_IRQHandler+0x10>)
 8006a8e:	f001 fd2f 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006a92:	bf00      	nop
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	2000212c 	.word	0x2000212c

08006a9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006aa0:	4802      	ldr	r0, [pc, #8]	; (8006aac <DMA2_Stream3_IRQHandler+0x10>)
 8006aa2:	f001 fd25 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006aa6:	bf00      	nop
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20002ff4 	.word	0x20002ff4

08006ab0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006ab4:	4802      	ldr	r0, [pc, #8]	; (8006ac0 <DMA2_Stream6_IRQHandler+0x10>)
 8006ab6:	f001 fd1b 	bl	80084f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20003234 	.word	0x20003234

08006ac4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	IBUS_RxCplt(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f008 fc87 	bl	800f3e0 <IBUS_RxCplt>
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
	IBUS_RxHalfCplt(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f008 fc96 	bl	800f414 <IBUS_RxHalfCplt>
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  if(hi2c == &hi2c1){
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a05      	ldr	r2, [pc, #20]	; (8006b10 <HAL_I2C_MemRxCpltCallback+0x20>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d102      	bne.n	8006b06 <HAL_I2C_MemRxCpltCallback+0x16>
	  MS5611_i2c_rx_callabck(hi2c);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff f8a7 	bl	8005c54 <MS5611_i2c_rx_callabck>
  }
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	200021ec 	.word	0x200021ec

08006b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006b1c:	4a14      	ldr	r2, [pc, #80]	; (8006b70 <_sbrk+0x5c>)
 8006b1e:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <_sbrk+0x60>)
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b28:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <_sbrk+0x64>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b30:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <_sbrk+0x64>)
 8006b32:	4a12      	ldr	r2, [pc, #72]	; (8006b7c <_sbrk+0x68>)
 8006b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b36:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <_sbrk+0x64>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d207      	bcs.n	8006b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b44:	f008 ff76 	bl	800fa34 <__errno>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	230c      	movs	r3, #12
 8006b4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b52:	e009      	b.n	8006b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b54:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <_sbrk+0x64>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <_sbrk+0x64>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4413      	add	r3, r2
 8006b62:	4a05      	ldr	r2, [pc, #20]	; (8006b78 <_sbrk+0x64>)
 8006b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b66:	68fb      	ldr	r3, [r7, #12]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20020000 	.word	0x20020000
 8006b74:	00000400 	.word	0x00000400
 8006b78:	200020c4 	.word	0x200020c4
 8006b7c:	20003380 	.word	0x20003380

08006b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b84:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <SystemInit+0x28>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8a:	4a07      	ldr	r2, [pc, #28]	; (8006ba8 <SystemInit+0x28>)
 8006b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006b94:	4b04      	ldr	r3, [pc, #16]	; (8006ba8 <SystemInit+0x28>)
 8006b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8006b9c:	bf00      	nop
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	e000ed00 	.word	0xe000ed00

08006bac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b096      	sub	sp, #88	; 0x58
 8006bb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006bb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	605a      	str	r2, [r3, #4]
 8006bbc:	609a      	str	r2, [r3, #8]
 8006bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	605a      	str	r2, [r3, #4]
 8006bd4:	609a      	str	r2, [r3, #8]
 8006bd6:	60da      	str	r2, [r3, #12]
 8006bd8:	611a      	str	r2, [r3, #16]
 8006bda:	615a      	str	r2, [r3, #20]
 8006bdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	2220      	movs	r2, #32
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f008 ff73 	bl	800fad0 <memset>

  htim1.Instance = TIM1;
 8006bea:	4b51      	ldr	r3, [pc, #324]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006bec:	4a51      	ldr	r2, [pc, #324]	; (8006d34 <MX_TIM1_Init+0x188>)
 8006bee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8006bf0:	4b4f      	ldr	r3, [pc, #316]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006bf2:	2214      	movs	r2, #20
 8006bf4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bf6:	4b4e      	ldr	r3, [pc, #312]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8006bfc:	4b4c      	ldr	r3, [pc, #304]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006bfe:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006c02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c04:	4b4a      	ldr	r3, [pc, #296]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006c0a:	4b49      	ldr	r3, [pc, #292]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006c10:	4b47      	ldr	r3, [pc, #284]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006c12:	2280      	movs	r2, #128	; 0x80
 8006c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006c16:	4846      	ldr	r0, [pc, #280]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006c18:	f006 fa76 	bl	800d108 <HAL_TIM_Base_Init>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006c22:	f7ff fc7f 	bl	8006524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006c2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c30:	4619      	mov	r1, r3
 8006c32:	483f      	ldr	r0, [pc, #252]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006c34:	f006 fcd4 	bl	800d5e0 <HAL_TIM_ConfigClockSource>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8006c3e:	f7ff fc71 	bl	8006524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006c42:	483b      	ldr	r0, [pc, #236]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006c44:	f006 fa8b 	bl	800d15e <HAL_TIM_PWM_Init>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8006c4e:	f7ff fc69 	bl	8006524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c52:	2300      	movs	r3, #0
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c56:	2300      	movs	r3, #0
 8006c58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006c5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4833      	ldr	r0, [pc, #204]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006c62:	f007 f8b7 	bl	800ddd4 <HAL_TIMEx_MasterConfigSynchronization>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006c6c:	f7ff fc5a 	bl	8006524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c70:	2360      	movs	r3, #96	; 0x60
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 8006c74:	f240 33e7 	movw	r3, #999	; 0x3e7
 8006c78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c82:	2300      	movs	r3, #0
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006c86:	2300      	movs	r3, #0
 8006c88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c92:	2200      	movs	r2, #0
 8006c94:	4619      	mov	r1, r3
 8006c96:	4826      	ldr	r0, [pc, #152]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006c98:	f006 fbdc 	bl	800d454 <HAL_TIM_PWM_ConfigChannel>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8006ca2:	f7ff fc3f 	bl	8006524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006caa:	2204      	movs	r2, #4
 8006cac:	4619      	mov	r1, r3
 8006cae:	4820      	ldr	r0, [pc, #128]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006cb0:	f006 fbd0 	bl	800d454 <HAL_TIM_PWM_ConfigChannel>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8006cba:	f7ff fc33 	bl	8006524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	481a      	ldr	r0, [pc, #104]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006cc8:	f006 fbc4 	bl	800d454 <HAL_TIM_PWM_ConfigChannel>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8006cd2:	f7ff fc27 	bl	8006524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cda:	220c      	movs	r2, #12
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4814      	ldr	r0, [pc, #80]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006ce0:	f006 fbb8 	bl	800d454 <HAL_TIM_PWM_ConfigChannel>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8006cea:	f7ff fc1b 	bl	8006524 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006d0c:	1d3b      	adds	r3, r7, #4
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4807      	ldr	r0, [pc, #28]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006d12:	f007 f8db 	bl	800decc <HAL_TIMEx_ConfigBreakDeadTime>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8006d1c:	f7ff fc02 	bl	8006524 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8006d20:	4803      	ldr	r0, [pc, #12]	; (8006d30 <MX_TIM1_Init+0x184>)
 8006d22:	f000 f891 	bl	8006e48 <HAL_TIM_MspPostInit>

}
 8006d26:	bf00      	nop
 8006d28:	3758      	adds	r7, #88	; 0x58
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20003054 	.word	0x20003054
 8006d34:	40010000 	.word	0x40010000

08006d38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	605a      	str	r2, [r3, #4]
 8006d48:	609a      	str	r2, [r3, #8]
 8006d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8006d54:	4b1d      	ldr	r3, [pc, #116]	; (8006dcc <MX_TIM2_Init+0x94>)
 8006d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <MX_TIM2_Init+0x94>)
 8006d5e:	22a7      	movs	r2, #167	; 0xa7
 8006d60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d62:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <MX_TIM2_Init+0x94>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8006d68:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <MX_TIM2_Init+0x94>)
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d6e:	4b17      	ldr	r3, [pc, #92]	; (8006dcc <MX_TIM2_Init+0x94>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d74:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <MX_TIM2_Init+0x94>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006d7a:	4814      	ldr	r0, [pc, #80]	; (8006dcc <MX_TIM2_Init+0x94>)
 8006d7c:	f006 f9c4 	bl	800d108 <HAL_TIM_Base_Init>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8006d86:	f7ff fbcd 	bl	8006524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006d90:	f107 0308 	add.w	r3, r7, #8
 8006d94:	4619      	mov	r1, r3
 8006d96:	480d      	ldr	r0, [pc, #52]	; (8006dcc <MX_TIM2_Init+0x94>)
 8006d98:	f006 fc22 	bl	800d5e0 <HAL_TIM_ConfigClockSource>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8006da2:	f7ff fbbf 	bl	8006524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006da6:	2300      	movs	r3, #0
 8006da8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006dae:	463b      	mov	r3, r7
 8006db0:	4619      	mov	r1, r3
 8006db2:	4806      	ldr	r0, [pc, #24]	; (8006dcc <MX_TIM2_Init+0x94>)
 8006db4:	f007 f80e 	bl	800ddd4 <HAL_TIMEx_MasterConfigSynchronization>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8006dbe:	f7ff fbb1 	bl	8006524 <Error_Handler>
  }

}
 8006dc2:	bf00      	nop
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20003094 	.word	0x20003094

08006dd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a18      	ldr	r2, [pc, #96]	; (8006e40 <HAL_TIM_Base_MspInit+0x70>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d10e      	bne.n	8006e00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	4b17      	ldr	r3, [pc, #92]	; (8006e44 <HAL_TIM_Base_MspInit+0x74>)
 8006de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dea:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <HAL_TIM_Base_MspInit+0x74>)
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	6453      	str	r3, [r2, #68]	; 0x44
 8006df2:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <HAL_TIM_Base_MspInit+0x74>)
 8006df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006dfe:	e01a      	b.n	8006e36 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e08:	d115      	bne.n	8006e36 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <HAL_TIM_Base_MspInit+0x74>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	4a0c      	ldr	r2, [pc, #48]	; (8006e44 <HAL_TIM_Base_MspInit+0x74>)
 8006e14:	f043 0301 	orr.w	r3, r3, #1
 8006e18:	6413      	str	r3, [r2, #64]	; 0x40
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <HAL_TIM_Base_MspInit+0x74>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	60bb      	str	r3, [r7, #8]
 8006e24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006e26:	2200      	movs	r2, #0
 8006e28:	2100      	movs	r1, #0
 8006e2a:	201c      	movs	r0, #28
 8006e2c:	f001 fa01 	bl	8008232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006e30:	201c      	movs	r0, #28
 8006e32:	f001 fa1a 	bl	800826a <HAL_NVIC_EnableIRQ>
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40023800 	.word	0x40023800

08006e48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e50:	f107 030c 	add.w	r3, r7, #12
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	605a      	str	r2, [r3, #4]
 8006e5a:	609a      	str	r2, [r3, #8]
 8006e5c:	60da      	str	r2, [r3, #12]
 8006e5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a12      	ldr	r2, [pc, #72]	; (8006eb0 <HAL_TIM_MspPostInit+0x68>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d11e      	bne.n	8006ea8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <HAL_TIM_MspPostInit+0x6c>)
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	4a10      	ldr	r2, [pc, #64]	; (8006eb4 <HAL_TIM_MspPostInit+0x6c>)
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	6313      	str	r3, [r2, #48]	; 0x30
 8006e7a:	4b0e      	ldr	r3, [pc, #56]	; (8006eb4 <HAL_TIM_MspPostInit+0x6c>)
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8006e86:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006e8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e9c:	f107 030c 	add.w	r3, r7, #12
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4805      	ldr	r0, [pc, #20]	; (8006eb8 <HAL_TIM_MspPostInit+0x70>)
 8006ea4:	f001 fda6 	bl	80089f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006ea8:	bf00      	nop
 8006eaa:	3720      	adds	r7, #32
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	40020000 	.word	0x40020000

08006ebc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006ec0:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <MX_USART2_UART_Init+0x4c>)
 8006ec2:	4a12      	ldr	r2, [pc, #72]	; (8006f0c <MX_USART2_UART_Init+0x50>)
 8006ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8006ec6:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <MX_USART2_UART_Init+0x4c>)
 8006ec8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006ece:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <MX_USART2_UART_Init+0x4c>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ed4:	4b0c      	ldr	r3, [pc, #48]	; (8006f08 <MX_USART2_UART_Init+0x4c>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006eda:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <MX_USART2_UART_Init+0x4c>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006ee0:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <MX_USART2_UART_Init+0x4c>)
 8006ee2:	220c      	movs	r2, #12
 8006ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <MX_USART2_UART_Init+0x4c>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <MX_USART2_UART_Init+0x4c>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006ef2:	4805      	ldr	r0, [pc, #20]	; (8006f08 <MX_USART2_UART_Init+0x4c>)
 8006ef4:	f007 f850 	bl	800df98 <HAL_UART_Init>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006efe:	f7ff fb11 	bl	8006524 <Error_Handler>
  }

}
 8006f02:	bf00      	nop
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20003334 	.word	0x20003334
 8006f0c:	40004400 	.word	0x40004400

08006f10 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006f14:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <MX_USART3_UART_Init+0x4c>)
 8006f16:	4a12      	ldr	r2, [pc, #72]	; (8006f60 <MX_USART3_UART_Init+0x50>)
 8006f18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006f1a:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <MX_USART3_UART_Init+0x4c>)
 8006f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006f22:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <MX_USART3_UART_Init+0x4c>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006f28:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <MX_USART3_UART_Init+0x4c>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <MX_USART3_UART_Init+0x4c>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <MX_USART3_UART_Init+0x4c>)
 8006f36:	220c      	movs	r2, #12
 8006f38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f3a:	4b08      	ldr	r3, [pc, #32]	; (8006f5c <MX_USART3_UART_Init+0x4c>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f40:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <MX_USART3_UART_Init+0x4c>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006f46:	4805      	ldr	r0, [pc, #20]	; (8006f5c <MX_USART3_UART_Init+0x4c>)
 8006f48:	f007 f826 	bl	800df98 <HAL_UART_Init>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006f52:	f7ff fae7 	bl	8006524 <Error_Handler>
  }

}
 8006f56:	bf00      	nop
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	200031f4 	.word	0x200031f4
 8006f60:	40004800 	.word	0x40004800

08006f64 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8006f68:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <MX_USART6_UART_Init+0x4c>)
 8006f6a:	4a12      	ldr	r2, [pc, #72]	; (8006fb4 <MX_USART6_UART_Init+0x50>)
 8006f6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <MX_USART6_UART_Init+0x4c>)
 8006f70:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8006f74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006f76:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <MX_USART6_UART_Init+0x4c>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <MX_USART6_UART_Init+0x4c>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <MX_USART6_UART_Init+0x4c>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006f88:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <MX_USART6_UART_Init+0x4c>)
 8006f8a:	220c      	movs	r2, #12
 8006f8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f8e:	4b08      	ldr	r3, [pc, #32]	; (8006fb0 <MX_USART6_UART_Init+0x4c>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f94:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <MX_USART6_UART_Init+0x4c>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006f9a:	4805      	ldr	r0, [pc, #20]	; (8006fb0 <MX_USART6_UART_Init+0x4c>)
 8006f9c:	f006 fffc 	bl	800df98 <HAL_UART_Init>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006fa6:	f7ff fabd 	bl	8006524 <Error_Handler>
  }

}
 8006faa:	bf00      	nop
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	200032f4 	.word	0x200032f4
 8006fb4:	40011400 	.word	0x40011400

08006fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08e      	sub	sp, #56	; 0x38
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	605a      	str	r2, [r3, #4]
 8006fca:	609a      	str	r2, [r3, #8]
 8006fcc:	60da      	str	r2, [r3, #12]
 8006fce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a7f      	ldr	r2, [pc, #508]	; (80071d4 <HAL_UART_MspInit+0x21c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	f040 8091 	bne.w	80070fe <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006fdc:	2300      	movs	r3, #0
 8006fde:	623b      	str	r3, [r7, #32]
 8006fe0:	4b7d      	ldr	r3, [pc, #500]	; (80071d8 <HAL_UART_MspInit+0x220>)
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	4a7c      	ldr	r2, [pc, #496]	; (80071d8 <HAL_UART_MspInit+0x220>)
 8006fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fea:	6413      	str	r3, [r2, #64]	; 0x40
 8006fec:	4b7a      	ldr	r3, [pc, #488]	; (80071d8 <HAL_UART_MspInit+0x220>)
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff4:	623b      	str	r3, [r7, #32]
 8006ff6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61fb      	str	r3, [r7, #28]
 8006ffc:	4b76      	ldr	r3, [pc, #472]	; (80071d8 <HAL_UART_MspInit+0x220>)
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007000:	4a75      	ldr	r2, [pc, #468]	; (80071d8 <HAL_UART_MspInit+0x220>)
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	6313      	str	r3, [r2, #48]	; 0x30
 8007008:	4b73      	ldr	r3, [pc, #460]	; (80071d8 <HAL_UART_MspInit+0x220>)
 800700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007014:	230c      	movs	r3, #12
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007018:	2302      	movs	r3, #2
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701c:	2300      	movs	r3, #0
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007020:	2303      	movs	r3, #3
 8007022:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007024:	2307      	movs	r3, #7
 8007026:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800702c:	4619      	mov	r1, r3
 800702e:	486b      	ldr	r0, [pc, #428]	; (80071dc <HAL_UART_MspInit+0x224>)
 8007030:	f001 fce0 	bl	80089f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007034:	4b6a      	ldr	r3, [pc, #424]	; (80071e0 <HAL_UART_MspInit+0x228>)
 8007036:	4a6b      	ldr	r2, [pc, #428]	; (80071e4 <HAL_UART_MspInit+0x22c>)
 8007038:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800703a:	4b69      	ldr	r3, [pc, #420]	; (80071e0 <HAL_UART_MspInit+0x228>)
 800703c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007040:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007042:	4b67      	ldr	r3, [pc, #412]	; (80071e0 <HAL_UART_MspInit+0x228>)
 8007044:	2200      	movs	r2, #0
 8007046:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007048:	4b65      	ldr	r3, [pc, #404]	; (80071e0 <HAL_UART_MspInit+0x228>)
 800704a:	2200      	movs	r2, #0
 800704c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800704e:	4b64      	ldr	r3, [pc, #400]	; (80071e0 <HAL_UART_MspInit+0x228>)
 8007050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007054:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007056:	4b62      	ldr	r3, [pc, #392]	; (80071e0 <HAL_UART_MspInit+0x228>)
 8007058:	2200      	movs	r2, #0
 800705a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800705c:	4b60      	ldr	r3, [pc, #384]	; (80071e0 <HAL_UART_MspInit+0x228>)
 800705e:	2200      	movs	r2, #0
 8007060:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007062:	4b5f      	ldr	r3, [pc, #380]	; (80071e0 <HAL_UART_MspInit+0x228>)
 8007064:	2200      	movs	r2, #0
 8007066:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007068:	4b5d      	ldr	r3, [pc, #372]	; (80071e0 <HAL_UART_MspInit+0x228>)
 800706a:	2200      	movs	r2, #0
 800706c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800706e:	4b5c      	ldr	r3, [pc, #368]	; (80071e0 <HAL_UART_MspInit+0x228>)
 8007070:	2200      	movs	r2, #0
 8007072:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007074:	485a      	ldr	r0, [pc, #360]	; (80071e0 <HAL_UART_MspInit+0x228>)
 8007076:	f001 f913 	bl	80082a0 <HAL_DMA_Init>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8007080:	f7ff fa50 	bl	8006524 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a56      	ldr	r2, [pc, #344]	; (80071e0 <HAL_UART_MspInit+0x228>)
 8007088:	635a      	str	r2, [r3, #52]	; 0x34
 800708a:	4a55      	ldr	r2, [pc, #340]	; (80071e0 <HAL_UART_MspInit+0x228>)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007090:	4b55      	ldr	r3, [pc, #340]	; (80071e8 <HAL_UART_MspInit+0x230>)
 8007092:	4a56      	ldr	r2, [pc, #344]	; (80071ec <HAL_UART_MspInit+0x234>)
 8007094:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007096:	4b54      	ldr	r3, [pc, #336]	; (80071e8 <HAL_UART_MspInit+0x230>)
 8007098:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800709c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800709e:	4b52      	ldr	r3, [pc, #328]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070a0:	2240      	movs	r2, #64	; 0x40
 80070a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070a4:	4b50      	ldr	r3, [pc, #320]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80070aa:	4b4f      	ldr	r3, [pc, #316]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070b2:	4b4d      	ldr	r3, [pc, #308]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070b8:	4b4b      	ldr	r3, [pc, #300]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80070be:	4b4a      	ldr	r3, [pc, #296]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80070c4:	4b48      	ldr	r3, [pc, #288]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80070ca:	4b47      	ldr	r3, [pc, #284]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80070d0:	4845      	ldr	r0, [pc, #276]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070d2:	f001 f8e5 	bl	80082a0 <HAL_DMA_Init>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80070dc:	f7ff fa22 	bl	8006524 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a41      	ldr	r2, [pc, #260]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
 80070e6:	4a40      	ldr	r2, [pc, #256]	; (80071e8 <HAL_UART_MspInit+0x230>)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80070ec:	2200      	movs	r2, #0
 80070ee:	2100      	movs	r1, #0
 80070f0:	2026      	movs	r0, #38	; 0x26
 80070f2:	f001 f89e 	bl	8008232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80070f6:	2026      	movs	r0, #38	; 0x26
 80070f8:	f001 f8b7 	bl	800826a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80070fc:	e10e      	b.n	800731c <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART3)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a3b      	ldr	r2, [pc, #236]	; (80071f0 <HAL_UART_MspInit+0x238>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d17b      	bne.n	8007200 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007108:	2300      	movs	r3, #0
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	4b32      	ldr	r3, [pc, #200]	; (80071d8 <HAL_UART_MspInit+0x220>)
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	4a31      	ldr	r2, [pc, #196]	; (80071d8 <HAL_UART_MspInit+0x220>)
 8007112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007116:	6413      	str	r3, [r2, #64]	; 0x40
 8007118:	4b2f      	ldr	r3, [pc, #188]	; (80071d8 <HAL_UART_MspInit+0x220>)
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007124:	2300      	movs	r3, #0
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	4b2b      	ldr	r3, [pc, #172]	; (80071d8 <HAL_UART_MspInit+0x220>)
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	4a2a      	ldr	r2, [pc, #168]	; (80071d8 <HAL_UART_MspInit+0x220>)
 800712e:	f043 0302 	orr.w	r3, r3, #2
 8007132:	6313      	str	r3, [r2, #48]	; 0x30
 8007134:	4b28      	ldr	r3, [pc, #160]	; (80071d8 <HAL_UART_MspInit+0x220>)
 8007136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007140:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007146:	2302      	movs	r3, #2
 8007148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714a:	2300      	movs	r3, #0
 800714c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800714e:	2303      	movs	r3, #3
 8007150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007152:	2307      	movs	r3, #7
 8007154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800715a:	4619      	mov	r1, r3
 800715c:	4825      	ldr	r0, [pc, #148]	; (80071f4 <HAL_UART_MspInit+0x23c>)
 800715e:	f001 fc49 	bl	80089f4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8007162:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <HAL_UART_MspInit+0x240>)
 8007164:	4a25      	ldr	r2, [pc, #148]	; (80071fc <HAL_UART_MspInit+0x244>)
 8007166:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8007168:	4b23      	ldr	r3, [pc, #140]	; (80071f8 <HAL_UART_MspInit+0x240>)
 800716a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800716e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007170:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <HAL_UART_MspInit+0x240>)
 8007172:	2200      	movs	r2, #0
 8007174:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007176:	4b20      	ldr	r3, [pc, #128]	; (80071f8 <HAL_UART_MspInit+0x240>)
 8007178:	2200      	movs	r2, #0
 800717a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800717c:	4b1e      	ldr	r3, [pc, #120]	; (80071f8 <HAL_UART_MspInit+0x240>)
 800717e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007182:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007184:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <HAL_UART_MspInit+0x240>)
 8007186:	2200      	movs	r2, #0
 8007188:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800718a:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <HAL_UART_MspInit+0x240>)
 800718c:	2200      	movs	r2, #0
 800718e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8007190:	4b19      	ldr	r3, [pc, #100]	; (80071f8 <HAL_UART_MspInit+0x240>)
 8007192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007196:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007198:	4b17      	ldr	r3, [pc, #92]	; (80071f8 <HAL_UART_MspInit+0x240>)
 800719a:	2200      	movs	r2, #0
 800719c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800719e:	4b16      	ldr	r3, [pc, #88]	; (80071f8 <HAL_UART_MspInit+0x240>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80071a4:	4814      	ldr	r0, [pc, #80]	; (80071f8 <HAL_UART_MspInit+0x240>)
 80071a6:	f001 f87b 	bl	80082a0 <HAL_DMA_Init>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80071b0:	f7ff f9b8 	bl	8006524 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a10      	ldr	r2, [pc, #64]	; (80071f8 <HAL_UART_MspInit+0x240>)
 80071b8:	635a      	str	r2, [r3, #52]	; 0x34
 80071ba:	4a0f      	ldr	r2, [pc, #60]	; (80071f8 <HAL_UART_MspInit+0x240>)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80071c0:	2200      	movs	r2, #0
 80071c2:	2100      	movs	r1, #0
 80071c4:	2027      	movs	r0, #39	; 0x27
 80071c6:	f001 f834 	bl	8008232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80071ca:	2027      	movs	r0, #39	; 0x27
 80071cc:	f001 f84d 	bl	800826a <HAL_NVIC_EnableIRQ>
}
 80071d0:	e0a4      	b.n	800731c <HAL_UART_MspInit+0x364>
 80071d2:	bf00      	nop
 80071d4:	40004400 	.word	0x40004400
 80071d8:	40023800 	.word	0x40023800
 80071dc:	40020000 	.word	0x40020000
 80071e0:	200030d4 	.word	0x200030d4
 80071e4:	40026088 	.word	0x40026088
 80071e8:	20003294 	.word	0x20003294
 80071ec:	400260a0 	.word	0x400260a0
 80071f0:	40004800 	.word	0x40004800
 80071f4:	40020400 	.word	0x40020400
 80071f8:	20003194 	.word	0x20003194
 80071fc:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a47      	ldr	r2, [pc, #284]	; (8007324 <HAL_UART_MspInit+0x36c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	f040 8088 	bne.w	800731c <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 800720c:	2300      	movs	r3, #0
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	4b45      	ldr	r3, [pc, #276]	; (8007328 <HAL_UART_MspInit+0x370>)
 8007212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007214:	4a44      	ldr	r2, [pc, #272]	; (8007328 <HAL_UART_MspInit+0x370>)
 8007216:	f043 0320 	orr.w	r3, r3, #32
 800721a:	6453      	str	r3, [r2, #68]	; 0x44
 800721c:	4b42      	ldr	r3, [pc, #264]	; (8007328 <HAL_UART_MspInit+0x370>)
 800721e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	613b      	str	r3, [r7, #16]
 8007226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	4b3e      	ldr	r3, [pc, #248]	; (8007328 <HAL_UART_MspInit+0x370>)
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	4a3d      	ldr	r2, [pc, #244]	; (8007328 <HAL_UART_MspInit+0x370>)
 8007232:	f043 0304 	orr.w	r3, r3, #4
 8007236:	6313      	str	r3, [r2, #48]	; 0x30
 8007238:	4b3b      	ldr	r3, [pc, #236]	; (8007328 <HAL_UART_MspInit+0x370>)
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007244:	23c0      	movs	r3, #192	; 0xc0
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007248:	2302      	movs	r3, #2
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800724c:	2300      	movs	r3, #0
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007250:	2303      	movs	r3, #3
 8007252:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007254:	2308      	movs	r3, #8
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800725c:	4619      	mov	r1, r3
 800725e:	4833      	ldr	r0, [pc, #204]	; (800732c <HAL_UART_MspInit+0x374>)
 8007260:	f001 fbc8 	bl	80089f4 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007264:	4b32      	ldr	r3, [pc, #200]	; (8007330 <HAL_UART_MspInit+0x378>)
 8007266:	4a33      	ldr	r2, [pc, #204]	; (8007334 <HAL_UART_MspInit+0x37c>)
 8007268:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800726a:	4b31      	ldr	r3, [pc, #196]	; (8007330 <HAL_UART_MspInit+0x378>)
 800726c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007270:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007272:	4b2f      	ldr	r3, [pc, #188]	; (8007330 <HAL_UART_MspInit+0x378>)
 8007274:	2240      	movs	r2, #64	; 0x40
 8007276:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007278:	4b2d      	ldr	r3, [pc, #180]	; (8007330 <HAL_UART_MspInit+0x378>)
 800727a:	2200      	movs	r2, #0
 800727c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800727e:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <HAL_UART_MspInit+0x378>)
 8007280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007284:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007286:	4b2a      	ldr	r3, [pc, #168]	; (8007330 <HAL_UART_MspInit+0x378>)
 8007288:	2200      	movs	r2, #0
 800728a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800728c:	4b28      	ldr	r3, [pc, #160]	; (8007330 <HAL_UART_MspInit+0x378>)
 800728e:	2200      	movs	r2, #0
 8007290:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8007292:	4b27      	ldr	r3, [pc, #156]	; (8007330 <HAL_UART_MspInit+0x378>)
 8007294:	2200      	movs	r2, #0
 8007296:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007298:	4b25      	ldr	r3, [pc, #148]	; (8007330 <HAL_UART_MspInit+0x378>)
 800729a:	2200      	movs	r2, #0
 800729c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800729e:	4b24      	ldr	r3, [pc, #144]	; (8007330 <HAL_UART_MspInit+0x378>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80072a4:	4822      	ldr	r0, [pc, #136]	; (8007330 <HAL_UART_MspInit+0x378>)
 80072a6:	f000 fffb 	bl	80082a0 <HAL_DMA_Init>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 80072b0:	f7ff f938 	bl	8006524 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a1e      	ldr	r2, [pc, #120]	; (8007330 <HAL_UART_MspInit+0x378>)
 80072b8:	631a      	str	r2, [r3, #48]	; 0x30
 80072ba:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <HAL_UART_MspInit+0x378>)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80072c0:	4b1d      	ldr	r3, [pc, #116]	; (8007338 <HAL_UART_MspInit+0x380>)
 80072c2:	4a1e      	ldr	r2, [pc, #120]	; (800733c <HAL_UART_MspInit+0x384>)
 80072c4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80072c6:	4b1c      	ldr	r3, [pc, #112]	; (8007338 <HAL_UART_MspInit+0x380>)
 80072c8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80072cc:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072ce:	4b1a      	ldr	r3, [pc, #104]	; (8007338 <HAL_UART_MspInit+0x380>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072d4:	4b18      	ldr	r3, [pc, #96]	; (8007338 <HAL_UART_MspInit+0x380>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80072da:	4b17      	ldr	r3, [pc, #92]	; (8007338 <HAL_UART_MspInit+0x380>)
 80072dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072e0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <HAL_UART_MspInit+0x380>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072e8:	4b13      	ldr	r3, [pc, #76]	; (8007338 <HAL_UART_MspInit+0x380>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80072ee:	4b12      	ldr	r3, [pc, #72]	; (8007338 <HAL_UART_MspInit+0x380>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80072f4:	4b10      	ldr	r3, [pc, #64]	; (8007338 <HAL_UART_MspInit+0x380>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80072fa:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <HAL_UART_MspInit+0x380>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007300:	480d      	ldr	r0, [pc, #52]	; (8007338 <HAL_UART_MspInit+0x380>)
 8007302:	f000 ffcd 	bl	80082a0 <HAL_DMA_Init>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_UART_MspInit+0x358>
      Error_Handler();
 800730c:	f7ff f90a 	bl	8006524 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a09      	ldr	r2, [pc, #36]	; (8007338 <HAL_UART_MspInit+0x380>)
 8007314:	635a      	str	r2, [r3, #52]	; 0x34
 8007316:	4a08      	ldr	r2, [pc, #32]	; (8007338 <HAL_UART_MspInit+0x380>)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800731c:	bf00      	nop
 800731e:	3738      	adds	r7, #56	; 0x38
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40011400 	.word	0x40011400
 8007328:	40023800 	.word	0x40023800
 800732c:	40020800 	.word	0x40020800
 8007330:	20003234 	.word	0x20003234
 8007334:	400264a0 	.word	0x400264a0
 8007338:	20003134 	.word	0x20003134
 800733c:	40026428 	.word	0x40026428

08007340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007346:	e003      	b.n	8007350 <LoopCopyDataInit>

08007348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007348:	4b0c      	ldr	r3, [pc, #48]	; (800737c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800734a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800734c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800734e:	3104      	adds	r1, #4

08007350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007350:	480b      	ldr	r0, [pc, #44]	; (8007380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007352:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007358:	d3f6      	bcc.n	8007348 <CopyDataInit>
  ldr  r2, =_sbss
 800735a:	4a0b      	ldr	r2, [pc, #44]	; (8007388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800735c:	e002      	b.n	8007364 <LoopFillZerobss>

0800735e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800735e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007360:	f842 3b04 	str.w	r3, [r2], #4

08007364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007364:	4b09      	ldr	r3, [pc, #36]	; (800738c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007368:	d3f9      	bcc.n	800735e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800736a:	f7ff fc09 	bl	8006b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800736e:	f008 fb67 	bl	800fa40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007372:	f7fe ffa7 	bl	80062c4 <main>
  bx  lr    
 8007376:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007378:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800737c:	080141e4 	.word	0x080141e4
  ldr  r0, =_sdata
 8007380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007384:	20001c7c 	.word	0x20001c7c
  ldr  r2, =_sbss
 8007388:	20001c7c 	.word	0x20001c7c
  ldr  r3, = _ebss
 800738c:	2000337c 	.word	0x2000337c

08007390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007390:	e7fe      	b.n	8007390 <ADC_IRQHandler>

08007392 <get_nb_bytes_available>:

static telemetry_t * telem ;	//We dont use multiples telemetry anyways

//Private function to know the number of bytes available
uint16_t get_nb_bytes_available(telemetry_t * telem);
uint16_t get_nb_bytes_available(telemetry_t * telem){
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
	uint16_t nb = 0 ;
 800739a:	2300      	movs	r3, #0
 800739c:	81fb      	strh	r3, [r7, #14]
	if(telem->index_write_rx > telem->index_read_rx){
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d907      	bls.n	80073be <get_nb_bytes_available+0x2c>
		nb = telem->index_write_rx - telem->index_read_rx ;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 80073be:	89fb      	ldrh	r3, [r7, #14]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <TELEMETRY_Init>:

void TELEMETRY_Init(telemetry_t * telem_, UART_HandleTypeDef * huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
	telem = telem_ ;
 80073d6:	4a15      	ldr	r2, [pc, #84]	; (800742c <TELEMETRY_Init+0x60>)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6013      	str	r3, [r2, #0]
	telem->huart = huart ;
 80073dc:	4b13      	ldr	r3, [pc, #76]	; (800742c <TELEMETRY_Init+0x60>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	601a      	str	r2, [r3, #0]

	//On envoit un premier message qui sert sutout à éviter que les premiers octet utiles soient perdu
	static uint8_t hey_msg[] = "Hey it s me Theo...\n";
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 80073e4:	4b11      	ldr	r3, [pc, #68]	; (800742c <TELEMETRY_Init+0x60>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2214      	movs	r2, #20
 80073ec:	4910      	ldr	r1, [pc, #64]	; (8007430 <TELEMETRY_Init+0x64>)
 80073ee:	4618      	mov	r0, r3
 80073f0:	f006 ff5e 	bl	800e2b0 <HAL_UART_Transmit_DMA>

	//Activation de l'it "idle" qui préviendra de la fin de la récéption d'un message
	__HAL_UART_ENABLE_IT(telem->huart, UART_IT_IDLE);
 80073f4:	4b0d      	ldr	r3, [pc, #52]	; (800742c <TELEMETRY_Init+0x60>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	4b0b      	ldr	r3, [pc, #44]	; (800742c <TELEMETRY_Init+0x60>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0210 	orr.w	r2, r2, #16
 800740a:	60da      	str	r2, [r3, #12]
	//On lance la récéption en DMA
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 800740c:	4b07      	ldr	r3, [pc, #28]	; (800742c <TELEMETRY_Init+0x60>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	4b06      	ldr	r3, [pc, #24]	; (800742c <TELEMETRY_Init+0x60>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800741a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800741e:	4619      	mov	r1, r3
 8007420:	f006 ffb2 	bl	800e388 <HAL_UART_Receive_DMA>
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200020c8 	.word	0x200020c8
 8007430:	20001a88 	.word	0x20001a88

08007434 <TELEMETRY_Process>:


void TELEMETRY_Process(uint32_t time_us){
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

	//	--------------------	Transmission	------------------------
	//Ce qui suit vide le buffer en transmettant on contenu en respectant la limite
	//de vitesse maximum
	if(telem->index_write_tx != telem->index_read_tx && time_us > telem->next_send)
 800743c:	4b6f      	ldr	r3, [pc, #444]	; (80075fc <TELEMETRY_Process+0x1c8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 8007444:	4b6d      	ldr	r3, [pc, #436]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 800744c:	429a      	cmp	r2, r3
 800744e:	d051      	beq.n	80074f4 <TELEMETRY_Process+0xc0>
 8007450:	4b6a      	ldr	r3, [pc, #424]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	429a      	cmp	r2, r3
 800745c:	d94a      	bls.n	80074f4 <TELEMETRY_Process+0xc0>
	{
		telem->next_send = time_us + telem->len_portion_tx[telem->index_read_tx] * PERIODE_1_OCTET ;
 800745e:	4b67      	ldr	r3, [pc, #412]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a66      	ldr	r2, [pc, #408]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 800746a:	4413      	add	r3, r2
 800746c:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 8007470:	461a      	mov	r2, r3
 8007472:	f240 134d 	movw	r3, #333	; 0x14d
 8007476:	fb03 f302 	mul.w	r3, r3, r2
 800747a:	4619      	mov	r1, r3
 800747c:	4b5f      	ldr	r3, [pc, #380]	; (80075fc <TELEMETRY_Process+0x1c8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	440a      	add	r2, r1
 8007484:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

		//On transmet les données
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 8007488:	4b5c      	ldr	r3, [pc, #368]	; (80075fc <TELEMETRY_Process+0x1c8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	4b5b      	ldr	r3, [pc, #364]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b5a      	ldr	r3, [pc, #360]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 800749a:	4619      	mov	r1, r3
 800749c:	460b      	mov	r3, r1
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	1d59      	adds	r1, r3, #5
 80074a8:	4b54      	ldr	r3, [pc, #336]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a53      	ldr	r2, [pc, #332]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 80074b4:	4413      	add	r3, r2
 80074b6:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	f006 fef7 	bl	800e2b0 <HAL_UART_Transmit_DMA>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
 80074c2:	4b4e      	ldr	r3, [pc, #312]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f8b3 2426 	ldrh.w	r2, [r3, #1062]	; 0x426
 80074ca:	3201      	adds	r2, #1
 80074cc:	b292      	uxth	r2, r2
 80074ce:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 80074d2:	4b4a      	ldr	r3, [pc, #296]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 80074da:	4a48      	ldr	r2, [pc, #288]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	4948      	ldr	r1, [pc, #288]	; (8007600 <TELEMETRY_Process+0x1cc>)
 80074e0:	fba1 0103 	umull	r0, r1, r1, r3
 80074e4:	0909      	lsrs	r1, r1, #4
 80074e6:	2032      	movs	r0, #50	; 0x32
 80074e8:	fb00 f101 	mul.w	r1, r0, r1
 80074ec:	1a5b      	subs	r3, r3, r1
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	f8a2 3426 	strh.w	r3, [r2, #1062]	; 0x426
	}

	//	---------------------	Reception	-------------------------------

	uint16_t bytes_avaibles = get_nb_bytes_available(telem);
 80074f4:	4b41      	ldr	r3, [pc, #260]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff ff4a 	bl	8007392 <get_nb_bytes_available>
 80074fe:	4603      	mov	r3, r0
 8007500:	823b      	strh	r3, [r7, #16]
	if(bytes_avaibles > 2)	//Minimum trois octets pour faire quoi que ce soit
 8007502:	8a3b      	ldrh	r3, [r7, #16]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d976      	bls.n	80075f6 <TELEMETRY_Process+0x1c2>
	{
		uint16_t bytes_used = 1 ;
 8007508:	2301      	movs	r3, #1
 800750a:	82fb      	strh	r3, [r7, #22]
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 800750c:	4b3b      	ldr	r3, [pc, #236]	; (80075fc <TELEMETRY_Process+0x1c8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a3a      	ldr	r2, [pc, #232]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	f8b2 262a 	ldrh.w	r2, [r2, #1578]	; 0x62a
 8007518:	4413      	add	r3, r2
 800751a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800751e:	2b24      	cmp	r3, #36	; 0x24
 8007520:	d15c      	bne.n	80075dc <TELEMETRY_Process+0x1a8>
		{
			//Number of byte recquiered including the '$' and the checksum to use the current frame we are on
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[telem->index_read_rx+1]);
 8007522:	4b36      	ldr	r3, [pc, #216]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	4b35      	ldr	r3, [pc, #212]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800752e:	3301      	adds	r3, #1
 8007530:	4413      	add	r3, r2
 8007532:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8007536:	4618      	mov	r0, r3
 8007538:	f7fa fb16 	bl	8001b68 <DATA_LOGGER_Get_Data>
 800753c:	60f8      	str	r0, [r7, #12]
			uint16_t bytes_recquired = (current_data->format / 20) + 3 ;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	7a5b      	ldrb	r3, [r3, #9]
 8007542:	4a30      	ldr	r2, [pc, #192]	; (8007604 <TELEMETRY_Process+0x1d0>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	091b      	lsrs	r3, r3, #4
 800754a:	b2db      	uxtb	r3, r3
 800754c:	b29b      	uxth	r3, r3
 800754e:	3303      	adds	r3, #3
 8007550:	817b      	strh	r3, [r7, #10]

			if(bytes_recquired > bytes_avaibles)
 8007552:	897a      	ldrh	r2, [r7, #10]
 8007554:	8a3b      	ldrh	r3, [r7, #16]
 8007556:	429a      	cmp	r2, r3
 8007558:	d84c      	bhi.n	80075f4 <TELEMETRY_Process+0x1c0>
				return ;	//We just wait for then next call with hopefully more data available
			bytes_used = bytes_recquired;
 800755a:	897b      	ldrh	r3, [r7, #10]
 800755c:	82fb      	strh	r3, [r7, #22]

			//Len is id(1 byte) + data(x bytes)
			uint16_t len_frame = bytes_recquired - 2 ;
 800755e:	897b      	ldrh	r3, [r7, #10]
 8007560:	3b02      	subs	r3, #2
 8007562:	813b      	strh	r3, [r7, #8]

			//Checksum
			uint16_t checksum = 0 ;
 8007564:	2300      	movs	r3, #0
 8007566:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 8007568:	2300      	movs	r3, #0
 800756a:	827b      	strh	r3, [r7, #18]
 800756c:	e012      	b.n	8007594 <TELEMETRY_Process+0x160>
			{
				checksum += telem->buffer_rx[telem->index_read_rx+1+b];
 800756e:	4b23      	ldr	r3, [pc, #140]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4b22      	ldr	r3, [pc, #136]	; (80075fc <TELEMETRY_Process+0x1c8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800757a:	1c59      	adds	r1, r3, #1
 800757c:	8a7b      	ldrh	r3, [r7, #18]
 800757e:	440b      	add	r3, r1
 8007580:	4413      	add	r3, r2
 8007582:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8007586:	b29a      	uxth	r2, r3
 8007588:	8abb      	ldrh	r3, [r7, #20]
 800758a:	4413      	add	r3, r2
 800758c:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 800758e:	8a7b      	ldrh	r3, [r7, #18]
 8007590:	3301      	adds	r3, #1
 8007592:	827b      	strh	r3, [r7, #18]
 8007594:	8a7a      	ldrh	r2, [r7, #18]
 8007596:	893b      	ldrh	r3, [r7, #8]
 8007598:	429a      	cmp	r2, r3
 800759a:	d3e8      	bcc.n	800756e <TELEMETRY_Process+0x13a>
			}
			if(checksum % 256 == telem->buffer_rx[telem->index_read_rx + bytes_recquired-1])
 800759c:	8abb      	ldrh	r3, [r7, #20]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	4b16      	ldr	r3, [pc, #88]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80075a4:	6819      	ldr	r1, [r3, #0]
 80075a6:	4b15      	ldr	r3, [pc, #84]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80075ae:	4618      	mov	r0, r3
 80075b0:	897b      	ldrh	r3, [r7, #10]
 80075b2:	4403      	add	r3, r0
 80075b4:	3b01      	subs	r3, #1
 80075b6:	440b      	add	r3, r1
 80075b8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80075bc:	b29b      	uxth	r3, r3
 80075be:	429a      	cmp	r2, r3
 80075c0:	d10c      	bne.n	80075dc <TELEMETRY_Process+0x1a8>
			{
				DATA_LOGGER_Reception(&telem->buffer_rx[telem->index_read_rx+1]);
 80075c2:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80075ce:	3301      	adds	r3, #1
 80075d0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80075d4:	4413      	add	r3, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fa f8f8 	bl	80017cc <DATA_LOGGER_Reception>
			}
		}
		telem->index_read_rx += bytes_used ;
 80075dc:	4b07      	ldr	r3, [pc, #28]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f8b3 162a 	ldrh.w	r1, [r3, #1578]	; 0x62a
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <TELEMETRY_Process+0x1c8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	8afa      	ldrh	r2, [r7, #22]
 80075ea:	440a      	add	r2, r1
 80075ec:	b292      	uxth	r2, r2
 80075ee:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
 80075f2:	e000      	b.n	80075f6 <TELEMETRY_Process+0x1c2>
				return ;	//We just wait for then next call with hopefully more data available
 80075f4:	bf00      	nop
	}

}
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	200020c8 	.word	0x200020c8
 8007600:	51eb851f 	.word	0x51eb851f
 8007604:	cccccccd 	.word	0xcccccccd

08007608 <TELEMETRY_Send_Data>:


void TELEMETRY_Send_Data(uint8_t * data, uint8_t len){
 8007608:	b580      	push	{r7, lr}
 800760a:	b08a      	sub	sp, #40	; 0x28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
	uint8_t to_send[SIZE_PORTION_BUFFER];
	uint32_t checksum = 0 ;
 8007614:	2300      	movs	r3, #0
 8007616:	627b      	str	r3, [r7, #36]	; 0x24


	to_send[0] = '$';
 8007618:	2324      	movs	r3, #36	; 0x24
 800761a:	733b      	strb	r3, [r7, #12]

	for(uint8_t b = 0; b < len; b++){
 800761c:	2300      	movs	r3, #0
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007622:	e01d      	b.n	8007660 <TELEMETRY_Send_Data+0x58>
		to_send[1 + b] = data[b];
 8007624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	441a      	add	r2, r3
 800762c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007630:	3301      	adds	r3, #1
 8007632:	7812      	ldrb	r2, [r2, #0]
 8007634:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007638:	440b      	add	r3, r1
 800763a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		checksum += (uint32_t)to_send[1 + b];
 800763e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007642:	3301      	adds	r3, #1
 8007644:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007648:	4413      	add	r3, r2
 800764a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800764e:	461a      	mov	r2, r3
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	4413      	add	r3, r2
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint8_t b = 0; b < len; b++){
 8007656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800765a:	3301      	adds	r3, #1
 800765c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007660:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	429a      	cmp	r2, r3
 8007668:	d3dc      	bcc.n	8007624 <TELEMETRY_Send_Data+0x1c>
	}

	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	3301      	adds	r3, #1
 800766e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007676:	440b      	add	r3, r1
 8007678:	f803 2c1c 	strb.w	r2, [r3, #-28]
	TELEMETRY_Send_Data_Raw(to_send, len+2);
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	3302      	adds	r3, #2
 8007680:	b2da      	uxtb	r2, r3
 8007682:	f107 030c 	add.w	r3, r7, #12
 8007686:	4611      	mov	r1, r2
 8007688:	4618      	mov	r0, r3
 800768a:	f000 f805 	bl	8007698 <TELEMETRY_Send_Data_Raw>
}
 800768e:	bf00      	nop
 8007690:	3728      	adds	r7, #40	; 0x28
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <TELEMETRY_Send_Data_Raw>:

void TELEMETRY_Send_Data_Raw(uint8_t * data, uint8_t len){
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]

	//Copie du tableau dans le buffer
	for(uint8_t c = 0; c < len; c++)
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]
 80076a8:	e017      	b.n	80076da <TELEMETRY_Send_Data_Raw+0x42>
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	18d1      	adds	r1, r2, r3
 80076b0:	4b20      	ldr	r3, [pc, #128]	; (8007734 <TELEMETRY_Send_Data_Raw+0x9c>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	4b1f      	ldr	r3, [pc, #124]	; (8007734 <TELEMETRY_Send_Data_Raw+0x9c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 80076bc:	4618      	mov	r0, r3
 80076be:	4603      	mov	r3, r0
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4403      	add	r3, r0
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4618      	mov	r0, r3
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	4403      	add	r3, r0
 80076cc:	7809      	ldrb	r1, [r1, #0]
 80076ce:	4413      	add	r3, r2
 80076d0:	460a      	mov	r2, r1
 80076d2:	715a      	strb	r2, [r3, #5]
	for(uint8_t c = 0; c < len; c++)
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	3301      	adds	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]
 80076da:	7bfa      	ldrb	r2, [r7, #15]
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d3e3      	bcc.n	80076aa <TELEMETRY_Send_Data_Raw+0x12>
	//On enregistre la taille de la donnée
	telem->len_portion_tx[telem->index_write_tx] = len ;
 80076e2:	4b14      	ldr	r3, [pc, #80]	; (8007734 <TELEMETRY_Send_Data_Raw+0x9c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a13      	ldr	r2, [pc, #76]	; (8007734 <TELEMETRY_Send_Data_Raw+0x9c>)
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	f8b2 2424 	ldrh.w	r2, [r2, #1060]	; 0x424
 80076ee:	4413      	add	r3, r2
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed

	//Incrémentation de l'index
	telem->index_write_tx ++ ;
 80076f6:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <TELEMETRY_Send_Data_Raw+0x9c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 80076fe:	3201      	adds	r2, #1
 8007700:	b292      	uxth	r2, r2
 8007702:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 8007706:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <TELEMETRY_Send_Data_Raw+0x9c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 800770e:	4a09      	ldr	r2, [pc, #36]	; (8007734 <TELEMETRY_Send_Data_Raw+0x9c>)
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	4909      	ldr	r1, [pc, #36]	; (8007738 <TELEMETRY_Send_Data_Raw+0xa0>)
 8007714:	fba1 0103 	umull	r0, r1, r1, r3
 8007718:	0909      	lsrs	r1, r1, #4
 800771a:	2032      	movs	r0, #50	; 0x32
 800771c:	fb00 f101 	mul.w	r1, r0, r1
 8007720:	1a5b      	subs	r3, r3, r1
 8007722:	b29b      	uxth	r3, r3
 8007724:	f8a2 3424 	strh.w	r3, [r2, #1060]	; 0x424
}
 8007728:	bf00      	nop
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	200020c8 	.word	0x200020c8
 8007738:	51eb851f 	.word	0x51eb851f

0800773c <TELEMETRY_Idle_Line_Detection>:

void TELEMETRY_Idle_Line_Detection(void){
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
	//On met à jour l'index d'écriture du buffer rx
	telem->index_write_rx = LEN_RX_BUFFER - telem->huart->hdmarx->Instance->NDTR ;
 8007740:	4b09      	ldr	r3, [pc, #36]	; (8007768 <TELEMETRY_Idle_Line_Detection+0x2c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	b29a      	uxth	r2, r3
 800774e:	4b06      	ldr	r3, [pc, #24]	; (8007768 <TELEMETRY_Idle_Line_Detection+0x2c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8007756:	b292      	uxth	r2, r2
 8007758:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
}
 800775c:	bf00      	nop
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	200020c8 	.word	0x200020c8

0800776c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007770:	4b0e      	ldr	r3, [pc, #56]	; (80077ac <HAL_Init+0x40>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a0d      	ldr	r2, [pc, #52]	; (80077ac <HAL_Init+0x40>)
 8007776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800777a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800777c:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <HAL_Init+0x40>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a0a      	ldr	r2, [pc, #40]	; (80077ac <HAL_Init+0x40>)
 8007782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007788:	4b08      	ldr	r3, [pc, #32]	; (80077ac <HAL_Init+0x40>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a07      	ldr	r2, [pc, #28]	; (80077ac <HAL_Init+0x40>)
 800778e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007794:	2003      	movs	r0, #3
 8007796:	f000 fd41 	bl	800821c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800779a:	2000      	movs	r0, #0
 800779c:	f000 f808 	bl	80077b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077a0:	f7ff f87a 	bl	8006898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40023c00 	.word	0x40023c00

080077b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80077b8:	4b12      	ldr	r3, [pc, #72]	; (8007804 <HAL_InitTick+0x54>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	4b12      	ldr	r3, [pc, #72]	; (8007808 <HAL_InitTick+0x58>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	4619      	mov	r1, r3
 80077c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80077ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fd59 	bl	8008286 <HAL_SYSTICK_Config>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e00e      	b.n	80077fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b0f      	cmp	r3, #15
 80077e2:	d80a      	bhi.n	80077fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077e4:	2200      	movs	r2, #0
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ec:	f000 fd21 	bl	8008232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80077f0:	4a06      	ldr	r2, [pc, #24]	; (800780c <HAL_InitTick+0x5c>)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e000      	b.n	80077fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20001a84 	.word	0x20001a84
 8007808:	20001aa4 	.word	0x20001aa4
 800780c:	20001aa0 	.word	0x20001aa0

08007810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <HAL_IncTick+0x20>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	4b06      	ldr	r3, [pc, #24]	; (8007834 <HAL_IncTick+0x24>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4413      	add	r3, r2
 8007820:	4a04      	ldr	r2, [pc, #16]	; (8007834 <HAL_IncTick+0x24>)
 8007822:	6013      	str	r3, [r2, #0]
}
 8007824:	bf00      	nop
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20001aa4 	.word	0x20001aa4
 8007834:	20003374 	.word	0x20003374

08007838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  return uwTick;
 800783c:	4b03      	ldr	r3, [pc, #12]	; (800784c <HAL_GetTick+0x14>)
 800783e:	681b      	ldr	r3, [r3, #0]
}
 8007840:	4618      	mov	r0, r3
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	20003374 	.word	0x20003374

08007850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007858:	f7ff ffee 	bl	8007838 <HAL_GetTick>
 800785c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d005      	beq.n	8007876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800786a:	4b09      	ldr	r3, [pc, #36]	; (8007890 <HAL_Delay+0x40>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007876:	bf00      	nop
 8007878:	f7ff ffde 	bl	8007838 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	429a      	cmp	r2, r3
 8007886:	d8f7      	bhi.n	8007878 <HAL_Delay+0x28>
  {
  }
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20001aa4 	.word	0x20001aa4

08007894 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e033      	b.n	8007912 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fe fa64 	bl	8005d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d118      	bne.n	8007904 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80078da:	f023 0302 	bic.w	r3, r3, #2
 80078de:	f043 0202 	orr.w	r2, r3, #2
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa4a 	bl	8007d80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	f023 0303 	bic.w	r3, r3, #3
 80078fa:	f043 0201 	orr.w	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
 8007902:	e001      	b.n	8007908 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_ADC_Start_DMA+0x1e>
 8007936:	2302      	movs	r3, #2
 8007938:	e0cc      	b.n	8007ad4 <HAL_ADC_Start_DMA+0x1b8>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b01      	cmp	r3, #1
 800794e:	d018      	beq.n	8007982 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0201 	orr.w	r2, r2, #1
 800795e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007960:	4b5e      	ldr	r3, [pc, #376]	; (8007adc <HAL_ADC_Start_DMA+0x1c0>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a5e      	ldr	r2, [pc, #376]	; (8007ae0 <HAL_ADC_Start_DMA+0x1c4>)
 8007966:	fba2 2303 	umull	r2, r3, r2, r3
 800796a:	0c9a      	lsrs	r2, r3, #18
 800796c:	4613      	mov	r3, r2
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	4413      	add	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007974:	e002      	b.n	800797c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	3b01      	subs	r3, #1
 800797a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1f9      	bne.n	8007976 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b01      	cmp	r3, #1
 800798e:	f040 80a0 	bne.w	8007ad2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800799a:	f023 0301 	bic.w	r3, r3, #1
 800799e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d007      	beq.n	80079c4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80079bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d0:	d106      	bne.n	80079e0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d6:	f023 0206 	bic.w	r2, r3, #6
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	645a      	str	r2, [r3, #68]	; 0x44
 80079de:	e002      	b.n	80079e6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80079ee:	4b3d      	ldr	r3, [pc, #244]	; (8007ae4 <HAL_ADC_Start_DMA+0x1c8>)
 80079f0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	4a3c      	ldr	r2, [pc, #240]	; (8007ae8 <HAL_ADC_Start_DMA+0x1cc>)
 80079f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	4a3b      	ldr	r2, [pc, #236]	; (8007aec <HAL_ADC_Start_DMA+0x1d0>)
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	4a3a      	ldr	r2, [pc, #232]	; (8007af0 <HAL_ADC_Start_DMA+0x1d4>)
 8007a08:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007a12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007a22:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a32:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	334c      	adds	r3, #76	; 0x4c
 8007a3e:	4619      	mov	r1, r3
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f000 fcda 	bl	80083fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f003 031f 	and.w	r3, r3, #31
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d12a      	bne.n	8007aaa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a26      	ldr	r2, [pc, #152]	; (8007af4 <HAL_ADC_Start_DMA+0x1d8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d015      	beq.n	8007a8a <HAL_ADC_Start_DMA+0x16e>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a25      	ldr	r2, [pc, #148]	; (8007af8 <HAL_ADC_Start_DMA+0x1dc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d105      	bne.n	8007a74 <HAL_ADC_Start_DMA+0x158>
 8007a68:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <HAL_ADC_Start_DMA+0x1c8>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f003 031f 	and.w	r3, r3, #31
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00a      	beq.n	8007a8a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a20      	ldr	r2, [pc, #128]	; (8007afc <HAL_ADC_Start_DMA+0x1e0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d129      	bne.n	8007ad2 <HAL_ADC_Start_DMA+0x1b6>
 8007a7e:	4b19      	ldr	r3, [pc, #100]	; (8007ae4 <HAL_ADC_Start_DMA+0x1c8>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f003 031f 	and.w	r3, r3, #31
 8007a86:	2b0f      	cmp	r3, #15
 8007a88:	d823      	bhi.n	8007ad2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11c      	bne.n	8007ad2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007aa6:	609a      	str	r2, [r3, #8]
 8007aa8:	e013      	b.n	8007ad2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a11      	ldr	r2, [pc, #68]	; (8007af4 <HAL_ADC_Start_DMA+0x1d8>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d10e      	bne.n	8007ad2 <HAL_ADC_Start_DMA+0x1b6>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d107      	bne.n	8007ad2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007ad0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20001a84 	.word	0x20001a84
 8007ae0:	431bde83 	.word	0x431bde83
 8007ae4:	40012300 	.word	0x40012300
 8007ae8:	08007f79 	.word	0x08007f79
 8007aec:	08008033 	.word	0x08008033
 8007af0:	0800804f 	.word	0x0800804f
 8007af4:	40012000 	.word	0x40012000
 8007af8:	40012100 	.word	0x40012100
 8007afc:	40012200 	.word	0x40012200

08007b00 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_ADC_ConfigChannel+0x1c>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e105      	b.n	8007d64 <HAL_ADC_ConfigChannel+0x228>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b09      	cmp	r3, #9
 8007b66:	d925      	bls.n	8007bb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68d9      	ldr	r1, [r3, #12]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	4613      	mov	r3, r2
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	4413      	add	r3, r2
 8007b7c:	3b1e      	subs	r3, #30
 8007b7e:	2207      	movs	r2, #7
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	43da      	mvns	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	400a      	ands	r2, r1
 8007b8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68d9      	ldr	r1, [r3, #12]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	4403      	add	r3, r0
 8007ba6:	3b1e      	subs	r3, #30
 8007ba8:	409a      	lsls	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	60da      	str	r2, [r3, #12]
 8007bb2:	e022      	b.n	8007bfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6919      	ldr	r1, [r3, #16]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4413      	add	r3, r2
 8007bc8:	2207      	movs	r2, #7
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	43da      	mvns	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	400a      	ands	r2, r1
 8007bd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6919      	ldr	r1, [r3, #16]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4618      	mov	r0, r3
 8007bea:	4603      	mov	r3, r0
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	4403      	add	r3, r0
 8007bf0:	409a      	lsls	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	2b06      	cmp	r3, #6
 8007c00:	d824      	bhi.n	8007c4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	3b05      	subs	r3, #5
 8007c14:	221f      	movs	r2, #31
 8007c16:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1a:	43da      	mvns	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	400a      	ands	r2, r1
 8007c22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	4618      	mov	r0, r3
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	3b05      	subs	r3, #5
 8007c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	635a      	str	r2, [r3, #52]	; 0x34
 8007c4a:	e04c      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b0c      	cmp	r3, #12
 8007c52:	d824      	bhi.n	8007c9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	3b23      	subs	r3, #35	; 0x23
 8007c66:	221f      	movs	r2, #31
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	43da      	mvns	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	400a      	ands	r2, r1
 8007c74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	4618      	mov	r0, r3
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	3b23      	subs	r3, #35	; 0x23
 8007c90:	fa00 f203 	lsl.w	r2, r0, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c9c:	e023      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	3b41      	subs	r3, #65	; 0x41
 8007cb0:	221f      	movs	r2, #31
 8007cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb6:	43da      	mvns	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	400a      	ands	r2, r1
 8007cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	4618      	mov	r0, r3
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	3b41      	subs	r3, #65	; 0x41
 8007cda:	fa00 f203 	lsl.w	r2, r0, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ce6:	4b22      	ldr	r3, [pc, #136]	; (8007d70 <HAL_ADC_ConfigChannel+0x234>)
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <HAL_ADC_ConfigChannel+0x238>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d109      	bne.n	8007d08 <HAL_ADC_ConfigChannel+0x1cc>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b12      	cmp	r3, #18
 8007cfa:	d105      	bne.n	8007d08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a19      	ldr	r2, [pc, #100]	; (8007d74 <HAL_ADC_ConfigChannel+0x238>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d123      	bne.n	8007d5a <HAL_ADC_ConfigChannel+0x21e>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b10      	cmp	r3, #16
 8007d18:	d003      	beq.n	8007d22 <HAL_ADC_ConfigChannel+0x1e6>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b11      	cmp	r3, #17
 8007d20:	d11b      	bne.n	8007d5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b10      	cmp	r3, #16
 8007d34:	d111      	bne.n	8007d5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007d36:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <HAL_ADC_ConfigChannel+0x23c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a10      	ldr	r2, [pc, #64]	; (8007d7c <HAL_ADC_ConfigChannel+0x240>)
 8007d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d40:	0c9a      	lsrs	r2, r3, #18
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007d4c:	e002      	b.n	8007d54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f9      	bne.n	8007d4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	40012300 	.word	0x40012300
 8007d74:	40012000 	.word	0x40012000
 8007d78:	20001a84 	.word	0x20001a84
 8007d7c:	431bde83 	.word	0x431bde83

08007d80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007d88:	4b79      	ldr	r3, [pc, #484]	; (8007f70 <ADC_Init+0x1f0>)
 8007d8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	431a      	orrs	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007db4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6859      	ldr	r1, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	021a      	lsls	r2, r3, #8
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007dd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6859      	ldr	r1, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6899      	ldr	r1, [r3, #8]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e12:	4a58      	ldr	r2, [pc, #352]	; (8007f74 <ADC_Init+0x1f4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d022      	beq.n	8007e5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6899      	ldr	r1, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6899      	ldr	r1, [r3, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	609a      	str	r2, [r3, #8]
 8007e5c:	e00f      	b.n	8007e7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0202 	bic.w	r2, r2, #2
 8007e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6899      	ldr	r1, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	7e1b      	ldrb	r3, [r3, #24]
 8007e98:	005a      	lsls	r2, r3, #1
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d01b      	beq.n	8007ee4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007eca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6859      	ldr	r1, [r3, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	035a      	lsls	r2, r3, #13
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]
 8007ee2:	e007      	b.n	8007ef4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ef2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	051a      	lsls	r2, r3, #20
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6899      	ldr	r1, [r3, #8]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f36:	025a      	lsls	r2, r3, #9
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6899      	ldr	r1, [r3, #8]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	029a      	lsls	r2, r3, #10
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	609a      	str	r2, [r3, #8]
}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	40012300 	.word	0x40012300
 8007f74:	0f000001 	.word	0x0f000001

08007f78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d13c      	bne.n	800800c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d12b      	bne.n	8008004 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d127      	bne.n	8008004 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d006      	beq.n	8007fd0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d119      	bne.n	8008004 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f022 0220 	bic.w	r2, r2, #32
 8007fde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d105      	bne.n	8008004 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffc:	f043 0201 	orr.w	r2, r3, #1
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff fd7b 	bl	8007b00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800800a:	e00e      	b.n	800802a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f7ff fd85 	bl	8007b28 <HAL_ADC_ErrorCallback>
}
 800801e:	e004      	b.n	800802a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
}
 800802a:	bf00      	nop
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7ff fd67 	bl	8007b14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008046:	bf00      	nop
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2240      	movs	r2, #64	; 0x40
 8008060:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008066:	f043 0204 	orr.w	r2, r3, #4
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff fd5a 	bl	8007b28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800808c:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <__NVIC_SetPriorityGrouping+0x44>)
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008098:	4013      	ands	r3, r2
 800809a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80080a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80080a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80080ae:	4a04      	ldr	r2, [pc, #16]	; (80080c0 <__NVIC_SetPriorityGrouping+0x44>)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	60d3      	str	r3, [r2, #12]
}
 80080b4:	bf00      	nop
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	e000ed00 	.word	0xe000ed00

080080c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80080c4:	b480      	push	{r7}
 80080c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80080c8:	4b04      	ldr	r3, [pc, #16]	; (80080dc <__NVIC_GetPriorityGrouping+0x18>)
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	0a1b      	lsrs	r3, r3, #8
 80080ce:	f003 0307 	and.w	r3, r3, #7
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	e000ed00 	.word	0xe000ed00

080080e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	db0b      	blt.n	800810a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	f003 021f 	and.w	r2, r3, #31
 80080f8:	4907      	ldr	r1, [pc, #28]	; (8008118 <__NVIC_EnableIRQ+0x38>)
 80080fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080fe:	095b      	lsrs	r3, r3, #5
 8008100:	2001      	movs	r0, #1
 8008102:	fa00 f202 	lsl.w	r2, r0, r2
 8008106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	e000e100 	.word	0xe000e100

0800811c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800812c:	2b00      	cmp	r3, #0
 800812e:	db0a      	blt.n	8008146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	b2da      	uxtb	r2, r3
 8008134:	490c      	ldr	r1, [pc, #48]	; (8008168 <__NVIC_SetPriority+0x4c>)
 8008136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800813a:	0112      	lsls	r2, r2, #4
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	440b      	add	r3, r1
 8008140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008144:	e00a      	b.n	800815c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4908      	ldr	r1, [pc, #32]	; (800816c <__NVIC_SetPriority+0x50>)
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	f003 030f 	and.w	r3, r3, #15
 8008152:	3b04      	subs	r3, #4
 8008154:	0112      	lsls	r2, r2, #4
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	440b      	add	r3, r1
 800815a:	761a      	strb	r2, [r3, #24]
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	e000e100 	.word	0xe000e100
 800816c:	e000ed00 	.word	0xe000ed00

08008170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008170:	b480      	push	{r7}
 8008172:	b089      	sub	sp, #36	; 0x24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	f1c3 0307 	rsb	r3, r3, #7
 800818a:	2b04      	cmp	r3, #4
 800818c:	bf28      	it	cs
 800818e:	2304      	movcs	r3, #4
 8008190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	3304      	adds	r3, #4
 8008196:	2b06      	cmp	r3, #6
 8008198:	d902      	bls.n	80081a0 <NVIC_EncodePriority+0x30>
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	3b03      	subs	r3, #3
 800819e:	e000      	b.n	80081a2 <NVIC_EncodePriority+0x32>
 80081a0:	2300      	movs	r3, #0
 80081a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081a4:	f04f 32ff 	mov.w	r2, #4294967295
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	fa02 f303 	lsl.w	r3, r2, r3
 80081ae:	43da      	mvns	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	401a      	ands	r2, r3
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081b8:	f04f 31ff 	mov.w	r1, #4294967295
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	fa01 f303 	lsl.w	r3, r1, r3
 80081c2:	43d9      	mvns	r1, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081c8:	4313      	orrs	r3, r2
         );
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3724      	adds	r7, #36	; 0x24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
	...

080081d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081e8:	d301      	bcc.n	80081ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80081ea:	2301      	movs	r3, #1
 80081ec:	e00f      	b.n	800820e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081ee:	4a0a      	ldr	r2, [pc, #40]	; (8008218 <SysTick_Config+0x40>)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80081f6:	210f      	movs	r1, #15
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	f7ff ff8e 	bl	800811c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <SysTick_Config+0x40>)
 8008202:	2200      	movs	r2, #0
 8008204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008206:	4b04      	ldr	r3, [pc, #16]	; (8008218 <SysTick_Config+0x40>)
 8008208:	2207      	movs	r2, #7
 800820a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	e000e010 	.word	0xe000e010

0800821c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff ff29 	bl	800807c <__NVIC_SetPriorityGrouping>
}
 800822a:	bf00      	nop
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af00      	add	r7, sp, #0
 8008238:	4603      	mov	r3, r0
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
 800823e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008240:	2300      	movs	r3, #0
 8008242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008244:	f7ff ff3e 	bl	80080c4 <__NVIC_GetPriorityGrouping>
 8008248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	68b9      	ldr	r1, [r7, #8]
 800824e:	6978      	ldr	r0, [r7, #20]
 8008250:	f7ff ff8e 	bl	8008170 <NVIC_EncodePriority>
 8008254:	4602      	mov	r2, r0
 8008256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff ff5d 	bl	800811c <__NVIC_SetPriority>
}
 8008262:	bf00      	nop
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	4603      	mov	r3, r0
 8008272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff ff31 	bl	80080e0 <__NVIC_EnableIRQ>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff ffa2 	bl	80081d8 <SysTick_Config>
 8008294:	4603      	mov	r3, r0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80082a8:	2300      	movs	r3, #0
 80082aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80082ac:	f7ff fac4 	bl	8007838 <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e099      	b.n	80083f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0201 	bic.w	r2, r2, #1
 80082da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082dc:	e00f      	b.n	80082fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082de:	f7ff faab 	bl	8007838 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b05      	cmp	r3, #5
 80082ea:	d908      	bls.n	80082fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2203      	movs	r2, #3
 80082f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e078      	b.n	80083f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e8      	bne.n	80082de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4b38      	ldr	r3, [pc, #224]	; (80083f8 <HAL_DMA_Init+0x158>)
 8008318:	4013      	ands	r3, r2
 800831a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800832a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	4313      	orrs	r3, r2
 800834e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	2b04      	cmp	r3, #4
 8008356:	d107      	bne.n	8008368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008360:	4313      	orrs	r3, r2
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	4313      	orrs	r3, r2
 8008366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f023 0307 	bic.w	r3, r3, #7
 800837e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	4313      	orrs	r3, r2
 8008388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	2b04      	cmp	r3, #4
 8008390:	d117      	bne.n	80083c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00e      	beq.n	80083c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 faab 	bl	8008900 <DMA_CheckFifoParam>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d008      	beq.n	80083c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2240      	movs	r2, #64	; 0x40
 80083b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80083be:	2301      	movs	r3, #1
 80083c0:	e016      	b.n	80083f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fa62 	bl	8008894 <DMA_CalcBaseAndBitshift>
 80083d0:	4603      	mov	r3, r0
 80083d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d8:	223f      	movs	r2, #63	; 0x3f
 80083da:	409a      	lsls	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	f010803f 	.word	0xf010803f

080083fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008412:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_DMA_Start_IT+0x26>
 800841e:	2302      	movs	r3, #2
 8008420:	e040      	b.n	80084a4 <HAL_DMA_Start_IT+0xa8>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b01      	cmp	r3, #1
 8008434:	d12f      	bne.n	8008496 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2202      	movs	r2, #2
 800843a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 f9f4 	bl	8008838 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008454:	223f      	movs	r2, #63	; 0x3f
 8008456:	409a      	lsls	r2, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0216 	orr.w	r2, r2, #22
 800846a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d007      	beq.n	8008484 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0208 	orr.w	r2, r2, #8
 8008482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 0201 	orr.w	r2, r2, #1
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	e005      	b.n	80084a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800849e:	2302      	movs	r3, #2
 80084a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d004      	beq.n	80084ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2280      	movs	r2, #128	; 0x80
 80084c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e00c      	b.n	80084e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2205      	movs	r2, #5
 80084ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0201 	bic.w	r2, r2, #1
 80084e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80084fc:	4b92      	ldr	r3, [pc, #584]	; (8008748 <HAL_DMA_IRQHandler+0x258>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a92      	ldr	r2, [pc, #584]	; (800874c <HAL_DMA_IRQHandler+0x25c>)
 8008502:	fba2 2303 	umull	r2, r3, r2, r3
 8008506:	0a9b      	lsrs	r3, r3, #10
 8008508:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800851a:	2208      	movs	r2, #8
 800851c:	409a      	lsls	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4013      	ands	r3, r2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01a      	beq.n	800855c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b00      	cmp	r3, #0
 8008532:	d013      	beq.n	800855c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 0204 	bic.w	r2, r2, #4
 8008542:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008548:	2208      	movs	r2, #8
 800854a:	409a      	lsls	r2, r3
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008554:	f043 0201 	orr.w	r2, r3, #1
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008560:	2201      	movs	r2, #1
 8008562:	409a      	lsls	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4013      	ands	r3, r2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d012      	beq.n	8008592 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00b      	beq.n	8008592 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857e:	2201      	movs	r2, #1
 8008580:	409a      	lsls	r2, r3
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858a:	f043 0202 	orr.w	r2, r3, #2
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008596:	2204      	movs	r2, #4
 8008598:	409a      	lsls	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	4013      	ands	r3, r2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d012      	beq.n	80085c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b4:	2204      	movs	r2, #4
 80085b6:	409a      	lsls	r2, r3
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c0:	f043 0204 	orr.w	r2, r3, #4
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085cc:	2210      	movs	r2, #16
 80085ce:	409a      	lsls	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4013      	ands	r3, r2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d043      	beq.n	8008660 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0308 	and.w	r3, r3, #8
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d03c      	beq.n	8008660 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ea:	2210      	movs	r2, #16
 80085ec:	409a      	lsls	r2, r3
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d018      	beq.n	8008632 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d108      	bne.n	8008620 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	2b00      	cmp	r3, #0
 8008614:	d024      	beq.n	8008660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
 800861e:	e01f      	b.n	8008660 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01b      	beq.n	8008660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
 8008630:	e016      	b.n	8008660 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863c:	2b00      	cmp	r3, #0
 800863e:	d107      	bne.n	8008650 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0208 	bic.w	r2, r2, #8
 800864e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008664:	2220      	movs	r2, #32
 8008666:	409a      	lsls	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4013      	ands	r3, r2
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 808e 	beq.w	800878e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0310 	and.w	r3, r3, #16
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 8086 	beq.w	800878e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008686:	2220      	movs	r2, #32
 8008688:	409a      	lsls	r2, r3
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b05      	cmp	r3, #5
 8008698:	d136      	bne.n	8008708 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 0216 	bic.w	r2, r2, #22
 80086a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	695a      	ldr	r2, [r3, #20]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d103      	bne.n	80086ca <HAL_DMA_IRQHandler+0x1da>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0208 	bic.w	r2, r2, #8
 80086d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086de:	223f      	movs	r2, #63	; 0x3f
 80086e0:	409a      	lsls	r2, r3
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d07d      	beq.n	80087fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
        }
        return;
 8008706:	e078      	b.n	80087fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d01c      	beq.n	8008750 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d108      	bne.n	8008736 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008728:	2b00      	cmp	r3, #0
 800872a:	d030      	beq.n	800878e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	4798      	blx	r3
 8008734:	e02b      	b.n	800878e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d027      	beq.n	800878e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
 8008746:	e022      	b.n	800878e <HAL_DMA_IRQHandler+0x29e>
 8008748:	20001a84 	.word	0x20001a84
 800874c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10f      	bne.n	800877e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 0210 	bic.w	r2, r2, #16
 800876c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008792:	2b00      	cmp	r3, #0
 8008794:	d032      	beq.n	80087fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d022      	beq.n	80087e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2205      	movs	r2, #5
 80087a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0201 	bic.w	r2, r2, #1
 80087b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	3301      	adds	r3, #1
 80087be:	60bb      	str	r3, [r7, #8]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d307      	bcc.n	80087d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1f2      	bne.n	80087ba <HAL_DMA_IRQHandler+0x2ca>
 80087d4:	e000      	b.n	80087d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80087d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d005      	beq.n	80087fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	4798      	blx	r3
 80087f8:	e000      	b.n	80087fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80087fa:	bf00      	nop
    }
  }
}
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop

08008804 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008812:	b2db      	uxtb	r3, r3
}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008854:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b40      	cmp	r3, #64	; 0x40
 8008864:	d108      	bne.n	8008878 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008876:	e007      	b.n	8008888 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	60da      	str	r2, [r3, #12]
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	3b10      	subs	r3, #16
 80088a4:	4a14      	ldr	r2, [pc, #80]	; (80088f8 <DMA_CalcBaseAndBitshift+0x64>)
 80088a6:	fba2 2303 	umull	r2, r3, r2, r3
 80088aa:	091b      	lsrs	r3, r3, #4
 80088ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80088ae:	4a13      	ldr	r2, [pc, #76]	; (80088fc <DMA_CalcBaseAndBitshift+0x68>)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d909      	bls.n	80088d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80088ca:	f023 0303 	bic.w	r3, r3, #3
 80088ce:	1d1a      	adds	r2, r3, #4
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	659a      	str	r2, [r3, #88]	; 0x58
 80088d4:	e007      	b.n	80088e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80088de:	f023 0303 	bic.w	r3, r3, #3
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	aaaaaaab 	.word	0xaaaaaaab
 80088fc:	08013b08 	.word	0x08013b08

08008900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d11f      	bne.n	800895a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d855      	bhi.n	80089cc <DMA_CheckFifoParam+0xcc>
 8008920:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <DMA_CheckFifoParam+0x28>)
 8008922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008926:	bf00      	nop
 8008928:	08008939 	.word	0x08008939
 800892c:	0800894b 	.word	0x0800894b
 8008930:	08008939 	.word	0x08008939
 8008934:	080089cd 	.word	0x080089cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d045      	beq.n	80089d0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008948:	e042      	b.n	80089d0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008952:	d13f      	bne.n	80089d4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008958:	e03c      	b.n	80089d4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008962:	d121      	bne.n	80089a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b03      	cmp	r3, #3
 8008968:	d836      	bhi.n	80089d8 <DMA_CheckFifoParam+0xd8>
 800896a:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <DMA_CheckFifoParam+0x70>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	08008981 	.word	0x08008981
 8008974:	08008987 	.word	0x08008987
 8008978:	08008981 	.word	0x08008981
 800897c:	08008999 	.word	0x08008999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	73fb      	strb	r3, [r7, #15]
      break;
 8008984:	e02f      	b.n	80089e6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d024      	beq.n	80089dc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008996:	e021      	b.n	80089dc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089a0:	d11e      	bne.n	80089e0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80089a6:	e01b      	b.n	80089e0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d902      	bls.n	80089b4 <DMA_CheckFifoParam+0xb4>
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d003      	beq.n	80089ba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80089b2:	e018      	b.n	80089e6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	73fb      	strb	r3, [r7, #15]
      break;
 80089b8:	e015      	b.n	80089e6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00e      	beq.n	80089e4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
      break;
 80089ca:	e00b      	b.n	80089e4 <DMA_CheckFifoParam+0xe4>
      break;
 80089cc:	bf00      	nop
 80089ce:	e00a      	b.n	80089e6 <DMA_CheckFifoParam+0xe6>
      break;
 80089d0:	bf00      	nop
 80089d2:	e008      	b.n	80089e6 <DMA_CheckFifoParam+0xe6>
      break;
 80089d4:	bf00      	nop
 80089d6:	e006      	b.n	80089e6 <DMA_CheckFifoParam+0xe6>
      break;
 80089d8:	bf00      	nop
 80089da:	e004      	b.n	80089e6 <DMA_CheckFifoParam+0xe6>
      break;
 80089dc:	bf00      	nop
 80089de:	e002      	b.n	80089e6 <DMA_CheckFifoParam+0xe6>
      break;   
 80089e0:	bf00      	nop
 80089e2:	e000      	b.n	80089e6 <DMA_CheckFifoParam+0xe6>
      break;
 80089e4:	bf00      	nop
    }
  } 
  
  return status; 
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b089      	sub	sp, #36	; 0x24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61fb      	str	r3, [r7, #28]
 8008a0e:	e16b      	b.n	8008ce8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a10:	2201      	movs	r2, #1
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	fa02 f303 	lsl.w	r3, r2, r3
 8008a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4013      	ands	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	f040 815a 	bne.w	8008ce2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d00b      	beq.n	8008a4e <HAL_GPIO_Init+0x5a>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d007      	beq.n	8008a4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a42:	2b11      	cmp	r3, #17
 8008a44:	d003      	beq.n	8008a4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b12      	cmp	r3, #18
 8008a4c:	d130      	bne.n	8008ab0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	2203      	movs	r2, #3
 8008a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5e:	43db      	mvns	r3, r3
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	4013      	ands	r3, r2
 8008a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a84:	2201      	movs	r2, #1
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	4013      	ands	r3, r2
 8008a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	091b      	lsrs	r3, r3, #4
 8008a9a:	f003 0201 	and.w	r2, r3, #1
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	2203      	movs	r2, #3
 8008abc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac0:	43db      	mvns	r3, r3
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d003      	beq.n	8008af0 <HAL_GPIO_Init+0xfc>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b12      	cmp	r3, #18
 8008aee:	d123      	bne.n	8008b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	08da      	lsrs	r2, r3, #3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3208      	adds	r2, #8
 8008af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	220f      	movs	r2, #15
 8008b08:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0c:	43db      	mvns	r3, r3
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	4013      	ands	r3, r2
 8008b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	691a      	ldr	r2, [r3, #16]
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	fa02 f303 	lsl.w	r3, r2, r3
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	08da      	lsrs	r2, r3, #3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3208      	adds	r2, #8
 8008b32:	69b9      	ldr	r1, [r7, #24]
 8008b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	2203      	movs	r2, #3
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	43db      	mvns	r3, r3
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f003 0203 	and.w	r2, r3, #3
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 80b4 	beq.w	8008ce2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	4b5f      	ldr	r3, [pc, #380]	; (8008cfc <HAL_GPIO_Init+0x308>)
 8008b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b82:	4a5e      	ldr	r2, [pc, #376]	; (8008cfc <HAL_GPIO_Init+0x308>)
 8008b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b88:	6453      	str	r3, [r2, #68]	; 0x44
 8008b8a:	4b5c      	ldr	r3, [pc, #368]	; (8008cfc <HAL_GPIO_Init+0x308>)
 8008b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b96:	4a5a      	ldr	r2, [pc, #360]	; (8008d00 <HAL_GPIO_Init+0x30c>)
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	089b      	lsrs	r3, r3, #2
 8008b9c:	3302      	adds	r3, #2
 8008b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	220f      	movs	r2, #15
 8008bae:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb2:	43db      	mvns	r3, r3
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a51      	ldr	r2, [pc, #324]	; (8008d04 <HAL_GPIO_Init+0x310>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d02b      	beq.n	8008c1a <HAL_GPIO_Init+0x226>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a50      	ldr	r2, [pc, #320]	; (8008d08 <HAL_GPIO_Init+0x314>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d025      	beq.n	8008c16 <HAL_GPIO_Init+0x222>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a4f      	ldr	r2, [pc, #316]	; (8008d0c <HAL_GPIO_Init+0x318>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d01f      	beq.n	8008c12 <HAL_GPIO_Init+0x21e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a4e      	ldr	r2, [pc, #312]	; (8008d10 <HAL_GPIO_Init+0x31c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d019      	beq.n	8008c0e <HAL_GPIO_Init+0x21a>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a4d      	ldr	r2, [pc, #308]	; (8008d14 <HAL_GPIO_Init+0x320>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d013      	beq.n	8008c0a <HAL_GPIO_Init+0x216>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a4c      	ldr	r2, [pc, #304]	; (8008d18 <HAL_GPIO_Init+0x324>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00d      	beq.n	8008c06 <HAL_GPIO_Init+0x212>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a4b      	ldr	r2, [pc, #300]	; (8008d1c <HAL_GPIO_Init+0x328>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d007      	beq.n	8008c02 <HAL_GPIO_Init+0x20e>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a4a      	ldr	r2, [pc, #296]	; (8008d20 <HAL_GPIO_Init+0x32c>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d101      	bne.n	8008bfe <HAL_GPIO_Init+0x20a>
 8008bfa:	2307      	movs	r3, #7
 8008bfc:	e00e      	b.n	8008c1c <HAL_GPIO_Init+0x228>
 8008bfe:	2308      	movs	r3, #8
 8008c00:	e00c      	b.n	8008c1c <HAL_GPIO_Init+0x228>
 8008c02:	2306      	movs	r3, #6
 8008c04:	e00a      	b.n	8008c1c <HAL_GPIO_Init+0x228>
 8008c06:	2305      	movs	r3, #5
 8008c08:	e008      	b.n	8008c1c <HAL_GPIO_Init+0x228>
 8008c0a:	2304      	movs	r3, #4
 8008c0c:	e006      	b.n	8008c1c <HAL_GPIO_Init+0x228>
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e004      	b.n	8008c1c <HAL_GPIO_Init+0x228>
 8008c12:	2302      	movs	r3, #2
 8008c14:	e002      	b.n	8008c1c <HAL_GPIO_Init+0x228>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <HAL_GPIO_Init+0x228>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	69fa      	ldr	r2, [r7, #28]
 8008c1e:	f002 0203 	and.w	r2, r2, #3
 8008c22:	0092      	lsls	r2, r2, #2
 8008c24:	4093      	lsls	r3, r2
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c2c:	4934      	ldr	r1, [pc, #208]	; (8008d00 <HAL_GPIO_Init+0x30c>)
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	089b      	lsrs	r3, r3, #2
 8008c32:	3302      	adds	r3, #2
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c3a:	4b3a      	ldr	r3, [pc, #232]	; (8008d24 <HAL_GPIO_Init+0x330>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	43db      	mvns	r3, r3
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	4013      	ands	r3, r2
 8008c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008c5e:	4a31      	ldr	r2, [pc, #196]	; (8008d24 <HAL_GPIO_Init+0x330>)
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008c64:	4b2f      	ldr	r3, [pc, #188]	; (8008d24 <HAL_GPIO_Init+0x330>)
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	4013      	ands	r3, r2
 8008c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008c88:	4a26      	ldr	r2, [pc, #152]	; (8008d24 <HAL_GPIO_Init+0x330>)
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c8e:	4b25      	ldr	r3, [pc, #148]	; (8008d24 <HAL_GPIO_Init+0x330>)
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	43db      	mvns	r3, r3
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008cb2:	4a1c      	ldr	r2, [pc, #112]	; (8008d24 <HAL_GPIO_Init+0x330>)
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008cb8:	4b1a      	ldr	r3, [pc, #104]	; (8008d24 <HAL_GPIO_Init+0x330>)
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	43db      	mvns	r3, r3
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d003      	beq.n	8008cdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008cdc:	4a11      	ldr	r2, [pc, #68]	; (8008d24 <HAL_GPIO_Init+0x330>)
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	61fb      	str	r3, [r7, #28]
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	2b0f      	cmp	r3, #15
 8008cec:	f67f ae90 	bls.w	8008a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008cf0:	bf00      	nop
 8008cf2:	3724      	adds	r7, #36	; 0x24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	40023800 	.word	0x40023800
 8008d00:	40013800 	.word	0x40013800
 8008d04:	40020000 	.word	0x40020000
 8008d08:	40020400 	.word	0x40020400
 8008d0c:	40020800 	.word	0x40020800
 8008d10:	40020c00 	.word	0x40020c00
 8008d14:	40021000 	.word	0x40021000
 8008d18:	40021400 	.word	0x40021400
 8008d1c:	40021800 	.word	0x40021800
 8008d20:	40021c00 	.word	0x40021c00
 8008d24:	40013c00 	.word	0x40013c00

08008d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	807b      	strh	r3, [r7, #2]
 8008d34:	4613      	mov	r3, r2
 8008d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d38:	787b      	ldrb	r3, [r7, #1]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d3e:	887a      	ldrh	r2, [r7, #2]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008d44:	e003      	b.n	8008d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008d46:	887b      	ldrh	r3, [r7, #2]
 8008d48:	041a      	lsls	r2, r3, #16
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	619a      	str	r2, [r3, #24]
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e11f      	b.n	8008fae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d106      	bne.n	8008d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7fd f9e2 	bl	800614c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2224      	movs	r2, #36	; 0x24
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0201 	bic.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008dbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008dc0:	f003 fb36 	bl	800c430 <HAL_RCC_GetPCLK1Freq>
 8008dc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	4a7b      	ldr	r2, [pc, #492]	; (8008fb8 <HAL_I2C_Init+0x25c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d807      	bhi.n	8008de0 <HAL_I2C_Init+0x84>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4a7a      	ldr	r2, [pc, #488]	; (8008fbc <HAL_I2C_Init+0x260>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	bf94      	ite	ls
 8008dd8:	2301      	movls	r3, #1
 8008dda:	2300      	movhi	r3, #0
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	e006      	b.n	8008dee <HAL_I2C_Init+0x92>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a77      	ldr	r2, [pc, #476]	; (8008fc0 <HAL_I2C_Init+0x264>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	bf94      	ite	ls
 8008de8:	2301      	movls	r3, #1
 8008dea:	2300      	movhi	r3, #0
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e0db      	b.n	8008fae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4a72      	ldr	r2, [pc, #456]	; (8008fc4 <HAL_I2C_Init+0x268>)
 8008dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfe:	0c9b      	lsrs	r3, r3, #18
 8008e00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4a64      	ldr	r2, [pc, #400]	; (8008fb8 <HAL_I2C_Init+0x25c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d802      	bhi.n	8008e30 <HAL_I2C_Init+0xd4>
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	e009      	b.n	8008e44 <HAL_I2C_Init+0xe8>
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008e36:	fb02 f303 	mul.w	r3, r2, r3
 8008e3a:	4a63      	ldr	r2, [pc, #396]	; (8008fc8 <HAL_I2C_Init+0x26c>)
 8008e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e40:	099b      	lsrs	r3, r3, #6
 8008e42:	3301      	adds	r3, #1
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	6812      	ldr	r2, [r2, #0]
 8008e48:	430b      	orrs	r3, r1
 8008e4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008e56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	4956      	ldr	r1, [pc, #344]	; (8008fb8 <HAL_I2C_Init+0x25c>)
 8008e60:	428b      	cmp	r3, r1
 8008e62:	d80d      	bhi.n	8008e80 <HAL_I2C_Init+0x124>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	1e59      	subs	r1, r3, #1
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e72:	3301      	adds	r3, #1
 8008e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	bf38      	it	cc
 8008e7c:	2304      	movcc	r3, #4
 8008e7e:	e04f      	b.n	8008f20 <HAL_I2C_Init+0x1c4>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d111      	bne.n	8008eac <HAL_I2C_Init+0x150>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	1e58      	subs	r0, r3, #1
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6859      	ldr	r1, [r3, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	440b      	add	r3, r1
 8008e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bf0c      	ite	eq
 8008ea4:	2301      	moveq	r3, #1
 8008ea6:	2300      	movne	r3, #0
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	e012      	b.n	8008ed2 <HAL_I2C_Init+0x176>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	1e58      	subs	r0, r3, #1
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6859      	ldr	r1, [r3, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	440b      	add	r3, r1
 8008eba:	0099      	lsls	r1, r3, #2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	bf0c      	ite	eq
 8008ecc:	2301      	moveq	r3, #1
 8008ece:	2300      	movne	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <HAL_I2C_Init+0x17e>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e022      	b.n	8008f20 <HAL_I2C_Init+0x1c4>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10e      	bne.n	8008f00 <HAL_I2C_Init+0x1a4>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	1e58      	subs	r0, r3, #1
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6859      	ldr	r1, [r3, #4]
 8008eea:	460b      	mov	r3, r1
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	440b      	add	r3, r1
 8008ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efe:	e00f      	b.n	8008f20 <HAL_I2C_Init+0x1c4>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	1e58      	subs	r0, r3, #1
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6859      	ldr	r1, [r3, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	0099      	lsls	r1, r3, #2
 8008f10:	440b      	add	r3, r1
 8008f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f16:	3301      	adds	r3, #1
 8008f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	6809      	ldr	r1, [r1, #0]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	69da      	ldr	r2, [r3, #28]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6911      	ldr	r1, [r2, #16]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	68d2      	ldr	r2, [r2, #12]
 8008f5a:	4311      	orrs	r1, r2
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	430b      	orrs	r3, r1
 8008f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	695a      	ldr	r2, [r3, #20]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0201 	orr.w	r2, r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	000186a0 	.word	0x000186a0
 8008fbc:	001e847f 	.word	0x001e847f
 8008fc0:	003d08ff 	.word	0x003d08ff
 8008fc4:	431bde83 	.word	0x431bde83
 8008fc8:	10624dd3 	.word	0x10624dd3

08008fcc <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	607a      	str	r2, [r7, #4]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	460b      	mov	r3, r1
 8008fda:	817b      	strh	r3, [r7, #10]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	f040 80f4 	bne.w	80091da <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008ff2:	4b7c      	ldr	r3, [pc, #496]	; (80091e4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	08db      	lsrs	r3, r3, #3
 8008ff8:	4a7b      	ldr	r2, [pc, #492]	; (80091e8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8008ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffe:	0a1a      	lsrs	r2, r3, #8
 8009000:	4613      	mov	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	009a      	lsls	r2, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	3b01      	subs	r3, #1
 8009010:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d116      	bne.n	8009046 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2220      	movs	r2, #32
 8009022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009032:	f043 0220 	orr.w	r2, r3, #32
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e0ca      	b.n	80091dc <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b02      	cmp	r3, #2
 8009052:	d0db      	beq.n	800900c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800905a:	2b01      	cmp	r3, #1
 800905c:	d101      	bne.n	8009062 <HAL_I2C_Master_Transmit_DMA+0x96>
 800905e:	2302      	movs	r3, #2
 8009060:	e0bc      	b.n	80091dc <HAL_I2C_Master_Transmit_DMA+0x210>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b01      	cmp	r3, #1
 8009076:	d007      	beq.n	8009088 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f042 0201 	orr.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009096:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2221      	movs	r2, #33	; 0x21
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2210      	movs	r2, #16
 80090a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	893a      	ldrh	r2, [r7, #8]
 80090b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4a49      	ldr	r2, [pc, #292]	; (80091ec <HAL_I2C_Master_Transmit_DMA+0x220>)
 80090c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80090ca:	897a      	ldrh	r2, [r7, #10]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d062      	beq.n	800919e <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090dc:	4a44      	ldr	r2, [pc, #272]	; (80091f0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80090de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e4:	4a43      	ldr	r2, [pc, #268]	; (80091f4 <HAL_I2C_Master_Transmit_DMA+0x228>)
 80090e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ec:	2200      	movs	r2, #0
 80090ee:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f4:	2200      	movs	r2, #0
 80090f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fc:	2200      	movs	r2, #0
 80090fe:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009104:	2200      	movs	r2, #0
 8009106:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009110:	4619      	mov	r1, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3310      	adds	r3, #16
 8009118:	461a      	mov	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911e:	f7ff f96d 	bl	80083fc <HAL_DMA_Start_IT>
 8009122:	4603      	mov	r3, r0
 8009124:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d124      	bne.n	8009176 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800913a:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800914a:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009162:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009172:	605a      	str	r2, [r3, #4]
 8009174:	e02f      	b.n	80091d6 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2220      	movs	r2, #32
 800917a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918a:	f043 0210 	orr.w	r2, r3, #16
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e01e      	b.n	80091dc <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091ac:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091bc:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80091d4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	e000      	b.n	80091dc <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80091da:	2302      	movs	r3, #2
  }
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20001a84 	.word	0x20001a84
 80091e8:	14f8b589 	.word	0x14f8b589
 80091ec:	ffff0000 	.word	0xffff0000
 80091f0:	0800b4c1 	.word	0x0800b4c1
 80091f4:	0800b66b 	.word	0x0800b66b

080091f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08c      	sub	sp, #48	; 0x30
 80091fc:	af02      	add	r7, sp, #8
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	4608      	mov	r0, r1
 8009202:	4611      	mov	r1, r2
 8009204:	461a      	mov	r2, r3
 8009206:	4603      	mov	r3, r0
 8009208:	817b      	strh	r3, [r7, #10]
 800920a:	460b      	mov	r3, r1
 800920c:	813b      	strh	r3, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009212:	f7fe fb11 	bl	8007838 <HAL_GetTick>
 8009216:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b20      	cmp	r3, #32
 8009222:	f040 8208 	bne.w	8009636 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	2319      	movs	r3, #25
 800922c:	2201      	movs	r2, #1
 800922e:	497b      	ldr	r1, [pc, #492]	; (800941c <HAL_I2C_Mem_Read+0x224>)
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f002 faff 	bl	800b834 <I2C_WaitOnFlagUntilTimeout>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
 800923e:	e1fb      	b.n	8009638 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <HAL_I2C_Mem_Read+0x56>
 800924a:	2302      	movs	r3, #2
 800924c:	e1f4      	b.n	8009638 <HAL_I2C_Mem_Read+0x440>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b01      	cmp	r3, #1
 8009262:	d007      	beq.n	8009274 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2222      	movs	r2, #34	; 0x22
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2240      	movs	r2, #64	; 0x40
 8009290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80092a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4a5b      	ldr	r2, [pc, #364]	; (8009420 <HAL_I2C_Mem_Read+0x228>)
 80092b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092b6:	88f8      	ldrh	r0, [r7, #6]
 80092b8:	893a      	ldrh	r2, [r7, #8]
 80092ba:	8979      	ldrh	r1, [r7, #10]
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	4603      	mov	r3, r0
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f002 f812 	bl	800b2f0 <I2C_RequestMemoryRead>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e1b0      	b.n	8009638 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d113      	bne.n	8009306 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092de:	2300      	movs	r3, #0
 80092e0:	623b      	str	r3, [r7, #32]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	623b      	str	r3, [r7, #32]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	623b      	str	r3, [r7, #32]
 80092f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	e184      	b.n	8009610 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800930a:	2b01      	cmp	r3, #1
 800930c:	d11b      	bne.n	8009346 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800931c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800931e:	2300      	movs	r3, #0
 8009320:	61fb      	str	r3, [r7, #28]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	61fb      	str	r3, [r7, #28]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	61fb      	str	r3, [r7, #28]
 8009332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	e164      	b.n	8009610 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800934a:	2b02      	cmp	r3, #2
 800934c:	d11b      	bne.n	8009386 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800935c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800936c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800936e:	2300      	movs	r3, #0
 8009370:	61bb      	str	r3, [r7, #24]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	61bb      	str	r3, [r7, #24]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	61bb      	str	r3, [r7, #24]
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	e144      	b.n	8009610 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009386:	2300      	movs	r3, #0
 8009388:	617b      	str	r3, [r7, #20]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	617b      	str	r3, [r7, #20]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800939c:	e138      	b.n	8009610 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	f200 80f1 	bhi.w	800958a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d123      	bne.n	80093f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f002 fb87 	bl	800bac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e139      	b.n	8009638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691a      	ldr	r2, [r3, #16]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ce:	b2d2      	uxtb	r2, r2
 80093d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e0:	3b01      	subs	r3, #1
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093f6:	e10b      	b.n	8009610 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d14e      	bne.n	800949e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	2200      	movs	r2, #0
 8009408:	4906      	ldr	r1, [pc, #24]	; (8009424 <HAL_I2C_Mem_Read+0x22c>)
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f002 fa12 	bl	800b834 <I2C_WaitOnFlagUntilTimeout>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d008      	beq.n	8009428 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e10e      	b.n	8009638 <HAL_I2C_Mem_Read+0x440>
 800941a:	bf00      	nop
 800941c:	00100002 	.word	0x00100002
 8009420:	ffff0000 	.word	0xffff0000
 8009424:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691a      	ldr	r2, [r3, #16]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009442:	b2d2      	uxtb	r2, r2
 8009444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009454:	3b01      	subs	r3, #1
 8009456:	b29a      	uxth	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009460:	b29b      	uxth	r3, r3
 8009462:	3b01      	subs	r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	691a      	ldr	r2, [r3, #16]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	b2d2      	uxtb	r2, r2
 8009476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	1c5a      	adds	r2, r3, #1
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009486:	3b01      	subs	r3, #1
 8009488:	b29a      	uxth	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009492:	b29b      	uxth	r3, r3
 8009494:	3b01      	subs	r3, #1
 8009496:	b29a      	uxth	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800949c:	e0b8      	b.n	8009610 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	2200      	movs	r2, #0
 80094a6:	4966      	ldr	r1, [pc, #408]	; (8009640 <HAL_I2C_Mem_Read+0x448>)
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f002 f9c3 	bl	800b834 <I2C_WaitOnFlagUntilTimeout>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e0bf      	b.n	8009638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691a      	ldr	r2, [r3, #16]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	b2d2      	uxtb	r2, r2
 80094d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	3b01      	subs	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	2200      	movs	r2, #0
 8009502:	494f      	ldr	r1, [pc, #316]	; (8009640 <HAL_I2C_Mem_Read+0x448>)
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f002 f995 	bl	800b834 <I2C_WaitOnFlagUntilTimeout>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e091      	b.n	8009638 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691a      	ldr	r2, [r3, #16]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954c:	b29b      	uxth	r3, r3
 800954e:	3b01      	subs	r3, #1
 8009550:	b29a      	uxth	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	691a      	ldr	r2, [r3, #16]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	b2d2      	uxtb	r2, r2
 8009562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009572:	3b01      	subs	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800957e:	b29b      	uxth	r3, r3
 8009580:	3b01      	subs	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009588:	e042      	b.n	8009610 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800958a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800958c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f002 fa9a 	bl	800bac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e04c      	b.n	8009638 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	691a      	ldr	r2, [r3, #16]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	b2d2      	uxtb	r2, r2
 80095aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	3b01      	subs	r3, #1
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	f003 0304 	and.w	r3, r3, #4
 80095da:	2b04      	cmp	r3, #4
 80095dc:	d118      	bne.n	8009610 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	b2d2      	uxtb	r2, r2
 80095ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	1c5a      	adds	r2, r3, #1
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009606:	b29b      	uxth	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	b29a      	uxth	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009614:	2b00      	cmp	r3, #0
 8009616:	f47f aec2 	bne.w	800939e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2220      	movs	r2, #32
 800961e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	e000      	b.n	8009638 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009636:	2302      	movs	r3, #2
  }
}
 8009638:	4618      	mov	r0, r3
 800963a:	3728      	adds	r7, #40	; 0x28
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	00010004 	.word	0x00010004

08009644 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08c      	sub	sp, #48	; 0x30
 8009648:	af02      	add	r7, sp, #8
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	4608      	mov	r0, r1
 800964e:	4611      	mov	r1, r2
 8009650:	461a      	mov	r2, r3
 8009652:	4603      	mov	r3, r0
 8009654:	817b      	strh	r3, [r7, #10]
 8009656:	460b      	mov	r3, r1
 8009658:	813b      	strh	r3, [r7, #8]
 800965a:	4613      	mov	r3, r2
 800965c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800965e:	f7fe f8eb 	bl	8007838 <HAL_GetTick>
 8009662:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8009664:	2300      	movs	r3, #0
 8009666:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b20      	cmp	r3, #32
 8009672:	f040 8154 	bne.w	800991e <HAL_I2C_Mem_Read_DMA+0x2da>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8009676:	4b96      	ldr	r3, [pc, #600]	; (80098d0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	08db      	lsrs	r3, r3, #3
 800967c:	4a95      	ldr	r2, [pc, #596]	; (80098d4 <HAL_I2C_Mem_Read_DMA+0x290>)
 800967e:	fba2 2303 	umull	r2, r3, r2, r3
 8009682:	0a1a      	lsrs	r2, r3, #8
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009a      	lsls	r2, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	3b01      	subs	r3, #1
 8009694:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d116      	bne.n	80096ca <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b6:	f043 0220 	orr.w	r2, r3, #32
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e12a      	b.n	8009920 <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d0db      	beq.n	8009690 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d101      	bne.n	80096e6 <HAL_I2C_Mem_Read_DMA+0xa2>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e11c      	b.n	8009920 <HAL_I2C_Mem_Read_DMA+0x2dc>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d007      	beq.n	800970c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 0201 	orr.w	r2, r2, #1
 800970a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800971a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2222      	movs	r2, #34	; 0x22
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2240      	movs	r2, #64	; 0x40
 8009728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800973c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009742:	b29a      	uxth	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4a63      	ldr	r2, [pc, #396]	; (80098d8 <HAL_I2C_Mem_Read_DMA+0x294>)
 800974c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 80ab 	beq.w	80098ae <HAL_I2C_Mem_Read_DMA+0x26a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	4a5f      	ldr	r2, [pc, #380]	; (80098dc <HAL_I2C_Mem_Read_DMA+0x298>)
 800975e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	4a5e      	ldr	r2, [pc, #376]	; (80098e0 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8009766:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	2200      	movs	r2, #0
 800976e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009774:	2200      	movs	r2, #0
 8009776:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	2200      	movs	r2, #0
 800977e:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009784:	2200      	movs	r2, #0
 8009786:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3310      	adds	r3, #16
 8009792:	4619      	mov	r1, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	461a      	mov	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800979e:	f7fe fe2d 	bl	80083fc <HAL_DMA_Start_IT>
 80097a2:	4603      	mov	r3, r0
 80097a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 80097a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d16a      	bne.n	8009886 <HAL_I2C_Mem_Read_DMA+0x242>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80097b0:	88f8      	ldrh	r0, [r7, #6]
 80097b2:	893a      	ldrh	r2, [r7, #8]
 80097b4:	8979      	ldrh	r1, [r7, #10]
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	2323      	movs	r3, #35	; 0x23
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	4603      	mov	r3, r0
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f001 fd95 	bl	800b2f0 <I2C_RequestMemoryRead>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d027      	beq.n	800981c <HAL_I2C_Mem_Read_DMA+0x1d8>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fe6b 	bl	80084ac <HAL_DMA_Abort_IT>
 80097d6:	4603      	mov	r3, r0
 80097d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Clear directly Complete callback as no XferAbortCallback is used to finalize Abort treatment */
          if (hi2c->hdmarx != NULL)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <HAL_I2C_Mem_Read_DMA+0x1a8>
          {
            hi2c->hdmarx->XferCpltCallback = NULL;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e8:	2200      	movs	r2, #0
 80097ea:	63da      	str	r2, [r3, #60]	; 0x3c
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097fa:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f022 0201 	bic.w	r2, r2, #1
 8009816:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e081      	b.n	8009920 <HAL_I2C_Mem_Read_DMA+0x2dc>
        }

        if (hi2c->XferSize == 1U)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009820:	2b01      	cmp	r3, #1
 8009822:	d108      	bne.n	8009836 <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	e007      	b.n	8009846 <HAL_I2C_Mem_Read_DMA+0x202>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009844:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009846:	2300      	movs	r3, #0
 8009848:	61bb      	str	r3, [r7, #24]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	61bb      	str	r3, [r7, #24]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	61bb      	str	r3, [r7, #24]
 800985a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009872:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009882:	605a      	str	r2, [r3, #4]
 8009884:	e049      	b.n	800991a <HAL_I2C_Mem_Read_DMA+0x2d6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2220      	movs	r2, #32
 800988a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	f043 0210 	orr.w	r2, r3, #16
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e038      	b.n	8009920 <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80098ae:	88f8      	ldrh	r0, [r7, #6]
 80098b0:	893a      	ldrh	r2, [r7, #8]
 80098b2:	8979      	ldrh	r1, [r7, #10]
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	2323      	movs	r3, #35	; 0x23
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	4603      	mov	r3, r0
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f001 fd16 	bl	800b2f0 <I2C_RequestMemoryRead>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00c      	beq.n	80098e4 <HAL_I2C_Mem_Read_DMA+0x2a0>
      {
        return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e028      	b.n	8009920 <HAL_I2C_Mem_Read_DMA+0x2dc>
 80098ce:	bf00      	nop
 80098d0:	20001a84 	.word	0x20001a84
 80098d4:	14f8b589 	.word	0x14f8b589
 80098d8:	ffff0000 	.word	0xffff0000
 80098dc:	0800b4c1 	.word	0x0800b4c1
 80098e0:	0800b66b 	.word	0x0800b66b
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	617b      	str	r3, [r7, #20]
 80098f8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009908:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2220      	movs	r2, #32
 800990e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	e000      	b.n	8009920 <HAL_I2C_Mem_Read_DMA+0x2dc>
  }
  else
  {
    return HAL_BUSY;
 800991e:	2302      	movs	r3, #2
  }
}
 8009920:	4618      	mov	r0, r3
 8009922:	3728      	adds	r7, #40	; 0x28
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08a      	sub	sp, #40	; 0x28
 800992c:	af02      	add	r7, sp, #8
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	607a      	str	r2, [r7, #4]
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	460b      	mov	r3, r1
 8009936:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009938:	f7fd ff7e 	bl	8007838 <HAL_GetTick>
 800993c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800993e:	2301      	movs	r3, #1
 8009940:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b20      	cmp	r3, #32
 800994c:	f040 8111 	bne.w	8009b72 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	2319      	movs	r3, #25
 8009956:	2201      	movs	r2, #1
 8009958:	4988      	ldr	r1, [pc, #544]	; (8009b7c <HAL_I2C_IsDeviceReady+0x254>)
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f001 ff6a 	bl	800b834 <I2C_WaitOnFlagUntilTimeout>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009966:	2302      	movs	r3, #2
 8009968:	e104      	b.n	8009b74 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009970:	2b01      	cmp	r3, #1
 8009972:	d101      	bne.n	8009978 <HAL_I2C_IsDeviceReady+0x50>
 8009974:	2302      	movs	r3, #2
 8009976:	e0fd      	b.n	8009b74 <HAL_I2C_IsDeviceReady+0x24c>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b01      	cmp	r3, #1
 800998c:	d007      	beq.n	800999e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f042 0201 	orr.w	r2, r2, #1
 800999c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2224      	movs	r2, #36	; 0x24
 80099b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4a70      	ldr	r2, [pc, #448]	; (8009b80 <HAL_I2C_IsDeviceReady+0x258>)
 80099c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2200      	movs	r2, #0
 80099da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f001 ff28 	bl	800b834 <I2C_WaitOnFlagUntilTimeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00d      	beq.n	8009a06 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f8:	d103      	bne.n	8009a02 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a00:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e0b6      	b.n	8009b74 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a06:	897b      	ldrh	r3, [r7, #10]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a14:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009a16:	f7fd ff0f 	bl	8007838 <HAL_GetTick>
 8009a1a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	bf0c      	ite	eq
 8009a2a:	2301      	moveq	r3, #1
 8009a2c:	2300      	movne	r3, #0
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a40:	bf0c      	ite	eq
 8009a42:	2301      	moveq	r3, #1
 8009a44:	2300      	movne	r3, #0
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009a4a:	e025      	b.n	8009a98 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a4c:	f7fd fef4 	bl	8007838 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d302      	bcc.n	8009a62 <HAL_I2C_IsDeviceReady+0x13a>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d103      	bne.n	8009a6a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	22a0      	movs	r2, #160	; 0xa0
 8009a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	f003 0302 	and.w	r3, r3, #2
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	bf0c      	ite	eq
 8009a78:	2301      	moveq	r3, #1
 8009a7a:	2300      	movne	r3, #0
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a8e:	bf0c      	ite	eq
 8009a90:	2301      	moveq	r3, #1
 8009a92:	2300      	movne	r3, #0
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2ba0      	cmp	r3, #160	; 0xa0
 8009aa2:	d005      	beq.n	8009ab0 <HAL_I2C_IsDeviceReady+0x188>
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d102      	bne.n	8009ab0 <HAL_I2C_IsDeviceReady+0x188>
 8009aaa:	7dbb      	ldrb	r3, [r7, #22]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0cd      	beq.n	8009a4c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2220      	movs	r2, #32
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d129      	bne.n	8009b1a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	613b      	str	r3, [r7, #16]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	613b      	str	r3, [r7, #16]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	613b      	str	r3, [r7, #16]
 8009aea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	2319      	movs	r3, #25
 8009af2:	2201      	movs	r2, #1
 8009af4:	4921      	ldr	r1, [pc, #132]	; (8009b7c <HAL_I2C_IsDeviceReady+0x254>)
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f001 fe9c 	bl	800b834 <I2C_WaitOnFlagUntilTimeout>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e036      	b.n	8009b74 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	e02c      	b.n	8009b74 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b28:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b32:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	2319      	movs	r3, #25
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	490f      	ldr	r1, [pc, #60]	; (8009b7c <HAL_I2C_IsDeviceReady+0x254>)
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f001 fe78 	bl	800b834 <I2C_WaitOnFlagUntilTimeout>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e012      	b.n	8009b74 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	3301      	adds	r3, #1
 8009b52:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	f4ff af32 	bcc.w	80099c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e000      	b.n	8009b74 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009b72:	2302      	movs	r3, #2
  }
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3720      	adds	r7, #32
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	00100002 	.word	0x00100002
 8009b80:	ffff0000 	.word	0xffff0000

08009b84 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ba4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	2b10      	cmp	r3, #16
 8009bb2:	d003      	beq.n	8009bbc <HAL_I2C_EV_IRQHandler+0x38>
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	2b40      	cmp	r3, #64	; 0x40
 8009bb8:	f040 80bd 	bne.w	8009d36 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10d      	bne.n	8009bf2 <HAL_I2C_EV_IRQHandler+0x6e>
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009bdc:	d003      	beq.n	8009be6 <HAL_I2C_EV_IRQHandler+0x62>
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009be4:	d101      	bne.n	8009bea <HAL_I2C_EV_IRQHandler+0x66>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <HAL_I2C_EV_IRQHandler+0x68>
 8009bea:	2300      	movs	r3, #0
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	f000 812e 	beq.w	8009e4e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	f003 0301 	and.w	r3, r3, #1
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00c      	beq.n	8009c16 <HAL_I2C_EV_IRQHandler+0x92>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	0a5b      	lsrs	r3, r3, #9
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d006      	beq.n	8009c16 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f001 ffe2 	bl	800bbd2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fd58 	bl	800a6c4 <I2C_Master_SB>
 8009c14:	e08e      	b.n	8009d34 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	08db      	lsrs	r3, r3, #3
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d009      	beq.n	8009c36 <HAL_I2C_EV_IRQHandler+0xb2>
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	0a5b      	lsrs	r3, r3, #9
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fdce 	bl	800a7d0 <I2C_Master_ADD10>
 8009c34:	e07e      	b.n	8009d34 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	085b      	lsrs	r3, r3, #1
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d009      	beq.n	8009c56 <HAL_I2C_EV_IRQHandler+0xd2>
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	0a5b      	lsrs	r3, r3, #9
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fde8 	bl	800a824 <I2C_Master_ADDR>
 8009c54:	e06e      	b.n	8009d34 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	089b      	lsrs	r3, r3, #2
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d037      	beq.n	8009cd2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c70:	f000 80ef 	beq.w	8009e52 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	09db      	lsrs	r3, r3, #7
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00f      	beq.n	8009ca0 <HAL_I2C_EV_IRQHandler+0x11c>
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	0a9b      	lsrs	r3, r3, #10
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d009      	beq.n	8009ca0 <HAL_I2C_EV_IRQHandler+0x11c>
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	089b      	lsrs	r3, r3, #2
 8009c90:	f003 0301 	and.w	r3, r3, #1
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d103      	bne.n	8009ca0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f9e5 	bl	800a068 <I2C_MasterTransmit_TXE>
 8009c9e:	e049      	b.n	8009d34 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	089b      	lsrs	r3, r3, #2
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 80d2 	beq.w	8009e52 <HAL_I2C_EV_IRQHandler+0x2ce>
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	0a5b      	lsrs	r3, r3, #9
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 80cb 	beq.w	8009e52 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	2b10      	cmp	r3, #16
 8009cc0:	d103      	bne.n	8009cca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa6c 	bl	800a1a0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009cc8:	e0c3      	b.n	8009e52 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fad0 	bl	800a270 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009cd0:	e0bf      	b.n	8009e52 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ce0:	f000 80b7 	beq.w	8009e52 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	099b      	lsrs	r3, r3, #6
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00f      	beq.n	8009d10 <HAL_I2C_EV_IRQHandler+0x18c>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	0a9b      	lsrs	r3, r3, #10
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d009      	beq.n	8009d10 <HAL_I2C_EV_IRQHandler+0x18c>
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	089b      	lsrs	r3, r3, #2
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d103      	bne.n	8009d10 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fb40 	bl	800a38e <I2C_MasterReceive_RXNE>
 8009d0e:	e011      	b.n	8009d34 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	089b      	lsrs	r3, r3, #2
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 809a 	beq.w	8009e52 <HAL_I2C_EV_IRQHandler+0x2ce>
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	0a5b      	lsrs	r3, r3, #9
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 8093 	beq.w	8009e52 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fbdf 	bl	800a4f0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009d32:	e08e      	b.n	8009e52 <HAL_I2C_EV_IRQHandler+0x2ce>
 8009d34:	e08d      	b.n	8009e52 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d004      	beq.n	8009d48 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	61fb      	str	r3, [r7, #28]
 8009d46:	e007      	b.n	8009d58 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	085b      	lsrs	r3, r3, #1
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d012      	beq.n	8009d8a <HAL_I2C_EV_IRQHandler+0x206>
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	0a5b      	lsrs	r3, r3, #9
 8009d68:	f003 0301 	and.w	r3, r3, #1
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00c      	beq.n	8009d8a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009d80:	69b9      	ldr	r1, [r7, #24]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 ff9d 	bl	800acc2 <I2C_Slave_ADDR>
 8009d88:	e066      	b.n	8009e58 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	091b      	lsrs	r3, r3, #4
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d009      	beq.n	8009daa <HAL_I2C_EV_IRQHandler+0x226>
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	0a5b      	lsrs	r3, r3, #9
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 ffd2 	bl	800ad4c <I2C_Slave_STOPF>
 8009da8:	e056      	b.n	8009e58 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
 8009dac:	2b21      	cmp	r3, #33	; 0x21
 8009dae:	d002      	beq.n	8009db6 <HAL_I2C_EV_IRQHandler+0x232>
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	2b29      	cmp	r3, #41	; 0x29
 8009db4:	d125      	bne.n	8009e02 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	09db      	lsrs	r3, r3, #7
 8009dba:	f003 0301 	and.w	r3, r3, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00f      	beq.n	8009de2 <HAL_I2C_EV_IRQHandler+0x25e>
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	0a9b      	lsrs	r3, r3, #10
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d009      	beq.n	8009de2 <HAL_I2C_EV_IRQHandler+0x25e>
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	089b      	lsrs	r3, r3, #2
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d103      	bne.n	8009de2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 feb3 	bl	800ab46 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009de0:	e039      	b.n	8009e56 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	089b      	lsrs	r3, r3, #2
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d033      	beq.n	8009e56 <HAL_I2C_EV_IRQHandler+0x2d2>
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	0a5b      	lsrs	r3, r3, #9
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d02d      	beq.n	8009e56 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fee0 	bl	800abc0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009e00:	e029      	b.n	8009e56 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	099b      	lsrs	r3, r3, #6
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00f      	beq.n	8009e2e <HAL_I2C_EV_IRQHandler+0x2aa>
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	0a9b      	lsrs	r3, r3, #10
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d009      	beq.n	8009e2e <HAL_I2C_EV_IRQHandler+0x2aa>
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	089b      	lsrs	r3, r3, #2
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d103      	bne.n	8009e2e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 feeb 	bl	800ac02 <I2C_SlaveReceive_RXNE>
 8009e2c:	e014      	b.n	8009e58 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	089b      	lsrs	r3, r3, #2
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00e      	beq.n	8009e58 <HAL_I2C_EV_IRQHandler+0x2d4>
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	0a5b      	lsrs	r3, r3, #9
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d008      	beq.n	8009e58 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 ff19 	bl	800ac7e <I2C_SlaveReceive_BTF>
 8009e4c:	e004      	b.n	8009e58 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8009e4e:	bf00      	nop
 8009e50:	e002      	b.n	8009e58 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009e52:	bf00      	nop
 8009e54:	e000      	b.n	8009e58 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009e56:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8009e58:	3720      	adds	r7, #32
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b08a      	sub	sp, #40	; 0x28
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8009e76:	2300      	movs	r3, #0
 8009e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e80:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	0a1b      	lsrs	r3, r3, #8
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00e      	beq.n	8009eac <HAL_I2C_ER_IRQHandler+0x4e>
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	0a1b      	lsrs	r3, r3, #8
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d008      	beq.n	8009eac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	f043 0301 	orr.w	r3, r3, #1
 8009ea0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009eaa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	0a5b      	lsrs	r3, r3, #9
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00e      	beq.n	8009ed6 <HAL_I2C_ER_IRQHandler+0x78>
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	0a1b      	lsrs	r3, r3, #8
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d008      	beq.n	8009ed6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	f043 0302 	orr.w	r3, r3, #2
 8009eca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8009ed4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	0a9b      	lsrs	r3, r3, #10
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d03f      	beq.n	8009f62 <HAL_I2C_ER_IRQHandler+0x104>
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	0a1b      	lsrs	r3, r3, #8
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d039      	beq.n	8009f62 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8009eee:	7efb      	ldrb	r3, [r7, #27]
 8009ef0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f00:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f06:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009f08:	7ebb      	ldrb	r3, [r7, #26]
 8009f0a:	2b20      	cmp	r3, #32
 8009f0c:	d112      	bne.n	8009f34 <HAL_I2C_ER_IRQHandler+0xd6>
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10f      	bne.n	8009f34 <HAL_I2C_ER_IRQHandler+0xd6>
 8009f14:	7cfb      	ldrb	r3, [r7, #19]
 8009f16:	2b21      	cmp	r3, #33	; 0x21
 8009f18:	d008      	beq.n	8009f2c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009f1a:	7cfb      	ldrb	r3, [r7, #19]
 8009f1c:	2b29      	cmp	r3, #41	; 0x29
 8009f1e:	d005      	beq.n	8009f2c <HAL_I2C_ER_IRQHandler+0xce>
 8009f20:	7cfb      	ldrb	r3, [r7, #19]
 8009f22:	2b28      	cmp	r3, #40	; 0x28
 8009f24:	d106      	bne.n	8009f34 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b21      	cmp	r3, #33	; 0x21
 8009f2a:	d103      	bne.n	8009f34 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 f83d 	bl	800afac <I2C_Slave_AF>
 8009f32:	e016      	b.n	8009f62 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f3c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	f043 0304 	orr.w	r3, r3, #4
 8009f44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009f46:	7efb      	ldrb	r3, [r7, #27]
 8009f48:	2b10      	cmp	r3, #16
 8009f4a:	d002      	beq.n	8009f52 <HAL_I2C_ER_IRQHandler+0xf4>
 8009f4c:	7efb      	ldrb	r3, [r7, #27]
 8009f4e:	2b40      	cmp	r3, #64	; 0x40
 8009f50:	d107      	bne.n	8009f62 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f60:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	0adb      	lsrs	r3, r3, #11
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00e      	beq.n	8009f8c <HAL_I2C_ER_IRQHandler+0x12e>
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	0a1b      	lsrs	r3, r3, #8
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d008      	beq.n	8009f8c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	f043 0308 	orr.w	r3, r3, #8
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009f8a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d008      	beq.n	8009fa4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 f874 	bl	800b08c <I2C_ITError>
  }
}
 8009fa4:	bf00      	nop
 8009fa6:	3728      	adds	r7, #40	; 0x28
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
 800a008:	4613      	mov	r3, r2
 800a00a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a076:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a07e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d150      	bne.n	800a130 <I2C_MasterTransmit_TXE+0xc8>
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
 800a090:	2b21      	cmp	r3, #33	; 0x21
 800a092:	d14d      	bne.n	800a130 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2b08      	cmp	r3, #8
 800a098:	d01d      	beq.n	800a0d6 <I2C_MasterTransmit_TXE+0x6e>
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2b20      	cmp	r3, #32
 800a09e:	d01a      	beq.n	800a0d6 <I2C_MasterTransmit_TXE+0x6e>
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a0a6:	d016      	beq.n	800a0d6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a0b6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2211      	movs	r2, #17
 800a0bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7ff ff6c 	bl	8009fac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a0d4:	e060      	b.n	800a198 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a0e4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0f4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b40      	cmp	r3, #64	; 0x40
 800a10e:	d107      	bne.n	800a120 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff ff87 	bl	800a02c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a11e:	e03b      	b.n	800a198 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7ff ff3f 	bl	8009fac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a12e:	e033      	b.n	800a198 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	2b21      	cmp	r3, #33	; 0x21
 800a134:	d005      	beq.n	800a142 <I2C_MasterTransmit_TXE+0xda>
 800a136:	7bbb      	ldrb	r3, [r7, #14]
 800a138:	2b40      	cmp	r3, #64	; 0x40
 800a13a:	d12d      	bne.n	800a198 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	2b22      	cmp	r3, #34	; 0x22
 800a140:	d12a      	bne.n	800a198 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a146:	b29b      	uxth	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d108      	bne.n	800a15e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a15a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a15c:	e01c      	b.n	800a198 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b40      	cmp	r3, #64	; 0x40
 800a168:	d103      	bne.n	800a172 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f880 	bl	800a270 <I2C_MemoryTransmit_TXE_BTF>
}
 800a170:	e012      	b.n	800a198 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	781a      	ldrb	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	1c5a      	adds	r2, r3, #1
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	3b01      	subs	r3, #1
 800a190:	b29a      	uxth	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a196:	e7ff      	b.n	800a198 <I2C_MasterTransmit_TXE+0x130>
 800a198:	bf00      	nop
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	2b21      	cmp	r3, #33	; 0x21
 800a1b8:	d156      	bne.n	800a268 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d012      	beq.n	800a1ea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c8:	781a      	ldrb	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a1e8:	e03e      	b.n	800a268 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b08      	cmp	r3, #8
 800a1ee:	d01d      	beq.n	800a22c <I2C_MasterTransmit_BTF+0x8c>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2b20      	cmp	r3, #32
 800a1f4:	d01a      	beq.n	800a22c <I2C_MasterTransmit_BTF+0x8c>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a1fc:	d016      	beq.n	800a22c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a20c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2211      	movs	r2, #17
 800a212:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2220      	movs	r2, #32
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff fec1 	bl	8009fac <HAL_I2C_MasterTxCpltCallback>
}
 800a22a:	e01d      	b.n	800a268 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a23a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a24a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2220      	movs	r2, #32
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff fea2 	bl	8009fac <HAL_I2C_MasterTxCpltCallback>
}
 800a268:	bf00      	nop
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a27e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a284:	2b00      	cmp	r3, #0
 800a286:	d11d      	bne.n	800a2c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d10b      	bne.n	800a2a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a294:	b2da      	uxtb	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a0:	1c9a      	adds	r2, r3, #2
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800a2a6:	e06e      	b.n	800a386 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	121b      	asrs	r3, r3, #8
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a2c2:	e060      	b.n	800a386 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d10b      	bne.n	800a2e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a2e2:	e050      	b.n	800a386 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d14c      	bne.n	800a386 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	2b22      	cmp	r3, #34	; 0x22
 800a2f0:	d108      	bne.n	800a304 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a300:	601a      	str	r2, [r3, #0]
}
 800a302:	e040      	b.n	800a386 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d015      	beq.n	800a33a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
 800a310:	2b21      	cmp	r3, #33	; 0x21
 800a312:	d112      	bne.n	800a33a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a32e:	b29b      	uxth	r3, r3
 800a330:	3b01      	subs	r3, #1
 800a332:	b29a      	uxth	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a338:	e025      	b.n	800a386 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	d120      	bne.n	800a386 <I2C_MemoryTransmit_TXE_BTF+0x116>
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	2b21      	cmp	r3, #33	; 0x21
 800a348:	d11d      	bne.n	800a386 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a358:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a368:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2220      	movs	r2, #32
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff fe53 	bl	800a02c <HAL_I2C_MemTxCpltCallback>
}
 800a386:	bf00      	nop
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b084      	sub	sp, #16
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b22      	cmp	r3, #34	; 0x22
 800a3a0:	f040 80a2 	bne.w	800a4e8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d921      	bls.n	800a3f6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	b2d2      	uxtb	r2, r2
 800a3be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	f040 8082 	bne.w	800a4e8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3f2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800a3f4:	e078      	b.n	800a4e8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d074      	beq.n	800a4e8 <I2C_MasterReceive_RXNE+0x15a>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d002      	beq.n	800a40a <I2C_MasterReceive_RXNE+0x7c>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d16e      	bne.n	800a4e8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f001 fb2a 	bl	800ba64 <I2C_WaitOnSTOPRequestThroughIT>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d142      	bne.n	800a49c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a424:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a434:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	691a      	ldr	r2, [r3, #16]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	b2d2      	uxtb	r2, r2
 800a442:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a452:	b29b      	uxth	r3, r3
 800a454:	3b01      	subs	r3, #1
 800a456:	b29a      	uxth	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2220      	movs	r2, #32
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b40      	cmp	r3, #64	; 0x40
 800a46e:	d10a      	bne.n	800a486 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7fc fb36 	bl	8006af0 <HAL_I2C_MemRxCpltCallback>
}
 800a484:	e030      	b.n	800a4e8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2212      	movs	r2, #18
 800a492:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7ff fd93 	bl	8009fc0 <HAL_I2C_MasterRxCpltCallback>
}
 800a49a:	e025      	b.n	800a4e8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a4aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	691a      	ldr	r2, [r3, #16]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	b2d2      	uxtb	r2, r2
 800a4b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fdac 	bl	800a040 <HAL_I2C_ErrorCallback>
}
 800a4e8:	bf00      	nop
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a502:	b29b      	uxth	r3, r3
 800a504:	2b04      	cmp	r3, #4
 800a506:	d11b      	bne.n	800a540 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a516:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a534:	b29b      	uxth	r3, r3
 800a536:	3b01      	subs	r3, #1
 800a538:	b29a      	uxth	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a53e:	e0bd      	b.n	800a6bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a544:	b29b      	uxth	r3, r3
 800a546:	2b03      	cmp	r3, #3
 800a548:	d129      	bne.n	800a59e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685a      	ldr	r2, [r3, #4]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a558:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d00a      	beq.n	800a576 <I2C_MasterReceive_BTF+0x86>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2b02      	cmp	r3, #2
 800a564:	d007      	beq.n	800a576 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a574:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	691a      	ldr	r2, [r3, #16]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a580:	b2d2      	uxtb	r2, r2
 800a582:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a592:	b29b      	uxth	r3, r3
 800a594:	3b01      	subs	r3, #1
 800a596:	b29a      	uxth	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a59c:	e08e      	b.n	800a6bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d176      	bne.n	800a696 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d002      	beq.n	800a5b4 <I2C_MasterReceive_BTF+0xc4>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b10      	cmp	r3, #16
 800a5b2:	d108      	bne.n	800a5c6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	e019      	b.n	800a5fa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	d002      	beq.n	800a5d2 <I2C_MasterReceive_BTF+0xe2>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d108      	bne.n	800a5e4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	e00a      	b.n	800a5fa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b10      	cmp	r3, #16
 800a5e8:	d007      	beq.n	800a5fa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	691a      	ldr	r2, [r3, #16]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	b2d2      	uxtb	r2, r2
 800a606:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a616:	b29b      	uxth	r3, r3
 800a618:	3b01      	subs	r3, #1
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	691a      	ldr	r2, [r3, #16]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62a:	b2d2      	uxtb	r2, r2
 800a62c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	3b01      	subs	r3, #1
 800a640:	b29a      	uxth	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a654:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2220      	movs	r2, #32
 800a65a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a664:	b2db      	uxtb	r3, r3
 800a666:	2b40      	cmp	r3, #64	; 0x40
 800a668:	d10a      	bne.n	800a680 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f7fc fa39 	bl	8006af0 <HAL_I2C_MemRxCpltCallback>
}
 800a67e:	e01d      	b.n	800a6bc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2212      	movs	r2, #18
 800a68c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff fc96 	bl	8009fc0 <HAL_I2C_MasterRxCpltCallback>
}
 800a694:	e012      	b.n	800a6bc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	691a      	ldr	r2, [r3, #16]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	b2d2      	uxtb	r2, r2
 800a6a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a6bc:	bf00      	nop
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b40      	cmp	r3, #64	; 0x40
 800a6d6:	d117      	bne.n	800a708 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d109      	bne.n	800a6f4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a6f0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800a6f2:	e067      	b.n	800a7c4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	f043 0301 	orr.w	r3, r3, #1
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	611a      	str	r2, [r3, #16]
}
 800a706:	e05d      	b.n	800a7c4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a710:	d133      	bne.n	800a77a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b21      	cmp	r3, #33	; 0x21
 800a71c:	d109      	bne.n	800a732 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a722:	b2db      	uxtb	r3, r3
 800a724:	461a      	mov	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a72e:	611a      	str	r2, [r3, #16]
 800a730:	e008      	b.n	800a744 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a736:	b2db      	uxtb	r3, r3
 800a738:	f043 0301 	orr.w	r3, r3, #1
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d004      	beq.n	800a756 <I2C_Master_SB+0x92>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a752:	2b00      	cmp	r3, #0
 800a754:	d108      	bne.n	800a768 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d032      	beq.n	800a7c4 <I2C_Master_SB+0x100>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a764:	2b00      	cmp	r3, #0
 800a766:	d02d      	beq.n	800a7c4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a776:	605a      	str	r2, [r3, #4]
}
 800a778:	e024      	b.n	800a7c4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10e      	bne.n	800a7a0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a786:	b29b      	uxth	r3, r3
 800a788:	11db      	asrs	r3, r3, #7
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	f003 0306 	and.w	r3, r3, #6
 800a790:	b2db      	uxtb	r3, r3
 800a792:	f063 030f 	orn	r3, r3, #15
 800a796:	b2da      	uxtb	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	611a      	str	r2, [r3, #16]
}
 800a79e:	e011      	b.n	800a7c4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d10d      	bne.n	800a7c4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	11db      	asrs	r3, r3, #7
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f003 0306 	and.w	r3, r3, #6
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f063 030e 	orn	r3, r3, #14
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	611a      	str	r2, [r3, #16]
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d103      	bne.n	800a7f4 <I2C_Master_ADD10+0x24>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d011      	beq.n	800a818 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d104      	bne.n	800a808 <I2C_Master_ADD10+0x38>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a804:	2b00      	cmp	r3, #0
 800a806:	d007      	beq.n	800a818 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a816:	605a      	str	r2, [r3, #4]
    }
  }
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800a824:	b480      	push	{r7}
 800a826:	b091      	sub	sp, #68	; 0x44
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a840:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b22      	cmp	r3, #34	; 0x22
 800a84c:	f040 8169 	bne.w	800ab22 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10f      	bne.n	800a878 <I2C_Master_ADDR+0x54>
 800a858:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a85c:	2b40      	cmp	r3, #64	; 0x40
 800a85e:	d10b      	bne.n	800a878 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a860:	2300      	movs	r3, #0
 800a862:	633b      	str	r3, [r7, #48]	; 0x30
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	633b      	str	r3, [r7, #48]	; 0x30
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	633b      	str	r3, [r7, #48]	; 0x30
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	e160      	b.n	800ab3a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d11d      	bne.n	800a8bc <I2C_Master_ADDR+0x98>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a888:	d118      	bne.n	800a8bc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a88a:	2300      	movs	r3, #0
 800a88c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8ae:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	651a      	str	r2, [r3, #80]	; 0x50
 800a8ba:	e13e      	b.n	800ab3a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d113      	bne.n	800a8ee <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	695b      	ldr	r3, [r3, #20]
 800a8d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	e115      	b.n	800ab1a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	f040 808a 	bne.w	800aa0e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a900:	d137      	bne.n	800a972 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a910:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a91c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a920:	d113      	bne.n	800a94a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a930:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a932:	2300      	movs	r3, #0
 800a934:	627b      	str	r3, [r7, #36]	; 0x24
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	e0e7      	b.n	800ab1a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a94a:	2300      	movs	r3, #0
 800a94c:	623b      	str	r3, [r7, #32]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	623b      	str	r3, [r7, #32]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	699b      	ldr	r3, [r3, #24]
 800a95c:	623b      	str	r3, [r7, #32]
 800a95e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	e0d3      	b.n	800ab1a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	2b08      	cmp	r3, #8
 800a976:	d02e      	beq.n	800a9d6 <I2C_Master_ADDR+0x1b2>
 800a978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	d02b      	beq.n	800a9d6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800a97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a980:	2b12      	cmp	r3, #18
 800a982:	d102      	bne.n	800a98a <I2C_Master_ADDR+0x166>
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	2b01      	cmp	r3, #1
 800a988:	d125      	bne.n	800a9d6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d00e      	beq.n	800a9ae <I2C_Master_ADDR+0x18a>
 800a990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a992:	2b02      	cmp	r3, #2
 800a994:	d00b      	beq.n	800a9ae <I2C_Master_ADDR+0x18a>
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	2b10      	cmp	r3, #16
 800a99a:	d008      	beq.n	800a9ae <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9aa:	601a      	str	r2, [r3, #0]
 800a9ac:	e007      	b.n	800a9be <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a9bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9be:	2300      	movs	r3, #0
 800a9c0:	61fb      	str	r3, [r7, #28]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	61fb      	str	r3, [r7, #28]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	61fb      	str	r3, [r7, #28]
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	e0a1      	b.n	800ab1a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9e4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	61bb      	str	r3, [r7, #24]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	61bb      	str	r3, [r7, #24]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	61bb      	str	r3, [r7, #24]
 800a9fa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	e085      	b.n	800ab1a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d14d      	bne.n	800aab4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d016      	beq.n	800aa4c <I2C_Master_ADDR+0x228>
 800aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d013      	beq.n	800aa4c <I2C_Master_ADDR+0x228>
 800aa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa26:	2b10      	cmp	r3, #16
 800aa28:	d010      	beq.n	800aa4c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa38:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	e007      	b.n	800aa5c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aa5a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa6a:	d117      	bne.n	800aa9c <I2C_Master_ADDR+0x278>
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aa72:	d00b      	beq.n	800aa8c <I2C_Master_ADDR+0x268>
 800aa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d008      	beq.n	800aa8c <I2C_Master_ADDR+0x268>
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	2b08      	cmp	r3, #8
 800aa7e:	d005      	beq.n	800aa8c <I2C_Master_ADDR+0x268>
 800aa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa82:	2b10      	cmp	r3, #16
 800aa84:	d002      	beq.n	800aa8c <I2C_Master_ADDR+0x268>
 800aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa88:	2b20      	cmp	r3, #32
 800aa8a:	d107      	bne.n	800aa9c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aa9a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	617b      	str	r3, [r7, #20]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	617b      	str	r3, [r7, #20]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	e032      	b.n	800ab1a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aac2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aad2:	d117      	bne.n	800ab04 <I2C_Master_ADDR+0x2e0>
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aada:	d00b      	beq.n	800aaf4 <I2C_Master_ADDR+0x2d0>
 800aadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d008      	beq.n	800aaf4 <I2C_Master_ADDR+0x2d0>
 800aae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	d005      	beq.n	800aaf4 <I2C_Master_ADDR+0x2d0>
 800aae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaea:	2b10      	cmp	r3, #16
 800aaec:	d002      	beq.n	800aaf4 <I2C_Master_ADDR+0x2d0>
 800aaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf0:	2b20      	cmp	r3, #32
 800aaf2:	d107      	bne.n	800ab04 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ab02:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab04:	2300      	movs	r3, #0
 800ab06:	613b      	str	r3, [r7, #16]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	613b      	str	r3, [r7, #16]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	613b      	str	r3, [r7, #16]
 800ab18:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800ab20:	e00b      	b.n	800ab3a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab22:	2300      	movs	r3, #0
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	60fb      	str	r3, [r7, #12]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	60fb      	str	r3, [r7, #12]
 800ab36:	68fb      	ldr	r3, [r7, #12]
}
 800ab38:	e7ff      	b.n	800ab3a <I2C_Master_ADDR+0x316>
 800ab3a:	bf00      	nop
 800ab3c:	3744      	adds	r7, #68	; 0x44
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab54:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d02b      	beq.n	800abb8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	781a      	ldrb	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab70:	1c5a      	adds	r2, r3, #1
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d114      	bne.n	800abb8 <I2C_SlaveTransmit_TXE+0x72>
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
 800ab90:	2b29      	cmp	r3, #41	; 0x29
 800ab92:	d111      	bne.n	800abb8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aba2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2221      	movs	r2, #33	; 0x21
 800aba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2228      	movs	r2, #40	; 0x28
 800abae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff fa0e 	bl	8009fd4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800abb8:	bf00      	nop
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abcc:	b29b      	uxth	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d011      	beq.n	800abf6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd6:	781a      	ldrb	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abec:	b29b      	uxth	r3, r3
 800abee:	3b01      	subs	r3, #1
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800abf6:	bf00      	nop
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac10:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d02c      	beq.n	800ac76 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	691a      	ldr	r2, [r3, #16]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac26:	b2d2      	uxtb	r2, r2
 800ac28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d114      	bne.n	800ac76 <I2C_SlaveReceive_RXNE+0x74>
 800ac4c:	7bfb      	ldrb	r3, [r7, #15]
 800ac4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac50:	d111      	bne.n	800ac76 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac60:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2222      	movs	r2, #34	; 0x22
 800ac66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2228      	movs	r2, #40	; 0x28
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff f9b9 	bl	8009fe8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ac76:	bf00      	nop
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d012      	beq.n	800acb6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	691a      	ldr	r2, [r3, #16]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	b2d2      	uxtb	r2, r2
 800ac9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acac:	b29b      	uxth	r3, r3
 800acae:	3b01      	subs	r3, #1
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800acb6:	bf00      	nop
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800acdc:	2b28      	cmp	r3, #40	; 0x28
 800acde:	d127      	bne.n	800ad30 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acee:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	089b      	lsrs	r3, r3, #2
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d101      	bne.n	800ad00 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800acfc:	2301      	movs	r3, #1
 800acfe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	09db      	lsrs	r3, r3, #7
 800ad04:	f003 0301 	and.w	r3, r3, #1
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d103      	bne.n	800ad14 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	81bb      	strh	r3, [r7, #12]
 800ad12:	e002      	b.n	800ad1a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800ad22:	89ba      	ldrh	r2, [r7, #12]
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff f967 	bl	8009ffc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ad2e:	e008      	b.n	800ad42 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f06f 0202 	mvn.w	r2, #2
 800ad38:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800ad42:	bf00      	nop
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad5a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ad6a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60bb      	str	r3, [r7, #8]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	60bb      	str	r3, [r7, #8]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f042 0201 	orr.w	r2, r2, #1
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad98:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ada4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ada8:	d172      	bne.n	800ae90 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
 800adac:	2b22      	cmp	r3, #34	; 0x22
 800adae:	d002      	beq.n	800adb6 <I2C_Slave_STOPF+0x6a>
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	2b2a      	cmp	r3, #42	; 0x2a
 800adb4:	d135      	bne.n	800ae22 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adc8:	b29b      	uxth	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add2:	f043 0204 	orr.w	r2, r3, #4
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ade8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fd fd08 	bl	8008804 <HAL_DMA_GetState>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d049      	beq.n	800ae8e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfe:	4a69      	ldr	r2, [pc, #420]	; (800afa4 <I2C_Slave_STOPF+0x258>)
 800ae00:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fd fb50 	bl	80084ac <HAL_DMA_Abort_IT>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d03d      	beq.n	800ae8e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ae20:	e035      	b.n	800ae8e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d005      	beq.n	800ae46 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3e:	f043 0204 	orr.w	r2, r3, #4
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae54:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fd fcd2 	bl	8008804 <HAL_DMA_GetState>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d014      	beq.n	800ae90 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae6a:	4a4e      	ldr	r2, [pc, #312]	; (800afa4 <I2C_Slave_STOPF+0x258>)
 800ae6c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fd fb1a 	bl	80084ac <HAL_DMA_Abort_IT>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d008      	beq.n	800ae90 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ae88:	4610      	mov	r0, r2
 800ae8a:	4798      	blx	r3
 800ae8c:	e000      	b.n	800ae90 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ae8e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d03e      	beq.n	800af18 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	f003 0304 	and.w	r3, r3, #4
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	d112      	bne.n	800aece <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	691a      	ldr	r2, [r3, #16]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb2:	b2d2      	uxtb	r2, r2
 800aeb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	3b01      	subs	r3, #1
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed8:	2b40      	cmp	r3, #64	; 0x40
 800aeda:	d112      	bne.n	800af02 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	691a      	ldr	r2, [r3, #16]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee6:	b2d2      	uxtb	r2, r2
 800aee8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	3b01      	subs	r3, #1
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af06:	b29b      	uxth	r3, r3
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d005      	beq.n	800af18 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af10:	f043 0204 	orr.w	r2, r3, #4
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d003      	beq.n	800af28 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f8b3 	bl	800b08c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800af26:	e039      	b.n	800af9c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800af28:	7bfb      	ldrb	r3, [r7, #15]
 800af2a:	2b2a      	cmp	r3, #42	; 0x2a
 800af2c:	d109      	bne.n	800af42 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2228      	movs	r2, #40	; 0x28
 800af38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff f853 	bl	8009fe8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b28      	cmp	r3, #40	; 0x28
 800af4c:	d111      	bne.n	800af72 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a15      	ldr	r2, [pc, #84]	; (800afa8 <I2C_Slave_STOPF+0x25c>)
 800af52:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2220      	movs	r2, #32
 800af5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff f854 	bl	800a018 <HAL_I2C_ListenCpltCallback>
}
 800af70:	e014      	b.n	800af9c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af76:	2b22      	cmp	r3, #34	; 0x22
 800af78:	d002      	beq.n	800af80 <I2C_Slave_STOPF+0x234>
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
 800af7c:	2b22      	cmp	r3, #34	; 0x22
 800af7e:	d10d      	bne.n	800af9c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2220      	movs	r2, #32
 800af8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff f826 	bl	8009fe8 <HAL_I2C_SlaveRxCpltCallback>
}
 800af9c:	bf00      	nop
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	0800b6e5 	.word	0x0800b6e5
 800afa8:	ffff0000 	.word	0xffff0000

0800afac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b08      	cmp	r3, #8
 800afc6:	d002      	beq.n	800afce <I2C_Slave_AF+0x22>
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b20      	cmp	r3, #32
 800afcc:	d129      	bne.n	800b022 <I2C_Slave_AF+0x76>
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	2b28      	cmp	r3, #40	; 0x28
 800afd2:	d126      	bne.n	800b022 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a2c      	ldr	r2, [pc, #176]	; (800b088 <I2C_Slave_AF+0xdc>)
 800afd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800afe8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aff2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b002:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2220      	movs	r2, #32
 800b00e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7fe fffc 	bl	800a018 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b020:	e02e      	b.n	800b080 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	2b21      	cmp	r3, #33	; 0x21
 800b026:	d126      	bne.n	800b076 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a17      	ldr	r2, [pc, #92]	; (800b088 <I2C_Slave_AF+0xdc>)
 800b02c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2221      	movs	r2, #33	; 0x21
 800b032:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2220      	movs	r2, #32
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b052:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b05c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b06c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7fe ffb0 	bl	8009fd4 <HAL_I2C_SlaveTxCpltCallback>
}
 800b074:	e004      	b.n	800b080 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b07e:	615a      	str	r2, [r3, #20]
}
 800b080:	bf00      	nop
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	ffff0000 	.word	0xffff0000

0800b08c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b09a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	2b10      	cmp	r3, #16
 800b0a8:	d002      	beq.n	800b0b0 <I2C_ITError+0x24>
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	2b40      	cmp	r3, #64	; 0x40
 800b0ae:	d10a      	bne.n	800b0c6 <I2C_ITError+0x3a>
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	2b22      	cmp	r3, #34	; 0x22
 800b0b4:	d107      	bne.n	800b0c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b0cc:	2b28      	cmp	r3, #40	; 0x28
 800b0ce:	d107      	bne.n	800b0e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2228      	movs	r2, #40	; 0x28
 800b0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b0de:	e015      	b.n	800b10c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0ee:	d00a      	beq.n	800b106 <I2C_ITError+0x7a>
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	2b60      	cmp	r3, #96	; 0x60
 800b0f4:	d007      	beq.n	800b106 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2220      	movs	r2, #32
 800b0fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b11a:	d162      	bne.n	800b1e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b12a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b01      	cmp	r3, #1
 800b138:	d020      	beq.n	800b17c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13e:	4a6a      	ldr	r2, [pc, #424]	; (800b2e8 <I2C_ITError+0x25c>)
 800b140:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b146:	4618      	mov	r0, r3
 800b148:	f7fd f9b0 	bl	80084ac <HAL_DMA_Abort_IT>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 8089 	beq.w	800b266 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f022 0201 	bic.w	r2, r2, #1
 800b162:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2220      	movs	r2, #32
 800b168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b176:	4610      	mov	r0, r2
 800b178:	4798      	blx	r3
 800b17a:	e074      	b.n	800b266 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b180:	4a59      	ldr	r2, [pc, #356]	; (800b2e8 <I2C_ITError+0x25c>)
 800b182:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fd f98f 	bl	80084ac <HAL_DMA_Abort_IT>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d068      	beq.n	800b266 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19e:	2b40      	cmp	r3, #64	; 0x40
 800b1a0:	d10b      	bne.n	800b1ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	691a      	ldr	r2, [r3, #16]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	b2d2      	uxtb	r2, r2
 800b1ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f022 0201 	bic.w	r2, r2, #1
 800b1c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2220      	movs	r2, #32
 800b1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b1dc:	4610      	mov	r0, r2
 800b1de:	4798      	blx	r3
 800b1e0:	e041      	b.n	800b266 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b60      	cmp	r3, #96	; 0x60
 800b1ec:	d125      	bne.n	800b23a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	695b      	ldr	r3, [r3, #20]
 800b202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b206:	2b40      	cmp	r3, #64	; 0x40
 800b208:	d10b      	bne.n	800b222 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	691a      	ldr	r2, [r3, #16]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b214:	b2d2      	uxtb	r2, r2
 800b216:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f022 0201 	bic.w	r2, r2, #1
 800b230:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7fe ff0e 	bl	800a054 <HAL_I2C_AbortCpltCallback>
 800b238:	e015      	b.n	800b266 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b244:	2b40      	cmp	r3, #64	; 0x40
 800b246:	d10b      	bne.n	800b260 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	691a      	ldr	r2, [r3, #16]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b252:	b2d2      	uxtb	r2, r2
 800b254:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7fe feed 	bl	800a040 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	f003 0301 	and.w	r3, r3, #1
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10e      	bne.n	800b294 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d109      	bne.n	800b294 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b286:	2b00      	cmp	r3, #0
 800b288:	d104      	bne.n	800b294 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b290:	2b00      	cmp	r3, #0
 800b292:	d007      	beq.n	800b2a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b2a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d113      	bne.n	800b2e0 <I2C_ITError+0x254>
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	2b28      	cmp	r3, #40	; 0x28
 800b2bc:	d110      	bne.n	800b2e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a0a      	ldr	r2, [pc, #40]	; (800b2ec <I2C_ITError+0x260>)
 800b2c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7fe fe9c 	bl	800a018 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b2e0:	bf00      	nop
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	0800b6e5 	.word	0x0800b6e5
 800b2ec:	ffff0000 	.word	0xffff0000

0800b2f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b088      	sub	sp, #32
 800b2f4:	af02      	add	r7, sp, #8
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	4611      	mov	r1, r2
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	4603      	mov	r3, r0
 800b300:	817b      	strh	r3, [r7, #10]
 800b302:	460b      	mov	r3, r1
 800b304:	813b      	strh	r3, [r7, #8]
 800b306:	4613      	mov	r3, r2
 800b308:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b318:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b328:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	2200      	movs	r2, #0
 800b332:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f000 fa7c 	bl	800b834 <I2C_WaitOnFlagUntilTimeout>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00d      	beq.n	800b35e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b34c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b350:	d103      	bne.n	800b35a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b358:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e0aa      	b.n	800b4b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b35e:	897b      	ldrh	r3, [r7, #10]
 800b360:	b2db      	uxtb	r3, r3
 800b362:	461a      	mov	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b36c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b370:	6a3a      	ldr	r2, [r7, #32]
 800b372:	4952      	ldr	r1, [pc, #328]	; (800b4bc <I2C_RequestMemoryRead+0x1cc>)
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 fab4 	bl	800b8e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	e097      	b.n	800b4b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b384:	2300      	movs	r3, #0
 800b386:	617b      	str	r3, [r7, #20]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	617b      	str	r3, [r7, #20]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b39c:	6a39      	ldr	r1, [r7, #32]
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f000 fb1e 	bl	800b9e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00d      	beq.n	800b3c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ae:	2b04      	cmp	r3, #4
 800b3b0:	d107      	bne.n	800b3c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e076      	b.n	800b4b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b3c6:	88fb      	ldrh	r3, [r7, #6]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d105      	bne.n	800b3d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b3cc:	893b      	ldrh	r3, [r7, #8]
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	611a      	str	r2, [r3, #16]
 800b3d6:	e021      	b.n	800b41c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b3d8:	893b      	ldrh	r3, [r7, #8]
 800b3da:	0a1b      	lsrs	r3, r3, #8
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e8:	6a39      	ldr	r1, [r7, #32]
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 faf8 	bl	800b9e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00d      	beq.n	800b412 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	2b04      	cmp	r3, #4
 800b3fc:	d107      	bne.n	800b40e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b40c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	e050      	b.n	800b4b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b412:	893b      	ldrh	r3, [r7, #8]
 800b414:	b2da      	uxtb	r2, r3
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b41e:	6a39      	ldr	r1, [r7, #32]
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 fadd 	bl	800b9e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00d      	beq.n	800b448 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b430:	2b04      	cmp	r3, #4
 800b432:	d107      	bne.n	800b444 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b442:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e035      	b.n	800b4b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b456:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	2200      	movs	r2, #0
 800b460:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f000 f9e5 	bl	800b834 <I2C_WaitOnFlagUntilTimeout>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00d      	beq.n	800b48c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b47e:	d103      	bne.n	800b488 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b488:	2303      	movs	r3, #3
 800b48a:	e013      	b.n	800b4b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b48c:	897b      	ldrh	r3, [r7, #10]
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	f043 0301 	orr.w	r3, r3, #1
 800b494:	b2da      	uxtb	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	6a3a      	ldr	r2, [r7, #32]
 800b4a0:	4906      	ldr	r1, [pc, #24]	; (800b4bc <I2C_RequestMemoryRead+0x1cc>)
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f000 fa1d 	bl	800b8e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d001      	beq.n	800b4b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e000      	b.n	800b4b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	00010002 	.word	0x00010002

0800b4c0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4d4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4dc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b4f2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b500:	2200      	movs	r2, #0
 800b502:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b510:	2200      	movs	r2, #0
 800b512:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800b514:	7cfb      	ldrb	r3, [r7, #19]
 800b516:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800b51a:	2b21      	cmp	r3, #33	; 0x21
 800b51c:	d007      	beq.n	800b52e <I2C_DMAXferCplt+0x6e>
 800b51e:	7cfb      	ldrb	r3, [r7, #19]
 800b520:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800b524:	2b22      	cmp	r3, #34	; 0x22
 800b526:	d131      	bne.n	800b58c <I2C_DMAXferCplt+0xcc>
 800b528:	7cbb      	ldrb	r3, [r7, #18]
 800b52a:	2b20      	cmp	r3, #32
 800b52c:	d12e      	bne.n	800b58c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b53c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	2200      	movs	r2, #0
 800b542:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b544:	7cfb      	ldrb	r3, [r7, #19]
 800b546:	2b29      	cmp	r3, #41	; 0x29
 800b548:	d10a      	bne.n	800b560 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2221      	movs	r2, #33	; 0x21
 800b54e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2228      	movs	r2, #40	; 0x28
 800b554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b558:	6978      	ldr	r0, [r7, #20]
 800b55a:	f7fe fd3b 	bl	8009fd4 <HAL_I2C_SlaveTxCpltCallback>
 800b55e:	e00c      	b.n	800b57a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b560:	7cfb      	ldrb	r3, [r7, #19]
 800b562:	2b2a      	cmp	r3, #42	; 0x2a
 800b564:	d109      	bne.n	800b57a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2222      	movs	r2, #34	; 0x22
 800b56a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	2228      	movs	r2, #40	; 0x28
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b574:	6978      	ldr	r0, [r7, #20]
 800b576:	f7fe fd37 	bl	8009fe8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685a      	ldr	r2, [r3, #4]
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b588:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800b58a:	e06a      	b.n	800b662 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b00      	cmp	r3, #0
 800b596:	d064      	beq.n	800b662 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d107      	bne.n	800b5b2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5b0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b5c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b5c8:	d009      	beq.n	800b5de <I2C_DMAXferCplt+0x11e>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2b08      	cmp	r3, #8
 800b5ce:	d006      	beq.n	800b5de <I2C_DMAXferCplt+0x11e>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b5d6:	d002      	beq.n	800b5de <I2C_DMAXferCplt+0x11e>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2b20      	cmp	r3, #32
 800b5dc:	d107      	bne.n	800b5ee <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5ec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	685a      	ldr	r2, [r3, #4]
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b5fc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b60c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2200      	movs	r2, #0
 800b612:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d003      	beq.n	800b624 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800b61c:	6978      	ldr	r0, [r7, #20]
 800b61e:	f7fe fd0f 	bl	800a040 <HAL_I2C_ErrorCallback>
}
 800b622:	e01e      	b.n	800b662 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	2220      	movs	r2, #32
 800b628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b40      	cmp	r3, #64	; 0x40
 800b636:	d10a      	bne.n	800b64e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	2200      	movs	r2, #0
 800b644:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800b646:	6978      	ldr	r0, [r7, #20]
 800b648:	f7fb fa52 	bl	8006af0 <HAL_I2C_MemRxCpltCallback>
}
 800b64c:	e009      	b.n	800b662 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2212      	movs	r2, #18
 800b65a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800b65c:	6978      	ldr	r0, [r7, #20]
 800b65e:	f7fe fcaf 	bl	8009fc0 <HAL_I2C_MasterRxCpltCallback>
}
 800b662:	bf00      	nop
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b084      	sub	sp, #16
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b676:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b684:	2200      	movs	r2, #0
 800b686:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b694:	2200      	movs	r2, #0
 800b696:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7fd f8c1 	bl	8008820 <HAL_DMA_GetError>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d01b      	beq.n	800b6dc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6b2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2220      	movs	r2, #32
 800b6be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ce:	f043 0210 	orr.w	r2, r3, #16
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f7fe fcb2 	bl	800a040 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b6dc:	bf00      	nop
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b6fe:	4b4b      	ldr	r3, [pc, #300]	; (800b82c <I2C_DMAAbort+0x148>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	08db      	lsrs	r3, r3, #3
 800b704:	4a4a      	ldr	r2, [pc, #296]	; (800b830 <I2C_DMAAbort+0x14c>)
 800b706:	fba2 2303 	umull	r2, r3, r2, r3
 800b70a:	0a1a      	lsrs	r2, r3, #8
 800b70c:	4613      	mov	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4413      	add	r3, r2
 800b712:	00da      	lsls	r2, r3, #3
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d106      	bne.n	800b72c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b722:	f043 0220 	orr.w	r2, r3, #32
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800b72a:	e00a      	b.n	800b742 <I2C_DMAAbort+0x5e>
    }
    count--;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	3b01      	subs	r3, #1
 800b730:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b73c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b740:	d0ea      	beq.n	800b718 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b746:	2b00      	cmp	r3, #0
 800b748:	d003      	beq.n	800b752 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b74e:	2200      	movs	r2, #0
 800b750:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75e:	2200      	movs	r2, #0
 800b760:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b770:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2200      	movs	r2, #0
 800b776:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d003      	beq.n	800b788 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b784:	2200      	movs	r2, #0
 800b786:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d003      	beq.n	800b798 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b794:	2200      	movs	r2, #0
 800b796:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f022 0201 	bic.w	r2, r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	2b60      	cmp	r3, #96	; 0x60
 800b7b2:	d10e      	bne.n	800b7d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	2220      	movs	r2, #32
 800b7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b7ca:	6978      	ldr	r0, [r7, #20]
 800b7cc:	f7fe fc42 	bl	800a054 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b7d0:	e027      	b.n	800b822 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b7d2:	7cfb      	ldrb	r3, [r7, #19]
 800b7d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b7d8:	2b28      	cmp	r3, #40	; 0x28
 800b7da:	d117      	bne.n	800b80c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f042 0201 	orr.w	r2, r2, #1
 800b7ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	2200      	movs	r2, #0
 800b800:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2228      	movs	r2, #40	; 0x28
 800b806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b80a:	e007      	b.n	800b81c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	2220      	movs	r2, #32
 800b810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b81c:	6978      	ldr	r0, [r7, #20]
 800b81e:	f7fe fc0f 	bl	800a040 <HAL_I2C_ErrorCallback>
}
 800b822:	bf00      	nop
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20001a84 	.word	0x20001a84
 800b830:	14f8b589 	.word	0x14f8b589

0800b834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	603b      	str	r3, [r7, #0]
 800b840:	4613      	mov	r3, r2
 800b842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b844:	e025      	b.n	800b892 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84c:	d021      	beq.n	800b892 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b84e:	f7fb fff3 	bl	8007838 <HAL_GetTick>
 800b852:	4602      	mov	r2, r0
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	683a      	ldr	r2, [r7, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d302      	bcc.n	800b864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d116      	bne.n	800b892 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2220      	movs	r2, #32
 800b86e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87e:	f043 0220 	orr.w	r2, r3, #32
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	e023      	b.n	800b8da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	0c1b      	lsrs	r3, r3, #16
 800b896:	b2db      	uxtb	r3, r3
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d10d      	bne.n	800b8b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	43da      	mvns	r2, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	bf0c      	ite	eq
 800b8ae:	2301      	moveq	r3, #1
 800b8b0:	2300      	movne	r3, #0
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	e00c      	b.n	800b8d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	43da      	mvns	r2, r3
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	bf0c      	ite	eq
 800b8ca:	2301      	moveq	r3, #1
 800b8cc:	2300      	movne	r3, #0
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d0b6      	beq.n	800b846 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	60f8      	str	r0, [r7, #12]
 800b8ea:	60b9      	str	r1, [r7, #8]
 800b8ec:	607a      	str	r2, [r7, #4]
 800b8ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b8f0:	e051      	b.n	800b996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b900:	d123      	bne.n	800b94a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b910:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b91a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2220      	movs	r2, #32
 800b926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b936:	f043 0204 	orr.w	r2, r3, #4
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e046      	b.n	800b9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b950:	d021      	beq.n	800b996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b952:	f7fb ff71 	bl	8007838 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d302      	bcc.n	800b968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d116      	bne.n	800b996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2200      	movs	r2, #0
 800b96c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2220      	movs	r2, #32
 800b972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b982:	f043 0220 	orr.w	r2, r3, #32
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e020      	b.n	800b9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	0c1b      	lsrs	r3, r3, #16
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d10c      	bne.n	800b9ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	43da      	mvns	r2, r3
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	bf14      	ite	ne
 800b9b2:	2301      	movne	r3, #1
 800b9b4:	2300      	moveq	r3, #0
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	e00b      	b.n	800b9d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	43da      	mvns	r2, r3
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	bf14      	ite	ne
 800b9cc:	2301      	movne	r3, #1
 800b9ce:	2300      	moveq	r3, #0
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d18d      	bne.n	800b8f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b9ec:	e02d      	b.n	800ba4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 f8c0 	bl	800bb74 <I2C_IsAcknowledgeFailed>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e02d      	b.n	800ba5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba04:	d021      	beq.n	800ba4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba06:	f7fb ff17 	bl	8007838 <HAL_GetTick>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d302      	bcc.n	800ba1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d116      	bne.n	800ba4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2220      	movs	r2, #32
 800ba26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba36:	f043 0220 	orr.w	r2, r3, #32
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e007      	b.n	800ba5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	695b      	ldr	r3, [r3, #20]
 800ba50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba54:	2b80      	cmp	r3, #128	; 0x80
 800ba56:	d1ca      	bne.n	800b9ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ba70:	4b13      	ldr	r3, [pc, #76]	; (800bac0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	08db      	lsrs	r3, r3, #3
 800ba76:	4a13      	ldr	r2, [pc, #76]	; (800bac4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800ba78:	fba2 2303 	umull	r2, r3, r2, r3
 800ba7c:	0a1a      	lsrs	r2, r3, #8
 800ba7e:	4613      	mov	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d107      	bne.n	800baa2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba96:	f043 0220 	orr.w	r2, r3, #32
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e008      	b.n	800bab4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800baac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bab0:	d0e9      	beq.n	800ba86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr
 800bac0:	20001a84 	.word	0x20001a84
 800bac4:	14f8b589 	.word	0x14f8b589

0800bac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bad4:	e042      	b.n	800bb5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	f003 0310 	and.w	r3, r3, #16
 800bae0:	2b10      	cmp	r3, #16
 800bae2:	d119      	bne.n	800bb18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f06f 0210 	mvn.w	r2, #16
 800baec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2220      	movs	r2, #32
 800baf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e029      	b.n	800bb6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb18:	f7fb fe8e 	bl	8007838 <HAL_GetTick>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d302      	bcc.n	800bb2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d116      	bne.n	800bb5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2220      	movs	r2, #32
 800bb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb48:	f043 0220 	orr.w	r2, r3, #32
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e007      	b.n	800bb6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb66:	2b40      	cmp	r3, #64	; 0x40
 800bb68:	d1b5      	bne.n	800bad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	695b      	ldr	r3, [r3, #20]
 800bb82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb8a:	d11b      	bne.n	800bbc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb0:	f043 0204 	orr.w	r2, r3, #4
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e000      	b.n	800bbc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b083      	sub	sp, #12
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbde:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800bbe2:	d103      	bne.n	800bbec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800bbea:	e007      	b.n	800bbfc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800bbf4:	d102      	bne.n	800bbfc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2208      	movs	r2, #8
 800bbfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e25b      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d075      	beq.n	800bd12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bc26:	4ba3      	ldr	r3, [pc, #652]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	f003 030c 	and.w	r3, r3, #12
 800bc2e:	2b04      	cmp	r3, #4
 800bc30:	d00c      	beq.n	800bc4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bc32:	4ba0      	ldr	r3, [pc, #640]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bc3a:	2b08      	cmp	r3, #8
 800bc3c:	d112      	bne.n	800bc64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bc3e:	4b9d      	ldr	r3, [pc, #628]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc4a:	d10b      	bne.n	800bc64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc4c:	4b99      	ldr	r3, [pc, #612]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d05b      	beq.n	800bd10 <HAL_RCC_OscConfig+0x108>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d157      	bne.n	800bd10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e236      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc6c:	d106      	bne.n	800bc7c <HAL_RCC_OscConfig+0x74>
 800bc6e:	4b91      	ldr	r3, [pc, #580]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a90      	ldr	r2, [pc, #576]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bc74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc78:	6013      	str	r3, [r2, #0]
 800bc7a:	e01d      	b.n	800bcb8 <HAL_RCC_OscConfig+0xb0>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc84:	d10c      	bne.n	800bca0 <HAL_RCC_OscConfig+0x98>
 800bc86:	4b8b      	ldr	r3, [pc, #556]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a8a      	ldr	r2, [pc, #552]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bc8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	4b88      	ldr	r3, [pc, #544]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a87      	ldr	r2, [pc, #540]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bc98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc9c:	6013      	str	r3, [r2, #0]
 800bc9e:	e00b      	b.n	800bcb8 <HAL_RCC_OscConfig+0xb0>
 800bca0:	4b84      	ldr	r3, [pc, #528]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a83      	ldr	r2, [pc, #524]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcaa:	6013      	str	r3, [r2, #0]
 800bcac:	4b81      	ldr	r3, [pc, #516]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a80      	ldr	r2, [pc, #512]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bcb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d013      	beq.n	800bce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bcc0:	f7fb fdba 	bl	8007838 <HAL_GetTick>
 800bcc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcc6:	e008      	b.n	800bcda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bcc8:	f7fb fdb6 	bl	8007838 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	2b64      	cmp	r3, #100	; 0x64
 800bcd4:	d901      	bls.n	800bcda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e1fb      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcda:	4b76      	ldr	r3, [pc, #472]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0f0      	beq.n	800bcc8 <HAL_RCC_OscConfig+0xc0>
 800bce6:	e014      	b.n	800bd12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bce8:	f7fb fda6 	bl	8007838 <HAL_GetTick>
 800bcec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bcee:	e008      	b.n	800bd02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bcf0:	f7fb fda2 	bl	8007838 <HAL_GetTick>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	2b64      	cmp	r3, #100	; 0x64
 800bcfc:	d901      	bls.n	800bd02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e1e7      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd02:	4b6c      	ldr	r3, [pc, #432]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1f0      	bne.n	800bcf0 <HAL_RCC_OscConfig+0xe8>
 800bd0e:	e000      	b.n	800bd12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f003 0302 	and.w	r3, r3, #2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d063      	beq.n	800bde6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bd1e:	4b65      	ldr	r3, [pc, #404]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f003 030c 	and.w	r3, r3, #12
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00b      	beq.n	800bd42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bd2a:	4b62      	ldr	r3, [pc, #392]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bd32:	2b08      	cmp	r3, #8
 800bd34:	d11c      	bne.n	800bd70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bd36:	4b5f      	ldr	r3, [pc, #380]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d116      	bne.n	800bd70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd42:	4b5c      	ldr	r3, [pc, #368]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0302 	and.w	r3, r3, #2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d005      	beq.n	800bd5a <HAL_RCC_OscConfig+0x152>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d001      	beq.n	800bd5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e1bb      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd5a:	4b56      	ldr	r3, [pc, #344]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	4952      	ldr	r1, [pc, #328]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd6e:	e03a      	b.n	800bde6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d020      	beq.n	800bdba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bd78:	4b4f      	ldr	r3, [pc, #316]	; (800beb8 <HAL_RCC_OscConfig+0x2b0>)
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd7e:	f7fb fd5b 	bl	8007838 <HAL_GetTick>
 800bd82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd84:	e008      	b.n	800bd98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd86:	f7fb fd57 	bl	8007838 <HAL_GetTick>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d901      	bls.n	800bd98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bd94:	2303      	movs	r3, #3
 800bd96:	e19c      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd98:	4b46      	ldr	r3, [pc, #280]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d0f0      	beq.n	800bd86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bda4:	4b43      	ldr	r3, [pc, #268]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	00db      	lsls	r3, r3, #3
 800bdb2:	4940      	ldr	r1, [pc, #256]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	600b      	str	r3, [r1, #0]
 800bdb8:	e015      	b.n	800bde6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bdba:	4b3f      	ldr	r3, [pc, #252]	; (800beb8 <HAL_RCC_OscConfig+0x2b0>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdc0:	f7fb fd3a 	bl	8007838 <HAL_GetTick>
 800bdc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bdc6:	e008      	b.n	800bdda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bdc8:	f7fb fd36 	bl	8007838 <HAL_GetTick>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d901      	bls.n	800bdda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e17b      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bdda:	4b36      	ldr	r3, [pc, #216]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0302 	and.w	r3, r3, #2
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1f0      	bne.n	800bdc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0308 	and.w	r3, r3, #8
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d030      	beq.n	800be54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d016      	beq.n	800be28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bdfa:	4b30      	ldr	r3, [pc, #192]	; (800bebc <HAL_RCC_OscConfig+0x2b4>)
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be00:	f7fb fd1a 	bl	8007838 <HAL_GetTick>
 800be04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be06:	e008      	b.n	800be1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800be08:	f7fb fd16 	bl	8007838 <HAL_GetTick>
 800be0c:	4602      	mov	r2, r0
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	2b02      	cmp	r3, #2
 800be14:	d901      	bls.n	800be1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800be16:	2303      	movs	r3, #3
 800be18:	e15b      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be1a:	4b26      	ldr	r3, [pc, #152]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800be1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be1e:	f003 0302 	and.w	r3, r3, #2
 800be22:	2b00      	cmp	r3, #0
 800be24:	d0f0      	beq.n	800be08 <HAL_RCC_OscConfig+0x200>
 800be26:	e015      	b.n	800be54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be28:	4b24      	ldr	r3, [pc, #144]	; (800bebc <HAL_RCC_OscConfig+0x2b4>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be2e:	f7fb fd03 	bl	8007838 <HAL_GetTick>
 800be32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be34:	e008      	b.n	800be48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800be36:	f7fb fcff 	bl	8007838 <HAL_GetTick>
 800be3a:	4602      	mov	r2, r0
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	2b02      	cmp	r3, #2
 800be42:	d901      	bls.n	800be48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800be44:	2303      	movs	r3, #3
 800be46:	e144      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be48:	4b1a      	ldr	r3, [pc, #104]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800be4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be4c:	f003 0302 	and.w	r3, r3, #2
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1f0      	bne.n	800be36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 80a0 	beq.w	800bfa2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be62:	2300      	movs	r3, #0
 800be64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800be66:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800be68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10f      	bne.n	800be92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800be72:	2300      	movs	r3, #0
 800be74:	60bb      	str	r3, [r7, #8]
 800be76:	4b0f      	ldr	r3, [pc, #60]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800be78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7a:	4a0e      	ldr	r2, [pc, #56]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800be7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be80:	6413      	str	r3, [r2, #64]	; 0x40
 800be82:	4b0c      	ldr	r3, [pc, #48]	; (800beb4 <HAL_RCC_OscConfig+0x2ac>)
 800be84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be8a:	60bb      	str	r3, [r7, #8]
 800be8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be8e:	2301      	movs	r3, #1
 800be90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be92:	4b0b      	ldr	r3, [pc, #44]	; (800bec0 <HAL_RCC_OscConfig+0x2b8>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d121      	bne.n	800bee2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800be9e:	4b08      	ldr	r3, [pc, #32]	; (800bec0 <HAL_RCC_OscConfig+0x2b8>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a07      	ldr	r2, [pc, #28]	; (800bec0 <HAL_RCC_OscConfig+0x2b8>)
 800bea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800beaa:	f7fb fcc5 	bl	8007838 <HAL_GetTick>
 800beae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800beb0:	e011      	b.n	800bed6 <HAL_RCC_OscConfig+0x2ce>
 800beb2:	bf00      	nop
 800beb4:	40023800 	.word	0x40023800
 800beb8:	42470000 	.word	0x42470000
 800bebc:	42470e80 	.word	0x42470e80
 800bec0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bec4:	f7fb fcb8 	bl	8007838 <HAL_GetTick>
 800bec8:	4602      	mov	r2, r0
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d901      	bls.n	800bed6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800bed2:	2303      	movs	r3, #3
 800bed4:	e0fd      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bed6:	4b81      	ldr	r3, [pc, #516]	; (800c0dc <HAL_RCC_OscConfig+0x4d4>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d0f0      	beq.n	800bec4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d106      	bne.n	800bef8 <HAL_RCC_OscConfig+0x2f0>
 800beea:	4b7d      	ldr	r3, [pc, #500]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800beec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beee:	4a7c      	ldr	r2, [pc, #496]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bef0:	f043 0301 	orr.w	r3, r3, #1
 800bef4:	6713      	str	r3, [r2, #112]	; 0x70
 800bef6:	e01c      	b.n	800bf32 <HAL_RCC_OscConfig+0x32a>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	2b05      	cmp	r3, #5
 800befe:	d10c      	bne.n	800bf1a <HAL_RCC_OscConfig+0x312>
 800bf00:	4b77      	ldr	r3, [pc, #476]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf04:	4a76      	ldr	r2, [pc, #472]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf06:	f043 0304 	orr.w	r3, r3, #4
 800bf0a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf0c:	4b74      	ldr	r3, [pc, #464]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf10:	4a73      	ldr	r2, [pc, #460]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf12:	f043 0301 	orr.w	r3, r3, #1
 800bf16:	6713      	str	r3, [r2, #112]	; 0x70
 800bf18:	e00b      	b.n	800bf32 <HAL_RCC_OscConfig+0x32a>
 800bf1a:	4b71      	ldr	r3, [pc, #452]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf1e:	4a70      	ldr	r2, [pc, #448]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf20:	f023 0301 	bic.w	r3, r3, #1
 800bf24:	6713      	str	r3, [r2, #112]	; 0x70
 800bf26:	4b6e      	ldr	r3, [pc, #440]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf2a:	4a6d      	ldr	r2, [pc, #436]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf2c:	f023 0304 	bic.w	r3, r3, #4
 800bf30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d015      	beq.n	800bf66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf3a:	f7fb fc7d 	bl	8007838 <HAL_GetTick>
 800bf3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf40:	e00a      	b.n	800bf58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf42:	f7fb fc79 	bl	8007838 <HAL_GetTick>
 800bf46:	4602      	mov	r2, r0
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d901      	bls.n	800bf58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800bf54:	2303      	movs	r3, #3
 800bf56:	e0bc      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf58:	4b61      	ldr	r3, [pc, #388]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf5c:	f003 0302 	and.w	r3, r3, #2
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d0ee      	beq.n	800bf42 <HAL_RCC_OscConfig+0x33a>
 800bf64:	e014      	b.n	800bf90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf66:	f7fb fc67 	bl	8007838 <HAL_GetTick>
 800bf6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf6c:	e00a      	b.n	800bf84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf6e:	f7fb fc63 	bl	8007838 <HAL_GetTick>
 800bf72:	4602      	mov	r2, r0
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d901      	bls.n	800bf84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800bf80:	2303      	movs	r3, #3
 800bf82:	e0a6      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf84:	4b56      	ldr	r3, [pc, #344]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf88:	f003 0302 	and.w	r3, r3, #2
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1ee      	bne.n	800bf6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bf90:	7dfb      	ldrb	r3, [r7, #23]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d105      	bne.n	800bfa2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf96:	4b52      	ldr	r3, [pc, #328]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9a:	4a51      	ldr	r2, [pc, #324]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bf9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 8092 	beq.w	800c0d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bfac:	4b4c      	ldr	r3, [pc, #304]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	f003 030c 	and.w	r3, r3, #12
 800bfb4:	2b08      	cmp	r3, #8
 800bfb6:	d05c      	beq.n	800c072 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d141      	bne.n	800c044 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfc0:	4b48      	ldr	r3, [pc, #288]	; (800c0e4 <HAL_RCC_OscConfig+0x4dc>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfc6:	f7fb fc37 	bl	8007838 <HAL_GetTick>
 800bfca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfcc:	e008      	b.n	800bfe0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfce:	f7fb fc33 	bl	8007838 <HAL_GetTick>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	d901      	bls.n	800bfe0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e078      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfe0:	4b3f      	ldr	r3, [pc, #252]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1f0      	bne.n	800bfce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	69da      	ldr	r2, [r3, #28]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a1b      	ldr	r3, [r3, #32]
 800bff4:	431a      	orrs	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffa:	019b      	lsls	r3, r3, #6
 800bffc:	431a      	orrs	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c002:	085b      	lsrs	r3, r3, #1
 800c004:	3b01      	subs	r3, #1
 800c006:	041b      	lsls	r3, r3, #16
 800c008:	431a      	orrs	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00e:	061b      	lsls	r3, r3, #24
 800c010:	4933      	ldr	r1, [pc, #204]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800c012:	4313      	orrs	r3, r2
 800c014:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c016:	4b33      	ldr	r3, [pc, #204]	; (800c0e4 <HAL_RCC_OscConfig+0x4dc>)
 800c018:	2201      	movs	r2, #1
 800c01a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c01c:	f7fb fc0c 	bl	8007838 <HAL_GetTick>
 800c020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c022:	e008      	b.n	800c036 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c024:	f7fb fc08 	bl	8007838 <HAL_GetTick>
 800c028:	4602      	mov	r2, r0
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d901      	bls.n	800c036 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c032:	2303      	movs	r3, #3
 800c034:	e04d      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c036:	4b2a      	ldr	r3, [pc, #168]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d0f0      	beq.n	800c024 <HAL_RCC_OscConfig+0x41c>
 800c042:	e045      	b.n	800c0d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c044:	4b27      	ldr	r3, [pc, #156]	; (800c0e4 <HAL_RCC_OscConfig+0x4dc>)
 800c046:	2200      	movs	r2, #0
 800c048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c04a:	f7fb fbf5 	bl	8007838 <HAL_GetTick>
 800c04e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c050:	e008      	b.n	800c064 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c052:	f7fb fbf1 	bl	8007838 <HAL_GetTick>
 800c056:	4602      	mov	r2, r0
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	1ad3      	subs	r3, r2, r3
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d901      	bls.n	800c064 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c060:	2303      	movs	r3, #3
 800c062:	e036      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c064:	4b1e      	ldr	r3, [pc, #120]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1f0      	bne.n	800c052 <HAL_RCC_OscConfig+0x44a>
 800c070:	e02e      	b.n	800c0d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	699b      	ldr	r3, [r3, #24]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d101      	bne.n	800c07e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e029      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c07e:	4b18      	ldr	r3, [pc, #96]	; (800c0e0 <HAL_RCC_OscConfig+0x4d8>)
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d11c      	bne.n	800c0cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d115      	bne.n	800c0cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d10d      	bne.n	800c0cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d106      	bne.n	800c0cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d001      	beq.n	800c0d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e000      	b.n	800c0d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	40007000 	.word	0x40007000
 800c0e0:	40023800 	.word	0x40023800
 800c0e4:	42470060 	.word	0x42470060

0800c0e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d101      	bne.n	800c0fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e0cc      	b.n	800c296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c0fc:	4b68      	ldr	r3, [pc, #416]	; (800c2a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 030f 	and.w	r3, r3, #15
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	d90c      	bls.n	800c124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c10a:	4b65      	ldr	r3, [pc, #404]	; (800c2a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	b2d2      	uxtb	r2, r2
 800c110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c112:	4b63      	ldr	r3, [pc, #396]	; (800c2a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f003 030f 	and.w	r3, r3, #15
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d001      	beq.n	800c124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e0b8      	b.n	800c296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f003 0302 	and.w	r3, r3, #2
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d020      	beq.n	800c172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 0304 	and.w	r3, r3, #4
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d005      	beq.n	800c148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c13c:	4b59      	ldr	r3, [pc, #356]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	4a58      	ldr	r2, [pc, #352]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f003 0308 	and.w	r3, r3, #8
 800c150:	2b00      	cmp	r3, #0
 800c152:	d005      	beq.n	800c160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c154:	4b53      	ldr	r3, [pc, #332]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	4a52      	ldr	r2, [pc, #328]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c15a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c15e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c160:	4b50      	ldr	r3, [pc, #320]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	494d      	ldr	r1, [pc, #308]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c16e:	4313      	orrs	r3, r2
 800c170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f003 0301 	and.w	r3, r3, #1
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d044      	beq.n	800c208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d107      	bne.n	800c196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c186:	4b47      	ldr	r3, [pc, #284]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d119      	bne.n	800c1c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	e07f      	b.n	800c296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d003      	beq.n	800c1a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c1a2:	2b03      	cmp	r3, #3
 800c1a4:	d107      	bne.n	800c1b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1a6:	4b3f      	ldr	r3, [pc, #252]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d109      	bne.n	800c1c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e06f      	b.n	800c296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1b6:	4b3b      	ldr	r3, [pc, #236]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 0302 	and.w	r3, r3, #2
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e067      	b.n	800c296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c1c6:	4b37      	ldr	r3, [pc, #220]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f023 0203 	bic.w	r2, r3, #3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	4934      	ldr	r1, [pc, #208]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c1d8:	f7fb fb2e 	bl	8007838 <HAL_GetTick>
 800c1dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1de:	e00a      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c1e0:	f7fb fb2a 	bl	8007838 <HAL_GetTick>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d901      	bls.n	800c1f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	e04f      	b.n	800c296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1f6:	4b2b      	ldr	r3, [pc, #172]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	f003 020c 	and.w	r2, r3, #12
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	429a      	cmp	r2, r3
 800c206:	d1eb      	bne.n	800c1e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c208:	4b25      	ldr	r3, [pc, #148]	; (800c2a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f003 030f 	and.w	r3, r3, #15
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	429a      	cmp	r2, r3
 800c214:	d20c      	bcs.n	800c230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c216:	4b22      	ldr	r3, [pc, #136]	; (800c2a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	b2d2      	uxtb	r2, r2
 800c21c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c21e:	4b20      	ldr	r3, [pc, #128]	; (800c2a0 <HAL_RCC_ClockConfig+0x1b8>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f003 030f 	and.w	r3, r3, #15
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d001      	beq.n	800c230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e032      	b.n	800c296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 0304 	and.w	r3, r3, #4
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d008      	beq.n	800c24e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c23c:	4b19      	ldr	r3, [pc, #100]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	4916      	ldr	r1, [pc, #88]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 0308 	and.w	r3, r3, #8
 800c256:	2b00      	cmp	r3, #0
 800c258:	d009      	beq.n	800c26e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c25a:	4b12      	ldr	r3, [pc, #72]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	490e      	ldr	r1, [pc, #56]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c26a:	4313      	orrs	r3, r2
 800c26c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c26e:	f000 f821 	bl	800c2b4 <HAL_RCC_GetSysClockFreq>
 800c272:	4601      	mov	r1, r0
 800c274:	4b0b      	ldr	r3, [pc, #44]	; (800c2a4 <HAL_RCC_ClockConfig+0x1bc>)
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	091b      	lsrs	r3, r3, #4
 800c27a:	f003 030f 	and.w	r3, r3, #15
 800c27e:	4a0a      	ldr	r2, [pc, #40]	; (800c2a8 <HAL_RCC_ClockConfig+0x1c0>)
 800c280:	5cd3      	ldrb	r3, [r2, r3]
 800c282:	fa21 f303 	lsr.w	r3, r1, r3
 800c286:	4a09      	ldr	r2, [pc, #36]	; (800c2ac <HAL_RCC_ClockConfig+0x1c4>)
 800c288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c28a:	4b09      	ldr	r3, [pc, #36]	; (800c2b0 <HAL_RCC_ClockConfig+0x1c8>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fb fa8e 	bl	80077b0 <HAL_InitTick>

  return HAL_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	40023c00 	.word	0x40023c00
 800c2a4:	40023800 	.word	0x40023800
 800c2a8:	08013af0 	.word	0x08013af0
 800c2ac:	20001a84 	.word	0x20001a84
 800c2b0:	20001aa0 	.word	0x20001aa0

0800c2b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	607b      	str	r3, [r7, #4]
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c2ca:	4b50      	ldr	r3, [pc, #320]	; (800c40c <HAL_RCC_GetSysClockFreq+0x158>)
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	f003 030c 	and.w	r3, r3, #12
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	d007      	beq.n	800c2e6 <HAL_RCC_GetSysClockFreq+0x32>
 800c2d6:	2b08      	cmp	r3, #8
 800c2d8:	d008      	beq.n	800c2ec <HAL_RCC_GetSysClockFreq+0x38>
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f040 808d 	bne.w	800c3fa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c2e0:	4b4b      	ldr	r3, [pc, #300]	; (800c410 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c2e2:	60bb      	str	r3, [r7, #8]
       break;
 800c2e4:	e08c      	b.n	800c400 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c2e6:	4b4b      	ldr	r3, [pc, #300]	; (800c414 <HAL_RCC_GetSysClockFreq+0x160>)
 800c2e8:	60bb      	str	r3, [r7, #8]
      break;
 800c2ea:	e089      	b.n	800c400 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c2ec:	4b47      	ldr	r3, [pc, #284]	; (800c40c <HAL_RCC_GetSysClockFreq+0x158>)
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c2f6:	4b45      	ldr	r3, [pc, #276]	; (800c40c <HAL_RCC_GetSysClockFreq+0x158>)
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d023      	beq.n	800c34a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c302:	4b42      	ldr	r3, [pc, #264]	; (800c40c <HAL_RCC_GetSysClockFreq+0x158>)
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	099b      	lsrs	r3, r3, #6
 800c308:	f04f 0400 	mov.w	r4, #0
 800c30c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c310:	f04f 0200 	mov.w	r2, #0
 800c314:	ea03 0501 	and.w	r5, r3, r1
 800c318:	ea04 0602 	and.w	r6, r4, r2
 800c31c:	4a3d      	ldr	r2, [pc, #244]	; (800c414 <HAL_RCC_GetSysClockFreq+0x160>)
 800c31e:	fb02 f106 	mul.w	r1, r2, r6
 800c322:	2200      	movs	r2, #0
 800c324:	fb02 f205 	mul.w	r2, r2, r5
 800c328:	440a      	add	r2, r1
 800c32a:	493a      	ldr	r1, [pc, #232]	; (800c414 <HAL_RCC_GetSysClockFreq+0x160>)
 800c32c:	fba5 0101 	umull	r0, r1, r5, r1
 800c330:	1853      	adds	r3, r2, r1
 800c332:	4619      	mov	r1, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f04f 0400 	mov.w	r4, #0
 800c33a:	461a      	mov	r2, r3
 800c33c:	4623      	mov	r3, r4
 800c33e:	f7f4 fc83 	bl	8000c48 <__aeabi_uldivmod>
 800c342:	4603      	mov	r3, r0
 800c344:	460c      	mov	r4, r1
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	e049      	b.n	800c3de <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c34a:	4b30      	ldr	r3, [pc, #192]	; (800c40c <HAL_RCC_GetSysClockFreq+0x158>)
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	099b      	lsrs	r3, r3, #6
 800c350:	f04f 0400 	mov.w	r4, #0
 800c354:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c358:	f04f 0200 	mov.w	r2, #0
 800c35c:	ea03 0501 	and.w	r5, r3, r1
 800c360:	ea04 0602 	and.w	r6, r4, r2
 800c364:	4629      	mov	r1, r5
 800c366:	4632      	mov	r2, r6
 800c368:	f04f 0300 	mov.w	r3, #0
 800c36c:	f04f 0400 	mov.w	r4, #0
 800c370:	0154      	lsls	r4, r2, #5
 800c372:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c376:	014b      	lsls	r3, r1, #5
 800c378:	4619      	mov	r1, r3
 800c37a:	4622      	mov	r2, r4
 800c37c:	1b49      	subs	r1, r1, r5
 800c37e:	eb62 0206 	sbc.w	r2, r2, r6
 800c382:	f04f 0300 	mov.w	r3, #0
 800c386:	f04f 0400 	mov.w	r4, #0
 800c38a:	0194      	lsls	r4, r2, #6
 800c38c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c390:	018b      	lsls	r3, r1, #6
 800c392:	1a5b      	subs	r3, r3, r1
 800c394:	eb64 0402 	sbc.w	r4, r4, r2
 800c398:	f04f 0100 	mov.w	r1, #0
 800c39c:	f04f 0200 	mov.w	r2, #0
 800c3a0:	00e2      	lsls	r2, r4, #3
 800c3a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c3a6:	00d9      	lsls	r1, r3, #3
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4614      	mov	r4, r2
 800c3ac:	195b      	adds	r3, r3, r5
 800c3ae:	eb44 0406 	adc.w	r4, r4, r6
 800c3b2:	f04f 0100 	mov.w	r1, #0
 800c3b6:	f04f 0200 	mov.w	r2, #0
 800c3ba:	02a2      	lsls	r2, r4, #10
 800c3bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c3c0:	0299      	lsls	r1, r3, #10
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4614      	mov	r4, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	4621      	mov	r1, r4
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f04f 0400 	mov.w	r4, #0
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	4623      	mov	r3, r4
 800c3d4:	f7f4 fc38 	bl	8000c48 <__aeabi_uldivmod>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	460c      	mov	r4, r1
 800c3dc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c3de:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <HAL_RCC_GetSysClockFreq+0x158>)
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	0c1b      	lsrs	r3, r3, #16
 800c3e4:	f003 0303 	and.w	r3, r3, #3
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3f6:	60bb      	str	r3, [r7, #8]
      break;
 800c3f8:	e002      	b.n	800c400 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c3fa:	4b05      	ldr	r3, [pc, #20]	; (800c410 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c3fc:	60bb      	str	r3, [r7, #8]
      break;
 800c3fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c400:	68bb      	ldr	r3, [r7, #8]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3714      	adds	r7, #20
 800c406:	46bd      	mov	sp, r7
 800c408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c40a:	bf00      	nop
 800c40c:	40023800 	.word	0x40023800
 800c410:	00f42400 	.word	0x00f42400
 800c414:	017d7840 	.word	0x017d7840

0800c418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c418:	b480      	push	{r7}
 800c41a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c41c:	4b03      	ldr	r3, [pc, #12]	; (800c42c <HAL_RCC_GetHCLKFreq+0x14>)
 800c41e:	681b      	ldr	r3, [r3, #0]
}
 800c420:	4618      	mov	r0, r3
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	20001a84 	.word	0x20001a84

0800c430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c434:	f7ff fff0 	bl	800c418 <HAL_RCC_GetHCLKFreq>
 800c438:	4601      	mov	r1, r0
 800c43a:	4b05      	ldr	r3, [pc, #20]	; (800c450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	0a9b      	lsrs	r3, r3, #10
 800c440:	f003 0307 	and.w	r3, r3, #7
 800c444:	4a03      	ldr	r2, [pc, #12]	; (800c454 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c446:	5cd3      	ldrb	r3, [r2, r3]
 800c448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	40023800 	.word	0x40023800
 800c454:	08013b00 	.word	0x08013b00

0800c458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c45c:	f7ff ffdc 	bl	800c418 <HAL_RCC_GetHCLKFreq>
 800c460:	4601      	mov	r1, r0
 800c462:	4b05      	ldr	r3, [pc, #20]	; (800c478 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	0b5b      	lsrs	r3, r3, #13
 800c468:	f003 0307 	and.w	r3, r3, #7
 800c46c:	4a03      	ldr	r2, [pc, #12]	; (800c47c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c46e:	5cd3      	ldrb	r3, [r2, r3]
 800c470:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c474:	4618      	mov	r0, r3
 800c476:	bd80      	pop	{r7, pc}
 800c478:	40023800 	.word	0x40023800
 800c47c:	08013b00 	.word	0x08013b00

0800c480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	e056      	b.n	800c540 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d106      	bne.n	800c4b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f7fa f8ad 	bl	800660c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2202      	movs	r2, #2
 800c4b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685a      	ldr	r2, [r3, #4]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	431a      	orrs	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	431a      	orrs	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	691b      	ldr	r3, [r3, #16]
 800c4de:	431a      	orrs	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	431a      	orrs	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4ee:	431a      	orrs	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	69db      	ldr	r3, [r3, #28]
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a1b      	ldr	r3, [r3, #32]
 800c4fa:	ea42 0103 	orr.w	r1, r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	430a      	orrs	r2, r1
 800c508:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	699b      	ldr	r3, [r3, #24]
 800c50e:	0c1b      	lsrs	r3, r3, #16
 800c510:	f003 0104 	and.w	r1, r3, #4
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	430a      	orrs	r2, r1
 800c51e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	69da      	ldr	r2, [r3, #28]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c52e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2201      	movs	r2, #1
 800c53a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3708      	adds	r7, #8
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b088      	sub	sp, #32
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	603b      	str	r3, [r7, #0]
 800c554:	4613      	mov	r3, r2
 800c556:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c562:	2b01      	cmp	r3, #1
 800c564:	d101      	bne.n	800c56a <HAL_SPI_Transmit+0x22>
 800c566:	2302      	movs	r3, #2
 800c568:	e11e      	b.n	800c7a8 <HAL_SPI_Transmit+0x260>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c572:	f7fb f961 	bl	8007838 <HAL_GetTick>
 800c576:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c578:	88fb      	ldrh	r3, [r7, #6]
 800c57a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c582:	b2db      	uxtb	r3, r3
 800c584:	2b01      	cmp	r3, #1
 800c586:	d002      	beq.n	800c58e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c588:	2302      	movs	r3, #2
 800c58a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c58c:	e103      	b.n	800c796 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d002      	beq.n	800c59a <HAL_SPI_Transmit+0x52>
 800c594:	88fb      	ldrh	r3, [r7, #6]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d102      	bne.n	800c5a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c59e:	e0fa      	b.n	800c796 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2203      	movs	r2, #3
 800c5a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	88fa      	ldrh	r2, [r7, #6]
 800c5b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	88fa      	ldrh	r2, [r7, #6]
 800c5be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5e6:	d107      	bne.n	800c5f8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c5f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c602:	2b40      	cmp	r3, #64	; 0x40
 800c604:	d007      	beq.n	800c616 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c614:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c61e:	d14b      	bne.n	800c6b8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d002      	beq.n	800c62e <HAL_SPI_Transmit+0xe6>
 800c628:	8afb      	ldrh	r3, [r7, #22]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d13e      	bne.n	800c6ac <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c632:	881a      	ldrh	r2, [r3, #0]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c63e:	1c9a      	adds	r2, r3, #2
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c648:	b29b      	uxth	r3, r3
 800c64a:	3b01      	subs	r3, #1
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c652:	e02b      	b.n	800c6ac <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f003 0302 	and.w	r3, r3, #2
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d112      	bne.n	800c688 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c666:	881a      	ldrh	r2, [r3, #0]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c672:	1c9a      	adds	r2, r3, #2
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	3b01      	subs	r3, #1
 800c680:	b29a      	uxth	r2, r3
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	86da      	strh	r2, [r3, #54]	; 0x36
 800c686:	e011      	b.n	800c6ac <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c688:	f7fb f8d6 	bl	8007838 <HAL_GetTick>
 800c68c:	4602      	mov	r2, r0
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	429a      	cmp	r2, r3
 800c696:	d803      	bhi.n	800c6a0 <HAL_SPI_Transmit+0x158>
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c69e:	d102      	bne.n	800c6a6 <HAL_SPI_Transmit+0x15e>
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d102      	bne.n	800c6ac <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c6a6:	2303      	movs	r3, #3
 800c6a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c6aa:	e074      	b.n	800c796 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1ce      	bne.n	800c654 <HAL_SPI_Transmit+0x10c>
 800c6b6:	e04c      	b.n	800c752 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <HAL_SPI_Transmit+0x17e>
 800c6c0:	8afb      	ldrh	r3, [r7, #22]
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d140      	bne.n	800c748 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	330c      	adds	r3, #12
 800c6d0:	7812      	ldrb	r2, [r2, #0]
 800c6d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d8:	1c5a      	adds	r2, r3, #1
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c6ec:	e02c      	b.n	800c748 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	f003 0302 	and.w	r3, r3, #2
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d113      	bne.n	800c724 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	330c      	adds	r3, #12
 800c706:	7812      	ldrb	r2, [r2, #0]
 800c708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c718:	b29b      	uxth	r3, r3
 800c71a:	3b01      	subs	r3, #1
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	86da      	strh	r2, [r3, #54]	; 0x36
 800c722:	e011      	b.n	800c748 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c724:	f7fb f888 	bl	8007838 <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d803      	bhi.n	800c73c <HAL_SPI_Transmit+0x1f4>
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73a:	d102      	bne.n	800c742 <HAL_SPI_Transmit+0x1fa>
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d102      	bne.n	800c748 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c742:	2303      	movs	r3, #3
 800c744:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c746:	e026      	b.n	800c796 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1cd      	bne.n	800c6ee <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c752:	69ba      	ldr	r2, [r7, #24]
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f000 fc94 	bl	800d084 <SPI_EndRxTxTransaction>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d002      	beq.n	800c768 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2220      	movs	r2, #32
 800c766:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10a      	bne.n	800c786 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c770:	2300      	movs	r3, #0
 800c772:	613b      	str	r3, [r7, #16]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	613b      	str	r3, [r7, #16]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	613b      	str	r3, [r7, #16]
 800c784:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d002      	beq.n	800c794 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	77fb      	strb	r3, [r7, #31]
 800c792:	e000      	b.n	800c796 <HAL_SPI_Transmit+0x24e>
  }

error:
 800c794:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c7a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3720      	adds	r7, #32
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b08c      	sub	sp, #48	; 0x30
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
 800c7bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d101      	bne.n	800c7d6 <HAL_SPI_TransmitReceive+0x26>
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	e18a      	b.n	800caec <HAL_SPI_TransmitReceive+0x33c>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7de:	f7fb f82b 	bl	8007838 <HAL_GetTick>
 800c7e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c7ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c7f4:	887b      	ldrh	r3, [r7, #2]
 800c7f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c7f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d00f      	beq.n	800c820 <HAL_SPI_TransmitReceive+0x70>
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c806:	d107      	bne.n	800c818 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d103      	bne.n	800c818 <HAL_SPI_TransmitReceive+0x68>
 800c810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c814:	2b04      	cmp	r3, #4
 800c816:	d003      	beq.n	800c820 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c818:	2302      	movs	r3, #2
 800c81a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c81e:	e15b      	b.n	800cad8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d005      	beq.n	800c832 <HAL_SPI_TransmitReceive+0x82>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <HAL_SPI_TransmitReceive+0x82>
 800c82c:	887b      	ldrh	r3, [r7, #2]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d103      	bne.n	800c83a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c832:	2301      	movs	r3, #1
 800c834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c838:	e14e      	b.n	800cad8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c840:	b2db      	uxtb	r3, r3
 800c842:	2b04      	cmp	r3, #4
 800c844:	d003      	beq.n	800c84e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2205      	movs	r2, #5
 800c84a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	887a      	ldrh	r2, [r7, #2]
 800c85e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	887a      	ldrh	r2, [r7, #2]
 800c864:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	887a      	ldrh	r2, [r7, #2]
 800c870:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	887a      	ldrh	r2, [r7, #2]
 800c876:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c88e:	2b40      	cmp	r3, #64	; 0x40
 800c890:	d007      	beq.n	800c8a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8aa:	d178      	bne.n	800c99e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <HAL_SPI_TransmitReceive+0x10a>
 800c8b4:	8b7b      	ldrh	r3, [r7, #26]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d166      	bne.n	800c988 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8be:	881a      	ldrh	r2, [r3, #0]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ca:	1c9a      	adds	r2, r3, #2
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8de:	e053      	b.n	800c988 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	f003 0302 	and.w	r3, r3, #2
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	d11b      	bne.n	800c926 <HAL_SPI_TransmitReceive+0x176>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d016      	beq.n	800c926 <HAL_SPI_TransmitReceive+0x176>
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d113      	bne.n	800c926 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c902:	881a      	ldrh	r2, [r3, #0]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90e:	1c9a      	adds	r2, r3, #2
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c918:	b29b      	uxth	r3, r3
 800c91a:	3b01      	subs	r3, #1
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c922:	2300      	movs	r3, #0
 800c924:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	f003 0301 	and.w	r3, r3, #1
 800c930:	2b01      	cmp	r3, #1
 800c932:	d119      	bne.n	800c968 <HAL_SPI_TransmitReceive+0x1b8>
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c938:	b29b      	uxth	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d014      	beq.n	800c968 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	68da      	ldr	r2, [r3, #12]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c948:	b292      	uxth	r2, r2
 800c94a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c950:	1c9a      	adds	r2, r3, #2
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	3b01      	subs	r3, #1
 800c95e:	b29a      	uxth	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c964:	2301      	movs	r3, #1
 800c966:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c968:	f7fa ff66 	bl	8007838 <HAL_GetTick>
 800c96c:	4602      	mov	r2, r0
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c974:	429a      	cmp	r2, r3
 800c976:	d807      	bhi.n	800c988 <HAL_SPI_TransmitReceive+0x1d8>
 800c978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97e:	d003      	beq.n	800c988 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c980:	2303      	movs	r3, #3
 800c982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c986:	e0a7      	b.n	800cad8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1a6      	bne.n	800c8e0 <HAL_SPI_TransmitReceive+0x130>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c996:	b29b      	uxth	r3, r3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1a1      	bne.n	800c8e0 <HAL_SPI_TransmitReceive+0x130>
 800c99c:	e07c      	b.n	800ca98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <HAL_SPI_TransmitReceive+0x1fc>
 800c9a6:	8b7b      	ldrh	r3, [r7, #26]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d16b      	bne.n	800ca84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	330c      	adds	r3, #12
 800c9b6:	7812      	ldrb	r2, [r2, #0]
 800c9b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9d2:	e057      	b.n	800ca84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	f003 0302 	and.w	r3, r3, #2
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d11c      	bne.n	800ca1c <HAL_SPI_TransmitReceive+0x26c>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d017      	beq.n	800ca1c <HAL_SPI_TransmitReceive+0x26c>
 800c9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d114      	bne.n	800ca1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	330c      	adds	r3, #12
 800c9fc:	7812      	ldrb	r2, [r2, #0]
 800c9fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca04:	1c5a      	adds	r2, r3, #1
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	3b01      	subs	r3, #1
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	f003 0301 	and.w	r3, r3, #1
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d119      	bne.n	800ca5e <HAL_SPI_TransmitReceive+0x2ae>
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d014      	beq.n	800ca5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68da      	ldr	r2, [r3, #12]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3e:	b2d2      	uxtb	r2, r2
 800ca40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca46:	1c5a      	adds	r2, r3, #1
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	3b01      	subs	r3, #1
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ca5e:	f7fa feeb 	bl	8007838 <HAL_GetTick>
 800ca62:	4602      	mov	r2, r0
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d803      	bhi.n	800ca76 <HAL_SPI_TransmitReceive+0x2c6>
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca74:	d102      	bne.n	800ca7c <HAL_SPI_TransmitReceive+0x2cc>
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d103      	bne.n	800ca84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ca82:	e029      	b.n	800cad8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1a2      	bne.n	800c9d4 <HAL_SPI_TransmitReceive+0x224>
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d19d      	bne.n	800c9d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ca98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f000 faf1 	bl	800d084 <SPI_EndRxTxTransaction>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d006      	beq.n	800cab6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800caa8:	2301      	movs	r3, #1
 800caaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2220      	movs	r2, #32
 800cab2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800cab4:	e010      	b.n	800cad8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10b      	bne.n	800cad6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cabe:	2300      	movs	r3, #0
 800cac0:	617b      	str	r3, [r7, #20]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	617b      	str	r3, [r7, #20]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	617b      	str	r3, [r7, #20]
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	e000      	b.n	800cad8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800cad6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cae8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800caec:	4618      	mov	r0, r3
 800caee:	3730      	adds	r7, #48	; 0x30
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
 800cb00:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d101      	bne.n	800cb14 <HAL_SPI_TransmitReceive_DMA+0x20>
 800cb10:	2302      	movs	r3, #2
 800cb12:	e0e3      	b.n	800ccdc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb22:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800cb2a:	7dbb      	ldrb	r3, [r7, #22]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d00d      	beq.n	800cb4c <HAL_SPI_TransmitReceive_DMA+0x58>
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb36:	d106      	bne.n	800cb46 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d102      	bne.n	800cb46 <HAL_SPI_TransmitReceive_DMA+0x52>
 800cb40:	7dbb      	ldrb	r3, [r7, #22]
 800cb42:	2b04      	cmp	r3, #4
 800cb44:	d002      	beq.n	800cb4c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800cb46:	2302      	movs	r3, #2
 800cb48:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cb4a:	e0c2      	b.n	800ccd2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d005      	beq.n	800cb5e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800cb58:	887b      	ldrh	r3, [r7, #2]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d102      	bne.n	800cb64 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cb62:	e0b6      	b.n	800ccd2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	2b04      	cmp	r3, #4
 800cb6e:	d003      	beq.n	800cb78 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2205      	movs	r2, #5
 800cb74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	887a      	ldrh	r2, [r7, #2]
 800cb88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	887a      	ldrh	r2, [r7, #2]
 800cb8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	887a      	ldrh	r2, [r7, #2]
 800cb9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	887a      	ldrh	r2, [r7, #2]
 800cba0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2200      	movs	r2, #0
 800cba6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b04      	cmp	r3, #4
 800cbb8:	d108      	bne.n	800cbcc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbbe:	4a49      	ldr	r2, [pc, #292]	; (800cce4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800cbc0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbc6:	4a48      	ldr	r2, [pc, #288]	; (800cce8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800cbc8:	63da      	str	r2, [r3, #60]	; 0x3c
 800cbca:	e007      	b.n	800cbdc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd0:	4a46      	ldr	r2, [pc, #280]	; (800ccec <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800cbd2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd8:	4a45      	ldr	r2, [pc, #276]	; (800ccf0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800cbda:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbe0:	4a44      	ldr	r2, [pc, #272]	; (800ccf4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800cbe2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbe8:	2200      	movs	r2, #0
 800cbea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	330c      	adds	r3, #12
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc02:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800cc04:	f7fb fbfa 	bl	80083fc <HAL_DMA_Start_IT>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00c      	beq.n	800cc28 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc12:	f043 0210 	orr.w	r2, r3, #16
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800cc26:	e054      	b.n	800ccd2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f042 0201 	orr.w	r2, r2, #1
 800cc36:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc44:	2200      	movs	r2, #0
 800cc46:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc54:	2200      	movs	r2, #0
 800cc56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc60:	4619      	mov	r1, r3
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	330c      	adds	r3, #12
 800cc68:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc6e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cc70:	f7fb fbc4 	bl	80083fc <HAL_DMA_Start_IT>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00c      	beq.n	800cc94 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc7e:	f043 0210 	orr.w	r2, r3, #16
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800cc92:	e01e      	b.n	800ccd2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc9e:	2b40      	cmp	r3, #64	; 0x40
 800cca0:	d007      	beq.n	800ccb2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccb0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	685a      	ldr	r2, [r3, #4]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f042 0220 	orr.w	r2, r2, #32
 800ccc0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f042 0202 	orr.w	r2, r2, #2
 800ccd0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ccda:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3718      	adds	r7, #24
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	0800ce6d 	.word	0x0800ce6d
 800cce8:	0800cd35 	.word	0x0800cd35
 800ccec:	0800ce89 	.word	0x0800ce89
 800ccf0:	0800cddd 	.word	0x0800cddd
 800ccf4:	0800cea5 	.word	0x0800cea5

0800ccf8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd40:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd42:	f7fa fd79 	bl	8007838 <HAL_GetTick>
 800cd46:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd56:	d03b      	beq.n	800cdd0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f022 0220 	bic.w	r2, r2, #32
 800cd66:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10d      	bne.n	800cd8c <SPI_DMAReceiveCplt+0x58>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd78:	d108      	bne.n	800cd8c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f022 0203 	bic.w	r2, r2, #3
 800cd88:	605a      	str	r2, [r3, #4]
 800cd8a:	e007      	b.n	800cd9c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	685a      	ldr	r2, [r3, #4]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f022 0201 	bic.w	r2, r2, #1
 800cd9a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	2164      	movs	r1, #100	; 0x64
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f000 f909 	bl	800cfb8 <SPI_EndRxTransaction>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2220      	movs	r2, #32
 800cdb0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d003      	beq.n	800cdd0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f7ff ffa9 	bl	800cd20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cdce:	e002      	b.n	800cdd6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f7ff ff91 	bl	800ccf8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cdea:	f7fa fd25 	bl	8007838 <HAL_GetTick>
 800cdee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdfe:	d02f      	beq.n	800ce60 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f022 0220 	bic.w	r2, r2, #32
 800ce0e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	2164      	movs	r1, #100	; 0x64
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f000 f935 	bl	800d084 <SPI_EndRxTxTransaction>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d005      	beq.n	800ce2c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce24:	f043 0220 	orr.w	r2, r3, #32
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f022 0203 	bic.w	r2, r2, #3
 800ce3a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2200      	movs	r2, #0
 800ce46:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d003      	beq.n	800ce60 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	f7ff ff61 	bl	800cd20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ce5e:	e002      	b.n	800ce66 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f7f8 fc6f 	bl	8005744 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce78:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ce7a:	68f8      	ldr	r0, [r7, #12]
 800ce7c:	f7ff ff46 	bl	800cd0c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ce80:	bf00      	nop
 800ce82:	3710      	adds	r7, #16
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce94:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f7f8 fc6a 	bl	8005770 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ce9c:	bf00      	nop
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	685a      	ldr	r2, [r3, #4]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f022 0203 	bic.w	r2, r2, #3
 800cec0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cec6:	f043 0210 	orr.w	r2, r3, #16
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f7ff ff22 	bl	800cd20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cedc:	bf00      	nop
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	603b      	str	r3, [r7, #0]
 800cef0:	4613      	mov	r3, r2
 800cef2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cef4:	e04c      	b.n	800cf90 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cefc:	d048      	beq.n	800cf90 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800cefe:	f7fa fc9b 	bl	8007838 <HAL_GetTick>
 800cf02:	4602      	mov	r2, r0
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	683a      	ldr	r2, [r7, #0]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d902      	bls.n	800cf14 <SPI_WaitFlagStateUntilTimeout+0x30>
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d13d      	bne.n	800cf90 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	685a      	ldr	r2, [r3, #4]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cf22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf2c:	d111      	bne.n	800cf52 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf36:	d004      	beq.n	800cf42 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf40:	d107      	bne.n	800cf52 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf5a:	d10f      	bne.n	800cf7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf6a:	601a      	str	r2, [r3, #0]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e00f      	b.n	800cfb0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	689a      	ldr	r2, [r3, #8]
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	4013      	ands	r3, r2
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	bf0c      	ite	eq
 800cfa0:	2301      	moveq	r3, #1
 800cfa2:	2300      	movne	r3, #0
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	79fb      	ldrb	r3, [r7, #7]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d1a3      	bne.n	800cef6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cfcc:	d111      	bne.n	800cff2 <SPI_EndRxTransaction+0x3a>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	689b      	ldr	r3, [r3, #8]
 800cfd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfd6:	d004      	beq.n	800cfe2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfe0:	d107      	bne.n	800cff2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cff0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cffa:	d12a      	bne.n	800d052 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d004:	d012      	beq.n	800d02c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	2200      	movs	r2, #0
 800d00e:	2180      	movs	r1, #128	; 0x80
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f7ff ff67 	bl	800cee4 <SPI_WaitFlagStateUntilTimeout>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d02d      	beq.n	800d078 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d020:	f043 0220 	orr.w	r2, r3, #32
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d028:	2303      	movs	r3, #3
 800d02a:	e026      	b.n	800d07a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	2200      	movs	r2, #0
 800d034:	2101      	movs	r1, #1
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f7ff ff54 	bl	800cee4 <SPI_WaitFlagStateUntilTimeout>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d01a      	beq.n	800d078 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d046:	f043 0220 	orr.w	r2, r3, #32
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d04e:	2303      	movs	r3, #3
 800d050:	e013      	b.n	800d07a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2200      	movs	r2, #0
 800d05a:	2101      	movs	r1, #1
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	f7ff ff41 	bl	800cee4 <SPI_WaitFlagStateUntilTimeout>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d007      	beq.n	800d078 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d06c:	f043 0220 	orr.w	r2, r3, #32
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d074:	2303      	movs	r3, #3
 800d076:	e000      	b.n	800d07a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
	...

0800d084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b088      	sub	sp, #32
 800d088:	af02      	add	r7, sp, #8
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d090:	4b1b      	ldr	r3, [pc, #108]	; (800d100 <SPI_EndRxTxTransaction+0x7c>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a1b      	ldr	r2, [pc, #108]	; (800d104 <SPI_EndRxTxTransaction+0x80>)
 800d096:	fba2 2303 	umull	r2, r3, r2, r3
 800d09a:	0d5b      	lsrs	r3, r3, #21
 800d09c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0a0:	fb02 f303 	mul.w	r3, r2, r3
 800d0a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0ae:	d112      	bne.n	800d0d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	2180      	movs	r1, #128	; 0x80
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f7ff ff12 	bl	800cee4 <SPI_WaitFlagStateUntilTimeout>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d016      	beq.n	800d0f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0ca:	f043 0220 	orr.w	r2, r3, #32
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d0d2:	2303      	movs	r3, #3
 800d0d4:	e00f      	b.n	800d0f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00a      	beq.n	800d0f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0ec:	2b80      	cmp	r3, #128	; 0x80
 800d0ee:	d0f2      	beq.n	800d0d6 <SPI_EndRxTxTransaction+0x52>
 800d0f0:	e000      	b.n	800d0f4 <SPI_EndRxTxTransaction+0x70>
        break;
 800d0f2:	bf00      	nop
  }

  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3718      	adds	r7, #24
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	20001a84 	.word	0x20001a84
 800d104:	165e9f81 	.word	0x165e9f81

0800d108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d101      	bne.n	800d11a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e01d      	b.n	800d156 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d106      	bne.n	800d134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7f9 fe4e 	bl	8006dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2202      	movs	r2, #2
 800d138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3304      	adds	r3, #4
 800d144:	4619      	mov	r1, r3
 800d146:	4610      	mov	r0, r2
 800d148:	f000 fb34 	bl	800d7b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b082      	sub	sp, #8
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	e01d      	b.n	800d1ac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d176:	b2db      	uxtb	r3, r3
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d106      	bne.n	800d18a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f815 	bl	800d1b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2202      	movs	r2, #2
 800d18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	3304      	adds	r3, #4
 800d19a:	4619      	mov	r1, r3
 800d19c:	4610      	mov	r0, r2
 800d19e:	f000 fb09 	bl	800d7b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	6839      	ldr	r1, [r7, #0]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f000 fdd4 	bl	800dd88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a15      	ldr	r2, [pc, #84]	; (800d23c <HAL_TIM_PWM_Start+0x74>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d004      	beq.n	800d1f4 <HAL_TIM_PWM_Start+0x2c>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a14      	ldr	r2, [pc, #80]	; (800d240 <HAL_TIM_PWM_Start+0x78>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d101      	bne.n	800d1f8 <HAL_TIM_PWM_Start+0x30>
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e000      	b.n	800d1fa <HAL_TIM_PWM_Start+0x32>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d007      	beq.n	800d20e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d20c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	f003 0307 	and.w	r3, r3, #7
 800d218:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2b06      	cmp	r3, #6
 800d21e:	d007      	beq.n	800d230 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f042 0201 	orr.w	r2, r2, #1
 800d22e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	40010000 	.word	0x40010000
 800d240:	40010400 	.word	0x40010400

0800d244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	f003 0302 	and.w	r3, r3, #2
 800d256:	2b02      	cmp	r3, #2
 800d258:	d122      	bne.n	800d2a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	f003 0302 	and.w	r3, r3, #2
 800d264:	2b02      	cmp	r3, #2
 800d266:	d11b      	bne.n	800d2a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f06f 0202 	mvn.w	r2, #2
 800d270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2201      	movs	r2, #1
 800d276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	699b      	ldr	r3, [r3, #24]
 800d27e:	f003 0303 	and.w	r3, r3, #3
 800d282:	2b00      	cmp	r3, #0
 800d284:	d003      	beq.n	800d28e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 fa75 	bl	800d776 <HAL_TIM_IC_CaptureCallback>
 800d28c:	e005      	b.n	800d29a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 fa67 	bl	800d762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fa78 	bl	800d78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	691b      	ldr	r3, [r3, #16]
 800d2a6:	f003 0304 	and.w	r3, r3, #4
 800d2aa:	2b04      	cmp	r3, #4
 800d2ac:	d122      	bne.n	800d2f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	f003 0304 	and.w	r3, r3, #4
 800d2b8:	2b04      	cmp	r3, #4
 800d2ba:	d11b      	bne.n	800d2f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f06f 0204 	mvn.w	r2, #4
 800d2c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2202      	movs	r2, #2
 800d2ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d003      	beq.n	800d2e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 fa4b 	bl	800d776 <HAL_TIM_IC_CaptureCallback>
 800d2e0:	e005      	b.n	800d2ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fa3d 	bl	800d762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fa4e 	bl	800d78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	f003 0308 	and.w	r3, r3, #8
 800d2fe:	2b08      	cmp	r3, #8
 800d300:	d122      	bne.n	800d348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	f003 0308 	and.w	r3, r3, #8
 800d30c:	2b08      	cmp	r3, #8
 800d30e:	d11b      	bne.n	800d348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f06f 0208 	mvn.w	r2, #8
 800d318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2204      	movs	r2, #4
 800d31e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	69db      	ldr	r3, [r3, #28]
 800d326:	f003 0303 	and.w	r3, r3, #3
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d003      	beq.n	800d336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 fa21 	bl	800d776 <HAL_TIM_IC_CaptureCallback>
 800d334:	e005      	b.n	800d342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 fa13 	bl	800d762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fa24 	bl	800d78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2200      	movs	r2, #0
 800d346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	f003 0310 	and.w	r3, r3, #16
 800d352:	2b10      	cmp	r3, #16
 800d354:	d122      	bne.n	800d39c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	f003 0310 	and.w	r3, r3, #16
 800d360:	2b10      	cmp	r3, #16
 800d362:	d11b      	bne.n	800d39c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f06f 0210 	mvn.w	r2, #16
 800d36c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2208      	movs	r2, #8
 800d372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	69db      	ldr	r3, [r3, #28]
 800d37a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d003      	beq.n	800d38a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 f9f7 	bl	800d776 <HAL_TIM_IC_CaptureCallback>
 800d388:	e005      	b.n	800d396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f9e9 	bl	800d762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 f9fa 	bl	800d78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d10e      	bne.n	800d3c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	f003 0301 	and.w	r3, r3, #1
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d107      	bne.n	800d3c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f06f 0201 	mvn.w	r2, #1
 800d3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f9c3 	bl	800d74e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3d2:	2b80      	cmp	r3, #128	; 0x80
 800d3d4:	d10e      	bne.n	800d3f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3e0:	2b80      	cmp	r3, #128	; 0x80
 800d3e2:	d107      	bne.n	800d3f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 fdc8 	bl	800df84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3fe:	2b40      	cmp	r3, #64	; 0x40
 800d400:	d10e      	bne.n	800d420 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d40c:	2b40      	cmp	r3, #64	; 0x40
 800d40e:	d107      	bne.n	800d420 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 f9bf 	bl	800d79e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	691b      	ldr	r3, [r3, #16]
 800d426:	f003 0320 	and.w	r3, r3, #32
 800d42a:	2b20      	cmp	r3, #32
 800d42c:	d10e      	bne.n	800d44c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	f003 0320 	and.w	r3, r3, #32
 800d438:	2b20      	cmp	r3, #32
 800d43a:	d107      	bne.n	800d44c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f06f 0220 	mvn.w	r2, #32
 800d444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fd92 	bl	800df70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d44c:	bf00      	nop
 800d44e:	3708      	adds	r7, #8
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d466:	2b01      	cmp	r3, #1
 800d468:	d101      	bne.n	800d46e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d46a:	2302      	movs	r3, #2
 800d46c:	e0b4      	b.n	800d5d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2201      	movs	r2, #1
 800d472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2202      	movs	r2, #2
 800d47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b0c      	cmp	r3, #12
 800d482:	f200 809f 	bhi.w	800d5c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d486:	a201      	add	r2, pc, #4	; (adr r2, 800d48c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d48c:	0800d4c1 	.word	0x0800d4c1
 800d490:	0800d5c5 	.word	0x0800d5c5
 800d494:	0800d5c5 	.word	0x0800d5c5
 800d498:	0800d5c5 	.word	0x0800d5c5
 800d49c:	0800d501 	.word	0x0800d501
 800d4a0:	0800d5c5 	.word	0x0800d5c5
 800d4a4:	0800d5c5 	.word	0x0800d5c5
 800d4a8:	0800d5c5 	.word	0x0800d5c5
 800d4ac:	0800d543 	.word	0x0800d543
 800d4b0:	0800d5c5 	.word	0x0800d5c5
 800d4b4:	0800d5c5 	.word	0x0800d5c5
 800d4b8:	0800d5c5 	.word	0x0800d5c5
 800d4bc:	0800d583 	.word	0x0800d583
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	68b9      	ldr	r1, [r7, #8]
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f000 fa14 	bl	800d8f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	699a      	ldr	r2, [r3, #24]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f042 0208 	orr.w	r2, r2, #8
 800d4da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	699a      	ldr	r2, [r3, #24]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f022 0204 	bic.w	r2, r2, #4
 800d4ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	6999      	ldr	r1, [r3, #24]
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	691a      	ldr	r2, [r3, #16]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	430a      	orrs	r2, r1
 800d4fc:	619a      	str	r2, [r3, #24]
      break;
 800d4fe:	e062      	b.n	800d5c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	68b9      	ldr	r1, [r7, #8]
 800d506:	4618      	mov	r0, r3
 800d508:	f000 fa64 	bl	800d9d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	699a      	ldr	r2, [r3, #24]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d51a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	699a      	ldr	r2, [r3, #24]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d52a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6999      	ldr	r1, [r3, #24]
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	691b      	ldr	r3, [r3, #16]
 800d536:	021a      	lsls	r2, r3, #8
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	430a      	orrs	r2, r1
 800d53e:	619a      	str	r2, [r3, #24]
      break;
 800d540:	e041      	b.n	800d5c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68b9      	ldr	r1, [r7, #8]
 800d548:	4618      	mov	r0, r3
 800d54a:	f000 fab9 	bl	800dac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	69da      	ldr	r2, [r3, #28]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f042 0208 	orr.w	r2, r2, #8
 800d55c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	69da      	ldr	r2, [r3, #28]
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f022 0204 	bic.w	r2, r2, #4
 800d56c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	69d9      	ldr	r1, [r3, #28]
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	691a      	ldr	r2, [r3, #16]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	430a      	orrs	r2, r1
 800d57e:	61da      	str	r2, [r3, #28]
      break;
 800d580:	e021      	b.n	800d5c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68b9      	ldr	r1, [r7, #8]
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 fb0d 	bl	800dba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	69da      	ldr	r2, [r3, #28]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d59c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	69da      	ldr	r2, [r3, #28]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	69d9      	ldr	r1, [r3, #28]
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	021a      	lsls	r2, r3, #8
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	430a      	orrs	r2, r1
 800d5c0:	61da      	str	r2, [r3, #28]
      break;
 800d5c2:	e000      	b.n	800d5c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d5c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d101      	bne.n	800d5f8 <HAL_TIM_ConfigClockSource+0x18>
 800d5f4:	2302      	movs	r3, #2
 800d5f6:	e0a6      	b.n	800d746 <HAL_TIM_ConfigClockSource+0x166>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2202      	movs	r2, #2
 800d604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d61e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b40      	cmp	r3, #64	; 0x40
 800d62e:	d067      	beq.n	800d700 <HAL_TIM_ConfigClockSource+0x120>
 800d630:	2b40      	cmp	r3, #64	; 0x40
 800d632:	d80b      	bhi.n	800d64c <HAL_TIM_ConfigClockSource+0x6c>
 800d634:	2b10      	cmp	r3, #16
 800d636:	d073      	beq.n	800d720 <HAL_TIM_ConfigClockSource+0x140>
 800d638:	2b10      	cmp	r3, #16
 800d63a:	d802      	bhi.n	800d642 <HAL_TIM_ConfigClockSource+0x62>
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d06f      	beq.n	800d720 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d640:	e078      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d642:	2b20      	cmp	r3, #32
 800d644:	d06c      	beq.n	800d720 <HAL_TIM_ConfigClockSource+0x140>
 800d646:	2b30      	cmp	r3, #48	; 0x30
 800d648:	d06a      	beq.n	800d720 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d64a:	e073      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d64c:	2b70      	cmp	r3, #112	; 0x70
 800d64e:	d00d      	beq.n	800d66c <HAL_TIM_ConfigClockSource+0x8c>
 800d650:	2b70      	cmp	r3, #112	; 0x70
 800d652:	d804      	bhi.n	800d65e <HAL_TIM_ConfigClockSource+0x7e>
 800d654:	2b50      	cmp	r3, #80	; 0x50
 800d656:	d033      	beq.n	800d6c0 <HAL_TIM_ConfigClockSource+0xe0>
 800d658:	2b60      	cmp	r3, #96	; 0x60
 800d65a:	d041      	beq.n	800d6e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d65c:	e06a      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d662:	d066      	beq.n	800d732 <HAL_TIM_ConfigClockSource+0x152>
 800d664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d668:	d017      	beq.n	800d69a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d66a:	e063      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6818      	ldr	r0, [r3, #0]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	6899      	ldr	r1, [r3, #8]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	685a      	ldr	r2, [r3, #4]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	f000 fb64 	bl	800dd48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d68e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	609a      	str	r2, [r3, #8]
      break;
 800d698:	e04c      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6818      	ldr	r0, [r3, #0]
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	6899      	ldr	r1, [r3, #8]
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	685a      	ldr	r2, [r3, #4]
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	f000 fb4d 	bl	800dd48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	689a      	ldr	r2, [r3, #8]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6bc:	609a      	str	r2, [r3, #8]
      break;
 800d6be:	e039      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	6859      	ldr	r1, [r3, #4]
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	f000 fac1 	bl	800dc54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2150      	movs	r1, #80	; 0x50
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f000 fb1a 	bl	800dd12 <TIM_ITRx_SetConfig>
      break;
 800d6de:	e029      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	6859      	ldr	r1, [r3, #4]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	f000 fae0 	bl	800dcb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2160      	movs	r1, #96	; 0x60
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 fb0a 	bl	800dd12 <TIM_ITRx_SetConfig>
      break;
 800d6fe:	e019      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6818      	ldr	r0, [r3, #0]
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	6859      	ldr	r1, [r3, #4]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	461a      	mov	r2, r3
 800d70e:	f000 faa1 	bl	800dc54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2140      	movs	r1, #64	; 0x40
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 fafa 	bl	800dd12 <TIM_ITRx_SetConfig>
      break;
 800d71e:	e009      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4619      	mov	r1, r3
 800d72a:	4610      	mov	r0, r2
 800d72c:	f000 faf1 	bl	800dd12 <TIM_ITRx_SetConfig>
      break;
 800d730:	e000      	b.n	800d734 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d74e:	b480      	push	{r7}
 800d750:	b083      	sub	sp, #12
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d756:	bf00      	nop
 800d758:	370c      	adds	r7, #12
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d762:	b480      	push	{r7}
 800d764:	b083      	sub	sp, #12
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d76a:	bf00      	nop
 800d76c:	370c      	adds	r7, #12
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d776:	b480      	push	{r7}
 800d778:	b083      	sub	sp, #12
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d77e:	bf00      	nop
 800d780:	370c      	adds	r7, #12
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d78a:	b480      	push	{r7}
 800d78c:	b083      	sub	sp, #12
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d792:	bf00      	nop
 800d794:	370c      	adds	r7, #12
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr

0800d79e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d79e:	b480      	push	{r7}
 800d7a0:	b083      	sub	sp, #12
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7a6:	bf00      	nop
 800d7a8:	370c      	adds	r7, #12
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
	...

0800d7b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a40      	ldr	r2, [pc, #256]	; (800d8c8 <TIM_Base_SetConfig+0x114>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d013      	beq.n	800d7f4 <TIM_Base_SetConfig+0x40>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7d2:	d00f      	beq.n	800d7f4 <TIM_Base_SetConfig+0x40>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a3d      	ldr	r2, [pc, #244]	; (800d8cc <TIM_Base_SetConfig+0x118>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d00b      	beq.n	800d7f4 <TIM_Base_SetConfig+0x40>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a3c      	ldr	r2, [pc, #240]	; (800d8d0 <TIM_Base_SetConfig+0x11c>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d007      	beq.n	800d7f4 <TIM_Base_SetConfig+0x40>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4a3b      	ldr	r2, [pc, #236]	; (800d8d4 <TIM_Base_SetConfig+0x120>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d003      	beq.n	800d7f4 <TIM_Base_SetConfig+0x40>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	4a3a      	ldr	r2, [pc, #232]	; (800d8d8 <TIM_Base_SetConfig+0x124>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d108      	bne.n	800d806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	4313      	orrs	r3, r2
 800d804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a2f      	ldr	r2, [pc, #188]	; (800d8c8 <TIM_Base_SetConfig+0x114>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d02b      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d814:	d027      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a2c      	ldr	r2, [pc, #176]	; (800d8cc <TIM_Base_SetConfig+0x118>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d023      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a2b      	ldr	r2, [pc, #172]	; (800d8d0 <TIM_Base_SetConfig+0x11c>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d01f      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a2a      	ldr	r2, [pc, #168]	; (800d8d4 <TIM_Base_SetConfig+0x120>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d01b      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a29      	ldr	r2, [pc, #164]	; (800d8d8 <TIM_Base_SetConfig+0x124>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d017      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4a28      	ldr	r2, [pc, #160]	; (800d8dc <TIM_Base_SetConfig+0x128>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d013      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a27      	ldr	r2, [pc, #156]	; (800d8e0 <TIM_Base_SetConfig+0x12c>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d00f      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a26      	ldr	r2, [pc, #152]	; (800d8e4 <TIM_Base_SetConfig+0x130>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d00b      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4a25      	ldr	r2, [pc, #148]	; (800d8e8 <TIM_Base_SetConfig+0x134>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d007      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4a24      	ldr	r2, [pc, #144]	; (800d8ec <TIM_Base_SetConfig+0x138>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d003      	beq.n	800d866 <TIM_Base_SetConfig+0xb2>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4a23      	ldr	r2, [pc, #140]	; (800d8f0 <TIM_Base_SetConfig+0x13c>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d108      	bne.n	800d878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d86c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	4313      	orrs	r3, r2
 800d876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	695b      	ldr	r3, [r3, #20]
 800d882:	4313      	orrs	r3, r2
 800d884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	689a      	ldr	r2, [r3, #8]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	4a0a      	ldr	r2, [pc, #40]	; (800d8c8 <TIM_Base_SetConfig+0x114>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d003      	beq.n	800d8ac <TIM_Base_SetConfig+0xf8>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	4a0c      	ldr	r2, [pc, #48]	; (800d8d8 <TIM_Base_SetConfig+0x124>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d103      	bne.n	800d8b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	691a      	ldr	r2, [r3, #16]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	615a      	str	r2, [r3, #20]
}
 800d8ba:	bf00      	nop
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	40010000 	.word	0x40010000
 800d8cc:	40000400 	.word	0x40000400
 800d8d0:	40000800 	.word	0x40000800
 800d8d4:	40000c00 	.word	0x40000c00
 800d8d8:	40010400 	.word	0x40010400
 800d8dc:	40014000 	.word	0x40014000
 800d8e0:	40014400 	.word	0x40014400
 800d8e4:	40014800 	.word	0x40014800
 800d8e8:	40001800 	.word	0x40001800
 800d8ec:	40001c00 	.word	0x40001c00
 800d8f0:	40002000 	.word	0x40002000

0800d8f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b087      	sub	sp, #28
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6a1b      	ldr	r3, [r3, #32]
 800d902:	f023 0201 	bic.w	r2, r3, #1
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a1b      	ldr	r3, [r3, #32]
 800d90e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	699b      	ldr	r3, [r3, #24]
 800d91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f023 0303 	bic.w	r3, r3, #3
 800d92a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	4313      	orrs	r3, r2
 800d934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	f023 0302 	bic.w	r3, r3, #2
 800d93c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	697a      	ldr	r2, [r7, #20]
 800d944:	4313      	orrs	r3, r2
 800d946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4a20      	ldr	r2, [pc, #128]	; (800d9cc <TIM_OC1_SetConfig+0xd8>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d003      	beq.n	800d958 <TIM_OC1_SetConfig+0x64>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4a1f      	ldr	r2, [pc, #124]	; (800d9d0 <TIM_OC1_SetConfig+0xdc>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d10c      	bne.n	800d972 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	f023 0308 	bic.w	r3, r3, #8
 800d95e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	697a      	ldr	r2, [r7, #20]
 800d966:	4313      	orrs	r3, r2
 800d968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	f023 0304 	bic.w	r3, r3, #4
 800d970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	4a15      	ldr	r2, [pc, #84]	; (800d9cc <TIM_OC1_SetConfig+0xd8>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d003      	beq.n	800d982 <TIM_OC1_SetConfig+0x8e>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4a14      	ldr	r2, [pc, #80]	; (800d9d0 <TIM_OC1_SetConfig+0xdc>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d111      	bne.n	800d9a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	695b      	ldr	r3, [r3, #20]
 800d996:	693a      	ldr	r2, [r7, #16]
 800d998:	4313      	orrs	r3, r2
 800d99a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	699b      	ldr	r3, [r3, #24]
 800d9a0:	693a      	ldr	r2, [r7, #16]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	693a      	ldr	r2, [r7, #16]
 800d9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	685a      	ldr	r2, [r3, #4]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	697a      	ldr	r2, [r7, #20]
 800d9be:	621a      	str	r2, [r3, #32]
}
 800d9c0:	bf00      	nop
 800d9c2:	371c      	adds	r7, #28
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	40010000 	.word	0x40010000
 800d9d0:	40010400 	.word	0x40010400

0800d9d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b087      	sub	sp, #28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6a1b      	ldr	r3, [r3, #32]
 800d9e2:	f023 0210 	bic.w	r2, r3, #16
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6a1b      	ldr	r3, [r3, #32]
 800d9ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	021b      	lsls	r3, r3, #8
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	4313      	orrs	r3, r2
 800da16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	f023 0320 	bic.w	r3, r3, #32
 800da1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	011b      	lsls	r3, r3, #4
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	4313      	orrs	r3, r2
 800da2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a22      	ldr	r2, [pc, #136]	; (800dab8 <TIM_OC2_SetConfig+0xe4>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d003      	beq.n	800da3c <TIM_OC2_SetConfig+0x68>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a21      	ldr	r2, [pc, #132]	; (800dabc <TIM_OC2_SetConfig+0xe8>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d10d      	bne.n	800da58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	011b      	lsls	r3, r3, #4
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	4313      	orrs	r3, r2
 800da4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4a17      	ldr	r2, [pc, #92]	; (800dab8 <TIM_OC2_SetConfig+0xe4>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d003      	beq.n	800da68 <TIM_OC2_SetConfig+0x94>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4a16      	ldr	r2, [pc, #88]	; (800dabc <TIM_OC2_SetConfig+0xe8>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d113      	bne.n	800da90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	695b      	ldr	r3, [r3, #20]
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	693a      	ldr	r2, [r7, #16]
 800da80:	4313      	orrs	r3, r2
 800da82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	693a      	ldr	r2, [r7, #16]
 800da8c:	4313      	orrs	r3, r2
 800da8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	693a      	ldr	r2, [r7, #16]
 800da94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	685a      	ldr	r2, [r3, #4]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	697a      	ldr	r2, [r7, #20]
 800daa8:	621a      	str	r2, [r3, #32]
}
 800daaa:	bf00      	nop
 800daac:	371c      	adds	r7, #28
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	40010000 	.word	0x40010000
 800dabc:	40010400 	.word	0x40010400

0800dac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b087      	sub	sp, #28
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6a1b      	ldr	r3, [r3, #32]
 800dace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	69db      	ldr	r3, [r3, #28]
 800dae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f023 0303 	bic.w	r3, r3, #3
 800daf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	4313      	orrs	r3, r2
 800db00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	021b      	lsls	r3, r3, #8
 800db10:	697a      	ldr	r2, [r7, #20]
 800db12:	4313      	orrs	r3, r2
 800db14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4a21      	ldr	r2, [pc, #132]	; (800dba0 <TIM_OC3_SetConfig+0xe0>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d003      	beq.n	800db26 <TIM_OC3_SetConfig+0x66>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a20      	ldr	r2, [pc, #128]	; (800dba4 <TIM_OC3_SetConfig+0xe4>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d10d      	bne.n	800db42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	021b      	lsls	r3, r3, #8
 800db34:	697a      	ldr	r2, [r7, #20]
 800db36:	4313      	orrs	r3, r2
 800db38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a16      	ldr	r2, [pc, #88]	; (800dba0 <TIM_OC3_SetConfig+0xe0>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d003      	beq.n	800db52 <TIM_OC3_SetConfig+0x92>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4a15      	ldr	r2, [pc, #84]	; (800dba4 <TIM_OC3_SetConfig+0xe4>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d113      	bne.n	800db7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	695b      	ldr	r3, [r3, #20]
 800db66:	011b      	lsls	r3, r3, #4
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	699b      	ldr	r3, [r3, #24]
 800db72:	011b      	lsls	r3, r3, #4
 800db74:	693a      	ldr	r2, [r7, #16]
 800db76:	4313      	orrs	r3, r2
 800db78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	693a      	ldr	r2, [r7, #16]
 800db7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	685a      	ldr	r2, [r3, #4]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	621a      	str	r2, [r3, #32]
}
 800db94:	bf00      	nop
 800db96:	371c      	adds	r7, #28
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	40010000 	.word	0x40010000
 800dba4:	40010400 	.word	0x40010400

0800dba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b087      	sub	sp, #28
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a1b      	ldr	r3, [r3, #32]
 800dbb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6a1b      	ldr	r3, [r3, #32]
 800dbc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	69db      	ldr	r3, [r3, #28]
 800dbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	021b      	lsls	r3, r3, #8
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dbf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	031b      	lsls	r3, r3, #12
 800dbfa:	693a      	ldr	r2, [r7, #16]
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	4a12      	ldr	r2, [pc, #72]	; (800dc4c <TIM_OC4_SetConfig+0xa4>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d003      	beq.n	800dc10 <TIM_OC4_SetConfig+0x68>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4a11      	ldr	r2, [pc, #68]	; (800dc50 <TIM_OC4_SetConfig+0xa8>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d109      	bne.n	800dc24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	695b      	ldr	r3, [r3, #20]
 800dc1c:	019b      	lsls	r3, r3, #6
 800dc1e:	697a      	ldr	r2, [r7, #20]
 800dc20:	4313      	orrs	r3, r2
 800dc22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	685a      	ldr	r2, [r3, #4]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	693a      	ldr	r2, [r7, #16]
 800dc3c:	621a      	str	r2, [r3, #32]
}
 800dc3e:	bf00      	nop
 800dc40:	371c      	adds	r7, #28
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	40010000 	.word	0x40010000
 800dc50:	40010400 	.word	0x40010400

0800dc54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b087      	sub	sp, #28
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6a1b      	ldr	r3, [r3, #32]
 800dc64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	6a1b      	ldr	r3, [r3, #32]
 800dc6a:	f023 0201 	bic.w	r2, r3, #1
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	699b      	ldr	r3, [r3, #24]
 800dc76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dc7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	011b      	lsls	r3, r3, #4
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f023 030a 	bic.w	r3, r3, #10
 800dc90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc92:	697a      	ldr	r2, [r7, #20]
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	693a      	ldr	r2, [r7, #16]
 800dc9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	697a      	ldr	r2, [r7, #20]
 800dca4:	621a      	str	r2, [r3, #32]
}
 800dca6:	bf00      	nop
 800dca8:	371c      	adds	r7, #28
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr

0800dcb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcb2:	b480      	push	{r7}
 800dcb4:	b087      	sub	sp, #28
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	60f8      	str	r0, [r7, #12]
 800dcba:	60b9      	str	r1, [r7, #8]
 800dcbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6a1b      	ldr	r3, [r3, #32]
 800dcc2:	f023 0210 	bic.w	r2, r3, #16
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	699b      	ldr	r3, [r3, #24]
 800dcce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6a1b      	ldr	r3, [r3, #32]
 800dcd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dcdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	031b      	lsls	r3, r3, #12
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dcee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	011b      	lsls	r3, r3, #4
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	697a      	ldr	r2, [r7, #20]
 800dcfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	693a      	ldr	r2, [r7, #16]
 800dd04:	621a      	str	r2, [r3, #32]
}
 800dd06:	bf00      	nop
 800dd08:	371c      	adds	r7, #28
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dd12:	b480      	push	{r7}
 800dd14:	b085      	sub	sp, #20
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	f043 0307 	orr.w	r3, r3, #7
 800dd34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	609a      	str	r2, [r3, #8]
}
 800dd3c:	bf00      	nop
 800dd3e:	3714      	adds	r7, #20
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b087      	sub	sp, #28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dd62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	021a      	lsls	r2, r3, #8
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	431a      	orrs	r2, r3
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	697a      	ldr	r2, [r7, #20]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	697a      	ldr	r2, [r7, #20]
 800dd7a:	609a      	str	r2, [r3, #8]
}
 800dd7c:	bf00      	nop
 800dd7e:	371c      	adds	r7, #28
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b087      	sub	sp, #28
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	f003 031f 	and.w	r3, r3, #31
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800dda0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6a1a      	ldr	r2, [r3, #32]
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	43db      	mvns	r3, r3
 800ddaa:	401a      	ands	r2, r3
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	6a1a      	ldr	r2, [r3, #32]
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	f003 031f 	and.w	r3, r3, #31
 800ddba:	6879      	ldr	r1, [r7, #4]
 800ddbc:	fa01 f303 	lsl.w	r3, r1, r3
 800ddc0:	431a      	orrs	r2, r3
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	621a      	str	r2, [r3, #32]
}
 800ddc6:	bf00      	nop
 800ddc8:	371c      	adds	r7, #28
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
	...

0800ddd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d101      	bne.n	800ddec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dde8:	2302      	movs	r3, #2
 800ddea:	e05a      	b.n	800dea2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2202      	movs	r2, #2
 800ddf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	4313      	orrs	r3, r2
 800de1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	68fa      	ldr	r2, [r7, #12]
 800de24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a21      	ldr	r2, [pc, #132]	; (800deb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d022      	beq.n	800de76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de38:	d01d      	beq.n	800de76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a1d      	ldr	r2, [pc, #116]	; (800deb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d018      	beq.n	800de76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4a1b      	ldr	r2, [pc, #108]	; (800deb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d013      	beq.n	800de76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	4a1a      	ldr	r2, [pc, #104]	; (800debc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d00e      	beq.n	800de76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a18      	ldr	r2, [pc, #96]	; (800dec0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d009      	beq.n	800de76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4a17      	ldr	r2, [pc, #92]	; (800dec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800de68:	4293      	cmp	r3, r2
 800de6a:	d004      	beq.n	800de76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a15      	ldr	r2, [pc, #84]	; (800dec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d10c      	bne.n	800de90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	4313      	orrs	r3, r2
 800de86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	68ba      	ldr	r2, [r7, #8]
 800de8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3714      	adds	r7, #20
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	40010000 	.word	0x40010000
 800deb4:	40000400 	.word	0x40000400
 800deb8:	40000800 	.word	0x40000800
 800debc:	40000c00 	.word	0x40000c00
 800dec0:	40010400 	.word	0x40010400
 800dec4:	40014000 	.word	0x40014000
 800dec8:	40001800 	.word	0x40001800

0800decc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ded6:	2300      	movs	r3, #0
 800ded8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d101      	bne.n	800dee8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dee4:	2302      	movs	r3, #2
 800dee6:	e03d      	b.n	800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	4313      	orrs	r3, r2
 800defc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	4313      	orrs	r3, r2
 800df0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	4313      	orrs	r3, r2
 800df18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4313      	orrs	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	691b      	ldr	r3, [r3, #16]
 800df32:	4313      	orrs	r3, r2
 800df34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	695b      	ldr	r3, [r3, #20]
 800df40:	4313      	orrs	r3, r2
 800df42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	69db      	ldr	r3, [r3, #28]
 800df4e:	4313      	orrs	r3, r2
 800df50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	3714      	adds	r7, #20
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df78:	bf00      	nop
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df8c:	bf00      	nop
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e03f      	b.n	800e02a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d106      	bne.n	800dfc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7f8 fffa 	bl	8006fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2224      	movs	r2, #36	; 0x24
 800dfc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	68da      	ldr	r2, [r3, #12]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dfda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 fdb5 	bl	800eb4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	691a      	ldr	r2, [r3, #16]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	695a      	ldr	r2, [r3, #20]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	68da      	ldr	r2, [r3, #12]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2220      	movs	r2, #32
 800e01c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2220      	movs	r2, #32
 800e024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3708      	adds	r7, #8
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b088      	sub	sp, #32
 800e036:	af02      	add	r7, sp, #8
 800e038:	60f8      	str	r0, [r7, #12]
 800e03a:	60b9      	str	r1, [r7, #8]
 800e03c:	603b      	str	r3, [r7, #0]
 800e03e:	4613      	mov	r3, r2
 800e040:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800e042:	2300      	movs	r3, #0
 800e044:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	2b20      	cmp	r3, #32
 800e050:	f040 8083 	bne.w	800e15a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d002      	beq.n	800e060 <HAL_UART_Transmit+0x2e>
 800e05a:	88fb      	ldrh	r3, [r7, #6]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d101      	bne.n	800e064 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800e060:	2301      	movs	r3, #1
 800e062:	e07b      	b.n	800e15c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d101      	bne.n	800e072 <HAL_UART_Transmit+0x40>
 800e06e:	2302      	movs	r3, #2
 800e070:	e074      	b.n	800e15c <HAL_UART_Transmit+0x12a>
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2201      	movs	r2, #1
 800e076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2200      	movs	r2, #0
 800e07e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2221      	movs	r2, #33	; 0x21
 800e084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800e088:	f7f9 fbd6 	bl	8007838 <HAL_GetTick>
 800e08c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	88fa      	ldrh	r2, [r7, #6]
 800e092:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	88fa      	ldrh	r2, [r7, #6]
 800e098:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800e0a2:	e042      	b.n	800e12a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0ba:	d122      	bne.n	800e102 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	2180      	movs	r1, #128	; 0x80
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f000 fbbf 	bl	800e84a <UART_WaitOnFlagUntilTimeout>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d001      	beq.n	800e0d6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	e042      	b.n	800e15c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	881b      	ldrh	r3, [r3, #0]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	691b      	ldr	r3, [r3, #16]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d103      	bne.n	800e0fa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	3302      	adds	r3, #2
 800e0f6:	60bb      	str	r3, [r7, #8]
 800e0f8:	e017      	b.n	800e12a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	60bb      	str	r3, [r7, #8]
 800e100:	e013      	b.n	800e12a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	2200      	movs	r2, #0
 800e10a:	2180      	movs	r1, #128	; 0x80
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 fb9c 	bl	800e84a <UART_WaitOnFlagUntilTimeout>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800e118:	2303      	movs	r3, #3
 800e11a:	e01f      	b.n	800e15c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	1c5a      	adds	r2, r3, #1
 800e120:	60ba      	str	r2, [r7, #8]
 800e122:	781a      	ldrb	r2, [r3, #0]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e12e:	b29b      	uxth	r3, r3
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1b7      	bne.n	800e0a4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	2200      	movs	r2, #0
 800e13c:	2140      	movs	r1, #64	; 0x40
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f000 fb83 	bl	800e84a <UART_WaitOnFlagUntilTimeout>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800e14a:	2303      	movs	r3, #3
 800e14c:	e006      	b.n	800e15c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2220      	movs	r2, #32
 800e152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800e156:	2300      	movs	r3, #0
 800e158:	e000      	b.n	800e15c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800e15a:	2302      	movs	r3, #2
  }
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3718      	adds	r7, #24
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b088      	sub	sp, #32
 800e168:	af02      	add	r7, sp, #8
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	603b      	str	r3, [r7, #0]
 800e170:	4613      	mov	r3, r2
 800e172:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800e174:	2300      	movs	r3, #0
 800e176:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	2b20      	cmp	r3, #32
 800e182:	f040 8090 	bne.w	800e2a6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <HAL_UART_Receive+0x2e>
 800e18c:	88fb      	ldrh	r3, [r7, #6]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d101      	bne.n	800e196 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e192:	2301      	movs	r3, #1
 800e194:	e088      	b.n	800e2a8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d101      	bne.n	800e1a4 <HAL_UART_Receive+0x40>
 800e1a0:	2302      	movs	r3, #2
 800e1a2:	e081      	b.n	800e2a8 <HAL_UART_Receive+0x144>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2222      	movs	r2, #34	; 0x22
 800e1b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800e1ba:	f7f9 fb3d 	bl	8007838 <HAL_GetTick>
 800e1be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	88fa      	ldrh	r2, [r7, #6]
 800e1c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	88fa      	ldrh	r2, [r7, #6]
 800e1ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e1d4:	e05c      	b.n	800e290 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1ec:	d12b      	bne.n	800e246 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	2120      	movs	r1, #32
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f000 fb26 	bl	800e84a <UART_WaitOnFlagUntilTimeout>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d001      	beq.n	800e208 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800e204:	2303      	movs	r3, #3
 800e206:	e04f      	b.n	800e2a8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	691b      	ldr	r3, [r3, #16]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10c      	bne.n	800e22e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e220:	b29a      	uxth	r2, r3
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	3302      	adds	r3, #2
 800e22a:	60bb      	str	r3, [r7, #8]
 800e22c:	e030      	b.n	800e290 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	b29b      	uxth	r3, r3
 800e236:	b2db      	uxtb	r3, r3
 800e238:	b29a      	uxth	r2, r3
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	3301      	adds	r3, #1
 800e242:	60bb      	str	r3, [r7, #8]
 800e244:	e024      	b.n	800e290 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	2200      	movs	r2, #0
 800e24e:	2120      	movs	r1, #32
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f000 fafa 	bl	800e84a <UART_WaitOnFlagUntilTimeout>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800e25c:	2303      	movs	r3, #3
 800e25e:	e023      	b.n	800e2a8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	691b      	ldr	r3, [r3, #16]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d108      	bne.n	800e27a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6859      	ldr	r1, [r3, #4]
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	1c5a      	adds	r2, r3, #1
 800e272:	60ba      	str	r2, [r7, #8]
 800e274:	b2ca      	uxtb	r2, r1
 800e276:	701a      	strb	r2, [r3, #0]
 800e278:	e00a      	b.n	800e290 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	b2da      	uxtb	r2, r3
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	1c59      	adds	r1, r3, #1
 800e286:	60b9      	str	r1, [r7, #8]
 800e288:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e28c:	b2d2      	uxtb	r2, r2
 800e28e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e294:	b29b      	uxth	r3, r3
 800e296:	2b00      	cmp	r3, #0
 800e298:	d19d      	bne.n	800e1d6 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2220      	movs	r2, #32
 800e29e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	e000      	b.n	800e2a8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e2a6:	2302      	movs	r3, #2
  }
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3718      	adds	r7, #24
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b20      	cmp	r3, #32
 800e2c8:	d153      	bne.n	800e372 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d002      	beq.n	800e2d6 <HAL_UART_Transmit_DMA+0x26>
 800e2d0:	88fb      	ldrh	r3, [r7, #6]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d101      	bne.n	800e2da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e04c      	b.n	800e374 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d101      	bne.n	800e2e8 <HAL_UART_Transmit_DMA+0x38>
 800e2e4:	2302      	movs	r3, #2
 800e2e6:	e045      	b.n	800e374 <HAL_UART_Transmit_DMA+0xc4>
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	88fa      	ldrh	r2, [r7, #6]
 800e2fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	88fa      	ldrh	r2, [r7, #6]
 800e300:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2200      	movs	r2, #0
 800e306:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2221      	movs	r2, #33	; 0x21
 800e30c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e314:	4a19      	ldr	r2, [pc, #100]	; (800e37c <HAL_UART_Transmit_DMA+0xcc>)
 800e316:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31c:	4a18      	ldr	r2, [pc, #96]	; (800e380 <HAL_UART_Transmit_DMA+0xd0>)
 800e31e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e324:	4a17      	ldr	r2, [pc, #92]	; (800e384 <HAL_UART_Transmit_DMA+0xd4>)
 800e326:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e32c:	2200      	movs	r2, #0
 800e32e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e330:	f107 0308 	add.w	r3, r7, #8
 800e334:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	6819      	ldr	r1, [r3, #0]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	3304      	adds	r3, #4
 800e344:	461a      	mov	r2, r3
 800e346:	88fb      	ldrh	r3, [r7, #6]
 800e348:	f7fa f858 	bl	80083fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e354:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2200      	movs	r2, #0
 800e35a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	695a      	ldr	r2, [r3, #20]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e36c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	e000      	b.n	800e374 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e372:	2302      	movs	r3, #2
  }
}
 800e374:	4618      	mov	r0, r3
 800e376:	3718      	adds	r7, #24
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	0800e6c5 	.word	0x0800e6c5
 800e380:	0800e717 	.word	0x0800e717
 800e384:	0800e7b7 	.word	0x0800e7b7

0800e388 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	4613      	mov	r3, r2
 800e394:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b20      	cmp	r3, #32
 800e3a0:	d166      	bne.n	800e470 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d002      	beq.n	800e3ae <HAL_UART_Receive_DMA+0x26>
 800e3a8:	88fb      	ldrh	r3, [r7, #6]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d101      	bne.n	800e3b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e05f      	b.n	800e472 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d101      	bne.n	800e3c0 <HAL_UART_Receive_DMA+0x38>
 800e3bc:	2302      	movs	r3, #2
 800e3be:	e058      	b.n	800e472 <HAL_UART_Receive_DMA+0xea>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	88fa      	ldrh	r2, [r7, #6]
 800e3d2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2222      	movs	r2, #34	; 0x22
 800e3de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e6:	4a25      	ldr	r2, [pc, #148]	; (800e47c <HAL_UART_Receive_DMA+0xf4>)
 800e3e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ee:	4a24      	ldr	r2, [pc, #144]	; (800e480 <HAL_UART_Receive_DMA+0xf8>)
 800e3f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f6:	4a23      	ldr	r2, [pc, #140]	; (800e484 <HAL_UART_Receive_DMA+0xfc>)
 800e3f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3fe:	2200      	movs	r2, #0
 800e400:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800e402:	f107 0308 	add.w	r3, r7, #8
 800e406:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	3304      	adds	r3, #4
 800e412:	4619      	mov	r1, r3
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	88fb      	ldrh	r3, [r7, #6]
 800e41a:	f7f9 ffef 	bl	80083fc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800e41e:	2300      	movs	r3, #0
 800e420:	613b      	str	r3, [r7, #16]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	613b      	str	r3, [r7, #16]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	613b      	str	r3, [r7, #16]
 800e432:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	68da      	ldr	r2, [r3, #12]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e44a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	695a      	ldr	r2, [r3, #20]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f042 0201 	orr.w	r2, r2, #1
 800e45a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	695a      	ldr	r2, [r3, #20]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e46a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	e000      	b.n	800e472 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e470:	2302      	movs	r3, #2
  }
}
 800e472:	4618      	mov	r0, r3
 800e474:	3718      	adds	r7, #24
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	0800e733 	.word	0x0800e733
 800e480:	0800e79b 	.word	0x0800e79b
 800e484:	0800e7b7 	.word	0x0800e7b7

0800e488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b088      	sub	sp, #32
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	695b      	ldr	r3, [r3, #20]
 800e4a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	f003 030f 	and.w	r3, r3, #15
 800e4b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d10d      	bne.n	800e4da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	f003 0320 	and.w	r3, r3, #32
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d008      	beq.n	800e4da <HAL_UART_IRQHandler+0x52>
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	f003 0320 	and.w	r3, r3, #32
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 fab9 	bl	800ea4a <UART_Receive_IT>
      return;
 800e4d8:	e0d1      	b.n	800e67e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	f000 80b0 	beq.w	800e642 <HAL_UART_IRQHandler+0x1ba>
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	f003 0301 	and.w	r3, r3, #1
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d105      	bne.n	800e4f8 <HAL_UART_IRQHandler+0x70>
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f000 80a5 	beq.w	800e642 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	f003 0301 	and.w	r3, r3, #1
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00a      	beq.n	800e518 <HAL_UART_IRQHandler+0x90>
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d005      	beq.n	800e518 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e510:	f043 0201 	orr.w	r2, r3, #1
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	f003 0304 	and.w	r3, r3, #4
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00a      	beq.n	800e538 <HAL_UART_IRQHandler+0xb0>
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	f003 0301 	and.w	r3, r3, #1
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d005      	beq.n	800e538 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e530:	f043 0202 	orr.w	r2, r3, #2
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	f003 0302 	and.w	r3, r3, #2
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00a      	beq.n	800e558 <HAL_UART_IRQHandler+0xd0>
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d005      	beq.n	800e558 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e550:	f043 0204 	orr.w	r2, r3, #4
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	f003 0308 	and.w	r3, r3, #8
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00f      	beq.n	800e582 <HAL_UART_IRQHandler+0xfa>
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	f003 0320 	and.w	r3, r3, #32
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d104      	bne.n	800e576 <HAL_UART_IRQHandler+0xee>
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	f003 0301 	and.w	r3, r3, #1
 800e572:	2b00      	cmp	r3, #0
 800e574:	d005      	beq.n	800e582 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e57a:	f043 0208 	orr.w	r2, r3, #8
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e586:	2b00      	cmp	r3, #0
 800e588:	d078      	beq.n	800e67c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	f003 0320 	and.w	r3, r3, #32
 800e590:	2b00      	cmp	r3, #0
 800e592:	d007      	beq.n	800e5a4 <HAL_UART_IRQHandler+0x11c>
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	f003 0320 	and.w	r3, r3, #32
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d002      	beq.n	800e5a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fa53 	bl	800ea4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	695b      	ldr	r3, [r3, #20]
 800e5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ae:	2b40      	cmp	r3, #64	; 0x40
 800e5b0:	bf0c      	ite	eq
 800e5b2:	2301      	moveq	r3, #1
 800e5b4:	2300      	movne	r3, #0
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5be:	f003 0308 	and.w	r3, r3, #8
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d102      	bne.n	800e5cc <HAL_UART_IRQHandler+0x144>
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d031      	beq.n	800e630 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 f99c 	bl	800e90a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	695b      	ldr	r3, [r3, #20]
 800e5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5dc:	2b40      	cmp	r3, #64	; 0x40
 800e5de:	d123      	bne.n	800e628 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	695a      	ldr	r2, [r3, #20]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d013      	beq.n	800e620 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5fc:	4a21      	ldr	r2, [pc, #132]	; (800e684 <HAL_UART_IRQHandler+0x1fc>)
 800e5fe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e604:	4618      	mov	r0, r3
 800e606:	f7f9 ff51 	bl	80084ac <HAL_DMA_Abort_IT>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d016      	beq.n	800e63e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e61a:	4610      	mov	r0, r2
 800e61c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e61e:	e00e      	b.n	800e63e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f845 	bl	800e6b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e626:	e00a      	b.n	800e63e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f000 f841 	bl	800e6b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e62e:	e006      	b.n	800e63e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 f83d 	bl	800e6b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2200      	movs	r2, #0
 800e63a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e63c:	e01e      	b.n	800e67c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e63e:	bf00      	nop
    return;
 800e640:	e01c      	b.n	800e67c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d008      	beq.n	800e65e <HAL_UART_IRQHandler+0x1d6>
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e652:	2b00      	cmp	r3, #0
 800e654:	d003      	beq.n	800e65e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f989 	bl	800e96e <UART_Transmit_IT>
    return;
 800e65c:	e00f      	b.n	800e67e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00a      	beq.n	800e67e <HAL_UART_IRQHandler+0x1f6>
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d005      	beq.n	800e67e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 f9d1 	bl	800ea1a <UART_EndTransmit_IT>
    return;
 800e678:	bf00      	nop
 800e67a:	e000      	b.n	800e67e <HAL_UART_IRQHandler+0x1f6>
    return;
 800e67c:	bf00      	nop
  }
}
 800e67e:	3720      	adds	r7, #32
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	0800e947 	.word	0x0800e947

0800e688 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e690:	bf00      	nop
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e6a4:	bf00      	nop
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e6b8:	bf00      	nop
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6d0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d113      	bne.n	800e708 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	695a      	ldr	r2, [r3, #20]
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e6f4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68da      	ldr	r2, [r3, #12]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e704:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e706:	e002      	b.n	800e70e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f7ff ffbd 	bl	800e688 <HAL_UART_TxCpltCallback>
}
 800e70e:	bf00      	nop
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b084      	sub	sp, #16
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e722:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f7ff ffb9 	bl	800e69c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e72a:	bf00      	nop
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b084      	sub	sp, #16
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e73e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d11e      	bne.n	800e78c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2200      	movs	r2, #0
 800e752:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	68da      	ldr	r2, [r3, #12]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e762:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	695a      	ldr	r2, [r3, #20]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f022 0201 	bic.w	r2, r2, #1
 800e772:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	695a      	ldr	r2, [r3, #20]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e782:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2220      	movs	r2, #32
 800e788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800e78c:	68f8      	ldr	r0, [r7, #12]
 800e78e:	f7f8 f999 	bl	8006ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e792:	bf00      	nop
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}

0800e79a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e79a:	b580      	push	{r7, lr}
 800e79c:	b084      	sub	sp, #16
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f7f8 f996 	bl	8006ada <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7ae:	bf00      	nop
 800e7b0:	3710      	adds	r7, #16
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}

0800e7b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b084      	sub	sp, #16
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	695b      	ldr	r3, [r3, #20]
 800e7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7d2:	2b80      	cmp	r3, #128	; 0x80
 800e7d4:	bf0c      	ite	eq
 800e7d6:	2301      	moveq	r3, #1
 800e7d8:	2300      	movne	r3, #0
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	2b21      	cmp	r3, #33	; 0x21
 800e7e8:	d108      	bne.n	800e7fc <UART_DMAError+0x46>
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d005      	beq.n	800e7fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e7f6:	68b8      	ldr	r0, [r7, #8]
 800e7f8:	f000 f871 	bl	800e8de <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e806:	2b40      	cmp	r3, #64	; 0x40
 800e808:	bf0c      	ite	eq
 800e80a:	2301      	moveq	r3, #1
 800e80c:	2300      	movne	r3, #0
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	2b22      	cmp	r3, #34	; 0x22
 800e81c:	d108      	bne.n	800e830 <UART_DMAError+0x7a>
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d005      	beq.n	800e830 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	2200      	movs	r2, #0
 800e828:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e82a:	68b8      	ldr	r0, [r7, #8]
 800e82c:	f000 f86d 	bl	800e90a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e834:	f043 0210 	orr.w	r2, r3, #16
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e83c:	68b8      	ldr	r0, [r7, #8]
 800e83e:	f7ff ff37 	bl	800e6b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e842:	bf00      	nop
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b084      	sub	sp, #16
 800e84e:	af00      	add	r7, sp, #0
 800e850:	60f8      	str	r0, [r7, #12]
 800e852:	60b9      	str	r1, [r7, #8]
 800e854:	603b      	str	r3, [r7, #0]
 800e856:	4613      	mov	r3, r2
 800e858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e85a:	e02c      	b.n	800e8b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e862:	d028      	beq.n	800e8b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d007      	beq.n	800e87a <UART_WaitOnFlagUntilTimeout+0x30>
 800e86a:	f7f8 ffe5 	bl	8007838 <HAL_GetTick>
 800e86e:	4602      	mov	r2, r0
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	69ba      	ldr	r2, [r7, #24]
 800e876:	429a      	cmp	r2, r3
 800e878:	d21d      	bcs.n	800e8b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	68da      	ldr	r2, [r3, #12]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e888:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	695a      	ldr	r2, [r3, #20]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f022 0201 	bic.w	r2, r2, #1
 800e898:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2220      	movs	r2, #32
 800e89e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2220      	movs	r2, #32
 800e8a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800e8b2:	2303      	movs	r3, #3
 800e8b4:	e00f      	b.n	800e8d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	4013      	ands	r3, r2
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	bf0c      	ite	eq
 800e8c6:	2301      	moveq	r3, #1
 800e8c8:	2300      	movne	r3, #0
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	79fb      	ldrb	r3, [r7, #7]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d0c3      	beq.n	800e85c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e8de:	b480      	push	{r7}
 800e8e0:	b083      	sub	sp, #12
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	68da      	ldr	r2, [r3, #12]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e8f4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2220      	movs	r2, #32
 800e8fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e8fe:	bf00      	nop
 800e900:	370c      	adds	r7, #12
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr

0800e90a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e90a:	b480      	push	{r7}
 800e90c:	b083      	sub	sp, #12
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	68da      	ldr	r2, [r3, #12]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e920:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	695a      	ldr	r2, [r3, #20]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f022 0201 	bic.w	r2, r2, #1
 800e930:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2220      	movs	r2, #32
 800e936:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e93a:	bf00      	nop
 800e93c:	370c      	adds	r7, #12
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr

0800e946 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b084      	sub	sp, #16
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e952:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2200      	movs	r2, #0
 800e958:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2200      	movs	r2, #0
 800e95e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f7ff fea5 	bl	800e6b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e966:	bf00      	nop
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}

0800e96e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e96e:	b480      	push	{r7}
 800e970:	b085      	sub	sp, #20
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	2b21      	cmp	r3, #33	; 0x21
 800e980:	d144      	bne.n	800ea0c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e98a:	d11a      	bne.n	800e9c2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6a1b      	ldr	r3, [r3, #32]
 800e990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	881b      	ldrh	r3, [r3, #0]
 800e996:	461a      	mov	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e9a0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d105      	bne.n	800e9b6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a1b      	ldr	r3, [r3, #32]
 800e9ae:	1c9a      	adds	r2, r3, #2
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	621a      	str	r2, [r3, #32]
 800e9b4:	e00e      	b.n	800e9d4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6a1b      	ldr	r3, [r3, #32]
 800e9ba:	1c5a      	adds	r2, r3, #1
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	621a      	str	r2, [r3, #32]
 800e9c0:	e008      	b.n	800e9d4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6a1b      	ldr	r3, [r3, #32]
 800e9c6:	1c59      	adds	r1, r3, #1
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	6211      	str	r1, [r2, #32]
 800e9cc:	781a      	ldrb	r2, [r3, #0]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d10f      	bne.n	800ea08 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	68da      	ldr	r2, [r3, #12]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e9f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68da      	ldr	r2, [r3, #12]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	e000      	b.n	800ea0e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ea0c:	2302      	movs	r3, #2
  }
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b082      	sub	sp, #8
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68da      	ldr	r2, [r3, #12]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2220      	movs	r2, #32
 800ea36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f7ff fe24 	bl	800e688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}

0800ea4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	b084      	sub	sp, #16
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	2b22      	cmp	r3, #34	; 0x22
 800ea5c:	d171      	bne.n	800eb42 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea66:	d123      	bne.n	800eab0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea6c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	691b      	ldr	r3, [r3, #16]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d10e      	bne.n	800ea94 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea8c:	1c9a      	adds	r2, r3, #2
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	629a      	str	r2, [r3, #40]	; 0x28
 800ea92:	e029      	b.n	800eae8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa8:	1c5a      	adds	r2, r3, #1
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	629a      	str	r2, [r3, #40]	; 0x28
 800eaae:	e01b      	b.n	800eae8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	691b      	ldr	r3, [r3, #16]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d10a      	bne.n	800eace <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	6858      	ldr	r0, [r3, #4]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac2:	1c59      	adds	r1, r3, #1
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	6291      	str	r1, [r2, #40]	; 0x28
 800eac8:	b2c2      	uxtb	r2, r0
 800eaca:	701a      	strb	r2, [r3, #0]
 800eacc:	e00c      	b.n	800eae8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eada:	1c58      	adds	r0, r3, #1
 800eadc:	6879      	ldr	r1, [r7, #4]
 800eade:	6288      	str	r0, [r1, #40]	; 0x28
 800eae0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eae4:	b2d2      	uxtb	r2, r2
 800eae6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d120      	bne.n	800eb3e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68da      	ldr	r2, [r3, #12]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f022 0220 	bic.w	r2, r2, #32
 800eb0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	68da      	ldr	r2, [r3, #12]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eb1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	695a      	ldr	r2, [r3, #20]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f022 0201 	bic.w	r2, r2, #1
 800eb2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2220      	movs	r2, #32
 800eb30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7f7 ffc5 	bl	8006ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	e002      	b.n	800eb44 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e000      	b.n	800eb44 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800eb42:	2302      	movs	r3, #2
  }
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb50:	b085      	sub	sp, #20
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	691b      	ldr	r3, [r3, #16]
 800eb5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	68da      	ldr	r2, [r3, #12]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	430a      	orrs	r2, r1
 800eb6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	689a      	ldr	r2, [r3, #8]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	431a      	orrs	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	695b      	ldr	r3, [r3, #20]
 800eb7a:	431a      	orrs	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	69db      	ldr	r3, [r3, #28]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800eb8e:	f023 030c 	bic.w	r3, r3, #12
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	6812      	ldr	r2, [r2, #0]
 800eb96:	68f9      	ldr	r1, [r7, #12]
 800eb98:	430b      	orrs	r3, r1
 800eb9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	695b      	ldr	r3, [r3, #20]
 800eba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	699a      	ldr	r2, [r3, #24]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	430a      	orrs	r2, r1
 800ebb0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	69db      	ldr	r3, [r3, #28]
 800ebb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebba:	f040 818b 	bne.w	800eed4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	4ac1      	ldr	r2, [pc, #772]	; (800eec8 <UART_SetConfig+0x37c>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d005      	beq.n	800ebd4 <UART_SetConfig+0x88>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4abf      	ldr	r2, [pc, #764]	; (800eecc <UART_SetConfig+0x380>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	f040 80bd 	bne.w	800ed4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ebd4:	f7fd fc40 	bl	800c458 <HAL_RCC_GetPCLK2Freq>
 800ebd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	461d      	mov	r5, r3
 800ebde:	f04f 0600 	mov.w	r6, #0
 800ebe2:	46a8      	mov	r8, r5
 800ebe4:	46b1      	mov	r9, r6
 800ebe6:	eb18 0308 	adds.w	r3, r8, r8
 800ebea:	eb49 0409 	adc.w	r4, r9, r9
 800ebee:	4698      	mov	r8, r3
 800ebf0:	46a1      	mov	r9, r4
 800ebf2:	eb18 0805 	adds.w	r8, r8, r5
 800ebf6:	eb49 0906 	adc.w	r9, r9, r6
 800ebfa:	f04f 0100 	mov.w	r1, #0
 800ebfe:	f04f 0200 	mov.w	r2, #0
 800ec02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ec06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ec0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ec0e:	4688      	mov	r8, r1
 800ec10:	4691      	mov	r9, r2
 800ec12:	eb18 0005 	adds.w	r0, r8, r5
 800ec16:	eb49 0106 	adc.w	r1, r9, r6
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	461d      	mov	r5, r3
 800ec20:	f04f 0600 	mov.w	r6, #0
 800ec24:	196b      	adds	r3, r5, r5
 800ec26:	eb46 0406 	adc.w	r4, r6, r6
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	4623      	mov	r3, r4
 800ec2e:	f7f2 f80b 	bl	8000c48 <__aeabi_uldivmod>
 800ec32:	4603      	mov	r3, r0
 800ec34:	460c      	mov	r4, r1
 800ec36:	461a      	mov	r2, r3
 800ec38:	4ba5      	ldr	r3, [pc, #660]	; (800eed0 <UART_SetConfig+0x384>)
 800ec3a:	fba3 2302 	umull	r2, r3, r3, r2
 800ec3e:	095b      	lsrs	r3, r3, #5
 800ec40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	461d      	mov	r5, r3
 800ec48:	f04f 0600 	mov.w	r6, #0
 800ec4c:	46a9      	mov	r9, r5
 800ec4e:	46b2      	mov	sl, r6
 800ec50:	eb19 0309 	adds.w	r3, r9, r9
 800ec54:	eb4a 040a 	adc.w	r4, sl, sl
 800ec58:	4699      	mov	r9, r3
 800ec5a:	46a2      	mov	sl, r4
 800ec5c:	eb19 0905 	adds.w	r9, r9, r5
 800ec60:	eb4a 0a06 	adc.w	sl, sl, r6
 800ec64:	f04f 0100 	mov.w	r1, #0
 800ec68:	f04f 0200 	mov.w	r2, #0
 800ec6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ec70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ec74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ec78:	4689      	mov	r9, r1
 800ec7a:	4692      	mov	sl, r2
 800ec7c:	eb19 0005 	adds.w	r0, r9, r5
 800ec80:	eb4a 0106 	adc.w	r1, sl, r6
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	461d      	mov	r5, r3
 800ec8a:	f04f 0600 	mov.w	r6, #0
 800ec8e:	196b      	adds	r3, r5, r5
 800ec90:	eb46 0406 	adc.w	r4, r6, r6
 800ec94:	461a      	mov	r2, r3
 800ec96:	4623      	mov	r3, r4
 800ec98:	f7f1 ffd6 	bl	8000c48 <__aeabi_uldivmod>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	460c      	mov	r4, r1
 800eca0:	461a      	mov	r2, r3
 800eca2:	4b8b      	ldr	r3, [pc, #556]	; (800eed0 <UART_SetConfig+0x384>)
 800eca4:	fba3 1302 	umull	r1, r3, r3, r2
 800eca8:	095b      	lsrs	r3, r3, #5
 800ecaa:	2164      	movs	r1, #100	; 0x64
 800ecac:	fb01 f303 	mul.w	r3, r1, r3
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	00db      	lsls	r3, r3, #3
 800ecb4:	3332      	adds	r3, #50	; 0x32
 800ecb6:	4a86      	ldr	r2, [pc, #536]	; (800eed0 <UART_SetConfig+0x384>)
 800ecb8:	fba2 2303 	umull	r2, r3, r2, r3
 800ecbc:	095b      	lsrs	r3, r3, #5
 800ecbe:	005b      	lsls	r3, r3, #1
 800ecc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ecc4:	4498      	add	r8, r3
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	461d      	mov	r5, r3
 800ecca:	f04f 0600 	mov.w	r6, #0
 800ecce:	46a9      	mov	r9, r5
 800ecd0:	46b2      	mov	sl, r6
 800ecd2:	eb19 0309 	adds.w	r3, r9, r9
 800ecd6:	eb4a 040a 	adc.w	r4, sl, sl
 800ecda:	4699      	mov	r9, r3
 800ecdc:	46a2      	mov	sl, r4
 800ecde:	eb19 0905 	adds.w	r9, r9, r5
 800ece2:	eb4a 0a06 	adc.w	sl, sl, r6
 800ece6:	f04f 0100 	mov.w	r1, #0
 800ecea:	f04f 0200 	mov.w	r2, #0
 800ecee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ecf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ecf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ecfa:	4689      	mov	r9, r1
 800ecfc:	4692      	mov	sl, r2
 800ecfe:	eb19 0005 	adds.w	r0, r9, r5
 800ed02:	eb4a 0106 	adc.w	r1, sl, r6
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	461d      	mov	r5, r3
 800ed0c:	f04f 0600 	mov.w	r6, #0
 800ed10:	196b      	adds	r3, r5, r5
 800ed12:	eb46 0406 	adc.w	r4, r6, r6
 800ed16:	461a      	mov	r2, r3
 800ed18:	4623      	mov	r3, r4
 800ed1a:	f7f1 ff95 	bl	8000c48 <__aeabi_uldivmod>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	460c      	mov	r4, r1
 800ed22:	461a      	mov	r2, r3
 800ed24:	4b6a      	ldr	r3, [pc, #424]	; (800eed0 <UART_SetConfig+0x384>)
 800ed26:	fba3 1302 	umull	r1, r3, r3, r2
 800ed2a:	095b      	lsrs	r3, r3, #5
 800ed2c:	2164      	movs	r1, #100	; 0x64
 800ed2e:	fb01 f303 	mul.w	r3, r1, r3
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	00db      	lsls	r3, r3, #3
 800ed36:	3332      	adds	r3, #50	; 0x32
 800ed38:	4a65      	ldr	r2, [pc, #404]	; (800eed0 <UART_SetConfig+0x384>)
 800ed3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed3e:	095b      	lsrs	r3, r3, #5
 800ed40:	f003 0207 	and.w	r2, r3, #7
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4442      	add	r2, r8
 800ed4a:	609a      	str	r2, [r3, #8]
 800ed4c:	e26f      	b.n	800f22e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ed4e:	f7fd fb6f 	bl	800c430 <HAL_RCC_GetPCLK1Freq>
 800ed52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	461d      	mov	r5, r3
 800ed58:	f04f 0600 	mov.w	r6, #0
 800ed5c:	46a8      	mov	r8, r5
 800ed5e:	46b1      	mov	r9, r6
 800ed60:	eb18 0308 	adds.w	r3, r8, r8
 800ed64:	eb49 0409 	adc.w	r4, r9, r9
 800ed68:	4698      	mov	r8, r3
 800ed6a:	46a1      	mov	r9, r4
 800ed6c:	eb18 0805 	adds.w	r8, r8, r5
 800ed70:	eb49 0906 	adc.w	r9, r9, r6
 800ed74:	f04f 0100 	mov.w	r1, #0
 800ed78:	f04f 0200 	mov.w	r2, #0
 800ed7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ed80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ed84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ed88:	4688      	mov	r8, r1
 800ed8a:	4691      	mov	r9, r2
 800ed8c:	eb18 0005 	adds.w	r0, r8, r5
 800ed90:	eb49 0106 	adc.w	r1, r9, r6
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	461d      	mov	r5, r3
 800ed9a:	f04f 0600 	mov.w	r6, #0
 800ed9e:	196b      	adds	r3, r5, r5
 800eda0:	eb46 0406 	adc.w	r4, r6, r6
 800eda4:	461a      	mov	r2, r3
 800eda6:	4623      	mov	r3, r4
 800eda8:	f7f1 ff4e 	bl	8000c48 <__aeabi_uldivmod>
 800edac:	4603      	mov	r3, r0
 800edae:	460c      	mov	r4, r1
 800edb0:	461a      	mov	r2, r3
 800edb2:	4b47      	ldr	r3, [pc, #284]	; (800eed0 <UART_SetConfig+0x384>)
 800edb4:	fba3 2302 	umull	r2, r3, r3, r2
 800edb8:	095b      	lsrs	r3, r3, #5
 800edba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	461d      	mov	r5, r3
 800edc2:	f04f 0600 	mov.w	r6, #0
 800edc6:	46a9      	mov	r9, r5
 800edc8:	46b2      	mov	sl, r6
 800edca:	eb19 0309 	adds.w	r3, r9, r9
 800edce:	eb4a 040a 	adc.w	r4, sl, sl
 800edd2:	4699      	mov	r9, r3
 800edd4:	46a2      	mov	sl, r4
 800edd6:	eb19 0905 	adds.w	r9, r9, r5
 800edda:	eb4a 0a06 	adc.w	sl, sl, r6
 800edde:	f04f 0100 	mov.w	r1, #0
 800ede2:	f04f 0200 	mov.w	r2, #0
 800ede6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800edea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800edee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800edf2:	4689      	mov	r9, r1
 800edf4:	4692      	mov	sl, r2
 800edf6:	eb19 0005 	adds.w	r0, r9, r5
 800edfa:	eb4a 0106 	adc.w	r1, sl, r6
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	461d      	mov	r5, r3
 800ee04:	f04f 0600 	mov.w	r6, #0
 800ee08:	196b      	adds	r3, r5, r5
 800ee0a:	eb46 0406 	adc.w	r4, r6, r6
 800ee0e:	461a      	mov	r2, r3
 800ee10:	4623      	mov	r3, r4
 800ee12:	f7f1 ff19 	bl	8000c48 <__aeabi_uldivmod>
 800ee16:	4603      	mov	r3, r0
 800ee18:	460c      	mov	r4, r1
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	4b2c      	ldr	r3, [pc, #176]	; (800eed0 <UART_SetConfig+0x384>)
 800ee1e:	fba3 1302 	umull	r1, r3, r3, r2
 800ee22:	095b      	lsrs	r3, r3, #5
 800ee24:	2164      	movs	r1, #100	; 0x64
 800ee26:	fb01 f303 	mul.w	r3, r1, r3
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	00db      	lsls	r3, r3, #3
 800ee2e:	3332      	adds	r3, #50	; 0x32
 800ee30:	4a27      	ldr	r2, [pc, #156]	; (800eed0 <UART_SetConfig+0x384>)
 800ee32:	fba2 2303 	umull	r2, r3, r2, r3
 800ee36:	095b      	lsrs	r3, r3, #5
 800ee38:	005b      	lsls	r3, r3, #1
 800ee3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ee3e:	4498      	add	r8, r3
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	461d      	mov	r5, r3
 800ee44:	f04f 0600 	mov.w	r6, #0
 800ee48:	46a9      	mov	r9, r5
 800ee4a:	46b2      	mov	sl, r6
 800ee4c:	eb19 0309 	adds.w	r3, r9, r9
 800ee50:	eb4a 040a 	adc.w	r4, sl, sl
 800ee54:	4699      	mov	r9, r3
 800ee56:	46a2      	mov	sl, r4
 800ee58:	eb19 0905 	adds.w	r9, r9, r5
 800ee5c:	eb4a 0a06 	adc.w	sl, sl, r6
 800ee60:	f04f 0100 	mov.w	r1, #0
 800ee64:	f04f 0200 	mov.w	r2, #0
 800ee68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ee6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ee70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ee74:	4689      	mov	r9, r1
 800ee76:	4692      	mov	sl, r2
 800ee78:	eb19 0005 	adds.w	r0, r9, r5
 800ee7c:	eb4a 0106 	adc.w	r1, sl, r6
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	461d      	mov	r5, r3
 800ee86:	f04f 0600 	mov.w	r6, #0
 800ee8a:	196b      	adds	r3, r5, r5
 800ee8c:	eb46 0406 	adc.w	r4, r6, r6
 800ee90:	461a      	mov	r2, r3
 800ee92:	4623      	mov	r3, r4
 800ee94:	f7f1 fed8 	bl	8000c48 <__aeabi_uldivmod>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	4b0c      	ldr	r3, [pc, #48]	; (800eed0 <UART_SetConfig+0x384>)
 800eea0:	fba3 1302 	umull	r1, r3, r3, r2
 800eea4:	095b      	lsrs	r3, r3, #5
 800eea6:	2164      	movs	r1, #100	; 0x64
 800eea8:	fb01 f303 	mul.w	r3, r1, r3
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	3332      	adds	r3, #50	; 0x32
 800eeb2:	4a07      	ldr	r2, [pc, #28]	; (800eed0 <UART_SetConfig+0x384>)
 800eeb4:	fba2 2303 	umull	r2, r3, r2, r3
 800eeb8:	095b      	lsrs	r3, r3, #5
 800eeba:	f003 0207 	and.w	r2, r3, #7
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4442      	add	r2, r8
 800eec4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800eec6:	e1b2      	b.n	800f22e <UART_SetConfig+0x6e2>
 800eec8:	40011000 	.word	0x40011000
 800eecc:	40011400 	.word	0x40011400
 800eed0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4ad7      	ldr	r2, [pc, #860]	; (800f238 <UART_SetConfig+0x6ec>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d005      	beq.n	800eeea <UART_SetConfig+0x39e>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4ad6      	ldr	r2, [pc, #856]	; (800f23c <UART_SetConfig+0x6f0>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	f040 80d1 	bne.w	800f08c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800eeea:	f7fd fab5 	bl	800c458 <HAL_RCC_GetPCLK2Freq>
 800eeee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	469a      	mov	sl, r3
 800eef4:	f04f 0b00 	mov.w	fp, #0
 800eef8:	46d0      	mov	r8, sl
 800eefa:	46d9      	mov	r9, fp
 800eefc:	eb18 0308 	adds.w	r3, r8, r8
 800ef00:	eb49 0409 	adc.w	r4, r9, r9
 800ef04:	4698      	mov	r8, r3
 800ef06:	46a1      	mov	r9, r4
 800ef08:	eb18 080a 	adds.w	r8, r8, sl
 800ef0c:	eb49 090b 	adc.w	r9, r9, fp
 800ef10:	f04f 0100 	mov.w	r1, #0
 800ef14:	f04f 0200 	mov.w	r2, #0
 800ef18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ef1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ef20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ef24:	4688      	mov	r8, r1
 800ef26:	4691      	mov	r9, r2
 800ef28:	eb1a 0508 	adds.w	r5, sl, r8
 800ef2c:	eb4b 0609 	adc.w	r6, fp, r9
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	4619      	mov	r1, r3
 800ef36:	f04f 0200 	mov.w	r2, #0
 800ef3a:	f04f 0300 	mov.w	r3, #0
 800ef3e:	f04f 0400 	mov.w	r4, #0
 800ef42:	0094      	lsls	r4, r2, #2
 800ef44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ef48:	008b      	lsls	r3, r1, #2
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	4623      	mov	r3, r4
 800ef4e:	4628      	mov	r0, r5
 800ef50:	4631      	mov	r1, r6
 800ef52:	f7f1 fe79 	bl	8000c48 <__aeabi_uldivmod>
 800ef56:	4603      	mov	r3, r0
 800ef58:	460c      	mov	r4, r1
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	4bb8      	ldr	r3, [pc, #736]	; (800f240 <UART_SetConfig+0x6f4>)
 800ef5e:	fba3 2302 	umull	r2, r3, r3, r2
 800ef62:	095b      	lsrs	r3, r3, #5
 800ef64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	469b      	mov	fp, r3
 800ef6c:	f04f 0c00 	mov.w	ip, #0
 800ef70:	46d9      	mov	r9, fp
 800ef72:	46e2      	mov	sl, ip
 800ef74:	eb19 0309 	adds.w	r3, r9, r9
 800ef78:	eb4a 040a 	adc.w	r4, sl, sl
 800ef7c:	4699      	mov	r9, r3
 800ef7e:	46a2      	mov	sl, r4
 800ef80:	eb19 090b 	adds.w	r9, r9, fp
 800ef84:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ef88:	f04f 0100 	mov.w	r1, #0
 800ef8c:	f04f 0200 	mov.w	r2, #0
 800ef90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ef98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ef9c:	4689      	mov	r9, r1
 800ef9e:	4692      	mov	sl, r2
 800efa0:	eb1b 0509 	adds.w	r5, fp, r9
 800efa4:	eb4c 060a 	adc.w	r6, ip, sl
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	4619      	mov	r1, r3
 800efae:	f04f 0200 	mov.w	r2, #0
 800efb2:	f04f 0300 	mov.w	r3, #0
 800efb6:	f04f 0400 	mov.w	r4, #0
 800efba:	0094      	lsls	r4, r2, #2
 800efbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800efc0:	008b      	lsls	r3, r1, #2
 800efc2:	461a      	mov	r2, r3
 800efc4:	4623      	mov	r3, r4
 800efc6:	4628      	mov	r0, r5
 800efc8:	4631      	mov	r1, r6
 800efca:	f7f1 fe3d 	bl	8000c48 <__aeabi_uldivmod>
 800efce:	4603      	mov	r3, r0
 800efd0:	460c      	mov	r4, r1
 800efd2:	461a      	mov	r2, r3
 800efd4:	4b9a      	ldr	r3, [pc, #616]	; (800f240 <UART_SetConfig+0x6f4>)
 800efd6:	fba3 1302 	umull	r1, r3, r3, r2
 800efda:	095b      	lsrs	r3, r3, #5
 800efdc:	2164      	movs	r1, #100	; 0x64
 800efde:	fb01 f303 	mul.w	r3, r1, r3
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	011b      	lsls	r3, r3, #4
 800efe6:	3332      	adds	r3, #50	; 0x32
 800efe8:	4a95      	ldr	r2, [pc, #596]	; (800f240 <UART_SetConfig+0x6f4>)
 800efea:	fba2 2303 	umull	r2, r3, r2, r3
 800efee:	095b      	lsrs	r3, r3, #5
 800eff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eff4:	4498      	add	r8, r3
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	469b      	mov	fp, r3
 800effa:	f04f 0c00 	mov.w	ip, #0
 800effe:	46d9      	mov	r9, fp
 800f000:	46e2      	mov	sl, ip
 800f002:	eb19 0309 	adds.w	r3, r9, r9
 800f006:	eb4a 040a 	adc.w	r4, sl, sl
 800f00a:	4699      	mov	r9, r3
 800f00c:	46a2      	mov	sl, r4
 800f00e:	eb19 090b 	adds.w	r9, r9, fp
 800f012:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f016:	f04f 0100 	mov.w	r1, #0
 800f01a:	f04f 0200 	mov.w	r2, #0
 800f01e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f02a:	4689      	mov	r9, r1
 800f02c:	4692      	mov	sl, r2
 800f02e:	eb1b 0509 	adds.w	r5, fp, r9
 800f032:	eb4c 060a 	adc.w	r6, ip, sl
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	4619      	mov	r1, r3
 800f03c:	f04f 0200 	mov.w	r2, #0
 800f040:	f04f 0300 	mov.w	r3, #0
 800f044:	f04f 0400 	mov.w	r4, #0
 800f048:	0094      	lsls	r4, r2, #2
 800f04a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f04e:	008b      	lsls	r3, r1, #2
 800f050:	461a      	mov	r2, r3
 800f052:	4623      	mov	r3, r4
 800f054:	4628      	mov	r0, r5
 800f056:	4631      	mov	r1, r6
 800f058:	f7f1 fdf6 	bl	8000c48 <__aeabi_uldivmod>
 800f05c:	4603      	mov	r3, r0
 800f05e:	460c      	mov	r4, r1
 800f060:	461a      	mov	r2, r3
 800f062:	4b77      	ldr	r3, [pc, #476]	; (800f240 <UART_SetConfig+0x6f4>)
 800f064:	fba3 1302 	umull	r1, r3, r3, r2
 800f068:	095b      	lsrs	r3, r3, #5
 800f06a:	2164      	movs	r1, #100	; 0x64
 800f06c:	fb01 f303 	mul.w	r3, r1, r3
 800f070:	1ad3      	subs	r3, r2, r3
 800f072:	011b      	lsls	r3, r3, #4
 800f074:	3332      	adds	r3, #50	; 0x32
 800f076:	4a72      	ldr	r2, [pc, #456]	; (800f240 <UART_SetConfig+0x6f4>)
 800f078:	fba2 2303 	umull	r2, r3, r2, r3
 800f07c:	095b      	lsrs	r3, r3, #5
 800f07e:	f003 020f 	and.w	r2, r3, #15
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4442      	add	r2, r8
 800f088:	609a      	str	r2, [r3, #8]
 800f08a:	e0d0      	b.n	800f22e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f08c:	f7fd f9d0 	bl	800c430 <HAL_RCC_GetPCLK1Freq>
 800f090:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	469a      	mov	sl, r3
 800f096:	f04f 0b00 	mov.w	fp, #0
 800f09a:	46d0      	mov	r8, sl
 800f09c:	46d9      	mov	r9, fp
 800f09e:	eb18 0308 	adds.w	r3, r8, r8
 800f0a2:	eb49 0409 	adc.w	r4, r9, r9
 800f0a6:	4698      	mov	r8, r3
 800f0a8:	46a1      	mov	r9, r4
 800f0aa:	eb18 080a 	adds.w	r8, r8, sl
 800f0ae:	eb49 090b 	adc.w	r9, r9, fp
 800f0b2:	f04f 0100 	mov.w	r1, #0
 800f0b6:	f04f 0200 	mov.w	r2, #0
 800f0ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f0be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f0c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f0c6:	4688      	mov	r8, r1
 800f0c8:	4691      	mov	r9, r2
 800f0ca:	eb1a 0508 	adds.w	r5, sl, r8
 800f0ce:	eb4b 0609 	adc.w	r6, fp, r9
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	f04f 0200 	mov.w	r2, #0
 800f0dc:	f04f 0300 	mov.w	r3, #0
 800f0e0:	f04f 0400 	mov.w	r4, #0
 800f0e4:	0094      	lsls	r4, r2, #2
 800f0e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f0ea:	008b      	lsls	r3, r1, #2
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	4623      	mov	r3, r4
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	4631      	mov	r1, r6
 800f0f4:	f7f1 fda8 	bl	8000c48 <__aeabi_uldivmod>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	460c      	mov	r4, r1
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	4b50      	ldr	r3, [pc, #320]	; (800f240 <UART_SetConfig+0x6f4>)
 800f100:	fba3 2302 	umull	r2, r3, r3, r2
 800f104:	095b      	lsrs	r3, r3, #5
 800f106:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	469b      	mov	fp, r3
 800f10e:	f04f 0c00 	mov.w	ip, #0
 800f112:	46d9      	mov	r9, fp
 800f114:	46e2      	mov	sl, ip
 800f116:	eb19 0309 	adds.w	r3, r9, r9
 800f11a:	eb4a 040a 	adc.w	r4, sl, sl
 800f11e:	4699      	mov	r9, r3
 800f120:	46a2      	mov	sl, r4
 800f122:	eb19 090b 	adds.w	r9, r9, fp
 800f126:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f12a:	f04f 0100 	mov.w	r1, #0
 800f12e:	f04f 0200 	mov.w	r2, #0
 800f132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f136:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f13a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f13e:	4689      	mov	r9, r1
 800f140:	4692      	mov	sl, r2
 800f142:	eb1b 0509 	adds.w	r5, fp, r9
 800f146:	eb4c 060a 	adc.w	r6, ip, sl
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	4619      	mov	r1, r3
 800f150:	f04f 0200 	mov.w	r2, #0
 800f154:	f04f 0300 	mov.w	r3, #0
 800f158:	f04f 0400 	mov.w	r4, #0
 800f15c:	0094      	lsls	r4, r2, #2
 800f15e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f162:	008b      	lsls	r3, r1, #2
 800f164:	461a      	mov	r2, r3
 800f166:	4623      	mov	r3, r4
 800f168:	4628      	mov	r0, r5
 800f16a:	4631      	mov	r1, r6
 800f16c:	f7f1 fd6c 	bl	8000c48 <__aeabi_uldivmod>
 800f170:	4603      	mov	r3, r0
 800f172:	460c      	mov	r4, r1
 800f174:	461a      	mov	r2, r3
 800f176:	4b32      	ldr	r3, [pc, #200]	; (800f240 <UART_SetConfig+0x6f4>)
 800f178:	fba3 1302 	umull	r1, r3, r3, r2
 800f17c:	095b      	lsrs	r3, r3, #5
 800f17e:	2164      	movs	r1, #100	; 0x64
 800f180:	fb01 f303 	mul.w	r3, r1, r3
 800f184:	1ad3      	subs	r3, r2, r3
 800f186:	011b      	lsls	r3, r3, #4
 800f188:	3332      	adds	r3, #50	; 0x32
 800f18a:	4a2d      	ldr	r2, [pc, #180]	; (800f240 <UART_SetConfig+0x6f4>)
 800f18c:	fba2 2303 	umull	r2, r3, r2, r3
 800f190:	095b      	lsrs	r3, r3, #5
 800f192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f196:	4498      	add	r8, r3
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	469b      	mov	fp, r3
 800f19c:	f04f 0c00 	mov.w	ip, #0
 800f1a0:	46d9      	mov	r9, fp
 800f1a2:	46e2      	mov	sl, ip
 800f1a4:	eb19 0309 	adds.w	r3, r9, r9
 800f1a8:	eb4a 040a 	adc.w	r4, sl, sl
 800f1ac:	4699      	mov	r9, r3
 800f1ae:	46a2      	mov	sl, r4
 800f1b0:	eb19 090b 	adds.w	r9, r9, fp
 800f1b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f1b8:	f04f 0100 	mov.w	r1, #0
 800f1bc:	f04f 0200 	mov.w	r2, #0
 800f1c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f1cc:	4689      	mov	r9, r1
 800f1ce:	4692      	mov	sl, r2
 800f1d0:	eb1b 0509 	adds.w	r5, fp, r9
 800f1d4:	eb4c 060a 	adc.w	r6, ip, sl
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	4619      	mov	r1, r3
 800f1de:	f04f 0200 	mov.w	r2, #0
 800f1e2:	f04f 0300 	mov.w	r3, #0
 800f1e6:	f04f 0400 	mov.w	r4, #0
 800f1ea:	0094      	lsls	r4, r2, #2
 800f1ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f1f0:	008b      	lsls	r3, r1, #2
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	4623      	mov	r3, r4
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	4631      	mov	r1, r6
 800f1fa:	f7f1 fd25 	bl	8000c48 <__aeabi_uldivmod>
 800f1fe:	4603      	mov	r3, r0
 800f200:	460c      	mov	r4, r1
 800f202:	461a      	mov	r2, r3
 800f204:	4b0e      	ldr	r3, [pc, #56]	; (800f240 <UART_SetConfig+0x6f4>)
 800f206:	fba3 1302 	umull	r1, r3, r3, r2
 800f20a:	095b      	lsrs	r3, r3, #5
 800f20c:	2164      	movs	r1, #100	; 0x64
 800f20e:	fb01 f303 	mul.w	r3, r1, r3
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	011b      	lsls	r3, r3, #4
 800f216:	3332      	adds	r3, #50	; 0x32
 800f218:	4a09      	ldr	r2, [pc, #36]	; (800f240 <UART_SetConfig+0x6f4>)
 800f21a:	fba2 2303 	umull	r2, r3, r2, r3
 800f21e:	095b      	lsrs	r3, r3, #5
 800f220:	f003 020f 	and.w	r2, r3, #15
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4442      	add	r2, r8
 800f22a:	609a      	str	r2, [r3, #8]
}
 800f22c:	e7ff      	b.n	800f22e <UART_SetConfig+0x6e2>
 800f22e:	bf00      	nop
 800f230:	3714      	adds	r7, #20
 800f232:	46bd      	mov	sp, r7
 800f234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f238:	40011000 	.word	0x40011000
 800f23c:	40011400 	.word	0x40011400
 800f240:	51eb851f 	.word	0x51eb851f

0800f244 <FILTER_init>:
 *  Created on: 20 ao�t 2020
 *      Author: Th�o
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 800f244:	b480      	push	{r7}
 800f246:	b087      	sub	sp, #28
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	4613      	mov	r3, r2
 800f250:	71fb      	strb	r3, [r7, #7]
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 800f252:	2300      	movs	r3, #0
 800f254:	617b      	str	r3, [r7, #20]
 800f256:	e00c      	b.n	800f272 <FILTER_init+0x2e>
		filter->settings[s] = settings[s] ;
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	68ba      	ldr	r2, [r7, #8]
 800f25e:	4413      	add	r3, r2
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	68f9      	ldr	r1, [r7, #12]
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	440b      	add	r3, r1
 800f26a:	601a      	str	r2, [r3, #0]
	for(int32_t s = 0; s < 3; s++)
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	3301      	adds	r3, #1
 800f270:	617b      	str	r3, [r7, #20]
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	2b02      	cmp	r3, #2
 800f276:	ddef      	ble.n	800f258 <FILTER_init+0x14>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	79fa      	ldrb	r2, [r7, #7]
 800f27c:	761a      	strb	r2, [r3, #24]
}
 800f27e:	bf00      	nop
 800f280:	371c      	adds	r7, #28
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
 800f28a:	b480      	push	{r7}
 800f28c:	b085      	sub	sp, #20
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
 800f292:	ed87 0a00 	vstr	s0, [r7]
	float to_return = 0 ;
 800f296:	f04f 0300 	mov.w	r3, #0
 800f29a:	60fb      	str	r3, [r7, #12]
	switch(filter->order){
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	7e1b      	ldrb	r3, [r3, #24]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d01f      	beq.n	800f2e4 <FILTER_process+0x5a>
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	d047      	beq.n	800f338 <FILTER_process+0xae>
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d148      	bne.n	800f33e <FILTER_process+0xb4>
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	ed93 7a00 	vldr	s14, [r3]
 800f2b2:	edd7 7a00 	vldr	s15, [r7]
 800f2b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	edd3 6a04 	vldr	s13, [r3, #16]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	edd3 7a01 	vldr	s15, [r3, #4]
 800f2c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[1] = filter->values[0];
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	68da      	ldr	r2, [r3, #12]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	611a      	str	r2, [r3, #16]
			to_return =  filter->values[0];
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	60fb      	str	r3, [r7, #12]
			break ;
 800f2e2:	e02f      	b.n	800f344 <FILTER_process+0xba>

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	ed93 7a00 	vldr	s14, [r3]
 800f2ea:	edd7 7a00 	vldr	s15, [r7]
 800f2ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	edd3 6a04 	vldr	s13, [r3, #16]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	edd3 7a01 	vldr	s15, [r3, #4]
 800f2fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f302:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	edd3 6a05 	vldr	s13, [r3, #20]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[2] = filter->values[1];
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	691a      	ldr	r2, [r3, #16]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	615a      	str	r2, [r3, #20]
			filter->values[1] = filter->values[0];
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	68da      	ldr	r2, [r3, #12]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	611a      	str	r2, [r3, #16]
			to_return = filter->values[0];
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	68db      	ldr	r3, [r3, #12]
 800f334:	60fb      	str	r3, [r7, #12]
			break;
 800f336:	e005      	b.n	800f344 <FILTER_process+0xba>

		case FILTER_NO_FILTERING :
			to_return = new_value ;
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	60fb      	str	r3, [r7, #12]
			break;
 800f33c:	e002      	b.n	800f344 <FILTER_process+0xba>
		default:
			to_return = new_value ;
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	60fb      	str	r3, [r7, #12]
			break;
 800f342:	bf00      	nop
	}

	return to_return ;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	ee07 3a90 	vmov	s15, r3
};
 800f34a:	eeb0 0a67 	vmov.f32	s0, s15
 800f34e:	3714      	adds	r7, #20
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <check_sum_f>:
static rx_cplt_mode_e rx_cplt_mode ;
static ibus_t * ibus ;	//On ne peut utilsier qu'une radio en ibus à la fois

//Fonction privé qui test si le checsum est bon sur un buffer
uint32_t check_sum_f(uint8_t * buffer);
uint32_t check_sum_f(uint8_t * buffer){
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 800f360:	2300      	movs	r3, #0
 800f362:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800f364:	2300      	movs	r3, #0
 800f366:	72fb      	strb	r3, [r7, #11]
 800f368:	e00a      	b.n	800f380 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 800f36a:	7afb      	ldrb	r3, [r7, #11]
 800f36c:	687a      	ldr	r2, [r7, #4]
 800f36e:	4413      	add	r3, r2
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	461a      	mov	r2, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	4413      	add	r3, r2
 800f378:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800f37a:	7afb      	ldrb	r3, [r7, #11]
 800f37c:	3301      	adds	r3, #1
 800f37e:	72fb      	strb	r3, [r7, #11]
 800f380:	7afb      	ldrb	r3, [r7, #11]
 800f382:	2b1d      	cmp	r3, #29
 800f384:	d9f1      	bls.n	800f36a <check_sum_f+0x12>
	return sum ;
 800f386:	68fb      	ldr	r3, [r7, #12]
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3714      	adds	r7, #20
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <IBUS_init>:

void IBUS_init(ibus_t * ibus_, UART_HandleTypeDef * huart, void(*data_rdy_callback)){
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	607a      	str	r2, [r7, #4]
	ibus = ibus_;
 800f3a0:	4a0e      	ldr	r2, [pc, #56]	; (800f3dc <IBUS_init+0x48>)
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	6013      	str	r3, [r2, #0]
	ibus->huart = huart ;
 800f3a6:	4b0d      	ldr	r3, [pc, #52]	; (800f3dc <IBUS_init+0x48>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	68ba      	ldr	r2, [r7, #8]
 800f3ac:	601a      	str	r2, [r3, #0]
	ibus->data_rdy_callback = data_rdy_callback ;
 800f3ae:	4b0b      	ldr	r3, [pc, #44]	; (800f3dc <IBUS_init+0x48>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	639a      	str	r2, [r3, #56]	; 0x38
	//On lance la lecture
	HAL_UART_Receive_DMA(ibus->huart, ibus->dma_buffer, SIZE_DMA_BUFFER);
 800f3b6:	4b09      	ldr	r3, [pc, #36]	; (800f3dc <IBUS_init+0x48>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	6818      	ldr	r0, [r3, #0]
 800f3bc:	4b07      	ldr	r3, [pc, #28]	; (800f3dc <IBUS_init+0x48>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	3304      	adds	r3, #4
 800f3c2:	2214      	movs	r2, #20
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	f7fe ffdf 	bl	800e388 <HAL_UART_Receive_DMA>
	ibus->index_write = 1 ;
 800f3ca:	4b04      	ldr	r3, [pc, #16]	; (800f3dc <IBUS_init+0x48>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	761a      	strb	r2, [r3, #24]
}
 800f3d2:	bf00      	nop
 800f3d4:	3710      	adds	r7, #16
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	200020d0 	.word	0x200020d0

0800f3e0 <IBUS_RxCplt>:

void IBUS_RxCplt(UART_HandleTypeDef * huart){
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800f3e8:	4b08      	ldr	r3, [pc, #32]	; (800f40c <IBUS_RxCplt+0x2c>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d106      	bne.n	800f402 <IBUS_RxCplt+0x22>
		rx_cplt_mode = MODE_CPLT_FULL;
 800f3f4:	4b06      	ldr	r3, [pc, #24]	; (800f410 <IBUS_RxCplt+0x30>)
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800f3fa:	4b04      	ldr	r3, [pc, #16]	; (800f40c <IBUS_RxCplt+0x2c>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f400:	4798      	blx	r3
	}
}
 800f402:	bf00      	nop
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	200020d0 	.word	0x200020d0
 800f410:	200020cc 	.word	0x200020cc

0800f414 <IBUS_RxHalfCplt>:
void IBUS_RxHalfCplt(UART_HandleTypeDef * huart){
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800f41c:	4b08      	ldr	r3, [pc, #32]	; (800f440 <IBUS_RxHalfCplt+0x2c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	429a      	cmp	r2, r3
 800f426:	d106      	bne.n	800f436 <IBUS_RxHalfCplt+0x22>
		rx_cplt_mode = MODE_CPLT_HALF ;
 800f428:	4b06      	ldr	r3, [pc, #24]	; (800f444 <IBUS_RxHalfCplt+0x30>)
 800f42a:	2200      	movs	r2, #0
 800f42c:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800f42e:	4b04      	ldr	r3, [pc, #16]	; (800f440 <IBUS_RxHalfCplt+0x2c>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f434:	4798      	blx	r3
	}
}
 800f436:	bf00      	nop
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	200020d0 	.word	0x200020d0
 800f444:	200020cc 	.word	0x200020cc

0800f448 <IBUS_Channel_Update>:

bool_e IBUS_Channel_Update(void){
 800f448:	b5b0      	push	{r4, r5, r7, lr}
 800f44a:	b088      	sub	sp, #32
 800f44c:	af00      	add	r7, sp, #0

	bool_e to_return = FALSE ;
 800f44e:	2300      	movs	r3, #0
 800f450:	61fb      	str	r3, [r7, #28]

	if(rx_cplt_mode == MODE_CPLT_HALF)
 800f452:	4ba0      	ldr	r3, [pc, #640]	; (800f6d4 <IBUS_Channel_Update+0x28c>)
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	f040 80ba 	bne.w	800f5d0 <IBUS_Channel_Update+0x188>
	{
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800f45c:	2300      	movs	r3, #0
 800f45e:	76fb      	strb	r3, [r7, #27]
 800f460:	e0b1      	b.n	800f5c6 <IBUS_Channel_Update+0x17e>
			switch(ibus->state){
 800f462:	4b9d      	ldr	r3, [pc, #628]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d01b      	beq.n	800f4a6 <IBUS_Channel_Update+0x5e>
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d041      	beq.n	800f4f6 <IBUS_Channel_Update+0xae>
 800f472:	2b00      	cmp	r3, #0
 800f474:	f040 80a4 	bne.w	800f5c0 <IBUS_Channel_Update+0x178>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800f478:	4b97      	ldr	r3, [pc, #604]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	7efb      	ldrb	r3, [r7, #27]
 800f47e:	4413      	add	r3, r2
 800f480:	791b      	ldrb	r3, [r3, #4]
 800f482:	2b20      	cmp	r3, #32
 800f484:	f040 8097 	bne.w	800f5b6 <IBUS_Channel_Update+0x16e>
						ibus->state = STATE_IBUS_COMMAND ;
 800f488:	4b93      	ldr	r3, [pc, #588]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800f492:	4b91      	ldr	r3, [pc, #580]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f494:	6819      	ldr	r1, [r3, #0]
 800f496:	7efa      	ldrb	r2, [r7, #27]
 800f498:	4b8f      	ldr	r3, [pc, #572]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	440a      	add	r2, r1
 800f49e:	7912      	ldrb	r2, [r2, #4]
 800f4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800f4a4:	e087      	b.n	800f5b6 <IBUS_Channel_Update+0x16e>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800f4a6:	4b8c      	ldr	r3, [pc, #560]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	7efb      	ldrb	r3, [r7, #27]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	791b      	ldrb	r3, [r3, #4]
 800f4b0:	2b40      	cmp	r3, #64	; 0x40
 800f4b2:	d113      	bne.n	800f4dc <IBUS_Channel_Update+0x94>
						ibus->state = STATE_IBUS_CHANNELS ;
 800f4b4:	4b88      	ldr	r3, [pc, #544]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2202      	movs	r2, #2
 800f4ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800f4be:	4b86      	ldr	r3, [pc, #536]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f4c0:	6819      	ldr	r1, [r3, #0]
 800f4c2:	7efa      	ldrb	r2, [r7, #27]
 800f4c4:	4b84      	ldr	r3, [pc, #528]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	440a      	add	r2, r1
 800f4ca:	7912      	ldrb	r2, [r2, #4]
 800f4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800f4d0:	4b81      	ldr	r3, [pc, #516]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2202      	movs	r2, #2
 800f4d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800f4da:	e06e      	b.n	800f5ba <IBUS_Channel_Update+0x172>
					else if(ibus->dma_buffer[c] != 0x20)
 800f4dc:	4b7e      	ldr	r3, [pc, #504]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	7efb      	ldrb	r3, [r7, #27]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	791b      	ldrb	r3, [r3, #4]
 800f4e6:	2b20      	cmp	r3, #32
 800f4e8:	d067      	beq.n	800f5ba <IBUS_Channel_Update+0x172>
						ibus->state = STATE_IBUS_LENGTH ;
 800f4ea:	4b7b      	ldr	r3, [pc, #492]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800f4f4:	e061      	b.n	800f5ba <IBUS_Channel_Update+0x172>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800f4f6:	4b78      	ldr	r3, [pc, #480]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f4f8:	681c      	ldr	r4, [r3, #0]
 800f4fa:	7ef8      	ldrb	r0, [r7, #27]
 800f4fc:	4b76      	ldr	r3, [pc, #472]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f4fe:	6819      	ldr	r1, [r3, #0]
 800f500:	4b75      	ldr	r3, [pc, #468]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f508:	1c55      	adds	r5, r2, #1
 800f50a:	b2ad      	uxth	r5, r5
 800f50c:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800f510:	4615      	mov	r5, r2
 800f512:	1823      	adds	r3, r4, r0
 800f514:	791a      	ldrb	r2, [r3, #4]
 800f516:	194b      	adds	r3, r1, r5
 800f518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800f51c:	4b6e      	ldr	r3, [pc, #440]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f524:	2b20      	cmp	r3, #32
 800f526:	d14a      	bne.n	800f5be <IBUS_Channel_Update+0x176>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800f528:	4b6b      	ldr	r3, [pc, #428]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800f530:	461a      	mov	r2, r3
 800f532:	4b69      	ldr	r3, [pc, #420]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f53a:	021b      	lsls	r3, r3, #8
 800f53c:	4313      	orrs	r3, r2
 800f53e:	607b      	str	r3, [r7, #4]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800f540:	4b65      	ldr	r3, [pc, #404]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	333d      	adds	r3, #61	; 0x3d
 800f546:	4618      	mov	r0, r3
 800f548:	f7ff ff06 	bl	800f358 <check_sum_f>
 800f54c:	4603      	mov	r3, r0
 800f54e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800f552:	33ff      	adds	r3, #255	; 0xff
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	429a      	cmp	r2, r3
 800f558:	d127      	bne.n	800f5aa <IBUS_Channel_Update+0x162>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800f55a:	2300      	movs	r3, #0
 800f55c:	617b      	str	r3, [r7, #20]
 800f55e:	e01f      	b.n	800f5a0 <IBUS_Channel_Update+0x158>
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800f560:	4b5d      	ldr	r3, [pc, #372]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	3302      	adds	r3, #2
 800f568:	4413      	add	r3, r2
 800f56a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f56e:	b21a      	sxth	r2, r3
 800f570:	4b59      	ldr	r3, [pc, #356]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f572:	6819      	ldr	r1, [r3, #0]
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	3303      	adds	r3, #3
 800f578:	440b      	add	r3, r1
 800f57a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f57e:	021b      	lsls	r3, r3, #8
 800f580:	b21b      	sxth	r3, r3
 800f582:	4313      	orrs	r3, r2
 800f584:	b219      	sxth	r1, r3
 800f586:	4b54      	ldr	r3, [pc, #336]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	085b      	lsrs	r3, r3, #1
 800f58e:	b289      	uxth	r1, r1
 800f590:	330c      	adds	r3, #12
 800f592:	005b      	lsls	r3, r3, #1
 800f594:	4413      	add	r3, r2
 800f596:	460a      	mov	r2, r1
 800f598:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	3302      	adds	r3, #2
 800f59e:	617b      	str	r3, [r7, #20]
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	2b1b      	cmp	r3, #27
 800f5a4:	d9dc      	bls.n	800f560 <IBUS_Channel_Update+0x118>
							to_return = TRUE;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800f5aa:	4b4b      	ldr	r3, [pc, #300]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800f5b4:	e003      	b.n	800f5be <IBUS_Channel_Update+0x176>
					break;
 800f5b6:	bf00      	nop
 800f5b8:	e002      	b.n	800f5c0 <IBUS_Channel_Update+0x178>
					break ;
 800f5ba:	bf00      	nop
 800f5bc:	e000      	b.n	800f5c0 <IBUS_Channel_Update+0x178>
					break;
 800f5be:	bf00      	nop
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800f5c0:	7efb      	ldrb	r3, [r7, #27]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	76fb      	strb	r3, [r7, #27]
 800f5c6:	7efb      	ldrb	r3, [r7, #27]
 800f5c8:	2b09      	cmp	r3, #9
 800f5ca:	f67f af4a 	bls.w	800f462 <IBUS_Channel_Update+0x1a>
 800f5ce:	e0bc      	b.n	800f74a <IBUS_Channel_Update+0x302>
			}
		}
	}
	else
	{
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800f5d0:	230a      	movs	r3, #10
 800f5d2:	74fb      	strb	r3, [r7, #19]
 800f5d4:	e0b5      	b.n	800f742 <IBUS_Channel_Update+0x2fa>
			switch(ibus->state){
 800f5d6:	4b40      	ldr	r3, [pc, #256]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d01b      	beq.n	800f61a <IBUS_Channel_Update+0x1d2>
 800f5e2:	2b02      	cmp	r3, #2
 800f5e4:	d041      	beq.n	800f66a <IBUS_Channel_Update+0x222>
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f040 80a8 	bne.w	800f73c <IBUS_Channel_Update+0x2f4>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800f5ec:	4b3a      	ldr	r3, [pc, #232]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	7cfb      	ldrb	r3, [r7, #19]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	791b      	ldrb	r3, [r3, #4]
 800f5f6:	2b20      	cmp	r3, #32
 800f5f8:	f040 809b 	bne.w	800f732 <IBUS_Channel_Update+0x2ea>
						ibus->state = STATE_IBUS_COMMAND ;
 800f5fc:	4b36      	ldr	r3, [pc, #216]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2201      	movs	r2, #1
 800f602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800f606:	4b34      	ldr	r3, [pc, #208]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f608:	6819      	ldr	r1, [r3, #0]
 800f60a:	7cfa      	ldrb	r2, [r7, #19]
 800f60c:	4b32      	ldr	r3, [pc, #200]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	440a      	add	r2, r1
 800f612:	7912      	ldrb	r2, [r2, #4]
 800f614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800f618:	e08b      	b.n	800f732 <IBUS_Channel_Update+0x2ea>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800f61a:	4b2f      	ldr	r3, [pc, #188]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	7cfb      	ldrb	r3, [r7, #19]
 800f620:	4413      	add	r3, r2
 800f622:	791b      	ldrb	r3, [r3, #4]
 800f624:	2b40      	cmp	r3, #64	; 0x40
 800f626:	d113      	bne.n	800f650 <IBUS_Channel_Update+0x208>
						ibus->state = STATE_IBUS_CHANNELS ;
 800f628:	4b2b      	ldr	r3, [pc, #172]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2202      	movs	r2, #2
 800f62e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800f632:	4b29      	ldr	r3, [pc, #164]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f634:	6819      	ldr	r1, [r3, #0]
 800f636:	7cfa      	ldrb	r2, [r7, #19]
 800f638:	4b27      	ldr	r3, [pc, #156]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	440a      	add	r2, r1
 800f63e:	7912      	ldrb	r2, [r2, #4]
 800f640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800f644:	4b24      	ldr	r3, [pc, #144]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2202      	movs	r2, #2
 800f64a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800f64e:	e072      	b.n	800f736 <IBUS_Channel_Update+0x2ee>
					else if(ibus->dma_buffer[c] != 0x20)
 800f650:	4b21      	ldr	r3, [pc, #132]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	7cfb      	ldrb	r3, [r7, #19]
 800f656:	4413      	add	r3, r2
 800f658:	791b      	ldrb	r3, [r3, #4]
 800f65a:	2b20      	cmp	r3, #32
 800f65c:	d06b      	beq.n	800f736 <IBUS_Channel_Update+0x2ee>
						ibus->state = STATE_IBUS_LENGTH ;
 800f65e:	4b1e      	ldr	r3, [pc, #120]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2200      	movs	r2, #0
 800f664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800f668:	e065      	b.n	800f736 <IBUS_Channel_Update+0x2ee>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800f66a:	4b1b      	ldr	r3, [pc, #108]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f66c:	681c      	ldr	r4, [r3, #0]
 800f66e:	7cf8      	ldrb	r0, [r7, #19]
 800f670:	4b19      	ldr	r3, [pc, #100]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f672:	6819      	ldr	r1, [r3, #0]
 800f674:	4b18      	ldr	r3, [pc, #96]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f67c:	1c55      	adds	r5, r2, #1
 800f67e:	b2ad      	uxth	r5, r5
 800f680:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800f684:	4615      	mov	r5, r2
 800f686:	1823      	adds	r3, r4, r0
 800f688:	791a      	ldrb	r2, [r3, #4]
 800f68a:	194b      	adds	r3, r1, r5
 800f68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800f690:	4b11      	ldr	r3, [pc, #68]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f698:	2b20      	cmp	r3, #32
 800f69a:	d14e      	bne.n	800f73a <IBUS_Channel_Update+0x2f2>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800f69c:	4b0e      	ldr	r3, [pc, #56]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	4b0c      	ldr	r3, [pc, #48]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f6ae:	021b      	lsls	r3, r3, #8
 800f6b0:	4313      	orrs	r3, r2
 800f6b2:	60bb      	str	r3, [r7, #8]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800f6b4:	4b08      	ldr	r3, [pc, #32]	; (800f6d8 <IBUS_Channel_Update+0x290>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	333d      	adds	r3, #61	; 0x3d
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7ff fe4c 	bl	800f358 <check_sum_f>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800f6c6:	33ff      	adds	r3, #255	; 0xff
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d12b      	bne.n	800f726 <IBUS_Channel_Update+0x2de>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	60fb      	str	r3, [r7, #12]
 800f6d2:	e023      	b.n	800f71c <IBUS_Channel_Update+0x2d4>
 800f6d4:	200020cc 	.word	0x200020cc
 800f6d8:	200020d0 	.word	0x200020d0
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800f6dc:	4b1d      	ldr	r3, [pc, #116]	; (800f754 <IBUS_Channel_Update+0x30c>)
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	3302      	adds	r3, #2
 800f6e4:	4413      	add	r3, r2
 800f6e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6ea:	b21a      	sxth	r2, r3
 800f6ec:	4b19      	ldr	r3, [pc, #100]	; (800f754 <IBUS_Channel_Update+0x30c>)
 800f6ee:	6819      	ldr	r1, [r3, #0]
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	3303      	adds	r3, #3
 800f6f4:	440b      	add	r3, r1
 800f6f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6fa:	021b      	lsls	r3, r3, #8
 800f6fc:	b21b      	sxth	r3, r3
 800f6fe:	4313      	orrs	r3, r2
 800f700:	b219      	sxth	r1, r3
 800f702:	4b14      	ldr	r3, [pc, #80]	; (800f754 <IBUS_Channel_Update+0x30c>)
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	085b      	lsrs	r3, r3, #1
 800f70a:	b289      	uxth	r1, r1
 800f70c:	330c      	adds	r3, #12
 800f70e:	005b      	lsls	r3, r3, #1
 800f710:	4413      	add	r3, r2
 800f712:	460a      	mov	r2, r1
 800f714:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	3302      	adds	r3, #2
 800f71a:	60fb      	str	r3, [r7, #12]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2b1b      	cmp	r3, #27
 800f720:	d9dc      	bls.n	800f6dc <IBUS_Channel_Update+0x294>
							to_return = TRUE;
 800f722:	2301      	movs	r3, #1
 800f724:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800f726:	4b0b      	ldr	r3, [pc, #44]	; (800f754 <IBUS_Channel_Update+0x30c>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	2200      	movs	r2, #0
 800f72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800f730:	e003      	b.n	800f73a <IBUS_Channel_Update+0x2f2>
					break;
 800f732:	bf00      	nop
 800f734:	e002      	b.n	800f73c <IBUS_Channel_Update+0x2f4>
					break ;
 800f736:	bf00      	nop
 800f738:	e000      	b.n	800f73c <IBUS_Channel_Update+0x2f4>
					break;
 800f73a:	bf00      	nop
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800f73c:	7cfb      	ldrb	r3, [r7, #19]
 800f73e:	3301      	adds	r3, #1
 800f740:	74fb      	strb	r3, [r7, #19]
 800f742:	7cfb      	ldrb	r3, [r7, #19]
 800f744:	2b13      	cmp	r3, #19
 800f746:	f67f af46 	bls.w	800f5d6 <IBUS_Channel_Update+0x18e>
		}
	}



	return to_return ;
 800f74a:	69fb      	ldr	r3, [r7, #28]
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3720      	adds	r7, #32
 800f750:	46bd      	mov	sp, r7
 800f752:	bdb0      	pop	{r4, r5, r7, pc}
 800f754:	200020d0 	.word	0x200020d0

0800f758 <MOTORS_Init>:
 */

#include "../Inc/Motors.h"


void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, uint16_t * duty, bool_e start){
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
 800f764:	603b      	str	r3, [r7, #0]
	motors->htim = htim ;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	68ba      	ldr	r2, [r7, #8]
 800f76a:	601a      	str	r2, [r3, #0]
	motors->duty = duty;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	609a      	str	r2, [r3, #8]
	if(start){
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d022      	beq.n	800f7be <MOTORS_Init+0x66>
		motors->state = MOTORS_STATE_RUNNING ;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2201      	movs	r2, #1
 800f77c:	711a      	strb	r2, [r3, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 800f77e:	2100      	movs	r1, #0
 800f780:	68b8      	ldr	r0, [r7, #8]
 800f782:	f7fd fd21 	bl	800d1c8 <HAL_TIM_PWM_Start>
 800f786:	4603      	mov	r3, r0
 800f788:	461a      	mov	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 800f78e:	2104      	movs	r1, #4
 800f790:	68b8      	ldr	r0, [r7, #8]
 800f792:	f7fd fd19 	bl	800d1c8 <HAL_TIM_PWM_Start>
 800f796:	4603      	mov	r3, r0
 800f798:	461a      	mov	r2, r3
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 800f79e:	2108      	movs	r1, #8
 800f7a0:	68b8      	ldr	r0, [r7, #8]
 800f7a2:	f7fd fd11 	bl	800d1c8 <HAL_TIM_PWM_Start>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 800f7ae:	210c      	movs	r1, #12
 800f7b0:	68b8      	ldr	r0, [r7, #8]
 800f7b2:	f7fd fd09 	bl	800d1c8 <HAL_TIM_PWM_Start>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	731a      	strb	r2, [r3, #12]
	}
}
 800f7be:	bf00      	nop
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_2);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_3);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){
 800f7c6:	b480      	push	{r7}
 800f7c8:	b083      	sub	sp, #12
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]

	motors->duty[0] = MIN(1000, motors->duty[0]);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	881a      	ldrh	r2, [r3, #0]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	689b      	ldr	r3, [r3, #8]
 800f7d8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800f7dc:	bf28      	it	cs
 800f7de:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800f7e2:	b292      	uxth	r2, r2
 800f7e4:	801a      	strh	r2, [r3, #0]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	3302      	adds	r3, #2
 800f7ec:	881a      	ldrh	r2, [r3, #0]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	3302      	adds	r3, #2
 800f7f4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800f7f8:	bf28      	it	cs
 800f7fa:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800f7fe:	b292      	uxth	r2, r2
 800f800:	801a      	strh	r2, [r3, #0]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	689b      	ldr	r3, [r3, #8]
 800f806:	3304      	adds	r3, #4
 800f808:	881a      	ldrh	r2, [r3, #0]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	689b      	ldr	r3, [r3, #8]
 800f80e:	3304      	adds	r3, #4
 800f810:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800f814:	bf28      	it	cs
 800f816:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800f81a:	b292      	uxth	r2, r2
 800f81c:	801a      	strh	r2, [r3, #0]
	motors->duty[3] = MIN(1000, motors->duty[3]);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	689b      	ldr	r3, [r3, #8]
 800f822:	3306      	adds	r3, #6
 800f824:	881a      	ldrh	r2, [r3, #0]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	3306      	adds	r3, #6
 800f82c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800f830:	bf28      	it	cs
 800f832:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800f836:	b292      	uxth	r2, r2
 800f838:	801a      	strh	r2, [r3, #0]


	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	689b      	ldr	r3, [r3, #8]
 800f83e:	881b      	ldrh	r3, [r3, #0]
 800f840:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	635a      	str	r2, [r3, #52]	; 0x34
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	3302      	adds	r3, #2
 800f852:	881b      	ldrh	r3, [r3, #0]
 800f854:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	639a      	str	r2, [r3, #56]	; 0x38
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	3304      	adds	r3, #4
 800f866:	881b      	ldrh	r3, [r3, #0]
 800f868:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	63da      	str	r2, [r3, #60]	; 0x3c
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	3306      	adds	r3, #6
 800f87a:	881b      	ldrh	r3, [r3, #0]
 800f87c:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f888:	bf00      	nop
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <PID_compute>:
 */

#include "../Inc/Pid.h"

//renvoit la sortie du pid
float PID_compute(PID_t * pid, float consigne, float measurement){
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f8a0:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calcul de l'erreur
	pid->error = measurement - consigne ;
 800f8a4:	ed97 7a01 	vldr	s14, [r7, #4]
 800f8a8:	edd7 7a02 	vldr	s15, [r7, #8]
 800f8ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Calcul des P I D
	pid->P = pid->settings[PID_KP] * pid->error ;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	ed93 7a04 	vldr	s14, [r3, #16]
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800f8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->I += pid->settings[PID_KI] * pid->error / pid->settings[PID_FREQUENCY];
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	ed93 7a02 	vldr	s14, [r3, #8]
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	edd3 6a05 	vldr	s13, [r3, #20]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800f8de:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	edd3 6a07 	vldr	s13, [r3, #28]
 800f8e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800f8ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	edc3 7a02 	vstr	s15, [r3, #8]
	pid->D = pid->settings[PID_KD] * (measurement - pid->previous_measurement) * pid->settings[PID_FREQUENCY] ;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	ed93 7a06 	vldr	s14, [r3, #24]
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f902:	edd7 6a01 	vldr	s13, [r7, #4]
 800f906:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f90a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	edd3 7a07 	vldr	s15, [r3, #28]
 800f914:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	edc3 7a03 	vstr	s15, [r3, #12]

	//Filtrage
	pid->D = FILTER_process(&pid->d_filter, pid->D);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	edd3 7a03 	vldr	s15, [r3, #12]
 800f92a:	eeb0 0a67 	vmov.f32	s0, s15
 800f92e:	4610      	mov	r0, r2
 800f930:	f7ff fcab 	bl	800f28a <FILTER_process>
 800f934:	eef0 7a40 	vmov.f32	s15, s0
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	edc3 7a03 	vstr	s15, [r3, #12]

	//On somme le tout
	pid->output = pid->P + pid->I + pid->D ;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	ed93 7a01 	vldr	s14, [r3, #4]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	edd3 7a02 	vldr	s15, [r3, #8]
 800f94a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	edd3 7a03 	vldr	s15, [r3, #12]
 800f954:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	edc3 7a00 	vstr	s15, [r3]

	//Check mid and max
	pid->output = MIN(pid->settings[PID_MAX_OUTPUT], pid->output);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	ed93 7a08 	vldr	s14, [r3, #32]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	edd3 7a00 	vldr	s15, [r3]
 800f96a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f972:	dd02      	ble.n	800f97a <PID_compute+0xe6>
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	e001      	b.n	800f97e <PID_compute+0xea>
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6a1b      	ldr	r3, [r3, #32]
 800f97e:	68fa      	ldr	r2, [r7, #12]
 800f980:	6013      	str	r3, [r2, #0]
	pid->output = MAX(-pid->settings[PID_MAX_OUTPUT], pid->output);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	edd3 7a08 	vldr	s15, [r3, #32]
 800f988:	eeb1 7a67 	vneg.f32	s14, s15
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	edd3 7a00 	vldr	s15, [r3]
 800f992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f99a:	dd05      	ble.n	800f9a8 <PID_compute+0x114>
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	edd3 7a08 	vldr	s15, [r3, #32]
 800f9a2:	eef1 7a67 	vneg.f32	s15, s15
 800f9a6:	e002      	b.n	800f9ae <PID_compute+0x11a>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	edd3 7a00 	vldr	s15, [r3]
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	edc3 7a00 	vstr	s15, [r3]

	//Mise � jour des valeurs ant�rieures
	pid->previous_measurement = measurement ;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	629a      	str	r2, [r3, #40]	; 0x28
	return pid->output ;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	ee07 3a90 	vmov	s15, r3
}
 800f9c2:	eeb0 0a67 	vmov.f32	s0, s15
 800f9c6:	3710      	adds	r7, #16
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <PID_init>:



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b086      	sub	sp, #24
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	603b      	str	r3, [r7, #0]
 800f9d8:	4613      	mov	r3, r2
 800f9da:	71fb      	strb	r3, [r7, #7]
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800f9dc:	2300      	movs	r3, #0
 800f9de:	75fb      	strb	r3, [r7, #23]
 800f9e0:	e00d      	b.n	800f9fe <PID_init+0x32>
		pid->settings[s] = settings[s] ;
 800f9e2:	7dfb      	ldrb	r3, [r7, #23]
 800f9e4:	009b      	lsls	r3, r3, #2
 800f9e6:	68ba      	ldr	r2, [r7, #8]
 800f9e8:	441a      	add	r2, r3
 800f9ea:	7dfb      	ldrb	r3, [r7, #23]
 800f9ec:	6812      	ldr	r2, [r2, #0]
 800f9ee:	68f9      	ldr	r1, [r7, #12]
 800f9f0:	3304      	adds	r3, #4
 800f9f2:	009b      	lsls	r3, r3, #2
 800f9f4:	440b      	add	r3, r1
 800f9f6:	601a      	str	r2, [r3, #0]
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800f9f8:	7dfb      	ldrb	r3, [r7, #23]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	75fb      	strb	r3, [r7, #23]
 800f9fe:	7dfb      	ldrb	r3, [r7, #23]
 800fa00:	2b04      	cmp	r3, #4
 800fa02:	d9ee      	bls.n	800f9e2 <PID_init+0x16>

	//Init values
	pid->P = 0 ;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f04f 0200 	mov.w	r2, #0
 800fa0a:	605a      	str	r2, [r3, #4]
	pid->I = 0 ;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f04f 0200 	mov.w	r2, #0
 800fa12:	609a      	str	r2, [r3, #8]
	pid->D = 0 ;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f04f 0200 	mov.w	r2, #0
 800fa1a:	60da      	str	r2, [r3, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	332c      	adds	r3, #44	; 0x2c
 800fa20:	79fa      	ldrb	r2, [r7, #7]
 800fa22:	6839      	ldr	r1, [r7, #0]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7ff fc0d 	bl	800f244 <FILTER_init>
}
 800fa2a:	bf00      	nop
 800fa2c:	3718      	adds	r7, #24
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
	...

0800fa34 <__errno>:
 800fa34:	4b01      	ldr	r3, [pc, #4]	; (800fa3c <__errno+0x8>)
 800fa36:	6818      	ldr	r0, [r3, #0]
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	20001aa8 	.word	0x20001aa8

0800fa40 <__libc_init_array>:
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	4e0d      	ldr	r6, [pc, #52]	; (800fa78 <__libc_init_array+0x38>)
 800fa44:	4c0d      	ldr	r4, [pc, #52]	; (800fa7c <__libc_init_array+0x3c>)
 800fa46:	1ba4      	subs	r4, r4, r6
 800fa48:	10a4      	asrs	r4, r4, #2
 800fa4a:	2500      	movs	r5, #0
 800fa4c:	42a5      	cmp	r5, r4
 800fa4e:	d109      	bne.n	800fa64 <__libc_init_array+0x24>
 800fa50:	4e0b      	ldr	r6, [pc, #44]	; (800fa80 <__libc_init_array+0x40>)
 800fa52:	4c0c      	ldr	r4, [pc, #48]	; (800fa84 <__libc_init_array+0x44>)
 800fa54:	f004 f82c 	bl	8013ab0 <_init>
 800fa58:	1ba4      	subs	r4, r4, r6
 800fa5a:	10a4      	asrs	r4, r4, #2
 800fa5c:	2500      	movs	r5, #0
 800fa5e:	42a5      	cmp	r5, r4
 800fa60:	d105      	bne.n	800fa6e <__libc_init_array+0x2e>
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
 800fa64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fa68:	4798      	blx	r3
 800fa6a:	3501      	adds	r5, #1
 800fa6c:	e7ee      	b.n	800fa4c <__libc_init_array+0xc>
 800fa6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fa72:	4798      	blx	r3
 800fa74:	3501      	adds	r5, #1
 800fa76:	e7f2      	b.n	800fa5e <__libc_init_array+0x1e>
 800fa78:	080141dc 	.word	0x080141dc
 800fa7c:	080141dc 	.word	0x080141dc
 800fa80:	080141dc 	.word	0x080141dc
 800fa84:	080141e0 	.word	0x080141e0

0800fa88 <memcpy>:
 800fa88:	b510      	push	{r4, lr}
 800fa8a:	1e43      	subs	r3, r0, #1
 800fa8c:	440a      	add	r2, r1
 800fa8e:	4291      	cmp	r1, r2
 800fa90:	d100      	bne.n	800fa94 <memcpy+0xc>
 800fa92:	bd10      	pop	{r4, pc}
 800fa94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa9c:	e7f7      	b.n	800fa8e <memcpy+0x6>

0800fa9e <memmove>:
 800fa9e:	4288      	cmp	r0, r1
 800faa0:	b510      	push	{r4, lr}
 800faa2:	eb01 0302 	add.w	r3, r1, r2
 800faa6:	d807      	bhi.n	800fab8 <memmove+0x1a>
 800faa8:	1e42      	subs	r2, r0, #1
 800faaa:	4299      	cmp	r1, r3
 800faac:	d00a      	beq.n	800fac4 <memmove+0x26>
 800faae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fab2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fab6:	e7f8      	b.n	800faaa <memmove+0xc>
 800fab8:	4283      	cmp	r3, r0
 800faba:	d9f5      	bls.n	800faa8 <memmove+0xa>
 800fabc:	1881      	adds	r1, r0, r2
 800fabe:	1ad2      	subs	r2, r2, r3
 800fac0:	42d3      	cmn	r3, r2
 800fac2:	d100      	bne.n	800fac6 <memmove+0x28>
 800fac4:	bd10      	pop	{r4, pc}
 800fac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800faca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800face:	e7f7      	b.n	800fac0 <memmove+0x22>

0800fad0 <memset>:
 800fad0:	4402      	add	r2, r0
 800fad2:	4603      	mov	r3, r0
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d100      	bne.n	800fada <memset+0xa>
 800fad8:	4770      	bx	lr
 800fada:	f803 1b01 	strb.w	r1, [r3], #1
 800fade:	e7f9      	b.n	800fad4 <memset+0x4>

0800fae0 <__cvt>:
 800fae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fae4:	ec55 4b10 	vmov	r4, r5, d0
 800fae8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800faea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800faee:	2d00      	cmp	r5, #0
 800faf0:	460e      	mov	r6, r1
 800faf2:	4691      	mov	r9, r2
 800faf4:	4619      	mov	r1, r3
 800faf6:	bfb8      	it	lt
 800faf8:	4622      	movlt	r2, r4
 800fafa:	462b      	mov	r3, r5
 800fafc:	f027 0720 	bic.w	r7, r7, #32
 800fb00:	bfbb      	ittet	lt
 800fb02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fb06:	461d      	movlt	r5, r3
 800fb08:	2300      	movge	r3, #0
 800fb0a:	232d      	movlt	r3, #45	; 0x2d
 800fb0c:	bfb8      	it	lt
 800fb0e:	4614      	movlt	r4, r2
 800fb10:	2f46      	cmp	r7, #70	; 0x46
 800fb12:	700b      	strb	r3, [r1, #0]
 800fb14:	d004      	beq.n	800fb20 <__cvt+0x40>
 800fb16:	2f45      	cmp	r7, #69	; 0x45
 800fb18:	d100      	bne.n	800fb1c <__cvt+0x3c>
 800fb1a:	3601      	adds	r6, #1
 800fb1c:	2102      	movs	r1, #2
 800fb1e:	e000      	b.n	800fb22 <__cvt+0x42>
 800fb20:	2103      	movs	r1, #3
 800fb22:	ab03      	add	r3, sp, #12
 800fb24:	9301      	str	r3, [sp, #4]
 800fb26:	ab02      	add	r3, sp, #8
 800fb28:	9300      	str	r3, [sp, #0]
 800fb2a:	4632      	mov	r2, r6
 800fb2c:	4653      	mov	r3, sl
 800fb2e:	ec45 4b10 	vmov	d0, r4, r5
 800fb32:	f000 fea9 	bl	8010888 <_dtoa_r>
 800fb36:	2f47      	cmp	r7, #71	; 0x47
 800fb38:	4680      	mov	r8, r0
 800fb3a:	d102      	bne.n	800fb42 <__cvt+0x62>
 800fb3c:	f019 0f01 	tst.w	r9, #1
 800fb40:	d026      	beq.n	800fb90 <__cvt+0xb0>
 800fb42:	2f46      	cmp	r7, #70	; 0x46
 800fb44:	eb08 0906 	add.w	r9, r8, r6
 800fb48:	d111      	bne.n	800fb6e <__cvt+0x8e>
 800fb4a:	f898 3000 	ldrb.w	r3, [r8]
 800fb4e:	2b30      	cmp	r3, #48	; 0x30
 800fb50:	d10a      	bne.n	800fb68 <__cvt+0x88>
 800fb52:	2200      	movs	r2, #0
 800fb54:	2300      	movs	r3, #0
 800fb56:	4620      	mov	r0, r4
 800fb58:	4629      	mov	r1, r5
 800fb5a:	f7f0 ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb5e:	b918      	cbnz	r0, 800fb68 <__cvt+0x88>
 800fb60:	f1c6 0601 	rsb	r6, r6, #1
 800fb64:	f8ca 6000 	str.w	r6, [sl]
 800fb68:	f8da 3000 	ldr.w	r3, [sl]
 800fb6c:	4499      	add	r9, r3
 800fb6e:	2200      	movs	r2, #0
 800fb70:	2300      	movs	r3, #0
 800fb72:	4620      	mov	r0, r4
 800fb74:	4629      	mov	r1, r5
 800fb76:	f7f0 ffa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb7a:	b938      	cbnz	r0, 800fb8c <__cvt+0xac>
 800fb7c:	2230      	movs	r2, #48	; 0x30
 800fb7e:	9b03      	ldr	r3, [sp, #12]
 800fb80:	454b      	cmp	r3, r9
 800fb82:	d205      	bcs.n	800fb90 <__cvt+0xb0>
 800fb84:	1c59      	adds	r1, r3, #1
 800fb86:	9103      	str	r1, [sp, #12]
 800fb88:	701a      	strb	r2, [r3, #0]
 800fb8a:	e7f8      	b.n	800fb7e <__cvt+0x9e>
 800fb8c:	f8cd 900c 	str.w	r9, [sp, #12]
 800fb90:	9b03      	ldr	r3, [sp, #12]
 800fb92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb94:	eba3 0308 	sub.w	r3, r3, r8
 800fb98:	4640      	mov	r0, r8
 800fb9a:	6013      	str	r3, [r2, #0]
 800fb9c:	b004      	add	sp, #16
 800fb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fba2 <__exponent>:
 800fba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fba4:	2900      	cmp	r1, #0
 800fba6:	4604      	mov	r4, r0
 800fba8:	bfba      	itte	lt
 800fbaa:	4249      	neglt	r1, r1
 800fbac:	232d      	movlt	r3, #45	; 0x2d
 800fbae:	232b      	movge	r3, #43	; 0x2b
 800fbb0:	2909      	cmp	r1, #9
 800fbb2:	f804 2b02 	strb.w	r2, [r4], #2
 800fbb6:	7043      	strb	r3, [r0, #1]
 800fbb8:	dd20      	ble.n	800fbfc <__exponent+0x5a>
 800fbba:	f10d 0307 	add.w	r3, sp, #7
 800fbbe:	461f      	mov	r7, r3
 800fbc0:	260a      	movs	r6, #10
 800fbc2:	fb91 f5f6 	sdiv	r5, r1, r6
 800fbc6:	fb06 1115 	mls	r1, r6, r5, r1
 800fbca:	3130      	adds	r1, #48	; 0x30
 800fbcc:	2d09      	cmp	r5, #9
 800fbce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fbd2:	f103 32ff 	add.w	r2, r3, #4294967295
 800fbd6:	4629      	mov	r1, r5
 800fbd8:	dc09      	bgt.n	800fbee <__exponent+0x4c>
 800fbda:	3130      	adds	r1, #48	; 0x30
 800fbdc:	3b02      	subs	r3, #2
 800fbde:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fbe2:	42bb      	cmp	r3, r7
 800fbe4:	4622      	mov	r2, r4
 800fbe6:	d304      	bcc.n	800fbf2 <__exponent+0x50>
 800fbe8:	1a10      	subs	r0, r2, r0
 800fbea:	b003      	add	sp, #12
 800fbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbee:	4613      	mov	r3, r2
 800fbf0:	e7e7      	b.n	800fbc2 <__exponent+0x20>
 800fbf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbf6:	f804 2b01 	strb.w	r2, [r4], #1
 800fbfa:	e7f2      	b.n	800fbe2 <__exponent+0x40>
 800fbfc:	2330      	movs	r3, #48	; 0x30
 800fbfe:	4419      	add	r1, r3
 800fc00:	7083      	strb	r3, [r0, #2]
 800fc02:	1d02      	adds	r2, r0, #4
 800fc04:	70c1      	strb	r1, [r0, #3]
 800fc06:	e7ef      	b.n	800fbe8 <__exponent+0x46>

0800fc08 <_printf_float>:
 800fc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	b08d      	sub	sp, #52	; 0x34
 800fc0e:	460c      	mov	r4, r1
 800fc10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800fc14:	4616      	mov	r6, r2
 800fc16:	461f      	mov	r7, r3
 800fc18:	4605      	mov	r5, r0
 800fc1a:	f001 fd67 	bl	80116ec <_localeconv_r>
 800fc1e:	6803      	ldr	r3, [r0, #0]
 800fc20:	9304      	str	r3, [sp, #16]
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7f0 fad4 	bl	80001d0 <strlen>
 800fc28:	2300      	movs	r3, #0
 800fc2a:	930a      	str	r3, [sp, #40]	; 0x28
 800fc2c:	f8d8 3000 	ldr.w	r3, [r8]
 800fc30:	9005      	str	r0, [sp, #20]
 800fc32:	3307      	adds	r3, #7
 800fc34:	f023 0307 	bic.w	r3, r3, #7
 800fc38:	f103 0208 	add.w	r2, r3, #8
 800fc3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fc40:	f8d4 b000 	ldr.w	fp, [r4]
 800fc44:	f8c8 2000 	str.w	r2, [r8]
 800fc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fc50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fc54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fc58:	9307      	str	r3, [sp, #28]
 800fc5a:	f8cd 8018 	str.w	r8, [sp, #24]
 800fc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc62:	4ba7      	ldr	r3, [pc, #668]	; (800ff00 <_printf_float+0x2f8>)
 800fc64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc68:	f7f0 ff60 	bl	8000b2c <__aeabi_dcmpun>
 800fc6c:	bb70      	cbnz	r0, 800fccc <_printf_float+0xc4>
 800fc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc72:	4ba3      	ldr	r3, [pc, #652]	; (800ff00 <_printf_float+0x2f8>)
 800fc74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc78:	f7f0 ff3a 	bl	8000af0 <__aeabi_dcmple>
 800fc7c:	bb30      	cbnz	r0, 800fccc <_printf_float+0xc4>
 800fc7e:	2200      	movs	r2, #0
 800fc80:	2300      	movs	r3, #0
 800fc82:	4640      	mov	r0, r8
 800fc84:	4649      	mov	r1, r9
 800fc86:	f7f0 ff29 	bl	8000adc <__aeabi_dcmplt>
 800fc8a:	b110      	cbz	r0, 800fc92 <_printf_float+0x8a>
 800fc8c:	232d      	movs	r3, #45	; 0x2d
 800fc8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc92:	4a9c      	ldr	r2, [pc, #624]	; (800ff04 <_printf_float+0x2fc>)
 800fc94:	4b9c      	ldr	r3, [pc, #624]	; (800ff08 <_printf_float+0x300>)
 800fc96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fc9a:	bf8c      	ite	hi
 800fc9c:	4690      	movhi	r8, r2
 800fc9e:	4698      	movls	r8, r3
 800fca0:	2303      	movs	r3, #3
 800fca2:	f02b 0204 	bic.w	r2, fp, #4
 800fca6:	6123      	str	r3, [r4, #16]
 800fca8:	6022      	str	r2, [r4, #0]
 800fcaa:	f04f 0900 	mov.w	r9, #0
 800fcae:	9700      	str	r7, [sp, #0]
 800fcb0:	4633      	mov	r3, r6
 800fcb2:	aa0b      	add	r2, sp, #44	; 0x2c
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	f000 f9e6 	bl	8010088 <_printf_common>
 800fcbc:	3001      	adds	r0, #1
 800fcbe:	f040 808d 	bne.w	800fddc <_printf_float+0x1d4>
 800fcc2:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc6:	b00d      	add	sp, #52	; 0x34
 800fcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fccc:	4642      	mov	r2, r8
 800fcce:	464b      	mov	r3, r9
 800fcd0:	4640      	mov	r0, r8
 800fcd2:	4649      	mov	r1, r9
 800fcd4:	f7f0 ff2a 	bl	8000b2c <__aeabi_dcmpun>
 800fcd8:	b110      	cbz	r0, 800fce0 <_printf_float+0xd8>
 800fcda:	4a8c      	ldr	r2, [pc, #560]	; (800ff0c <_printf_float+0x304>)
 800fcdc:	4b8c      	ldr	r3, [pc, #560]	; (800ff10 <_printf_float+0x308>)
 800fcde:	e7da      	b.n	800fc96 <_printf_float+0x8e>
 800fce0:	6861      	ldr	r1, [r4, #4]
 800fce2:	1c4b      	adds	r3, r1, #1
 800fce4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800fce8:	a80a      	add	r0, sp, #40	; 0x28
 800fcea:	d13e      	bne.n	800fd6a <_printf_float+0x162>
 800fcec:	2306      	movs	r3, #6
 800fcee:	6063      	str	r3, [r4, #4]
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fcf6:	ab09      	add	r3, sp, #36	; 0x24
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	ec49 8b10 	vmov	d0, r8, r9
 800fcfe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fd02:	6022      	str	r2, [r4, #0]
 800fd04:	f8cd a004 	str.w	sl, [sp, #4]
 800fd08:	6861      	ldr	r1, [r4, #4]
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	f7ff fee8 	bl	800fae0 <__cvt>
 800fd10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800fd14:	2b47      	cmp	r3, #71	; 0x47
 800fd16:	4680      	mov	r8, r0
 800fd18:	d109      	bne.n	800fd2e <_printf_float+0x126>
 800fd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd1c:	1cd8      	adds	r0, r3, #3
 800fd1e:	db02      	blt.n	800fd26 <_printf_float+0x11e>
 800fd20:	6862      	ldr	r2, [r4, #4]
 800fd22:	4293      	cmp	r3, r2
 800fd24:	dd47      	ble.n	800fdb6 <_printf_float+0x1ae>
 800fd26:	f1aa 0a02 	sub.w	sl, sl, #2
 800fd2a:	fa5f fa8a 	uxtb.w	sl, sl
 800fd2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fd32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd34:	d824      	bhi.n	800fd80 <_printf_float+0x178>
 800fd36:	3901      	subs	r1, #1
 800fd38:	4652      	mov	r2, sl
 800fd3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd3e:	9109      	str	r1, [sp, #36]	; 0x24
 800fd40:	f7ff ff2f 	bl	800fba2 <__exponent>
 800fd44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd46:	1813      	adds	r3, r2, r0
 800fd48:	2a01      	cmp	r2, #1
 800fd4a:	4681      	mov	r9, r0
 800fd4c:	6123      	str	r3, [r4, #16]
 800fd4e:	dc02      	bgt.n	800fd56 <_printf_float+0x14e>
 800fd50:	6822      	ldr	r2, [r4, #0]
 800fd52:	07d1      	lsls	r1, r2, #31
 800fd54:	d501      	bpl.n	800fd5a <_printf_float+0x152>
 800fd56:	3301      	adds	r3, #1
 800fd58:	6123      	str	r3, [r4, #16]
 800fd5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d0a5      	beq.n	800fcae <_printf_float+0xa6>
 800fd62:	232d      	movs	r3, #45	; 0x2d
 800fd64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd68:	e7a1      	b.n	800fcae <_printf_float+0xa6>
 800fd6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800fd6e:	f000 8177 	beq.w	8010060 <_printf_float+0x458>
 800fd72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fd76:	d1bb      	bne.n	800fcf0 <_printf_float+0xe8>
 800fd78:	2900      	cmp	r1, #0
 800fd7a:	d1b9      	bne.n	800fcf0 <_printf_float+0xe8>
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	e7b6      	b.n	800fcee <_printf_float+0xe6>
 800fd80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800fd84:	d119      	bne.n	800fdba <_printf_float+0x1b2>
 800fd86:	2900      	cmp	r1, #0
 800fd88:	6863      	ldr	r3, [r4, #4]
 800fd8a:	dd0c      	ble.n	800fda6 <_printf_float+0x19e>
 800fd8c:	6121      	str	r1, [r4, #16]
 800fd8e:	b913      	cbnz	r3, 800fd96 <_printf_float+0x18e>
 800fd90:	6822      	ldr	r2, [r4, #0]
 800fd92:	07d2      	lsls	r2, r2, #31
 800fd94:	d502      	bpl.n	800fd9c <_printf_float+0x194>
 800fd96:	3301      	adds	r3, #1
 800fd98:	440b      	add	r3, r1
 800fd9a:	6123      	str	r3, [r4, #16]
 800fd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd9e:	65a3      	str	r3, [r4, #88]	; 0x58
 800fda0:	f04f 0900 	mov.w	r9, #0
 800fda4:	e7d9      	b.n	800fd5a <_printf_float+0x152>
 800fda6:	b913      	cbnz	r3, 800fdae <_printf_float+0x1a6>
 800fda8:	6822      	ldr	r2, [r4, #0]
 800fdaa:	07d0      	lsls	r0, r2, #31
 800fdac:	d501      	bpl.n	800fdb2 <_printf_float+0x1aa>
 800fdae:	3302      	adds	r3, #2
 800fdb0:	e7f3      	b.n	800fd9a <_printf_float+0x192>
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	e7f1      	b.n	800fd9a <_printf_float+0x192>
 800fdb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800fdba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	db05      	blt.n	800fdce <_printf_float+0x1c6>
 800fdc2:	6822      	ldr	r2, [r4, #0]
 800fdc4:	6123      	str	r3, [r4, #16]
 800fdc6:	07d1      	lsls	r1, r2, #31
 800fdc8:	d5e8      	bpl.n	800fd9c <_printf_float+0x194>
 800fdca:	3301      	adds	r3, #1
 800fdcc:	e7e5      	b.n	800fd9a <_printf_float+0x192>
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	bfd4      	ite	le
 800fdd2:	f1c3 0302 	rsble	r3, r3, #2
 800fdd6:	2301      	movgt	r3, #1
 800fdd8:	4413      	add	r3, r2
 800fdda:	e7de      	b.n	800fd9a <_printf_float+0x192>
 800fddc:	6823      	ldr	r3, [r4, #0]
 800fdde:	055a      	lsls	r2, r3, #21
 800fde0:	d407      	bmi.n	800fdf2 <_printf_float+0x1ea>
 800fde2:	6923      	ldr	r3, [r4, #16]
 800fde4:	4642      	mov	r2, r8
 800fde6:	4631      	mov	r1, r6
 800fde8:	4628      	mov	r0, r5
 800fdea:	47b8      	blx	r7
 800fdec:	3001      	adds	r0, #1
 800fdee:	d12b      	bne.n	800fe48 <_printf_float+0x240>
 800fdf0:	e767      	b.n	800fcc2 <_printf_float+0xba>
 800fdf2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fdf6:	f240 80dc 	bls.w	800ffb2 <_printf_float+0x3aa>
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe02:	f7f0 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	d033      	beq.n	800fe72 <_printf_float+0x26a>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	4a41      	ldr	r2, [pc, #260]	; (800ff14 <_printf_float+0x30c>)
 800fe0e:	4631      	mov	r1, r6
 800fe10:	4628      	mov	r0, r5
 800fe12:	47b8      	blx	r7
 800fe14:	3001      	adds	r0, #1
 800fe16:	f43f af54 	beq.w	800fcc2 <_printf_float+0xba>
 800fe1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	db02      	blt.n	800fe28 <_printf_float+0x220>
 800fe22:	6823      	ldr	r3, [r4, #0]
 800fe24:	07d8      	lsls	r0, r3, #31
 800fe26:	d50f      	bpl.n	800fe48 <_printf_float+0x240>
 800fe28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe2c:	4631      	mov	r1, r6
 800fe2e:	4628      	mov	r0, r5
 800fe30:	47b8      	blx	r7
 800fe32:	3001      	adds	r0, #1
 800fe34:	f43f af45 	beq.w	800fcc2 <_printf_float+0xba>
 800fe38:	f04f 0800 	mov.w	r8, #0
 800fe3c:	f104 091a 	add.w	r9, r4, #26
 800fe40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe42:	3b01      	subs	r3, #1
 800fe44:	4543      	cmp	r3, r8
 800fe46:	dc09      	bgt.n	800fe5c <_printf_float+0x254>
 800fe48:	6823      	ldr	r3, [r4, #0]
 800fe4a:	079b      	lsls	r3, r3, #30
 800fe4c:	f100 8103 	bmi.w	8010056 <_printf_float+0x44e>
 800fe50:	68e0      	ldr	r0, [r4, #12]
 800fe52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe54:	4298      	cmp	r0, r3
 800fe56:	bfb8      	it	lt
 800fe58:	4618      	movlt	r0, r3
 800fe5a:	e734      	b.n	800fcc6 <_printf_float+0xbe>
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	464a      	mov	r2, r9
 800fe60:	4631      	mov	r1, r6
 800fe62:	4628      	mov	r0, r5
 800fe64:	47b8      	blx	r7
 800fe66:	3001      	adds	r0, #1
 800fe68:	f43f af2b 	beq.w	800fcc2 <_printf_float+0xba>
 800fe6c:	f108 0801 	add.w	r8, r8, #1
 800fe70:	e7e6      	b.n	800fe40 <_printf_float+0x238>
 800fe72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	dc2b      	bgt.n	800fed0 <_printf_float+0x2c8>
 800fe78:	2301      	movs	r3, #1
 800fe7a:	4a26      	ldr	r2, [pc, #152]	; (800ff14 <_printf_float+0x30c>)
 800fe7c:	4631      	mov	r1, r6
 800fe7e:	4628      	mov	r0, r5
 800fe80:	47b8      	blx	r7
 800fe82:	3001      	adds	r0, #1
 800fe84:	f43f af1d 	beq.w	800fcc2 <_printf_float+0xba>
 800fe88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe8a:	b923      	cbnz	r3, 800fe96 <_printf_float+0x28e>
 800fe8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe8e:	b913      	cbnz	r3, 800fe96 <_printf_float+0x28e>
 800fe90:	6823      	ldr	r3, [r4, #0]
 800fe92:	07d9      	lsls	r1, r3, #31
 800fe94:	d5d8      	bpl.n	800fe48 <_printf_float+0x240>
 800fe96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe9a:	4631      	mov	r1, r6
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	47b8      	blx	r7
 800fea0:	3001      	adds	r0, #1
 800fea2:	f43f af0e 	beq.w	800fcc2 <_printf_float+0xba>
 800fea6:	f04f 0900 	mov.w	r9, #0
 800feaa:	f104 0a1a 	add.w	sl, r4, #26
 800feae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feb0:	425b      	negs	r3, r3
 800feb2:	454b      	cmp	r3, r9
 800feb4:	dc01      	bgt.n	800feba <_printf_float+0x2b2>
 800feb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feb8:	e794      	b.n	800fde4 <_printf_float+0x1dc>
 800feba:	2301      	movs	r3, #1
 800febc:	4652      	mov	r2, sl
 800febe:	4631      	mov	r1, r6
 800fec0:	4628      	mov	r0, r5
 800fec2:	47b8      	blx	r7
 800fec4:	3001      	adds	r0, #1
 800fec6:	f43f aefc 	beq.w	800fcc2 <_printf_float+0xba>
 800feca:	f109 0901 	add.w	r9, r9, #1
 800fece:	e7ee      	b.n	800feae <_printf_float+0x2a6>
 800fed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fed4:	429a      	cmp	r2, r3
 800fed6:	bfa8      	it	ge
 800fed8:	461a      	movge	r2, r3
 800feda:	2a00      	cmp	r2, #0
 800fedc:	4691      	mov	r9, r2
 800fede:	dd07      	ble.n	800fef0 <_printf_float+0x2e8>
 800fee0:	4613      	mov	r3, r2
 800fee2:	4631      	mov	r1, r6
 800fee4:	4642      	mov	r2, r8
 800fee6:	4628      	mov	r0, r5
 800fee8:	47b8      	blx	r7
 800feea:	3001      	adds	r0, #1
 800feec:	f43f aee9 	beq.w	800fcc2 <_printf_float+0xba>
 800fef0:	f104 031a 	add.w	r3, r4, #26
 800fef4:	f04f 0b00 	mov.w	fp, #0
 800fef8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fefc:	9306      	str	r3, [sp, #24]
 800fefe:	e015      	b.n	800ff2c <_printf_float+0x324>
 800ff00:	7fefffff 	.word	0x7fefffff
 800ff04:	08013dd2 	.word	0x08013dd2
 800ff08:	08013b14 	.word	0x08013b14
 800ff0c:	08013b1c 	.word	0x08013b1c
 800ff10:	08013b18 	.word	0x08013b18
 800ff14:	08013b20 	.word	0x08013b20
 800ff18:	2301      	movs	r3, #1
 800ff1a:	9a06      	ldr	r2, [sp, #24]
 800ff1c:	4631      	mov	r1, r6
 800ff1e:	4628      	mov	r0, r5
 800ff20:	47b8      	blx	r7
 800ff22:	3001      	adds	r0, #1
 800ff24:	f43f aecd 	beq.w	800fcc2 <_printf_float+0xba>
 800ff28:	f10b 0b01 	add.w	fp, fp, #1
 800ff2c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ff30:	ebaa 0309 	sub.w	r3, sl, r9
 800ff34:	455b      	cmp	r3, fp
 800ff36:	dcef      	bgt.n	800ff18 <_printf_float+0x310>
 800ff38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	44d0      	add	r8, sl
 800ff40:	db15      	blt.n	800ff6e <_printf_float+0x366>
 800ff42:	6823      	ldr	r3, [r4, #0]
 800ff44:	07da      	lsls	r2, r3, #31
 800ff46:	d412      	bmi.n	800ff6e <_printf_float+0x366>
 800ff48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff4c:	eba3 020a 	sub.w	r2, r3, sl
 800ff50:	eba3 0a01 	sub.w	sl, r3, r1
 800ff54:	4592      	cmp	sl, r2
 800ff56:	bfa8      	it	ge
 800ff58:	4692      	movge	sl, r2
 800ff5a:	f1ba 0f00 	cmp.w	sl, #0
 800ff5e:	dc0e      	bgt.n	800ff7e <_printf_float+0x376>
 800ff60:	f04f 0800 	mov.w	r8, #0
 800ff64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff68:	f104 091a 	add.w	r9, r4, #26
 800ff6c:	e019      	b.n	800ffa2 <_printf_float+0x39a>
 800ff6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff72:	4631      	mov	r1, r6
 800ff74:	4628      	mov	r0, r5
 800ff76:	47b8      	blx	r7
 800ff78:	3001      	adds	r0, #1
 800ff7a:	d1e5      	bne.n	800ff48 <_printf_float+0x340>
 800ff7c:	e6a1      	b.n	800fcc2 <_printf_float+0xba>
 800ff7e:	4653      	mov	r3, sl
 800ff80:	4642      	mov	r2, r8
 800ff82:	4631      	mov	r1, r6
 800ff84:	4628      	mov	r0, r5
 800ff86:	47b8      	blx	r7
 800ff88:	3001      	adds	r0, #1
 800ff8a:	d1e9      	bne.n	800ff60 <_printf_float+0x358>
 800ff8c:	e699      	b.n	800fcc2 <_printf_float+0xba>
 800ff8e:	2301      	movs	r3, #1
 800ff90:	464a      	mov	r2, r9
 800ff92:	4631      	mov	r1, r6
 800ff94:	4628      	mov	r0, r5
 800ff96:	47b8      	blx	r7
 800ff98:	3001      	adds	r0, #1
 800ff9a:	f43f ae92 	beq.w	800fcc2 <_printf_float+0xba>
 800ff9e:	f108 0801 	add.w	r8, r8, #1
 800ffa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffa6:	1a9b      	subs	r3, r3, r2
 800ffa8:	eba3 030a 	sub.w	r3, r3, sl
 800ffac:	4543      	cmp	r3, r8
 800ffae:	dcee      	bgt.n	800ff8e <_printf_float+0x386>
 800ffb0:	e74a      	b.n	800fe48 <_printf_float+0x240>
 800ffb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffb4:	2a01      	cmp	r2, #1
 800ffb6:	dc01      	bgt.n	800ffbc <_printf_float+0x3b4>
 800ffb8:	07db      	lsls	r3, r3, #31
 800ffba:	d53a      	bpl.n	8010032 <_printf_float+0x42a>
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	4642      	mov	r2, r8
 800ffc0:	4631      	mov	r1, r6
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	47b8      	blx	r7
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	f43f ae7b 	beq.w	800fcc2 <_printf_float+0xba>
 800ffcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffd0:	4631      	mov	r1, r6
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	47b8      	blx	r7
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	f108 0801 	add.w	r8, r8, #1
 800ffdc:	f43f ae71 	beq.w	800fcc2 <_printf_float+0xba>
 800ffe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f103 3aff 	add.w	sl, r3, #4294967295
 800ffe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ffec:	2300      	movs	r3, #0
 800ffee:	f7f0 fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800fff2:	b9c8      	cbnz	r0, 8010028 <_printf_float+0x420>
 800fff4:	4653      	mov	r3, sl
 800fff6:	4642      	mov	r2, r8
 800fff8:	4631      	mov	r1, r6
 800fffa:	4628      	mov	r0, r5
 800fffc:	47b8      	blx	r7
 800fffe:	3001      	adds	r0, #1
 8010000:	d10e      	bne.n	8010020 <_printf_float+0x418>
 8010002:	e65e      	b.n	800fcc2 <_printf_float+0xba>
 8010004:	2301      	movs	r3, #1
 8010006:	4652      	mov	r2, sl
 8010008:	4631      	mov	r1, r6
 801000a:	4628      	mov	r0, r5
 801000c:	47b8      	blx	r7
 801000e:	3001      	adds	r0, #1
 8010010:	f43f ae57 	beq.w	800fcc2 <_printf_float+0xba>
 8010014:	f108 0801 	add.w	r8, r8, #1
 8010018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801001a:	3b01      	subs	r3, #1
 801001c:	4543      	cmp	r3, r8
 801001e:	dcf1      	bgt.n	8010004 <_printf_float+0x3fc>
 8010020:	464b      	mov	r3, r9
 8010022:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010026:	e6de      	b.n	800fde6 <_printf_float+0x1de>
 8010028:	f04f 0800 	mov.w	r8, #0
 801002c:	f104 0a1a 	add.w	sl, r4, #26
 8010030:	e7f2      	b.n	8010018 <_printf_float+0x410>
 8010032:	2301      	movs	r3, #1
 8010034:	e7df      	b.n	800fff6 <_printf_float+0x3ee>
 8010036:	2301      	movs	r3, #1
 8010038:	464a      	mov	r2, r9
 801003a:	4631      	mov	r1, r6
 801003c:	4628      	mov	r0, r5
 801003e:	47b8      	blx	r7
 8010040:	3001      	adds	r0, #1
 8010042:	f43f ae3e 	beq.w	800fcc2 <_printf_float+0xba>
 8010046:	f108 0801 	add.w	r8, r8, #1
 801004a:	68e3      	ldr	r3, [r4, #12]
 801004c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801004e:	1a9b      	subs	r3, r3, r2
 8010050:	4543      	cmp	r3, r8
 8010052:	dcf0      	bgt.n	8010036 <_printf_float+0x42e>
 8010054:	e6fc      	b.n	800fe50 <_printf_float+0x248>
 8010056:	f04f 0800 	mov.w	r8, #0
 801005a:	f104 0919 	add.w	r9, r4, #25
 801005e:	e7f4      	b.n	801004a <_printf_float+0x442>
 8010060:	2900      	cmp	r1, #0
 8010062:	f43f ae8b 	beq.w	800fd7c <_printf_float+0x174>
 8010066:	2300      	movs	r3, #0
 8010068:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801006c:	ab09      	add	r3, sp, #36	; 0x24
 801006e:	9300      	str	r3, [sp, #0]
 8010070:	ec49 8b10 	vmov	d0, r8, r9
 8010074:	6022      	str	r2, [r4, #0]
 8010076:	f8cd a004 	str.w	sl, [sp, #4]
 801007a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801007e:	4628      	mov	r0, r5
 8010080:	f7ff fd2e 	bl	800fae0 <__cvt>
 8010084:	4680      	mov	r8, r0
 8010086:	e648      	b.n	800fd1a <_printf_float+0x112>

08010088 <_printf_common>:
 8010088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801008c:	4691      	mov	r9, r2
 801008e:	461f      	mov	r7, r3
 8010090:	688a      	ldr	r2, [r1, #8]
 8010092:	690b      	ldr	r3, [r1, #16]
 8010094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010098:	4293      	cmp	r3, r2
 801009a:	bfb8      	it	lt
 801009c:	4613      	movlt	r3, r2
 801009e:	f8c9 3000 	str.w	r3, [r9]
 80100a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100a6:	4606      	mov	r6, r0
 80100a8:	460c      	mov	r4, r1
 80100aa:	b112      	cbz	r2, 80100b2 <_printf_common+0x2a>
 80100ac:	3301      	adds	r3, #1
 80100ae:	f8c9 3000 	str.w	r3, [r9]
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	0699      	lsls	r1, r3, #26
 80100b6:	bf42      	ittt	mi
 80100b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80100bc:	3302      	addmi	r3, #2
 80100be:	f8c9 3000 	strmi.w	r3, [r9]
 80100c2:	6825      	ldr	r5, [r4, #0]
 80100c4:	f015 0506 	ands.w	r5, r5, #6
 80100c8:	d107      	bne.n	80100da <_printf_common+0x52>
 80100ca:	f104 0a19 	add.w	sl, r4, #25
 80100ce:	68e3      	ldr	r3, [r4, #12]
 80100d0:	f8d9 2000 	ldr.w	r2, [r9]
 80100d4:	1a9b      	subs	r3, r3, r2
 80100d6:	42ab      	cmp	r3, r5
 80100d8:	dc28      	bgt.n	801012c <_printf_common+0xa4>
 80100da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80100de:	6822      	ldr	r2, [r4, #0]
 80100e0:	3300      	adds	r3, #0
 80100e2:	bf18      	it	ne
 80100e4:	2301      	movne	r3, #1
 80100e6:	0692      	lsls	r2, r2, #26
 80100e8:	d42d      	bmi.n	8010146 <_printf_common+0xbe>
 80100ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100ee:	4639      	mov	r1, r7
 80100f0:	4630      	mov	r0, r6
 80100f2:	47c0      	blx	r8
 80100f4:	3001      	adds	r0, #1
 80100f6:	d020      	beq.n	801013a <_printf_common+0xb2>
 80100f8:	6823      	ldr	r3, [r4, #0]
 80100fa:	68e5      	ldr	r5, [r4, #12]
 80100fc:	f8d9 2000 	ldr.w	r2, [r9]
 8010100:	f003 0306 	and.w	r3, r3, #6
 8010104:	2b04      	cmp	r3, #4
 8010106:	bf08      	it	eq
 8010108:	1aad      	subeq	r5, r5, r2
 801010a:	68a3      	ldr	r3, [r4, #8]
 801010c:	6922      	ldr	r2, [r4, #16]
 801010e:	bf0c      	ite	eq
 8010110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010114:	2500      	movne	r5, #0
 8010116:	4293      	cmp	r3, r2
 8010118:	bfc4      	itt	gt
 801011a:	1a9b      	subgt	r3, r3, r2
 801011c:	18ed      	addgt	r5, r5, r3
 801011e:	f04f 0900 	mov.w	r9, #0
 8010122:	341a      	adds	r4, #26
 8010124:	454d      	cmp	r5, r9
 8010126:	d11a      	bne.n	801015e <_printf_common+0xd6>
 8010128:	2000      	movs	r0, #0
 801012a:	e008      	b.n	801013e <_printf_common+0xb6>
 801012c:	2301      	movs	r3, #1
 801012e:	4652      	mov	r2, sl
 8010130:	4639      	mov	r1, r7
 8010132:	4630      	mov	r0, r6
 8010134:	47c0      	blx	r8
 8010136:	3001      	adds	r0, #1
 8010138:	d103      	bne.n	8010142 <_printf_common+0xba>
 801013a:	f04f 30ff 	mov.w	r0, #4294967295
 801013e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010142:	3501      	adds	r5, #1
 8010144:	e7c3      	b.n	80100ce <_printf_common+0x46>
 8010146:	18e1      	adds	r1, r4, r3
 8010148:	1c5a      	adds	r2, r3, #1
 801014a:	2030      	movs	r0, #48	; 0x30
 801014c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010150:	4422      	add	r2, r4
 8010152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010156:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801015a:	3302      	adds	r3, #2
 801015c:	e7c5      	b.n	80100ea <_printf_common+0x62>
 801015e:	2301      	movs	r3, #1
 8010160:	4622      	mov	r2, r4
 8010162:	4639      	mov	r1, r7
 8010164:	4630      	mov	r0, r6
 8010166:	47c0      	blx	r8
 8010168:	3001      	adds	r0, #1
 801016a:	d0e6      	beq.n	801013a <_printf_common+0xb2>
 801016c:	f109 0901 	add.w	r9, r9, #1
 8010170:	e7d8      	b.n	8010124 <_printf_common+0x9c>
	...

08010174 <_printf_i>:
 8010174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010178:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801017c:	460c      	mov	r4, r1
 801017e:	7e09      	ldrb	r1, [r1, #24]
 8010180:	b085      	sub	sp, #20
 8010182:	296e      	cmp	r1, #110	; 0x6e
 8010184:	4617      	mov	r7, r2
 8010186:	4606      	mov	r6, r0
 8010188:	4698      	mov	r8, r3
 801018a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801018c:	f000 80b3 	beq.w	80102f6 <_printf_i+0x182>
 8010190:	d822      	bhi.n	80101d8 <_printf_i+0x64>
 8010192:	2963      	cmp	r1, #99	; 0x63
 8010194:	d036      	beq.n	8010204 <_printf_i+0x90>
 8010196:	d80a      	bhi.n	80101ae <_printf_i+0x3a>
 8010198:	2900      	cmp	r1, #0
 801019a:	f000 80b9 	beq.w	8010310 <_printf_i+0x19c>
 801019e:	2958      	cmp	r1, #88	; 0x58
 80101a0:	f000 8083 	beq.w	80102aa <_printf_i+0x136>
 80101a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80101ac:	e032      	b.n	8010214 <_printf_i+0xa0>
 80101ae:	2964      	cmp	r1, #100	; 0x64
 80101b0:	d001      	beq.n	80101b6 <_printf_i+0x42>
 80101b2:	2969      	cmp	r1, #105	; 0x69
 80101b4:	d1f6      	bne.n	80101a4 <_printf_i+0x30>
 80101b6:	6820      	ldr	r0, [r4, #0]
 80101b8:	6813      	ldr	r3, [r2, #0]
 80101ba:	0605      	lsls	r5, r0, #24
 80101bc:	f103 0104 	add.w	r1, r3, #4
 80101c0:	d52a      	bpl.n	8010218 <_printf_i+0xa4>
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	6011      	str	r1, [r2, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	da03      	bge.n	80101d2 <_printf_i+0x5e>
 80101ca:	222d      	movs	r2, #45	; 0x2d
 80101cc:	425b      	negs	r3, r3
 80101ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80101d2:	486f      	ldr	r0, [pc, #444]	; (8010390 <_printf_i+0x21c>)
 80101d4:	220a      	movs	r2, #10
 80101d6:	e039      	b.n	801024c <_printf_i+0xd8>
 80101d8:	2973      	cmp	r1, #115	; 0x73
 80101da:	f000 809d 	beq.w	8010318 <_printf_i+0x1a4>
 80101de:	d808      	bhi.n	80101f2 <_printf_i+0x7e>
 80101e0:	296f      	cmp	r1, #111	; 0x6f
 80101e2:	d020      	beq.n	8010226 <_printf_i+0xb2>
 80101e4:	2970      	cmp	r1, #112	; 0x70
 80101e6:	d1dd      	bne.n	80101a4 <_printf_i+0x30>
 80101e8:	6823      	ldr	r3, [r4, #0]
 80101ea:	f043 0320 	orr.w	r3, r3, #32
 80101ee:	6023      	str	r3, [r4, #0]
 80101f0:	e003      	b.n	80101fa <_printf_i+0x86>
 80101f2:	2975      	cmp	r1, #117	; 0x75
 80101f4:	d017      	beq.n	8010226 <_printf_i+0xb2>
 80101f6:	2978      	cmp	r1, #120	; 0x78
 80101f8:	d1d4      	bne.n	80101a4 <_printf_i+0x30>
 80101fa:	2378      	movs	r3, #120	; 0x78
 80101fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010200:	4864      	ldr	r0, [pc, #400]	; (8010394 <_printf_i+0x220>)
 8010202:	e055      	b.n	80102b0 <_printf_i+0x13c>
 8010204:	6813      	ldr	r3, [r2, #0]
 8010206:	1d19      	adds	r1, r3, #4
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	6011      	str	r1, [r2, #0]
 801020c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010214:	2301      	movs	r3, #1
 8010216:	e08c      	b.n	8010332 <_printf_i+0x1be>
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	6011      	str	r1, [r2, #0]
 801021c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010220:	bf18      	it	ne
 8010222:	b21b      	sxthne	r3, r3
 8010224:	e7cf      	b.n	80101c6 <_printf_i+0x52>
 8010226:	6813      	ldr	r3, [r2, #0]
 8010228:	6825      	ldr	r5, [r4, #0]
 801022a:	1d18      	adds	r0, r3, #4
 801022c:	6010      	str	r0, [r2, #0]
 801022e:	0628      	lsls	r0, r5, #24
 8010230:	d501      	bpl.n	8010236 <_printf_i+0xc2>
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	e002      	b.n	801023c <_printf_i+0xc8>
 8010236:	0668      	lsls	r0, r5, #25
 8010238:	d5fb      	bpl.n	8010232 <_printf_i+0xbe>
 801023a:	881b      	ldrh	r3, [r3, #0]
 801023c:	4854      	ldr	r0, [pc, #336]	; (8010390 <_printf_i+0x21c>)
 801023e:	296f      	cmp	r1, #111	; 0x6f
 8010240:	bf14      	ite	ne
 8010242:	220a      	movne	r2, #10
 8010244:	2208      	moveq	r2, #8
 8010246:	2100      	movs	r1, #0
 8010248:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801024c:	6865      	ldr	r5, [r4, #4]
 801024e:	60a5      	str	r5, [r4, #8]
 8010250:	2d00      	cmp	r5, #0
 8010252:	f2c0 8095 	blt.w	8010380 <_printf_i+0x20c>
 8010256:	6821      	ldr	r1, [r4, #0]
 8010258:	f021 0104 	bic.w	r1, r1, #4
 801025c:	6021      	str	r1, [r4, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d13d      	bne.n	80102de <_printf_i+0x16a>
 8010262:	2d00      	cmp	r5, #0
 8010264:	f040 808e 	bne.w	8010384 <_printf_i+0x210>
 8010268:	4665      	mov	r5, ip
 801026a:	2a08      	cmp	r2, #8
 801026c:	d10b      	bne.n	8010286 <_printf_i+0x112>
 801026e:	6823      	ldr	r3, [r4, #0]
 8010270:	07db      	lsls	r3, r3, #31
 8010272:	d508      	bpl.n	8010286 <_printf_i+0x112>
 8010274:	6923      	ldr	r3, [r4, #16]
 8010276:	6862      	ldr	r2, [r4, #4]
 8010278:	429a      	cmp	r2, r3
 801027a:	bfde      	ittt	le
 801027c:	2330      	movle	r3, #48	; 0x30
 801027e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010282:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010286:	ebac 0305 	sub.w	r3, ip, r5
 801028a:	6123      	str	r3, [r4, #16]
 801028c:	f8cd 8000 	str.w	r8, [sp]
 8010290:	463b      	mov	r3, r7
 8010292:	aa03      	add	r2, sp, #12
 8010294:	4621      	mov	r1, r4
 8010296:	4630      	mov	r0, r6
 8010298:	f7ff fef6 	bl	8010088 <_printf_common>
 801029c:	3001      	adds	r0, #1
 801029e:	d14d      	bne.n	801033c <_printf_i+0x1c8>
 80102a0:	f04f 30ff 	mov.w	r0, #4294967295
 80102a4:	b005      	add	sp, #20
 80102a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102aa:	4839      	ldr	r0, [pc, #228]	; (8010390 <_printf_i+0x21c>)
 80102ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80102b0:	6813      	ldr	r3, [r2, #0]
 80102b2:	6821      	ldr	r1, [r4, #0]
 80102b4:	1d1d      	adds	r5, r3, #4
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	6015      	str	r5, [r2, #0]
 80102ba:	060a      	lsls	r2, r1, #24
 80102bc:	d50b      	bpl.n	80102d6 <_printf_i+0x162>
 80102be:	07ca      	lsls	r2, r1, #31
 80102c0:	bf44      	itt	mi
 80102c2:	f041 0120 	orrmi.w	r1, r1, #32
 80102c6:	6021      	strmi	r1, [r4, #0]
 80102c8:	b91b      	cbnz	r3, 80102d2 <_printf_i+0x15e>
 80102ca:	6822      	ldr	r2, [r4, #0]
 80102cc:	f022 0220 	bic.w	r2, r2, #32
 80102d0:	6022      	str	r2, [r4, #0]
 80102d2:	2210      	movs	r2, #16
 80102d4:	e7b7      	b.n	8010246 <_printf_i+0xd2>
 80102d6:	064d      	lsls	r5, r1, #25
 80102d8:	bf48      	it	mi
 80102da:	b29b      	uxthmi	r3, r3
 80102dc:	e7ef      	b.n	80102be <_printf_i+0x14a>
 80102de:	4665      	mov	r5, ip
 80102e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80102e4:	fb02 3311 	mls	r3, r2, r1, r3
 80102e8:	5cc3      	ldrb	r3, [r0, r3]
 80102ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80102ee:	460b      	mov	r3, r1
 80102f0:	2900      	cmp	r1, #0
 80102f2:	d1f5      	bne.n	80102e0 <_printf_i+0x16c>
 80102f4:	e7b9      	b.n	801026a <_printf_i+0xf6>
 80102f6:	6813      	ldr	r3, [r2, #0]
 80102f8:	6825      	ldr	r5, [r4, #0]
 80102fa:	6961      	ldr	r1, [r4, #20]
 80102fc:	1d18      	adds	r0, r3, #4
 80102fe:	6010      	str	r0, [r2, #0]
 8010300:	0628      	lsls	r0, r5, #24
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	d501      	bpl.n	801030a <_printf_i+0x196>
 8010306:	6019      	str	r1, [r3, #0]
 8010308:	e002      	b.n	8010310 <_printf_i+0x19c>
 801030a:	066a      	lsls	r2, r5, #25
 801030c:	d5fb      	bpl.n	8010306 <_printf_i+0x192>
 801030e:	8019      	strh	r1, [r3, #0]
 8010310:	2300      	movs	r3, #0
 8010312:	6123      	str	r3, [r4, #16]
 8010314:	4665      	mov	r5, ip
 8010316:	e7b9      	b.n	801028c <_printf_i+0x118>
 8010318:	6813      	ldr	r3, [r2, #0]
 801031a:	1d19      	adds	r1, r3, #4
 801031c:	6011      	str	r1, [r2, #0]
 801031e:	681d      	ldr	r5, [r3, #0]
 8010320:	6862      	ldr	r2, [r4, #4]
 8010322:	2100      	movs	r1, #0
 8010324:	4628      	mov	r0, r5
 8010326:	f7ef ff5b 	bl	80001e0 <memchr>
 801032a:	b108      	cbz	r0, 8010330 <_printf_i+0x1bc>
 801032c:	1b40      	subs	r0, r0, r5
 801032e:	6060      	str	r0, [r4, #4]
 8010330:	6863      	ldr	r3, [r4, #4]
 8010332:	6123      	str	r3, [r4, #16]
 8010334:	2300      	movs	r3, #0
 8010336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801033a:	e7a7      	b.n	801028c <_printf_i+0x118>
 801033c:	6923      	ldr	r3, [r4, #16]
 801033e:	462a      	mov	r2, r5
 8010340:	4639      	mov	r1, r7
 8010342:	4630      	mov	r0, r6
 8010344:	47c0      	blx	r8
 8010346:	3001      	adds	r0, #1
 8010348:	d0aa      	beq.n	80102a0 <_printf_i+0x12c>
 801034a:	6823      	ldr	r3, [r4, #0]
 801034c:	079b      	lsls	r3, r3, #30
 801034e:	d413      	bmi.n	8010378 <_printf_i+0x204>
 8010350:	68e0      	ldr	r0, [r4, #12]
 8010352:	9b03      	ldr	r3, [sp, #12]
 8010354:	4298      	cmp	r0, r3
 8010356:	bfb8      	it	lt
 8010358:	4618      	movlt	r0, r3
 801035a:	e7a3      	b.n	80102a4 <_printf_i+0x130>
 801035c:	2301      	movs	r3, #1
 801035e:	464a      	mov	r2, r9
 8010360:	4639      	mov	r1, r7
 8010362:	4630      	mov	r0, r6
 8010364:	47c0      	blx	r8
 8010366:	3001      	adds	r0, #1
 8010368:	d09a      	beq.n	80102a0 <_printf_i+0x12c>
 801036a:	3501      	adds	r5, #1
 801036c:	68e3      	ldr	r3, [r4, #12]
 801036e:	9a03      	ldr	r2, [sp, #12]
 8010370:	1a9b      	subs	r3, r3, r2
 8010372:	42ab      	cmp	r3, r5
 8010374:	dcf2      	bgt.n	801035c <_printf_i+0x1e8>
 8010376:	e7eb      	b.n	8010350 <_printf_i+0x1dc>
 8010378:	2500      	movs	r5, #0
 801037a:	f104 0919 	add.w	r9, r4, #25
 801037e:	e7f5      	b.n	801036c <_printf_i+0x1f8>
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1ac      	bne.n	80102de <_printf_i+0x16a>
 8010384:	7803      	ldrb	r3, [r0, #0]
 8010386:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801038a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801038e:	e76c      	b.n	801026a <_printf_i+0xf6>
 8010390:	08013b22 	.word	0x08013b22
 8010394:	08013b33 	.word	0x08013b33

08010398 <iprintf>:
 8010398:	b40f      	push	{r0, r1, r2, r3}
 801039a:	4b0a      	ldr	r3, [pc, #40]	; (80103c4 <iprintf+0x2c>)
 801039c:	b513      	push	{r0, r1, r4, lr}
 801039e:	681c      	ldr	r4, [r3, #0]
 80103a0:	b124      	cbz	r4, 80103ac <iprintf+0x14>
 80103a2:	69a3      	ldr	r3, [r4, #24]
 80103a4:	b913      	cbnz	r3, 80103ac <iprintf+0x14>
 80103a6:	4620      	mov	r0, r4
 80103a8:	f001 f916 	bl	80115d8 <__sinit>
 80103ac:	ab05      	add	r3, sp, #20
 80103ae:	9a04      	ldr	r2, [sp, #16]
 80103b0:	68a1      	ldr	r1, [r4, #8]
 80103b2:	9301      	str	r3, [sp, #4]
 80103b4:	4620      	mov	r0, r4
 80103b6:	f001 fdcf 	bl	8011f58 <_vfiprintf_r>
 80103ba:	b002      	add	sp, #8
 80103bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103c0:	b004      	add	sp, #16
 80103c2:	4770      	bx	lr
 80103c4:	20001aa8 	.word	0x20001aa8

080103c8 <_puts_r>:
 80103c8:	b570      	push	{r4, r5, r6, lr}
 80103ca:	460e      	mov	r6, r1
 80103cc:	4605      	mov	r5, r0
 80103ce:	b118      	cbz	r0, 80103d8 <_puts_r+0x10>
 80103d0:	6983      	ldr	r3, [r0, #24]
 80103d2:	b90b      	cbnz	r3, 80103d8 <_puts_r+0x10>
 80103d4:	f001 f900 	bl	80115d8 <__sinit>
 80103d8:	69ab      	ldr	r3, [r5, #24]
 80103da:	68ac      	ldr	r4, [r5, #8]
 80103dc:	b913      	cbnz	r3, 80103e4 <_puts_r+0x1c>
 80103de:	4628      	mov	r0, r5
 80103e0:	f001 f8fa 	bl	80115d8 <__sinit>
 80103e4:	4b23      	ldr	r3, [pc, #140]	; (8010474 <_puts_r+0xac>)
 80103e6:	429c      	cmp	r4, r3
 80103e8:	d117      	bne.n	801041a <_puts_r+0x52>
 80103ea:	686c      	ldr	r4, [r5, #4]
 80103ec:	89a3      	ldrh	r3, [r4, #12]
 80103ee:	071b      	lsls	r3, r3, #28
 80103f0:	d51d      	bpl.n	801042e <_puts_r+0x66>
 80103f2:	6923      	ldr	r3, [r4, #16]
 80103f4:	b1db      	cbz	r3, 801042e <_puts_r+0x66>
 80103f6:	3e01      	subs	r6, #1
 80103f8:	68a3      	ldr	r3, [r4, #8]
 80103fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80103fe:	3b01      	subs	r3, #1
 8010400:	60a3      	str	r3, [r4, #8]
 8010402:	b9e9      	cbnz	r1, 8010440 <_puts_r+0x78>
 8010404:	2b00      	cmp	r3, #0
 8010406:	da2e      	bge.n	8010466 <_puts_r+0x9e>
 8010408:	4622      	mov	r2, r4
 801040a:	210a      	movs	r1, #10
 801040c:	4628      	mov	r0, r5
 801040e:	f000 f8ed 	bl	80105ec <__swbuf_r>
 8010412:	3001      	adds	r0, #1
 8010414:	d011      	beq.n	801043a <_puts_r+0x72>
 8010416:	200a      	movs	r0, #10
 8010418:	e011      	b.n	801043e <_puts_r+0x76>
 801041a:	4b17      	ldr	r3, [pc, #92]	; (8010478 <_puts_r+0xb0>)
 801041c:	429c      	cmp	r4, r3
 801041e:	d101      	bne.n	8010424 <_puts_r+0x5c>
 8010420:	68ac      	ldr	r4, [r5, #8]
 8010422:	e7e3      	b.n	80103ec <_puts_r+0x24>
 8010424:	4b15      	ldr	r3, [pc, #84]	; (801047c <_puts_r+0xb4>)
 8010426:	429c      	cmp	r4, r3
 8010428:	bf08      	it	eq
 801042a:	68ec      	ldreq	r4, [r5, #12]
 801042c:	e7de      	b.n	80103ec <_puts_r+0x24>
 801042e:	4621      	mov	r1, r4
 8010430:	4628      	mov	r0, r5
 8010432:	f000 f92d 	bl	8010690 <__swsetup_r>
 8010436:	2800      	cmp	r0, #0
 8010438:	d0dd      	beq.n	80103f6 <_puts_r+0x2e>
 801043a:	f04f 30ff 	mov.w	r0, #4294967295
 801043e:	bd70      	pop	{r4, r5, r6, pc}
 8010440:	2b00      	cmp	r3, #0
 8010442:	da04      	bge.n	801044e <_puts_r+0x86>
 8010444:	69a2      	ldr	r2, [r4, #24]
 8010446:	429a      	cmp	r2, r3
 8010448:	dc06      	bgt.n	8010458 <_puts_r+0x90>
 801044a:	290a      	cmp	r1, #10
 801044c:	d004      	beq.n	8010458 <_puts_r+0x90>
 801044e:	6823      	ldr	r3, [r4, #0]
 8010450:	1c5a      	adds	r2, r3, #1
 8010452:	6022      	str	r2, [r4, #0]
 8010454:	7019      	strb	r1, [r3, #0]
 8010456:	e7cf      	b.n	80103f8 <_puts_r+0x30>
 8010458:	4622      	mov	r2, r4
 801045a:	4628      	mov	r0, r5
 801045c:	f000 f8c6 	bl	80105ec <__swbuf_r>
 8010460:	3001      	adds	r0, #1
 8010462:	d1c9      	bne.n	80103f8 <_puts_r+0x30>
 8010464:	e7e9      	b.n	801043a <_puts_r+0x72>
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	200a      	movs	r0, #10
 801046a:	1c5a      	adds	r2, r3, #1
 801046c:	6022      	str	r2, [r4, #0]
 801046e:	7018      	strb	r0, [r3, #0]
 8010470:	e7e5      	b.n	801043e <_puts_r+0x76>
 8010472:	bf00      	nop
 8010474:	08013b74 	.word	0x08013b74
 8010478:	08013b94 	.word	0x08013b94
 801047c:	08013b54 	.word	0x08013b54

08010480 <puts>:
 8010480:	4b02      	ldr	r3, [pc, #8]	; (801048c <puts+0xc>)
 8010482:	4601      	mov	r1, r0
 8010484:	6818      	ldr	r0, [r3, #0]
 8010486:	f7ff bf9f 	b.w	80103c8 <_puts_r>
 801048a:	bf00      	nop
 801048c:	20001aa8 	.word	0x20001aa8

08010490 <setvbuf>:
 8010490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010494:	461d      	mov	r5, r3
 8010496:	4b51      	ldr	r3, [pc, #324]	; (80105dc <setvbuf+0x14c>)
 8010498:	681e      	ldr	r6, [r3, #0]
 801049a:	4604      	mov	r4, r0
 801049c:	460f      	mov	r7, r1
 801049e:	4690      	mov	r8, r2
 80104a0:	b126      	cbz	r6, 80104ac <setvbuf+0x1c>
 80104a2:	69b3      	ldr	r3, [r6, #24]
 80104a4:	b913      	cbnz	r3, 80104ac <setvbuf+0x1c>
 80104a6:	4630      	mov	r0, r6
 80104a8:	f001 f896 	bl	80115d8 <__sinit>
 80104ac:	4b4c      	ldr	r3, [pc, #304]	; (80105e0 <setvbuf+0x150>)
 80104ae:	429c      	cmp	r4, r3
 80104b0:	d152      	bne.n	8010558 <setvbuf+0xc8>
 80104b2:	6874      	ldr	r4, [r6, #4]
 80104b4:	f1b8 0f02 	cmp.w	r8, #2
 80104b8:	d006      	beq.n	80104c8 <setvbuf+0x38>
 80104ba:	f1b8 0f01 	cmp.w	r8, #1
 80104be:	f200 8089 	bhi.w	80105d4 <setvbuf+0x144>
 80104c2:	2d00      	cmp	r5, #0
 80104c4:	f2c0 8086 	blt.w	80105d4 <setvbuf+0x144>
 80104c8:	4621      	mov	r1, r4
 80104ca:	4630      	mov	r0, r6
 80104cc:	f001 f81a 	bl	8011504 <_fflush_r>
 80104d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104d2:	b141      	cbz	r1, 80104e6 <setvbuf+0x56>
 80104d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104d8:	4299      	cmp	r1, r3
 80104da:	d002      	beq.n	80104e2 <setvbuf+0x52>
 80104dc:	4630      	mov	r0, r6
 80104de:	f001 fc69 	bl	8011db4 <_free_r>
 80104e2:	2300      	movs	r3, #0
 80104e4:	6363      	str	r3, [r4, #52]	; 0x34
 80104e6:	2300      	movs	r3, #0
 80104e8:	61a3      	str	r3, [r4, #24]
 80104ea:	6063      	str	r3, [r4, #4]
 80104ec:	89a3      	ldrh	r3, [r4, #12]
 80104ee:	061b      	lsls	r3, r3, #24
 80104f0:	d503      	bpl.n	80104fa <setvbuf+0x6a>
 80104f2:	6921      	ldr	r1, [r4, #16]
 80104f4:	4630      	mov	r0, r6
 80104f6:	f001 fc5d 	bl	8011db4 <_free_r>
 80104fa:	89a3      	ldrh	r3, [r4, #12]
 80104fc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8010500:	f023 0303 	bic.w	r3, r3, #3
 8010504:	f1b8 0f02 	cmp.w	r8, #2
 8010508:	81a3      	strh	r3, [r4, #12]
 801050a:	d05d      	beq.n	80105c8 <setvbuf+0x138>
 801050c:	ab01      	add	r3, sp, #4
 801050e:	466a      	mov	r2, sp
 8010510:	4621      	mov	r1, r4
 8010512:	4630      	mov	r0, r6
 8010514:	f001 f8f8 	bl	8011708 <__swhatbuf_r>
 8010518:	89a3      	ldrh	r3, [r4, #12]
 801051a:	4318      	orrs	r0, r3
 801051c:	81a0      	strh	r0, [r4, #12]
 801051e:	bb2d      	cbnz	r5, 801056c <setvbuf+0xdc>
 8010520:	9d00      	ldr	r5, [sp, #0]
 8010522:	4628      	mov	r0, r5
 8010524:	f001 f954 	bl	80117d0 <malloc>
 8010528:	4607      	mov	r7, r0
 801052a:	2800      	cmp	r0, #0
 801052c:	d14e      	bne.n	80105cc <setvbuf+0x13c>
 801052e:	f8dd 9000 	ldr.w	r9, [sp]
 8010532:	45a9      	cmp	r9, r5
 8010534:	d13c      	bne.n	80105b0 <setvbuf+0x120>
 8010536:	f04f 30ff 	mov.w	r0, #4294967295
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	f043 0302 	orr.w	r3, r3, #2
 8010540:	81a3      	strh	r3, [r4, #12]
 8010542:	2300      	movs	r3, #0
 8010544:	60a3      	str	r3, [r4, #8]
 8010546:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801054a:	6023      	str	r3, [r4, #0]
 801054c:	6123      	str	r3, [r4, #16]
 801054e:	2301      	movs	r3, #1
 8010550:	6163      	str	r3, [r4, #20]
 8010552:	b003      	add	sp, #12
 8010554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010558:	4b22      	ldr	r3, [pc, #136]	; (80105e4 <setvbuf+0x154>)
 801055a:	429c      	cmp	r4, r3
 801055c:	d101      	bne.n	8010562 <setvbuf+0xd2>
 801055e:	68b4      	ldr	r4, [r6, #8]
 8010560:	e7a8      	b.n	80104b4 <setvbuf+0x24>
 8010562:	4b21      	ldr	r3, [pc, #132]	; (80105e8 <setvbuf+0x158>)
 8010564:	429c      	cmp	r4, r3
 8010566:	bf08      	it	eq
 8010568:	68f4      	ldreq	r4, [r6, #12]
 801056a:	e7a3      	b.n	80104b4 <setvbuf+0x24>
 801056c:	2f00      	cmp	r7, #0
 801056e:	d0d8      	beq.n	8010522 <setvbuf+0x92>
 8010570:	69b3      	ldr	r3, [r6, #24]
 8010572:	b913      	cbnz	r3, 801057a <setvbuf+0xea>
 8010574:	4630      	mov	r0, r6
 8010576:	f001 f82f 	bl	80115d8 <__sinit>
 801057a:	f1b8 0f01 	cmp.w	r8, #1
 801057e:	bf08      	it	eq
 8010580:	89a3      	ldrheq	r3, [r4, #12]
 8010582:	6027      	str	r7, [r4, #0]
 8010584:	bf04      	itt	eq
 8010586:	f043 0301 	orreq.w	r3, r3, #1
 801058a:	81a3      	strheq	r3, [r4, #12]
 801058c:	89a3      	ldrh	r3, [r4, #12]
 801058e:	f013 0008 	ands.w	r0, r3, #8
 8010592:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8010596:	d01b      	beq.n	80105d0 <setvbuf+0x140>
 8010598:	f013 0001 	ands.w	r0, r3, #1
 801059c:	bf18      	it	ne
 801059e:	426d      	negne	r5, r5
 80105a0:	f04f 0300 	mov.w	r3, #0
 80105a4:	bf1d      	ittte	ne
 80105a6:	60a3      	strne	r3, [r4, #8]
 80105a8:	61a5      	strne	r5, [r4, #24]
 80105aa:	4618      	movne	r0, r3
 80105ac:	60a5      	streq	r5, [r4, #8]
 80105ae:	e7d0      	b.n	8010552 <setvbuf+0xc2>
 80105b0:	4648      	mov	r0, r9
 80105b2:	f001 f90d 	bl	80117d0 <malloc>
 80105b6:	4607      	mov	r7, r0
 80105b8:	2800      	cmp	r0, #0
 80105ba:	d0bc      	beq.n	8010536 <setvbuf+0xa6>
 80105bc:	89a3      	ldrh	r3, [r4, #12]
 80105be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105c2:	81a3      	strh	r3, [r4, #12]
 80105c4:	464d      	mov	r5, r9
 80105c6:	e7d3      	b.n	8010570 <setvbuf+0xe0>
 80105c8:	2000      	movs	r0, #0
 80105ca:	e7b6      	b.n	801053a <setvbuf+0xaa>
 80105cc:	46a9      	mov	r9, r5
 80105ce:	e7f5      	b.n	80105bc <setvbuf+0x12c>
 80105d0:	60a0      	str	r0, [r4, #8]
 80105d2:	e7be      	b.n	8010552 <setvbuf+0xc2>
 80105d4:	f04f 30ff 	mov.w	r0, #4294967295
 80105d8:	e7bb      	b.n	8010552 <setvbuf+0xc2>
 80105da:	bf00      	nop
 80105dc:	20001aa8 	.word	0x20001aa8
 80105e0:	08013b74 	.word	0x08013b74
 80105e4:	08013b94 	.word	0x08013b94
 80105e8:	08013b54 	.word	0x08013b54

080105ec <__swbuf_r>:
 80105ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ee:	460e      	mov	r6, r1
 80105f0:	4614      	mov	r4, r2
 80105f2:	4605      	mov	r5, r0
 80105f4:	b118      	cbz	r0, 80105fe <__swbuf_r+0x12>
 80105f6:	6983      	ldr	r3, [r0, #24]
 80105f8:	b90b      	cbnz	r3, 80105fe <__swbuf_r+0x12>
 80105fa:	f000 ffed 	bl	80115d8 <__sinit>
 80105fe:	4b21      	ldr	r3, [pc, #132]	; (8010684 <__swbuf_r+0x98>)
 8010600:	429c      	cmp	r4, r3
 8010602:	d12a      	bne.n	801065a <__swbuf_r+0x6e>
 8010604:	686c      	ldr	r4, [r5, #4]
 8010606:	69a3      	ldr	r3, [r4, #24]
 8010608:	60a3      	str	r3, [r4, #8]
 801060a:	89a3      	ldrh	r3, [r4, #12]
 801060c:	071a      	lsls	r2, r3, #28
 801060e:	d52e      	bpl.n	801066e <__swbuf_r+0x82>
 8010610:	6923      	ldr	r3, [r4, #16]
 8010612:	b363      	cbz	r3, 801066e <__swbuf_r+0x82>
 8010614:	6923      	ldr	r3, [r4, #16]
 8010616:	6820      	ldr	r0, [r4, #0]
 8010618:	1ac0      	subs	r0, r0, r3
 801061a:	6963      	ldr	r3, [r4, #20]
 801061c:	b2f6      	uxtb	r6, r6
 801061e:	4283      	cmp	r3, r0
 8010620:	4637      	mov	r7, r6
 8010622:	dc04      	bgt.n	801062e <__swbuf_r+0x42>
 8010624:	4621      	mov	r1, r4
 8010626:	4628      	mov	r0, r5
 8010628:	f000 ff6c 	bl	8011504 <_fflush_r>
 801062c:	bb28      	cbnz	r0, 801067a <__swbuf_r+0x8e>
 801062e:	68a3      	ldr	r3, [r4, #8]
 8010630:	3b01      	subs	r3, #1
 8010632:	60a3      	str	r3, [r4, #8]
 8010634:	6823      	ldr	r3, [r4, #0]
 8010636:	1c5a      	adds	r2, r3, #1
 8010638:	6022      	str	r2, [r4, #0]
 801063a:	701e      	strb	r6, [r3, #0]
 801063c:	6963      	ldr	r3, [r4, #20]
 801063e:	3001      	adds	r0, #1
 8010640:	4283      	cmp	r3, r0
 8010642:	d004      	beq.n	801064e <__swbuf_r+0x62>
 8010644:	89a3      	ldrh	r3, [r4, #12]
 8010646:	07db      	lsls	r3, r3, #31
 8010648:	d519      	bpl.n	801067e <__swbuf_r+0x92>
 801064a:	2e0a      	cmp	r6, #10
 801064c:	d117      	bne.n	801067e <__swbuf_r+0x92>
 801064e:	4621      	mov	r1, r4
 8010650:	4628      	mov	r0, r5
 8010652:	f000 ff57 	bl	8011504 <_fflush_r>
 8010656:	b190      	cbz	r0, 801067e <__swbuf_r+0x92>
 8010658:	e00f      	b.n	801067a <__swbuf_r+0x8e>
 801065a:	4b0b      	ldr	r3, [pc, #44]	; (8010688 <__swbuf_r+0x9c>)
 801065c:	429c      	cmp	r4, r3
 801065e:	d101      	bne.n	8010664 <__swbuf_r+0x78>
 8010660:	68ac      	ldr	r4, [r5, #8]
 8010662:	e7d0      	b.n	8010606 <__swbuf_r+0x1a>
 8010664:	4b09      	ldr	r3, [pc, #36]	; (801068c <__swbuf_r+0xa0>)
 8010666:	429c      	cmp	r4, r3
 8010668:	bf08      	it	eq
 801066a:	68ec      	ldreq	r4, [r5, #12]
 801066c:	e7cb      	b.n	8010606 <__swbuf_r+0x1a>
 801066e:	4621      	mov	r1, r4
 8010670:	4628      	mov	r0, r5
 8010672:	f000 f80d 	bl	8010690 <__swsetup_r>
 8010676:	2800      	cmp	r0, #0
 8010678:	d0cc      	beq.n	8010614 <__swbuf_r+0x28>
 801067a:	f04f 37ff 	mov.w	r7, #4294967295
 801067e:	4638      	mov	r0, r7
 8010680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010682:	bf00      	nop
 8010684:	08013b74 	.word	0x08013b74
 8010688:	08013b94 	.word	0x08013b94
 801068c:	08013b54 	.word	0x08013b54

08010690 <__swsetup_r>:
 8010690:	4b32      	ldr	r3, [pc, #200]	; (801075c <__swsetup_r+0xcc>)
 8010692:	b570      	push	{r4, r5, r6, lr}
 8010694:	681d      	ldr	r5, [r3, #0]
 8010696:	4606      	mov	r6, r0
 8010698:	460c      	mov	r4, r1
 801069a:	b125      	cbz	r5, 80106a6 <__swsetup_r+0x16>
 801069c:	69ab      	ldr	r3, [r5, #24]
 801069e:	b913      	cbnz	r3, 80106a6 <__swsetup_r+0x16>
 80106a0:	4628      	mov	r0, r5
 80106a2:	f000 ff99 	bl	80115d8 <__sinit>
 80106a6:	4b2e      	ldr	r3, [pc, #184]	; (8010760 <__swsetup_r+0xd0>)
 80106a8:	429c      	cmp	r4, r3
 80106aa:	d10f      	bne.n	80106cc <__swsetup_r+0x3c>
 80106ac:	686c      	ldr	r4, [r5, #4]
 80106ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106b2:	b29a      	uxth	r2, r3
 80106b4:	0715      	lsls	r5, r2, #28
 80106b6:	d42c      	bmi.n	8010712 <__swsetup_r+0x82>
 80106b8:	06d0      	lsls	r0, r2, #27
 80106ba:	d411      	bmi.n	80106e0 <__swsetup_r+0x50>
 80106bc:	2209      	movs	r2, #9
 80106be:	6032      	str	r2, [r6, #0]
 80106c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106c4:	81a3      	strh	r3, [r4, #12]
 80106c6:	f04f 30ff 	mov.w	r0, #4294967295
 80106ca:	e03e      	b.n	801074a <__swsetup_r+0xba>
 80106cc:	4b25      	ldr	r3, [pc, #148]	; (8010764 <__swsetup_r+0xd4>)
 80106ce:	429c      	cmp	r4, r3
 80106d0:	d101      	bne.n	80106d6 <__swsetup_r+0x46>
 80106d2:	68ac      	ldr	r4, [r5, #8]
 80106d4:	e7eb      	b.n	80106ae <__swsetup_r+0x1e>
 80106d6:	4b24      	ldr	r3, [pc, #144]	; (8010768 <__swsetup_r+0xd8>)
 80106d8:	429c      	cmp	r4, r3
 80106da:	bf08      	it	eq
 80106dc:	68ec      	ldreq	r4, [r5, #12]
 80106de:	e7e6      	b.n	80106ae <__swsetup_r+0x1e>
 80106e0:	0751      	lsls	r1, r2, #29
 80106e2:	d512      	bpl.n	801070a <__swsetup_r+0x7a>
 80106e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106e6:	b141      	cbz	r1, 80106fa <__swsetup_r+0x6a>
 80106e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106ec:	4299      	cmp	r1, r3
 80106ee:	d002      	beq.n	80106f6 <__swsetup_r+0x66>
 80106f0:	4630      	mov	r0, r6
 80106f2:	f001 fb5f 	bl	8011db4 <_free_r>
 80106f6:	2300      	movs	r3, #0
 80106f8:	6363      	str	r3, [r4, #52]	; 0x34
 80106fa:	89a3      	ldrh	r3, [r4, #12]
 80106fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010700:	81a3      	strh	r3, [r4, #12]
 8010702:	2300      	movs	r3, #0
 8010704:	6063      	str	r3, [r4, #4]
 8010706:	6923      	ldr	r3, [r4, #16]
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	89a3      	ldrh	r3, [r4, #12]
 801070c:	f043 0308 	orr.w	r3, r3, #8
 8010710:	81a3      	strh	r3, [r4, #12]
 8010712:	6923      	ldr	r3, [r4, #16]
 8010714:	b94b      	cbnz	r3, 801072a <__swsetup_r+0x9a>
 8010716:	89a3      	ldrh	r3, [r4, #12]
 8010718:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801071c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010720:	d003      	beq.n	801072a <__swsetup_r+0x9a>
 8010722:	4621      	mov	r1, r4
 8010724:	4630      	mov	r0, r6
 8010726:	f001 f813 	bl	8011750 <__smakebuf_r>
 801072a:	89a2      	ldrh	r2, [r4, #12]
 801072c:	f012 0301 	ands.w	r3, r2, #1
 8010730:	d00c      	beq.n	801074c <__swsetup_r+0xbc>
 8010732:	2300      	movs	r3, #0
 8010734:	60a3      	str	r3, [r4, #8]
 8010736:	6963      	ldr	r3, [r4, #20]
 8010738:	425b      	negs	r3, r3
 801073a:	61a3      	str	r3, [r4, #24]
 801073c:	6923      	ldr	r3, [r4, #16]
 801073e:	b953      	cbnz	r3, 8010756 <__swsetup_r+0xc6>
 8010740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010744:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010748:	d1ba      	bne.n	80106c0 <__swsetup_r+0x30>
 801074a:	bd70      	pop	{r4, r5, r6, pc}
 801074c:	0792      	lsls	r2, r2, #30
 801074e:	bf58      	it	pl
 8010750:	6963      	ldrpl	r3, [r4, #20]
 8010752:	60a3      	str	r3, [r4, #8]
 8010754:	e7f2      	b.n	801073c <__swsetup_r+0xac>
 8010756:	2000      	movs	r0, #0
 8010758:	e7f7      	b.n	801074a <__swsetup_r+0xba>
 801075a:	bf00      	nop
 801075c:	20001aa8 	.word	0x20001aa8
 8010760:	08013b74 	.word	0x08013b74
 8010764:	08013b94 	.word	0x08013b94
 8010768:	08013b54 	.word	0x08013b54

0801076c <quorem>:
 801076c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010770:	6903      	ldr	r3, [r0, #16]
 8010772:	690c      	ldr	r4, [r1, #16]
 8010774:	42a3      	cmp	r3, r4
 8010776:	4680      	mov	r8, r0
 8010778:	f2c0 8082 	blt.w	8010880 <quorem+0x114>
 801077c:	3c01      	subs	r4, #1
 801077e:	f101 0714 	add.w	r7, r1, #20
 8010782:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010786:	f100 0614 	add.w	r6, r0, #20
 801078a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801078e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010792:	eb06 030c 	add.w	r3, r6, ip
 8010796:	3501      	adds	r5, #1
 8010798:	eb07 090c 	add.w	r9, r7, ip
 801079c:	9301      	str	r3, [sp, #4]
 801079e:	fbb0 f5f5 	udiv	r5, r0, r5
 80107a2:	b395      	cbz	r5, 801080a <quorem+0x9e>
 80107a4:	f04f 0a00 	mov.w	sl, #0
 80107a8:	4638      	mov	r0, r7
 80107aa:	46b6      	mov	lr, r6
 80107ac:	46d3      	mov	fp, sl
 80107ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80107b2:	b293      	uxth	r3, r2
 80107b4:	fb05 a303 	mla	r3, r5, r3, sl
 80107b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80107bc:	b29b      	uxth	r3, r3
 80107be:	ebab 0303 	sub.w	r3, fp, r3
 80107c2:	0c12      	lsrs	r2, r2, #16
 80107c4:	f8de b000 	ldr.w	fp, [lr]
 80107c8:	fb05 a202 	mla	r2, r5, r2, sl
 80107cc:	fa13 f38b 	uxtah	r3, r3, fp
 80107d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80107d4:	fa1f fb82 	uxth.w	fp, r2
 80107d8:	f8de 2000 	ldr.w	r2, [lr]
 80107dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80107e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107ea:	4581      	cmp	r9, r0
 80107ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80107f0:	f84e 3b04 	str.w	r3, [lr], #4
 80107f4:	d2db      	bcs.n	80107ae <quorem+0x42>
 80107f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80107fa:	b933      	cbnz	r3, 801080a <quorem+0x9e>
 80107fc:	9b01      	ldr	r3, [sp, #4]
 80107fe:	3b04      	subs	r3, #4
 8010800:	429e      	cmp	r6, r3
 8010802:	461a      	mov	r2, r3
 8010804:	d330      	bcc.n	8010868 <quorem+0xfc>
 8010806:	f8c8 4010 	str.w	r4, [r8, #16]
 801080a:	4640      	mov	r0, r8
 801080c:	f001 f9fe 	bl	8011c0c <__mcmp>
 8010810:	2800      	cmp	r0, #0
 8010812:	db25      	blt.n	8010860 <quorem+0xf4>
 8010814:	3501      	adds	r5, #1
 8010816:	4630      	mov	r0, r6
 8010818:	f04f 0c00 	mov.w	ip, #0
 801081c:	f857 2b04 	ldr.w	r2, [r7], #4
 8010820:	f8d0 e000 	ldr.w	lr, [r0]
 8010824:	b293      	uxth	r3, r2
 8010826:	ebac 0303 	sub.w	r3, ip, r3
 801082a:	0c12      	lsrs	r2, r2, #16
 801082c:	fa13 f38e 	uxtah	r3, r3, lr
 8010830:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010834:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010838:	b29b      	uxth	r3, r3
 801083a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801083e:	45b9      	cmp	r9, r7
 8010840:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010844:	f840 3b04 	str.w	r3, [r0], #4
 8010848:	d2e8      	bcs.n	801081c <quorem+0xb0>
 801084a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801084e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010852:	b92a      	cbnz	r2, 8010860 <quorem+0xf4>
 8010854:	3b04      	subs	r3, #4
 8010856:	429e      	cmp	r6, r3
 8010858:	461a      	mov	r2, r3
 801085a:	d30b      	bcc.n	8010874 <quorem+0x108>
 801085c:	f8c8 4010 	str.w	r4, [r8, #16]
 8010860:	4628      	mov	r0, r5
 8010862:	b003      	add	sp, #12
 8010864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010868:	6812      	ldr	r2, [r2, #0]
 801086a:	3b04      	subs	r3, #4
 801086c:	2a00      	cmp	r2, #0
 801086e:	d1ca      	bne.n	8010806 <quorem+0x9a>
 8010870:	3c01      	subs	r4, #1
 8010872:	e7c5      	b.n	8010800 <quorem+0x94>
 8010874:	6812      	ldr	r2, [r2, #0]
 8010876:	3b04      	subs	r3, #4
 8010878:	2a00      	cmp	r2, #0
 801087a:	d1ef      	bne.n	801085c <quorem+0xf0>
 801087c:	3c01      	subs	r4, #1
 801087e:	e7ea      	b.n	8010856 <quorem+0xea>
 8010880:	2000      	movs	r0, #0
 8010882:	e7ee      	b.n	8010862 <quorem+0xf6>
 8010884:	0000      	movs	r0, r0
	...

08010888 <_dtoa_r>:
 8010888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088c:	ec57 6b10 	vmov	r6, r7, d0
 8010890:	b097      	sub	sp, #92	; 0x5c
 8010892:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010894:	9106      	str	r1, [sp, #24]
 8010896:	4604      	mov	r4, r0
 8010898:	920b      	str	r2, [sp, #44]	; 0x2c
 801089a:	9312      	str	r3, [sp, #72]	; 0x48
 801089c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80108a0:	e9cd 6700 	strd	r6, r7, [sp]
 80108a4:	b93d      	cbnz	r5, 80108b6 <_dtoa_r+0x2e>
 80108a6:	2010      	movs	r0, #16
 80108a8:	f000 ff92 	bl	80117d0 <malloc>
 80108ac:	6260      	str	r0, [r4, #36]	; 0x24
 80108ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80108b2:	6005      	str	r5, [r0, #0]
 80108b4:	60c5      	str	r5, [r0, #12]
 80108b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108b8:	6819      	ldr	r1, [r3, #0]
 80108ba:	b151      	cbz	r1, 80108d2 <_dtoa_r+0x4a>
 80108bc:	685a      	ldr	r2, [r3, #4]
 80108be:	604a      	str	r2, [r1, #4]
 80108c0:	2301      	movs	r3, #1
 80108c2:	4093      	lsls	r3, r2
 80108c4:	608b      	str	r3, [r1, #8]
 80108c6:	4620      	mov	r0, r4
 80108c8:	f000 ffbe 	bl	8011848 <_Bfree>
 80108cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108ce:	2200      	movs	r2, #0
 80108d0:	601a      	str	r2, [r3, #0]
 80108d2:	1e3b      	subs	r3, r7, #0
 80108d4:	bfbb      	ittet	lt
 80108d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80108da:	9301      	strlt	r3, [sp, #4]
 80108dc:	2300      	movge	r3, #0
 80108de:	2201      	movlt	r2, #1
 80108e0:	bfac      	ite	ge
 80108e2:	f8c8 3000 	strge.w	r3, [r8]
 80108e6:	f8c8 2000 	strlt.w	r2, [r8]
 80108ea:	4baf      	ldr	r3, [pc, #700]	; (8010ba8 <_dtoa_r+0x320>)
 80108ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80108f0:	ea33 0308 	bics.w	r3, r3, r8
 80108f4:	d114      	bne.n	8010920 <_dtoa_r+0x98>
 80108f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80108f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80108fc:	6013      	str	r3, [r2, #0]
 80108fe:	9b00      	ldr	r3, [sp, #0]
 8010900:	b923      	cbnz	r3, 801090c <_dtoa_r+0x84>
 8010902:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010906:	2800      	cmp	r0, #0
 8010908:	f000 8542 	beq.w	8011390 <_dtoa_r+0xb08>
 801090c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801090e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010bbc <_dtoa_r+0x334>
 8010912:	2b00      	cmp	r3, #0
 8010914:	f000 8544 	beq.w	80113a0 <_dtoa_r+0xb18>
 8010918:	f10b 0303 	add.w	r3, fp, #3
 801091c:	f000 bd3e 	b.w	801139c <_dtoa_r+0xb14>
 8010920:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010924:	2200      	movs	r2, #0
 8010926:	2300      	movs	r3, #0
 8010928:	4630      	mov	r0, r6
 801092a:	4639      	mov	r1, r7
 801092c:	f7f0 f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8010930:	4681      	mov	r9, r0
 8010932:	b168      	cbz	r0, 8010950 <_dtoa_r+0xc8>
 8010934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010936:	2301      	movs	r3, #1
 8010938:	6013      	str	r3, [r2, #0]
 801093a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801093c:	2b00      	cmp	r3, #0
 801093e:	f000 8524 	beq.w	801138a <_dtoa_r+0xb02>
 8010942:	4b9a      	ldr	r3, [pc, #616]	; (8010bac <_dtoa_r+0x324>)
 8010944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010946:	f103 3bff 	add.w	fp, r3, #4294967295
 801094a:	6013      	str	r3, [r2, #0]
 801094c:	f000 bd28 	b.w	80113a0 <_dtoa_r+0xb18>
 8010950:	aa14      	add	r2, sp, #80	; 0x50
 8010952:	a915      	add	r1, sp, #84	; 0x54
 8010954:	ec47 6b10 	vmov	d0, r6, r7
 8010958:	4620      	mov	r0, r4
 801095a:	f001 f9ce 	bl	8011cfa <__d2b>
 801095e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010962:	9004      	str	r0, [sp, #16]
 8010964:	2d00      	cmp	r5, #0
 8010966:	d07c      	beq.n	8010a62 <_dtoa_r+0x1da>
 8010968:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801096c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010970:	46b2      	mov	sl, r6
 8010972:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8010976:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801097a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801097e:	2200      	movs	r2, #0
 8010980:	4b8b      	ldr	r3, [pc, #556]	; (8010bb0 <_dtoa_r+0x328>)
 8010982:	4650      	mov	r0, sl
 8010984:	4659      	mov	r1, fp
 8010986:	f7ef fc7f 	bl	8000288 <__aeabi_dsub>
 801098a:	a381      	add	r3, pc, #516	; (adr r3, 8010b90 <_dtoa_r+0x308>)
 801098c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010990:	f7ef fe32 	bl	80005f8 <__aeabi_dmul>
 8010994:	a380      	add	r3, pc, #512	; (adr r3, 8010b98 <_dtoa_r+0x310>)
 8010996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099a:	f7ef fc77 	bl	800028c <__adddf3>
 801099e:	4606      	mov	r6, r0
 80109a0:	4628      	mov	r0, r5
 80109a2:	460f      	mov	r7, r1
 80109a4:	f7ef fdbe 	bl	8000524 <__aeabi_i2d>
 80109a8:	a37d      	add	r3, pc, #500	; (adr r3, 8010ba0 <_dtoa_r+0x318>)
 80109aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ae:	f7ef fe23 	bl	80005f8 <__aeabi_dmul>
 80109b2:	4602      	mov	r2, r0
 80109b4:	460b      	mov	r3, r1
 80109b6:	4630      	mov	r0, r6
 80109b8:	4639      	mov	r1, r7
 80109ba:	f7ef fc67 	bl	800028c <__adddf3>
 80109be:	4606      	mov	r6, r0
 80109c0:	460f      	mov	r7, r1
 80109c2:	f7f0 f8c9 	bl	8000b58 <__aeabi_d2iz>
 80109c6:	2200      	movs	r2, #0
 80109c8:	4682      	mov	sl, r0
 80109ca:	2300      	movs	r3, #0
 80109cc:	4630      	mov	r0, r6
 80109ce:	4639      	mov	r1, r7
 80109d0:	f7f0 f884 	bl	8000adc <__aeabi_dcmplt>
 80109d4:	b148      	cbz	r0, 80109ea <_dtoa_r+0x162>
 80109d6:	4650      	mov	r0, sl
 80109d8:	f7ef fda4 	bl	8000524 <__aeabi_i2d>
 80109dc:	4632      	mov	r2, r6
 80109de:	463b      	mov	r3, r7
 80109e0:	f7f0 f872 	bl	8000ac8 <__aeabi_dcmpeq>
 80109e4:	b908      	cbnz	r0, 80109ea <_dtoa_r+0x162>
 80109e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109ea:	f1ba 0f16 	cmp.w	sl, #22
 80109ee:	d859      	bhi.n	8010aa4 <_dtoa_r+0x21c>
 80109f0:	4970      	ldr	r1, [pc, #448]	; (8010bb4 <_dtoa_r+0x32c>)
 80109f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80109f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109fe:	f7f0 f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8010a02:	2800      	cmp	r0, #0
 8010a04:	d050      	beq.n	8010aa8 <_dtoa_r+0x220>
 8010a06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a10:	1b5d      	subs	r5, r3, r5
 8010a12:	f1b5 0801 	subs.w	r8, r5, #1
 8010a16:	bf49      	itett	mi
 8010a18:	f1c5 0301 	rsbmi	r3, r5, #1
 8010a1c:	2300      	movpl	r3, #0
 8010a1e:	9305      	strmi	r3, [sp, #20]
 8010a20:	f04f 0800 	movmi.w	r8, #0
 8010a24:	bf58      	it	pl
 8010a26:	9305      	strpl	r3, [sp, #20]
 8010a28:	f1ba 0f00 	cmp.w	sl, #0
 8010a2c:	db3e      	blt.n	8010aac <_dtoa_r+0x224>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	44d0      	add	r8, sl
 8010a32:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010a36:	9307      	str	r3, [sp, #28]
 8010a38:	9b06      	ldr	r3, [sp, #24]
 8010a3a:	2b09      	cmp	r3, #9
 8010a3c:	f200 8090 	bhi.w	8010b60 <_dtoa_r+0x2d8>
 8010a40:	2b05      	cmp	r3, #5
 8010a42:	bfc4      	itt	gt
 8010a44:	3b04      	subgt	r3, #4
 8010a46:	9306      	strgt	r3, [sp, #24]
 8010a48:	9b06      	ldr	r3, [sp, #24]
 8010a4a:	f1a3 0302 	sub.w	r3, r3, #2
 8010a4e:	bfcc      	ite	gt
 8010a50:	2500      	movgt	r5, #0
 8010a52:	2501      	movle	r5, #1
 8010a54:	2b03      	cmp	r3, #3
 8010a56:	f200 808f 	bhi.w	8010b78 <_dtoa_r+0x2f0>
 8010a5a:	e8df f003 	tbb	[pc, r3]
 8010a5e:	7f7d      	.short	0x7f7d
 8010a60:	7131      	.short	0x7131
 8010a62:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010a66:	441d      	add	r5, r3
 8010a68:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010a6c:	2820      	cmp	r0, #32
 8010a6e:	dd13      	ble.n	8010a98 <_dtoa_r+0x210>
 8010a70:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010a74:	9b00      	ldr	r3, [sp, #0]
 8010a76:	fa08 f800 	lsl.w	r8, r8, r0
 8010a7a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010a7e:	fa23 f000 	lsr.w	r0, r3, r0
 8010a82:	ea48 0000 	orr.w	r0, r8, r0
 8010a86:	f7ef fd3d 	bl	8000504 <__aeabi_ui2d>
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	4682      	mov	sl, r0
 8010a8e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8010a92:	3d01      	subs	r5, #1
 8010a94:	9313      	str	r3, [sp, #76]	; 0x4c
 8010a96:	e772      	b.n	801097e <_dtoa_r+0xf6>
 8010a98:	9b00      	ldr	r3, [sp, #0]
 8010a9a:	f1c0 0020 	rsb	r0, r0, #32
 8010a9e:	fa03 f000 	lsl.w	r0, r3, r0
 8010aa2:	e7f0      	b.n	8010a86 <_dtoa_r+0x1fe>
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	e7b1      	b.n	8010a0c <_dtoa_r+0x184>
 8010aa8:	900f      	str	r0, [sp, #60]	; 0x3c
 8010aaa:	e7b0      	b.n	8010a0e <_dtoa_r+0x186>
 8010aac:	9b05      	ldr	r3, [sp, #20]
 8010aae:	eba3 030a 	sub.w	r3, r3, sl
 8010ab2:	9305      	str	r3, [sp, #20]
 8010ab4:	f1ca 0300 	rsb	r3, sl, #0
 8010ab8:	9307      	str	r3, [sp, #28]
 8010aba:	2300      	movs	r3, #0
 8010abc:	930e      	str	r3, [sp, #56]	; 0x38
 8010abe:	e7bb      	b.n	8010a38 <_dtoa_r+0x1b0>
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8010ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	dd59      	ble.n	8010b7e <_dtoa_r+0x2f6>
 8010aca:	9302      	str	r3, [sp, #8]
 8010acc:	4699      	mov	r9, r3
 8010ace:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	6072      	str	r2, [r6, #4]
 8010ad4:	2204      	movs	r2, #4
 8010ad6:	f102 0014 	add.w	r0, r2, #20
 8010ada:	4298      	cmp	r0, r3
 8010adc:	6871      	ldr	r1, [r6, #4]
 8010ade:	d953      	bls.n	8010b88 <_dtoa_r+0x300>
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f000 fe7d 	bl	80117e0 <_Balloc>
 8010ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ae8:	6030      	str	r0, [r6, #0]
 8010aea:	f1b9 0f0e 	cmp.w	r9, #14
 8010aee:	f8d3 b000 	ldr.w	fp, [r3]
 8010af2:	f200 80e6 	bhi.w	8010cc2 <_dtoa_r+0x43a>
 8010af6:	2d00      	cmp	r5, #0
 8010af8:	f000 80e3 	beq.w	8010cc2 <_dtoa_r+0x43a>
 8010afc:	ed9d 7b00 	vldr	d7, [sp]
 8010b00:	f1ba 0f00 	cmp.w	sl, #0
 8010b04:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010b08:	dd74      	ble.n	8010bf4 <_dtoa_r+0x36c>
 8010b0a:	4a2a      	ldr	r2, [pc, #168]	; (8010bb4 <_dtoa_r+0x32c>)
 8010b0c:	f00a 030f 	and.w	r3, sl, #15
 8010b10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010b14:	ed93 7b00 	vldr	d7, [r3]
 8010b18:	ea4f 162a 	mov.w	r6, sl, asr #4
 8010b1c:	06f0      	lsls	r0, r6, #27
 8010b1e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010b22:	d565      	bpl.n	8010bf0 <_dtoa_r+0x368>
 8010b24:	4b24      	ldr	r3, [pc, #144]	; (8010bb8 <_dtoa_r+0x330>)
 8010b26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b2e:	f7ef fe8d 	bl	800084c <__aeabi_ddiv>
 8010b32:	e9cd 0100 	strd	r0, r1, [sp]
 8010b36:	f006 060f 	and.w	r6, r6, #15
 8010b3a:	2503      	movs	r5, #3
 8010b3c:	4f1e      	ldr	r7, [pc, #120]	; (8010bb8 <_dtoa_r+0x330>)
 8010b3e:	e04c      	b.n	8010bda <_dtoa_r+0x352>
 8010b40:	2301      	movs	r3, #1
 8010b42:	930a      	str	r3, [sp, #40]	; 0x28
 8010b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b46:	4453      	add	r3, sl
 8010b48:	f103 0901 	add.w	r9, r3, #1
 8010b4c:	9302      	str	r3, [sp, #8]
 8010b4e:	464b      	mov	r3, r9
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	bfb8      	it	lt
 8010b54:	2301      	movlt	r3, #1
 8010b56:	e7ba      	b.n	8010ace <_dtoa_r+0x246>
 8010b58:	2300      	movs	r3, #0
 8010b5a:	e7b2      	b.n	8010ac2 <_dtoa_r+0x23a>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	e7f0      	b.n	8010b42 <_dtoa_r+0x2ba>
 8010b60:	2501      	movs	r5, #1
 8010b62:	2300      	movs	r3, #0
 8010b64:	9306      	str	r3, [sp, #24]
 8010b66:	950a      	str	r5, [sp, #40]	; 0x28
 8010b68:	f04f 33ff 	mov.w	r3, #4294967295
 8010b6c:	9302      	str	r3, [sp, #8]
 8010b6e:	4699      	mov	r9, r3
 8010b70:	2200      	movs	r2, #0
 8010b72:	2312      	movs	r3, #18
 8010b74:	920b      	str	r2, [sp, #44]	; 0x2c
 8010b76:	e7aa      	b.n	8010ace <_dtoa_r+0x246>
 8010b78:	2301      	movs	r3, #1
 8010b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8010b7c:	e7f4      	b.n	8010b68 <_dtoa_r+0x2e0>
 8010b7e:	2301      	movs	r3, #1
 8010b80:	9302      	str	r3, [sp, #8]
 8010b82:	4699      	mov	r9, r3
 8010b84:	461a      	mov	r2, r3
 8010b86:	e7f5      	b.n	8010b74 <_dtoa_r+0x2ec>
 8010b88:	3101      	adds	r1, #1
 8010b8a:	6071      	str	r1, [r6, #4]
 8010b8c:	0052      	lsls	r2, r2, #1
 8010b8e:	e7a2      	b.n	8010ad6 <_dtoa_r+0x24e>
 8010b90:	636f4361 	.word	0x636f4361
 8010b94:	3fd287a7 	.word	0x3fd287a7
 8010b98:	8b60c8b3 	.word	0x8b60c8b3
 8010b9c:	3fc68a28 	.word	0x3fc68a28
 8010ba0:	509f79fb 	.word	0x509f79fb
 8010ba4:	3fd34413 	.word	0x3fd34413
 8010ba8:	7ff00000 	.word	0x7ff00000
 8010bac:	08013b21 	.word	0x08013b21
 8010bb0:	3ff80000 	.word	0x3ff80000
 8010bb4:	08013be0 	.word	0x08013be0
 8010bb8:	08013bb8 	.word	0x08013bb8
 8010bbc:	08013b4d 	.word	0x08013b4d
 8010bc0:	07f1      	lsls	r1, r6, #31
 8010bc2:	d508      	bpl.n	8010bd6 <_dtoa_r+0x34e>
 8010bc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bcc:	f7ef fd14 	bl	80005f8 <__aeabi_dmul>
 8010bd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010bd4:	3501      	adds	r5, #1
 8010bd6:	1076      	asrs	r6, r6, #1
 8010bd8:	3708      	adds	r7, #8
 8010bda:	2e00      	cmp	r6, #0
 8010bdc:	d1f0      	bne.n	8010bc0 <_dtoa_r+0x338>
 8010bde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010be2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010be6:	f7ef fe31 	bl	800084c <__aeabi_ddiv>
 8010bea:	e9cd 0100 	strd	r0, r1, [sp]
 8010bee:	e01a      	b.n	8010c26 <_dtoa_r+0x39e>
 8010bf0:	2502      	movs	r5, #2
 8010bf2:	e7a3      	b.n	8010b3c <_dtoa_r+0x2b4>
 8010bf4:	f000 80a0 	beq.w	8010d38 <_dtoa_r+0x4b0>
 8010bf8:	f1ca 0600 	rsb	r6, sl, #0
 8010bfc:	4b9f      	ldr	r3, [pc, #636]	; (8010e7c <_dtoa_r+0x5f4>)
 8010bfe:	4fa0      	ldr	r7, [pc, #640]	; (8010e80 <_dtoa_r+0x5f8>)
 8010c00:	f006 020f 	and.w	r2, r6, #15
 8010c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010c10:	f7ef fcf2 	bl	80005f8 <__aeabi_dmul>
 8010c14:	e9cd 0100 	strd	r0, r1, [sp]
 8010c18:	1136      	asrs	r6, r6, #4
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	2502      	movs	r5, #2
 8010c1e:	2e00      	cmp	r6, #0
 8010c20:	d17f      	bne.n	8010d22 <_dtoa_r+0x49a>
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1e1      	bne.n	8010bea <_dtoa_r+0x362>
 8010c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f000 8087 	beq.w	8010d3c <_dtoa_r+0x4b4>
 8010c2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010c32:	2200      	movs	r2, #0
 8010c34:	4b93      	ldr	r3, [pc, #588]	; (8010e84 <_dtoa_r+0x5fc>)
 8010c36:	4630      	mov	r0, r6
 8010c38:	4639      	mov	r1, r7
 8010c3a:	f7ef ff4f 	bl	8000adc <__aeabi_dcmplt>
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	d07c      	beq.n	8010d3c <_dtoa_r+0x4b4>
 8010c42:	f1b9 0f00 	cmp.w	r9, #0
 8010c46:	d079      	beq.n	8010d3c <_dtoa_r+0x4b4>
 8010c48:	9b02      	ldr	r3, [sp, #8]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	dd35      	ble.n	8010cba <_dtoa_r+0x432>
 8010c4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010c52:	9308      	str	r3, [sp, #32]
 8010c54:	4639      	mov	r1, r7
 8010c56:	2200      	movs	r2, #0
 8010c58:	4b8b      	ldr	r3, [pc, #556]	; (8010e88 <_dtoa_r+0x600>)
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	f7ef fccc 	bl	80005f8 <__aeabi_dmul>
 8010c60:	e9cd 0100 	strd	r0, r1, [sp]
 8010c64:	9f02      	ldr	r7, [sp, #8]
 8010c66:	3501      	adds	r5, #1
 8010c68:	4628      	mov	r0, r5
 8010c6a:	f7ef fc5b 	bl	8000524 <__aeabi_i2d>
 8010c6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c72:	f7ef fcc1 	bl	80005f8 <__aeabi_dmul>
 8010c76:	2200      	movs	r2, #0
 8010c78:	4b84      	ldr	r3, [pc, #528]	; (8010e8c <_dtoa_r+0x604>)
 8010c7a:	f7ef fb07 	bl	800028c <__adddf3>
 8010c7e:	4605      	mov	r5, r0
 8010c80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010c84:	2f00      	cmp	r7, #0
 8010c86:	d15d      	bne.n	8010d44 <_dtoa_r+0x4bc>
 8010c88:	2200      	movs	r2, #0
 8010c8a:	4b81      	ldr	r3, [pc, #516]	; (8010e90 <_dtoa_r+0x608>)
 8010c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c90:	f7ef fafa 	bl	8000288 <__aeabi_dsub>
 8010c94:	462a      	mov	r2, r5
 8010c96:	4633      	mov	r3, r6
 8010c98:	e9cd 0100 	strd	r0, r1, [sp]
 8010c9c:	f7ef ff3c 	bl	8000b18 <__aeabi_dcmpgt>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	f040 8288 	bne.w	80111b6 <_dtoa_r+0x92e>
 8010ca6:	462a      	mov	r2, r5
 8010ca8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cb0:	f7ef ff14 	bl	8000adc <__aeabi_dcmplt>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	f040 827c 	bne.w	80111b2 <_dtoa_r+0x92a>
 8010cba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010cbe:	e9cd 2300 	strd	r2, r3, [sp]
 8010cc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f2c0 8150 	blt.w	8010f6a <_dtoa_r+0x6e2>
 8010cca:	f1ba 0f0e 	cmp.w	sl, #14
 8010cce:	f300 814c 	bgt.w	8010f6a <_dtoa_r+0x6e2>
 8010cd2:	4b6a      	ldr	r3, [pc, #424]	; (8010e7c <_dtoa_r+0x5f4>)
 8010cd4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010cd8:	ed93 7b00 	vldr	d7, [r3]
 8010cdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ce4:	f280 80d8 	bge.w	8010e98 <_dtoa_r+0x610>
 8010ce8:	f1b9 0f00 	cmp.w	r9, #0
 8010cec:	f300 80d4 	bgt.w	8010e98 <_dtoa_r+0x610>
 8010cf0:	f040 825e 	bne.w	80111b0 <_dtoa_r+0x928>
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	4b66      	ldr	r3, [pc, #408]	; (8010e90 <_dtoa_r+0x608>)
 8010cf8:	ec51 0b17 	vmov	r0, r1, d7
 8010cfc:	f7ef fc7c 	bl	80005f8 <__aeabi_dmul>
 8010d00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d04:	f7ef fefe 	bl	8000b04 <__aeabi_dcmpge>
 8010d08:	464f      	mov	r7, r9
 8010d0a:	464e      	mov	r6, r9
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	f040 8234 	bne.w	801117a <_dtoa_r+0x8f2>
 8010d12:	2331      	movs	r3, #49	; 0x31
 8010d14:	f10b 0501 	add.w	r5, fp, #1
 8010d18:	f88b 3000 	strb.w	r3, [fp]
 8010d1c:	f10a 0a01 	add.w	sl, sl, #1
 8010d20:	e22f      	b.n	8011182 <_dtoa_r+0x8fa>
 8010d22:	07f2      	lsls	r2, r6, #31
 8010d24:	d505      	bpl.n	8010d32 <_dtoa_r+0x4aa>
 8010d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d2a:	f7ef fc65 	bl	80005f8 <__aeabi_dmul>
 8010d2e:	3501      	adds	r5, #1
 8010d30:	2301      	movs	r3, #1
 8010d32:	1076      	asrs	r6, r6, #1
 8010d34:	3708      	adds	r7, #8
 8010d36:	e772      	b.n	8010c1e <_dtoa_r+0x396>
 8010d38:	2502      	movs	r5, #2
 8010d3a:	e774      	b.n	8010c26 <_dtoa_r+0x39e>
 8010d3c:	f8cd a020 	str.w	sl, [sp, #32]
 8010d40:	464f      	mov	r7, r9
 8010d42:	e791      	b.n	8010c68 <_dtoa_r+0x3e0>
 8010d44:	4b4d      	ldr	r3, [pc, #308]	; (8010e7c <_dtoa_r+0x5f4>)
 8010d46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010d4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d047      	beq.n	8010de4 <_dtoa_r+0x55c>
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	2000      	movs	r0, #0
 8010d5a:	494e      	ldr	r1, [pc, #312]	; (8010e94 <_dtoa_r+0x60c>)
 8010d5c:	f7ef fd76 	bl	800084c <__aeabi_ddiv>
 8010d60:	462a      	mov	r2, r5
 8010d62:	4633      	mov	r3, r6
 8010d64:	f7ef fa90 	bl	8000288 <__aeabi_dsub>
 8010d68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010d6c:	465d      	mov	r5, fp
 8010d6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d72:	f7ef fef1 	bl	8000b58 <__aeabi_d2iz>
 8010d76:	4606      	mov	r6, r0
 8010d78:	f7ef fbd4 	bl	8000524 <__aeabi_i2d>
 8010d7c:	4602      	mov	r2, r0
 8010d7e:	460b      	mov	r3, r1
 8010d80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d84:	f7ef fa80 	bl	8000288 <__aeabi_dsub>
 8010d88:	3630      	adds	r6, #48	; 0x30
 8010d8a:	f805 6b01 	strb.w	r6, [r5], #1
 8010d8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010d92:	e9cd 0100 	strd	r0, r1, [sp]
 8010d96:	f7ef fea1 	bl	8000adc <__aeabi_dcmplt>
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	d163      	bne.n	8010e66 <_dtoa_r+0x5de>
 8010d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010da2:	2000      	movs	r0, #0
 8010da4:	4937      	ldr	r1, [pc, #220]	; (8010e84 <_dtoa_r+0x5fc>)
 8010da6:	f7ef fa6f 	bl	8000288 <__aeabi_dsub>
 8010daa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010dae:	f7ef fe95 	bl	8000adc <__aeabi_dcmplt>
 8010db2:	2800      	cmp	r0, #0
 8010db4:	f040 80b7 	bne.w	8010f26 <_dtoa_r+0x69e>
 8010db8:	eba5 030b 	sub.w	r3, r5, fp
 8010dbc:	429f      	cmp	r7, r3
 8010dbe:	f77f af7c 	ble.w	8010cba <_dtoa_r+0x432>
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	4b30      	ldr	r3, [pc, #192]	; (8010e88 <_dtoa_r+0x600>)
 8010dc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010dca:	f7ef fc15 	bl	80005f8 <__aeabi_dmul>
 8010dce:	2200      	movs	r2, #0
 8010dd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010dd4:	4b2c      	ldr	r3, [pc, #176]	; (8010e88 <_dtoa_r+0x600>)
 8010dd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dda:	f7ef fc0d 	bl	80005f8 <__aeabi_dmul>
 8010dde:	e9cd 0100 	strd	r0, r1, [sp]
 8010de2:	e7c4      	b.n	8010d6e <_dtoa_r+0x4e6>
 8010de4:	462a      	mov	r2, r5
 8010de6:	4633      	mov	r3, r6
 8010de8:	f7ef fc06 	bl	80005f8 <__aeabi_dmul>
 8010dec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010df0:	eb0b 0507 	add.w	r5, fp, r7
 8010df4:	465e      	mov	r6, fp
 8010df6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dfa:	f7ef fead 	bl	8000b58 <__aeabi_d2iz>
 8010dfe:	4607      	mov	r7, r0
 8010e00:	f7ef fb90 	bl	8000524 <__aeabi_i2d>
 8010e04:	3730      	adds	r7, #48	; 0x30
 8010e06:	4602      	mov	r2, r0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e0e:	f7ef fa3b 	bl	8000288 <__aeabi_dsub>
 8010e12:	f806 7b01 	strb.w	r7, [r6], #1
 8010e16:	42ae      	cmp	r6, r5
 8010e18:	e9cd 0100 	strd	r0, r1, [sp]
 8010e1c:	f04f 0200 	mov.w	r2, #0
 8010e20:	d126      	bne.n	8010e70 <_dtoa_r+0x5e8>
 8010e22:	4b1c      	ldr	r3, [pc, #112]	; (8010e94 <_dtoa_r+0x60c>)
 8010e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010e28:	f7ef fa30 	bl	800028c <__adddf3>
 8010e2c:	4602      	mov	r2, r0
 8010e2e:	460b      	mov	r3, r1
 8010e30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e34:	f7ef fe70 	bl	8000b18 <__aeabi_dcmpgt>
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	d174      	bne.n	8010f26 <_dtoa_r+0x69e>
 8010e3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010e40:	2000      	movs	r0, #0
 8010e42:	4914      	ldr	r1, [pc, #80]	; (8010e94 <_dtoa_r+0x60c>)
 8010e44:	f7ef fa20 	bl	8000288 <__aeabi_dsub>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	460b      	mov	r3, r1
 8010e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e50:	f7ef fe44 	bl	8000adc <__aeabi_dcmplt>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	f43f af30 	beq.w	8010cba <_dtoa_r+0x432>
 8010e5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e5e:	2b30      	cmp	r3, #48	; 0x30
 8010e60:	f105 32ff 	add.w	r2, r5, #4294967295
 8010e64:	d002      	beq.n	8010e6c <_dtoa_r+0x5e4>
 8010e66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010e6a:	e04a      	b.n	8010f02 <_dtoa_r+0x67a>
 8010e6c:	4615      	mov	r5, r2
 8010e6e:	e7f4      	b.n	8010e5a <_dtoa_r+0x5d2>
 8010e70:	4b05      	ldr	r3, [pc, #20]	; (8010e88 <_dtoa_r+0x600>)
 8010e72:	f7ef fbc1 	bl	80005f8 <__aeabi_dmul>
 8010e76:	e9cd 0100 	strd	r0, r1, [sp]
 8010e7a:	e7bc      	b.n	8010df6 <_dtoa_r+0x56e>
 8010e7c:	08013be0 	.word	0x08013be0
 8010e80:	08013bb8 	.word	0x08013bb8
 8010e84:	3ff00000 	.word	0x3ff00000
 8010e88:	40240000 	.word	0x40240000
 8010e8c:	401c0000 	.word	0x401c0000
 8010e90:	40140000 	.word	0x40140000
 8010e94:	3fe00000 	.word	0x3fe00000
 8010e98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010e9c:	465d      	mov	r5, fp
 8010e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	4639      	mov	r1, r7
 8010ea6:	f7ef fcd1 	bl	800084c <__aeabi_ddiv>
 8010eaa:	f7ef fe55 	bl	8000b58 <__aeabi_d2iz>
 8010eae:	4680      	mov	r8, r0
 8010eb0:	f7ef fb38 	bl	8000524 <__aeabi_i2d>
 8010eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010eb8:	f7ef fb9e 	bl	80005f8 <__aeabi_dmul>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	4639      	mov	r1, r7
 8010ec4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010ec8:	f7ef f9de 	bl	8000288 <__aeabi_dsub>
 8010ecc:	f805 6b01 	strb.w	r6, [r5], #1
 8010ed0:	eba5 060b 	sub.w	r6, r5, fp
 8010ed4:	45b1      	cmp	r9, r6
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	460b      	mov	r3, r1
 8010eda:	d139      	bne.n	8010f50 <_dtoa_r+0x6c8>
 8010edc:	f7ef f9d6 	bl	800028c <__adddf3>
 8010ee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	460f      	mov	r7, r1
 8010ee8:	f7ef fe16 	bl	8000b18 <__aeabi_dcmpgt>
 8010eec:	b9c8      	cbnz	r0, 8010f22 <_dtoa_r+0x69a>
 8010eee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ef2:	4630      	mov	r0, r6
 8010ef4:	4639      	mov	r1, r7
 8010ef6:	f7ef fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8010efa:	b110      	cbz	r0, 8010f02 <_dtoa_r+0x67a>
 8010efc:	f018 0f01 	tst.w	r8, #1
 8010f00:	d10f      	bne.n	8010f22 <_dtoa_r+0x69a>
 8010f02:	9904      	ldr	r1, [sp, #16]
 8010f04:	4620      	mov	r0, r4
 8010f06:	f000 fc9f 	bl	8011848 <_Bfree>
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010f0e:	702b      	strb	r3, [r5, #0]
 8010f10:	f10a 0301 	add.w	r3, sl, #1
 8010f14:	6013      	str	r3, [r2, #0]
 8010f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f000 8241 	beq.w	80113a0 <_dtoa_r+0xb18>
 8010f1e:	601d      	str	r5, [r3, #0]
 8010f20:	e23e      	b.n	80113a0 <_dtoa_r+0xb18>
 8010f22:	f8cd a020 	str.w	sl, [sp, #32]
 8010f26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010f2a:	2a39      	cmp	r2, #57	; 0x39
 8010f2c:	f105 33ff 	add.w	r3, r5, #4294967295
 8010f30:	d108      	bne.n	8010f44 <_dtoa_r+0x6bc>
 8010f32:	459b      	cmp	fp, r3
 8010f34:	d10a      	bne.n	8010f4c <_dtoa_r+0x6c4>
 8010f36:	9b08      	ldr	r3, [sp, #32]
 8010f38:	3301      	adds	r3, #1
 8010f3a:	9308      	str	r3, [sp, #32]
 8010f3c:	2330      	movs	r3, #48	; 0x30
 8010f3e:	f88b 3000 	strb.w	r3, [fp]
 8010f42:	465b      	mov	r3, fp
 8010f44:	781a      	ldrb	r2, [r3, #0]
 8010f46:	3201      	adds	r2, #1
 8010f48:	701a      	strb	r2, [r3, #0]
 8010f4a:	e78c      	b.n	8010e66 <_dtoa_r+0x5de>
 8010f4c:	461d      	mov	r5, r3
 8010f4e:	e7ea      	b.n	8010f26 <_dtoa_r+0x69e>
 8010f50:	2200      	movs	r2, #0
 8010f52:	4b9b      	ldr	r3, [pc, #620]	; (80111c0 <_dtoa_r+0x938>)
 8010f54:	f7ef fb50 	bl	80005f8 <__aeabi_dmul>
 8010f58:	2200      	movs	r2, #0
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	4606      	mov	r6, r0
 8010f5e:	460f      	mov	r7, r1
 8010f60:	f7ef fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	d09a      	beq.n	8010e9e <_dtoa_r+0x616>
 8010f68:	e7cb      	b.n	8010f02 <_dtoa_r+0x67a>
 8010f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f6c:	2a00      	cmp	r2, #0
 8010f6e:	f000 808b 	beq.w	8011088 <_dtoa_r+0x800>
 8010f72:	9a06      	ldr	r2, [sp, #24]
 8010f74:	2a01      	cmp	r2, #1
 8010f76:	dc6e      	bgt.n	8011056 <_dtoa_r+0x7ce>
 8010f78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010f7a:	2a00      	cmp	r2, #0
 8010f7c:	d067      	beq.n	801104e <_dtoa_r+0x7c6>
 8010f7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010f82:	9f07      	ldr	r7, [sp, #28]
 8010f84:	9d05      	ldr	r5, [sp, #20]
 8010f86:	9a05      	ldr	r2, [sp, #20]
 8010f88:	2101      	movs	r1, #1
 8010f8a:	441a      	add	r2, r3
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	9205      	str	r2, [sp, #20]
 8010f90:	4498      	add	r8, r3
 8010f92:	f000 fcf9 	bl	8011988 <__i2b>
 8010f96:	4606      	mov	r6, r0
 8010f98:	2d00      	cmp	r5, #0
 8010f9a:	dd0c      	ble.n	8010fb6 <_dtoa_r+0x72e>
 8010f9c:	f1b8 0f00 	cmp.w	r8, #0
 8010fa0:	dd09      	ble.n	8010fb6 <_dtoa_r+0x72e>
 8010fa2:	4545      	cmp	r5, r8
 8010fa4:	9a05      	ldr	r2, [sp, #20]
 8010fa6:	462b      	mov	r3, r5
 8010fa8:	bfa8      	it	ge
 8010faa:	4643      	movge	r3, r8
 8010fac:	1ad2      	subs	r2, r2, r3
 8010fae:	9205      	str	r2, [sp, #20]
 8010fb0:	1aed      	subs	r5, r5, r3
 8010fb2:	eba8 0803 	sub.w	r8, r8, r3
 8010fb6:	9b07      	ldr	r3, [sp, #28]
 8010fb8:	b1eb      	cbz	r3, 8010ff6 <_dtoa_r+0x76e>
 8010fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d067      	beq.n	8011090 <_dtoa_r+0x808>
 8010fc0:	b18f      	cbz	r7, 8010fe6 <_dtoa_r+0x75e>
 8010fc2:	4631      	mov	r1, r6
 8010fc4:	463a      	mov	r2, r7
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f000 fd7e 	bl	8011ac8 <__pow5mult>
 8010fcc:	9a04      	ldr	r2, [sp, #16]
 8010fce:	4601      	mov	r1, r0
 8010fd0:	4606      	mov	r6, r0
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f000 fce1 	bl	801199a <__multiply>
 8010fd8:	9904      	ldr	r1, [sp, #16]
 8010fda:	9008      	str	r0, [sp, #32]
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f000 fc33 	bl	8011848 <_Bfree>
 8010fe2:	9b08      	ldr	r3, [sp, #32]
 8010fe4:	9304      	str	r3, [sp, #16]
 8010fe6:	9b07      	ldr	r3, [sp, #28]
 8010fe8:	1bda      	subs	r2, r3, r7
 8010fea:	d004      	beq.n	8010ff6 <_dtoa_r+0x76e>
 8010fec:	9904      	ldr	r1, [sp, #16]
 8010fee:	4620      	mov	r0, r4
 8010ff0:	f000 fd6a 	bl	8011ac8 <__pow5mult>
 8010ff4:	9004      	str	r0, [sp, #16]
 8010ff6:	2101      	movs	r1, #1
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f000 fcc5 	bl	8011988 <__i2b>
 8010ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011000:	4607      	mov	r7, r0
 8011002:	2b00      	cmp	r3, #0
 8011004:	f000 81d0 	beq.w	80113a8 <_dtoa_r+0xb20>
 8011008:	461a      	mov	r2, r3
 801100a:	4601      	mov	r1, r0
 801100c:	4620      	mov	r0, r4
 801100e:	f000 fd5b 	bl	8011ac8 <__pow5mult>
 8011012:	9b06      	ldr	r3, [sp, #24]
 8011014:	2b01      	cmp	r3, #1
 8011016:	4607      	mov	r7, r0
 8011018:	dc40      	bgt.n	801109c <_dtoa_r+0x814>
 801101a:	9b00      	ldr	r3, [sp, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d139      	bne.n	8011094 <_dtoa_r+0x80c>
 8011020:	9b01      	ldr	r3, [sp, #4]
 8011022:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011026:	2b00      	cmp	r3, #0
 8011028:	d136      	bne.n	8011098 <_dtoa_r+0x810>
 801102a:	9b01      	ldr	r3, [sp, #4]
 801102c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011030:	0d1b      	lsrs	r3, r3, #20
 8011032:	051b      	lsls	r3, r3, #20
 8011034:	b12b      	cbz	r3, 8011042 <_dtoa_r+0x7ba>
 8011036:	9b05      	ldr	r3, [sp, #20]
 8011038:	3301      	adds	r3, #1
 801103a:	9305      	str	r3, [sp, #20]
 801103c:	f108 0801 	add.w	r8, r8, #1
 8011040:	2301      	movs	r3, #1
 8011042:	9307      	str	r3, [sp, #28]
 8011044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011046:	2b00      	cmp	r3, #0
 8011048:	d12a      	bne.n	80110a0 <_dtoa_r+0x818>
 801104a:	2001      	movs	r0, #1
 801104c:	e030      	b.n	80110b0 <_dtoa_r+0x828>
 801104e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011050:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011054:	e795      	b.n	8010f82 <_dtoa_r+0x6fa>
 8011056:	9b07      	ldr	r3, [sp, #28]
 8011058:	f109 37ff 	add.w	r7, r9, #4294967295
 801105c:	42bb      	cmp	r3, r7
 801105e:	bfbf      	itttt	lt
 8011060:	9b07      	ldrlt	r3, [sp, #28]
 8011062:	9707      	strlt	r7, [sp, #28]
 8011064:	1afa      	sublt	r2, r7, r3
 8011066:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011068:	bfbb      	ittet	lt
 801106a:	189b      	addlt	r3, r3, r2
 801106c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801106e:	1bdf      	subge	r7, r3, r7
 8011070:	2700      	movlt	r7, #0
 8011072:	f1b9 0f00 	cmp.w	r9, #0
 8011076:	bfb5      	itete	lt
 8011078:	9b05      	ldrlt	r3, [sp, #20]
 801107a:	9d05      	ldrge	r5, [sp, #20]
 801107c:	eba3 0509 	sublt.w	r5, r3, r9
 8011080:	464b      	movge	r3, r9
 8011082:	bfb8      	it	lt
 8011084:	2300      	movlt	r3, #0
 8011086:	e77e      	b.n	8010f86 <_dtoa_r+0x6fe>
 8011088:	9f07      	ldr	r7, [sp, #28]
 801108a:	9d05      	ldr	r5, [sp, #20]
 801108c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801108e:	e783      	b.n	8010f98 <_dtoa_r+0x710>
 8011090:	9a07      	ldr	r2, [sp, #28]
 8011092:	e7ab      	b.n	8010fec <_dtoa_r+0x764>
 8011094:	2300      	movs	r3, #0
 8011096:	e7d4      	b.n	8011042 <_dtoa_r+0x7ba>
 8011098:	9b00      	ldr	r3, [sp, #0]
 801109a:	e7d2      	b.n	8011042 <_dtoa_r+0x7ba>
 801109c:	2300      	movs	r3, #0
 801109e:	9307      	str	r3, [sp, #28]
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80110a6:	6918      	ldr	r0, [r3, #16]
 80110a8:	f000 fc20 	bl	80118ec <__hi0bits>
 80110ac:	f1c0 0020 	rsb	r0, r0, #32
 80110b0:	4440      	add	r0, r8
 80110b2:	f010 001f 	ands.w	r0, r0, #31
 80110b6:	d047      	beq.n	8011148 <_dtoa_r+0x8c0>
 80110b8:	f1c0 0320 	rsb	r3, r0, #32
 80110bc:	2b04      	cmp	r3, #4
 80110be:	dd3b      	ble.n	8011138 <_dtoa_r+0x8b0>
 80110c0:	9b05      	ldr	r3, [sp, #20]
 80110c2:	f1c0 001c 	rsb	r0, r0, #28
 80110c6:	4403      	add	r3, r0
 80110c8:	9305      	str	r3, [sp, #20]
 80110ca:	4405      	add	r5, r0
 80110cc:	4480      	add	r8, r0
 80110ce:	9b05      	ldr	r3, [sp, #20]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	dd05      	ble.n	80110e0 <_dtoa_r+0x858>
 80110d4:	461a      	mov	r2, r3
 80110d6:	9904      	ldr	r1, [sp, #16]
 80110d8:	4620      	mov	r0, r4
 80110da:	f000 fd43 	bl	8011b64 <__lshift>
 80110de:	9004      	str	r0, [sp, #16]
 80110e0:	f1b8 0f00 	cmp.w	r8, #0
 80110e4:	dd05      	ble.n	80110f2 <_dtoa_r+0x86a>
 80110e6:	4639      	mov	r1, r7
 80110e8:	4642      	mov	r2, r8
 80110ea:	4620      	mov	r0, r4
 80110ec:	f000 fd3a 	bl	8011b64 <__lshift>
 80110f0:	4607      	mov	r7, r0
 80110f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110f4:	b353      	cbz	r3, 801114c <_dtoa_r+0x8c4>
 80110f6:	4639      	mov	r1, r7
 80110f8:	9804      	ldr	r0, [sp, #16]
 80110fa:	f000 fd87 	bl	8011c0c <__mcmp>
 80110fe:	2800      	cmp	r0, #0
 8011100:	da24      	bge.n	801114c <_dtoa_r+0x8c4>
 8011102:	2300      	movs	r3, #0
 8011104:	220a      	movs	r2, #10
 8011106:	9904      	ldr	r1, [sp, #16]
 8011108:	4620      	mov	r0, r4
 801110a:	f000 fbb4 	bl	8011876 <__multadd>
 801110e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011110:	9004      	str	r0, [sp, #16]
 8011112:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011116:	2b00      	cmp	r3, #0
 8011118:	f000 814d 	beq.w	80113b6 <_dtoa_r+0xb2e>
 801111c:	2300      	movs	r3, #0
 801111e:	4631      	mov	r1, r6
 8011120:	220a      	movs	r2, #10
 8011122:	4620      	mov	r0, r4
 8011124:	f000 fba7 	bl	8011876 <__multadd>
 8011128:	9b02      	ldr	r3, [sp, #8]
 801112a:	2b00      	cmp	r3, #0
 801112c:	4606      	mov	r6, r0
 801112e:	dc4f      	bgt.n	80111d0 <_dtoa_r+0x948>
 8011130:	9b06      	ldr	r3, [sp, #24]
 8011132:	2b02      	cmp	r3, #2
 8011134:	dd4c      	ble.n	80111d0 <_dtoa_r+0x948>
 8011136:	e011      	b.n	801115c <_dtoa_r+0x8d4>
 8011138:	d0c9      	beq.n	80110ce <_dtoa_r+0x846>
 801113a:	9a05      	ldr	r2, [sp, #20]
 801113c:	331c      	adds	r3, #28
 801113e:	441a      	add	r2, r3
 8011140:	9205      	str	r2, [sp, #20]
 8011142:	441d      	add	r5, r3
 8011144:	4498      	add	r8, r3
 8011146:	e7c2      	b.n	80110ce <_dtoa_r+0x846>
 8011148:	4603      	mov	r3, r0
 801114a:	e7f6      	b.n	801113a <_dtoa_r+0x8b2>
 801114c:	f1b9 0f00 	cmp.w	r9, #0
 8011150:	dc38      	bgt.n	80111c4 <_dtoa_r+0x93c>
 8011152:	9b06      	ldr	r3, [sp, #24]
 8011154:	2b02      	cmp	r3, #2
 8011156:	dd35      	ble.n	80111c4 <_dtoa_r+0x93c>
 8011158:	f8cd 9008 	str.w	r9, [sp, #8]
 801115c:	9b02      	ldr	r3, [sp, #8]
 801115e:	b963      	cbnz	r3, 801117a <_dtoa_r+0x8f2>
 8011160:	4639      	mov	r1, r7
 8011162:	2205      	movs	r2, #5
 8011164:	4620      	mov	r0, r4
 8011166:	f000 fb86 	bl	8011876 <__multadd>
 801116a:	4601      	mov	r1, r0
 801116c:	4607      	mov	r7, r0
 801116e:	9804      	ldr	r0, [sp, #16]
 8011170:	f000 fd4c 	bl	8011c0c <__mcmp>
 8011174:	2800      	cmp	r0, #0
 8011176:	f73f adcc 	bgt.w	8010d12 <_dtoa_r+0x48a>
 801117a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801117c:	465d      	mov	r5, fp
 801117e:	ea6f 0a03 	mvn.w	sl, r3
 8011182:	f04f 0900 	mov.w	r9, #0
 8011186:	4639      	mov	r1, r7
 8011188:	4620      	mov	r0, r4
 801118a:	f000 fb5d 	bl	8011848 <_Bfree>
 801118e:	2e00      	cmp	r6, #0
 8011190:	f43f aeb7 	beq.w	8010f02 <_dtoa_r+0x67a>
 8011194:	f1b9 0f00 	cmp.w	r9, #0
 8011198:	d005      	beq.n	80111a6 <_dtoa_r+0x91e>
 801119a:	45b1      	cmp	r9, r6
 801119c:	d003      	beq.n	80111a6 <_dtoa_r+0x91e>
 801119e:	4649      	mov	r1, r9
 80111a0:	4620      	mov	r0, r4
 80111a2:	f000 fb51 	bl	8011848 <_Bfree>
 80111a6:	4631      	mov	r1, r6
 80111a8:	4620      	mov	r0, r4
 80111aa:	f000 fb4d 	bl	8011848 <_Bfree>
 80111ae:	e6a8      	b.n	8010f02 <_dtoa_r+0x67a>
 80111b0:	2700      	movs	r7, #0
 80111b2:	463e      	mov	r6, r7
 80111b4:	e7e1      	b.n	801117a <_dtoa_r+0x8f2>
 80111b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80111ba:	463e      	mov	r6, r7
 80111bc:	e5a9      	b.n	8010d12 <_dtoa_r+0x48a>
 80111be:	bf00      	nop
 80111c0:	40240000 	.word	0x40240000
 80111c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f000 80fa 	beq.w	80113c4 <_dtoa_r+0xb3c>
 80111d0:	2d00      	cmp	r5, #0
 80111d2:	dd05      	ble.n	80111e0 <_dtoa_r+0x958>
 80111d4:	4631      	mov	r1, r6
 80111d6:	462a      	mov	r2, r5
 80111d8:	4620      	mov	r0, r4
 80111da:	f000 fcc3 	bl	8011b64 <__lshift>
 80111de:	4606      	mov	r6, r0
 80111e0:	9b07      	ldr	r3, [sp, #28]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d04c      	beq.n	8011280 <_dtoa_r+0x9f8>
 80111e6:	6871      	ldr	r1, [r6, #4]
 80111e8:	4620      	mov	r0, r4
 80111ea:	f000 faf9 	bl	80117e0 <_Balloc>
 80111ee:	6932      	ldr	r2, [r6, #16]
 80111f0:	3202      	adds	r2, #2
 80111f2:	4605      	mov	r5, r0
 80111f4:	0092      	lsls	r2, r2, #2
 80111f6:	f106 010c 	add.w	r1, r6, #12
 80111fa:	300c      	adds	r0, #12
 80111fc:	f7fe fc44 	bl	800fa88 <memcpy>
 8011200:	2201      	movs	r2, #1
 8011202:	4629      	mov	r1, r5
 8011204:	4620      	mov	r0, r4
 8011206:	f000 fcad 	bl	8011b64 <__lshift>
 801120a:	9b00      	ldr	r3, [sp, #0]
 801120c:	f8cd b014 	str.w	fp, [sp, #20]
 8011210:	f003 0301 	and.w	r3, r3, #1
 8011214:	46b1      	mov	r9, r6
 8011216:	9307      	str	r3, [sp, #28]
 8011218:	4606      	mov	r6, r0
 801121a:	4639      	mov	r1, r7
 801121c:	9804      	ldr	r0, [sp, #16]
 801121e:	f7ff faa5 	bl	801076c <quorem>
 8011222:	4649      	mov	r1, r9
 8011224:	4605      	mov	r5, r0
 8011226:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801122a:	9804      	ldr	r0, [sp, #16]
 801122c:	f000 fcee 	bl	8011c0c <__mcmp>
 8011230:	4632      	mov	r2, r6
 8011232:	9000      	str	r0, [sp, #0]
 8011234:	4639      	mov	r1, r7
 8011236:	4620      	mov	r0, r4
 8011238:	f000 fd02 	bl	8011c40 <__mdiff>
 801123c:	68c3      	ldr	r3, [r0, #12]
 801123e:	4602      	mov	r2, r0
 8011240:	bb03      	cbnz	r3, 8011284 <_dtoa_r+0x9fc>
 8011242:	4601      	mov	r1, r0
 8011244:	9008      	str	r0, [sp, #32]
 8011246:	9804      	ldr	r0, [sp, #16]
 8011248:	f000 fce0 	bl	8011c0c <__mcmp>
 801124c:	9a08      	ldr	r2, [sp, #32]
 801124e:	4603      	mov	r3, r0
 8011250:	4611      	mov	r1, r2
 8011252:	4620      	mov	r0, r4
 8011254:	9308      	str	r3, [sp, #32]
 8011256:	f000 faf7 	bl	8011848 <_Bfree>
 801125a:	9b08      	ldr	r3, [sp, #32]
 801125c:	b9a3      	cbnz	r3, 8011288 <_dtoa_r+0xa00>
 801125e:	9a06      	ldr	r2, [sp, #24]
 8011260:	b992      	cbnz	r2, 8011288 <_dtoa_r+0xa00>
 8011262:	9a07      	ldr	r2, [sp, #28]
 8011264:	b982      	cbnz	r2, 8011288 <_dtoa_r+0xa00>
 8011266:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801126a:	d029      	beq.n	80112c0 <_dtoa_r+0xa38>
 801126c:	9b00      	ldr	r3, [sp, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	dd01      	ble.n	8011276 <_dtoa_r+0x9ee>
 8011272:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011276:	9b05      	ldr	r3, [sp, #20]
 8011278:	1c5d      	adds	r5, r3, #1
 801127a:	f883 8000 	strb.w	r8, [r3]
 801127e:	e782      	b.n	8011186 <_dtoa_r+0x8fe>
 8011280:	4630      	mov	r0, r6
 8011282:	e7c2      	b.n	801120a <_dtoa_r+0x982>
 8011284:	2301      	movs	r3, #1
 8011286:	e7e3      	b.n	8011250 <_dtoa_r+0x9c8>
 8011288:	9a00      	ldr	r2, [sp, #0]
 801128a:	2a00      	cmp	r2, #0
 801128c:	db04      	blt.n	8011298 <_dtoa_r+0xa10>
 801128e:	d125      	bne.n	80112dc <_dtoa_r+0xa54>
 8011290:	9a06      	ldr	r2, [sp, #24]
 8011292:	bb1a      	cbnz	r2, 80112dc <_dtoa_r+0xa54>
 8011294:	9a07      	ldr	r2, [sp, #28]
 8011296:	bb0a      	cbnz	r2, 80112dc <_dtoa_r+0xa54>
 8011298:	2b00      	cmp	r3, #0
 801129a:	ddec      	ble.n	8011276 <_dtoa_r+0x9ee>
 801129c:	2201      	movs	r2, #1
 801129e:	9904      	ldr	r1, [sp, #16]
 80112a0:	4620      	mov	r0, r4
 80112a2:	f000 fc5f 	bl	8011b64 <__lshift>
 80112a6:	4639      	mov	r1, r7
 80112a8:	9004      	str	r0, [sp, #16]
 80112aa:	f000 fcaf 	bl	8011c0c <__mcmp>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	dc03      	bgt.n	80112ba <_dtoa_r+0xa32>
 80112b2:	d1e0      	bne.n	8011276 <_dtoa_r+0x9ee>
 80112b4:	f018 0f01 	tst.w	r8, #1
 80112b8:	d0dd      	beq.n	8011276 <_dtoa_r+0x9ee>
 80112ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80112be:	d1d8      	bne.n	8011272 <_dtoa_r+0x9ea>
 80112c0:	9b05      	ldr	r3, [sp, #20]
 80112c2:	9a05      	ldr	r2, [sp, #20]
 80112c4:	1c5d      	adds	r5, r3, #1
 80112c6:	2339      	movs	r3, #57	; 0x39
 80112c8:	7013      	strb	r3, [r2, #0]
 80112ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80112ce:	2b39      	cmp	r3, #57	; 0x39
 80112d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80112d4:	d04f      	beq.n	8011376 <_dtoa_r+0xaee>
 80112d6:	3301      	adds	r3, #1
 80112d8:	7013      	strb	r3, [r2, #0]
 80112da:	e754      	b.n	8011186 <_dtoa_r+0x8fe>
 80112dc:	9a05      	ldr	r2, [sp, #20]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	f102 0501 	add.w	r5, r2, #1
 80112e4:	dd06      	ble.n	80112f4 <_dtoa_r+0xa6c>
 80112e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80112ea:	d0e9      	beq.n	80112c0 <_dtoa_r+0xa38>
 80112ec:	f108 0801 	add.w	r8, r8, #1
 80112f0:	9b05      	ldr	r3, [sp, #20]
 80112f2:	e7c2      	b.n	801127a <_dtoa_r+0x9f2>
 80112f4:	9a02      	ldr	r2, [sp, #8]
 80112f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80112fa:	eba5 030b 	sub.w	r3, r5, fp
 80112fe:	4293      	cmp	r3, r2
 8011300:	d021      	beq.n	8011346 <_dtoa_r+0xabe>
 8011302:	2300      	movs	r3, #0
 8011304:	220a      	movs	r2, #10
 8011306:	9904      	ldr	r1, [sp, #16]
 8011308:	4620      	mov	r0, r4
 801130a:	f000 fab4 	bl	8011876 <__multadd>
 801130e:	45b1      	cmp	r9, r6
 8011310:	9004      	str	r0, [sp, #16]
 8011312:	f04f 0300 	mov.w	r3, #0
 8011316:	f04f 020a 	mov.w	r2, #10
 801131a:	4649      	mov	r1, r9
 801131c:	4620      	mov	r0, r4
 801131e:	d105      	bne.n	801132c <_dtoa_r+0xaa4>
 8011320:	f000 faa9 	bl	8011876 <__multadd>
 8011324:	4681      	mov	r9, r0
 8011326:	4606      	mov	r6, r0
 8011328:	9505      	str	r5, [sp, #20]
 801132a:	e776      	b.n	801121a <_dtoa_r+0x992>
 801132c:	f000 faa3 	bl	8011876 <__multadd>
 8011330:	4631      	mov	r1, r6
 8011332:	4681      	mov	r9, r0
 8011334:	2300      	movs	r3, #0
 8011336:	220a      	movs	r2, #10
 8011338:	4620      	mov	r0, r4
 801133a:	f000 fa9c 	bl	8011876 <__multadd>
 801133e:	4606      	mov	r6, r0
 8011340:	e7f2      	b.n	8011328 <_dtoa_r+0xaa0>
 8011342:	f04f 0900 	mov.w	r9, #0
 8011346:	2201      	movs	r2, #1
 8011348:	9904      	ldr	r1, [sp, #16]
 801134a:	4620      	mov	r0, r4
 801134c:	f000 fc0a 	bl	8011b64 <__lshift>
 8011350:	4639      	mov	r1, r7
 8011352:	9004      	str	r0, [sp, #16]
 8011354:	f000 fc5a 	bl	8011c0c <__mcmp>
 8011358:	2800      	cmp	r0, #0
 801135a:	dcb6      	bgt.n	80112ca <_dtoa_r+0xa42>
 801135c:	d102      	bne.n	8011364 <_dtoa_r+0xadc>
 801135e:	f018 0f01 	tst.w	r8, #1
 8011362:	d1b2      	bne.n	80112ca <_dtoa_r+0xa42>
 8011364:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011368:	2b30      	cmp	r3, #48	; 0x30
 801136a:	f105 32ff 	add.w	r2, r5, #4294967295
 801136e:	f47f af0a 	bne.w	8011186 <_dtoa_r+0x8fe>
 8011372:	4615      	mov	r5, r2
 8011374:	e7f6      	b.n	8011364 <_dtoa_r+0xadc>
 8011376:	4593      	cmp	fp, r2
 8011378:	d105      	bne.n	8011386 <_dtoa_r+0xafe>
 801137a:	2331      	movs	r3, #49	; 0x31
 801137c:	f10a 0a01 	add.w	sl, sl, #1
 8011380:	f88b 3000 	strb.w	r3, [fp]
 8011384:	e6ff      	b.n	8011186 <_dtoa_r+0x8fe>
 8011386:	4615      	mov	r5, r2
 8011388:	e79f      	b.n	80112ca <_dtoa_r+0xa42>
 801138a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80113f0 <_dtoa_r+0xb68>
 801138e:	e007      	b.n	80113a0 <_dtoa_r+0xb18>
 8011390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011392:	f8df b060 	ldr.w	fp, [pc, #96]	; 80113f4 <_dtoa_r+0xb6c>
 8011396:	b11b      	cbz	r3, 80113a0 <_dtoa_r+0xb18>
 8011398:	f10b 0308 	add.w	r3, fp, #8
 801139c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801139e:	6013      	str	r3, [r2, #0]
 80113a0:	4658      	mov	r0, fp
 80113a2:	b017      	add	sp, #92	; 0x5c
 80113a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a8:	9b06      	ldr	r3, [sp, #24]
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	f77f ae35 	ble.w	801101a <_dtoa_r+0x792>
 80113b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113b2:	9307      	str	r3, [sp, #28]
 80113b4:	e649      	b.n	801104a <_dtoa_r+0x7c2>
 80113b6:	9b02      	ldr	r3, [sp, #8]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	dc03      	bgt.n	80113c4 <_dtoa_r+0xb3c>
 80113bc:	9b06      	ldr	r3, [sp, #24]
 80113be:	2b02      	cmp	r3, #2
 80113c0:	f73f aecc 	bgt.w	801115c <_dtoa_r+0x8d4>
 80113c4:	465d      	mov	r5, fp
 80113c6:	4639      	mov	r1, r7
 80113c8:	9804      	ldr	r0, [sp, #16]
 80113ca:	f7ff f9cf 	bl	801076c <quorem>
 80113ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80113d2:	f805 8b01 	strb.w	r8, [r5], #1
 80113d6:	9a02      	ldr	r2, [sp, #8]
 80113d8:	eba5 030b 	sub.w	r3, r5, fp
 80113dc:	429a      	cmp	r2, r3
 80113de:	ddb0      	ble.n	8011342 <_dtoa_r+0xaba>
 80113e0:	2300      	movs	r3, #0
 80113e2:	220a      	movs	r2, #10
 80113e4:	9904      	ldr	r1, [sp, #16]
 80113e6:	4620      	mov	r0, r4
 80113e8:	f000 fa45 	bl	8011876 <__multadd>
 80113ec:	9004      	str	r0, [sp, #16]
 80113ee:	e7ea      	b.n	80113c6 <_dtoa_r+0xb3e>
 80113f0:	08013b20 	.word	0x08013b20
 80113f4:	08013b44 	.word	0x08013b44

080113f8 <__sflush_r>:
 80113f8:	898a      	ldrh	r2, [r1, #12]
 80113fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113fe:	4605      	mov	r5, r0
 8011400:	0710      	lsls	r0, r2, #28
 8011402:	460c      	mov	r4, r1
 8011404:	d458      	bmi.n	80114b8 <__sflush_r+0xc0>
 8011406:	684b      	ldr	r3, [r1, #4]
 8011408:	2b00      	cmp	r3, #0
 801140a:	dc05      	bgt.n	8011418 <__sflush_r+0x20>
 801140c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801140e:	2b00      	cmp	r3, #0
 8011410:	dc02      	bgt.n	8011418 <__sflush_r+0x20>
 8011412:	2000      	movs	r0, #0
 8011414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801141a:	2e00      	cmp	r6, #0
 801141c:	d0f9      	beq.n	8011412 <__sflush_r+0x1a>
 801141e:	2300      	movs	r3, #0
 8011420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011424:	682f      	ldr	r7, [r5, #0]
 8011426:	6a21      	ldr	r1, [r4, #32]
 8011428:	602b      	str	r3, [r5, #0]
 801142a:	d032      	beq.n	8011492 <__sflush_r+0x9a>
 801142c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801142e:	89a3      	ldrh	r3, [r4, #12]
 8011430:	075a      	lsls	r2, r3, #29
 8011432:	d505      	bpl.n	8011440 <__sflush_r+0x48>
 8011434:	6863      	ldr	r3, [r4, #4]
 8011436:	1ac0      	subs	r0, r0, r3
 8011438:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801143a:	b10b      	cbz	r3, 8011440 <__sflush_r+0x48>
 801143c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801143e:	1ac0      	subs	r0, r0, r3
 8011440:	2300      	movs	r3, #0
 8011442:	4602      	mov	r2, r0
 8011444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011446:	6a21      	ldr	r1, [r4, #32]
 8011448:	4628      	mov	r0, r5
 801144a:	47b0      	blx	r6
 801144c:	1c43      	adds	r3, r0, #1
 801144e:	89a3      	ldrh	r3, [r4, #12]
 8011450:	d106      	bne.n	8011460 <__sflush_r+0x68>
 8011452:	6829      	ldr	r1, [r5, #0]
 8011454:	291d      	cmp	r1, #29
 8011456:	d848      	bhi.n	80114ea <__sflush_r+0xf2>
 8011458:	4a29      	ldr	r2, [pc, #164]	; (8011500 <__sflush_r+0x108>)
 801145a:	40ca      	lsrs	r2, r1
 801145c:	07d6      	lsls	r6, r2, #31
 801145e:	d544      	bpl.n	80114ea <__sflush_r+0xf2>
 8011460:	2200      	movs	r2, #0
 8011462:	6062      	str	r2, [r4, #4]
 8011464:	04d9      	lsls	r1, r3, #19
 8011466:	6922      	ldr	r2, [r4, #16]
 8011468:	6022      	str	r2, [r4, #0]
 801146a:	d504      	bpl.n	8011476 <__sflush_r+0x7e>
 801146c:	1c42      	adds	r2, r0, #1
 801146e:	d101      	bne.n	8011474 <__sflush_r+0x7c>
 8011470:	682b      	ldr	r3, [r5, #0]
 8011472:	b903      	cbnz	r3, 8011476 <__sflush_r+0x7e>
 8011474:	6560      	str	r0, [r4, #84]	; 0x54
 8011476:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011478:	602f      	str	r7, [r5, #0]
 801147a:	2900      	cmp	r1, #0
 801147c:	d0c9      	beq.n	8011412 <__sflush_r+0x1a>
 801147e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011482:	4299      	cmp	r1, r3
 8011484:	d002      	beq.n	801148c <__sflush_r+0x94>
 8011486:	4628      	mov	r0, r5
 8011488:	f000 fc94 	bl	8011db4 <_free_r>
 801148c:	2000      	movs	r0, #0
 801148e:	6360      	str	r0, [r4, #52]	; 0x34
 8011490:	e7c0      	b.n	8011414 <__sflush_r+0x1c>
 8011492:	2301      	movs	r3, #1
 8011494:	4628      	mov	r0, r5
 8011496:	47b0      	blx	r6
 8011498:	1c41      	adds	r1, r0, #1
 801149a:	d1c8      	bne.n	801142e <__sflush_r+0x36>
 801149c:	682b      	ldr	r3, [r5, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d0c5      	beq.n	801142e <__sflush_r+0x36>
 80114a2:	2b1d      	cmp	r3, #29
 80114a4:	d001      	beq.n	80114aa <__sflush_r+0xb2>
 80114a6:	2b16      	cmp	r3, #22
 80114a8:	d101      	bne.n	80114ae <__sflush_r+0xb6>
 80114aa:	602f      	str	r7, [r5, #0]
 80114ac:	e7b1      	b.n	8011412 <__sflush_r+0x1a>
 80114ae:	89a3      	ldrh	r3, [r4, #12]
 80114b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114b4:	81a3      	strh	r3, [r4, #12]
 80114b6:	e7ad      	b.n	8011414 <__sflush_r+0x1c>
 80114b8:	690f      	ldr	r7, [r1, #16]
 80114ba:	2f00      	cmp	r7, #0
 80114bc:	d0a9      	beq.n	8011412 <__sflush_r+0x1a>
 80114be:	0793      	lsls	r3, r2, #30
 80114c0:	680e      	ldr	r6, [r1, #0]
 80114c2:	bf08      	it	eq
 80114c4:	694b      	ldreq	r3, [r1, #20]
 80114c6:	600f      	str	r7, [r1, #0]
 80114c8:	bf18      	it	ne
 80114ca:	2300      	movne	r3, #0
 80114cc:	eba6 0807 	sub.w	r8, r6, r7
 80114d0:	608b      	str	r3, [r1, #8]
 80114d2:	f1b8 0f00 	cmp.w	r8, #0
 80114d6:	dd9c      	ble.n	8011412 <__sflush_r+0x1a>
 80114d8:	4643      	mov	r3, r8
 80114da:	463a      	mov	r2, r7
 80114dc:	6a21      	ldr	r1, [r4, #32]
 80114de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80114e0:	4628      	mov	r0, r5
 80114e2:	47b0      	blx	r6
 80114e4:	2800      	cmp	r0, #0
 80114e6:	dc06      	bgt.n	80114f6 <__sflush_r+0xfe>
 80114e8:	89a3      	ldrh	r3, [r4, #12]
 80114ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114ee:	81a3      	strh	r3, [r4, #12]
 80114f0:	f04f 30ff 	mov.w	r0, #4294967295
 80114f4:	e78e      	b.n	8011414 <__sflush_r+0x1c>
 80114f6:	4407      	add	r7, r0
 80114f8:	eba8 0800 	sub.w	r8, r8, r0
 80114fc:	e7e9      	b.n	80114d2 <__sflush_r+0xda>
 80114fe:	bf00      	nop
 8011500:	20400001 	.word	0x20400001

08011504 <_fflush_r>:
 8011504:	b538      	push	{r3, r4, r5, lr}
 8011506:	690b      	ldr	r3, [r1, #16]
 8011508:	4605      	mov	r5, r0
 801150a:	460c      	mov	r4, r1
 801150c:	b1db      	cbz	r3, 8011546 <_fflush_r+0x42>
 801150e:	b118      	cbz	r0, 8011518 <_fflush_r+0x14>
 8011510:	6983      	ldr	r3, [r0, #24]
 8011512:	b90b      	cbnz	r3, 8011518 <_fflush_r+0x14>
 8011514:	f000 f860 	bl	80115d8 <__sinit>
 8011518:	4b0c      	ldr	r3, [pc, #48]	; (801154c <_fflush_r+0x48>)
 801151a:	429c      	cmp	r4, r3
 801151c:	d109      	bne.n	8011532 <_fflush_r+0x2e>
 801151e:	686c      	ldr	r4, [r5, #4]
 8011520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011524:	b17b      	cbz	r3, 8011546 <_fflush_r+0x42>
 8011526:	4621      	mov	r1, r4
 8011528:	4628      	mov	r0, r5
 801152a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801152e:	f7ff bf63 	b.w	80113f8 <__sflush_r>
 8011532:	4b07      	ldr	r3, [pc, #28]	; (8011550 <_fflush_r+0x4c>)
 8011534:	429c      	cmp	r4, r3
 8011536:	d101      	bne.n	801153c <_fflush_r+0x38>
 8011538:	68ac      	ldr	r4, [r5, #8]
 801153a:	e7f1      	b.n	8011520 <_fflush_r+0x1c>
 801153c:	4b05      	ldr	r3, [pc, #20]	; (8011554 <_fflush_r+0x50>)
 801153e:	429c      	cmp	r4, r3
 8011540:	bf08      	it	eq
 8011542:	68ec      	ldreq	r4, [r5, #12]
 8011544:	e7ec      	b.n	8011520 <_fflush_r+0x1c>
 8011546:	2000      	movs	r0, #0
 8011548:	bd38      	pop	{r3, r4, r5, pc}
 801154a:	bf00      	nop
 801154c:	08013b74 	.word	0x08013b74
 8011550:	08013b94 	.word	0x08013b94
 8011554:	08013b54 	.word	0x08013b54

08011558 <std>:
 8011558:	2300      	movs	r3, #0
 801155a:	b510      	push	{r4, lr}
 801155c:	4604      	mov	r4, r0
 801155e:	e9c0 3300 	strd	r3, r3, [r0]
 8011562:	6083      	str	r3, [r0, #8]
 8011564:	8181      	strh	r1, [r0, #12]
 8011566:	6643      	str	r3, [r0, #100]	; 0x64
 8011568:	81c2      	strh	r2, [r0, #14]
 801156a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801156e:	6183      	str	r3, [r0, #24]
 8011570:	4619      	mov	r1, r3
 8011572:	2208      	movs	r2, #8
 8011574:	305c      	adds	r0, #92	; 0x5c
 8011576:	f7fe faab 	bl	800fad0 <memset>
 801157a:	4b05      	ldr	r3, [pc, #20]	; (8011590 <std+0x38>)
 801157c:	6263      	str	r3, [r4, #36]	; 0x24
 801157e:	4b05      	ldr	r3, [pc, #20]	; (8011594 <std+0x3c>)
 8011580:	62a3      	str	r3, [r4, #40]	; 0x28
 8011582:	4b05      	ldr	r3, [pc, #20]	; (8011598 <std+0x40>)
 8011584:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011586:	4b05      	ldr	r3, [pc, #20]	; (801159c <std+0x44>)
 8011588:	6224      	str	r4, [r4, #32]
 801158a:	6323      	str	r3, [r4, #48]	; 0x30
 801158c:	bd10      	pop	{r4, pc}
 801158e:	bf00      	nop
 8011590:	080121a5 	.word	0x080121a5
 8011594:	080121c7 	.word	0x080121c7
 8011598:	080121ff 	.word	0x080121ff
 801159c:	08012223 	.word	0x08012223

080115a0 <_cleanup_r>:
 80115a0:	4901      	ldr	r1, [pc, #4]	; (80115a8 <_cleanup_r+0x8>)
 80115a2:	f000 b885 	b.w	80116b0 <_fwalk_reent>
 80115a6:	bf00      	nop
 80115a8:	08011505 	.word	0x08011505

080115ac <__sfmoreglue>:
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	1e4a      	subs	r2, r1, #1
 80115b0:	2568      	movs	r5, #104	; 0x68
 80115b2:	4355      	muls	r5, r2
 80115b4:	460e      	mov	r6, r1
 80115b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80115ba:	f000 fc49 	bl	8011e50 <_malloc_r>
 80115be:	4604      	mov	r4, r0
 80115c0:	b140      	cbz	r0, 80115d4 <__sfmoreglue+0x28>
 80115c2:	2100      	movs	r1, #0
 80115c4:	e9c0 1600 	strd	r1, r6, [r0]
 80115c8:	300c      	adds	r0, #12
 80115ca:	60a0      	str	r0, [r4, #8]
 80115cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80115d0:	f7fe fa7e 	bl	800fad0 <memset>
 80115d4:	4620      	mov	r0, r4
 80115d6:	bd70      	pop	{r4, r5, r6, pc}

080115d8 <__sinit>:
 80115d8:	6983      	ldr	r3, [r0, #24]
 80115da:	b510      	push	{r4, lr}
 80115dc:	4604      	mov	r4, r0
 80115de:	bb33      	cbnz	r3, 801162e <__sinit+0x56>
 80115e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80115e4:	6503      	str	r3, [r0, #80]	; 0x50
 80115e6:	4b12      	ldr	r3, [pc, #72]	; (8011630 <__sinit+0x58>)
 80115e8:	4a12      	ldr	r2, [pc, #72]	; (8011634 <__sinit+0x5c>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	6282      	str	r2, [r0, #40]	; 0x28
 80115ee:	4298      	cmp	r0, r3
 80115f0:	bf04      	itt	eq
 80115f2:	2301      	moveq	r3, #1
 80115f4:	6183      	streq	r3, [r0, #24]
 80115f6:	f000 f81f 	bl	8011638 <__sfp>
 80115fa:	6060      	str	r0, [r4, #4]
 80115fc:	4620      	mov	r0, r4
 80115fe:	f000 f81b 	bl	8011638 <__sfp>
 8011602:	60a0      	str	r0, [r4, #8]
 8011604:	4620      	mov	r0, r4
 8011606:	f000 f817 	bl	8011638 <__sfp>
 801160a:	2200      	movs	r2, #0
 801160c:	60e0      	str	r0, [r4, #12]
 801160e:	2104      	movs	r1, #4
 8011610:	6860      	ldr	r0, [r4, #4]
 8011612:	f7ff ffa1 	bl	8011558 <std>
 8011616:	2201      	movs	r2, #1
 8011618:	2109      	movs	r1, #9
 801161a:	68a0      	ldr	r0, [r4, #8]
 801161c:	f7ff ff9c 	bl	8011558 <std>
 8011620:	2202      	movs	r2, #2
 8011622:	2112      	movs	r1, #18
 8011624:	68e0      	ldr	r0, [r4, #12]
 8011626:	f7ff ff97 	bl	8011558 <std>
 801162a:	2301      	movs	r3, #1
 801162c:	61a3      	str	r3, [r4, #24]
 801162e:	bd10      	pop	{r4, pc}
 8011630:	08013b10 	.word	0x08013b10
 8011634:	080115a1 	.word	0x080115a1

08011638 <__sfp>:
 8011638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801163a:	4b1b      	ldr	r3, [pc, #108]	; (80116a8 <__sfp+0x70>)
 801163c:	681e      	ldr	r6, [r3, #0]
 801163e:	69b3      	ldr	r3, [r6, #24]
 8011640:	4607      	mov	r7, r0
 8011642:	b913      	cbnz	r3, 801164a <__sfp+0x12>
 8011644:	4630      	mov	r0, r6
 8011646:	f7ff ffc7 	bl	80115d8 <__sinit>
 801164a:	3648      	adds	r6, #72	; 0x48
 801164c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011650:	3b01      	subs	r3, #1
 8011652:	d503      	bpl.n	801165c <__sfp+0x24>
 8011654:	6833      	ldr	r3, [r6, #0]
 8011656:	b133      	cbz	r3, 8011666 <__sfp+0x2e>
 8011658:	6836      	ldr	r6, [r6, #0]
 801165a:	e7f7      	b.n	801164c <__sfp+0x14>
 801165c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011660:	b16d      	cbz	r5, 801167e <__sfp+0x46>
 8011662:	3468      	adds	r4, #104	; 0x68
 8011664:	e7f4      	b.n	8011650 <__sfp+0x18>
 8011666:	2104      	movs	r1, #4
 8011668:	4638      	mov	r0, r7
 801166a:	f7ff ff9f 	bl	80115ac <__sfmoreglue>
 801166e:	6030      	str	r0, [r6, #0]
 8011670:	2800      	cmp	r0, #0
 8011672:	d1f1      	bne.n	8011658 <__sfp+0x20>
 8011674:	230c      	movs	r3, #12
 8011676:	603b      	str	r3, [r7, #0]
 8011678:	4604      	mov	r4, r0
 801167a:	4620      	mov	r0, r4
 801167c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801167e:	4b0b      	ldr	r3, [pc, #44]	; (80116ac <__sfp+0x74>)
 8011680:	6665      	str	r5, [r4, #100]	; 0x64
 8011682:	e9c4 5500 	strd	r5, r5, [r4]
 8011686:	60a5      	str	r5, [r4, #8]
 8011688:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801168c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011690:	2208      	movs	r2, #8
 8011692:	4629      	mov	r1, r5
 8011694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011698:	f7fe fa1a 	bl	800fad0 <memset>
 801169c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80116a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80116a4:	e7e9      	b.n	801167a <__sfp+0x42>
 80116a6:	bf00      	nop
 80116a8:	08013b10 	.word	0x08013b10
 80116ac:	ffff0001 	.word	0xffff0001

080116b0 <_fwalk_reent>:
 80116b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116b4:	4680      	mov	r8, r0
 80116b6:	4689      	mov	r9, r1
 80116b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80116bc:	2600      	movs	r6, #0
 80116be:	b914      	cbnz	r4, 80116c6 <_fwalk_reent+0x16>
 80116c0:	4630      	mov	r0, r6
 80116c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80116ca:	3f01      	subs	r7, #1
 80116cc:	d501      	bpl.n	80116d2 <_fwalk_reent+0x22>
 80116ce:	6824      	ldr	r4, [r4, #0]
 80116d0:	e7f5      	b.n	80116be <_fwalk_reent+0xe>
 80116d2:	89ab      	ldrh	r3, [r5, #12]
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d907      	bls.n	80116e8 <_fwalk_reent+0x38>
 80116d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116dc:	3301      	adds	r3, #1
 80116de:	d003      	beq.n	80116e8 <_fwalk_reent+0x38>
 80116e0:	4629      	mov	r1, r5
 80116e2:	4640      	mov	r0, r8
 80116e4:	47c8      	blx	r9
 80116e6:	4306      	orrs	r6, r0
 80116e8:	3568      	adds	r5, #104	; 0x68
 80116ea:	e7ee      	b.n	80116ca <_fwalk_reent+0x1a>

080116ec <_localeconv_r>:
 80116ec:	4b04      	ldr	r3, [pc, #16]	; (8011700 <_localeconv_r+0x14>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	6a18      	ldr	r0, [r3, #32]
 80116f2:	4b04      	ldr	r3, [pc, #16]	; (8011704 <_localeconv_r+0x18>)
 80116f4:	2800      	cmp	r0, #0
 80116f6:	bf08      	it	eq
 80116f8:	4618      	moveq	r0, r3
 80116fa:	30f0      	adds	r0, #240	; 0xf0
 80116fc:	4770      	bx	lr
 80116fe:	bf00      	nop
 8011700:	20001aa8 	.word	0x20001aa8
 8011704:	20001b0c 	.word	0x20001b0c

08011708 <__swhatbuf_r>:
 8011708:	b570      	push	{r4, r5, r6, lr}
 801170a:	460e      	mov	r6, r1
 801170c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011710:	2900      	cmp	r1, #0
 8011712:	b096      	sub	sp, #88	; 0x58
 8011714:	4614      	mov	r4, r2
 8011716:	461d      	mov	r5, r3
 8011718:	da07      	bge.n	801172a <__swhatbuf_r+0x22>
 801171a:	2300      	movs	r3, #0
 801171c:	602b      	str	r3, [r5, #0]
 801171e:	89b3      	ldrh	r3, [r6, #12]
 8011720:	061a      	lsls	r2, r3, #24
 8011722:	d410      	bmi.n	8011746 <__swhatbuf_r+0x3e>
 8011724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011728:	e00e      	b.n	8011748 <__swhatbuf_r+0x40>
 801172a:	466a      	mov	r2, sp
 801172c:	f000 fda0 	bl	8012270 <_fstat_r>
 8011730:	2800      	cmp	r0, #0
 8011732:	dbf2      	blt.n	801171a <__swhatbuf_r+0x12>
 8011734:	9a01      	ldr	r2, [sp, #4]
 8011736:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801173a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801173e:	425a      	negs	r2, r3
 8011740:	415a      	adcs	r2, r3
 8011742:	602a      	str	r2, [r5, #0]
 8011744:	e7ee      	b.n	8011724 <__swhatbuf_r+0x1c>
 8011746:	2340      	movs	r3, #64	; 0x40
 8011748:	2000      	movs	r0, #0
 801174a:	6023      	str	r3, [r4, #0]
 801174c:	b016      	add	sp, #88	; 0x58
 801174e:	bd70      	pop	{r4, r5, r6, pc}

08011750 <__smakebuf_r>:
 8011750:	898b      	ldrh	r3, [r1, #12]
 8011752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011754:	079d      	lsls	r5, r3, #30
 8011756:	4606      	mov	r6, r0
 8011758:	460c      	mov	r4, r1
 801175a:	d507      	bpl.n	801176c <__smakebuf_r+0x1c>
 801175c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011760:	6023      	str	r3, [r4, #0]
 8011762:	6123      	str	r3, [r4, #16]
 8011764:	2301      	movs	r3, #1
 8011766:	6163      	str	r3, [r4, #20]
 8011768:	b002      	add	sp, #8
 801176a:	bd70      	pop	{r4, r5, r6, pc}
 801176c:	ab01      	add	r3, sp, #4
 801176e:	466a      	mov	r2, sp
 8011770:	f7ff ffca 	bl	8011708 <__swhatbuf_r>
 8011774:	9900      	ldr	r1, [sp, #0]
 8011776:	4605      	mov	r5, r0
 8011778:	4630      	mov	r0, r6
 801177a:	f000 fb69 	bl	8011e50 <_malloc_r>
 801177e:	b948      	cbnz	r0, 8011794 <__smakebuf_r+0x44>
 8011780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011784:	059a      	lsls	r2, r3, #22
 8011786:	d4ef      	bmi.n	8011768 <__smakebuf_r+0x18>
 8011788:	f023 0303 	bic.w	r3, r3, #3
 801178c:	f043 0302 	orr.w	r3, r3, #2
 8011790:	81a3      	strh	r3, [r4, #12]
 8011792:	e7e3      	b.n	801175c <__smakebuf_r+0xc>
 8011794:	4b0d      	ldr	r3, [pc, #52]	; (80117cc <__smakebuf_r+0x7c>)
 8011796:	62b3      	str	r3, [r6, #40]	; 0x28
 8011798:	89a3      	ldrh	r3, [r4, #12]
 801179a:	6020      	str	r0, [r4, #0]
 801179c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117a0:	81a3      	strh	r3, [r4, #12]
 80117a2:	9b00      	ldr	r3, [sp, #0]
 80117a4:	6163      	str	r3, [r4, #20]
 80117a6:	9b01      	ldr	r3, [sp, #4]
 80117a8:	6120      	str	r0, [r4, #16]
 80117aa:	b15b      	cbz	r3, 80117c4 <__smakebuf_r+0x74>
 80117ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117b0:	4630      	mov	r0, r6
 80117b2:	f000 fd6f 	bl	8012294 <_isatty_r>
 80117b6:	b128      	cbz	r0, 80117c4 <__smakebuf_r+0x74>
 80117b8:	89a3      	ldrh	r3, [r4, #12]
 80117ba:	f023 0303 	bic.w	r3, r3, #3
 80117be:	f043 0301 	orr.w	r3, r3, #1
 80117c2:	81a3      	strh	r3, [r4, #12]
 80117c4:	89a3      	ldrh	r3, [r4, #12]
 80117c6:	431d      	orrs	r5, r3
 80117c8:	81a5      	strh	r5, [r4, #12]
 80117ca:	e7cd      	b.n	8011768 <__smakebuf_r+0x18>
 80117cc:	080115a1 	.word	0x080115a1

080117d0 <malloc>:
 80117d0:	4b02      	ldr	r3, [pc, #8]	; (80117dc <malloc+0xc>)
 80117d2:	4601      	mov	r1, r0
 80117d4:	6818      	ldr	r0, [r3, #0]
 80117d6:	f000 bb3b 	b.w	8011e50 <_malloc_r>
 80117da:	bf00      	nop
 80117dc:	20001aa8 	.word	0x20001aa8

080117e0 <_Balloc>:
 80117e0:	b570      	push	{r4, r5, r6, lr}
 80117e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80117e4:	4604      	mov	r4, r0
 80117e6:	460e      	mov	r6, r1
 80117e8:	b93d      	cbnz	r5, 80117fa <_Balloc+0x1a>
 80117ea:	2010      	movs	r0, #16
 80117ec:	f7ff fff0 	bl	80117d0 <malloc>
 80117f0:	6260      	str	r0, [r4, #36]	; 0x24
 80117f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80117f6:	6005      	str	r5, [r0, #0]
 80117f8:	60c5      	str	r5, [r0, #12]
 80117fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80117fc:	68eb      	ldr	r3, [r5, #12]
 80117fe:	b183      	cbz	r3, 8011822 <_Balloc+0x42>
 8011800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011802:	68db      	ldr	r3, [r3, #12]
 8011804:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011808:	b9b8      	cbnz	r0, 801183a <_Balloc+0x5a>
 801180a:	2101      	movs	r1, #1
 801180c:	fa01 f506 	lsl.w	r5, r1, r6
 8011810:	1d6a      	adds	r2, r5, #5
 8011812:	0092      	lsls	r2, r2, #2
 8011814:	4620      	mov	r0, r4
 8011816:	f000 fabf 	bl	8011d98 <_calloc_r>
 801181a:	b160      	cbz	r0, 8011836 <_Balloc+0x56>
 801181c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011820:	e00e      	b.n	8011840 <_Balloc+0x60>
 8011822:	2221      	movs	r2, #33	; 0x21
 8011824:	2104      	movs	r1, #4
 8011826:	4620      	mov	r0, r4
 8011828:	f000 fab6 	bl	8011d98 <_calloc_r>
 801182c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801182e:	60e8      	str	r0, [r5, #12]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d1e4      	bne.n	8011800 <_Balloc+0x20>
 8011836:	2000      	movs	r0, #0
 8011838:	bd70      	pop	{r4, r5, r6, pc}
 801183a:	6802      	ldr	r2, [r0, #0]
 801183c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011840:	2300      	movs	r3, #0
 8011842:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011846:	e7f7      	b.n	8011838 <_Balloc+0x58>

08011848 <_Bfree>:
 8011848:	b570      	push	{r4, r5, r6, lr}
 801184a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801184c:	4606      	mov	r6, r0
 801184e:	460d      	mov	r5, r1
 8011850:	b93c      	cbnz	r4, 8011862 <_Bfree+0x1a>
 8011852:	2010      	movs	r0, #16
 8011854:	f7ff ffbc 	bl	80117d0 <malloc>
 8011858:	6270      	str	r0, [r6, #36]	; 0x24
 801185a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801185e:	6004      	str	r4, [r0, #0]
 8011860:	60c4      	str	r4, [r0, #12]
 8011862:	b13d      	cbz	r5, 8011874 <_Bfree+0x2c>
 8011864:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011866:	686a      	ldr	r2, [r5, #4]
 8011868:	68db      	ldr	r3, [r3, #12]
 801186a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801186e:	6029      	str	r1, [r5, #0]
 8011870:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011874:	bd70      	pop	{r4, r5, r6, pc}

08011876 <__multadd>:
 8011876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801187a:	690d      	ldr	r5, [r1, #16]
 801187c:	461f      	mov	r7, r3
 801187e:	4606      	mov	r6, r0
 8011880:	460c      	mov	r4, r1
 8011882:	f101 0c14 	add.w	ip, r1, #20
 8011886:	2300      	movs	r3, #0
 8011888:	f8dc 0000 	ldr.w	r0, [ip]
 801188c:	b281      	uxth	r1, r0
 801188e:	fb02 7101 	mla	r1, r2, r1, r7
 8011892:	0c0f      	lsrs	r7, r1, #16
 8011894:	0c00      	lsrs	r0, r0, #16
 8011896:	fb02 7000 	mla	r0, r2, r0, r7
 801189a:	b289      	uxth	r1, r1
 801189c:	3301      	adds	r3, #1
 801189e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80118a2:	429d      	cmp	r5, r3
 80118a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80118a8:	f84c 1b04 	str.w	r1, [ip], #4
 80118ac:	dcec      	bgt.n	8011888 <__multadd+0x12>
 80118ae:	b1d7      	cbz	r7, 80118e6 <__multadd+0x70>
 80118b0:	68a3      	ldr	r3, [r4, #8]
 80118b2:	42ab      	cmp	r3, r5
 80118b4:	dc12      	bgt.n	80118dc <__multadd+0x66>
 80118b6:	6861      	ldr	r1, [r4, #4]
 80118b8:	4630      	mov	r0, r6
 80118ba:	3101      	adds	r1, #1
 80118bc:	f7ff ff90 	bl	80117e0 <_Balloc>
 80118c0:	6922      	ldr	r2, [r4, #16]
 80118c2:	3202      	adds	r2, #2
 80118c4:	f104 010c 	add.w	r1, r4, #12
 80118c8:	4680      	mov	r8, r0
 80118ca:	0092      	lsls	r2, r2, #2
 80118cc:	300c      	adds	r0, #12
 80118ce:	f7fe f8db 	bl	800fa88 <memcpy>
 80118d2:	4621      	mov	r1, r4
 80118d4:	4630      	mov	r0, r6
 80118d6:	f7ff ffb7 	bl	8011848 <_Bfree>
 80118da:	4644      	mov	r4, r8
 80118dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80118e0:	3501      	adds	r5, #1
 80118e2:	615f      	str	r7, [r3, #20]
 80118e4:	6125      	str	r5, [r4, #16]
 80118e6:	4620      	mov	r0, r4
 80118e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080118ec <__hi0bits>:
 80118ec:	0c02      	lsrs	r2, r0, #16
 80118ee:	0412      	lsls	r2, r2, #16
 80118f0:	4603      	mov	r3, r0
 80118f2:	b9b2      	cbnz	r2, 8011922 <__hi0bits+0x36>
 80118f4:	0403      	lsls	r3, r0, #16
 80118f6:	2010      	movs	r0, #16
 80118f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80118fc:	bf04      	itt	eq
 80118fe:	021b      	lsleq	r3, r3, #8
 8011900:	3008      	addeq	r0, #8
 8011902:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011906:	bf04      	itt	eq
 8011908:	011b      	lsleq	r3, r3, #4
 801190a:	3004      	addeq	r0, #4
 801190c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011910:	bf04      	itt	eq
 8011912:	009b      	lsleq	r3, r3, #2
 8011914:	3002      	addeq	r0, #2
 8011916:	2b00      	cmp	r3, #0
 8011918:	db06      	blt.n	8011928 <__hi0bits+0x3c>
 801191a:	005b      	lsls	r3, r3, #1
 801191c:	d503      	bpl.n	8011926 <__hi0bits+0x3a>
 801191e:	3001      	adds	r0, #1
 8011920:	4770      	bx	lr
 8011922:	2000      	movs	r0, #0
 8011924:	e7e8      	b.n	80118f8 <__hi0bits+0xc>
 8011926:	2020      	movs	r0, #32
 8011928:	4770      	bx	lr

0801192a <__lo0bits>:
 801192a:	6803      	ldr	r3, [r0, #0]
 801192c:	f013 0207 	ands.w	r2, r3, #7
 8011930:	4601      	mov	r1, r0
 8011932:	d00b      	beq.n	801194c <__lo0bits+0x22>
 8011934:	07da      	lsls	r2, r3, #31
 8011936:	d423      	bmi.n	8011980 <__lo0bits+0x56>
 8011938:	0798      	lsls	r0, r3, #30
 801193a:	bf49      	itett	mi
 801193c:	085b      	lsrmi	r3, r3, #1
 801193e:	089b      	lsrpl	r3, r3, #2
 8011940:	2001      	movmi	r0, #1
 8011942:	600b      	strmi	r3, [r1, #0]
 8011944:	bf5c      	itt	pl
 8011946:	600b      	strpl	r3, [r1, #0]
 8011948:	2002      	movpl	r0, #2
 801194a:	4770      	bx	lr
 801194c:	b298      	uxth	r0, r3
 801194e:	b9a8      	cbnz	r0, 801197c <__lo0bits+0x52>
 8011950:	0c1b      	lsrs	r3, r3, #16
 8011952:	2010      	movs	r0, #16
 8011954:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011958:	bf04      	itt	eq
 801195a:	0a1b      	lsreq	r3, r3, #8
 801195c:	3008      	addeq	r0, #8
 801195e:	071a      	lsls	r2, r3, #28
 8011960:	bf04      	itt	eq
 8011962:	091b      	lsreq	r3, r3, #4
 8011964:	3004      	addeq	r0, #4
 8011966:	079a      	lsls	r2, r3, #30
 8011968:	bf04      	itt	eq
 801196a:	089b      	lsreq	r3, r3, #2
 801196c:	3002      	addeq	r0, #2
 801196e:	07da      	lsls	r2, r3, #31
 8011970:	d402      	bmi.n	8011978 <__lo0bits+0x4e>
 8011972:	085b      	lsrs	r3, r3, #1
 8011974:	d006      	beq.n	8011984 <__lo0bits+0x5a>
 8011976:	3001      	adds	r0, #1
 8011978:	600b      	str	r3, [r1, #0]
 801197a:	4770      	bx	lr
 801197c:	4610      	mov	r0, r2
 801197e:	e7e9      	b.n	8011954 <__lo0bits+0x2a>
 8011980:	2000      	movs	r0, #0
 8011982:	4770      	bx	lr
 8011984:	2020      	movs	r0, #32
 8011986:	4770      	bx	lr

08011988 <__i2b>:
 8011988:	b510      	push	{r4, lr}
 801198a:	460c      	mov	r4, r1
 801198c:	2101      	movs	r1, #1
 801198e:	f7ff ff27 	bl	80117e0 <_Balloc>
 8011992:	2201      	movs	r2, #1
 8011994:	6144      	str	r4, [r0, #20]
 8011996:	6102      	str	r2, [r0, #16]
 8011998:	bd10      	pop	{r4, pc}

0801199a <__multiply>:
 801199a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801199e:	4614      	mov	r4, r2
 80119a0:	690a      	ldr	r2, [r1, #16]
 80119a2:	6923      	ldr	r3, [r4, #16]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	bfb8      	it	lt
 80119a8:	460b      	movlt	r3, r1
 80119aa:	4688      	mov	r8, r1
 80119ac:	bfbc      	itt	lt
 80119ae:	46a0      	movlt	r8, r4
 80119b0:	461c      	movlt	r4, r3
 80119b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80119b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80119ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80119be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80119c2:	eb07 0609 	add.w	r6, r7, r9
 80119c6:	42b3      	cmp	r3, r6
 80119c8:	bfb8      	it	lt
 80119ca:	3101      	addlt	r1, #1
 80119cc:	f7ff ff08 	bl	80117e0 <_Balloc>
 80119d0:	f100 0514 	add.w	r5, r0, #20
 80119d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80119d8:	462b      	mov	r3, r5
 80119da:	2200      	movs	r2, #0
 80119dc:	4573      	cmp	r3, lr
 80119de:	d316      	bcc.n	8011a0e <__multiply+0x74>
 80119e0:	f104 0214 	add.w	r2, r4, #20
 80119e4:	f108 0114 	add.w	r1, r8, #20
 80119e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80119ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80119f0:	9300      	str	r3, [sp, #0]
 80119f2:	9b00      	ldr	r3, [sp, #0]
 80119f4:	9201      	str	r2, [sp, #4]
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d80c      	bhi.n	8011a14 <__multiply+0x7a>
 80119fa:	2e00      	cmp	r6, #0
 80119fc:	dd03      	ble.n	8011a06 <__multiply+0x6c>
 80119fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d05d      	beq.n	8011ac2 <__multiply+0x128>
 8011a06:	6106      	str	r6, [r0, #16]
 8011a08:	b003      	add	sp, #12
 8011a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a0e:	f843 2b04 	str.w	r2, [r3], #4
 8011a12:	e7e3      	b.n	80119dc <__multiply+0x42>
 8011a14:	f8b2 b000 	ldrh.w	fp, [r2]
 8011a18:	f1bb 0f00 	cmp.w	fp, #0
 8011a1c:	d023      	beq.n	8011a66 <__multiply+0xcc>
 8011a1e:	4689      	mov	r9, r1
 8011a20:	46ac      	mov	ip, r5
 8011a22:	f04f 0800 	mov.w	r8, #0
 8011a26:	f859 4b04 	ldr.w	r4, [r9], #4
 8011a2a:	f8dc a000 	ldr.w	sl, [ip]
 8011a2e:	b2a3      	uxth	r3, r4
 8011a30:	fa1f fa8a 	uxth.w	sl, sl
 8011a34:	fb0b a303 	mla	r3, fp, r3, sl
 8011a38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011a3c:	f8dc 4000 	ldr.w	r4, [ip]
 8011a40:	4443      	add	r3, r8
 8011a42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011a46:	fb0b 840a 	mla	r4, fp, sl, r8
 8011a4a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011a4e:	46e2      	mov	sl, ip
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011a56:	454f      	cmp	r7, r9
 8011a58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011a5c:	f84a 3b04 	str.w	r3, [sl], #4
 8011a60:	d82b      	bhi.n	8011aba <__multiply+0x120>
 8011a62:	f8cc 8004 	str.w	r8, [ip, #4]
 8011a66:	9b01      	ldr	r3, [sp, #4]
 8011a68:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011a6c:	3204      	adds	r2, #4
 8011a6e:	f1ba 0f00 	cmp.w	sl, #0
 8011a72:	d020      	beq.n	8011ab6 <__multiply+0x11c>
 8011a74:	682b      	ldr	r3, [r5, #0]
 8011a76:	4689      	mov	r9, r1
 8011a78:	46a8      	mov	r8, r5
 8011a7a:	f04f 0b00 	mov.w	fp, #0
 8011a7e:	f8b9 c000 	ldrh.w	ip, [r9]
 8011a82:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011a86:	fb0a 440c 	mla	r4, sl, ip, r4
 8011a8a:	445c      	add	r4, fp
 8011a8c:	46c4      	mov	ip, r8
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011a94:	f84c 3b04 	str.w	r3, [ip], #4
 8011a98:	f859 3b04 	ldr.w	r3, [r9], #4
 8011a9c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011aa0:	0c1b      	lsrs	r3, r3, #16
 8011aa2:	fb0a b303 	mla	r3, sl, r3, fp
 8011aa6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011aaa:	454f      	cmp	r7, r9
 8011aac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011ab0:	d805      	bhi.n	8011abe <__multiply+0x124>
 8011ab2:	f8c8 3004 	str.w	r3, [r8, #4]
 8011ab6:	3504      	adds	r5, #4
 8011ab8:	e79b      	b.n	80119f2 <__multiply+0x58>
 8011aba:	46d4      	mov	ip, sl
 8011abc:	e7b3      	b.n	8011a26 <__multiply+0x8c>
 8011abe:	46e0      	mov	r8, ip
 8011ac0:	e7dd      	b.n	8011a7e <__multiply+0xe4>
 8011ac2:	3e01      	subs	r6, #1
 8011ac4:	e799      	b.n	80119fa <__multiply+0x60>
	...

08011ac8 <__pow5mult>:
 8011ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011acc:	4615      	mov	r5, r2
 8011ace:	f012 0203 	ands.w	r2, r2, #3
 8011ad2:	4606      	mov	r6, r0
 8011ad4:	460f      	mov	r7, r1
 8011ad6:	d007      	beq.n	8011ae8 <__pow5mult+0x20>
 8011ad8:	3a01      	subs	r2, #1
 8011ada:	4c21      	ldr	r4, [pc, #132]	; (8011b60 <__pow5mult+0x98>)
 8011adc:	2300      	movs	r3, #0
 8011ade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011ae2:	f7ff fec8 	bl	8011876 <__multadd>
 8011ae6:	4607      	mov	r7, r0
 8011ae8:	10ad      	asrs	r5, r5, #2
 8011aea:	d035      	beq.n	8011b58 <__pow5mult+0x90>
 8011aec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011aee:	b93c      	cbnz	r4, 8011b00 <__pow5mult+0x38>
 8011af0:	2010      	movs	r0, #16
 8011af2:	f7ff fe6d 	bl	80117d0 <malloc>
 8011af6:	6270      	str	r0, [r6, #36]	; 0x24
 8011af8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011afc:	6004      	str	r4, [r0, #0]
 8011afe:	60c4      	str	r4, [r0, #12]
 8011b00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011b04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011b08:	b94c      	cbnz	r4, 8011b1e <__pow5mult+0x56>
 8011b0a:	f240 2171 	movw	r1, #625	; 0x271
 8011b0e:	4630      	mov	r0, r6
 8011b10:	f7ff ff3a 	bl	8011988 <__i2b>
 8011b14:	2300      	movs	r3, #0
 8011b16:	f8c8 0008 	str.w	r0, [r8, #8]
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	6003      	str	r3, [r0, #0]
 8011b1e:	f04f 0800 	mov.w	r8, #0
 8011b22:	07eb      	lsls	r3, r5, #31
 8011b24:	d50a      	bpl.n	8011b3c <__pow5mult+0x74>
 8011b26:	4639      	mov	r1, r7
 8011b28:	4622      	mov	r2, r4
 8011b2a:	4630      	mov	r0, r6
 8011b2c:	f7ff ff35 	bl	801199a <__multiply>
 8011b30:	4639      	mov	r1, r7
 8011b32:	4681      	mov	r9, r0
 8011b34:	4630      	mov	r0, r6
 8011b36:	f7ff fe87 	bl	8011848 <_Bfree>
 8011b3a:	464f      	mov	r7, r9
 8011b3c:	106d      	asrs	r5, r5, #1
 8011b3e:	d00b      	beq.n	8011b58 <__pow5mult+0x90>
 8011b40:	6820      	ldr	r0, [r4, #0]
 8011b42:	b938      	cbnz	r0, 8011b54 <__pow5mult+0x8c>
 8011b44:	4622      	mov	r2, r4
 8011b46:	4621      	mov	r1, r4
 8011b48:	4630      	mov	r0, r6
 8011b4a:	f7ff ff26 	bl	801199a <__multiply>
 8011b4e:	6020      	str	r0, [r4, #0]
 8011b50:	f8c0 8000 	str.w	r8, [r0]
 8011b54:	4604      	mov	r4, r0
 8011b56:	e7e4      	b.n	8011b22 <__pow5mult+0x5a>
 8011b58:	4638      	mov	r0, r7
 8011b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b5e:	bf00      	nop
 8011b60:	08013ca8 	.word	0x08013ca8

08011b64 <__lshift>:
 8011b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b68:	460c      	mov	r4, r1
 8011b6a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b6e:	6923      	ldr	r3, [r4, #16]
 8011b70:	6849      	ldr	r1, [r1, #4]
 8011b72:	eb0a 0903 	add.w	r9, sl, r3
 8011b76:	68a3      	ldr	r3, [r4, #8]
 8011b78:	4607      	mov	r7, r0
 8011b7a:	4616      	mov	r6, r2
 8011b7c:	f109 0501 	add.w	r5, r9, #1
 8011b80:	42ab      	cmp	r3, r5
 8011b82:	db32      	blt.n	8011bea <__lshift+0x86>
 8011b84:	4638      	mov	r0, r7
 8011b86:	f7ff fe2b 	bl	80117e0 <_Balloc>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	4680      	mov	r8, r0
 8011b8e:	f100 0114 	add.w	r1, r0, #20
 8011b92:	461a      	mov	r2, r3
 8011b94:	4553      	cmp	r3, sl
 8011b96:	db2b      	blt.n	8011bf0 <__lshift+0x8c>
 8011b98:	6920      	ldr	r0, [r4, #16]
 8011b9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b9e:	f104 0314 	add.w	r3, r4, #20
 8011ba2:	f016 021f 	ands.w	r2, r6, #31
 8011ba6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011baa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011bae:	d025      	beq.n	8011bfc <__lshift+0x98>
 8011bb0:	f1c2 0e20 	rsb	lr, r2, #32
 8011bb4:	2000      	movs	r0, #0
 8011bb6:	681e      	ldr	r6, [r3, #0]
 8011bb8:	468a      	mov	sl, r1
 8011bba:	4096      	lsls	r6, r2
 8011bbc:	4330      	orrs	r0, r6
 8011bbe:	f84a 0b04 	str.w	r0, [sl], #4
 8011bc2:	f853 0b04 	ldr.w	r0, [r3], #4
 8011bc6:	459c      	cmp	ip, r3
 8011bc8:	fa20 f00e 	lsr.w	r0, r0, lr
 8011bcc:	d814      	bhi.n	8011bf8 <__lshift+0x94>
 8011bce:	6048      	str	r0, [r1, #4]
 8011bd0:	b108      	cbz	r0, 8011bd6 <__lshift+0x72>
 8011bd2:	f109 0502 	add.w	r5, r9, #2
 8011bd6:	3d01      	subs	r5, #1
 8011bd8:	4638      	mov	r0, r7
 8011bda:	f8c8 5010 	str.w	r5, [r8, #16]
 8011bde:	4621      	mov	r1, r4
 8011be0:	f7ff fe32 	bl	8011848 <_Bfree>
 8011be4:	4640      	mov	r0, r8
 8011be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bea:	3101      	adds	r1, #1
 8011bec:	005b      	lsls	r3, r3, #1
 8011bee:	e7c7      	b.n	8011b80 <__lshift+0x1c>
 8011bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	e7cd      	b.n	8011b94 <__lshift+0x30>
 8011bf8:	4651      	mov	r1, sl
 8011bfa:	e7dc      	b.n	8011bb6 <__lshift+0x52>
 8011bfc:	3904      	subs	r1, #4
 8011bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c02:	f841 2f04 	str.w	r2, [r1, #4]!
 8011c06:	459c      	cmp	ip, r3
 8011c08:	d8f9      	bhi.n	8011bfe <__lshift+0x9a>
 8011c0a:	e7e4      	b.n	8011bd6 <__lshift+0x72>

08011c0c <__mcmp>:
 8011c0c:	6903      	ldr	r3, [r0, #16]
 8011c0e:	690a      	ldr	r2, [r1, #16]
 8011c10:	1a9b      	subs	r3, r3, r2
 8011c12:	b530      	push	{r4, r5, lr}
 8011c14:	d10c      	bne.n	8011c30 <__mcmp+0x24>
 8011c16:	0092      	lsls	r2, r2, #2
 8011c18:	3014      	adds	r0, #20
 8011c1a:	3114      	adds	r1, #20
 8011c1c:	1884      	adds	r4, r0, r2
 8011c1e:	4411      	add	r1, r2
 8011c20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011c24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011c28:	4295      	cmp	r5, r2
 8011c2a:	d003      	beq.n	8011c34 <__mcmp+0x28>
 8011c2c:	d305      	bcc.n	8011c3a <__mcmp+0x2e>
 8011c2e:	2301      	movs	r3, #1
 8011c30:	4618      	mov	r0, r3
 8011c32:	bd30      	pop	{r4, r5, pc}
 8011c34:	42a0      	cmp	r0, r4
 8011c36:	d3f3      	bcc.n	8011c20 <__mcmp+0x14>
 8011c38:	e7fa      	b.n	8011c30 <__mcmp+0x24>
 8011c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8011c3e:	e7f7      	b.n	8011c30 <__mcmp+0x24>

08011c40 <__mdiff>:
 8011c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c44:	460d      	mov	r5, r1
 8011c46:	4607      	mov	r7, r0
 8011c48:	4611      	mov	r1, r2
 8011c4a:	4628      	mov	r0, r5
 8011c4c:	4614      	mov	r4, r2
 8011c4e:	f7ff ffdd 	bl	8011c0c <__mcmp>
 8011c52:	1e06      	subs	r6, r0, #0
 8011c54:	d108      	bne.n	8011c68 <__mdiff+0x28>
 8011c56:	4631      	mov	r1, r6
 8011c58:	4638      	mov	r0, r7
 8011c5a:	f7ff fdc1 	bl	80117e0 <_Balloc>
 8011c5e:	2301      	movs	r3, #1
 8011c60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c68:	bfa4      	itt	ge
 8011c6a:	4623      	movge	r3, r4
 8011c6c:	462c      	movge	r4, r5
 8011c6e:	4638      	mov	r0, r7
 8011c70:	6861      	ldr	r1, [r4, #4]
 8011c72:	bfa6      	itte	ge
 8011c74:	461d      	movge	r5, r3
 8011c76:	2600      	movge	r6, #0
 8011c78:	2601      	movlt	r6, #1
 8011c7a:	f7ff fdb1 	bl	80117e0 <_Balloc>
 8011c7e:	692b      	ldr	r3, [r5, #16]
 8011c80:	60c6      	str	r6, [r0, #12]
 8011c82:	6926      	ldr	r6, [r4, #16]
 8011c84:	f105 0914 	add.w	r9, r5, #20
 8011c88:	f104 0214 	add.w	r2, r4, #20
 8011c8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011c90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011c94:	f100 0514 	add.w	r5, r0, #20
 8011c98:	f04f 0e00 	mov.w	lr, #0
 8011c9c:	f852 ab04 	ldr.w	sl, [r2], #4
 8011ca0:	f859 4b04 	ldr.w	r4, [r9], #4
 8011ca4:	fa1e f18a 	uxtah	r1, lr, sl
 8011ca8:	b2a3      	uxth	r3, r4
 8011caa:	1ac9      	subs	r1, r1, r3
 8011cac:	0c23      	lsrs	r3, r4, #16
 8011cae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011cb2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011cb6:	b289      	uxth	r1, r1
 8011cb8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011cbc:	45c8      	cmp	r8, r9
 8011cbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011cc2:	4694      	mov	ip, r2
 8011cc4:	f845 3b04 	str.w	r3, [r5], #4
 8011cc8:	d8e8      	bhi.n	8011c9c <__mdiff+0x5c>
 8011cca:	45bc      	cmp	ip, r7
 8011ccc:	d304      	bcc.n	8011cd8 <__mdiff+0x98>
 8011cce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011cd2:	b183      	cbz	r3, 8011cf6 <__mdiff+0xb6>
 8011cd4:	6106      	str	r6, [r0, #16]
 8011cd6:	e7c5      	b.n	8011c64 <__mdiff+0x24>
 8011cd8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011cdc:	fa1e f381 	uxtah	r3, lr, r1
 8011ce0:	141a      	asrs	r2, r3, #16
 8011ce2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011cec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011cf0:	f845 3b04 	str.w	r3, [r5], #4
 8011cf4:	e7e9      	b.n	8011cca <__mdiff+0x8a>
 8011cf6:	3e01      	subs	r6, #1
 8011cf8:	e7e9      	b.n	8011cce <__mdiff+0x8e>

08011cfa <__d2b>:
 8011cfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cfe:	460e      	mov	r6, r1
 8011d00:	2101      	movs	r1, #1
 8011d02:	ec59 8b10 	vmov	r8, r9, d0
 8011d06:	4615      	mov	r5, r2
 8011d08:	f7ff fd6a 	bl	80117e0 <_Balloc>
 8011d0c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011d10:	4607      	mov	r7, r0
 8011d12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d16:	bb34      	cbnz	r4, 8011d66 <__d2b+0x6c>
 8011d18:	9301      	str	r3, [sp, #4]
 8011d1a:	f1b8 0300 	subs.w	r3, r8, #0
 8011d1e:	d027      	beq.n	8011d70 <__d2b+0x76>
 8011d20:	a802      	add	r0, sp, #8
 8011d22:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011d26:	f7ff fe00 	bl	801192a <__lo0bits>
 8011d2a:	9900      	ldr	r1, [sp, #0]
 8011d2c:	b1f0      	cbz	r0, 8011d6c <__d2b+0x72>
 8011d2e:	9a01      	ldr	r2, [sp, #4]
 8011d30:	f1c0 0320 	rsb	r3, r0, #32
 8011d34:	fa02 f303 	lsl.w	r3, r2, r3
 8011d38:	430b      	orrs	r3, r1
 8011d3a:	40c2      	lsrs	r2, r0
 8011d3c:	617b      	str	r3, [r7, #20]
 8011d3e:	9201      	str	r2, [sp, #4]
 8011d40:	9b01      	ldr	r3, [sp, #4]
 8011d42:	61bb      	str	r3, [r7, #24]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	bf14      	ite	ne
 8011d48:	2102      	movne	r1, #2
 8011d4a:	2101      	moveq	r1, #1
 8011d4c:	6139      	str	r1, [r7, #16]
 8011d4e:	b1c4      	cbz	r4, 8011d82 <__d2b+0x88>
 8011d50:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011d54:	4404      	add	r4, r0
 8011d56:	6034      	str	r4, [r6, #0]
 8011d58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d5c:	6028      	str	r0, [r5, #0]
 8011d5e:	4638      	mov	r0, r7
 8011d60:	b003      	add	sp, #12
 8011d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d6a:	e7d5      	b.n	8011d18 <__d2b+0x1e>
 8011d6c:	6179      	str	r1, [r7, #20]
 8011d6e:	e7e7      	b.n	8011d40 <__d2b+0x46>
 8011d70:	a801      	add	r0, sp, #4
 8011d72:	f7ff fdda 	bl	801192a <__lo0bits>
 8011d76:	9b01      	ldr	r3, [sp, #4]
 8011d78:	617b      	str	r3, [r7, #20]
 8011d7a:	2101      	movs	r1, #1
 8011d7c:	6139      	str	r1, [r7, #16]
 8011d7e:	3020      	adds	r0, #32
 8011d80:	e7e5      	b.n	8011d4e <__d2b+0x54>
 8011d82:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011d86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011d8a:	6030      	str	r0, [r6, #0]
 8011d8c:	6918      	ldr	r0, [r3, #16]
 8011d8e:	f7ff fdad 	bl	80118ec <__hi0bits>
 8011d92:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011d96:	e7e1      	b.n	8011d5c <__d2b+0x62>

08011d98 <_calloc_r>:
 8011d98:	b538      	push	{r3, r4, r5, lr}
 8011d9a:	fb02 f401 	mul.w	r4, r2, r1
 8011d9e:	4621      	mov	r1, r4
 8011da0:	f000 f856 	bl	8011e50 <_malloc_r>
 8011da4:	4605      	mov	r5, r0
 8011da6:	b118      	cbz	r0, 8011db0 <_calloc_r+0x18>
 8011da8:	4622      	mov	r2, r4
 8011daa:	2100      	movs	r1, #0
 8011dac:	f7fd fe90 	bl	800fad0 <memset>
 8011db0:	4628      	mov	r0, r5
 8011db2:	bd38      	pop	{r3, r4, r5, pc}

08011db4 <_free_r>:
 8011db4:	b538      	push	{r3, r4, r5, lr}
 8011db6:	4605      	mov	r5, r0
 8011db8:	2900      	cmp	r1, #0
 8011dba:	d045      	beq.n	8011e48 <_free_r+0x94>
 8011dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dc0:	1f0c      	subs	r4, r1, #4
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	bfb8      	it	lt
 8011dc6:	18e4      	addlt	r4, r4, r3
 8011dc8:	f000 fa98 	bl	80122fc <__malloc_lock>
 8011dcc:	4a1f      	ldr	r2, [pc, #124]	; (8011e4c <_free_r+0x98>)
 8011dce:	6813      	ldr	r3, [r2, #0]
 8011dd0:	4610      	mov	r0, r2
 8011dd2:	b933      	cbnz	r3, 8011de2 <_free_r+0x2e>
 8011dd4:	6063      	str	r3, [r4, #4]
 8011dd6:	6014      	str	r4, [r2, #0]
 8011dd8:	4628      	mov	r0, r5
 8011dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dde:	f000 ba8e 	b.w	80122fe <__malloc_unlock>
 8011de2:	42a3      	cmp	r3, r4
 8011de4:	d90c      	bls.n	8011e00 <_free_r+0x4c>
 8011de6:	6821      	ldr	r1, [r4, #0]
 8011de8:	1862      	adds	r2, r4, r1
 8011dea:	4293      	cmp	r3, r2
 8011dec:	bf04      	itt	eq
 8011dee:	681a      	ldreq	r2, [r3, #0]
 8011df0:	685b      	ldreq	r3, [r3, #4]
 8011df2:	6063      	str	r3, [r4, #4]
 8011df4:	bf04      	itt	eq
 8011df6:	1852      	addeq	r2, r2, r1
 8011df8:	6022      	streq	r2, [r4, #0]
 8011dfa:	6004      	str	r4, [r0, #0]
 8011dfc:	e7ec      	b.n	8011dd8 <_free_r+0x24>
 8011dfe:	4613      	mov	r3, r2
 8011e00:	685a      	ldr	r2, [r3, #4]
 8011e02:	b10a      	cbz	r2, 8011e08 <_free_r+0x54>
 8011e04:	42a2      	cmp	r2, r4
 8011e06:	d9fa      	bls.n	8011dfe <_free_r+0x4a>
 8011e08:	6819      	ldr	r1, [r3, #0]
 8011e0a:	1858      	adds	r0, r3, r1
 8011e0c:	42a0      	cmp	r0, r4
 8011e0e:	d10b      	bne.n	8011e28 <_free_r+0x74>
 8011e10:	6820      	ldr	r0, [r4, #0]
 8011e12:	4401      	add	r1, r0
 8011e14:	1858      	adds	r0, r3, r1
 8011e16:	4282      	cmp	r2, r0
 8011e18:	6019      	str	r1, [r3, #0]
 8011e1a:	d1dd      	bne.n	8011dd8 <_free_r+0x24>
 8011e1c:	6810      	ldr	r0, [r2, #0]
 8011e1e:	6852      	ldr	r2, [r2, #4]
 8011e20:	605a      	str	r2, [r3, #4]
 8011e22:	4401      	add	r1, r0
 8011e24:	6019      	str	r1, [r3, #0]
 8011e26:	e7d7      	b.n	8011dd8 <_free_r+0x24>
 8011e28:	d902      	bls.n	8011e30 <_free_r+0x7c>
 8011e2a:	230c      	movs	r3, #12
 8011e2c:	602b      	str	r3, [r5, #0]
 8011e2e:	e7d3      	b.n	8011dd8 <_free_r+0x24>
 8011e30:	6820      	ldr	r0, [r4, #0]
 8011e32:	1821      	adds	r1, r4, r0
 8011e34:	428a      	cmp	r2, r1
 8011e36:	bf04      	itt	eq
 8011e38:	6811      	ldreq	r1, [r2, #0]
 8011e3a:	6852      	ldreq	r2, [r2, #4]
 8011e3c:	6062      	str	r2, [r4, #4]
 8011e3e:	bf04      	itt	eq
 8011e40:	1809      	addeq	r1, r1, r0
 8011e42:	6021      	streq	r1, [r4, #0]
 8011e44:	605c      	str	r4, [r3, #4]
 8011e46:	e7c7      	b.n	8011dd8 <_free_r+0x24>
 8011e48:	bd38      	pop	{r3, r4, r5, pc}
 8011e4a:	bf00      	nop
 8011e4c:	200020d4 	.word	0x200020d4

08011e50 <_malloc_r>:
 8011e50:	b570      	push	{r4, r5, r6, lr}
 8011e52:	1ccd      	adds	r5, r1, #3
 8011e54:	f025 0503 	bic.w	r5, r5, #3
 8011e58:	3508      	adds	r5, #8
 8011e5a:	2d0c      	cmp	r5, #12
 8011e5c:	bf38      	it	cc
 8011e5e:	250c      	movcc	r5, #12
 8011e60:	2d00      	cmp	r5, #0
 8011e62:	4606      	mov	r6, r0
 8011e64:	db01      	blt.n	8011e6a <_malloc_r+0x1a>
 8011e66:	42a9      	cmp	r1, r5
 8011e68:	d903      	bls.n	8011e72 <_malloc_r+0x22>
 8011e6a:	230c      	movs	r3, #12
 8011e6c:	6033      	str	r3, [r6, #0]
 8011e6e:	2000      	movs	r0, #0
 8011e70:	bd70      	pop	{r4, r5, r6, pc}
 8011e72:	f000 fa43 	bl	80122fc <__malloc_lock>
 8011e76:	4a21      	ldr	r2, [pc, #132]	; (8011efc <_malloc_r+0xac>)
 8011e78:	6814      	ldr	r4, [r2, #0]
 8011e7a:	4621      	mov	r1, r4
 8011e7c:	b991      	cbnz	r1, 8011ea4 <_malloc_r+0x54>
 8011e7e:	4c20      	ldr	r4, [pc, #128]	; (8011f00 <_malloc_r+0xb0>)
 8011e80:	6823      	ldr	r3, [r4, #0]
 8011e82:	b91b      	cbnz	r3, 8011e8c <_malloc_r+0x3c>
 8011e84:	4630      	mov	r0, r6
 8011e86:	f000 f97d 	bl	8012184 <_sbrk_r>
 8011e8a:	6020      	str	r0, [r4, #0]
 8011e8c:	4629      	mov	r1, r5
 8011e8e:	4630      	mov	r0, r6
 8011e90:	f000 f978 	bl	8012184 <_sbrk_r>
 8011e94:	1c43      	adds	r3, r0, #1
 8011e96:	d124      	bne.n	8011ee2 <_malloc_r+0x92>
 8011e98:	230c      	movs	r3, #12
 8011e9a:	6033      	str	r3, [r6, #0]
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f000 fa2e 	bl	80122fe <__malloc_unlock>
 8011ea2:	e7e4      	b.n	8011e6e <_malloc_r+0x1e>
 8011ea4:	680b      	ldr	r3, [r1, #0]
 8011ea6:	1b5b      	subs	r3, r3, r5
 8011ea8:	d418      	bmi.n	8011edc <_malloc_r+0x8c>
 8011eaa:	2b0b      	cmp	r3, #11
 8011eac:	d90f      	bls.n	8011ece <_malloc_r+0x7e>
 8011eae:	600b      	str	r3, [r1, #0]
 8011eb0:	50cd      	str	r5, [r1, r3]
 8011eb2:	18cc      	adds	r4, r1, r3
 8011eb4:	4630      	mov	r0, r6
 8011eb6:	f000 fa22 	bl	80122fe <__malloc_unlock>
 8011eba:	f104 000b 	add.w	r0, r4, #11
 8011ebe:	1d23      	adds	r3, r4, #4
 8011ec0:	f020 0007 	bic.w	r0, r0, #7
 8011ec4:	1ac3      	subs	r3, r0, r3
 8011ec6:	d0d3      	beq.n	8011e70 <_malloc_r+0x20>
 8011ec8:	425a      	negs	r2, r3
 8011eca:	50e2      	str	r2, [r4, r3]
 8011ecc:	e7d0      	b.n	8011e70 <_malloc_r+0x20>
 8011ece:	428c      	cmp	r4, r1
 8011ed0:	684b      	ldr	r3, [r1, #4]
 8011ed2:	bf16      	itet	ne
 8011ed4:	6063      	strne	r3, [r4, #4]
 8011ed6:	6013      	streq	r3, [r2, #0]
 8011ed8:	460c      	movne	r4, r1
 8011eda:	e7eb      	b.n	8011eb4 <_malloc_r+0x64>
 8011edc:	460c      	mov	r4, r1
 8011ede:	6849      	ldr	r1, [r1, #4]
 8011ee0:	e7cc      	b.n	8011e7c <_malloc_r+0x2c>
 8011ee2:	1cc4      	adds	r4, r0, #3
 8011ee4:	f024 0403 	bic.w	r4, r4, #3
 8011ee8:	42a0      	cmp	r0, r4
 8011eea:	d005      	beq.n	8011ef8 <_malloc_r+0xa8>
 8011eec:	1a21      	subs	r1, r4, r0
 8011eee:	4630      	mov	r0, r6
 8011ef0:	f000 f948 	bl	8012184 <_sbrk_r>
 8011ef4:	3001      	adds	r0, #1
 8011ef6:	d0cf      	beq.n	8011e98 <_malloc_r+0x48>
 8011ef8:	6025      	str	r5, [r4, #0]
 8011efa:	e7db      	b.n	8011eb4 <_malloc_r+0x64>
 8011efc:	200020d4 	.word	0x200020d4
 8011f00:	200020d8 	.word	0x200020d8

08011f04 <__sfputc_r>:
 8011f04:	6893      	ldr	r3, [r2, #8]
 8011f06:	3b01      	subs	r3, #1
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	b410      	push	{r4}
 8011f0c:	6093      	str	r3, [r2, #8]
 8011f0e:	da08      	bge.n	8011f22 <__sfputc_r+0x1e>
 8011f10:	6994      	ldr	r4, [r2, #24]
 8011f12:	42a3      	cmp	r3, r4
 8011f14:	db01      	blt.n	8011f1a <__sfputc_r+0x16>
 8011f16:	290a      	cmp	r1, #10
 8011f18:	d103      	bne.n	8011f22 <__sfputc_r+0x1e>
 8011f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f1e:	f7fe bb65 	b.w	80105ec <__swbuf_r>
 8011f22:	6813      	ldr	r3, [r2, #0]
 8011f24:	1c58      	adds	r0, r3, #1
 8011f26:	6010      	str	r0, [r2, #0]
 8011f28:	7019      	strb	r1, [r3, #0]
 8011f2a:	4608      	mov	r0, r1
 8011f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f30:	4770      	bx	lr

08011f32 <__sfputs_r>:
 8011f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f34:	4606      	mov	r6, r0
 8011f36:	460f      	mov	r7, r1
 8011f38:	4614      	mov	r4, r2
 8011f3a:	18d5      	adds	r5, r2, r3
 8011f3c:	42ac      	cmp	r4, r5
 8011f3e:	d101      	bne.n	8011f44 <__sfputs_r+0x12>
 8011f40:	2000      	movs	r0, #0
 8011f42:	e007      	b.n	8011f54 <__sfputs_r+0x22>
 8011f44:	463a      	mov	r2, r7
 8011f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f7ff ffda 	bl	8011f04 <__sfputc_r>
 8011f50:	1c43      	adds	r3, r0, #1
 8011f52:	d1f3      	bne.n	8011f3c <__sfputs_r+0xa>
 8011f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f58 <_vfiprintf_r>:
 8011f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f5c:	460c      	mov	r4, r1
 8011f5e:	b09d      	sub	sp, #116	; 0x74
 8011f60:	4617      	mov	r7, r2
 8011f62:	461d      	mov	r5, r3
 8011f64:	4606      	mov	r6, r0
 8011f66:	b118      	cbz	r0, 8011f70 <_vfiprintf_r+0x18>
 8011f68:	6983      	ldr	r3, [r0, #24]
 8011f6a:	b90b      	cbnz	r3, 8011f70 <_vfiprintf_r+0x18>
 8011f6c:	f7ff fb34 	bl	80115d8 <__sinit>
 8011f70:	4b7c      	ldr	r3, [pc, #496]	; (8012164 <_vfiprintf_r+0x20c>)
 8011f72:	429c      	cmp	r4, r3
 8011f74:	d158      	bne.n	8012028 <_vfiprintf_r+0xd0>
 8011f76:	6874      	ldr	r4, [r6, #4]
 8011f78:	89a3      	ldrh	r3, [r4, #12]
 8011f7a:	0718      	lsls	r0, r3, #28
 8011f7c:	d55e      	bpl.n	801203c <_vfiprintf_r+0xe4>
 8011f7e:	6923      	ldr	r3, [r4, #16]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d05b      	beq.n	801203c <_vfiprintf_r+0xe4>
 8011f84:	2300      	movs	r3, #0
 8011f86:	9309      	str	r3, [sp, #36]	; 0x24
 8011f88:	2320      	movs	r3, #32
 8011f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f8e:	2330      	movs	r3, #48	; 0x30
 8011f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f94:	9503      	str	r5, [sp, #12]
 8011f96:	f04f 0b01 	mov.w	fp, #1
 8011f9a:	46b8      	mov	r8, r7
 8011f9c:	4645      	mov	r5, r8
 8011f9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011fa2:	b10b      	cbz	r3, 8011fa8 <_vfiprintf_r+0x50>
 8011fa4:	2b25      	cmp	r3, #37	; 0x25
 8011fa6:	d154      	bne.n	8012052 <_vfiprintf_r+0xfa>
 8011fa8:	ebb8 0a07 	subs.w	sl, r8, r7
 8011fac:	d00b      	beq.n	8011fc6 <_vfiprintf_r+0x6e>
 8011fae:	4653      	mov	r3, sl
 8011fb0:	463a      	mov	r2, r7
 8011fb2:	4621      	mov	r1, r4
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	f7ff ffbc 	bl	8011f32 <__sfputs_r>
 8011fba:	3001      	adds	r0, #1
 8011fbc:	f000 80c2 	beq.w	8012144 <_vfiprintf_r+0x1ec>
 8011fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fc2:	4453      	add	r3, sl
 8011fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8011fc6:	f898 3000 	ldrb.w	r3, [r8]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	f000 80ba 	beq.w	8012144 <_vfiprintf_r+0x1ec>
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8011fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fda:	9304      	str	r3, [sp, #16]
 8011fdc:	9307      	str	r3, [sp, #28]
 8011fde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fe2:	931a      	str	r3, [sp, #104]	; 0x68
 8011fe4:	46a8      	mov	r8, r5
 8011fe6:	2205      	movs	r2, #5
 8011fe8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011fec:	485e      	ldr	r0, [pc, #376]	; (8012168 <_vfiprintf_r+0x210>)
 8011fee:	f7ee f8f7 	bl	80001e0 <memchr>
 8011ff2:	9b04      	ldr	r3, [sp, #16]
 8011ff4:	bb78      	cbnz	r0, 8012056 <_vfiprintf_r+0xfe>
 8011ff6:	06d9      	lsls	r1, r3, #27
 8011ff8:	bf44      	itt	mi
 8011ffa:	2220      	movmi	r2, #32
 8011ffc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012000:	071a      	lsls	r2, r3, #28
 8012002:	bf44      	itt	mi
 8012004:	222b      	movmi	r2, #43	; 0x2b
 8012006:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801200a:	782a      	ldrb	r2, [r5, #0]
 801200c:	2a2a      	cmp	r2, #42	; 0x2a
 801200e:	d02a      	beq.n	8012066 <_vfiprintf_r+0x10e>
 8012010:	9a07      	ldr	r2, [sp, #28]
 8012012:	46a8      	mov	r8, r5
 8012014:	2000      	movs	r0, #0
 8012016:	250a      	movs	r5, #10
 8012018:	4641      	mov	r1, r8
 801201a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801201e:	3b30      	subs	r3, #48	; 0x30
 8012020:	2b09      	cmp	r3, #9
 8012022:	d969      	bls.n	80120f8 <_vfiprintf_r+0x1a0>
 8012024:	b360      	cbz	r0, 8012080 <_vfiprintf_r+0x128>
 8012026:	e024      	b.n	8012072 <_vfiprintf_r+0x11a>
 8012028:	4b50      	ldr	r3, [pc, #320]	; (801216c <_vfiprintf_r+0x214>)
 801202a:	429c      	cmp	r4, r3
 801202c:	d101      	bne.n	8012032 <_vfiprintf_r+0xda>
 801202e:	68b4      	ldr	r4, [r6, #8]
 8012030:	e7a2      	b.n	8011f78 <_vfiprintf_r+0x20>
 8012032:	4b4f      	ldr	r3, [pc, #316]	; (8012170 <_vfiprintf_r+0x218>)
 8012034:	429c      	cmp	r4, r3
 8012036:	bf08      	it	eq
 8012038:	68f4      	ldreq	r4, [r6, #12]
 801203a:	e79d      	b.n	8011f78 <_vfiprintf_r+0x20>
 801203c:	4621      	mov	r1, r4
 801203e:	4630      	mov	r0, r6
 8012040:	f7fe fb26 	bl	8010690 <__swsetup_r>
 8012044:	2800      	cmp	r0, #0
 8012046:	d09d      	beq.n	8011f84 <_vfiprintf_r+0x2c>
 8012048:	f04f 30ff 	mov.w	r0, #4294967295
 801204c:	b01d      	add	sp, #116	; 0x74
 801204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012052:	46a8      	mov	r8, r5
 8012054:	e7a2      	b.n	8011f9c <_vfiprintf_r+0x44>
 8012056:	4a44      	ldr	r2, [pc, #272]	; (8012168 <_vfiprintf_r+0x210>)
 8012058:	1a80      	subs	r0, r0, r2
 801205a:	fa0b f000 	lsl.w	r0, fp, r0
 801205e:	4318      	orrs	r0, r3
 8012060:	9004      	str	r0, [sp, #16]
 8012062:	4645      	mov	r5, r8
 8012064:	e7be      	b.n	8011fe4 <_vfiprintf_r+0x8c>
 8012066:	9a03      	ldr	r2, [sp, #12]
 8012068:	1d11      	adds	r1, r2, #4
 801206a:	6812      	ldr	r2, [r2, #0]
 801206c:	9103      	str	r1, [sp, #12]
 801206e:	2a00      	cmp	r2, #0
 8012070:	db01      	blt.n	8012076 <_vfiprintf_r+0x11e>
 8012072:	9207      	str	r2, [sp, #28]
 8012074:	e004      	b.n	8012080 <_vfiprintf_r+0x128>
 8012076:	4252      	negs	r2, r2
 8012078:	f043 0302 	orr.w	r3, r3, #2
 801207c:	9207      	str	r2, [sp, #28]
 801207e:	9304      	str	r3, [sp, #16]
 8012080:	f898 3000 	ldrb.w	r3, [r8]
 8012084:	2b2e      	cmp	r3, #46	; 0x2e
 8012086:	d10e      	bne.n	80120a6 <_vfiprintf_r+0x14e>
 8012088:	f898 3001 	ldrb.w	r3, [r8, #1]
 801208c:	2b2a      	cmp	r3, #42	; 0x2a
 801208e:	d138      	bne.n	8012102 <_vfiprintf_r+0x1aa>
 8012090:	9b03      	ldr	r3, [sp, #12]
 8012092:	1d1a      	adds	r2, r3, #4
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	9203      	str	r2, [sp, #12]
 8012098:	2b00      	cmp	r3, #0
 801209a:	bfb8      	it	lt
 801209c:	f04f 33ff 	movlt.w	r3, #4294967295
 80120a0:	f108 0802 	add.w	r8, r8, #2
 80120a4:	9305      	str	r3, [sp, #20]
 80120a6:	4d33      	ldr	r5, [pc, #204]	; (8012174 <_vfiprintf_r+0x21c>)
 80120a8:	f898 1000 	ldrb.w	r1, [r8]
 80120ac:	2203      	movs	r2, #3
 80120ae:	4628      	mov	r0, r5
 80120b0:	f7ee f896 	bl	80001e0 <memchr>
 80120b4:	b140      	cbz	r0, 80120c8 <_vfiprintf_r+0x170>
 80120b6:	2340      	movs	r3, #64	; 0x40
 80120b8:	1b40      	subs	r0, r0, r5
 80120ba:	fa03 f000 	lsl.w	r0, r3, r0
 80120be:	9b04      	ldr	r3, [sp, #16]
 80120c0:	4303      	orrs	r3, r0
 80120c2:	f108 0801 	add.w	r8, r8, #1
 80120c6:	9304      	str	r3, [sp, #16]
 80120c8:	f898 1000 	ldrb.w	r1, [r8]
 80120cc:	482a      	ldr	r0, [pc, #168]	; (8012178 <_vfiprintf_r+0x220>)
 80120ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120d2:	2206      	movs	r2, #6
 80120d4:	f108 0701 	add.w	r7, r8, #1
 80120d8:	f7ee f882 	bl	80001e0 <memchr>
 80120dc:	2800      	cmp	r0, #0
 80120de:	d037      	beq.n	8012150 <_vfiprintf_r+0x1f8>
 80120e0:	4b26      	ldr	r3, [pc, #152]	; (801217c <_vfiprintf_r+0x224>)
 80120e2:	bb1b      	cbnz	r3, 801212c <_vfiprintf_r+0x1d4>
 80120e4:	9b03      	ldr	r3, [sp, #12]
 80120e6:	3307      	adds	r3, #7
 80120e8:	f023 0307 	bic.w	r3, r3, #7
 80120ec:	3308      	adds	r3, #8
 80120ee:	9303      	str	r3, [sp, #12]
 80120f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f2:	444b      	add	r3, r9
 80120f4:	9309      	str	r3, [sp, #36]	; 0x24
 80120f6:	e750      	b.n	8011f9a <_vfiprintf_r+0x42>
 80120f8:	fb05 3202 	mla	r2, r5, r2, r3
 80120fc:	2001      	movs	r0, #1
 80120fe:	4688      	mov	r8, r1
 8012100:	e78a      	b.n	8012018 <_vfiprintf_r+0xc0>
 8012102:	2300      	movs	r3, #0
 8012104:	f108 0801 	add.w	r8, r8, #1
 8012108:	9305      	str	r3, [sp, #20]
 801210a:	4619      	mov	r1, r3
 801210c:	250a      	movs	r5, #10
 801210e:	4640      	mov	r0, r8
 8012110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012114:	3a30      	subs	r2, #48	; 0x30
 8012116:	2a09      	cmp	r2, #9
 8012118:	d903      	bls.n	8012122 <_vfiprintf_r+0x1ca>
 801211a:	2b00      	cmp	r3, #0
 801211c:	d0c3      	beq.n	80120a6 <_vfiprintf_r+0x14e>
 801211e:	9105      	str	r1, [sp, #20]
 8012120:	e7c1      	b.n	80120a6 <_vfiprintf_r+0x14e>
 8012122:	fb05 2101 	mla	r1, r5, r1, r2
 8012126:	2301      	movs	r3, #1
 8012128:	4680      	mov	r8, r0
 801212a:	e7f0      	b.n	801210e <_vfiprintf_r+0x1b6>
 801212c:	ab03      	add	r3, sp, #12
 801212e:	9300      	str	r3, [sp, #0]
 8012130:	4622      	mov	r2, r4
 8012132:	4b13      	ldr	r3, [pc, #76]	; (8012180 <_vfiprintf_r+0x228>)
 8012134:	a904      	add	r1, sp, #16
 8012136:	4630      	mov	r0, r6
 8012138:	f7fd fd66 	bl	800fc08 <_printf_float>
 801213c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012140:	4681      	mov	r9, r0
 8012142:	d1d5      	bne.n	80120f0 <_vfiprintf_r+0x198>
 8012144:	89a3      	ldrh	r3, [r4, #12]
 8012146:	065b      	lsls	r3, r3, #25
 8012148:	f53f af7e 	bmi.w	8012048 <_vfiprintf_r+0xf0>
 801214c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801214e:	e77d      	b.n	801204c <_vfiprintf_r+0xf4>
 8012150:	ab03      	add	r3, sp, #12
 8012152:	9300      	str	r3, [sp, #0]
 8012154:	4622      	mov	r2, r4
 8012156:	4b0a      	ldr	r3, [pc, #40]	; (8012180 <_vfiprintf_r+0x228>)
 8012158:	a904      	add	r1, sp, #16
 801215a:	4630      	mov	r0, r6
 801215c:	f7fe f80a 	bl	8010174 <_printf_i>
 8012160:	e7ec      	b.n	801213c <_vfiprintf_r+0x1e4>
 8012162:	bf00      	nop
 8012164:	08013b74 	.word	0x08013b74
 8012168:	08013cb4 	.word	0x08013cb4
 801216c:	08013b94 	.word	0x08013b94
 8012170:	08013b54 	.word	0x08013b54
 8012174:	08013cba 	.word	0x08013cba
 8012178:	08013cbe 	.word	0x08013cbe
 801217c:	0800fc09 	.word	0x0800fc09
 8012180:	08011f33 	.word	0x08011f33

08012184 <_sbrk_r>:
 8012184:	b538      	push	{r3, r4, r5, lr}
 8012186:	4c06      	ldr	r4, [pc, #24]	; (80121a0 <_sbrk_r+0x1c>)
 8012188:	2300      	movs	r3, #0
 801218a:	4605      	mov	r5, r0
 801218c:	4608      	mov	r0, r1
 801218e:	6023      	str	r3, [r4, #0]
 8012190:	f7f4 fcc0 	bl	8006b14 <_sbrk>
 8012194:	1c43      	adds	r3, r0, #1
 8012196:	d102      	bne.n	801219e <_sbrk_r+0x1a>
 8012198:	6823      	ldr	r3, [r4, #0]
 801219a:	b103      	cbz	r3, 801219e <_sbrk_r+0x1a>
 801219c:	602b      	str	r3, [r5, #0]
 801219e:	bd38      	pop	{r3, r4, r5, pc}
 80121a0:	20003378 	.word	0x20003378

080121a4 <__sread>:
 80121a4:	b510      	push	{r4, lr}
 80121a6:	460c      	mov	r4, r1
 80121a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121ac:	f000 f8a8 	bl	8012300 <_read_r>
 80121b0:	2800      	cmp	r0, #0
 80121b2:	bfab      	itete	ge
 80121b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80121b6:	89a3      	ldrhlt	r3, [r4, #12]
 80121b8:	181b      	addge	r3, r3, r0
 80121ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80121be:	bfac      	ite	ge
 80121c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80121c2:	81a3      	strhlt	r3, [r4, #12]
 80121c4:	bd10      	pop	{r4, pc}

080121c6 <__swrite>:
 80121c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ca:	461f      	mov	r7, r3
 80121cc:	898b      	ldrh	r3, [r1, #12]
 80121ce:	05db      	lsls	r3, r3, #23
 80121d0:	4605      	mov	r5, r0
 80121d2:	460c      	mov	r4, r1
 80121d4:	4616      	mov	r6, r2
 80121d6:	d505      	bpl.n	80121e4 <__swrite+0x1e>
 80121d8:	2302      	movs	r3, #2
 80121da:	2200      	movs	r2, #0
 80121dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121e0:	f000 f868 	bl	80122b4 <_lseek_r>
 80121e4:	89a3      	ldrh	r3, [r4, #12]
 80121e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80121ee:	81a3      	strh	r3, [r4, #12]
 80121f0:	4632      	mov	r2, r6
 80121f2:	463b      	mov	r3, r7
 80121f4:	4628      	mov	r0, r5
 80121f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121fa:	f000 b817 	b.w	801222c <_write_r>

080121fe <__sseek>:
 80121fe:	b510      	push	{r4, lr}
 8012200:	460c      	mov	r4, r1
 8012202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012206:	f000 f855 	bl	80122b4 <_lseek_r>
 801220a:	1c43      	adds	r3, r0, #1
 801220c:	89a3      	ldrh	r3, [r4, #12]
 801220e:	bf15      	itete	ne
 8012210:	6560      	strne	r0, [r4, #84]	; 0x54
 8012212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801221a:	81a3      	strheq	r3, [r4, #12]
 801221c:	bf18      	it	ne
 801221e:	81a3      	strhne	r3, [r4, #12]
 8012220:	bd10      	pop	{r4, pc}

08012222 <__sclose>:
 8012222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012226:	f000 b813 	b.w	8012250 <_close_r>
	...

0801222c <_write_r>:
 801222c:	b538      	push	{r3, r4, r5, lr}
 801222e:	4c07      	ldr	r4, [pc, #28]	; (801224c <_write_r+0x20>)
 8012230:	4605      	mov	r5, r0
 8012232:	4608      	mov	r0, r1
 8012234:	4611      	mov	r1, r2
 8012236:	2200      	movs	r2, #0
 8012238:	6022      	str	r2, [r4, #0]
 801223a:	461a      	mov	r2, r3
 801223c:	f7f0 fc7e 	bl	8002b3c <_write>
 8012240:	1c43      	adds	r3, r0, #1
 8012242:	d102      	bne.n	801224a <_write_r+0x1e>
 8012244:	6823      	ldr	r3, [r4, #0]
 8012246:	b103      	cbz	r3, 801224a <_write_r+0x1e>
 8012248:	602b      	str	r3, [r5, #0]
 801224a:	bd38      	pop	{r3, r4, r5, pc}
 801224c:	20003378 	.word	0x20003378

08012250 <_close_r>:
 8012250:	b538      	push	{r3, r4, r5, lr}
 8012252:	4c06      	ldr	r4, [pc, #24]	; (801226c <_close_r+0x1c>)
 8012254:	2300      	movs	r3, #0
 8012256:	4605      	mov	r5, r0
 8012258:	4608      	mov	r0, r1
 801225a:	6023      	str	r3, [r4, #0]
 801225c:	f7f0 fc98 	bl	8002b90 <_close>
 8012260:	1c43      	adds	r3, r0, #1
 8012262:	d102      	bne.n	801226a <_close_r+0x1a>
 8012264:	6823      	ldr	r3, [r4, #0]
 8012266:	b103      	cbz	r3, 801226a <_close_r+0x1a>
 8012268:	602b      	str	r3, [r5, #0]
 801226a:	bd38      	pop	{r3, r4, r5, pc}
 801226c:	20003378 	.word	0x20003378

08012270 <_fstat_r>:
 8012270:	b538      	push	{r3, r4, r5, lr}
 8012272:	4c07      	ldr	r4, [pc, #28]	; (8012290 <_fstat_r+0x20>)
 8012274:	2300      	movs	r3, #0
 8012276:	4605      	mov	r5, r0
 8012278:	4608      	mov	r0, r1
 801227a:	4611      	mov	r1, r2
 801227c:	6023      	str	r3, [r4, #0]
 801227e:	f7f0 fcd7 	bl	8002c30 <_fstat>
 8012282:	1c43      	adds	r3, r0, #1
 8012284:	d102      	bne.n	801228c <_fstat_r+0x1c>
 8012286:	6823      	ldr	r3, [r4, #0]
 8012288:	b103      	cbz	r3, 801228c <_fstat_r+0x1c>
 801228a:	602b      	str	r3, [r5, #0]
 801228c:	bd38      	pop	{r3, r4, r5, pc}
 801228e:	bf00      	nop
 8012290:	20003378 	.word	0x20003378

08012294 <_isatty_r>:
 8012294:	b538      	push	{r3, r4, r5, lr}
 8012296:	4c06      	ldr	r4, [pc, #24]	; (80122b0 <_isatty_r+0x1c>)
 8012298:	2300      	movs	r3, #0
 801229a:	4605      	mov	r5, r0
 801229c:	4608      	mov	r0, r1
 801229e:	6023      	str	r3, [r4, #0]
 80122a0:	f7f0 fc36 	bl	8002b10 <_isatty>
 80122a4:	1c43      	adds	r3, r0, #1
 80122a6:	d102      	bne.n	80122ae <_isatty_r+0x1a>
 80122a8:	6823      	ldr	r3, [r4, #0]
 80122aa:	b103      	cbz	r3, 80122ae <_isatty_r+0x1a>
 80122ac:	602b      	str	r3, [r5, #0]
 80122ae:	bd38      	pop	{r3, r4, r5, pc}
 80122b0:	20003378 	.word	0x20003378

080122b4 <_lseek_r>:
 80122b4:	b538      	push	{r3, r4, r5, lr}
 80122b6:	4c07      	ldr	r4, [pc, #28]	; (80122d4 <_lseek_r+0x20>)
 80122b8:	4605      	mov	r5, r0
 80122ba:	4608      	mov	r0, r1
 80122bc:	4611      	mov	r1, r2
 80122be:	2200      	movs	r2, #0
 80122c0:	6022      	str	r2, [r4, #0]
 80122c2:	461a      	mov	r2, r3
 80122c4:	f7f0 fc7b 	bl	8002bbe <_lseek>
 80122c8:	1c43      	adds	r3, r0, #1
 80122ca:	d102      	bne.n	80122d2 <_lseek_r+0x1e>
 80122cc:	6823      	ldr	r3, [r4, #0]
 80122ce:	b103      	cbz	r3, 80122d2 <_lseek_r+0x1e>
 80122d0:	602b      	str	r3, [r5, #0]
 80122d2:	bd38      	pop	{r3, r4, r5, pc}
 80122d4:	20003378 	.word	0x20003378

080122d8 <__ascii_mbtowc>:
 80122d8:	b082      	sub	sp, #8
 80122da:	b901      	cbnz	r1, 80122de <__ascii_mbtowc+0x6>
 80122dc:	a901      	add	r1, sp, #4
 80122de:	b142      	cbz	r2, 80122f2 <__ascii_mbtowc+0x1a>
 80122e0:	b14b      	cbz	r3, 80122f6 <__ascii_mbtowc+0x1e>
 80122e2:	7813      	ldrb	r3, [r2, #0]
 80122e4:	600b      	str	r3, [r1, #0]
 80122e6:	7812      	ldrb	r2, [r2, #0]
 80122e8:	1c10      	adds	r0, r2, #0
 80122ea:	bf18      	it	ne
 80122ec:	2001      	movne	r0, #1
 80122ee:	b002      	add	sp, #8
 80122f0:	4770      	bx	lr
 80122f2:	4610      	mov	r0, r2
 80122f4:	e7fb      	b.n	80122ee <__ascii_mbtowc+0x16>
 80122f6:	f06f 0001 	mvn.w	r0, #1
 80122fa:	e7f8      	b.n	80122ee <__ascii_mbtowc+0x16>

080122fc <__malloc_lock>:
 80122fc:	4770      	bx	lr

080122fe <__malloc_unlock>:
 80122fe:	4770      	bx	lr

08012300 <_read_r>:
 8012300:	b538      	push	{r3, r4, r5, lr}
 8012302:	4c07      	ldr	r4, [pc, #28]	; (8012320 <_read_r+0x20>)
 8012304:	4605      	mov	r5, r0
 8012306:	4608      	mov	r0, r1
 8012308:	4611      	mov	r1, r2
 801230a:	2200      	movs	r2, #0
 801230c:	6022      	str	r2, [r4, #0]
 801230e:	461a      	mov	r2, r3
 8012310:	f7f0 fc66 	bl	8002be0 <_read>
 8012314:	1c43      	adds	r3, r0, #1
 8012316:	d102      	bne.n	801231e <_read_r+0x1e>
 8012318:	6823      	ldr	r3, [r4, #0]
 801231a:	b103      	cbz	r3, 801231e <_read_r+0x1e>
 801231c:	602b      	str	r3, [r5, #0]
 801231e:	bd38      	pop	{r3, r4, r5, pc}
 8012320:	20003378 	.word	0x20003378

08012324 <__ascii_wctomb>:
 8012324:	b149      	cbz	r1, 801233a <__ascii_wctomb+0x16>
 8012326:	2aff      	cmp	r2, #255	; 0xff
 8012328:	bf85      	ittet	hi
 801232a:	238a      	movhi	r3, #138	; 0x8a
 801232c:	6003      	strhi	r3, [r0, #0]
 801232e:	700a      	strbls	r2, [r1, #0]
 8012330:	f04f 30ff 	movhi.w	r0, #4294967295
 8012334:	bf98      	it	ls
 8012336:	2001      	movls	r0, #1
 8012338:	4770      	bx	lr
 801233a:	4608      	mov	r0, r1
 801233c:	4770      	bx	lr
	...

08012340 <cosf>:
 8012340:	ee10 3a10 	vmov	r3, s0
 8012344:	b507      	push	{r0, r1, r2, lr}
 8012346:	4a1c      	ldr	r2, [pc, #112]	; (80123b8 <cosf+0x78>)
 8012348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801234c:	4293      	cmp	r3, r2
 801234e:	dc04      	bgt.n	801235a <cosf+0x1a>
 8012350:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80123bc <cosf+0x7c>
 8012354:	f000 ff5a 	bl	801320c <__kernel_cosf>
 8012358:	e004      	b.n	8012364 <cosf+0x24>
 801235a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801235e:	db04      	blt.n	801236a <cosf+0x2a>
 8012360:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012364:	b003      	add	sp, #12
 8012366:	f85d fb04 	ldr.w	pc, [sp], #4
 801236a:	4668      	mov	r0, sp
 801236c:	f000 fe1e 	bl	8012fac <__ieee754_rem_pio2f>
 8012370:	f000 0003 	and.w	r0, r0, #3
 8012374:	2801      	cmp	r0, #1
 8012376:	d007      	beq.n	8012388 <cosf+0x48>
 8012378:	2802      	cmp	r0, #2
 801237a:	d00e      	beq.n	801239a <cosf+0x5a>
 801237c:	b9a0      	cbnz	r0, 80123a8 <cosf+0x68>
 801237e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012382:	ed9d 0a00 	vldr	s0, [sp]
 8012386:	e7e5      	b.n	8012354 <cosf+0x14>
 8012388:	eddd 0a01 	vldr	s1, [sp, #4]
 801238c:	ed9d 0a00 	vldr	s0, [sp]
 8012390:	f001 fa1c 	bl	80137cc <__kernel_sinf>
 8012394:	eeb1 0a40 	vneg.f32	s0, s0
 8012398:	e7e4      	b.n	8012364 <cosf+0x24>
 801239a:	eddd 0a01 	vldr	s1, [sp, #4]
 801239e:	ed9d 0a00 	vldr	s0, [sp]
 80123a2:	f000 ff33 	bl	801320c <__kernel_cosf>
 80123a6:	e7f5      	b.n	8012394 <cosf+0x54>
 80123a8:	2001      	movs	r0, #1
 80123aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80123ae:	ed9d 0a00 	vldr	s0, [sp]
 80123b2:	f001 fa0b 	bl	80137cc <__kernel_sinf>
 80123b6:	e7d5      	b.n	8012364 <cosf+0x24>
 80123b8:	3f490fd8 	.word	0x3f490fd8
 80123bc:	00000000 	.word	0x00000000

080123c0 <sinf>:
 80123c0:	ee10 3a10 	vmov	r3, s0
 80123c4:	b507      	push	{r0, r1, r2, lr}
 80123c6:	4a1d      	ldr	r2, [pc, #116]	; (801243c <sinf+0x7c>)
 80123c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80123cc:	4293      	cmp	r3, r2
 80123ce:	dc05      	bgt.n	80123dc <sinf+0x1c>
 80123d0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8012440 <sinf+0x80>
 80123d4:	2000      	movs	r0, #0
 80123d6:	f001 f9f9 	bl	80137cc <__kernel_sinf>
 80123da:	e004      	b.n	80123e6 <sinf+0x26>
 80123dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80123e0:	db04      	blt.n	80123ec <sinf+0x2c>
 80123e2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80123e6:	b003      	add	sp, #12
 80123e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80123ec:	4668      	mov	r0, sp
 80123ee:	f000 fddd 	bl	8012fac <__ieee754_rem_pio2f>
 80123f2:	f000 0003 	and.w	r0, r0, #3
 80123f6:	2801      	cmp	r0, #1
 80123f8:	d008      	beq.n	801240c <sinf+0x4c>
 80123fa:	2802      	cmp	r0, #2
 80123fc:	d00d      	beq.n	801241a <sinf+0x5a>
 80123fe:	b9b0      	cbnz	r0, 801242e <sinf+0x6e>
 8012400:	2001      	movs	r0, #1
 8012402:	eddd 0a01 	vldr	s1, [sp, #4]
 8012406:	ed9d 0a00 	vldr	s0, [sp]
 801240a:	e7e4      	b.n	80123d6 <sinf+0x16>
 801240c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012410:	ed9d 0a00 	vldr	s0, [sp]
 8012414:	f000 fefa 	bl	801320c <__kernel_cosf>
 8012418:	e7e5      	b.n	80123e6 <sinf+0x26>
 801241a:	2001      	movs	r0, #1
 801241c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012420:	ed9d 0a00 	vldr	s0, [sp]
 8012424:	f001 f9d2 	bl	80137cc <__kernel_sinf>
 8012428:	eeb1 0a40 	vneg.f32	s0, s0
 801242c:	e7db      	b.n	80123e6 <sinf+0x26>
 801242e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012432:	ed9d 0a00 	vldr	s0, [sp]
 8012436:	f000 fee9 	bl	801320c <__kernel_cosf>
 801243a:	e7f5      	b.n	8012428 <sinf+0x68>
 801243c:	3f490fd8 	.word	0x3f490fd8
 8012440:	00000000 	.word	0x00000000

08012444 <asinf>:
 8012444:	b510      	push	{r4, lr}
 8012446:	ed2d 8b02 	vpush	{d8}
 801244a:	4c27      	ldr	r4, [pc, #156]	; (80124e8 <asinf+0xa4>)
 801244c:	b08a      	sub	sp, #40	; 0x28
 801244e:	eeb0 8a40 	vmov.f32	s16, s0
 8012452:	f000 fa03 	bl	801285c <__ieee754_asinf>
 8012456:	f994 3000 	ldrsb.w	r3, [r4]
 801245a:	3301      	adds	r3, #1
 801245c:	eef0 8a40 	vmov.f32	s17, s0
 8012460:	d03c      	beq.n	80124dc <asinf+0x98>
 8012462:	eeb4 8a48 	vcmp.f32	s16, s16
 8012466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801246a:	d637      	bvs.n	80124dc <asinf+0x98>
 801246c:	eeb0 0a48 	vmov.f32	s0, s16
 8012470:	f001 f9fe 	bl	8013870 <fabsf>
 8012474:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012478:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012480:	dd2c      	ble.n	80124dc <asinf+0x98>
 8012482:	2301      	movs	r3, #1
 8012484:	9300      	str	r3, [sp, #0]
 8012486:	4b19      	ldr	r3, [pc, #100]	; (80124ec <asinf+0xa8>)
 8012488:	9301      	str	r3, [sp, #4]
 801248a:	ee18 0a10 	vmov	r0, s16
 801248e:	2300      	movs	r3, #0
 8012490:	9308      	str	r3, [sp, #32]
 8012492:	f7ee f859 	bl	8000548 <__aeabi_f2d>
 8012496:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801249a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801249e:	4814      	ldr	r0, [pc, #80]	; (80124f0 <asinf+0xac>)
 80124a0:	f001 f9de 	bl	8013860 <nan>
 80124a4:	f994 3000 	ldrsb.w	r3, [r4]
 80124a8:	2b02      	cmp	r3, #2
 80124aa:	ed8d 0b06 	vstr	d0, [sp, #24]
 80124ae:	d104      	bne.n	80124ba <asinf+0x76>
 80124b0:	f7fd fac0 	bl	800fa34 <__errno>
 80124b4:	2321      	movs	r3, #33	; 0x21
 80124b6:	6003      	str	r3, [r0, #0]
 80124b8:	e004      	b.n	80124c4 <asinf+0x80>
 80124ba:	4668      	mov	r0, sp
 80124bc:	f001 f9ce 	bl	801385c <matherr>
 80124c0:	2800      	cmp	r0, #0
 80124c2:	d0f5      	beq.n	80124b0 <asinf+0x6c>
 80124c4:	9b08      	ldr	r3, [sp, #32]
 80124c6:	b11b      	cbz	r3, 80124d0 <asinf+0x8c>
 80124c8:	f7fd fab4 	bl	800fa34 <__errno>
 80124cc:	9b08      	ldr	r3, [sp, #32]
 80124ce:	6003      	str	r3, [r0, #0]
 80124d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80124d4:	f7ee fb68 	bl	8000ba8 <__aeabi_d2f>
 80124d8:	ee08 0a90 	vmov	s17, r0
 80124dc:	eeb0 0a68 	vmov.f32	s0, s17
 80124e0:	b00a      	add	sp, #40	; 0x28
 80124e2:	ecbd 8b02 	vpop	{d8}
 80124e6:	bd10      	pop	{r4, pc}
 80124e8:	20001c78 	.word	0x20001c78
 80124ec:	08013dd0 	.word	0x08013dd0
 80124f0:	08013cb9 	.word	0x08013cb9

080124f4 <powf>:
 80124f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80124f8:	ed2d 8b04 	vpush	{d8-d9}
 80124fc:	4ca7      	ldr	r4, [pc, #668]	; (801279c <powf+0x2a8>)
 80124fe:	b08a      	sub	sp, #40	; 0x28
 8012500:	eef0 8a40 	vmov.f32	s17, s0
 8012504:	eeb0 8a60 	vmov.f32	s16, s1
 8012508:	f000 fa90 	bl	8012a2c <__ieee754_powf>
 801250c:	f994 5000 	ldrsb.w	r5, [r4]
 8012510:	1c6b      	adds	r3, r5, #1
 8012512:	eeb0 9a40 	vmov.f32	s18, s0
 8012516:	4626      	mov	r6, r4
 8012518:	d05f      	beq.n	80125da <powf+0xe6>
 801251a:	eeb4 8a48 	vcmp.f32	s16, s16
 801251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012522:	d65a      	bvs.n	80125da <powf+0xe6>
 8012524:	eef4 8a68 	vcmp.f32	s17, s17
 8012528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252c:	d721      	bvc.n	8012572 <powf+0x7e>
 801252e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012536:	d150      	bne.n	80125da <powf+0xe6>
 8012538:	2301      	movs	r3, #1
 801253a:	9300      	str	r3, [sp, #0]
 801253c:	4b98      	ldr	r3, [pc, #608]	; (80127a0 <powf+0x2ac>)
 801253e:	9301      	str	r3, [sp, #4]
 8012540:	ee18 0a90 	vmov	r0, s17
 8012544:	2300      	movs	r3, #0
 8012546:	9308      	str	r3, [sp, #32]
 8012548:	f7ed fffe 	bl	8000548 <__aeabi_f2d>
 801254c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012550:	ee18 0a10 	vmov	r0, s16
 8012554:	f7ed fff8 	bl	8000548 <__aeabi_f2d>
 8012558:	4b92      	ldr	r3, [pc, #584]	; (80127a4 <powf+0x2b0>)
 801255a:	2200      	movs	r2, #0
 801255c:	2d02      	cmp	r5, #2
 801255e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012562:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012566:	d032      	beq.n	80125ce <powf+0xda>
 8012568:	4668      	mov	r0, sp
 801256a:	f001 f977 	bl	801385c <matherr>
 801256e:	bb40      	cbnz	r0, 80125c2 <powf+0xce>
 8012570:	e065      	b.n	801263e <powf+0x14a>
 8012572:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80127a8 <powf+0x2b4>
 8012576:	eef4 8a69 	vcmp.f32	s17, s19
 801257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257e:	d163      	bne.n	8012648 <powf+0x154>
 8012580:	eeb4 8a69 	vcmp.f32	s16, s19
 8012584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012588:	d12e      	bne.n	80125e8 <powf+0xf4>
 801258a:	2301      	movs	r3, #1
 801258c:	9300      	str	r3, [sp, #0]
 801258e:	4b84      	ldr	r3, [pc, #528]	; (80127a0 <powf+0x2ac>)
 8012590:	9301      	str	r3, [sp, #4]
 8012592:	ee18 0a90 	vmov	r0, s17
 8012596:	2300      	movs	r3, #0
 8012598:	9308      	str	r3, [sp, #32]
 801259a:	f7ed ffd5 	bl	8000548 <__aeabi_f2d>
 801259e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125a2:	ee18 0a10 	vmov	r0, s16
 80125a6:	f7ed ffcf 	bl	8000548 <__aeabi_f2d>
 80125aa:	2200      	movs	r2, #0
 80125ac:	2300      	movs	r3, #0
 80125ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80125b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80125b6:	2d00      	cmp	r5, #0
 80125b8:	d0d6      	beq.n	8012568 <powf+0x74>
 80125ba:	4b7a      	ldr	r3, [pc, #488]	; (80127a4 <powf+0x2b0>)
 80125bc:	2200      	movs	r2, #0
 80125be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80125c2:	9b08      	ldr	r3, [sp, #32]
 80125c4:	b11b      	cbz	r3, 80125ce <powf+0xda>
 80125c6:	f7fd fa35 	bl	800fa34 <__errno>
 80125ca:	9b08      	ldr	r3, [sp, #32]
 80125cc:	6003      	str	r3, [r0, #0]
 80125ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80125d2:	f7ee fae9 	bl	8000ba8 <__aeabi_d2f>
 80125d6:	ee09 0a10 	vmov	s18, r0
 80125da:	eeb0 0a49 	vmov.f32	s0, s18
 80125de:	b00a      	add	sp, #40	; 0x28
 80125e0:	ecbd 8b04 	vpop	{d8-d9}
 80125e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80125e8:	eeb0 0a48 	vmov.f32	s0, s16
 80125ec:	f001 f947 	bl	801387e <finitef>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d0f2      	beq.n	80125da <powf+0xe6>
 80125f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80125f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fc:	d5ed      	bpl.n	80125da <powf+0xe6>
 80125fe:	2301      	movs	r3, #1
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	4b67      	ldr	r3, [pc, #412]	; (80127a0 <powf+0x2ac>)
 8012604:	9301      	str	r3, [sp, #4]
 8012606:	ee18 0a90 	vmov	r0, s17
 801260a:	2300      	movs	r3, #0
 801260c:	9308      	str	r3, [sp, #32]
 801260e:	f7ed ff9b 	bl	8000548 <__aeabi_f2d>
 8012612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012616:	ee18 0a10 	vmov	r0, s16
 801261a:	f7ed ff95 	bl	8000548 <__aeabi_f2d>
 801261e:	f994 3000 	ldrsb.w	r3, [r4]
 8012622:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012626:	b923      	cbnz	r3, 8012632 <powf+0x13e>
 8012628:	2200      	movs	r2, #0
 801262a:	2300      	movs	r3, #0
 801262c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012630:	e79a      	b.n	8012568 <powf+0x74>
 8012632:	495e      	ldr	r1, [pc, #376]	; (80127ac <powf+0x2b8>)
 8012634:	2000      	movs	r0, #0
 8012636:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801263a:	2b02      	cmp	r3, #2
 801263c:	d194      	bne.n	8012568 <powf+0x74>
 801263e:	f7fd f9f9 	bl	800fa34 <__errno>
 8012642:	2321      	movs	r3, #33	; 0x21
 8012644:	6003      	str	r3, [r0, #0]
 8012646:	e7bc      	b.n	80125c2 <powf+0xce>
 8012648:	f001 f919 	bl	801387e <finitef>
 801264c:	4605      	mov	r5, r0
 801264e:	2800      	cmp	r0, #0
 8012650:	d173      	bne.n	801273a <powf+0x246>
 8012652:	eeb0 0a68 	vmov.f32	s0, s17
 8012656:	f001 f912 	bl	801387e <finitef>
 801265a:	2800      	cmp	r0, #0
 801265c:	d06d      	beq.n	801273a <powf+0x246>
 801265e:	eeb0 0a48 	vmov.f32	s0, s16
 8012662:	f001 f90c 	bl	801387e <finitef>
 8012666:	2800      	cmp	r0, #0
 8012668:	d067      	beq.n	801273a <powf+0x246>
 801266a:	ee18 0a90 	vmov	r0, s17
 801266e:	f7ed ff6b 	bl	8000548 <__aeabi_f2d>
 8012672:	4680      	mov	r8, r0
 8012674:	ee18 0a10 	vmov	r0, s16
 8012678:	4689      	mov	r9, r1
 801267a:	f7ed ff65 	bl	8000548 <__aeabi_f2d>
 801267e:	eeb4 9a49 	vcmp.f32	s18, s18
 8012682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012686:	f994 4000 	ldrsb.w	r4, [r4]
 801268a:	4b45      	ldr	r3, [pc, #276]	; (80127a0 <powf+0x2ac>)
 801268c:	d713      	bvc.n	80126b6 <powf+0x1c2>
 801268e:	2201      	movs	r2, #1
 8012690:	e9cd 2300 	strd	r2, r3, [sp]
 8012694:	9508      	str	r5, [sp, #32]
 8012696:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801269a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801269e:	2c00      	cmp	r4, #0
 80126a0:	d0c2      	beq.n	8012628 <powf+0x134>
 80126a2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80126a6:	ee17 0a90 	vmov	r0, s15
 80126aa:	f7ed ff4d 	bl	8000548 <__aeabi_f2d>
 80126ae:	2c02      	cmp	r4, #2
 80126b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80126b4:	e7c2      	b.n	801263c <powf+0x148>
 80126b6:	2203      	movs	r2, #3
 80126b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80126bc:	e9cd 2300 	strd	r2, r3, [sp]
 80126c0:	9508      	str	r5, [sp, #32]
 80126c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80126c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80126ca:	ee28 8a27 	vmul.f32	s16, s16, s15
 80126ce:	b9fc      	cbnz	r4, 8012710 <powf+0x21c>
 80126d0:	4b37      	ldr	r3, [pc, #220]	; (80127b0 <powf+0x2bc>)
 80126d2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80126d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80126da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80126e2:	d553      	bpl.n	801278c <powf+0x298>
 80126e4:	eeb0 0a48 	vmov.f32	s0, s16
 80126e8:	f001 f91c 	bl	8013924 <rintf>
 80126ec:	eeb4 0a48 	vcmp.f32	s0, s16
 80126f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f4:	d004      	beq.n	8012700 <powf+0x20c>
 80126f6:	4b2f      	ldr	r3, [pc, #188]	; (80127b4 <powf+0x2c0>)
 80126f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80126fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012700:	f996 3000 	ldrsb.w	r3, [r6]
 8012704:	2b02      	cmp	r3, #2
 8012706:	d141      	bne.n	801278c <powf+0x298>
 8012708:	f7fd f994 	bl	800fa34 <__errno>
 801270c:	2322      	movs	r3, #34	; 0x22
 801270e:	e799      	b.n	8012644 <powf+0x150>
 8012710:	4b29      	ldr	r3, [pc, #164]	; (80127b8 <powf+0x2c4>)
 8012712:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8012716:	2200      	movs	r2, #0
 8012718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801271c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012720:	d5ee      	bpl.n	8012700 <powf+0x20c>
 8012722:	eeb0 0a48 	vmov.f32	s0, s16
 8012726:	f001 f8fd 	bl	8013924 <rintf>
 801272a:	eeb4 0a48 	vcmp.f32	s0, s16
 801272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012732:	d0e5      	beq.n	8012700 <powf+0x20c>
 8012734:	2200      	movs	r2, #0
 8012736:	4b1d      	ldr	r3, [pc, #116]	; (80127ac <powf+0x2b8>)
 8012738:	e7e0      	b.n	80126fc <powf+0x208>
 801273a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012742:	f47f af4a 	bne.w	80125da <powf+0xe6>
 8012746:	eeb0 0a68 	vmov.f32	s0, s17
 801274a:	f001 f898 	bl	801387e <finitef>
 801274e:	2800      	cmp	r0, #0
 8012750:	f43f af43 	beq.w	80125da <powf+0xe6>
 8012754:	eeb0 0a48 	vmov.f32	s0, s16
 8012758:	f001 f891 	bl	801387e <finitef>
 801275c:	2800      	cmp	r0, #0
 801275e:	f43f af3c 	beq.w	80125da <powf+0xe6>
 8012762:	2304      	movs	r3, #4
 8012764:	9300      	str	r3, [sp, #0]
 8012766:	4b0e      	ldr	r3, [pc, #56]	; (80127a0 <powf+0x2ac>)
 8012768:	9301      	str	r3, [sp, #4]
 801276a:	ee18 0a90 	vmov	r0, s17
 801276e:	2300      	movs	r3, #0
 8012770:	9308      	str	r3, [sp, #32]
 8012772:	f7ed fee9 	bl	8000548 <__aeabi_f2d>
 8012776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801277a:	ee18 0a10 	vmov	r0, s16
 801277e:	f7ed fee3 	bl	8000548 <__aeabi_f2d>
 8012782:	2200      	movs	r2, #0
 8012784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012788:	2300      	movs	r3, #0
 801278a:	e7b7      	b.n	80126fc <powf+0x208>
 801278c:	4668      	mov	r0, sp
 801278e:	f001 f865 	bl	801385c <matherr>
 8012792:	2800      	cmp	r0, #0
 8012794:	f47f af15 	bne.w	80125c2 <powf+0xce>
 8012798:	e7b6      	b.n	8012708 <powf+0x214>
 801279a:	bf00      	nop
 801279c:	20001c78 	.word	0x20001c78
 80127a0:	08013dd6 	.word	0x08013dd6
 80127a4:	3ff00000 	.word	0x3ff00000
 80127a8:	00000000 	.word	0x00000000
 80127ac:	fff00000 	.word	0xfff00000
 80127b0:	47efffff 	.word	0x47efffff
 80127b4:	c7efffff 	.word	0xc7efffff
 80127b8:	7ff00000 	.word	0x7ff00000

080127bc <sqrtf>:
 80127bc:	b510      	push	{r4, lr}
 80127be:	ed2d 8b02 	vpush	{d8}
 80127c2:	b08a      	sub	sp, #40	; 0x28
 80127c4:	eeb0 8a40 	vmov.f32	s16, s0
 80127c8:	f000 fd1c 	bl	8013204 <__ieee754_sqrtf>
 80127cc:	4b21      	ldr	r3, [pc, #132]	; (8012854 <sqrtf+0x98>)
 80127ce:	f993 4000 	ldrsb.w	r4, [r3]
 80127d2:	1c63      	adds	r3, r4, #1
 80127d4:	d02c      	beq.n	8012830 <sqrtf+0x74>
 80127d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80127da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127de:	d627      	bvs.n	8012830 <sqrtf+0x74>
 80127e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80127e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e8:	d522      	bpl.n	8012830 <sqrtf+0x74>
 80127ea:	2301      	movs	r3, #1
 80127ec:	9300      	str	r3, [sp, #0]
 80127ee:	4b1a      	ldr	r3, [pc, #104]	; (8012858 <sqrtf+0x9c>)
 80127f0:	9301      	str	r3, [sp, #4]
 80127f2:	ee18 0a10 	vmov	r0, s16
 80127f6:	2300      	movs	r3, #0
 80127f8:	9308      	str	r3, [sp, #32]
 80127fa:	f7ed fea5 	bl	8000548 <__aeabi_f2d>
 80127fe:	2200      	movs	r2, #0
 8012800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012808:	2300      	movs	r3, #0
 801280a:	b9ac      	cbnz	r4, 8012838 <sqrtf+0x7c>
 801280c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012810:	4668      	mov	r0, sp
 8012812:	f001 f823 	bl	801385c <matherr>
 8012816:	b1b8      	cbz	r0, 8012848 <sqrtf+0x8c>
 8012818:	9b08      	ldr	r3, [sp, #32]
 801281a:	b11b      	cbz	r3, 8012824 <sqrtf+0x68>
 801281c:	f7fd f90a 	bl	800fa34 <__errno>
 8012820:	9b08      	ldr	r3, [sp, #32]
 8012822:	6003      	str	r3, [r0, #0]
 8012824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012828:	f7ee f9be 	bl	8000ba8 <__aeabi_d2f>
 801282c:	ee00 0a10 	vmov	s0, r0
 8012830:	b00a      	add	sp, #40	; 0x28
 8012832:	ecbd 8b02 	vpop	{d8}
 8012836:	bd10      	pop	{r4, pc}
 8012838:	4610      	mov	r0, r2
 801283a:	4619      	mov	r1, r3
 801283c:	f7ee f806 	bl	800084c <__aeabi_ddiv>
 8012840:	2c02      	cmp	r4, #2
 8012842:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012846:	d1e3      	bne.n	8012810 <sqrtf+0x54>
 8012848:	f7fd f8f4 	bl	800fa34 <__errno>
 801284c:	2321      	movs	r3, #33	; 0x21
 801284e:	6003      	str	r3, [r0, #0]
 8012850:	e7e2      	b.n	8012818 <sqrtf+0x5c>
 8012852:	bf00      	nop
 8012854:	20001c78 	.word	0x20001c78
 8012858:	08013ddb 	.word	0x08013ddb

0801285c <__ieee754_asinf>:
 801285c:	b538      	push	{r3, r4, r5, lr}
 801285e:	ee10 5a10 	vmov	r5, s0
 8012862:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012866:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801286a:	ed2d 8b04 	vpush	{d8-d9}
 801286e:	d10c      	bne.n	801288a <__ieee754_asinf+0x2e>
 8012870:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80129ec <__ieee754_asinf+0x190>
 8012874:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80129f0 <__ieee754_asinf+0x194>
 8012878:	ee60 7a27 	vmul.f32	s15, s0, s15
 801287c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012880:	eeb0 0a67 	vmov.f32	s0, s15
 8012884:	ecbd 8b04 	vpop	{d8-d9}
 8012888:	bd38      	pop	{r3, r4, r5, pc}
 801288a:	dd04      	ble.n	8012896 <__ieee754_asinf+0x3a>
 801288c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012890:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012894:	e7f6      	b.n	8012884 <__ieee754_asinf+0x28>
 8012896:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801289a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801289e:	da0b      	bge.n	80128b8 <__ieee754_asinf+0x5c>
 80128a0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80128a4:	da52      	bge.n	801294c <__ieee754_asinf+0xf0>
 80128a6:	eddf 7a53 	vldr	s15, [pc, #332]	; 80129f4 <__ieee754_asinf+0x198>
 80128aa:	ee70 7a27 	vadd.f32	s15, s0, s15
 80128ae:	eef4 7ae8 	vcmpe.f32	s15, s17
 80128b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b6:	dce5      	bgt.n	8012884 <__ieee754_asinf+0x28>
 80128b8:	f000 ffda 	bl	8013870 <fabsf>
 80128bc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80128c0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80128c4:	ee20 8a08 	vmul.f32	s16, s0, s16
 80128c8:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80129f8 <__ieee754_asinf+0x19c>
 80128cc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80129fc <__ieee754_asinf+0x1a0>
 80128d0:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8012a00 <__ieee754_asinf+0x1a4>
 80128d4:	eea8 7a27 	vfma.f32	s14, s16, s15
 80128d8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012a04 <__ieee754_asinf+0x1a8>
 80128dc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80128e0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012a08 <__ieee754_asinf+0x1ac>
 80128e4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80128e8:	eddf 7a48 	vldr	s15, [pc, #288]	; 8012a0c <__ieee754_asinf+0x1b0>
 80128ec:	eee7 7a08 	vfma.f32	s15, s14, s16
 80128f0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8012a10 <__ieee754_asinf+0x1b4>
 80128f4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80128f8:	eddf 7a46 	vldr	s15, [pc, #280]	; 8012a14 <__ieee754_asinf+0x1b8>
 80128fc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012900:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8012a18 <__ieee754_asinf+0x1bc>
 8012904:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012908:	eddf 7a44 	vldr	s15, [pc, #272]	; 8012a1c <__ieee754_asinf+0x1c0>
 801290c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012910:	eeb0 0a48 	vmov.f32	s0, s16
 8012914:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012918:	f000 fc74 	bl	8013204 <__ieee754_sqrtf>
 801291c:	4b40      	ldr	r3, [pc, #256]	; (8012a20 <__ieee754_asinf+0x1c4>)
 801291e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012922:	429c      	cmp	r4, r3
 8012924:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012928:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801292c:	dd3d      	ble.n	80129aa <__ieee754_asinf+0x14e>
 801292e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012932:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8012a24 <__ieee754_asinf+0x1c8>
 8012936:	eee0 7a07 	vfma.f32	s15, s0, s14
 801293a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80129f0 <__ieee754_asinf+0x194>
 801293e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012942:	2d00      	cmp	r5, #0
 8012944:	bfd8      	it	le
 8012946:	eeb1 0a40 	vnegle.f32	s0, s0
 801294a:	e79b      	b.n	8012884 <__ieee754_asinf+0x28>
 801294c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012950:	eddf 6a29 	vldr	s13, [pc, #164]	; 80129f8 <__ieee754_asinf+0x19c>
 8012954:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80129fc <__ieee754_asinf+0x1a0>
 8012958:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8012a10 <__ieee754_asinf+0x1b4>
 801295c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012960:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012a04 <__ieee754_asinf+0x1a8>
 8012964:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012968:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8012a08 <__ieee754_asinf+0x1ac>
 801296c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012970:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012a0c <__ieee754_asinf+0x1b0>
 8012974:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012978:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8012a00 <__ieee754_asinf+0x1a4>
 801297c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012980:	eddf 6a24 	vldr	s13, [pc, #144]	; 8012a14 <__ieee754_asinf+0x1b8>
 8012984:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012988:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8012a18 <__ieee754_asinf+0x1bc>
 801298c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012990:	eddf 6a22 	vldr	s13, [pc, #136]	; 8012a1c <__ieee754_asinf+0x1c0>
 8012994:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012998:	ee27 7a27 	vmul.f32	s14, s14, s15
 801299c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80129a0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80129a4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80129a8:	e76c      	b.n	8012884 <__ieee754_asinf+0x28>
 80129aa:	ee10 3a10 	vmov	r3, s0
 80129ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80129b2:	f023 030f 	bic.w	r3, r3, #15
 80129b6:	ee07 3a90 	vmov	s15, r3
 80129ba:	eef1 6a67 	vneg.f32	s13, s15
 80129be:	eea6 8aa7 	vfma.f32	s16, s13, s15
 80129c2:	ee70 5a00 	vadd.f32	s11, s0, s0
 80129c6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80129ca:	eddf 7a08 	vldr	s15, [pc, #32]	; 80129ec <__ieee754_asinf+0x190>
 80129ce:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80129d2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8012a28 <__ieee754_asinf+0x1cc>
 80129d6:	eee5 7a47 	vfms.f32	s15, s10, s14
 80129da:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80129de:	eeb0 6a40 	vmov.f32	s12, s0
 80129e2:	eea6 6a87 	vfma.f32	s12, s13, s14
 80129e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80129ea:	e7a8      	b.n	801293e <__ieee754_asinf+0xe2>
 80129ec:	b33bbd2e 	.word	0xb33bbd2e
 80129f0:	3fc90fdb 	.word	0x3fc90fdb
 80129f4:	7149f2ca 	.word	0x7149f2ca
 80129f8:	3811ef08 	.word	0x3811ef08
 80129fc:	3a4f7f04 	.word	0x3a4f7f04
 8012a00:	3e2aaaab 	.word	0x3e2aaaab
 8012a04:	bd241146 	.word	0xbd241146
 8012a08:	3e4e0aa8 	.word	0x3e4e0aa8
 8012a0c:	bea6b090 	.word	0xbea6b090
 8012a10:	3d9dc62e 	.word	0x3d9dc62e
 8012a14:	bf303361 	.word	0xbf303361
 8012a18:	4001572d 	.word	0x4001572d
 8012a1c:	c019d139 	.word	0xc019d139
 8012a20:	3f799999 	.word	0x3f799999
 8012a24:	333bbd2e 	.word	0x333bbd2e
 8012a28:	3f490fdb 	.word	0x3f490fdb

08012a2c <__ieee754_powf>:
 8012a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a30:	ee10 5a90 	vmov	r5, s1
 8012a34:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8012a38:	ed2d 8b02 	vpush	{d8}
 8012a3c:	eeb0 8a40 	vmov.f32	s16, s0
 8012a40:	eef0 8a60 	vmov.f32	s17, s1
 8012a44:	f000 8293 	beq.w	8012f6e <__ieee754_powf+0x542>
 8012a48:	ee10 8a10 	vmov	r8, s0
 8012a4c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8012a50:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012a54:	dc06      	bgt.n	8012a64 <__ieee754_powf+0x38>
 8012a56:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8012a5a:	dd0a      	ble.n	8012a72 <__ieee754_powf+0x46>
 8012a5c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012a60:	f000 8285 	beq.w	8012f6e <__ieee754_powf+0x542>
 8012a64:	ecbd 8b02 	vpop	{d8}
 8012a68:	48d9      	ldr	r0, [pc, #868]	; (8012dd0 <__ieee754_powf+0x3a4>)
 8012a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a6e:	f000 bf53 	b.w	8013918 <nanf>
 8012a72:	f1b8 0f00 	cmp.w	r8, #0
 8012a76:	da1d      	bge.n	8012ab4 <__ieee754_powf+0x88>
 8012a78:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8012a7c:	da2c      	bge.n	8012ad8 <__ieee754_powf+0xac>
 8012a7e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8012a82:	db30      	blt.n	8012ae6 <__ieee754_powf+0xba>
 8012a84:	15fb      	asrs	r3, r7, #23
 8012a86:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012a8a:	fa47 f603 	asr.w	r6, r7, r3
 8012a8e:	fa06 f303 	lsl.w	r3, r6, r3
 8012a92:	42bb      	cmp	r3, r7
 8012a94:	d127      	bne.n	8012ae6 <__ieee754_powf+0xba>
 8012a96:	f006 0601 	and.w	r6, r6, #1
 8012a9a:	f1c6 0602 	rsb	r6, r6, #2
 8012a9e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8012aa2:	d122      	bne.n	8012aea <__ieee754_powf+0xbe>
 8012aa4:	2d00      	cmp	r5, #0
 8012aa6:	f280 8268 	bge.w	8012f7a <__ieee754_powf+0x54e>
 8012aaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012aae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012ab2:	e00d      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012ab4:	2600      	movs	r6, #0
 8012ab6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8012aba:	d1f0      	bne.n	8012a9e <__ieee754_powf+0x72>
 8012abc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012ac0:	f000 8255 	beq.w	8012f6e <__ieee754_powf+0x542>
 8012ac4:	dd0a      	ble.n	8012adc <__ieee754_powf+0xb0>
 8012ac6:	2d00      	cmp	r5, #0
 8012ac8:	f280 8254 	bge.w	8012f74 <__ieee754_powf+0x548>
 8012acc:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8012dd4 <__ieee754_powf+0x3a8>
 8012ad0:	ecbd 8b02 	vpop	{d8}
 8012ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad8:	2602      	movs	r6, #2
 8012ada:	e7ec      	b.n	8012ab6 <__ieee754_powf+0x8a>
 8012adc:	2d00      	cmp	r5, #0
 8012ade:	daf5      	bge.n	8012acc <__ieee754_powf+0xa0>
 8012ae0:	eeb1 0a68 	vneg.f32	s0, s17
 8012ae4:	e7f4      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012ae6:	2600      	movs	r6, #0
 8012ae8:	e7d9      	b.n	8012a9e <__ieee754_powf+0x72>
 8012aea:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8012aee:	d102      	bne.n	8012af6 <__ieee754_powf+0xca>
 8012af0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012af4:	e7ec      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012af6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8012afa:	eeb0 0a48 	vmov.f32	s0, s16
 8012afe:	d108      	bne.n	8012b12 <__ieee754_powf+0xe6>
 8012b00:	f1b8 0f00 	cmp.w	r8, #0
 8012b04:	db05      	blt.n	8012b12 <__ieee754_powf+0xe6>
 8012b06:	ecbd 8b02 	vpop	{d8}
 8012b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b0e:	f000 bb79 	b.w	8013204 <__ieee754_sqrtf>
 8012b12:	f000 fead 	bl	8013870 <fabsf>
 8012b16:	b124      	cbz	r4, 8012b22 <__ieee754_powf+0xf6>
 8012b18:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8012b1c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012b20:	d117      	bne.n	8012b52 <__ieee754_powf+0x126>
 8012b22:	2d00      	cmp	r5, #0
 8012b24:	bfbc      	itt	lt
 8012b26:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012b2a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012b2e:	f1b8 0f00 	cmp.w	r8, #0
 8012b32:	dacd      	bge.n	8012ad0 <__ieee754_powf+0xa4>
 8012b34:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8012b38:	ea54 0306 	orrs.w	r3, r4, r6
 8012b3c:	d104      	bne.n	8012b48 <__ieee754_powf+0x11c>
 8012b3e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012b42:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012b46:	e7c3      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012b48:	2e01      	cmp	r6, #1
 8012b4a:	d1c1      	bne.n	8012ad0 <__ieee754_powf+0xa4>
 8012b4c:	eeb1 0a40 	vneg.f32	s0, s0
 8012b50:	e7be      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012b52:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8012b56:	3801      	subs	r0, #1
 8012b58:	ea56 0300 	orrs.w	r3, r6, r0
 8012b5c:	d104      	bne.n	8012b68 <__ieee754_powf+0x13c>
 8012b5e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012b62:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012b66:	e7b3      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012b68:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8012b6c:	dd6d      	ble.n	8012c4a <__ieee754_powf+0x21e>
 8012b6e:	4b9a      	ldr	r3, [pc, #616]	; (8012dd8 <__ieee754_powf+0x3ac>)
 8012b70:	429c      	cmp	r4, r3
 8012b72:	dc06      	bgt.n	8012b82 <__ieee754_powf+0x156>
 8012b74:	2d00      	cmp	r5, #0
 8012b76:	daa9      	bge.n	8012acc <__ieee754_powf+0xa0>
 8012b78:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8012ddc <__ieee754_powf+0x3b0>
 8012b7c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012b80:	e7a6      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012b82:	4b97      	ldr	r3, [pc, #604]	; (8012de0 <__ieee754_powf+0x3b4>)
 8012b84:	429c      	cmp	r4, r3
 8012b86:	dd02      	ble.n	8012b8e <__ieee754_powf+0x162>
 8012b88:	2d00      	cmp	r5, #0
 8012b8a:	dcf5      	bgt.n	8012b78 <__ieee754_powf+0x14c>
 8012b8c:	e79e      	b.n	8012acc <__ieee754_powf+0xa0>
 8012b8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012b92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012b96:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8012de4 <__ieee754_powf+0x3b8>
 8012b9a:	eef1 6a40 	vneg.f32	s13, s0
 8012b9e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8012ba2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012ba6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012baa:	eee7 7a40 	vfms.f32	s15, s14, s0
 8012bae:	ee60 0a00 	vmul.f32	s1, s0, s0
 8012bb2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8012de8 <__ieee754_powf+0x3bc>
 8012bb6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8012bba:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8012dec <__ieee754_powf+0x3c0>
 8012bbe:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8012bc2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012bc6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8012df0 <__ieee754_powf+0x3c4>
 8012bca:	eeb0 6a67 	vmov.f32	s12, s15
 8012bce:	eea0 6a07 	vfma.f32	s12, s0, s14
 8012bd2:	ee16 3a10 	vmov	r3, s12
 8012bd6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012bda:	f023 030f 	bic.w	r3, r3, #15
 8012bde:	ee00 3a90 	vmov	s1, r3
 8012be2:	eee6 0a87 	vfma.f32	s1, s13, s14
 8012be6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012bea:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8012bee:	f025 050f 	bic.w	r5, r5, #15
 8012bf2:	ee07 5a10 	vmov	s14, r5
 8012bf6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8012bfa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8012bfe:	ee07 3a90 	vmov	s15, r3
 8012c02:	eee7 0a27 	vfma.f32	s1, s14, s15
 8012c06:	3e01      	subs	r6, #1
 8012c08:	ea56 0200 	orrs.w	r2, r6, r0
 8012c0c:	ee07 5a10 	vmov	s14, r5
 8012c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c14:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012c18:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8012c1c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012c20:	ee17 4a10 	vmov	r4, s14
 8012c24:	bf08      	it	eq
 8012c26:	eeb0 8a40 	vmoveq.f32	s16, s0
 8012c2a:	2c00      	cmp	r4, #0
 8012c2c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012c30:	f340 8184 	ble.w	8012f3c <__ieee754_powf+0x510>
 8012c34:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8012c38:	f340 80fc 	ble.w	8012e34 <__ieee754_powf+0x408>
 8012c3c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8012ddc <__ieee754_powf+0x3b0>
 8012c40:	ee28 0a27 	vmul.f32	s0, s16, s15
 8012c44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c48:	e742      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012c4a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8012c4e:	bfbf      	itttt	lt
 8012c50:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8012df4 <__ieee754_powf+0x3c8>
 8012c54:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012c58:	f06f 0217 	mvnlt.w	r2, #23
 8012c5c:	ee17 4a90 	vmovlt	r4, s15
 8012c60:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8012c64:	bfa8      	it	ge
 8012c66:	2200      	movge	r2, #0
 8012c68:	3b7f      	subs	r3, #127	; 0x7f
 8012c6a:	4413      	add	r3, r2
 8012c6c:	4a62      	ldr	r2, [pc, #392]	; (8012df8 <__ieee754_powf+0x3cc>)
 8012c6e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8012c72:	4294      	cmp	r4, r2
 8012c74:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8012c78:	dd06      	ble.n	8012c88 <__ieee754_powf+0x25c>
 8012c7a:	4a60      	ldr	r2, [pc, #384]	; (8012dfc <__ieee754_powf+0x3d0>)
 8012c7c:	4294      	cmp	r4, r2
 8012c7e:	f340 80a5 	ble.w	8012dcc <__ieee754_powf+0x3a0>
 8012c82:	3301      	adds	r3, #1
 8012c84:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012c88:	2400      	movs	r4, #0
 8012c8a:	4a5d      	ldr	r2, [pc, #372]	; (8012e00 <__ieee754_powf+0x3d4>)
 8012c8c:	00a7      	lsls	r7, r4, #2
 8012c8e:	443a      	add	r2, r7
 8012c90:	ee07 1a90 	vmov	s15, r1
 8012c94:	ed92 7a00 	vldr	s14, [r2]
 8012c98:	4a5a      	ldr	r2, [pc, #360]	; (8012e04 <__ieee754_powf+0x3d8>)
 8012c9a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8012c9e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8012ca2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8012ca6:	1049      	asrs	r1, r1, #1
 8012ca8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8012cac:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8012cb0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8012cb4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8012cb8:	ee06 1a10 	vmov	s12, r1
 8012cbc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8012cc0:	ee14 ca90 	vmov	ip, s9
 8012cc4:	ea02 0c0c 	and.w	ip, r2, ip
 8012cc8:	ee05 ca10 	vmov	s10, ip
 8012ccc:	eeb1 4a45 	vneg.f32	s8, s10
 8012cd0:	eee4 5a06 	vfma.f32	s11, s8, s12
 8012cd4:	ee36 6a47 	vsub.f32	s12, s12, s14
 8012cd8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8012e08 <__ieee754_powf+0x3dc>
 8012cdc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8012ce0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8012ce4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8012ce8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8012cec:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8012cf0:	eddf 5a46 	vldr	s11, [pc, #280]	; 8012e0c <__ieee754_powf+0x3e0>
 8012cf4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8012cf8:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012e10 <__ieee754_powf+0x3e4>
 8012cfc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012d00:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012de4 <__ieee754_powf+0x3b8>
 8012d04:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012d08:	eddf 5a42 	vldr	s11, [pc, #264]	; 8012e14 <__ieee754_powf+0x3e8>
 8012d0c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012d10:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8012e18 <__ieee754_powf+0x3ec>
 8012d14:	ee75 6a24 	vadd.f32	s13, s10, s9
 8012d18:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012d1c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012d20:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8012d24:	eef0 7a65 	vmov.f32	s15, s11
 8012d28:	eee3 6a87 	vfma.f32	s13, s7, s14
 8012d2c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8012d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d34:	ee17 1a90 	vmov	r1, s15
 8012d38:	4011      	ands	r1, r2
 8012d3a:	ee07 1a90 	vmov	s15, r1
 8012d3e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8012d42:	eddf 5a36 	vldr	s11, [pc, #216]	; 8012e1c <__ieee754_powf+0x3f0>
 8012d46:	eea4 7a05 	vfma.f32	s14, s8, s10
 8012d4a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012d4e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8012d52:	eea7 7a86 	vfma.f32	s14, s15, s12
 8012d56:	eeb0 6a47 	vmov.f32	s12, s14
 8012d5a:	eea5 6a27 	vfma.f32	s12, s10, s15
 8012d5e:	ee16 1a10 	vmov	r1, s12
 8012d62:	4011      	ands	r1, r2
 8012d64:	ee06 1a90 	vmov	s13, r1
 8012d68:	eee4 6a27 	vfma.f32	s13, s8, s15
 8012d6c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8012e20 <__ieee754_powf+0x3f4>
 8012d70:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012d74:	ee06 1a10 	vmov	s12, r1
 8012d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d7c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8012e24 <__ieee754_powf+0x3f8>
 8012d80:	4929      	ldr	r1, [pc, #164]	; (8012e28 <__ieee754_powf+0x3fc>)
 8012d82:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012d86:	4439      	add	r1, r7
 8012d88:	edd1 7a00 	vldr	s15, [r1]
 8012d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d90:	ee07 3a90 	vmov	s15, r3
 8012d94:	eef0 0a47 	vmov.f32	s1, s14
 8012d98:	4b24      	ldr	r3, [pc, #144]	; (8012e2c <__ieee754_powf+0x400>)
 8012d9a:	eee6 0a25 	vfma.f32	s1, s12, s11
 8012d9e:	443b      	add	r3, r7
 8012da0:	ed93 5a00 	vldr	s10, [r3]
 8012da4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012da8:	ee70 0a85 	vadd.f32	s1, s1, s10
 8012dac:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8012db0:	ee17 3a90 	vmov	r3, s15
 8012db4:	4013      	ands	r3, r2
 8012db6:	ee07 3a90 	vmov	s15, r3
 8012dba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012dbe:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8012dc2:	eee6 7a65 	vfms.f32	s15, s12, s11
 8012dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012dca:	e70e      	b.n	8012bea <__ieee754_powf+0x1be>
 8012dcc:	2401      	movs	r4, #1
 8012dce:	e75c      	b.n	8012c8a <__ieee754_powf+0x25e>
 8012dd0:	08013cb9 	.word	0x08013cb9
 8012dd4:	00000000 	.word	0x00000000
 8012dd8:	3f7ffff7 	.word	0x3f7ffff7
 8012ddc:	7149f2ca 	.word	0x7149f2ca
 8012de0:	3f800007 	.word	0x3f800007
 8012de4:	3eaaaaab 	.word	0x3eaaaaab
 8012de8:	36eca570 	.word	0x36eca570
 8012dec:	3fb8aa3b 	.word	0x3fb8aa3b
 8012df0:	3fb8aa00 	.word	0x3fb8aa00
 8012df4:	4b800000 	.word	0x4b800000
 8012df8:	001cc471 	.word	0x001cc471
 8012dfc:	005db3d6 	.word	0x005db3d6
 8012e00:	08013de4 	.word	0x08013de4
 8012e04:	fffff000 	.word	0xfffff000
 8012e08:	3e6c3255 	.word	0x3e6c3255
 8012e0c:	3e53f142 	.word	0x3e53f142
 8012e10:	3e8ba305 	.word	0x3e8ba305
 8012e14:	3edb6db7 	.word	0x3edb6db7
 8012e18:	3f19999a 	.word	0x3f19999a
 8012e1c:	3f763800 	.word	0x3f763800
 8012e20:	3f76384f 	.word	0x3f76384f
 8012e24:	369dc3a0 	.word	0x369dc3a0
 8012e28:	08013df4 	.word	0x08013df4
 8012e2c:	08013dec 	.word	0x08013dec
 8012e30:	3338aa3c 	.word	0x3338aa3c
 8012e34:	f040 8092 	bne.w	8012f5c <__ieee754_powf+0x530>
 8012e38:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8012e30 <__ieee754_powf+0x404>
 8012e3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e40:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012e44:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e4c:	f73f aef6 	bgt.w	8012c3c <__ieee754_powf+0x210>
 8012e50:	15db      	asrs	r3, r3, #23
 8012e52:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8012e56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012e5a:	4103      	asrs	r3, r0
 8012e5c:	4423      	add	r3, r4
 8012e5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012e62:	4947      	ldr	r1, [pc, #284]	; (8012f80 <__ieee754_powf+0x554>)
 8012e64:	3a7f      	subs	r2, #127	; 0x7f
 8012e66:	4111      	asrs	r1, r2
 8012e68:	ea23 0101 	bic.w	r1, r3, r1
 8012e6c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012e70:	ee07 1a10 	vmov	s14, r1
 8012e74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012e78:	f1c2 0217 	rsb	r2, r2, #23
 8012e7c:	4110      	asrs	r0, r2
 8012e7e:	2c00      	cmp	r4, #0
 8012e80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e84:	bfb8      	it	lt
 8012e86:	4240      	neglt	r0, r0
 8012e88:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012e8c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012f84 <__ieee754_powf+0x558>
 8012e90:	ee17 3a10 	vmov	r3, s14
 8012e94:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012e98:	f023 030f 	bic.w	r3, r3, #15
 8012e9c:	ee07 3a10 	vmov	s14, r3
 8012ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012ea4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012ea8:	eddf 7a37 	vldr	s15, [pc, #220]	; 8012f88 <__ieee754_powf+0x55c>
 8012eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012eb0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8012eb4:	eddf 6a35 	vldr	s13, [pc, #212]	; 8012f8c <__ieee754_powf+0x560>
 8012eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8012ebc:	eea7 0a26 	vfma.f32	s0, s14, s13
 8012ec0:	eeb0 6a40 	vmov.f32	s12, s0
 8012ec4:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012ec8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012ecc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012ed0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8012f90 <__ieee754_powf+0x564>
 8012ed4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8012f94 <__ieee754_powf+0x568>
 8012ed8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8012edc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8012f98 <__ieee754_powf+0x56c>
 8012ee0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012ee4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8012f9c <__ieee754_powf+0x570>
 8012ee8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012eec:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8012fa0 <__ieee754_powf+0x574>
 8012ef0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012ef4:	eeb0 6a40 	vmov.f32	s12, s0
 8012ef8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8012efc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012f00:	eeb0 7a46 	vmov.f32	s14, s12
 8012f04:	ee77 6a66 	vsub.f32	s13, s14, s13
 8012f08:	ee20 6a06 	vmul.f32	s12, s0, s12
 8012f0c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8012f10:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8012f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012f18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012f1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012f20:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012f24:	ee10 3a10 	vmov	r3, s0
 8012f28:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012f2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012f30:	da1a      	bge.n	8012f68 <__ieee754_powf+0x53c>
 8012f32:	f000 fd51 	bl	80139d8 <scalbnf>
 8012f36:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012f3a:	e5c9      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012f3c:	4a19      	ldr	r2, [pc, #100]	; (8012fa4 <__ieee754_powf+0x578>)
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	dd02      	ble.n	8012f48 <__ieee754_powf+0x51c>
 8012f42:	eddf 7a19 	vldr	s15, [pc, #100]	; 8012fa8 <__ieee754_powf+0x57c>
 8012f46:	e67b      	b.n	8012c40 <__ieee754_powf+0x214>
 8012f48:	d108      	bne.n	8012f5c <__ieee754_powf+0x530>
 8012f4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012f4e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f56:	f6ff af7b 	blt.w	8012e50 <__ieee754_powf+0x424>
 8012f5a:	e7f2      	b.n	8012f42 <__ieee754_powf+0x516>
 8012f5c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8012f60:	f73f af76 	bgt.w	8012e50 <__ieee754_powf+0x424>
 8012f64:	2000      	movs	r0, #0
 8012f66:	e78f      	b.n	8012e88 <__ieee754_powf+0x45c>
 8012f68:	ee00 3a10 	vmov	s0, r3
 8012f6c:	e7e3      	b.n	8012f36 <__ieee754_powf+0x50a>
 8012f6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012f72:	e5ad      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012f74:	eeb0 0a68 	vmov.f32	s0, s17
 8012f78:	e5aa      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012f7a:	eeb0 0a48 	vmov.f32	s0, s16
 8012f7e:	e5a7      	b.n	8012ad0 <__ieee754_powf+0xa4>
 8012f80:	007fffff 	.word	0x007fffff
 8012f84:	3f317218 	.word	0x3f317218
 8012f88:	35bfbe8c 	.word	0x35bfbe8c
 8012f8c:	3f317200 	.word	0x3f317200
 8012f90:	3331bb4c 	.word	0x3331bb4c
 8012f94:	b5ddea0e 	.word	0xb5ddea0e
 8012f98:	388ab355 	.word	0x388ab355
 8012f9c:	bb360b61 	.word	0xbb360b61
 8012fa0:	3e2aaaab 	.word	0x3e2aaaab
 8012fa4:	43160000 	.word	0x43160000
 8012fa8:	0da24260 	.word	0x0da24260

08012fac <__ieee754_rem_pio2f>:
 8012fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fae:	ee10 6a10 	vmov	r6, s0
 8012fb2:	4b86      	ldr	r3, [pc, #536]	; (80131cc <__ieee754_rem_pio2f+0x220>)
 8012fb4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8012fb8:	429c      	cmp	r4, r3
 8012fba:	b087      	sub	sp, #28
 8012fbc:	4605      	mov	r5, r0
 8012fbe:	dc05      	bgt.n	8012fcc <__ieee754_rem_pio2f+0x20>
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	ed85 0a00 	vstr	s0, [r5]
 8012fc6:	6043      	str	r3, [r0, #4]
 8012fc8:	2000      	movs	r0, #0
 8012fca:	e020      	b.n	801300e <__ieee754_rem_pio2f+0x62>
 8012fcc:	4b80      	ldr	r3, [pc, #512]	; (80131d0 <__ieee754_rem_pio2f+0x224>)
 8012fce:	429c      	cmp	r4, r3
 8012fd0:	dc38      	bgt.n	8013044 <__ieee754_rem_pio2f+0x98>
 8012fd2:	2e00      	cmp	r6, #0
 8012fd4:	f024 040f 	bic.w	r4, r4, #15
 8012fd8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80131d4 <__ieee754_rem_pio2f+0x228>
 8012fdc:	4b7e      	ldr	r3, [pc, #504]	; (80131d8 <__ieee754_rem_pio2f+0x22c>)
 8012fde:	dd18      	ble.n	8013012 <__ieee754_rem_pio2f+0x66>
 8012fe0:	429c      	cmp	r4, r3
 8012fe2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8012fe6:	bf09      	itett	eq
 8012fe8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80131dc <__ieee754_rem_pio2f+0x230>
 8012fec:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80131e0 <__ieee754_rem_pio2f+0x234>
 8012ff0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8012ff4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80131e4 <__ieee754_rem_pio2f+0x238>
 8012ff8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8012ffc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013000:	edc0 6a00 	vstr	s13, [r0]
 8013004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013008:	edc0 7a01 	vstr	s15, [r0, #4]
 801300c:	2001      	movs	r0, #1
 801300e:	b007      	add	sp, #28
 8013010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013012:	429c      	cmp	r4, r3
 8013014:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013018:	bf09      	itett	eq
 801301a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80131dc <__ieee754_rem_pio2f+0x230>
 801301e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80131e0 <__ieee754_rem_pio2f+0x234>
 8013022:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013026:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80131e4 <__ieee754_rem_pio2f+0x238>
 801302a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801302e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013032:	edc0 6a00 	vstr	s13, [r0]
 8013036:	ee77 7a87 	vadd.f32	s15, s15, s14
 801303a:	edc0 7a01 	vstr	s15, [r0, #4]
 801303e:	f04f 30ff 	mov.w	r0, #4294967295
 8013042:	e7e4      	b.n	801300e <__ieee754_rem_pio2f+0x62>
 8013044:	4b68      	ldr	r3, [pc, #416]	; (80131e8 <__ieee754_rem_pio2f+0x23c>)
 8013046:	429c      	cmp	r4, r3
 8013048:	dc71      	bgt.n	801312e <__ieee754_rem_pio2f+0x182>
 801304a:	f000 fc11 	bl	8013870 <fabsf>
 801304e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80131ec <__ieee754_rem_pio2f+0x240>
 8013052:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013056:	eee0 7a07 	vfma.f32	s15, s0, s14
 801305a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801305e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8013062:	ee17 0a90 	vmov	r0, s15
 8013066:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80131d4 <__ieee754_rem_pio2f+0x228>
 801306a:	eeb1 7a46 	vneg.f32	s14, s12
 801306e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013072:	281f      	cmp	r0, #31
 8013074:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80131e0 <__ieee754_rem_pio2f+0x234>
 8013078:	ee66 7a27 	vmul.f32	s15, s12, s15
 801307c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013080:	ee16 3a90 	vmov	r3, s13
 8013084:	dc1c      	bgt.n	80130c0 <__ieee754_rem_pio2f+0x114>
 8013086:	1e47      	subs	r7, r0, #1
 8013088:	4959      	ldr	r1, [pc, #356]	; (80131f0 <__ieee754_rem_pio2f+0x244>)
 801308a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801308e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8013092:	428a      	cmp	r2, r1
 8013094:	d014      	beq.n	80130c0 <__ieee754_rem_pio2f+0x114>
 8013096:	602b      	str	r3, [r5, #0]
 8013098:	ed95 7a00 	vldr	s14, [r5]
 801309c:	ee30 0a47 	vsub.f32	s0, s0, s14
 80130a0:	2e00      	cmp	r6, #0
 80130a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80130a6:	ed85 0a01 	vstr	s0, [r5, #4]
 80130aa:	dab0      	bge.n	801300e <__ieee754_rem_pio2f+0x62>
 80130ac:	eeb1 7a47 	vneg.f32	s14, s14
 80130b0:	eeb1 0a40 	vneg.f32	s0, s0
 80130b4:	ed85 7a00 	vstr	s14, [r5]
 80130b8:	ed85 0a01 	vstr	s0, [r5, #4]
 80130bc:	4240      	negs	r0, r0
 80130be:	e7a6      	b.n	801300e <__ieee754_rem_pio2f+0x62>
 80130c0:	15e4      	asrs	r4, r4, #23
 80130c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80130c6:	1aa2      	subs	r2, r4, r2
 80130c8:	2a08      	cmp	r2, #8
 80130ca:	dde4      	ble.n	8013096 <__ieee754_rem_pio2f+0xea>
 80130cc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80131dc <__ieee754_rem_pio2f+0x230>
 80130d0:	eef0 6a40 	vmov.f32	s13, s0
 80130d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80130d8:	ee30 0a66 	vsub.f32	s0, s0, s13
 80130dc:	eea7 0a27 	vfma.f32	s0, s14, s15
 80130e0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80131e4 <__ieee754_rem_pio2f+0x238>
 80130e4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80130e8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80130ec:	eef0 7a40 	vmov.f32	s15, s0
 80130f0:	ee15 3a90 	vmov	r3, s11
 80130f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80130f8:	1aa4      	subs	r4, r4, r2
 80130fa:	2c19      	cmp	r4, #25
 80130fc:	dc04      	bgt.n	8013108 <__ieee754_rem_pio2f+0x15c>
 80130fe:	edc5 5a00 	vstr	s11, [r5]
 8013102:	eeb0 0a66 	vmov.f32	s0, s13
 8013106:	e7c7      	b.n	8013098 <__ieee754_rem_pio2f+0xec>
 8013108:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80131f4 <__ieee754_rem_pio2f+0x248>
 801310c:	eeb0 0a66 	vmov.f32	s0, s13
 8013110:	eea7 0a25 	vfma.f32	s0, s14, s11
 8013114:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013118:	eee7 7a25 	vfma.f32	s15, s14, s11
 801311c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80131f8 <__ieee754_rem_pio2f+0x24c>
 8013120:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8013124:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013128:	ed85 7a00 	vstr	s14, [r5]
 801312c:	e7b4      	b.n	8013098 <__ieee754_rem_pio2f+0xec>
 801312e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013132:	db06      	blt.n	8013142 <__ieee754_rem_pio2f+0x196>
 8013134:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013138:	edc0 7a01 	vstr	s15, [r0, #4]
 801313c:	edc0 7a00 	vstr	s15, [r0]
 8013140:	e742      	b.n	8012fc8 <__ieee754_rem_pio2f+0x1c>
 8013142:	15e2      	asrs	r2, r4, #23
 8013144:	3a86      	subs	r2, #134	; 0x86
 8013146:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801314a:	ee07 3a90 	vmov	s15, r3
 801314e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013152:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80131fc <__ieee754_rem_pio2f+0x250>
 8013156:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801315a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801315e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013162:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013166:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801316a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801316e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013172:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013176:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801317a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801317e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013182:	edcd 7a05 	vstr	s15, [sp, #20]
 8013186:	d11e      	bne.n	80131c6 <__ieee754_rem_pio2f+0x21a>
 8013188:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013190:	bf0c      	ite	eq
 8013192:	2301      	moveq	r3, #1
 8013194:	2302      	movne	r3, #2
 8013196:	491a      	ldr	r1, [pc, #104]	; (8013200 <__ieee754_rem_pio2f+0x254>)
 8013198:	9101      	str	r1, [sp, #4]
 801319a:	2102      	movs	r1, #2
 801319c:	9100      	str	r1, [sp, #0]
 801319e:	a803      	add	r0, sp, #12
 80131a0:	4629      	mov	r1, r5
 80131a2:	f000 f891 	bl	80132c8 <__kernel_rem_pio2f>
 80131a6:	2e00      	cmp	r6, #0
 80131a8:	f6bf af31 	bge.w	801300e <__ieee754_rem_pio2f+0x62>
 80131ac:	edd5 7a00 	vldr	s15, [r5]
 80131b0:	eef1 7a67 	vneg.f32	s15, s15
 80131b4:	edc5 7a00 	vstr	s15, [r5]
 80131b8:	edd5 7a01 	vldr	s15, [r5, #4]
 80131bc:	eef1 7a67 	vneg.f32	s15, s15
 80131c0:	edc5 7a01 	vstr	s15, [r5, #4]
 80131c4:	e77a      	b.n	80130bc <__ieee754_rem_pio2f+0x110>
 80131c6:	2303      	movs	r3, #3
 80131c8:	e7e5      	b.n	8013196 <__ieee754_rem_pio2f+0x1ea>
 80131ca:	bf00      	nop
 80131cc:	3f490fd8 	.word	0x3f490fd8
 80131d0:	4016cbe3 	.word	0x4016cbe3
 80131d4:	3fc90f80 	.word	0x3fc90f80
 80131d8:	3fc90fd0 	.word	0x3fc90fd0
 80131dc:	37354400 	.word	0x37354400
 80131e0:	37354443 	.word	0x37354443
 80131e4:	2e85a308 	.word	0x2e85a308
 80131e8:	43490f80 	.word	0x43490f80
 80131ec:	3f22f984 	.word	0x3f22f984
 80131f0:	08013dfc 	.word	0x08013dfc
 80131f4:	2e85a300 	.word	0x2e85a300
 80131f8:	248d3132 	.word	0x248d3132
 80131fc:	43800000 	.word	0x43800000
 8013200:	08013e7c 	.word	0x08013e7c

08013204 <__ieee754_sqrtf>:
 8013204:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013208:	4770      	bx	lr
	...

0801320c <__kernel_cosf>:
 801320c:	ee10 3a10 	vmov	r3, s0
 8013210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013214:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801321c:	da05      	bge.n	801322a <__kernel_cosf+0x1e>
 801321e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013222:	ee17 2a90 	vmov	r2, s15
 8013226:	2a00      	cmp	r2, #0
 8013228:	d03b      	beq.n	80132a2 <__kernel_cosf+0x96>
 801322a:	ee20 6a00 	vmul.f32	s12, s0, s0
 801322e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013232:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80132a8 <__kernel_cosf+0x9c>
 8013236:	4a1d      	ldr	r2, [pc, #116]	; (80132ac <__kernel_cosf+0xa0>)
 8013238:	ee66 7a07 	vmul.f32	s15, s12, s14
 801323c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80132b0 <__kernel_cosf+0xa4>
 8013240:	eea6 7a25 	vfma.f32	s14, s12, s11
 8013244:	4293      	cmp	r3, r2
 8013246:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80132b4 <__kernel_cosf+0xa8>
 801324a:	eee7 5a06 	vfma.f32	s11, s14, s12
 801324e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80132b8 <__kernel_cosf+0xac>
 8013252:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013256:	eddf 5a19 	vldr	s11, [pc, #100]	; 80132bc <__kernel_cosf+0xb0>
 801325a:	eee7 5a06 	vfma.f32	s11, s14, s12
 801325e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80132c0 <__kernel_cosf+0xb4>
 8013262:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013266:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801326a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801326e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8013272:	dc04      	bgt.n	801327e <__kernel_cosf+0x72>
 8013274:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8013278:	ee36 0ae0 	vsub.f32	s0, s13, s1
 801327c:	4770      	bx	lr
 801327e:	4a11      	ldr	r2, [pc, #68]	; (80132c4 <__kernel_cosf+0xb8>)
 8013280:	4293      	cmp	r3, r2
 8013282:	bfda      	itte	le
 8013284:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8013288:	ee07 3a10 	vmovle	s14, r3
 801328c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8013290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013294:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8013298:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801329c:	ee30 0a67 	vsub.f32	s0, s0, s15
 80132a0:	4770      	bx	lr
 80132a2:	eeb0 0a66 	vmov.f32	s0, s13
 80132a6:	4770      	bx	lr
 80132a8:	ad47d74e 	.word	0xad47d74e
 80132ac:	3e999999 	.word	0x3e999999
 80132b0:	310f74f6 	.word	0x310f74f6
 80132b4:	b493f27c 	.word	0xb493f27c
 80132b8:	37d00d01 	.word	0x37d00d01
 80132bc:	bab60b61 	.word	0xbab60b61
 80132c0:	3d2aaaab 	.word	0x3d2aaaab
 80132c4:	3f480000 	.word	0x3f480000

080132c8 <__kernel_rem_pio2f>:
 80132c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132cc:	ed2d 8b04 	vpush	{d8-d9}
 80132d0:	b0d7      	sub	sp, #348	; 0x15c
 80132d2:	469b      	mov	fp, r3
 80132d4:	460e      	mov	r6, r1
 80132d6:	4bbe      	ldr	r3, [pc, #760]	; (80135d0 <__kernel_rem_pio2f+0x308>)
 80132d8:	9964      	ldr	r1, [sp, #400]	; 0x190
 80132da:	9002      	str	r0, [sp, #8]
 80132dc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80132e0:	9865      	ldr	r0, [sp, #404]	; 0x194
 80132e2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80135e0 <__kernel_rem_pio2f+0x318>
 80132e6:	1ed1      	subs	r1, r2, #3
 80132e8:	2308      	movs	r3, #8
 80132ea:	fb91 f1f3 	sdiv	r1, r1, r3
 80132ee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80132f2:	f10b 3aff 	add.w	sl, fp, #4294967295
 80132f6:	1c4c      	adds	r4, r1, #1
 80132f8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80132fc:	eba1 050a 	sub.w	r5, r1, sl
 8013300:	aa1a      	add	r2, sp, #104	; 0x68
 8013302:	eb09 070a 	add.w	r7, r9, sl
 8013306:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801330a:	4696      	mov	lr, r2
 801330c:	2300      	movs	r3, #0
 801330e:	42bb      	cmp	r3, r7
 8013310:	dd0f      	ble.n	8013332 <__kernel_rem_pio2f+0x6a>
 8013312:	af42      	add	r7, sp, #264	; 0x108
 8013314:	2200      	movs	r2, #0
 8013316:	454a      	cmp	r2, r9
 8013318:	dc27      	bgt.n	801336a <__kernel_rem_pio2f+0xa2>
 801331a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801331e:	eb0b 0302 	add.w	r3, fp, r2
 8013322:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8013326:	9d02      	ldr	r5, [sp, #8]
 8013328:	eddf 7aad 	vldr	s15, [pc, #692]	; 80135e0 <__kernel_rem_pio2f+0x318>
 801332c:	f04f 0c00 	mov.w	ip, #0
 8013330:	e015      	b.n	801335e <__kernel_rem_pio2f+0x96>
 8013332:	42dd      	cmn	r5, r3
 8013334:	bf5d      	ittte	pl
 8013336:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 801333a:	ee07 2a90 	vmovpl	s15, r2
 801333e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013342:	eef0 7a47 	vmovmi.f32	s15, s14
 8013346:	ecee 7a01 	vstmia	lr!, {s15}
 801334a:	3301      	adds	r3, #1
 801334c:	e7df      	b.n	801330e <__kernel_rem_pio2f+0x46>
 801334e:	ecf5 6a01 	vldmia	r5!, {s13}
 8013352:	ed33 7a01 	vldmdb	r3!, {s14}
 8013356:	eee6 7a87 	vfma.f32	s15, s13, s14
 801335a:	f10c 0c01 	add.w	ip, ip, #1
 801335e:	45d4      	cmp	ip, sl
 8013360:	ddf5      	ble.n	801334e <__kernel_rem_pio2f+0x86>
 8013362:	ece7 7a01 	vstmia	r7!, {s15}
 8013366:	3201      	adds	r2, #1
 8013368:	e7d5      	b.n	8013316 <__kernel_rem_pio2f+0x4e>
 801336a:	ab06      	add	r3, sp, #24
 801336c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8013370:	9304      	str	r3, [sp, #16]
 8013372:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80135dc <__kernel_rem_pio2f+0x314>
 8013376:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80135d8 <__kernel_rem_pio2f+0x310>
 801337a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801337e:	9303      	str	r3, [sp, #12]
 8013380:	464d      	mov	r5, r9
 8013382:	ab56      	add	r3, sp, #344	; 0x158
 8013384:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8013388:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801338c:	3f01      	subs	r7, #1
 801338e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8013392:	00bf      	lsls	r7, r7, #2
 8013394:	ab56      	add	r3, sp, #344	; 0x158
 8013396:	19da      	adds	r2, r3, r7
 8013398:	3a4c      	subs	r2, #76	; 0x4c
 801339a:	2300      	movs	r3, #0
 801339c:	1ae9      	subs	r1, r5, r3
 801339e:	2900      	cmp	r1, #0
 80133a0:	dc4c      	bgt.n	801343c <__kernel_rem_pio2f+0x174>
 80133a2:	4620      	mov	r0, r4
 80133a4:	f000 fb18 	bl	80139d8 <scalbnf>
 80133a8:	eeb0 8a40 	vmov.f32	s16, s0
 80133ac:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80133b0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80133b4:	f000 fa6e 	bl	8013894 <floorf>
 80133b8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80133bc:	eea0 8a67 	vfms.f32	s16, s0, s15
 80133c0:	2c00      	cmp	r4, #0
 80133c2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80133c6:	edcd 7a01 	vstr	s15, [sp, #4]
 80133ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133ce:	ee38 8a67 	vsub.f32	s16, s16, s15
 80133d2:	dd48      	ble.n	8013466 <__kernel_rem_pio2f+0x19e>
 80133d4:	1e69      	subs	r1, r5, #1
 80133d6:	ab06      	add	r3, sp, #24
 80133d8:	f1c4 0008 	rsb	r0, r4, #8
 80133dc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80133e0:	9a01      	ldr	r2, [sp, #4]
 80133e2:	fa4c f300 	asr.w	r3, ip, r0
 80133e6:	441a      	add	r2, r3
 80133e8:	4083      	lsls	r3, r0
 80133ea:	9201      	str	r2, [sp, #4]
 80133ec:	ebac 0203 	sub.w	r2, ip, r3
 80133f0:	ab06      	add	r3, sp, #24
 80133f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80133f6:	f1c4 0307 	rsb	r3, r4, #7
 80133fa:	fa42 f803 	asr.w	r8, r2, r3
 80133fe:	f1b8 0f00 	cmp.w	r8, #0
 8013402:	dd41      	ble.n	8013488 <__kernel_rem_pio2f+0x1c0>
 8013404:	9b01      	ldr	r3, [sp, #4]
 8013406:	2000      	movs	r0, #0
 8013408:	3301      	adds	r3, #1
 801340a:	9301      	str	r3, [sp, #4]
 801340c:	4601      	mov	r1, r0
 801340e:	4285      	cmp	r5, r0
 8013410:	dc6d      	bgt.n	80134ee <__kernel_rem_pio2f+0x226>
 8013412:	2c00      	cmp	r4, #0
 8013414:	dd04      	ble.n	8013420 <__kernel_rem_pio2f+0x158>
 8013416:	2c01      	cmp	r4, #1
 8013418:	d07e      	beq.n	8013518 <__kernel_rem_pio2f+0x250>
 801341a:	2c02      	cmp	r4, #2
 801341c:	f000 8086 	beq.w	801352c <__kernel_rem_pio2f+0x264>
 8013420:	f1b8 0f02 	cmp.w	r8, #2
 8013424:	d130      	bne.n	8013488 <__kernel_rem_pio2f+0x1c0>
 8013426:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801342a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801342e:	b359      	cbz	r1, 8013488 <__kernel_rem_pio2f+0x1c0>
 8013430:	4620      	mov	r0, r4
 8013432:	f000 fad1 	bl	80139d8 <scalbnf>
 8013436:	ee38 8a40 	vsub.f32	s16, s16, s0
 801343a:	e025      	b.n	8013488 <__kernel_rem_pio2f+0x1c0>
 801343c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013440:	a806      	add	r0, sp, #24
 8013442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801344a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801344e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013452:	ee10 1a10 	vmov	r1, s0
 8013456:	ed32 0a01 	vldmdb	r2!, {s0}
 801345a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801345e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013462:	3301      	adds	r3, #1
 8013464:	e79a      	b.n	801339c <__kernel_rem_pio2f+0xd4>
 8013466:	d106      	bne.n	8013476 <__kernel_rem_pio2f+0x1ae>
 8013468:	1e6b      	subs	r3, r5, #1
 801346a:	aa06      	add	r2, sp, #24
 801346c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013470:	ea4f 2822 	mov.w	r8, r2, asr #8
 8013474:	e7c3      	b.n	80133fe <__kernel_rem_pio2f+0x136>
 8013476:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801347a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013482:	da31      	bge.n	80134e8 <__kernel_rem_pio2f+0x220>
 8013484:	f04f 0800 	mov.w	r8, #0
 8013488:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013490:	f040 80a8 	bne.w	80135e4 <__kernel_rem_pio2f+0x31c>
 8013494:	1e6b      	subs	r3, r5, #1
 8013496:	4618      	mov	r0, r3
 8013498:	2200      	movs	r2, #0
 801349a:	4548      	cmp	r0, r9
 801349c:	da4d      	bge.n	801353a <__kernel_rem_pio2f+0x272>
 801349e:	2a00      	cmp	r2, #0
 80134a0:	f000 8087 	beq.w	80135b2 <__kernel_rem_pio2f+0x2ea>
 80134a4:	aa06      	add	r2, sp, #24
 80134a6:	3c08      	subs	r4, #8
 80134a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80134ac:	2900      	cmp	r1, #0
 80134ae:	f000 808d 	beq.w	80135cc <__kernel_rem_pio2f+0x304>
 80134b2:	4620      	mov	r0, r4
 80134b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80134b8:	9302      	str	r3, [sp, #8]
 80134ba:	f000 fa8d 	bl	80139d8 <scalbnf>
 80134be:	9b02      	ldr	r3, [sp, #8]
 80134c0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80135dc <__kernel_rem_pio2f+0x314>
 80134c4:	0099      	lsls	r1, r3, #2
 80134c6:	aa42      	add	r2, sp, #264	; 0x108
 80134c8:	1850      	adds	r0, r2, r1
 80134ca:	1d05      	adds	r5, r0, #4
 80134cc:	461c      	mov	r4, r3
 80134ce:	2c00      	cmp	r4, #0
 80134d0:	f280 80b8 	bge.w	8013644 <__kernel_rem_pio2f+0x37c>
 80134d4:	2500      	movs	r5, #0
 80134d6:	1b5c      	subs	r4, r3, r5
 80134d8:	2c00      	cmp	r4, #0
 80134da:	f2c0 80d8 	blt.w	801368e <__kernel_rem_pio2f+0x3c6>
 80134de:	4f3d      	ldr	r7, [pc, #244]	; (80135d4 <__kernel_rem_pio2f+0x30c>)
 80134e0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80135e0 <__kernel_rem_pio2f+0x318>
 80134e4:	2400      	movs	r4, #0
 80134e6:	e0c6      	b.n	8013676 <__kernel_rem_pio2f+0x3ae>
 80134e8:	f04f 0802 	mov.w	r8, #2
 80134ec:	e78a      	b.n	8013404 <__kernel_rem_pio2f+0x13c>
 80134ee:	ab06      	add	r3, sp, #24
 80134f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80134f4:	b949      	cbnz	r1, 801350a <__kernel_rem_pio2f+0x242>
 80134f6:	b12b      	cbz	r3, 8013504 <__kernel_rem_pio2f+0x23c>
 80134f8:	aa06      	add	r2, sp, #24
 80134fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80134fe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8013502:	2301      	movs	r3, #1
 8013504:	3001      	adds	r0, #1
 8013506:	4619      	mov	r1, r3
 8013508:	e781      	b.n	801340e <__kernel_rem_pio2f+0x146>
 801350a:	aa06      	add	r2, sp, #24
 801350c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8013510:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8013514:	460b      	mov	r3, r1
 8013516:	e7f5      	b.n	8013504 <__kernel_rem_pio2f+0x23c>
 8013518:	1e68      	subs	r0, r5, #1
 801351a:	ab06      	add	r3, sp, #24
 801351c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013524:	aa06      	add	r2, sp, #24
 8013526:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801352a:	e779      	b.n	8013420 <__kernel_rem_pio2f+0x158>
 801352c:	1e68      	subs	r0, r5, #1
 801352e:	ab06      	add	r3, sp, #24
 8013530:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013538:	e7f4      	b.n	8013524 <__kernel_rem_pio2f+0x25c>
 801353a:	a906      	add	r1, sp, #24
 801353c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013540:	3801      	subs	r0, #1
 8013542:	430a      	orrs	r2, r1
 8013544:	e7a9      	b.n	801349a <__kernel_rem_pio2f+0x1d2>
 8013546:	f10c 0c01 	add.w	ip, ip, #1
 801354a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801354e:	2a00      	cmp	r2, #0
 8013550:	d0f9      	beq.n	8013546 <__kernel_rem_pio2f+0x27e>
 8013552:	eb0b 0305 	add.w	r3, fp, r5
 8013556:	aa1a      	add	r2, sp, #104	; 0x68
 8013558:	009b      	lsls	r3, r3, #2
 801355a:	1898      	adds	r0, r3, r2
 801355c:	3004      	adds	r0, #4
 801355e:	1c69      	adds	r1, r5, #1
 8013560:	3704      	adds	r7, #4
 8013562:	2200      	movs	r2, #0
 8013564:	4465      	add	r5, ip
 8013566:	9005      	str	r0, [sp, #20]
 8013568:	428d      	cmp	r5, r1
 801356a:	f6ff af0a 	blt.w	8013382 <__kernel_rem_pio2f+0xba>
 801356e:	a81a      	add	r0, sp, #104	; 0x68
 8013570:	eb02 0c03 	add.w	ip, r2, r3
 8013574:	4484      	add	ip, r0
 8013576:	9803      	ldr	r0, [sp, #12]
 8013578:	f8dd e008 	ldr.w	lr, [sp, #8]
 801357c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8013580:	9001      	str	r0, [sp, #4]
 8013582:	ee07 0a90 	vmov	s15, r0
 8013586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801358a:	9805      	ldr	r0, [sp, #20]
 801358c:	edcc 7a00 	vstr	s15, [ip]
 8013590:	eddf 7a13 	vldr	s15, [pc, #76]	; 80135e0 <__kernel_rem_pio2f+0x318>
 8013594:	eb00 0802 	add.w	r8, r0, r2
 8013598:	f04f 0c00 	mov.w	ip, #0
 801359c:	45d4      	cmp	ip, sl
 801359e:	dd0c      	ble.n	80135ba <__kernel_rem_pio2f+0x2f2>
 80135a0:	eb02 0c07 	add.w	ip, r2, r7
 80135a4:	a842      	add	r0, sp, #264	; 0x108
 80135a6:	4484      	add	ip, r0
 80135a8:	edcc 7a01 	vstr	s15, [ip, #4]
 80135ac:	3101      	adds	r1, #1
 80135ae:	3204      	adds	r2, #4
 80135b0:	e7da      	b.n	8013568 <__kernel_rem_pio2f+0x2a0>
 80135b2:	9b04      	ldr	r3, [sp, #16]
 80135b4:	f04f 0c01 	mov.w	ip, #1
 80135b8:	e7c7      	b.n	801354a <__kernel_rem_pio2f+0x282>
 80135ba:	ecfe 6a01 	vldmia	lr!, {s13}
 80135be:	ed38 7a01 	vldmdb	r8!, {s14}
 80135c2:	f10c 0c01 	add.w	ip, ip, #1
 80135c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80135ca:	e7e7      	b.n	801359c <__kernel_rem_pio2f+0x2d4>
 80135cc:	3b01      	subs	r3, #1
 80135ce:	e769      	b.n	80134a4 <__kernel_rem_pio2f+0x1dc>
 80135d0:	080141c0 	.word	0x080141c0
 80135d4:	08014194 	.word	0x08014194
 80135d8:	43800000 	.word	0x43800000
 80135dc:	3b800000 	.word	0x3b800000
 80135e0:	00000000 	.word	0x00000000
 80135e4:	4260      	negs	r0, r4
 80135e6:	eeb0 0a48 	vmov.f32	s0, s16
 80135ea:	f000 f9f5 	bl	80139d8 <scalbnf>
 80135ee:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80135d8 <__kernel_rem_pio2f+0x310>
 80135f2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80135f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135fa:	db1a      	blt.n	8013632 <__kernel_rem_pio2f+0x36a>
 80135fc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80135dc <__kernel_rem_pio2f+0x314>
 8013600:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013604:	aa06      	add	r2, sp, #24
 8013606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801360a:	a906      	add	r1, sp, #24
 801360c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013610:	3408      	adds	r4, #8
 8013612:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801361a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801361e:	ee10 3a10 	vmov	r3, s0
 8013622:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8013626:	1c6b      	adds	r3, r5, #1
 8013628:	ee17 2a90 	vmov	r2, s15
 801362c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013630:	e73f      	b.n	80134b2 <__kernel_rem_pio2f+0x1ea>
 8013632:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013636:	aa06      	add	r2, sp, #24
 8013638:	ee10 3a10 	vmov	r3, s0
 801363c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8013640:	462b      	mov	r3, r5
 8013642:	e736      	b.n	80134b2 <__kernel_rem_pio2f+0x1ea>
 8013644:	aa06      	add	r2, sp, #24
 8013646:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801364a:	9202      	str	r2, [sp, #8]
 801364c:	ee07 2a90 	vmov	s15, r2
 8013650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013654:	3c01      	subs	r4, #1
 8013656:	ee67 7a80 	vmul.f32	s15, s15, s0
 801365a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801365e:	ed65 7a01 	vstmdb	r5!, {s15}
 8013662:	e734      	b.n	80134ce <__kernel_rem_pio2f+0x206>
 8013664:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8013668:	ecf7 6a01 	vldmia	r7!, {s13}
 801366c:	ed9c 7a00 	vldr	s14, [ip]
 8013670:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013674:	3401      	adds	r4, #1
 8013676:	454c      	cmp	r4, r9
 8013678:	dc01      	bgt.n	801367e <__kernel_rem_pio2f+0x3b6>
 801367a:	42a5      	cmp	r5, r4
 801367c:	daf2      	bge.n	8013664 <__kernel_rem_pio2f+0x39c>
 801367e:	aa56      	add	r2, sp, #344	; 0x158
 8013680:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8013684:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8013688:	3501      	adds	r5, #1
 801368a:	3804      	subs	r0, #4
 801368c:	e723      	b.n	80134d6 <__kernel_rem_pio2f+0x20e>
 801368e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8013690:	2a03      	cmp	r2, #3
 8013692:	d84d      	bhi.n	8013730 <__kernel_rem_pio2f+0x468>
 8013694:	e8df f002 	tbb	[pc, r2]
 8013698:	021f1f3e 	.word	0x021f1f3e
 801369c:	aa56      	add	r2, sp, #344	; 0x158
 801369e:	4411      	add	r1, r2
 80136a0:	399c      	subs	r1, #156	; 0x9c
 80136a2:	4608      	mov	r0, r1
 80136a4:	461c      	mov	r4, r3
 80136a6:	2c00      	cmp	r4, #0
 80136a8:	dc5f      	bgt.n	801376a <__kernel_rem_pio2f+0x4a2>
 80136aa:	4608      	mov	r0, r1
 80136ac:	461c      	mov	r4, r3
 80136ae:	2c01      	cmp	r4, #1
 80136b0:	dc6b      	bgt.n	801378a <__kernel_rem_pio2f+0x4c2>
 80136b2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80135e0 <__kernel_rem_pio2f+0x318>
 80136b6:	2b01      	cmp	r3, #1
 80136b8:	dc77      	bgt.n	80137aa <__kernel_rem_pio2f+0x4e2>
 80136ba:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80136be:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80136c2:	f1b8 0f00 	cmp.w	r8, #0
 80136c6:	d176      	bne.n	80137b6 <__kernel_rem_pio2f+0x4ee>
 80136c8:	edc6 6a00 	vstr	s13, [r6]
 80136cc:	ed86 7a01 	vstr	s14, [r6, #4]
 80136d0:	edc6 7a02 	vstr	s15, [r6, #8]
 80136d4:	e02c      	b.n	8013730 <__kernel_rem_pio2f+0x468>
 80136d6:	aa56      	add	r2, sp, #344	; 0x158
 80136d8:	4411      	add	r1, r2
 80136da:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80135e0 <__kernel_rem_pio2f+0x318>
 80136de:	399c      	subs	r1, #156	; 0x9c
 80136e0:	4618      	mov	r0, r3
 80136e2:	2800      	cmp	r0, #0
 80136e4:	da32      	bge.n	801374c <__kernel_rem_pio2f+0x484>
 80136e6:	f1b8 0f00 	cmp.w	r8, #0
 80136ea:	d035      	beq.n	8013758 <__kernel_rem_pio2f+0x490>
 80136ec:	eef1 7a47 	vneg.f32	s15, s14
 80136f0:	edc6 7a00 	vstr	s15, [r6]
 80136f4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80136f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136fc:	a82f      	add	r0, sp, #188	; 0xbc
 80136fe:	2101      	movs	r1, #1
 8013700:	428b      	cmp	r3, r1
 8013702:	da2c      	bge.n	801375e <__kernel_rem_pio2f+0x496>
 8013704:	f1b8 0f00 	cmp.w	r8, #0
 8013708:	d001      	beq.n	801370e <__kernel_rem_pio2f+0x446>
 801370a:	eef1 7a67 	vneg.f32	s15, s15
 801370e:	edc6 7a01 	vstr	s15, [r6, #4]
 8013712:	e00d      	b.n	8013730 <__kernel_rem_pio2f+0x468>
 8013714:	aa56      	add	r2, sp, #344	; 0x158
 8013716:	4411      	add	r1, r2
 8013718:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80135e0 <__kernel_rem_pio2f+0x318>
 801371c:	399c      	subs	r1, #156	; 0x9c
 801371e:	2b00      	cmp	r3, #0
 8013720:	da0e      	bge.n	8013740 <__kernel_rem_pio2f+0x478>
 8013722:	f1b8 0f00 	cmp.w	r8, #0
 8013726:	d001      	beq.n	801372c <__kernel_rem_pio2f+0x464>
 8013728:	eef1 7a67 	vneg.f32	s15, s15
 801372c:	edc6 7a00 	vstr	s15, [r6]
 8013730:	9b01      	ldr	r3, [sp, #4]
 8013732:	f003 0007 	and.w	r0, r3, #7
 8013736:	b057      	add	sp, #348	; 0x15c
 8013738:	ecbd 8b04 	vpop	{d8-d9}
 801373c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013740:	ed31 7a01 	vldmdb	r1!, {s14}
 8013744:	3b01      	subs	r3, #1
 8013746:	ee77 7a87 	vadd.f32	s15, s15, s14
 801374a:	e7e8      	b.n	801371e <__kernel_rem_pio2f+0x456>
 801374c:	ed71 7a01 	vldmdb	r1!, {s15}
 8013750:	3801      	subs	r0, #1
 8013752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013756:	e7c4      	b.n	80136e2 <__kernel_rem_pio2f+0x41a>
 8013758:	eef0 7a47 	vmov.f32	s15, s14
 801375c:	e7c8      	b.n	80136f0 <__kernel_rem_pio2f+0x428>
 801375e:	ecb0 7a01 	vldmia	r0!, {s14}
 8013762:	3101      	adds	r1, #1
 8013764:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013768:	e7ca      	b.n	8013700 <__kernel_rem_pio2f+0x438>
 801376a:	ed50 7a02 	vldr	s15, [r0, #-8]
 801376e:	ed70 6a01 	vldmdb	r0!, {s13}
 8013772:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013776:	3c01      	subs	r4, #1
 8013778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801377c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8013780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013784:	edc0 7a00 	vstr	s15, [r0]
 8013788:	e78d      	b.n	80136a6 <__kernel_rem_pio2f+0x3de>
 801378a:	ed50 7a02 	vldr	s15, [r0, #-8]
 801378e:	ed70 6a01 	vldmdb	r0!, {s13}
 8013792:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013796:	3c01      	subs	r4, #1
 8013798:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801379c:	ed00 7a01 	vstr	s14, [r0, #-4]
 80137a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80137a4:	edc0 7a00 	vstr	s15, [r0]
 80137a8:	e781      	b.n	80136ae <__kernel_rem_pio2f+0x3e6>
 80137aa:	ed31 7a01 	vldmdb	r1!, {s14}
 80137ae:	3b01      	subs	r3, #1
 80137b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137b4:	e77f      	b.n	80136b6 <__kernel_rem_pio2f+0x3ee>
 80137b6:	eef1 6a66 	vneg.f32	s13, s13
 80137ba:	eeb1 7a47 	vneg.f32	s14, s14
 80137be:	edc6 6a00 	vstr	s13, [r6]
 80137c2:	ed86 7a01 	vstr	s14, [r6, #4]
 80137c6:	eef1 7a67 	vneg.f32	s15, s15
 80137ca:	e781      	b.n	80136d0 <__kernel_rem_pio2f+0x408>

080137cc <__kernel_sinf>:
 80137cc:	ee10 3a10 	vmov	r3, s0
 80137d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80137d8:	da04      	bge.n	80137e4 <__kernel_sinf+0x18>
 80137da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80137de:	ee17 3a90 	vmov	r3, s15
 80137e2:	b35b      	cbz	r3, 801383c <__kernel_sinf+0x70>
 80137e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80137e8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013840 <__kernel_sinf+0x74>
 80137ec:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013844 <__kernel_sinf+0x78>
 80137f0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80137f4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013848 <__kernel_sinf+0x7c>
 80137f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80137fc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801384c <__kernel_sinf+0x80>
 8013800:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013804:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013850 <__kernel_sinf+0x84>
 8013808:	ee60 6a07 	vmul.f32	s13, s0, s14
 801380c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013810:	b930      	cbnz	r0, 8013820 <__kernel_sinf+0x54>
 8013812:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013854 <__kernel_sinf+0x88>
 8013816:	eea7 6a27 	vfma.f32	s12, s14, s15
 801381a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801381e:	4770      	bx	lr
 8013820:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013824:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013828:	eee0 7a86 	vfma.f32	s15, s1, s12
 801382c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013830:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013858 <__kernel_sinf+0x8c>
 8013834:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013838:	ee30 0a60 	vsub.f32	s0, s0, s1
 801383c:	4770      	bx	lr
 801383e:	bf00      	nop
 8013840:	2f2ec9d3 	.word	0x2f2ec9d3
 8013844:	b2d72f34 	.word	0xb2d72f34
 8013848:	3638ef1b 	.word	0x3638ef1b
 801384c:	b9500d01 	.word	0xb9500d01
 8013850:	3c088889 	.word	0x3c088889
 8013854:	be2aaaab 	.word	0xbe2aaaab
 8013858:	3e2aaaab 	.word	0x3e2aaaab

0801385c <matherr>:
 801385c:	2000      	movs	r0, #0
 801385e:	4770      	bx	lr

08013860 <nan>:
 8013860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013868 <nan+0x8>
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop
 8013868:	00000000 	.word	0x00000000
 801386c:	7ff80000 	.word	0x7ff80000

08013870 <fabsf>:
 8013870:	ee10 3a10 	vmov	r3, s0
 8013874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013878:	ee00 3a10 	vmov	s0, r3
 801387c:	4770      	bx	lr

0801387e <finitef>:
 801387e:	ee10 3a10 	vmov	r3, s0
 8013882:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8013886:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801388a:	bfac      	ite	ge
 801388c:	2000      	movge	r0, #0
 801388e:	2001      	movlt	r0, #1
 8013890:	4770      	bx	lr
	...

08013894 <floorf>:
 8013894:	ee10 3a10 	vmov	r3, s0
 8013898:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801389c:	0dca      	lsrs	r2, r1, #23
 801389e:	3a7f      	subs	r2, #127	; 0x7f
 80138a0:	2a16      	cmp	r2, #22
 80138a2:	dc2a      	bgt.n	80138fa <floorf+0x66>
 80138a4:	2a00      	cmp	r2, #0
 80138a6:	da11      	bge.n	80138cc <floorf+0x38>
 80138a8:	eddf 7a18 	vldr	s15, [pc, #96]	; 801390c <floorf+0x78>
 80138ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80138b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80138b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138b8:	dd05      	ble.n	80138c6 <floorf+0x32>
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	da23      	bge.n	8013906 <floorf+0x72>
 80138be:	4a14      	ldr	r2, [pc, #80]	; (8013910 <floorf+0x7c>)
 80138c0:	2900      	cmp	r1, #0
 80138c2:	bf18      	it	ne
 80138c4:	4613      	movne	r3, r2
 80138c6:	ee00 3a10 	vmov	s0, r3
 80138ca:	4770      	bx	lr
 80138cc:	4911      	ldr	r1, [pc, #68]	; (8013914 <floorf+0x80>)
 80138ce:	4111      	asrs	r1, r2
 80138d0:	420b      	tst	r3, r1
 80138d2:	d0fa      	beq.n	80138ca <floorf+0x36>
 80138d4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801390c <floorf+0x78>
 80138d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80138dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80138e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e4:	ddef      	ble.n	80138c6 <floorf+0x32>
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	bfbe      	ittt	lt
 80138ea:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80138ee:	fa40 f202 	asrlt.w	r2, r0, r2
 80138f2:	189b      	addlt	r3, r3, r2
 80138f4:	ea23 0301 	bic.w	r3, r3, r1
 80138f8:	e7e5      	b.n	80138c6 <floorf+0x32>
 80138fa:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80138fe:	d3e4      	bcc.n	80138ca <floorf+0x36>
 8013900:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013904:	4770      	bx	lr
 8013906:	2300      	movs	r3, #0
 8013908:	e7dd      	b.n	80138c6 <floorf+0x32>
 801390a:	bf00      	nop
 801390c:	7149f2ca 	.word	0x7149f2ca
 8013910:	bf800000 	.word	0xbf800000
 8013914:	007fffff 	.word	0x007fffff

08013918 <nanf>:
 8013918:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013920 <nanf+0x8>
 801391c:	4770      	bx	lr
 801391e:	bf00      	nop
 8013920:	7fc00000 	.word	0x7fc00000

08013924 <rintf>:
 8013924:	b513      	push	{r0, r1, r4, lr}
 8013926:	ee10 1a10 	vmov	r1, s0
 801392a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801392e:	0ddc      	lsrs	r4, r3, #23
 8013930:	3c7f      	subs	r4, #127	; 0x7f
 8013932:	2c16      	cmp	r4, #22
 8013934:	dc46      	bgt.n	80139c4 <rintf+0xa0>
 8013936:	b32b      	cbz	r3, 8013984 <rintf+0x60>
 8013938:	2c00      	cmp	r4, #0
 801393a:	ee10 2a10 	vmov	r2, s0
 801393e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8013942:	da21      	bge.n	8013988 <rintf+0x64>
 8013944:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8013948:	425b      	negs	r3, r3
 801394a:	4a21      	ldr	r2, [pc, #132]	; (80139d0 <rintf+0xac>)
 801394c:	0a5b      	lsrs	r3, r3, #9
 801394e:	0d09      	lsrs	r1, r1, #20
 8013950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013954:	0509      	lsls	r1, r1, #20
 8013956:	430b      	orrs	r3, r1
 8013958:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801395c:	ee07 3a90 	vmov	s15, r3
 8013960:	edd2 6a00 	vldr	s13, [r2]
 8013964:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8013968:	ed8d 7a01 	vstr	s14, [sp, #4]
 801396c:	eddd 7a01 	vldr	s15, [sp, #4]
 8013970:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013974:	ee17 3a90 	vmov	r3, s15
 8013978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801397c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8013980:	ee00 3a10 	vmov	s0, r3
 8013984:	b002      	add	sp, #8
 8013986:	bd10      	pop	{r4, pc}
 8013988:	4b12      	ldr	r3, [pc, #72]	; (80139d4 <rintf+0xb0>)
 801398a:	4123      	asrs	r3, r4
 801398c:	4219      	tst	r1, r3
 801398e:	d0f9      	beq.n	8013984 <rintf+0x60>
 8013990:	085b      	lsrs	r3, r3, #1
 8013992:	4219      	tst	r1, r3
 8013994:	d006      	beq.n	80139a4 <rintf+0x80>
 8013996:	ea21 0203 	bic.w	r2, r1, r3
 801399a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801399e:	fa43 f404 	asr.w	r4, r3, r4
 80139a2:	4322      	orrs	r2, r4
 80139a4:	4b0a      	ldr	r3, [pc, #40]	; (80139d0 <rintf+0xac>)
 80139a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80139aa:	ed90 7a00 	vldr	s14, [r0]
 80139ae:	ee07 2a90 	vmov	s15, r2
 80139b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80139b6:	edcd 7a01 	vstr	s15, [sp, #4]
 80139ba:	ed9d 0a01 	vldr	s0, [sp, #4]
 80139be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80139c2:	e7df      	b.n	8013984 <rintf+0x60>
 80139c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80139c8:	d3dc      	bcc.n	8013984 <rintf+0x60>
 80139ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80139ce:	e7d9      	b.n	8013984 <rintf+0x60>
 80139d0:	080141cc 	.word	0x080141cc
 80139d4:	007fffff 	.word	0x007fffff

080139d8 <scalbnf>:
 80139d8:	b508      	push	{r3, lr}
 80139da:	ee10 2a10 	vmov	r2, s0
 80139de:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80139e2:	ed2d 8b02 	vpush	{d8}
 80139e6:	eef0 0a40 	vmov.f32	s1, s0
 80139ea:	d004      	beq.n	80139f6 <scalbnf+0x1e>
 80139ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80139f0:	d306      	bcc.n	8013a00 <scalbnf+0x28>
 80139f2:	ee70 0a00 	vadd.f32	s1, s0, s0
 80139f6:	ecbd 8b02 	vpop	{d8}
 80139fa:	eeb0 0a60 	vmov.f32	s0, s1
 80139fe:	bd08      	pop	{r3, pc}
 8013a00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013a04:	d21c      	bcs.n	8013a40 <scalbnf+0x68>
 8013a06:	4b1f      	ldr	r3, [pc, #124]	; (8013a84 <scalbnf+0xac>)
 8013a08:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013a88 <scalbnf+0xb0>
 8013a0c:	4298      	cmp	r0, r3
 8013a0e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8013a12:	db10      	blt.n	8013a36 <scalbnf+0x5e>
 8013a14:	ee10 2a90 	vmov	r2, s1
 8013a18:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8013a1c:	3b19      	subs	r3, #25
 8013a1e:	4403      	add	r3, r0
 8013a20:	2bfe      	cmp	r3, #254	; 0xfe
 8013a22:	dd0f      	ble.n	8013a44 <scalbnf+0x6c>
 8013a24:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8013a8c <scalbnf+0xb4>
 8013a28:	eeb0 0a48 	vmov.f32	s0, s16
 8013a2c:	f000 f834 	bl	8013a98 <copysignf>
 8013a30:	ee60 0a08 	vmul.f32	s1, s0, s16
 8013a34:	e7df      	b.n	80139f6 <scalbnf+0x1e>
 8013a36:	eddf 7a16 	vldr	s15, [pc, #88]	; 8013a90 <scalbnf+0xb8>
 8013a3a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8013a3e:	e7da      	b.n	80139f6 <scalbnf+0x1e>
 8013a40:	0ddb      	lsrs	r3, r3, #23
 8013a42:	e7ec      	b.n	8013a1e <scalbnf+0x46>
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	dd06      	ble.n	8013a56 <scalbnf+0x7e>
 8013a48:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8013a4c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8013a50:	ee00 3a90 	vmov	s1, r3
 8013a54:	e7cf      	b.n	80139f6 <scalbnf+0x1e>
 8013a56:	f113 0f16 	cmn.w	r3, #22
 8013a5a:	da06      	bge.n	8013a6a <scalbnf+0x92>
 8013a5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013a60:	4298      	cmp	r0, r3
 8013a62:	dcdf      	bgt.n	8013a24 <scalbnf+0x4c>
 8013a64:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8013a90 <scalbnf+0xb8>
 8013a68:	e7de      	b.n	8013a28 <scalbnf+0x50>
 8013a6a:	3319      	adds	r3, #25
 8013a6c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8013a70:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8013a74:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013a94 <scalbnf+0xbc>
 8013a78:	ee07 3a10 	vmov	s14, r3
 8013a7c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8013a80:	e7b9      	b.n	80139f6 <scalbnf+0x1e>
 8013a82:	bf00      	nop
 8013a84:	ffff3cb0 	.word	0xffff3cb0
 8013a88:	4c000000 	.word	0x4c000000
 8013a8c:	7149f2ca 	.word	0x7149f2ca
 8013a90:	0da24260 	.word	0x0da24260
 8013a94:	33000000 	.word	0x33000000

08013a98 <copysignf>:
 8013a98:	ee10 3a10 	vmov	r3, s0
 8013a9c:	ee10 2a90 	vmov	r2, s1
 8013aa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013aa4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8013aa8:	4313      	orrs	r3, r2
 8013aaa:	ee00 3a10 	vmov	s0, r3
 8013aae:	4770      	bx	lr

08013ab0 <_init>:
 8013ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ab2:	bf00      	nop
 8013ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ab6:	bc08      	pop	{r3}
 8013ab8:	469e      	mov	lr, r3
 8013aba:	4770      	bx	lr

08013abc <_fini>:
 8013abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013abe:	bf00      	nop
 8013ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ac2:	bc08      	pop	{r3}
 8013ac4:	469e      	mov	lr, r3
 8013ac6:	4770      	bx	lr
