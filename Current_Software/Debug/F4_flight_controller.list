
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008ff0  08008ff0  00018ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f0  080092f0  00020434  2**0
                  CONTENTS
  4 .ARM          00000008  080092f0  080092f0  000192f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092f8  080092f8  00020434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092f8  080092f8  000192f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092fc  080092fc  000192fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  08009300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  20000434  08009734  00020434  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b74  08009734  00020b74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d67a  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c2f  00000000  00000000  0003dade  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001490  00000000  00000000  00041710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  00042ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000244c2  00000000  00000000  00043e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015bf2  00000000  00000000  00068312  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca752  00000000  00000000  0007df04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b4  00000000  00000000  001486d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000434 	.word	0x20000434
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fd4 	.word	0x08008fd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000438 	.word	0x20000438
 80001cc:	08008fd4 	.word	0x08008fd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <DEBUG_init+0x14>)
 8000eae:	f000 f809 	bl	8000ec4 <RetargetInit>
	printf("Debuger is init\n");
 8000eb2:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <DEBUG_init+0x18>)
 8000eb4:	f006 f924 	bl	8007100 <puts>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000aec 	.word	0x20000aec
 8000ec0:	08008ff0 	.word	0x08008ff0

08000ec4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <RetargetInit+0x28>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <RetargetInit+0x2c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6898      	ldr	r0, [r3, #8]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	2202      	movs	r2, #2
 8000edc:	2100      	movs	r1, #0
 8000ede:	f006 f917 	bl	8007110 <setvbuf>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000480 	.word	0x20000480
 8000ef0:	20000264 	.word	0x20000264

08000ef4 <_isatty>:

int _isatty(int fd) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db04      	blt.n	8000f0c <_isatty+0x18>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	dc01      	bgt.n	8000f0c <_isatty+0x18>
    return 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e005      	b.n	8000f18 <_isatty+0x24>

  errno = EBADF;
 8000f0c:	f005 fbdc 	bl	80066c8 <__errno>
 8000f10:	4602      	mov	r2, r0
 8000f12:	2309      	movs	r3, #9
 8000f14:	6013      	str	r3, [r2, #0]
  return 0;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_write>:

int _write(int fd, char* ptr, int len) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d002      	beq.n	8000f38 <_write+0x18>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d110      	bne.n	8000f5a <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <_write+0x50>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	2364      	movs	r3, #100	; 0x64
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	f004 fe39 	bl	8005bba <HAL_UART_Transmit>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <_write+0x36>
      return len;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	e008      	b.n	8000f68 <_write+0x48>
    else
      return EIO;
 8000f56:	2305      	movs	r3, #5
 8000f58:	e006      	b.n	8000f68 <_write+0x48>
  }
  errno = EBADF;
 8000f5a:	f005 fbb5 	bl	80066c8 <__errno>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	2309      	movs	r3, #9
 8000f62:	6013      	str	r3, [r2, #0]
  return -1;
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000480 	.word	0x20000480

08000f74 <_close>:

int _close(int fd) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db04      	blt.n	8000f8c <_close+0x18>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	dc01      	bgt.n	8000f8c <_close+0x18>
    return 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e006      	b.n	8000f9a <_close+0x26>

  errno = EBADF;
 8000f8c:	f005 fb9c 	bl	80066c8 <__errno>
 8000f90:	4602      	mov	r2, r0
 8000f92:	2309      	movs	r3, #9
 8000f94:	6013      	str	r3, [r2, #0]
  return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000fae:	f005 fb8b 	bl	80066c8 <__errno>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	2309      	movs	r3, #9
 8000fb6:	6013      	str	r3, [r2, #0]
  return -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_read>:

int _read(int fd, char* ptr, int len) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d110      	bne.n	8000ff8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <_read+0x4c>)
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	2201      	movs	r2, #1
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	f004 fe83 	bl	8005cec <HAL_UART_Receive>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <_read+0x30>
      return 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e008      	b.n	8001006 <_read+0x42>
    else
      return EIO;
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	e006      	b.n	8001006 <_read+0x42>
  }
  errno = EBADF;
 8000ff8:	f005 fb66 	bl	80066c8 <__errno>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	2309      	movs	r3, #9
 8001000:	6013      	str	r3, [r2, #0]
  return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000480 	.word	0x20000480

08001014 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db08      	blt.n	8001036 <_fstat+0x22>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b02      	cmp	r3, #2
 8001028:	dc05      	bgt.n	8001036 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001030:	605a      	str	r2, [r3, #4]
    return 0;
 8001032:	2300      	movs	r3, #0
 8001034:	e005      	b.n	8001042 <_fstat+0x2e>
  }

  errno = EBADF;
 8001036:	f005 fb47 	bl	80066c8 <__errno>
 800103a:	4602      	mov	r2, r0
 800103c:	2309      	movs	r3, #9
 800103e:	6013      	str	r3, [r2, #0]
  return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <SCHEDULER_init+0x20>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 800105a:	f7ff ff25 	bl	8000ea8 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f9ec 	bl	800143c <tasks_init>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000468 	.word	0x20000468

08001070 <SCHEDULER_run>:

void SCHEDULER_run(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8001076:	f000 fa7b 	bl	8001570 <TIME_us>
 800107a:	6078      	str	r0, [r7, #4]
	task_t * task = get_first_task();
 800107c:	f000 f82a 	bl	80010d4 <get_first_task>
 8001080:	6038      	str	r0, [r7, #0]

	while(task_queu_position < task_queu_size && task != NULL){
 8001082:	e015      	b.n	80010b0 <SCHEDULER_run+0x40>

		//TODO : Tâches par évennement
		if(task->static_priority != PRIORITY_REAL_TIME)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f993 3000 	ldrsb.w	r3, [r3]
 800108a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108e:	d00c      	beq.n	80010aa <SCHEDULER_run+0x3a>
			if(current_time_us >= task->last_execution_us + task->desired_period_us)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	699a      	ldr	r2, [r3, #24]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	4413      	add	r3, r2
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	d304      	bcc.n	80010aa <SCHEDULER_run+0x3a>
					current_time_us = task_process(task, current_time_us);
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f000 f83c 	bl	8001120 <task_process>
 80010a8:	6078      	str	r0, [r7, #4]

		task = get_next_task();
 80010aa:	f000 f823 	bl	80010f4 <get_next_task>
 80010ae:	6038      	str	r0, [r7, #0]
	while(task_queu_position < task_queu_size && task != NULL){
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SCHEDULER_run+0x5c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SCHEDULER_run+0x60>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d202      	bcs.n	80010c2 <SCHEDULER_run+0x52>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1e0      	bne.n	8001084 <SCHEDULER_run+0x14>
	}
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000464 	.word	0x20000464
 80010d0:	20000460 	.word	0x20000460

080010d4 <get_first_task>:
	for(uint32_t t = 0; t < task_queu_size; t++)
		load_pourcentage += task_queu[t]->duration_us * 100 / task_queu[t]->desired_period_us ;
	return load_pourcentage ;
}

static task_t * get_first_task(void){
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <get_first_task+0x18>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <get_first_task+0x1c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	20000464 	.word	0x20000464
 80010f0:	20000450 	.word	0x20000450

080010f4 <get_next_task>:

static task_t * get_next_task(void){
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <get_next_task+0x24>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	4a06      	ldr	r2, [pc, #24]	; (8001118 <get_next_task+0x24>)
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <get_next_task+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <get_next_task+0x28>)
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000464 	.word	0x20000464
 800111c:	20000450 	.word	0x20000450

08001120 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <task_process+0x16>
		return current_time_us ;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	e09d      	b.n	8001272 <task_process+0x152>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	3306      	adds	r3, #6
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	440b      	add	r3, r1
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	1ad2      	subs	r2, r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	66da      	str	r2, [r3, #108]	; 0x6c
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699a      	ldr	r2, [r3, #24]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	1a8a      	subs	r2, r1, r2
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	3306      	adds	r3, #6
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	3306      	adds	r3, #6
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	441a      	add	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	66da      	str	r2, [r3, #108]	; 0x6c
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001186:	4a3d      	ldr	r2, [pc, #244]	; (800127c <task_process+0x15c>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	091a      	lsrs	r2, r3, #4
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	615a      	str	r2, [r3, #20]

	task->last_execution_us = current_time_us ;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	619a      	str	r2, [r3, #24]
	task->process(current_time_us);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	6838      	ldr	r0, [r7, #0]
 800119e:	4798      	blx	r3
	current_time_us = TIME_us();
 80011a0:	f000 f9e6 	bl	8001570 <TIME_us>
 80011a4:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	311c      	adds	r1, #28
 80011b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	1ac9      	subs	r1, r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	321c      	adds	r2, #28
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	311c      	adds	r1, #28
 80011e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	bf38      	it	cc
 80011ee:	461a      	movcc	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	60da      	str	r2, [r3, #12]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	311c      	adds	r1, #28
 8001204:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001208:	441a      	add	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001216:	4a19      	ldr	r2, [pc, #100]	; (800127c <task_process+0x15c>)
 8001218:	fba2 2303 	umull	r2, r3, r2, r3
 800121c:	091a      	lsrs	r2, r3, #4
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	609a      	str	r2, [r3, #8]

	if(task->duration_us_average_array[task->average_index] > 1000)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	321c      	adds	r2, #28
 800122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001234:	d90c      	bls.n	8001250 <task_process+0x130>
		task->duration_us_average_array[task->average_index] ++ ;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	f103 011c 	add.w	r1, r3, #28
 8001242:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001246:	1c51      	adds	r1, r2, #1
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	331c      	adds	r3, #28
 800124c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001264:	2b14      	cmp	r3, #20
 8001266:	d103      	bne.n	8001270 <task_process+0x150>
		task->average_index = 0 ;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	return current_time_us ;
 8001270:	683b      	ldr	r3, [r7, #0]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	cccccccd 	.word	0xcccccccd

08001280 <SCHEDULER_enable_task>:




//Activation ou d�sactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
	if(enable && id < TASK_COUNT)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <SCHEDULER_enable_task+0x2a>
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d808      	bhi.n	80012aa <SCHEDULER_enable_task+0x2a>
		queu_add(TASK_get_task(id));
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f954 	bl	8001548 <TASK_get_task>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f832 	bl	800130c <queu_add>
 80012a8:	e007      	b.n	80012ba <SCHEDULER_enable_task+0x3a>
	else
		queu_remove(TASK_get_task(id));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f94b 	bl	8001548 <TASK_get_task>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f881 	bl	80013bc <queu_remove>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	for(uint32_t t = 0; t < task_queu_size; t++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e00b      	b.n	80012ea <queu_contains+0x26>
		if(task_queu[t] == task)
 80012d2:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <queu_contains+0x40>)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d101      	bne.n	80012e4 <queu_contains+0x20>
			return TRUE ;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e008      	b.n	80012f6 <queu_contains+0x32>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3301      	adds	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <queu_contains+0x44>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d3ee      	bcc.n	80012d2 <queu_contains+0xe>
	return FALSE ;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000450 	.word	0x20000450
 8001308:	20000460 	.word	0x20000460

0800130c <queu_add>:

static bool_e queu_add(task_t * task){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	if(queu_contains(task) || task_queu_size >= TASK_COUNT)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ffd5 	bl	80012c4 <queu_contains>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d103      	bne.n	8001328 <queu_add+0x1c>
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <queu_add+0xa8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <queu_add+0x20>
		return FALSE ;
 8001328:	2300      	movs	r3, #0
 800132a:	e03e      	b.n	80013aa <queu_add+0x9e>


	uint32_t t = 0 ;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 8001330:	e037      	b.n	80013a2 <queu_add+0x96>
	{
		if(task_queu[t] == NULL || task->static_priority > task_queu[t]->static_priority){
 8001332:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <queu_add+0xac>)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00a      	beq.n	8001354 <queu_add+0x48>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f993 2000 	ldrsb.w	r2, [r3]
 8001344:	491c      	ldr	r1, [pc, #112]	; (80013b8 <queu_add+0xac>)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800134c:	f993 3000 	ldrsb.w	r3, [r3]
 8001350:	429a      	cmp	r2, r3
 8001352:	dd23      	ble.n	800139c <queu_add+0x90>
			if(task_queu[t] != NULL)
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <queu_add+0xac>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d011      	beq.n	8001384 <queu_add+0x78>
				memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size +1 - t));
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <queu_add+0xac>)
 8001368:	1898      	adds	r0, r3, r2
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <queu_add+0xac>)
 8001370:	1899      	adds	r1, r3, r2
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <queu_add+0xa8>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	3301      	adds	r3, #1
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	461a      	mov	r2, r3
 8001380:	f005 f9cc 	bl	800671c <memmove>
			task_queu[t] = task ;
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <queu_add+0xac>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <queu_add+0xa8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <queu_add+0xa8>)
 8001396:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8001398:	2301      	movs	r3, #1
 800139a:	e006      	b.n	80013aa <queu_add+0x9e>
		}
		t++;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d9c4      	bls.n	8001332 <queu_add+0x26>
	}
	return FALSE ;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000460 	.word	0x20000460
 80013b8:	20000450 	.word	0x20000450

080013bc <queu_remove>:

static bool_e queu_remove(task_t * task){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task))
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff7d 	bl	80012c4 <queu_contains>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <queu_remove+0x18>
		return FALSE ;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e02a      	b.n	800142a <queu_remove+0x6e>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e021      	b.n	800141e <queu_remove+0x62>
		if(task == task_queu[t]){
 80013da:	4a16      	ldr	r2, [pc, #88]	; (8001434 <queu_remove+0x78>)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d117      	bne.n	8001418 <queu_remove+0x5c>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4a11      	ldr	r2, [pc, #68]	; (8001434 <queu_remove+0x78>)
 80013ee:	1898      	adds	r0, r3, r2
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3301      	adds	r3, #1
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <queu_remove+0x78>)
 80013f8:	1899      	adds	r1, r3, r2
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <queu_remove+0x7c>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	461a      	mov	r2, r3
 8001406:	f005 f989 	bl	800671c <memmove>
			task_queu_size -- ;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <queu_remove+0x7c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3b01      	subs	r3, #1
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <queu_remove+0x7c>)
 8001412:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8001414:	2301      	movs	r3, #1
 8001416:	e008      	b.n	800142a <queu_remove+0x6e>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3301      	adds	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <queu_remove+0x7c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d3d8      	bcc.n	80013da <queu_remove+0x1e>
		}
	}
	return FALSE ;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000450 	.word	0x20000450
 8001438:	20000460 	.word	0x20000460

0800143c <tasks_init>:
#include "task.h"
#include "../scheduler/scheduler.h"

static system_t * sys;

void tasks_init(system_t * sys_){
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <tasks_init+0x30>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_LED, TRUE);
 800144a:	2101      	movs	r1, #1
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff ff17 	bl	8001280 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_PRINTF, TRUE);
 8001452:	2101      	movs	r1, #1
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff ff13 	bl	8001280 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO, TRUE);
 800145a:	2101      	movs	r1, #1
 800145c:	2002      	movs	r0, #2
 800145e:	f7ff ff0f 	bl	8001280 <SCHEDULER_enable_task>

}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000046c 	.word	0x2000046c

08001470 <process_print_f>:

void process_print_f(uint32_t current_time_us){
 8001470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001474:	b088      	sub	sp, #32
 8001476:	af06      	add	r7, sp, #24
 8001478:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);

	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	printf("%f\t%f\t%f\t%lu\n",sys->sensors.acc.raw[0], sys->sensors.acc.raw[1], sys->sensors.acc.raw[2], TASK_get_task(TASK_GYRO)->duration_us);
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <process_print_f+0x74>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f85f 	bl	8000548 <__aeabi_f2d>
 800148a:	4682      	mov	sl, r0
 800148c:	468b      	mov	fp, r1
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <process_print_f+0x74>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001496:	3304      	adds	r3, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f854 	bl	8000548 <__aeabi_f2d>
 80014a0:	4604      	mov	r4, r0
 80014a2:	460d      	mov	r5, r1
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <process_print_f+0x74>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80014ac:	3308      	adds	r3, #8
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f849 	bl	8000548 <__aeabi_f2d>
 80014b6:	4680      	mov	r8, r0
 80014b8:	4689      	mov	r9, r1
 80014ba:	2002      	movs	r0, #2
 80014bc:	f000 f844 	bl	8001548 <TASK_get_task>
 80014c0:	4603      	mov	r3, r0
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	9304      	str	r3, [sp, #16]
 80014c6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014ca:	e9cd 4500 	strd	r4, r5, [sp]
 80014ce:	4652      	mov	r2, sl
 80014d0:	465b      	mov	r3, fp
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <process_print_f+0x78>)
 80014d4:	f005 fda0 	bl	8007018 <iprintf>
	//printf("%d\n", sys->sensors.gyro.mpu->gyro_raw[0]);
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014e2:	bf00      	nop
 80014e4:	2000046c 	.word	0x2000046c
 80014e8:	08009000 	.word	0x08009000

080014ec <process_led>:


void process_led(uint32_t current_time_us){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	LED_SEQUENCE_play(&sys->ihm.led_blue, current_time_us);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <process_led+0x38>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3338      	adds	r3, #56	; 0x38
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f005 f88f 	bl	8006620 <LED_SEQUENCE_play>
	LED_SEQUENCE_play(&sys->ihm.led_red, current_time_us);
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <process_led+0x38>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	f005 f889 	bl	8006620 <LED_SEQUENCE_play>
	LED_SEQUENCE_play(&sys->ihm.led_green, current_time_us);
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <process_led+0x38>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	331c      	adds	r3, #28
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	f005 f882 	bl	8006620 <LED_SEQUENCE_play>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000046c 	.word	0x2000046c

08001528 <process_gyro>:

void process_gyro(uint32_t current_time_us){
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <process_gyro+0x1c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	33c8      	adds	r3, #200	; 0xc8
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f861 	bl	80015fe <ACC_update>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000046c 	.word	0x2000046c

08001548 <TASK_get_task>:
		[TASK_PRINTF] = 		DEFINE_TASK(TASK_PRINTF, 			PRIORITY_HIGH, 			process_print_f, 			PERIOD_US_FROM_HERTZ(20)),
		[TASK_LED] = 			DEFINE_TASK(TASK_LED, 				PRIORITY_LOW,	 		process_led, 				PERIOD_US_FROM_HERTZ(10)),
		[TASK_GYRO] = 			DEFINE_TASK(TASK_GYRO, 				PRIORITY_HIGH,	 		process_gyro, 				PERIOD_US_FROM_HERTZ(20))
};

task_t * TASK_get_task(task_ids_t id){
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	22c8      	movs	r2, #200	; 0xc8
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <TASK_get_task+0x24>)
 800155c:	4413      	add	r3, r2
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000000 	.word	0x20000000

08001570 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001576:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8001578:	f001 fc0a 	bl	8002d90 <HAL_GetTick>
 800157c:	4603      	mov	r3, r0
 800157e:	3301      	adds	r3, #1
 8001580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001584:	fb02 f203 	mul.w	r2, r2, r3
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <TIME_us+0x50>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <TIME_us+0x54>)
 8001590:	fba1 1303 	umull	r1, r3, r1, r3
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800159a:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s ait pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us >= t_us)
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <TIME_us+0x58>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d803      	bhi.n	80015ae <TIME_us+0x3e>
		t_us += 1000;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80015ac:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 80015ae:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <TIME_us+0x58>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6013      	str	r3, [r2, #0]

	return t_us;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010
 80015c4:	18618619 	.word	0x18618619
 80015c8:	20000470 	.word	0x20000470

080015cc <ACC_init>:
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	665a      	str	r2, [r3, #100]	; 0x64
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2103      	movs	r1, #3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f983 	bl	80018f0 <MPU_init_acc>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <ACC_update>:
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f9e8 	bl	80019e0 <MPU_update_acc>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <GYRO_init>:


#include "gyro.h"


sensor_state_e GYRO_init(gyro_t * gyro){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

#ifdef GYRO_USE_MPU
	gyro->raw = gyro->mpu.gyro ;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	665a      	str	r2, [r3, #100]	; 0x64
	gyro->state = MPU_init_gyro(&gyro->mpu, MPU_GYRO_250s);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f000 f8d3 	bl	80017e8 <MPU_init_gyro>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	701a      	strb	r2, [r3, #0]
#else
#warning gyro not defined
	gyro->state = SENSOR_ERROR ;
#endif
	return gyro->state ;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	781b      	ldrb	r3, [r3, #0]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <convert_acc>:
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
}

void convert_acc(mpu_t * mpu){
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[2] << 8 | mpu->acc_data[3]);
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[4] << 8 | mpu->acc_data[5]);

#else
	#ifdef MPU_USE_SPI
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21a      	sxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	875a      	strh	r2, [r3, #58]	; 0x3a
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	b21a      	sxth	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21a      	sxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	879a      	strh	r2, [r3, #60]	; 0x3c
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b21a      	sxth	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	87da      	strh	r2, [r3, #62]	; 0x3e
	#endif
#endif
	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80016c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80016de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80016fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <MPU_cs_lock>:

void MPU_cs_lock(mpu_t * mpu){
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6898      	ldr	r0, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	899b      	ldrh	r3, [r3, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	4619      	mov	r1, r3
 8001726:	f002 fb57 	bl	8003dd8 <HAL_GPIO_WritePin>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <MPU_cs_unlock>:

void MPU_cs_unlock(mpu_t * mpu){
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6898      	ldr	r0, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	899b      	ldrh	r3, [r3, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	4619      	mov	r1, r3
 8001746:	f002 fb47 	bl	8003dd8 <HAL_GPIO_WritePin>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <MPU_init>:

/*
 *
 */
sensor_state_e MPU_init(mpu_t * mpu, I2C_HandleTypeDef * hi2c, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	603b      	str	r3, [r7, #0]
	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2201      	movs	r2, #1
 8001764:	73da      	strb	r2, [r3, #15]



	//Requiert un I2C ou SPI pour fonctionner
	if(hi2c == NULL && hspi == NULL)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <MPU_init+0x26>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <MPU_init+0x26>
		return mpu->state ;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	7bdb      	ldrb	r3, [r3, #15]
 8001776:	e033      	b.n	80017e0 <MPU_init+0x8e>

	//Application des paramètres de connexion
	mpu->hi2c = hi2c ;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	601a      	str	r2, [r3, #0]
	mpu->hspi = hspi ;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8c3a      	ldrh	r2, [r7, #32]
 8001788:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	22d0      	movs	r2, #208	; 0xd0
 8001794:	745a      	strb	r2, [r3, #17]
#ifdef MPU_USE_I2C
	uint8_t wakeup_data = 0x00 ;
	mpu->hal_state  = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &wakeup_data, 1, 10);
#endif
#ifdef	MPU_USE_SPI
	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x00} ;
 8001796:	236b      	movs	r3, #107	; 0x6b
 8001798:	753b      	strb	r3, [r7, #20]
 800179a:	2300      	movs	r3, #0
 800179c:	757b      	strb	r3, [r7, #21]

	MPU_cs_lock(mpu);
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7ff ffb7 	bl	8001712 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6858      	ldr	r0, [r3, #4]
 80017a8:	f107 0114 	add.w	r1, r7, #20
 80017ac:	2302      	movs	r3, #2
 80017ae:	2202      	movs	r2, #2
 80017b0:	f003 f904 	bl	80049bc <HAL_SPI_Transmit>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff ffb8 	bl	8001732 <MPU_cs_unlock>
#endif

	if(mpu->hal_state != HAL_OK){
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	7b9b      	ldrb	r3, [r3, #14]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <MPU_init+0x84>
		mpu->state = SENSOR_ERROR ;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2205      	movs	r2, #5
 80017ce:	73da      	strb	r2, [r3, #15]
		return mpu->state ;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	7bdb      	ldrb	r3, [r3, #15]
 80017d4:	e004      	b.n	80017e0 <MPU_init+0x8e>
	}


	//Si on réussi tous les test, on dit qu'on est bueno
	mpu->state = SENSOR_IDDLE ;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	73da      	strb	r2, [r3, #15]
	return mpu->state ;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	7bdb      	ldrb	r3, [r3, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <MPU_init_gyro>:

/*
 *
 */
sensor_state_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
	mpu->gyro_range = gyro_range ;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7bdb      	ldrb	r3, [r3, #15]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MPU_init_gyro+0x20>
		return SENSOR_ERROR ;
 8001804:	2305      	movs	r3, #5
 8001806:	e067      	b.n	80018d8 <MPU_init_gyro+0xf0>
		mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);

#else
	#ifdef MPU_USE_SPI
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8001808:	239b      	movs	r3, #155	; 0x9b
 800180a:	733b      	strb	r3, [r7, #12]
	MPU_cs_lock(mpu);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff80 	bl	8001712 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, &temp[1], 1, 2);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6858      	ldr	r0, [r3, #4]
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	f107 010c 	add.w	r1, r7, #12
 8001820:	2302      	movs	r3, #2
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2301      	movs	r3, #1
 8001826:	f003 f9fd 	bl	8004c24 <HAL_SPI_TransmitReceive>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff7d 	bl	8001732 <MPU_cs_unlock>
	if(mpu->hal_state == HAL_OK){
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7b9b      	ldrb	r3, [r3, #14]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d122      	bne.n	8001886 <MPU_init_gyro+0x9e>
		HAL_Delay(1);
 8001840:	2001      	movs	r0, #1
 8001842:	f001 fab1 	bl	8002da8 <HAL_Delay>
		MPU_cs_lock(mpu);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ff63 	bl	8001712 <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 800184c:	231b      	movs	r3, #27
 800184e:	733b      	strb	r3, [r7, #12]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 8001850:	7b7b      	ldrb	r3, [r7, #13]
 8001852:	b25b      	sxtb	r3, r3
 8001854:	f023 0318 	bic.w	r3, r3, #24
 8001858:	b25a      	sxtb	r2, r3
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	b25b      	sxtb	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b25b      	sxtb	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	737b      	strb	r3, [r7, #13]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6858      	ldr	r0, [r3, #4]
 800186c:	f107 010c 	add.w	r1, r7, #12
 8001870:	2302      	movs	r3, #2
 8001872:	2202      	movs	r2, #2
 8001874:	f003 f8a2 	bl	80049bc <HAL_SPI_Transmit>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff56 	bl	8001732 <MPU_cs_unlock>


	#endif
#endif

	if(mpu->hal_state != HAL_OK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7b9b      	ldrb	r3, [r3, #14]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <MPU_init_gyro+0xb0>
	{
		mpu->state = SENSOR_ERROR ;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2205      	movs	r2, #5
 8001892:	73da      	strb	r2, [r3, #15]
		return SENSOR_ERROR ;
 8001894:	2305      	movs	r3, #5
 8001896:	e01f      	b.n	80018d8 <MPU_init_gyro+0xf0>
	}

	switch(gyro_range){
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d81a      	bhi.n	80018d4 <MPU_init_gyro+0xec>
 800189e:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <MPU_init_gyro+0xbc>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	080018bd 	.word	0x080018bd
 80018ac:	080018c5 	.word	0x080018c5
 80018b0:	080018cd 	.word	0x080018cd
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <MPU_init_gyro+0xf8>)
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80018ba:	e00b      	b.n	80018d4 <MPU_init_gyro+0xec>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <MPU_init_gyro+0xfc>)
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80018c2:	e007      	b.n	80018d4 <MPU_init_gyro+0xec>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <MPU_init_gyro+0x100>)
 80018c8:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80018ca:	e003      	b.n	80018d4 <MPU_init_gyro+0xec>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <MPU_init_gyro+0x104>)
 80018d0:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80018d2:	bf00      	nop
	}
	return mpu->state ;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7bdb      	ldrb	r3, [r3, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	3bfa232d 	.word	0x3bfa232d
 80018e4:	3c7a232d 	.word	0x3c7a232d
 80018e8:	3cf9c190 	.word	0x3cf9c190
 80018ec:	3d79c190 	.word	0x3d79c190

080018f0 <MPU_init_acc>:

/*
 *
 */
sensor_state_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
	mpu->acc_range = acc_range ;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7bdb      	ldrb	r3, [r3, #15]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MPU_init_acc+0x20>
		return SENSOR_ERROR ;
 800190c:	2305      	movs	r3, #5
 800190e:	e063      	b.n	80019d8 <MPU_init_acc+0xe8>
	temp = (temp & 0xE7) | (uint8_t)acc_range << 3;
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
#else
	#ifdef MPU_USE_SPI
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8001910:	239c      	movs	r3, #156	; 0x9c
 8001912:	733b      	strb	r3, [r7, #12]
	MPU_cs_lock(mpu);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fefc 	bl	8001712 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, &temp[1], 1, 2);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6858      	ldr	r0, [r3, #4]
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	f107 010c 	add.w	r1, r7, #12
 8001928:	2302      	movs	r3, #2
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	f003 f979 	bl	8004c24 <HAL_SPI_TransmitReceive>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fef9 	bl	8001732 <MPU_cs_unlock>
	if(mpu->hal_state == HAL_OK){
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7b9b      	ldrb	r3, [r3, #14]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d122      	bne.n	800198e <MPU_init_acc+0x9e>
		HAL_Delay(1);
 8001948:	2001      	movs	r0, #1
 800194a:	f001 fa2d 	bl	8002da8 <HAL_Delay>
		MPU_cs_lock(mpu);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fedf 	bl	8001712 <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 8001954:	231c      	movs	r3, #28
 8001956:	733b      	strb	r3, [r7, #12]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 8001958:	7b7b      	ldrb	r3, [r7, #13]
 800195a:	b25b      	sxtb	r3, r3
 800195c:	f023 0318 	bic.w	r3, r3, #24
 8001960:	b25a      	sxtb	r2, r3
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	b25b      	sxtb	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b25b      	sxtb	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	737b      	strb	r3, [r7, #13]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  1, 2);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6858      	ldr	r0, [r3, #4]
 8001974:	f107 010c 	add.w	r1, r7, #12
 8001978:	2302      	movs	r3, #2
 800197a:	2201      	movs	r2, #1
 800197c:	f003 f81e 	bl	80049bc <HAL_SPI_Transmit>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fed2 	bl	8001732 <MPU_cs_unlock>
	}

	#endif
#endif

	switch(acc_range){
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d81f      	bhi.n	80019d4 <MPU_init_acc+0xe4>
 8001994:	a201      	add	r2, pc, #4	; (adr r2, 800199c <MPU_init_acc+0xac>)
 8001996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199a:	bf00      	nop
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	080019b7 	.word	0x080019b7
 80019a4:	080019c1 	.word	0x080019c1
 80019a8:	080019cb 	.word	0x080019cb
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80019b2:	651a      	str	r2, [r3, #80]	; 0x50
			break;
 80019b4:	e00e      	b.n	80019d4 <MPU_init_acc+0xe4>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80019bc:	651a      	str	r2, [r3, #80]	; 0x50
			break;
 80019be:	e009      	b.n	80019d4 <MPU_init_acc+0xe4>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80019c6:	651a      	str	r2, [r3, #80]	; 0x50
			break;
 80019c8:	e004      	b.n	80019d4 <MPU_init_acc+0xe4>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80019d0:	651a      	str	r2, [r3, #80]	; 0x50
			break;
 80019d2:	bf00      	nop
	}

	return mpu->state ;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7bdb      	ldrb	r3, [r3, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_IDDLE ;

}

sensor_state_e MPU_update_acc(mpu_t * mpu){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	6078      	str	r0, [r7, #4]

	//On réserve le mpu
	if(mpu->state != SENSOR_IDDLE){
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7bdb      	ldrb	r3, [r3, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MPU_update_acc+0x14>
		return SENSOR_ERROR ;
 80019f0:	2305      	movs	r3, #5
 80019f2:	e02b      	b.n	8001a4c <MPU_update_acc+0x6c>
	//Update des valeurs
#ifdef MPU_USE_I2C	//Lecture en i2C
	mpu->hal_state = HAL_I2C_Mem_Read(mpu->hi2c, mpu->adresse, MPU6050_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, mpu->gyro_data, 6, 5);
#else
	#ifdef MPU_USE_SPI	//Lecture en SPI
		uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 80019f4:	23bb      	movs	r3, #187	; 0xbb
 80019f6:	723b      	strb	r3, [r7, #8]
 80019f8:	2300      	movs	r3, #0
 80019fa:	727b      	strb	r3, [r7, #9]
 80019fc:	2300      	movs	r3, #0
 80019fe:	72bb      	strb	r3, [r7, #10]
 8001a00:	2300      	movs	r3, #0
 8001a02:	72fb      	strb	r3, [r7, #11]
 8001a04:	2300      	movs	r3, #0
 8001a06:	733b      	strb	r3, [r7, #12]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	737b      	strb	r3, [r7, #13]
		MPU_cs_lock(mpu);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fe80 	bl	8001712 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6858      	ldr	r0, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001a1c:	f107 0108 	add.w	r1, r7, #8
 8001a20:	2302      	movs	r3, #2
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2306      	movs	r3, #6
 8001a26:	f003 f8fd 	bl	8004c24 <HAL_SPI_TransmitReceive>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fe7d 	bl	8001732 <MPU_cs_unlock>
	#else
		return SENSOR_ERROR ;
	#endif
#endif

	if(mpu->hal_state != HAL_OK){
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7b9b      	ldrb	r3, [r3, #14]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MPU_update_acc+0x64>
		return SENSOR_ERROR ;
 8001a40:	2305      	movs	r3, #5
 8001a42:	e003      	b.n	8001a4c <MPU_update_acc+0x6c>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fe06 	bl	8001656 <convert_acc>
	return SENSOR_IDDLE ;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <MX_ADC2_Init+0x98>)
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <MX_ADC2_Init+0x9c>)
 8001a6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <MX_ADC2_Init+0x98>)
 8001a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_ADC2_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <MX_ADC2_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <MX_ADC2_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <MX_ADC2_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <MX_ADC2_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_ADC2_Init+0x98>)
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <MX_ADC2_Init+0xa0>)
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <MX_ADC2_Init+0x98>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_ADC2_Init+0x98>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_ADC2_Init+0x98>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_ADC2_Init+0x98>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <MX_ADC2_Init+0x98>)
 8001ab6:	f001 f999 	bl	8002dec <HAL_ADC_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001ac0:	f000 fb6a 	bl	8002198 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001ac4:	230b      	movs	r3, #11
 8001ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_ADC2_Init+0x98>)
 8001ad6:	f001 f9cd 	bl	8002e74 <HAL_ADC_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001ae0:	f000 fb5a 	bl	8002198 <Error_Handler>
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000484 	.word	0x20000484
 8001af0:	40012100 	.word	0x40012100
 8001af4:	0f000001 	.word	0x0f000001

08001af8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a3c      	ldr	r2, [pc, #240]	; (8001c08 <HAL_ADC_MspInit+0x110>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d171      	bne.n	8001bfe <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <HAL_ADC_MspInit+0x114>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a3a      	ldr	r2, [pc, #232]	; (8001c0c <HAL_ADC_MspInit+0x114>)
 8001b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <HAL_ADC_MspInit+0x114>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_ADC_MspInit+0x114>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a33      	ldr	r2, [pc, #204]	; (8001c0c <HAL_ADC_MspInit+0x114>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_ADC_MspInit+0x114>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_ADC_MspInit+0x114>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a2c      	ldr	r2, [pc, #176]	; (8001c0c <HAL_ADC_MspInit+0x114>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_ADC_MspInit+0x114>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b72:	2303      	movs	r3, #3
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4823      	ldr	r0, [pc, #140]	; (8001c10 <HAL_ADC_MspInit+0x118>)
 8001b82:	f001 ff8f 	bl	8003aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 8001b86:	2302      	movs	r3, #2
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	481e      	ldr	r0, [pc, #120]	; (8001c14 <HAL_ADC_MspInit+0x11c>)
 8001b9a:	f001 ff83 	bl	8003aa4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001ba0:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_ADC_MspInit+0x124>)
 8001ba2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001baa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bbe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bc6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bce:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001be2:	480d      	ldr	r0, [pc, #52]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001be4:	f001 fc76 	bl	80034d4 <HAL_DMA_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001bee:	f000 fad3 	bl	8002198 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001bf6:	639a      	str	r2, [r3, #56]	; 0x38
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_ADC_MspInit+0x120>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40012100 	.word	0x40012100
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020400 	.word	0x40020400
 8001c18:	200004cc 	.word	0x200004cc
 8001c1c:	40026440 	.word	0x40026440

08001c20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <MX_DMA_Init+0xd8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a32      	ldr	r2, [pc, #200]	; (8001cf8 <MX_DMA_Init+0xd8>)
 8001c30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <MX_DMA_Init+0xd8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <MX_DMA_Init+0xd8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <MX_DMA_Init+0xd8>)
 8001c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <MX_DMA_Init+0xd8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	200b      	movs	r0, #11
 8001c64:	f001 fbff 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c68:	200b      	movs	r0, #11
 8001c6a:	f001 fc18 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	200e      	movs	r0, #14
 8001c74:	f001 fbf7 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001c78:	200e      	movs	r0, #14
 8001c7a:	f001 fc10 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	200f      	movs	r0, #15
 8001c84:	f001 fbef 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c88:	200f      	movs	r0, #15
 8001c8a:	f001 fc08 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2011      	movs	r0, #17
 8001c94:	f001 fbe7 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c98:	2011      	movs	r0, #17
 8001c9a:	f001 fc00 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	202f      	movs	r0, #47	; 0x2f
 8001ca4:	f001 fbdf 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001ca8:	202f      	movs	r0, #47	; 0x2f
 8001caa:	f001 fbf8 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2038      	movs	r0, #56	; 0x38
 8001cb4:	f001 fbd7 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cb8:	2038      	movs	r0, #56	; 0x38
 8001cba:	f001 fbf0 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	203a      	movs	r0, #58	; 0x3a
 8001cc4:	f001 fbcf 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001cc8:	203a      	movs	r0, #58	; 0x3a
 8001cca:	f001 fbe8 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	203b      	movs	r0, #59	; 0x3b
 8001cd4:	f001 fbc7 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001cd8:	203b      	movs	r0, #59	; 0x3b
 8001cda:	f001 fbe0 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2045      	movs	r0, #69	; 0x45
 8001ce4:	f001 fbbf 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001ce8:	2045      	movs	r0, #69	; 0x45
 8001cea:	f001 fbd8 	bl	800349e <HAL_NVIC_EnableIRQ>

}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a43      	ldr	r2, [pc, #268]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a3c      	ldr	r2, [pc, #240]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a35      	ldr	r2, [pc, #212]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <MX_GPIO_Init+0x12c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 8001d82:	2200      	movs	r2, #0
 8001d84:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8001d88:	4828      	ldr	r0, [pc, #160]	; (8001e2c <MX_GPIO_Init+0x130>)
 8001d8a:	f002 f825 	bl	8003dd8 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2101      	movs	r1, #1
 8001d92:	4826      	ldr	r0, [pc, #152]	; (8001e2c <MX_GPIO_Init+0x130>)
 8001d94:	f002 f820 	bl	8003dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4824      	ldr	r0, [pc, #144]	; (8001e30 <MX_GPIO_Init+0x134>)
 8001d9e:	f002 f81b 	bl	8003dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da8:	4822      	ldr	r0, [pc, #136]	; (8001e34 <MX_GPIO_Init+0x138>)
 8001daa:	f002 f815 	bl	8003dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 8001dae:	f24e 231d 	movw	r3, #57885	; 0xe21d
 8001db2:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4819      	ldr	r0, [pc, #100]	; (8001e2c <MX_GPIO_Init+0x130>)
 8001dc8:	f001 fe6c 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4813      	ldr	r0, [pc, #76]	; (8001e30 <MX_GPIO_Init+0x134>)
 8001de4:	f001 fe5e 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 8001de8:	2302      	movs	r3, #2
 8001dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480d      	ldr	r0, [pc, #52]	; (8001e30 <MX_GPIO_Init+0x134>)
 8001dfc:	f001 fe52 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4806      	ldr	r0, [pc, #24]	; (8001e34 <MX_GPIO_Init+0x138>)
 8001e1a:	f001 fe43 	bl	8003aa4 <HAL_GPIO_Init>

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	; 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020400 	.word	0x40020400

08001e38 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <MX_I2C1_Init+0x50>)
 8001e3e:	4a13      	ldr	r2, [pc, #76]	; (8001e8c <MX_I2C1_Init+0x54>)
 8001e40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_I2C1_Init+0x50>)
 8001e44:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <MX_I2C1_Init+0x58>)
 8001e46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_I2C1_Init+0x50>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_I2C1_Init+0x50>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_I2C1_Init+0x50>)
 8001e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <MX_I2C1_Init+0x50>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_I2C1_Init+0x50>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <MX_I2C1_Init+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_I2C1_Init+0x50>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <MX_I2C1_Init+0x50>)
 8001e76:	f001 ffc9 	bl	8003e0c <HAL_I2C_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e80:	f000 f98a 	bl	8002198 <Error_Handler>
  }

}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000058c 	.word	0x2000058c
 8001e8c:	40005400 	.word	0x40005400
 8001e90:	00061a80 	.word	0x00061a80

08001e94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a47      	ldr	r2, [pc, #284]	; (8001fd0 <HAL_I2C_MspInit+0x13c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	f040 8088 	bne.w	8001fc8 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4a44      	ldr	r2, [pc, #272]	; (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed8:	2312      	movs	r3, #18
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	483a      	ldr	r0, [pc, #232]	; (8001fd8 <HAL_I2C_MspInit+0x144>)
 8001ef0:	f001 fdd8 	bl	8003aa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4a35      	ldr	r2, [pc, #212]	; (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001efe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
 8001f04:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001f10:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f12:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <HAL_I2C_MspInit+0x14c>)
 8001f14:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f1c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f30:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001f3e:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001f50:	4822      	ldr	r0, [pc, #136]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f52:	f001 fabf 	bl	80034d4 <HAL_DMA_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001f5c:	f000 f91c 	bl	8002198 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
 8001f66:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <HAL_I2C_MspInit+0x154>)
 8001f70:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f78:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001fae:	f001 fa91 	bl	80034d4 <HAL_DMA_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001fb8:	f000 f8ee 	bl	8002198 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_I2C_MspInit+0x150>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40005400 	.word	0x40005400
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	200005e0 	.word	0x200005e0
 8001fe0:	40026010 	.word	0x40026010
 8001fe4:	2000052c 	.word	0x2000052c
 8001fe8:	400260b8 	.word	0x400260b8

08001fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff2:	f000 fe67 	bl	8002cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff6:	f000 f865 	bl	80020c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffa:	f7ff fe7f 	bl	8001cfc <MX_GPIO_Init>
  MX_DMA_Init();
 8001ffe:	f7ff fe0f 	bl	8001c20 <MX_DMA_Init>
  MX_I2C1_Init();
 8002002:	f7ff ff19 	bl	8001e38 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002006:	f000 f8cf 	bl	80021a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800200a:	f000 f903 	bl	8002214 <MX_SPI2_Init>
  MX_TIM1_Init();
 800200e:	f000 fb79 	bl	8002704 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002012:	f000 fc97 	bl	8002944 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002016:	f000 fcbf 	bl	8002998 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800201a:	f000 fce7 	bl	80029ec <MX_USART6_UART_Init>
  MX_ADC2_Init();
 800201e:	f7ff fd19 	bl	8001a54 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */


  //Init du GYRO et de l ACC en utilisant un MPU
  MPU_init(&sys.sensors.acc.mpu, NULL, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 8002022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <main+0xb4>)
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <main+0xb8>)
 800202c:	2100      	movs	r1, #0
 800202e:	481e      	ldr	r0, [pc, #120]	; (80020a8 <main+0xbc>)
 8002030:	f7ff fb8f 	bl	8001752 <MPU_init>
  GYRO_init(&sys.sensors.gyro);
 8002034:	481d      	ldr	r0, [pc, #116]	; (80020ac <main+0xc0>)
 8002036:	f7ff faf5 	bl	8001624 <GYRO_init>
  ACC_init(&sys.sensors.acc);
 800203a:	481d      	ldr	r0, [pc, #116]	; (80020b0 <main+0xc4>)
 800203c:	f7ff fac6 	bl	80015cc <ACC_init>

  LED_SEQUENCE_init(&sys.ihm.led_blue, PIN_LED_BLUE_GPIO_Port, PIN_LED_BLUE_Pin, SEQUENCE_LED_1, 200, 12, 1);
 8002040:	2301      	movs	r3, #1
 8002042:	9302      	str	r3, [sp, #8]
 8002044:	230c      	movs	r3, #12
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	23c8      	movs	r3, #200	; 0xc8
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	f640 2328 	movw	r3, #2600	; 0xa28
 8002050:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002054:	4917      	ldr	r1, [pc, #92]	; (80020b4 <main+0xc8>)
 8002056:	4818      	ldr	r0, [pc, #96]	; (80020b8 <main+0xcc>)
 8002058:	f004 fab4 	bl	80065c4 <LED_SEQUENCE_init>
  LED_SEQUENCE_init(&sys.ihm.led_red, PIN_LED_RED_GPIO_Port, PIN_LED_RED_Pin, SEQUENCE_LED_2, 200, 12, 1);
 800205c:	2301      	movs	r3, #1
 800205e:	9302      	str	r3, [sp, #8]
 8002060:	230c      	movs	r3, #12
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	23c8      	movs	r3, #200	; 0xc8
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f640 23bc 	movw	r3, #2748	; 0xabc
 800206c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002070:	4910      	ldr	r1, [pc, #64]	; (80020b4 <main+0xc8>)
 8002072:	4812      	ldr	r0, [pc, #72]	; (80020bc <main+0xd0>)
 8002074:	f004 faa6 	bl	80065c4 <LED_SEQUENCE_init>
  LED_SEQUENCE_init(&sys.ihm.led_green, PIN_LED_GREEN_GPIO_Port, PIN_LED_GREEN_Pin, SEQUENCE_LED_3, 200, 12, 1);
 8002078:	2301      	movs	r3, #1
 800207a:	9302      	str	r3, [sp, #8]
 800207c:	230c      	movs	r3, #12
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	23c8      	movs	r3, #200	; 0xc8
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002088:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800208c:	4909      	ldr	r1, [pc, #36]	; (80020b4 <main+0xc8>)
 800208e:	480c      	ldr	r0, [pc, #48]	; (80020c0 <main+0xd4>)
 8002090:	f004 fa98 	bl	80065c4 <LED_SEQUENCE_init>

  SCHEDULER_init(&sys);
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <main+0xd0>)
 8002096:	f7fe ffd9 	bl	800104c <SCHEDULER_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 800209a:	f7fe ffe9 	bl	8001070 <SCHEDULER_run>
 800209e:	e7fc      	b.n	800209a <main+0xae>
 80020a0:	40020400 	.word	0x40020400
 80020a4:	2000077c 	.word	0x2000077c
 80020a8:	2000070c 	.word	0x2000070c
 80020ac:	20000694 	.word	0x20000694
 80020b0:	20000708 	.word	0x20000708
 80020b4:	40020800 	.word	0x40020800
 80020b8:	20000678 	.word	0x20000678
 80020bc:	20000640 	.word	0x20000640
 80020c0:	2000065c 	.word	0x2000065c

080020c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b094      	sub	sp, #80	; 0x50
 80020c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ca:	f107 0320 	add.w	r3, r7, #32
 80020ce:	2230      	movs	r2, #48	; 0x30
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fb3b 	bl	800674e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	4b28      	ldr	r3, [pc, #160]	; (8002190 <SystemClock_Config+0xcc>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <SystemClock_Config+0xcc>)
 80020f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <SystemClock_Config+0xcc>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002104:	2300      	movs	r3, #0
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <SystemClock_Config+0xd0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a21      	ldr	r2, [pc, #132]	; (8002194 <SystemClock_Config+0xd0>)
 800210e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <SystemClock_Config+0xd0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002124:	2301      	movs	r3, #1
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002128:	2310      	movs	r3, #16
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212c:	2302      	movs	r3, #2
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002130:	2300      	movs	r3, #0
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002134:	2308      	movs	r3, #8
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002138:	23a8      	movs	r3, #168	; 0xa8
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800213c:	2302      	movs	r3, #2
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002140:	2304      	movs	r3, #4
 8002142:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002144:	f107 0320 	add.w	r3, r7, #32
 8002148:	4618      	mov	r0, r3
 800214a:	f001 ff97 	bl	800407c <HAL_RCC_OscConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002154:	f000 f820 	bl	8002198 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002158:	230f      	movs	r3, #15
 800215a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215c:	2302      	movs	r3, #2
 800215e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002164:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800216a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2105      	movs	r1, #5
 8002176:	4618      	mov	r0, r3
 8002178:	f002 f9f0 	bl	800455c <HAL_RCC_ClockConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002182:	f000 f809 	bl	8002198 <Error_Handler>
  }
}
 8002186:	bf00      	nop
 8002188:	3750      	adds	r7, #80	; 0x50
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000

08002198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <MX_SPI1_Init+0x64>)
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <MX_SPI1_Init+0x68>)
 80021b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_SPI1_Init+0x64>)
 80021b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <MX_SPI1_Init+0x64>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <MX_SPI1_Init+0x64>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_SPI1_Init+0x64>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <MX_SPI1_Init+0x64>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_SPI1_Init+0x64>)
 80021d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_SPI1_Init+0x64>)
 80021dc:	2220      	movs	r2, #32
 80021de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <MX_SPI1_Init+0x64>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_SPI1_Init+0x64>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <MX_SPI1_Init+0x64>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_SPI1_Init+0x64>)
 80021f4:	220a      	movs	r2, #10
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <MX_SPI1_Init+0x64>)
 80021fa:	f002 fb7b 	bl	80048f4 <HAL_SPI_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002204:	f7ff ffc8 	bl	8002198 <Error_Handler>
  }

}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000834 	.word	0x20000834
 8002210:	40013000 	.word	0x40013000

08002214 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <MX_SPI2_Init+0x64>)
 800221a:	4a18      	ldr	r2, [pc, #96]	; (800227c <MX_SPI2_Init+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_SPI2_Init+0x64>)
 8002220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002224:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_SPI2_Init+0x64>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <MX_SPI2_Init+0x64>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_SPI2_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_SPI2_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_SPI2_Init+0x64>)
 8002240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002244:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_SPI2_Init+0x64>)
 8002248:	2208      	movs	r2, #8
 800224a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <MX_SPI2_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_SPI2_Init+0x64>)
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <MX_SPI2_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_SPI2_Init+0x64>)
 8002260:	220a      	movs	r2, #10
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_SPI2_Init+0x64>)
 8002266:	f002 fb45 	bl	80048f4 <HAL_SPI_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002270:	f7ff ff92 	bl	8002198 <Error_Handler>
  }

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000077c 	.word	0x2000077c
 800227c:	40003800 	.word	0x40003800

08002280 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a8e      	ldr	r2, [pc, #568]	; (80024d8 <HAL_SPI_MspInit+0x258>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	f040 8089 	bne.w	80023b6 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	4b8c      	ldr	r3, [pc, #560]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	4a8b      	ldr	r2, [pc, #556]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80022ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022b2:	6453      	str	r3, [r2, #68]	; 0x44
 80022b4:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	4b85      	ldr	r3, [pc, #532]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	4a84      	ldr	r2, [pc, #528]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6313      	str	r3, [r2, #48]	; 0x30
 80022d0:	4b82      	ldr	r3, [pc, #520]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022dc:	23e0      	movs	r3, #224	; 0xe0
 80022de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ec:	2305      	movs	r3, #5
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4619      	mov	r1, r3
 80022f6:	487a      	ldr	r0, [pc, #488]	; (80024e0 <HAL_SPI_MspInit+0x260>)
 80022f8:	f001 fbd4 	bl	8003aa4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80022fc:	4b79      	ldr	r3, [pc, #484]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 80022fe:	4a7a      	ldr	r2, [pc, #488]	; (80024e8 <HAL_SPI_MspInit+0x268>)
 8002300:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002302:	4b78      	ldr	r3, [pc, #480]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 8002304:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002308:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800230a:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002310:	4b74      	ldr	r3, [pc, #464]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 8002318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800231c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800231e:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002324:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800232a:	4b6e      	ldr	r3, [pc, #440]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 800232c:	2200      	movs	r2, #0
 800232e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002330:	4b6c      	ldr	r3, [pc, #432]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 8002332:	2200      	movs	r2, #0
 8002334:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002336:	4b6b      	ldr	r3, [pc, #428]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 8002338:	2200      	movs	r2, #0
 800233a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800233c:	4869      	ldr	r0, [pc, #420]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 800233e:	f001 f8c9 	bl	80034d4 <HAL_DMA_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002348:	f7ff ff26 	bl	8002198 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 8002350:	64da      	str	r2, [r3, #76]	; 0x4c
 8002352:	4a64      	ldr	r2, [pc, #400]	; (80024e4 <HAL_SPI_MspInit+0x264>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 800235a:	4a65      	ldr	r2, [pc, #404]	; (80024f0 <HAL_SPI_MspInit+0x270>)
 800235c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 8002360:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002364:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002366:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800236c:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002372:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 8002374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002378:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237a:	4b5c      	ldr	r3, [pc, #368]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002380:	4b5a      	ldr	r3, [pc, #360]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002386:	4b59      	ldr	r3, [pc, #356]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 8002388:	2200      	movs	r2, #0
 800238a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800238c:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 800238e:	2200      	movs	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002392:	4b56      	ldr	r3, [pc, #344]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 8002394:	2200      	movs	r2, #0
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002398:	4854      	ldr	r0, [pc, #336]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 800239a:	f001 f89b 	bl	80034d4 <HAL_DMA_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80023a4:	f7ff fef8 	bl	8002198 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a50      	ldr	r2, [pc, #320]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 80023ac:	649a      	str	r2, [r3, #72]	; 0x48
 80023ae:	4a4f      	ldr	r2, [pc, #316]	; (80024ec <HAL_SPI_MspInit+0x26c>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80023b4:	e08c      	b.n	80024d0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a4e      	ldr	r2, [pc, #312]	; (80024f4 <HAL_SPI_MspInit+0x274>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f040 8087 	bne.w	80024d0 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b45      	ldr	r3, [pc, #276]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a44      	ldr	r2, [pc, #272]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b42      	ldr	r3, [pc, #264]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b3e      	ldr	r3, [pc, #248]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a3d      	ldr	r2, [pc, #244]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <HAL_SPI_MspInit+0x25c>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023fa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80023fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800240c:	2305      	movs	r3, #5
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	4619      	mov	r1, r3
 8002416:	4838      	ldr	r0, [pc, #224]	; (80024f8 <HAL_SPI_MspInit+0x278>)
 8002418:	f001 fb44 	bl	8003aa4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800241c:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 800241e:	4a38      	ldr	r2, [pc, #224]	; (8002500 <HAL_SPI_MspInit+0x280>)
 8002420:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002422:	4b36      	ldr	r3, [pc, #216]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002428:	4b34      	ldr	r3, [pc, #208]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800242e:	4b33      	ldr	r3, [pc, #204]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002434:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 8002436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800243a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002448:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800244e:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002454:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 8002456:	2200      	movs	r2, #0
 8002458:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800245a:	4828      	ldr	r0, [pc, #160]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 800245c:	f001 f83a 	bl	80034d4 <HAL_DMA_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 8002466:	f7ff fe97 	bl	8002198 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a23      	ldr	r2, [pc, #140]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 800246e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002470:	4a22      	ldr	r2, [pc, #136]	; (80024fc <HAL_SPI_MspInit+0x27c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_SPI_MspInit+0x284>)
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_SPI_MspInit+0x288>)
 800247a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <HAL_SPI_MspInit+0x284>)
 800247e:	2200      	movs	r2, #0
 8002480:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_SPI_MspInit+0x284>)
 8002484:	2240      	movs	r2, #64	; 0x40
 8002486:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_SPI_MspInit+0x284>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_SPI_MspInit+0x284>)
 8002490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002494:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_SPI_MspInit+0x284>)
 8002498:	2200      	movs	r2, #0
 800249a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_SPI_MspInit+0x284>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_SPI_MspInit+0x284>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_SPI_MspInit+0x284>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_SPI_MspInit+0x284>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80024b4:	4813      	ldr	r0, [pc, #76]	; (8002504 <HAL_SPI_MspInit+0x284>)
 80024b6:	f001 f80d 	bl	80034d4 <HAL_DMA_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 80024c0:	f7ff fe6a 	bl	8002198 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <HAL_SPI_MspInit+0x284>)
 80024c8:	649a      	str	r2, [r3, #72]	; 0x48
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_SPI_MspInit+0x284>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024d0:	bf00      	nop
 80024d2:	3730      	adds	r7, #48	; 0x30
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40013000 	.word	0x40013000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020000 	.word	0x40020000
 80024e4:	2000088c 	.word	0x2000088c
 80024e8:	40026410 	.word	0x40026410
 80024ec:	2000094c 	.word	0x2000094c
 80024f0:	40026458 	.word	0x40026458
 80024f4:	40003800 	.word	0x40003800
 80024f8:	40020400 	.word	0x40020400
 80024fc:	200007d4 	.word	0x200007d4
 8002500:	40026058 	.word	0x40026058
 8002504:	200008ec 	.word	0x200008ec
 8002508:	40026070 	.word	0x40026070

0800250c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_MspInit+0x4c>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <HAL_MspInit+0x4c>)
 800251c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <HAL_MspInit+0x4c>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_MspInit+0x4c>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_MspInit+0x4c>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_MspInit+0x4c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256e:	e7fe      	b.n	800256e <HardFault_Handler+0x4>

08002570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <MemManage_Handler+0x4>

08002576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <BusFault_Handler+0x4>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <UsageFault_Handler+0x4>

08002582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b0:	f000 fbda 	bl	8002d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <DMA1_Stream0_IRQHandler+0x10>)
 80025be:	f001 f837 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200005e0 	.word	0x200005e0

080025cc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <DMA1_Stream3_IRQHandler+0x10>)
 80025d2:	f001 f82d 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200007d4 	.word	0x200007d4

080025e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <DMA1_Stream4_IRQHandler+0x10>)
 80025e6:	f001 f823 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200008ec 	.word	0x200008ec

080025f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <DMA1_Stream6_IRQHandler+0x10>)
 80025fa:	f001 f819 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000a8c 	.word	0x20000a8c

08002608 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <DMA1_Stream7_IRQHandler+0x10>)
 800260e:	f001 f80f 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2000052c 	.word	0x2000052c

0800261c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <DMA2_Stream0_IRQHandler+0x10>)
 8002622:	f001 f805 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000088c 	.word	0x2000088c

08002630 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <DMA2_Stream2_IRQHandler+0x10>)
 8002636:	f000 fffb 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200004cc 	.word	0x200004cc

08002644 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <DMA2_Stream3_IRQHandler+0x10>)
 800264a:	f000 fff1 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000094c 	.word	0x2000094c

08002658 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <DMA2_Stream6_IRQHandler+0x10>)
 800265e:	f000 ffe7 	bl	8003630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000a2c 	.word	0x20000a2c

0800266c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <_sbrk+0x5c>)
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <_sbrk+0x60>)
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <_sbrk+0x64>)
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <_sbrk+0x68>)
 800268c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	429a      	cmp	r2, r3
 800269a:	d207      	bcs.n	80026ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800269c:	f004 f814 	bl	80066c8 <__errno>
 80026a0:	4602      	mov	r2, r0
 80026a2:	230c      	movs	r3, #12
 80026a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e009      	b.n	80026c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <_sbrk+0x64>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <_sbrk+0x64>)
 80026bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20020000 	.word	0x20020000
 80026cc:	00000400 	.word	0x00000400
 80026d0:	20000474 	.word	0x20000474
 80026d4:	20000b78 	.word	0x20000b78

080026d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <SystemInit+0x28>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <SystemInit+0x28>)
 80026e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <SystemInit+0x28>)
 80026ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026f2:	609a      	str	r2, [r3, #8]
#endif
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b096      	sub	sp, #88	; 0x58
 8002708:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002718:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	611a      	str	r2, [r3, #16]
 8002732:	615a      	str	r2, [r3, #20]
 8002734:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2220      	movs	r2, #32
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f004 f806 	bl	800674e <memset>

  htim1.Instance = TIM1;
 8002742:	4b50      	ldr	r3, [pc, #320]	; (8002884 <MX_TIM1_Init+0x180>)
 8002744:	4a50      	ldr	r2, [pc, #320]	; (8002888 <MX_TIM1_Init+0x184>)
 8002746:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002748:	4b4e      	ldr	r3, [pc, #312]	; (8002884 <MX_TIM1_Init+0x180>)
 800274a:	2200      	movs	r2, #0
 800274c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274e:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <MX_TIM1_Init+0x180>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002754:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <MX_TIM1_Init+0x180>)
 8002756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275c:	4b49      	ldr	r3, [pc, #292]	; (8002884 <MX_TIM1_Init+0x180>)
 800275e:	2200      	movs	r2, #0
 8002760:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002762:	4b48      	ldr	r3, [pc, #288]	; (8002884 <MX_TIM1_Init+0x180>)
 8002764:	2200      	movs	r2, #0
 8002766:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002768:	4b46      	ldr	r3, [pc, #280]	; (8002884 <MX_TIM1_Init+0x180>)
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800276e:	4845      	ldr	r0, [pc, #276]	; (8002884 <MX_TIM1_Init+0x180>)
 8002770:	f002 fca6 	bl	80050c0 <HAL_TIM_Base_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800277a:	f7ff fd0d 	bl	8002198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800277e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002782:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002788:	4619      	mov	r1, r3
 800278a:	483e      	ldr	r0, [pc, #248]	; (8002884 <MX_TIM1_Init+0x180>)
 800278c:	f002 fd58 	bl	8005240 <HAL_TIM_ConfigClockSource>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002796:	f7ff fcff 	bl	8002198 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800279a:	483a      	ldr	r0, [pc, #232]	; (8002884 <MX_TIM1_Init+0x180>)
 800279c:	f002 fcbb 	bl	8005116 <HAL_TIM_OC_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80027a6:	f7ff fcf7 	bl	8002198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027b6:	4619      	mov	r1, r3
 80027b8:	4832      	ldr	r0, [pc, #200]	; (8002884 <MX_TIM1_Init+0x180>)
 80027ba:	f003 f8e3 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80027c4:	f7ff fce8 	bl	8002198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027dc:	2300      	movs	r3, #0
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e8:	2200      	movs	r2, #0
 80027ea:	4619      	mov	r1, r3
 80027ec:	4825      	ldr	r0, [pc, #148]	; (8002884 <MX_TIM1_Init+0x180>)
 80027ee:	f002 fcc7 	bl	8005180 <HAL_TIM_OC_ConfigChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80027f8:	f7ff fcce 	bl	8002198 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002800:	2204      	movs	r2, #4
 8002802:	4619      	mov	r1, r3
 8002804:	481f      	ldr	r0, [pc, #124]	; (8002884 <MX_TIM1_Init+0x180>)
 8002806:	f002 fcbb 	bl	8005180 <HAL_TIM_OC_ConfigChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002810:	f7ff fcc2 	bl	8002198 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002818:	2208      	movs	r2, #8
 800281a:	4619      	mov	r1, r3
 800281c:	4819      	ldr	r0, [pc, #100]	; (8002884 <MX_TIM1_Init+0x180>)
 800281e:	f002 fcaf 	bl	8005180 <HAL_TIM_OC_ConfigChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002828:	f7ff fcb6 	bl	8002198 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800282c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002830:	220c      	movs	r2, #12
 8002832:	4619      	mov	r1, r3
 8002834:	4813      	ldr	r0, [pc, #76]	; (8002884 <MX_TIM1_Init+0x180>)
 8002836:	f002 fca3 	bl	8005180 <HAL_TIM_OC_ConfigChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002840:	f7ff fcaa 	bl	8002198 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800285c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4807      	ldr	r0, [pc, #28]	; (8002884 <MX_TIM1_Init+0x180>)
 8002868:	f003 f908 	bl	8005a7c <HAL_TIMEx_ConfigBreakDeadTime>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002872:	f7ff fc91 	bl	8002198 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002876:	4803      	ldr	r0, [pc, #12]	; (8002884 <MX_TIM1_Init+0x180>)
 8002878:	f000 f82a 	bl	80028d0 <HAL_TIM_MspPostInit>

}
 800287c:	bf00      	nop
 800287e:	3758      	adds	r7, #88	; 0x58
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200009ac 	.word	0x200009ac
 8002888:	40010000 	.word	0x40010000

0800288c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <HAL_TIM_Base_MspInit+0x3c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10d      	bne.n	80028ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_TIM_Base_MspInit+0x40>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <HAL_TIM_Base_MspInit+0x40>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <HAL_TIM_Base_MspInit+0x40>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40010000 	.word	0x40010000
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_TIM_MspPostInit+0x68>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d11e      	bne.n	8002930 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_TIM_MspPostInit+0x6c>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_TIM_MspPostInit+0x6c>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_TIM_MspPostInit+0x6c>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800290e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002912:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002920:	2301      	movs	r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	4619      	mov	r1, r3
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <HAL_TIM_MspPostInit+0x70>)
 800292c:	f001 f8ba 	bl	8003aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002930:	bf00      	nop
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40010000 	.word	0x40010000
 800293c:	40023800 	.word	0x40023800
 8002940:	40020000 	.word	0x40020000

08002944 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <MX_USART2_UART_Init+0x50>)
 800294c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_USART2_UART_Init+0x4c>)
 800297c:	f003 f8d0 	bl	8005b20 <HAL_UART_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002986:	f7ff fc07 	bl	8002198 <Error_Handler>
  }

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000b2c 	.word	0x20000b2c
 8002994:	40004400 	.word	0x40004400

08002998 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <MX_USART3_UART_Init+0x50>)
 80029a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029be:	220c      	movs	r2, #12
 80029c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ce:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_USART3_UART_Init+0x4c>)
 80029d0:	f003 f8a6 	bl	8005b20 <HAL_UART_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029da:	f7ff fbdd 	bl	8002198 <Error_Handler>
  }

}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200009ec 	.word	0x200009ec
 80029e8:	40004800 	.word	0x40004800

080029ec <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <MX_USART6_UART_Init+0x50>)
 80029f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 80029f8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80029fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a12:	220c      	movs	r2, #12
 8002a14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a22:	4805      	ldr	r0, [pc, #20]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a24:	f003 f87c 	bl	8005b20 <HAL_UART_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a2e:	f7ff fbb3 	bl	8002198 <Error_Handler>
  }

}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000aec 	.word	0x20000aec
 8002a3c:	40011400 	.word	0x40011400

08002a40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	; 0x38
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a79      	ldr	r2, [pc, #484]	; (8002c44 <HAL_UART_MspInit+0x204>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d15a      	bne.n	8002b18 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	4b78      	ldr	r3, [pc, #480]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a77      	ldr	r2, [pc, #476]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b75      	ldr	r3, [pc, #468]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	4b71      	ldr	r3, [pc, #452]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a70      	ldr	r2, [pc, #448]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b6e      	ldr	r3, [pc, #440]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a9a:	230c      	movs	r3, #12
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aaa:	2307      	movs	r3, #7
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4865      	ldr	r0, [pc, #404]	; (8002c4c <HAL_UART_MspInit+0x20c>)
 8002ab6:	f000 fff5 	bl	8003aa4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002abc:	4a65      	ldr	r2, [pc, #404]	; (8002c54 <HAL_UART_MspInit+0x214>)
 8002abe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002ac0:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ac6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac8:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ace:	4b60      	ldr	r3, [pc, #384]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad4:	4b5e      	ldr	r3, [pc, #376]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ada:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002adc:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae2:	4b5b      	ldr	r3, [pc, #364]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ae8:	4b59      	ldr	r3, [pc, #356]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aee:	4b58      	ldr	r3, [pc, #352]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af4:	4b56      	ldr	r3, [pc, #344]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002afa:	4855      	ldr	r0, [pc, #340]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002afc:	f000 fcea 	bl	80034d4 <HAL_DMA_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002b06:	f7ff fb47 	bl	8002198 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a50      	ldr	r2, [pc, #320]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b10:	4a4f      	ldr	r2, [pc, #316]	; (8002c50 <HAL_UART_MspInit+0x210>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002b16:	e091      	b.n	8002c3c <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART3)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_UART_MspInit+0x218>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d12d      	bne.n	8002b7e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	4b48      	ldr	r3, [pc, #288]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a47      	ldr	r2, [pc, #284]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b45      	ldr	r3, [pc, #276]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a40      	ldr	r2, [pc, #256]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	4839      	ldr	r0, [pc, #228]	; (8002c5c <HAL_UART_MspInit+0x21c>)
 8002b78:	f000 ff94 	bl	8003aa4 <HAL_GPIO_Init>
}
 8002b7c:	e05e      	b.n	8002c3c <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART6)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a37      	ldr	r2, [pc, #220]	; (8002c60 <HAL_UART_MspInit+0x220>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d159      	bne.n	8002c3c <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	4a2d      	ldr	r2, [pc, #180]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002b92:	f043 0320 	orr.w	r3, r3, #32
 8002b96:	6453      	str	r3, [r2, #68]	; 0x44
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb4:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_UART_MspInit+0x208>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4822      	ldr	r0, [pc, #136]	; (8002c64 <HAL_UART_MspInit+0x224>)
 8002bdc:	f000 ff62 	bl	8003aa4 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002be2:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <HAL_UART_MspInit+0x22c>)
 8002be4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002be8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002bec:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002bf0:	2240      	movs	r2, #64	; 0x40
 8002bf2:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c00:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002c0e:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002c20:	4811      	ldr	r0, [pc, #68]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002c22:	f000 fc57 	bl	80034d4 <HAL_DMA_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 8002c2c:	f7ff fab4 	bl	8002198 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
 8002c36:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <HAL_UART_MspInit+0x228>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002c3c:	bf00      	nop
 8002c3e:	3738      	adds	r7, #56	; 0x38
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40004400 	.word	0x40004400
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	20000a8c 	.word	0x20000a8c
 8002c54:	400260a0 	.word	0x400260a0
 8002c58:	40004800 	.word	0x40004800
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40011400 	.word	0x40011400
 8002c64:	40020800 	.word	0x40020800
 8002c68:	20000a2c 	.word	0x20000a2c
 8002c6c:	400264a0 	.word	0x400264a0

08002c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c76:	e003      	b.n	8002c80 <LoopCopyDataInit>

08002c78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c7e:	3104      	adds	r1, #4

08002c80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c80:	480b      	ldr	r0, [pc, #44]	; (8002cb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c88:	d3f6      	bcc.n	8002c78 <CopyDataInit>
  ldr  r2, =_sbss
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c8c:	e002      	b.n	8002c94 <LoopFillZerobss>

08002c8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c90:	f842 3b04 	str.w	r3, [r2], #4

08002c94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c98:	d3f9      	bcc.n	8002c8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c9a:	f7ff fd1d 	bl	80026d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f003 fd19 	bl	80066d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca2:	f7ff f9a3 	bl	8001fec <main>
  bx  lr    
 8002ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ca8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002cac:	08009300 	.word	0x08009300
  ldr  r0, =_sdata
 8002cb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cb4:	20000434 	.word	0x20000434
  ldr  r2, =_sbss
 8002cb8:	20000434 	.word	0x20000434
  ldr  r3, = _ebss
 8002cbc:	20000b74 	.word	0x20000b74

08002cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC_IRQHandler>
	...

08002cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HAL_Init+0x40>)
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_Init+0x40>)
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_Init+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <HAL_Init+0x40>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cec:	2003      	movs	r0, #3
 8002cee:	f000 fbaf 	bl	8003450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f000 f808 	bl	8002d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf8:	f7ff fc08 	bl	800250c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00

08002d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_InitTick+0x54>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_InitTick+0x58>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fbc7 	bl	80034ba <HAL_SYSTICK_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00e      	b.n	8002d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	d80a      	bhi.n	8002d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f000 fb8f 	bl	8003466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d48:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <HAL_InitTick+0x5c>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000258 	.word	0x20000258
 8002d60:	20000260 	.word	0x20000260
 8002d64:	2000025c 	.word	0x2000025c

08002d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_IncTick+0x20>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x24>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_IncTick+0x24>)
 8002d7a:	6013      	str	r3, [r2, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000260 	.word	0x20000260
 8002d8c:	20000b6c 	.word	0x20000b6c

08002d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return uwTick;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_GetTick+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000b6c 	.word	0x20000b6c

08002da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff ffee 	bl	8002d90 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d005      	beq.n	8002dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_Delay+0x40>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dce:	bf00      	nop
 8002dd0:	f7ff ffde 	bl	8002d90 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d8f7      	bhi.n	8002dd0 <HAL_Delay+0x28>
  {
  }
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000260 	.word	0x20000260

08002dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e033      	b.n	8002e6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fe74 	bl	8001af8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e32:	f023 0302 	bic.w	r3, r3, #2
 8002e36:	f043 0202 	orr.w	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f93a 	bl	80030b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
 8002e5a:	e001      	b.n	8002e60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1c>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e105      	b.n	800309c <HAL_ADC_ConfigChannel+0x228>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	d925      	bls.n	8002eec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68d9      	ldr	r1, [r3, #12]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3b1e      	subs	r3, #30
 8002eb6:	2207      	movs	r2, #7
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	4603      	mov	r3, r0
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4403      	add	r3, r0
 8002ede:	3b1e      	subs	r3, #30
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	e022      	b.n	8002f32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6919      	ldr	r1, [r3, #16]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	2207      	movs	r2, #7
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43da      	mvns	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4403      	add	r3, r0
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d824      	bhi.n	8002f84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	3b05      	subs	r3, #5
 8002f4c:	221f      	movs	r2, #31
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	400a      	ands	r2, r1
 8002f5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4618      	mov	r0, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	3b05      	subs	r3, #5
 8002f76:	fa00 f203 	lsl.w	r2, r0, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
 8002f82:	e04c      	b.n	800301e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b0c      	cmp	r3, #12
 8002f8a:	d824      	bhi.n	8002fd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3b23      	subs	r3, #35	; 0x23
 8002f9e:	221f      	movs	r2, #31
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	400a      	ands	r2, r1
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3b23      	subs	r3, #35	; 0x23
 8002fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd4:	e023      	b.n	800301e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3b41      	subs	r3, #65	; 0x41
 8002fe8:	221f      	movs	r2, #31
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	4618      	mov	r0, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	3b41      	subs	r3, #65	; 0x41
 8003012:	fa00 f203 	lsl.w	r2, r0, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_ADC_ConfigChannel+0x234>)
 8003020:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a21      	ldr	r2, [pc, #132]	; (80030ac <HAL_ADC_ConfigChannel+0x238>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d109      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1cc>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b12      	cmp	r3, #18
 8003032:	d105      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <HAL_ADC_ConfigChannel+0x238>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d123      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x21e>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b10      	cmp	r3, #16
 8003050:	d003      	beq.n	800305a <HAL_ADC_ConfigChannel+0x1e6>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b11      	cmp	r3, #17
 8003058:	d11b      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b10      	cmp	r3, #16
 800306c:	d111      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_ADC_ConfigChannel+0x23c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a10      	ldr	r2, [pc, #64]	; (80030b4 <HAL_ADC_ConfigChannel+0x240>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	0c9a      	lsrs	r2, r3, #18
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003084:	e002      	b.n	800308c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	3b01      	subs	r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f9      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40012300 	.word	0x40012300
 80030ac:	40012000 	.word	0x40012000
 80030b0:	20000258 	.word	0x20000258
 80030b4:	431bde83 	.word	0x431bde83

080030b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030c0:	4b79      	ldr	r3, [pc, #484]	; (80032a8 <ADC_Init+0x1f0>)
 80030c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	431a      	orrs	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	021a      	lsls	r2, r3, #8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6899      	ldr	r1, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	4a58      	ldr	r2, [pc, #352]	; (80032ac <ADC_Init+0x1f4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d022      	beq.n	8003196 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800315e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6899      	ldr	r1, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	e00f      	b.n	80031b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0202 	bic.w	r2, r2, #2
 80031c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6899      	ldr	r1, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7e1b      	ldrb	r3, [r3, #24]
 80031d0:	005a      	lsls	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01b      	beq.n	800321c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003202:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	3b01      	subs	r3, #1
 8003210:	035a      	lsls	r2, r3, #13
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	e007      	b.n	800322c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800323a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	3b01      	subs	r3, #1
 8003248:	051a      	lsls	r2, r3, #20
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800326e:	025a      	lsls	r2, r3, #9
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6899      	ldr	r1, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	029a      	lsls	r2, r3, #10
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40012300 	.word	0x40012300
 80032ac:	0f000001 	.word	0x0f000001

080032b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032cc:	4013      	ands	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e2:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <__NVIC_SetPriorityGrouping+0x44>)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	60d3      	str	r3, [r2, #12]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <__NVIC_GetPriorityGrouping+0x18>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	f003 0307 	and.w	r3, r3, #7
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	2b00      	cmp	r3, #0
 8003324:	db0b      	blt.n	800333e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	4907      	ldr	r1, [pc, #28]	; (800334c <__NVIC_EnableIRQ+0x38>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2001      	movs	r0, #1
 8003336:	fa00 f202 	lsl.w	r2, r0, r2
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	e000e100 	.word	0xe000e100

08003350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	2b00      	cmp	r3, #0
 8003362:	db0a      	blt.n	800337a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	490c      	ldr	r1, [pc, #48]	; (800339c <__NVIC_SetPriority+0x4c>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	440b      	add	r3, r1
 8003374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003378:	e00a      	b.n	8003390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4908      	ldr	r1, [pc, #32]	; (80033a0 <__NVIC_SetPriority+0x50>)
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	3b04      	subs	r3, #4
 8003388:	0112      	lsls	r2, r2, #4
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	440b      	add	r3, r1
 800338e:	761a      	strb	r2, [r3, #24]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000e100 	.word	0xe000e100
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f1c3 0307 	rsb	r3, r3, #7
 80033be:	2b04      	cmp	r3, #4
 80033c0:	bf28      	it	cs
 80033c2:	2304      	movcs	r3, #4
 80033c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d902      	bls.n	80033d4 <NVIC_EncodePriority+0x30>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3b03      	subs	r3, #3
 80033d2:	e000      	b.n	80033d6 <NVIC_EncodePriority+0x32>
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	401a      	ands	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ec:	f04f 31ff 	mov.w	r1, #4294967295
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43d9      	mvns	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fc:	4313      	orrs	r3, r2
         );
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800341c:	d301      	bcc.n	8003422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341e:	2301      	movs	r3, #1
 8003420:	e00f      	b.n	8003442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <SysTick_Config+0x40>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342a:	210f      	movs	r1, #15
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f7ff ff8e 	bl	8003350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <SysTick_Config+0x40>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <SysTick_Config+0x40>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff29 	bl	80032b0 <__NVIC_SetPriorityGrouping>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003478:	f7ff ff3e 	bl	80032f8 <__NVIC_GetPriorityGrouping>
 800347c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff ff8e 	bl	80033a4 <NVIC_EncodePriority>
 8003488:	4602      	mov	r2, r0
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff5d 	bl	8003350 <__NVIC_SetPriority>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff31 	bl	8003314 <__NVIC_EnableIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ffa2 	bl	800340c <SysTick_Config>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034e0:	f7ff fc56 	bl	8002d90 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e099      	b.n	8003624 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003510:	e00f      	b.n	8003532 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003512:	f7ff fc3d 	bl	8002d90 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b05      	cmp	r3, #5
 800351e:	d908      	bls.n	8003532 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2203      	movs	r2, #3
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e078      	b.n	8003624 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e8      	bne.n	8003512 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4b38      	ldr	r3, [pc, #224]	; (800362c <HAL_DMA_Init+0x158>)
 800354c:	4013      	ands	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800355e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	2b04      	cmp	r3, #4
 800358a:	d107      	bne.n	800359c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4313      	orrs	r3, r2
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0307 	bic.w	r3, r3, #7
 80035b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d117      	bne.n	80035f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f9e9 	bl	80039b0 <DMA_CheckFifoParam>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035f2:	2301      	movs	r3, #1
 80035f4:	e016      	b.n	8003624 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9a0 	bl	8003944 <DMA_CalcBaseAndBitshift>
 8003604:	4603      	mov	r3, r0
 8003606:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	223f      	movs	r2, #63	; 0x3f
 800360e:	409a      	lsls	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	f010803f 	.word	0xf010803f

08003630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800363c:	4b92      	ldr	r3, [pc, #584]	; (8003888 <HAL_DMA_IRQHandler+0x258>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a92      	ldr	r2, [pc, #584]	; (800388c <HAL_DMA_IRQHandler+0x25c>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	0a9b      	lsrs	r3, r3, #10
 8003648:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	2208      	movs	r2, #8
 800365c:	409a      	lsls	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01a      	beq.n	800369c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d013      	beq.n	800369c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0204 	bic.w	r2, r2, #4
 8003682:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	2208      	movs	r2, #8
 800368a:	409a      	lsls	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f043 0201 	orr.w	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	2201      	movs	r2, #1
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d012      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	2201      	movs	r2, #1
 80036c0:	409a      	lsls	r2, r3
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f043 0202 	orr.w	r2, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d6:	2204      	movs	r2, #4
 80036d8:	409a      	lsls	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d012      	beq.n	8003708 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00b      	beq.n	8003708 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	2204      	movs	r2, #4
 80036f6:	409a      	lsls	r2, r3
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	f043 0204 	orr.w	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	2210      	movs	r2, #16
 800370e:	409a      	lsls	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d043      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d03c      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	2210      	movs	r2, #16
 800372c:	409a      	lsls	r2, r3
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d018      	beq.n	8003772 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d024      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4798      	blx	r3
 800375e:	e01f      	b.n	80037a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01b      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
 8003770:	e016      	b.n	80037a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d107      	bne.n	8003790 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0208 	bic.w	r2, r2, #8
 800378e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	2220      	movs	r2, #32
 80037a6:	409a      	lsls	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 808e 	beq.w	80038ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8086 	beq.w	80038ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c6:	2220      	movs	r2, #32
 80037c8:	409a      	lsls	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b05      	cmp	r3, #5
 80037d8:	d136      	bne.n	8003848 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0216 	bic.w	r2, r2, #22
 80037e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_DMA_IRQHandler+0x1da>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0208 	bic.w	r2, r2, #8
 8003818:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	223f      	movs	r2, #63	; 0x3f
 8003820:	409a      	lsls	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	2b00      	cmp	r3, #0
 800383c:	d07d      	beq.n	800393a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
        }
        return;
 8003846:	e078      	b.n	800393a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01c      	beq.n	8003890 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d108      	bne.n	8003876 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	2b00      	cmp	r3, #0
 800386a:	d030      	beq.n	80038ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
 8003874:	e02b      	b.n	80038ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d027      	beq.n	80038ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
 8003886:	e022      	b.n	80038ce <HAL_DMA_IRQHandler+0x29e>
 8003888:	20000258 	.word	0x20000258
 800388c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0210 	bic.w	r2, r2, #16
 80038ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d032      	beq.n	800393c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d022      	beq.n	8003928 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2205      	movs	r2, #5
 80038e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3301      	adds	r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	429a      	cmp	r2, r3
 8003904:	d307      	bcc.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f2      	bne.n	80038fa <HAL_DMA_IRQHandler+0x2ca>
 8003914:	e000      	b.n	8003918 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003916:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
 8003938:	e000      	b.n	800393c <HAL_DMA_IRQHandler+0x30c>
        return;
 800393a:	bf00      	nop
    }
  }
}
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop

08003944 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	3b10      	subs	r3, #16
 8003954:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800395e:	4a13      	ldr	r2, [pc, #76]	; (80039ac <DMA_CalcBaseAndBitshift+0x68>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b03      	cmp	r3, #3
 8003970:	d909      	bls.n	8003986 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800397a:	f023 0303 	bic.w	r3, r3, #3
 800397e:	1d1a      	adds	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	659a      	str	r2, [r3, #88]	; 0x58
 8003984:	e007      	b.n	8003996 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800398e:	f023 0303 	bic.w	r3, r3, #3
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	aaaaaaab 	.word	0xaaaaaaab
 80039ac:	08009028 	.word	0x08009028

080039b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11f      	bne.n	8003a0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d855      	bhi.n	8003a7c <DMA_CheckFifoParam+0xcc>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <DMA_CheckFifoParam+0x28>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	080039e9 	.word	0x080039e9
 80039dc:	080039fb 	.word	0x080039fb
 80039e0:	080039e9 	.word	0x080039e9
 80039e4:	08003a7d 	.word	0x08003a7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d045      	beq.n	8003a80 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f8:	e042      	b.n	8003a80 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a02:	d13f      	bne.n	8003a84 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a08:	e03c      	b.n	8003a84 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a12:	d121      	bne.n	8003a58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d836      	bhi.n	8003a88 <DMA_CheckFifoParam+0xd8>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <DMA_CheckFifoParam+0x70>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a37 	.word	0x08003a37
 8003a28:	08003a31 	.word	0x08003a31
 8003a2c:	08003a49 	.word	0x08003a49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      break;
 8003a34:	e02f      	b.n	8003a96 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d024      	beq.n	8003a8c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a46:	e021      	b.n	8003a8c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a50:	d11e      	bne.n	8003a90 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a56:	e01b      	b.n	8003a90 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d902      	bls.n	8003a64 <DMA_CheckFifoParam+0xb4>
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d003      	beq.n	8003a6a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a62:	e018      	b.n	8003a96 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      break;
 8003a68:	e015      	b.n	8003a96 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7a:	e00b      	b.n	8003a94 <DMA_CheckFifoParam+0xe4>
      break;
 8003a7c:	bf00      	nop
 8003a7e:	e00a      	b.n	8003a96 <DMA_CheckFifoParam+0xe6>
      break;
 8003a80:	bf00      	nop
 8003a82:	e008      	b.n	8003a96 <DMA_CheckFifoParam+0xe6>
      break;
 8003a84:	bf00      	nop
 8003a86:	e006      	b.n	8003a96 <DMA_CheckFifoParam+0xe6>
      break;
 8003a88:	bf00      	nop
 8003a8a:	e004      	b.n	8003a96 <DMA_CheckFifoParam+0xe6>
      break;
 8003a8c:	bf00      	nop
 8003a8e:	e002      	b.n	8003a96 <DMA_CheckFifoParam+0xe6>
      break;   
 8003a90:	bf00      	nop
 8003a92:	e000      	b.n	8003a96 <DMA_CheckFifoParam+0xe6>
      break;
 8003a94:	bf00      	nop
    }
  } 
  
  return status; 
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	e16b      	b.n	8003d98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	f040 815a 	bne.w	8003d92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d00b      	beq.n	8003afe <HAL_GPIO_Init+0x5a>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d007      	beq.n	8003afe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003af2:	2b11      	cmp	r3, #17
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b12      	cmp	r3, #18
 8003afc:	d130      	bne.n	8003b60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	2203      	movs	r2, #3
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b34:	2201      	movs	r2, #1
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 0201 	and.w	r2, r3, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d003      	beq.n	8003ba0 <HAL_GPIO_Init+0xfc>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b12      	cmp	r3, #18
 8003b9e:	d123      	bne.n	8003be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	08da      	lsrs	r2, r3, #3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3208      	adds	r2, #8
 8003ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	220f      	movs	r2, #15
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	08da      	lsrs	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3208      	adds	r2, #8
 8003be2:	69b9      	ldr	r1, [r7, #24]
 8003be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0203 	and.w	r2, r3, #3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80b4 	beq.w	8003d92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	4b5f      	ldr	r3, [pc, #380]	; (8003dac <HAL_GPIO_Init+0x308>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	4a5e      	ldr	r2, [pc, #376]	; (8003dac <HAL_GPIO_Init+0x308>)
 8003c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c38:	6453      	str	r3, [r2, #68]	; 0x44
 8003c3a:	4b5c      	ldr	r3, [pc, #368]	; (8003dac <HAL_GPIO_Init+0x308>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c46:	4a5a      	ldr	r2, [pc, #360]	; (8003db0 <HAL_GPIO_Init+0x30c>)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	089b      	lsrs	r3, r3, #2
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	220f      	movs	r2, #15
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a51      	ldr	r2, [pc, #324]	; (8003db4 <HAL_GPIO_Init+0x310>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d02b      	beq.n	8003cca <HAL_GPIO_Init+0x226>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a50      	ldr	r2, [pc, #320]	; (8003db8 <HAL_GPIO_Init+0x314>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d025      	beq.n	8003cc6 <HAL_GPIO_Init+0x222>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a4f      	ldr	r2, [pc, #316]	; (8003dbc <HAL_GPIO_Init+0x318>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01f      	beq.n	8003cc2 <HAL_GPIO_Init+0x21e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a4e      	ldr	r2, [pc, #312]	; (8003dc0 <HAL_GPIO_Init+0x31c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d019      	beq.n	8003cbe <HAL_GPIO_Init+0x21a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a4d      	ldr	r2, [pc, #308]	; (8003dc4 <HAL_GPIO_Init+0x320>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0x216>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4c      	ldr	r2, [pc, #304]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00d      	beq.n	8003cb6 <HAL_GPIO_Init+0x212>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a4b      	ldr	r2, [pc, #300]	; (8003dcc <HAL_GPIO_Init+0x328>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <HAL_GPIO_Init+0x20e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4a      	ldr	r2, [pc, #296]	; (8003dd0 <HAL_GPIO_Init+0x32c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_GPIO_Init+0x20a>
 8003caa:	2307      	movs	r3, #7
 8003cac:	e00e      	b.n	8003ccc <HAL_GPIO_Init+0x228>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	e00c      	b.n	8003ccc <HAL_GPIO_Init+0x228>
 8003cb2:	2306      	movs	r3, #6
 8003cb4:	e00a      	b.n	8003ccc <HAL_GPIO_Init+0x228>
 8003cb6:	2305      	movs	r3, #5
 8003cb8:	e008      	b.n	8003ccc <HAL_GPIO_Init+0x228>
 8003cba:	2304      	movs	r3, #4
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x228>
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e004      	b.n	8003ccc <HAL_GPIO_Init+0x228>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_Init+0x228>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_GPIO_Init+0x228>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	f002 0203 	and.w	r2, r2, #3
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	4093      	lsls	r3, r2
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cdc:	4934      	ldr	r1, [pc, #208]	; (8003db0 <HAL_GPIO_Init+0x30c>)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cea:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_GPIO_Init+0x330>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d0e:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <HAL_GPIO_Init+0x330>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <HAL_GPIO_Init+0x330>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d38:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <HAL_GPIO_Init+0x330>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d3e:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_GPIO_Init+0x330>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d62:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <HAL_GPIO_Init+0x330>)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <HAL_GPIO_Init+0x330>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HAL_GPIO_Init+0x330>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	f67f ae90 	bls.w	8003ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da0:	bf00      	nop
 8003da2:	3724      	adds	r7, #36	; 0x24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40013800 	.word	0x40013800
 8003db4:	40020000 	.word	0x40020000
 8003db8:	40020400 	.word	0x40020400
 8003dbc:	40020800 	.word	0x40020800
 8003dc0:	40020c00 	.word	0x40020c00
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40021400 	.word	0x40021400
 8003dcc:	40021800 	.word	0x40021800
 8003dd0:	40021c00 	.word	0x40021c00
 8003dd4:	40013c00 	.word	0x40013c00

08003dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
 8003de4:	4613      	mov	r3, r2
 8003de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de8:	787b      	ldrb	r3, [r7, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003df4:	e003      	b.n	8003dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	041a      	lsls	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	619a      	str	r2, [r3, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e11f      	b.n	800405e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fe f82e 	bl	8001e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e70:	f000 fd18 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 8003e74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4a7b      	ldr	r2, [pc, #492]	; (8004068 <HAL_I2C_Init+0x25c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d807      	bhi.n	8003e90 <HAL_I2C_Init+0x84>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a7a      	ldr	r2, [pc, #488]	; (800406c <HAL_I2C_Init+0x260>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	bf94      	ite	ls
 8003e88:	2301      	movls	r3, #1
 8003e8a:	2300      	movhi	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e006      	b.n	8003e9e <HAL_I2C_Init+0x92>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a77      	ldr	r2, [pc, #476]	; (8004070 <HAL_I2C_Init+0x264>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	bf94      	ite	ls
 8003e98:	2301      	movls	r3, #1
 8003e9a:	2300      	movhi	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0db      	b.n	800405e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a72      	ldr	r2, [pc, #456]	; (8004074 <HAL_I2C_Init+0x268>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0c9b      	lsrs	r3, r3, #18
 8003eb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a64      	ldr	r2, [pc, #400]	; (8004068 <HAL_I2C_Init+0x25c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d802      	bhi.n	8003ee0 <HAL_I2C_Init+0xd4>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	3301      	adds	r3, #1
 8003ede:	e009      	b.n	8003ef4 <HAL_I2C_Init+0xe8>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	4a63      	ldr	r2, [pc, #396]	; (8004078 <HAL_I2C_Init+0x26c>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4956      	ldr	r1, [pc, #344]	; (8004068 <HAL_I2C_Init+0x25c>)
 8003f10:	428b      	cmp	r3, r1
 8003f12:	d80d      	bhi.n	8003f30 <HAL_I2C_Init+0x124>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1e59      	subs	r1, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	bf38      	it	cc
 8003f2c:	2304      	movcc	r3, #4
 8003f2e:	e04f      	b.n	8003fd0 <HAL_I2C_Init+0x1c4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d111      	bne.n	8003f5c <HAL_I2C_Init+0x150>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e58      	subs	r0, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	440b      	add	r3, r1
 8003f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e012      	b.n	8003f82 <HAL_I2C_Init+0x176>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e58      	subs	r0, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Init+0x17e>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e022      	b.n	8003fd0 <HAL_I2C_Init+0x1c4>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10e      	bne.n	8003fb0 <HAL_I2C_Init+0x1a4>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1e58      	subs	r0, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	440b      	add	r3, r1
 8003fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fae:	e00f      	b.n	8003fd0 <HAL_I2C_Init+0x1c4>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e58      	subs	r0, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	0099      	lsls	r1, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	6809      	ldr	r1, [r1, #0]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6911      	ldr	r1, [r2, #16]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68d2      	ldr	r2, [r2, #12]
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	430b      	orrs	r3, r1
 8004012:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	000186a0 	.word	0x000186a0
 800406c:	001e847f 	.word	0x001e847f
 8004070:	003d08ff 	.word	0x003d08ff
 8004074:	431bde83 	.word	0x431bde83
 8004078:	10624dd3 	.word	0x10624dd3

0800407c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e25b      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d075      	beq.n	8004186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409a:	4ba3      	ldr	r3, [pc, #652]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d00c      	beq.n	80040c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a6:	4ba0      	ldr	r3, [pc, #640]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d112      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b2:	4b9d      	ldr	r3, [pc, #628]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040be:	d10b      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	4b99      	ldr	r3, [pc, #612]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05b      	beq.n	8004184 <HAL_RCC_OscConfig+0x108>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d157      	bne.n	8004184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e236      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e0:	d106      	bne.n	80040f0 <HAL_RCC_OscConfig+0x74>
 80040e2:	4b91      	ldr	r3, [pc, #580]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a90      	ldr	r2, [pc, #576]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e01d      	b.n	800412c <HAL_RCC_OscConfig+0xb0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x98>
 80040fa:	4b8b      	ldr	r3, [pc, #556]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a8a      	ldr	r2, [pc, #552]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b88      	ldr	r3, [pc, #544]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a87      	ldr	r2, [pc, #540]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0xb0>
 8004114:	4b84      	ldr	r3, [pc, #528]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a83      	ldr	r2, [pc, #524]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800411a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b81      	ldr	r3, [pc, #516]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a80      	ldr	r2, [pc, #512]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d013      	beq.n	800415c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fe fe2c 	bl	8002d90 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413c:	f7fe fe28 	bl	8002d90 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	; 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e1fb      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b76      	ldr	r3, [pc, #472]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0xc0>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe fe18 	bl	8002d90 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe fe14 	bl	8002d90 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1e7      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	4b6c      	ldr	r3, [pc, #432]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0xe8>
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d063      	beq.n	800425a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004192:	4b65      	ldr	r3, [pc, #404]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419e:	4b62      	ldr	r3, [pc, #392]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d11c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041aa:	4b5f      	ldr	r3, [pc, #380]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d116      	bne.n	80041e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	4b5c      	ldr	r3, [pc, #368]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_RCC_OscConfig+0x152>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e1bb      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	4b56      	ldr	r3, [pc, #344]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4952      	ldr	r1, [pc, #328]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e2:	e03a      	b.n	800425a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ec:	4b4f      	ldr	r3, [pc, #316]	; (800432c <HAL_RCC_OscConfig+0x2b0>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fe fdcd 	bl	8002d90 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fe fdc9 	bl	8002d90 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e19c      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	4b46      	ldr	r3, [pc, #280]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004218:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4940      	ldr	r1, [pc, #256]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]
 800422c:	e015      	b.n	800425a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422e:	4b3f      	ldr	r3, [pc, #252]	; (800432c <HAL_RCC_OscConfig+0x2b0>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fe fdac 	bl	8002d90 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423c:	f7fe fda8 	bl	8002d90 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e17b      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d030      	beq.n	80042c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426e:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_RCC_OscConfig+0x2b4>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fe fd8c 	bl	8002d90 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800427c:	f7fe fd88 	bl	8002d90 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e15b      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	4b26      	ldr	r3, [pc, #152]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x200>
 800429a:	e015      	b.n	80042c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x2b4>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a2:	f7fe fd75 	bl	8002d90 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042aa:	f7fe fd71 	bl	8002d90 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e144      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a0 	beq.w	8004416 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6413      	str	r3, [r2, #64]	; 0x40
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_OscConfig+0x2b8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d121      	bne.n	8004356 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_RCC_OscConfig+0x2b8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a07      	ldr	r2, [pc, #28]	; (8004334 <HAL_RCC_OscConfig+0x2b8>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431e:	f7fe fd37 	bl	8002d90 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004324:	e011      	b.n	800434a <HAL_RCC_OscConfig+0x2ce>
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	42470000 	.word	0x42470000
 8004330:	42470e80 	.word	0x42470e80
 8004334:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fe fd2a 	bl	8002d90 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0fd      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434a:	4b81      	ldr	r3, [pc, #516]	; (8004550 <HAL_RCC_OscConfig+0x4d4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d106      	bne.n	800436c <HAL_RCC_OscConfig+0x2f0>
 800435e:	4b7d      	ldr	r3, [pc, #500]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a7c      	ldr	r2, [pc, #496]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	e01c      	b.n	80043a6 <HAL_RCC_OscConfig+0x32a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b05      	cmp	r3, #5
 8004372:	d10c      	bne.n	800438e <HAL_RCC_OscConfig+0x312>
 8004374:	4b77      	ldr	r3, [pc, #476]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a76      	ldr	r2, [pc, #472]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 800437a:	f043 0304 	orr.w	r3, r3, #4
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	4b74      	ldr	r3, [pc, #464]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a73      	ldr	r2, [pc, #460]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e00b      	b.n	80043a6 <HAL_RCC_OscConfig+0x32a>
 800438e:	4b71      	ldr	r3, [pc, #452]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a70      	ldr	r2, [pc, #448]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6713      	str	r3, [r2, #112]	; 0x70
 800439a:	4b6e      	ldr	r3, [pc, #440]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a6d      	ldr	r2, [pc, #436]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fe fcef 	bl	8002d90 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fe fceb 	bl	8002d90 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0bc      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	4b61      	ldr	r3, [pc, #388]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ee      	beq.n	80043b6 <HAL_RCC_OscConfig+0x33a>
 80043d8:	e014      	b.n	8004404 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fe fcd9 	bl	8002d90 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fe fcd5 	bl	8002d90 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0a6      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	4b56      	ldr	r3, [pc, #344]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ee      	bne.n	80043e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b52      	ldr	r3, [pc, #328]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4a51      	ldr	r2, [pc, #324]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8092 	beq.w	8004544 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004420:	4b4c      	ldr	r3, [pc, #304]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b08      	cmp	r3, #8
 800442a:	d05c      	beq.n	80044e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d141      	bne.n	80044b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004434:	4b48      	ldr	r3, [pc, #288]	; (8004558 <HAL_RCC_OscConfig+0x4dc>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fe fca9 	bl	8002d90 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fe fca5 	bl	8002d90 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e078      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004454:	4b3f      	ldr	r3, [pc, #252]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	019b      	lsls	r3, r3, #6
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	3b01      	subs	r3, #1
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	061b      	lsls	r3, r3, #24
 8004484:	4933      	ldr	r1, [pc, #204]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 8004486:	4313      	orrs	r3, r2
 8004488:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448a:	4b33      	ldr	r3, [pc, #204]	; (8004558 <HAL_RCC_OscConfig+0x4dc>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fe fc7e 	bl	8002d90 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004498:	f7fe fc7a 	bl	8002d90 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e04d      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x41c>
 80044b6:	e045      	b.n	8004544 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b8:	4b27      	ldr	r3, [pc, #156]	; (8004558 <HAL_RCC_OscConfig+0x4dc>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044be:	f7fe fc67 	bl	8002d90 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fe fc63 	bl	8002d90 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e036      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d8:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x44a>
 80044e4:	e02e      	b.n	8004544 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e029      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f2:	4b18      	ldr	r3, [pc, #96]	; (8004554 <HAL_RCC_OscConfig+0x4d8>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	429a      	cmp	r2, r3
 8004504:	d11c      	bne.n	8004540 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d115      	bne.n	8004540 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800451a:	4013      	ands	r3, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004520:	4293      	cmp	r3, r2
 8004522:	d10d      	bne.n	8004540 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d106      	bne.n	8004540 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40007000 	.word	0x40007000
 8004554:	40023800 	.word	0x40023800
 8004558:	42470060 	.word	0x42470060

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0cc      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b68      	ldr	r3, [pc, #416]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d90c      	bls.n	8004598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b63      	ldr	r3, [pc, #396]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0b8      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b0:	4b59      	ldr	r3, [pc, #356]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a58      	ldr	r2, [pc, #352]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c8:	4b53      	ldr	r3, [pc, #332]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a52      	ldr	r2, [pc, #328]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	494d      	ldr	r1, [pc, #308]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d044      	beq.n	800467c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b47      	ldr	r3, [pc, #284]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d119      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d003      	beq.n	800461a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004616:	2b03      	cmp	r3, #3
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e06f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462a:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e067      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4934      	ldr	r1, [pc, #208]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800464c:	f7fe fba0 	bl	8002d90 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fe fb9c 	bl	8002d90 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e04f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 020c 	and.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	429a      	cmp	r2, r3
 800467a:	d1eb      	bne.n	8004654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800467c:	4b25      	ldr	r3, [pc, #148]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d20c      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b22      	ldr	r3, [pc, #136]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e032      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b0:	4b19      	ldr	r3, [pc, #100]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4916      	ldr	r1, [pc, #88]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	490e      	ldr	r1, [pc, #56]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046e2:	f000 f821 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80046e6:	4601      	mov	r1, r0
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	4a0a      	ldr	r2, [pc, #40]	; (800471c <HAL_RCC_ClockConfig+0x1c0>)
 80046f4:	5cd3      	ldrb	r3, [r2, r3]
 80046f6:	fa21 f303 	lsr.w	r3, r1, r3
 80046fa:	4a09      	ldr	r2, [pc, #36]	; (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_RCC_ClockConfig+0x1c8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fb00 	bl	8002d08 <HAL_InitTick>

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023c00 	.word	0x40023c00
 8004718:	40023800 	.word	0x40023800
 800471c:	08009010 	.word	0x08009010
 8004720:	20000258 	.word	0x20000258
 8004724:	2000025c 	.word	0x2000025c

08004728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	2300      	movs	r3, #0
 8004738:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800473e:	4b50      	ldr	r3, [pc, #320]	; (8004880 <HAL_RCC_GetSysClockFreq+0x158>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	2b04      	cmp	r3, #4
 8004748:	d007      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x32>
 800474a:	2b08      	cmp	r3, #8
 800474c:	d008      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x38>
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 808d 	bne.w	800486e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004754:	4b4b      	ldr	r3, [pc, #300]	; (8004884 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004756:	60bb      	str	r3, [r7, #8]
       break;
 8004758:	e08c      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800475a:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_RCC_GetSysClockFreq+0x160>)
 800475c:	60bb      	str	r3, [r7, #8]
      break;
 800475e:	e089      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004760:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_RCC_GetSysClockFreq+0x158>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004768:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800476a:	4b45      	ldr	r3, [pc, #276]	; (8004880 <HAL_RCC_GetSysClockFreq+0x158>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d023      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004776:	4b42      	ldr	r3, [pc, #264]	; (8004880 <HAL_RCC_GetSysClockFreq+0x158>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	f04f 0400 	mov.w	r4, #0
 8004780:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	ea03 0501 	and.w	r5, r3, r1
 800478c:	ea04 0602 	and.w	r6, r4, r2
 8004790:	4a3d      	ldr	r2, [pc, #244]	; (8004888 <HAL_RCC_GetSysClockFreq+0x160>)
 8004792:	fb02 f106 	mul.w	r1, r2, r6
 8004796:	2200      	movs	r2, #0
 8004798:	fb02 f205 	mul.w	r2, r2, r5
 800479c:	440a      	add	r2, r1
 800479e:	493a      	ldr	r1, [pc, #232]	; (8004888 <HAL_RCC_GetSysClockFreq+0x160>)
 80047a0:	fba5 0101 	umull	r0, r1, r5, r1
 80047a4:	1853      	adds	r3, r2, r1
 80047a6:	4619      	mov	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f04f 0400 	mov.w	r4, #0
 80047ae:	461a      	mov	r2, r3
 80047b0:	4623      	mov	r3, r4
 80047b2:	f7fc f9f9 	bl	8000ba8 <__aeabi_uldivmod>
 80047b6:	4603      	mov	r3, r0
 80047b8:	460c      	mov	r4, r1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e049      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047be:	4b30      	ldr	r3, [pc, #192]	; (8004880 <HAL_RCC_GetSysClockFreq+0x158>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	099b      	lsrs	r3, r3, #6
 80047c4:	f04f 0400 	mov.w	r4, #0
 80047c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	ea03 0501 	and.w	r5, r3, r1
 80047d4:	ea04 0602 	and.w	r6, r4, r2
 80047d8:	4629      	mov	r1, r5
 80047da:	4632      	mov	r2, r6
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	f04f 0400 	mov.w	r4, #0
 80047e4:	0154      	lsls	r4, r2, #5
 80047e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047ea:	014b      	lsls	r3, r1, #5
 80047ec:	4619      	mov	r1, r3
 80047ee:	4622      	mov	r2, r4
 80047f0:	1b49      	subs	r1, r1, r5
 80047f2:	eb62 0206 	sbc.w	r2, r2, r6
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	f04f 0400 	mov.w	r4, #0
 80047fe:	0194      	lsls	r4, r2, #6
 8004800:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004804:	018b      	lsls	r3, r1, #6
 8004806:	1a5b      	subs	r3, r3, r1
 8004808:	eb64 0402 	sbc.w	r4, r4, r2
 800480c:	f04f 0100 	mov.w	r1, #0
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	00e2      	lsls	r2, r4, #3
 8004816:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800481a:	00d9      	lsls	r1, r3, #3
 800481c:	460b      	mov	r3, r1
 800481e:	4614      	mov	r4, r2
 8004820:	195b      	adds	r3, r3, r5
 8004822:	eb44 0406 	adc.w	r4, r4, r6
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	02a2      	lsls	r2, r4, #10
 8004830:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004834:	0299      	lsls	r1, r3, #10
 8004836:	460b      	mov	r3, r1
 8004838:	4614      	mov	r4, r2
 800483a:	4618      	mov	r0, r3
 800483c:	4621      	mov	r1, r4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f04f 0400 	mov.w	r4, #0
 8004844:	461a      	mov	r2, r3
 8004846:	4623      	mov	r3, r4
 8004848:	f7fc f9ae 	bl	8000ba8 <__aeabi_uldivmod>
 800484c:	4603      	mov	r3, r0
 800484e:	460c      	mov	r4, r1
 8004850:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_GetSysClockFreq+0x158>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	0c1b      	lsrs	r3, r3, #16
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	3301      	adds	r3, #1
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	60bb      	str	r3, [r7, #8]
      break;
 800486c:	e002      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004870:	60bb      	str	r3, [r7, #8]
      break;
 8004872:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004874:	68bb      	ldr	r3, [r7, #8]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800487e:	bf00      	nop
 8004880:	40023800 	.word	0x40023800
 8004884:	00f42400 	.word	0x00f42400
 8004888:	017d7840 	.word	0x017d7840

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000258 	.word	0x20000258

080048a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048a8:	f7ff fff0 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048ac:	4601      	mov	r1, r0
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0a9b      	lsrs	r3, r3, #10
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4a03      	ldr	r2, [pc, #12]	; (80048c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40023800 	.word	0x40023800
 80048c8:	08009020 	.word	0x08009020

080048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048d0:	f7ff ffdc 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048d4:	4601      	mov	r1, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0b5b      	lsrs	r3, r3, #13
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4a03      	ldr	r2, [pc, #12]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	08009020 	.word	0x08009020

080048f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e056      	b.n	80049b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fd fcad 	bl	8002280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	ea42 0103 	orr.w	r1, r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	0c1b      	lsrs	r3, r3, #16
 8004984:	f003 0104 	and.w	r1, r3, #4
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_SPI_Transmit+0x22>
 80049da:	2302      	movs	r3, #2
 80049dc:	e11e      	b.n	8004c1c <HAL_SPI_Transmit+0x260>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e6:	f7fe f9d3 	bl	8002d90 <HAL_GetTick>
 80049ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d002      	beq.n	8004a02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
 80049fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a00:	e103      	b.n	8004c0a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_SPI_Transmit+0x52>
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a12:	e0fa      	b.n	8004c0a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2203      	movs	r2, #3
 8004a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5a:	d107      	bne.n	8004a6c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d007      	beq.n	8004a8a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a92:	d14b      	bne.n	8004b2c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_SPI_Transmit+0xe6>
 8004a9c:	8afb      	ldrh	r3, [r7, #22]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d13e      	bne.n	8004b20 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ac6:	e02b      	b.n	8004b20 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d112      	bne.n	8004afc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	1c9a      	adds	r2, r3, #2
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004afa:	e011      	b.n	8004b20 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004afc:	f7fe f948 	bl	8002d90 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d803      	bhi.n	8004b14 <HAL_SPI_Transmit+0x158>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d102      	bne.n	8004b1a <HAL_SPI_Transmit+0x15e>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d102      	bne.n	8004b20 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b1e:	e074      	b.n	8004c0a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1ce      	bne.n	8004ac8 <HAL_SPI_Transmit+0x10c>
 8004b2a:	e04c      	b.n	8004bc6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <HAL_SPI_Transmit+0x17e>
 8004b34:	8afb      	ldrh	r3, [r7, #22]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d140      	bne.n	8004bbc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b60:	e02c      	b.n	8004bbc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d113      	bne.n	8004b98 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	7812      	ldrb	r2, [r2, #0]
 8004b7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b96:	e011      	b.n	8004bbc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b98:	f7fe f8fa 	bl	8002d90 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d803      	bhi.n	8004bb0 <HAL_SPI_Transmit+0x1f4>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bae:	d102      	bne.n	8004bb6 <HAL_SPI_Transmit+0x1fa>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d102      	bne.n	8004bbc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bba:	e026      	b.n	8004c0a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1cd      	bne.n	8004b62 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fa36 	bl	800503c <SPI_EndRxTxTransaction>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e000      	b.n	8004c0a <HAL_SPI_Transmit+0x24e>
  }

error:
 8004c08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3720      	adds	r7, #32
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08c      	sub	sp, #48	; 0x30
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c32:	2301      	movs	r3, #1
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x26>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e18a      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x33c>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c52:	f7fe f89d 	bl	8002d90 <HAL_GetTick>
 8004c56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c68:	887b      	ldrh	r3, [r7, #2]
 8004c6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d00f      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x70>
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7a:	d107      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x68>
 8004c84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d003      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c92:	e15b      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x82>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x82>
 8004ca0:	887b      	ldrh	r3, [r7, #2]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d103      	bne.n	8004cae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cac:	e14e      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d003      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2205      	movs	r2, #5
 8004cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	887a      	ldrh	r2, [r7, #2]
 8004cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	887a      	ldrh	r2, [r7, #2]
 8004cd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	887a      	ldrh	r2, [r7, #2]
 8004ce4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	887a      	ldrh	r2, [r7, #2]
 8004cea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	d007      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1e:	d178      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x10a>
 8004d28:	8b7b      	ldrh	r3, [r7, #26]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d166      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	881a      	ldrh	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	1c9a      	adds	r2, r3, #2
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d52:	e053      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d11b      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x176>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d016      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x176>
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d113      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	881a      	ldrh	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	1c9a      	adds	r2, r3, #2
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d119      	bne.n	8004ddc <HAL_SPI_TransmitReceive+0x1b8>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d014      	beq.n	8004ddc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	b292      	uxth	r2, r2
 8004dbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	1c9a      	adds	r2, r3, #2
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ddc:	f7fd ffd8 	bl	8002d90 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d807      	bhi.n	8004dfc <HAL_SPI_TransmitReceive+0x1d8>
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df2:	d003      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dfa:	e0a7      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1a6      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x130>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1a1      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x130>
 8004e10:	e07c      	b.n	8004f0c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_TransmitReceive+0x1fc>
 8004e1a:	8b7b      	ldrh	r3, [r7, #26]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d16b      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	7812      	ldrb	r2, [r2, #0]
 8004e2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e46:	e057      	b.n	8004ef8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d11c      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x26c>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d017      	beq.n	8004e90 <HAL_SPI_TransmitReceive+0x26c>
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d114      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	7812      	ldrb	r2, [r2, #0]
 8004e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d119      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x2ae>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d014      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ed2:	f7fd ff5d 	bl	8002d90 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d803      	bhi.n	8004eea <HAL_SPI_TransmitReceive+0x2c6>
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d102      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x2cc>
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d103      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ef6:	e029      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1a2      	bne.n	8004e48 <HAL_SPI_TransmitReceive+0x224>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d19d      	bne.n	8004e48 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f893 	bl	800503c <SPI_EndRxTxTransaction>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d006      	beq.n	8004f2a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f28:	e010      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	e000      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3730      	adds	r7, #48	; 0x30
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f78:	e04c      	b.n	8005014 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f80:	d048      	beq.n	8005014 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f82:	f7fd ff05 	bl	8002d90 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d902      	bls.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d13d      	bne.n	8005014 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb0:	d111      	bne.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fba:	d004      	beq.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc4:	d107      	bne.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fde:	d10f      	bne.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ffe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e00f      	b.n	8005034 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4013      	ands	r3, r2
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	429a      	cmp	r2, r3
 8005022:	bf0c      	ite	eq
 8005024:	2301      	moveq	r3, #1
 8005026:	2300      	movne	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	429a      	cmp	r2, r3
 8005030:	d1a3      	bne.n	8004f7a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af02      	add	r7, sp, #8
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005048:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <SPI_EndRxTxTransaction+0x7c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <SPI_EndRxTxTransaction+0x80>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	0d5b      	lsrs	r3, r3, #21
 8005054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005066:	d112      	bne.n	800508e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2200      	movs	r2, #0
 8005070:	2180      	movs	r1, #128	; 0x80
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff ff78 	bl	8004f68 <SPI_WaitFlagStateUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d016      	beq.n	80050ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e00f      	b.n	80050ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	3b01      	subs	r3, #1
 8005098:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a4:	2b80      	cmp	r3, #128	; 0x80
 80050a6:	d0f2      	beq.n	800508e <SPI_EndRxTxTransaction+0x52>
 80050a8:	e000      	b.n	80050ac <SPI_EndRxTxTransaction+0x70>
        break;
 80050aa:	bf00      	nop
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000258 	.word	0x20000258
 80050bc:	165e9f81 	.word	0x165e9f81

080050c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e01d      	b.n	800510e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fd fbd0 	bl	800288c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f000 f956 	bl	80053b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e01d      	b.n	8005164 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f815 	bl	800516c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f000 f92b 	bl	80053b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005196:	2302      	movs	r3, #2
 8005198:	e04e      	b.n	8005238 <HAL_TIM_OC_ConfigChannel+0xb8>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d839      	bhi.n	8005224 <HAL_TIM_OC_ConfigChannel+0xa4>
 80051b0:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	08005225 	.word	0x08005225
 80051c0:	08005225 	.word	0x08005225
 80051c4:	08005225 	.word	0x08005225
 80051c8:	080051fb 	.word	0x080051fb
 80051cc:	08005225 	.word	0x08005225
 80051d0:	08005225 	.word	0x08005225
 80051d4:	08005225 	.word	0x08005225
 80051d8:	08005209 	.word	0x08005209
 80051dc:	08005225 	.word	0x08005225
 80051e0:	08005225 	.word	0x08005225
 80051e4:	08005225 	.word	0x08005225
 80051e8:	08005217 	.word	0x08005217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f97c 	bl	80054f0 <TIM_OC1_SetConfig>
      break;
 80051f8:	e015      	b.n	8005226 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f9e5 	bl	80055d0 <TIM_OC2_SetConfig>
      break;
 8005206:	e00e      	b.n	8005226 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fa54 	bl	80056bc <TIM_OC3_SetConfig>
      break;
 8005214:	e007      	b.n	8005226 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fac1 	bl	80057a4 <TIM_OC4_SetConfig>
      break;
 8005222:	e000      	b.n	8005226 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005224:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIM_ConfigClockSource+0x18>
 8005254:	2302      	movs	r3, #2
 8005256:	e0a6      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x166>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005276:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800527e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b40      	cmp	r3, #64	; 0x40
 800528e:	d067      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0x120>
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	d80b      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x6c>
 8005294:	2b10      	cmp	r3, #16
 8005296:	d073      	beq.n	8005380 <HAL_TIM_ConfigClockSource+0x140>
 8005298:	2b10      	cmp	r3, #16
 800529a:	d802      	bhi.n	80052a2 <HAL_TIM_ConfigClockSource+0x62>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d06f      	beq.n	8005380 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80052a0:	e078      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d06c      	beq.n	8005380 <HAL_TIM_ConfigClockSource+0x140>
 80052a6:	2b30      	cmp	r3, #48	; 0x30
 80052a8:	d06a      	beq.n	8005380 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80052aa:	e073      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052ac:	2b70      	cmp	r3, #112	; 0x70
 80052ae:	d00d      	beq.n	80052cc <HAL_TIM_ConfigClockSource+0x8c>
 80052b0:	2b70      	cmp	r3, #112	; 0x70
 80052b2:	d804      	bhi.n	80052be <HAL_TIM_ConfigClockSource+0x7e>
 80052b4:	2b50      	cmp	r3, #80	; 0x50
 80052b6:	d033      	beq.n	8005320 <HAL_TIM_ConfigClockSource+0xe0>
 80052b8:	2b60      	cmp	r3, #96	; 0x60
 80052ba:	d041      	beq.n	8005340 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80052bc:	e06a      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c2:	d066      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0x152>
 80052c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c8:	d017      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80052ca:	e063      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	6899      	ldr	r1, [r3, #8]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f000 fb32 	bl	8005944 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	609a      	str	r2, [r3, #8]
      break;
 80052f8:	e04c      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6899      	ldr	r1, [r3, #8]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f000 fb1b 	bl	8005944 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800531c:	609a      	str	r2, [r3, #8]
      break;
 800531e:	e039      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	461a      	mov	r2, r3
 800532e:	f000 fa8f 	bl	8005850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2150      	movs	r1, #80	; 0x50
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fae8 	bl	800590e <TIM_ITRx_SetConfig>
      break;
 800533e:	e029      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	6859      	ldr	r1, [r3, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	461a      	mov	r2, r3
 800534e:	f000 faae 	bl	80058ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2160      	movs	r1, #96	; 0x60
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fad8 	bl	800590e <TIM_ITRx_SetConfig>
      break;
 800535e:	e019      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	6859      	ldr	r1, [r3, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	461a      	mov	r2, r3
 800536e:	f000 fa6f 	bl	8005850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2140      	movs	r1, #64	; 0x40
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fac8 	bl	800590e <TIM_ITRx_SetConfig>
      break;
 800537e:	e009      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f000 fabf 	bl	800590e <TIM_ITRx_SetConfig>
      break;
 8005390:	e000      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a40      	ldr	r2, [pc, #256]	; (80054c4 <TIM_Base_SetConfig+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ce:	d00f      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a3d      	ldr	r2, [pc, #244]	; (80054c8 <TIM_Base_SetConfig+0x118>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a3c      	ldr	r2, [pc, #240]	; (80054cc <TIM_Base_SetConfig+0x11c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a3b      	ldr	r2, [pc, #236]	; (80054d0 <TIM_Base_SetConfig+0x120>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3a      	ldr	r2, [pc, #232]	; (80054d4 <TIM_Base_SetConfig+0x124>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d108      	bne.n	8005402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2f      	ldr	r2, [pc, #188]	; (80054c4 <TIM_Base_SetConfig+0x114>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d02b      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005410:	d027      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2c      	ldr	r2, [pc, #176]	; (80054c8 <TIM_Base_SetConfig+0x118>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d023      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2b      	ldr	r2, [pc, #172]	; (80054cc <TIM_Base_SetConfig+0x11c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01f      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <TIM_Base_SetConfig+0x120>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d01b      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a29      	ldr	r2, [pc, #164]	; (80054d4 <TIM_Base_SetConfig+0x124>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d017      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a28      	ldr	r2, [pc, #160]	; (80054d8 <TIM_Base_SetConfig+0x128>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a27      	ldr	r2, [pc, #156]	; (80054dc <TIM_Base_SetConfig+0x12c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00f      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <TIM_Base_SetConfig+0x130>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00b      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a25      	ldr	r2, [pc, #148]	; (80054e4 <TIM_Base_SetConfig+0x134>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a24      	ldr	r2, [pc, #144]	; (80054e8 <TIM_Base_SetConfig+0x138>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a23      	ldr	r2, [pc, #140]	; (80054ec <TIM_Base_SetConfig+0x13c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d108      	bne.n	8005474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <TIM_Base_SetConfig+0x114>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0xf8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a0c      	ldr	r2, [pc, #48]	; (80054d4 <TIM_Base_SetConfig+0x124>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d103      	bne.n	80054b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	615a      	str	r2, [r3, #20]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00
 80054d4:	40010400 	.word	0x40010400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40014400 	.word	0x40014400
 80054e0:	40014800 	.word	0x40014800
 80054e4:	40001800 	.word	0x40001800
 80054e8:	40001c00 	.word	0x40001c00
 80054ec:	40002000 	.word	0x40002000

080054f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f023 0201 	bic.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 0302 	bic.w	r3, r3, #2
 8005538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a20      	ldr	r2, [pc, #128]	; (80055c8 <TIM_OC1_SetConfig+0xd8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_OC1_SetConfig+0x64>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a1f      	ldr	r2, [pc, #124]	; (80055cc <TIM_OC1_SetConfig+0xdc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d10c      	bne.n	800556e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0308 	bic.w	r3, r3, #8
 800555a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 0304 	bic.w	r3, r3, #4
 800556c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <TIM_OC1_SetConfig+0xd8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC1_SetConfig+0x8e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a14      	ldr	r2, [pc, #80]	; (80055cc <TIM_OC1_SetConfig+0xdc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d111      	bne.n	80055a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40010400 	.word	0x40010400

080055d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0210 	bic.w	r2, r3, #16
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0320 	bic.w	r3, r3, #32
 800561a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <TIM_OC2_SetConfig+0xe4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_OC2_SetConfig+0x68>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <TIM_OC2_SetConfig+0xe8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d10d      	bne.n	8005654 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800563e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <TIM_OC2_SetConfig+0xe4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_OC2_SetConfig+0x94>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a16      	ldr	r2, [pc, #88]	; (80056b8 <TIM_OC2_SetConfig+0xe8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d113      	bne.n	800568c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800566a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	621a      	str	r2, [r3, #32]
}
 80056a6:	bf00      	nop
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40010400 	.word	0x40010400

080056bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0303 	bic.w	r3, r3, #3
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a21      	ldr	r2, [pc, #132]	; (800579c <TIM_OC3_SetConfig+0xe0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d003      	beq.n	8005722 <TIM_OC3_SetConfig+0x66>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a20      	ldr	r2, [pc, #128]	; (80057a0 <TIM_OC3_SetConfig+0xe4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d10d      	bne.n	800573e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800573c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a16      	ldr	r2, [pc, #88]	; (800579c <TIM_OC3_SetConfig+0xe0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_OC3_SetConfig+0x92>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <TIM_OC3_SetConfig+0xe4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d113      	bne.n	8005776 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800575c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	621a      	str	r2, [r3, #32]
}
 8005790:	bf00      	nop
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	40010000 	.word	0x40010000
 80057a0:	40010400 	.word	0x40010400

080057a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	031b      	lsls	r3, r3, #12
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a12      	ldr	r2, [pc, #72]	; (8005848 <TIM_OC4_SetConfig+0xa4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_OC4_SetConfig+0x68>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a11      	ldr	r2, [pc, #68]	; (800584c <TIM_OC4_SetConfig+0xa8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d109      	bne.n	8005820 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	019b      	lsls	r3, r3, #6
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40010400 	.word	0x40010400

08005850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0201 	bic.w	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800587a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 030a 	bic.w	r3, r3, #10
 800588c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	621a      	str	r2, [r3, #32]
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b087      	sub	sp, #28
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f023 0210 	bic.w	r2, r3, #16
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	031b      	lsls	r3, r3, #12
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800590e:	b480      	push	{r7}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	f043 0307 	orr.w	r3, r3, #7
 8005930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	609a      	str	r2, [r3, #8]
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800595e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	021a      	lsls	r2, r3, #8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	431a      	orrs	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4313      	orrs	r3, r2
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	609a      	str	r2, [r3, #8]
}
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005998:	2302      	movs	r3, #2
 800599a:	e05a      	b.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d022      	beq.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e8:	d01d      	beq.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d018      	beq.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1a      	ldr	r2, [pc, #104]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a18      	ldr	r2, [pc, #96]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a17      	ldr	r2, [pc, #92]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d10c      	bne.n	8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40010400 	.word	0x40010400
 8005a74:	40014000 	.word	0x40014000
 8005a78:	40001800 	.word	0x40001800

08005a7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e03d      	b.n	8005b14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e03f      	b.n	8005bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fc ff7a 	bl	8002a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2224      	movs	r2, #36	; 0x24
 8005b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f9b1 	bl	8005ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b088      	sub	sp, #32
 8005bbe:	af02      	add	r7, sp, #8
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	f040 8083 	bne.w	8005ce2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_UART_Transmit+0x2e>
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e07b      	b.n	8005ce4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Transmit+0x40>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e074      	b.n	8005ce4 <HAL_UART_Transmit+0x12a>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2221      	movs	r2, #33	; 0x21
 8005c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c10:	f7fd f8be 	bl	8002d90 <HAL_GetTick>
 8005c14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	88fa      	ldrh	r2, [r7, #6]
 8005c1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	88fa      	ldrh	r2, [r7, #6]
 8005c20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005c2a:	e042      	b.n	8005cb2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c42:	d122      	bne.n	8005c8a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2180      	movs	r1, #128	; 0x80
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f8f2 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e042      	b.n	8005ce4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c70:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	e017      	b.n	8005cb2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60bb      	str	r3, [r7, #8]
 8005c88:	e013      	b.n	8005cb2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	2180      	movs	r1, #128	; 0x80
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f8cf 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e01f      	b.n	8005ce4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	60ba      	str	r2, [r7, #8]
 8005caa:	781a      	ldrb	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1b7      	bne.n	8005c2c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2140      	movs	r1, #64	; 0x40
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f8b6 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e006      	b.n	8005ce4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e000      	b.n	8005ce4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005ce2:	2302      	movs	r3, #2
  }
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	f040 8090 	bne.w	8005e2e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_UART_Receive+0x2e>
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e088      	b.n	8005e30 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_UART_Receive+0x40>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e081      	b.n	8005e30 <HAL_UART_Receive+0x144>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2222      	movs	r2, #34	; 0x22
 8005d3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005d42:	f7fd f825 	bl	8002d90 <HAL_GetTick>
 8005d46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	88fa      	ldrh	r2, [r7, #6]
 8005d4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	88fa      	ldrh	r2, [r7, #6]
 8005d52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005d5c:	e05c      	b.n	8005e18 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d74:	d12b      	bne.n	8005dce <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2120      	movs	r1, #32
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f859 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e04f      	b.n	8005e30 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10c      	bne.n	8005db6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	3302      	adds	r3, #2
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	e030      	b.n	8005e18 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	60bb      	str	r3, [r7, #8]
 8005dcc:	e024      	b.n	8005e18 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2120      	movs	r1, #32
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f82d 	bl	8005e38 <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e023      	b.n	8005e30 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d108      	bne.n	8005e02 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6859      	ldr	r1, [r3, #4]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	60ba      	str	r2, [r7, #8]
 8005dfc:	b2ca      	uxtb	r2, r1
 8005dfe:	701a      	strb	r2, [r3, #0]
 8005e00:	e00a      	b.n	8005e18 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	1c59      	adds	r1, r3, #1
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d19d      	bne.n	8005d5e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e000      	b.n	8005e30 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005e2e:	2302      	movs	r3, #2
  }
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	4613      	mov	r3, r2
 8005e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e48:	e02c      	b.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e50:	d028      	beq.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e58:	f7fc ff9a 	bl	8002d90 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d21d      	bcs.n	8005ea4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0201 	bic.w	r2, r2, #1
 8005e86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e00f      	b.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d0c3      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f0e:	f023 030c 	bic.w	r3, r3, #12
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f3a:	f040 818b 	bne.w	8006254 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4ac1      	ldr	r2, [pc, #772]	; (8006248 <UART_SetConfig+0x37c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d005      	beq.n	8005f54 <UART_SetConfig+0x88>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4abf      	ldr	r2, [pc, #764]	; (800624c <UART_SetConfig+0x380>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	f040 80bd 	bne.w	80060ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f54:	f7fe fcba 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8005f58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	461d      	mov	r5, r3
 8005f5e:	f04f 0600 	mov.w	r6, #0
 8005f62:	46a8      	mov	r8, r5
 8005f64:	46b1      	mov	r9, r6
 8005f66:	eb18 0308 	adds.w	r3, r8, r8
 8005f6a:	eb49 0409 	adc.w	r4, r9, r9
 8005f6e:	4698      	mov	r8, r3
 8005f70:	46a1      	mov	r9, r4
 8005f72:	eb18 0805 	adds.w	r8, r8, r5
 8005f76:	eb49 0906 	adc.w	r9, r9, r6
 8005f7a:	f04f 0100 	mov.w	r1, #0
 8005f7e:	f04f 0200 	mov.w	r2, #0
 8005f82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f8e:	4688      	mov	r8, r1
 8005f90:	4691      	mov	r9, r2
 8005f92:	eb18 0005 	adds.w	r0, r8, r5
 8005f96:	eb49 0106 	adc.w	r1, r9, r6
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	f04f 0600 	mov.w	r6, #0
 8005fa4:	196b      	adds	r3, r5, r5
 8005fa6:	eb46 0406 	adc.w	r4, r6, r6
 8005faa:	461a      	mov	r2, r3
 8005fac:	4623      	mov	r3, r4
 8005fae:	f7fa fdfb 	bl	8000ba8 <__aeabi_uldivmod>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	4ba5      	ldr	r3, [pc, #660]	; (8006250 <UART_SetConfig+0x384>)
 8005fba:	fba3 2302 	umull	r2, r3, r3, r2
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	f04f 0600 	mov.w	r6, #0
 8005fcc:	46a9      	mov	r9, r5
 8005fce:	46b2      	mov	sl, r6
 8005fd0:	eb19 0309 	adds.w	r3, r9, r9
 8005fd4:	eb4a 040a 	adc.w	r4, sl, sl
 8005fd8:	4699      	mov	r9, r3
 8005fda:	46a2      	mov	sl, r4
 8005fdc:	eb19 0905 	adds.w	r9, r9, r5
 8005fe0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fe4:	f04f 0100 	mov.w	r1, #0
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ff0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ff4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ff8:	4689      	mov	r9, r1
 8005ffa:	4692      	mov	sl, r2
 8005ffc:	eb19 0005 	adds.w	r0, r9, r5
 8006000:	eb4a 0106 	adc.w	r1, sl, r6
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	461d      	mov	r5, r3
 800600a:	f04f 0600 	mov.w	r6, #0
 800600e:	196b      	adds	r3, r5, r5
 8006010:	eb46 0406 	adc.w	r4, r6, r6
 8006014:	461a      	mov	r2, r3
 8006016:	4623      	mov	r3, r4
 8006018:	f7fa fdc6 	bl	8000ba8 <__aeabi_uldivmod>
 800601c:	4603      	mov	r3, r0
 800601e:	460c      	mov	r4, r1
 8006020:	461a      	mov	r2, r3
 8006022:	4b8b      	ldr	r3, [pc, #556]	; (8006250 <UART_SetConfig+0x384>)
 8006024:	fba3 1302 	umull	r1, r3, r3, r2
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	2164      	movs	r1, #100	; 0x64
 800602c:	fb01 f303 	mul.w	r3, r1, r3
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	3332      	adds	r3, #50	; 0x32
 8006036:	4a86      	ldr	r2, [pc, #536]	; (8006250 <UART_SetConfig+0x384>)
 8006038:	fba2 2303 	umull	r2, r3, r2, r3
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006044:	4498      	add	r8, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	461d      	mov	r5, r3
 800604a:	f04f 0600 	mov.w	r6, #0
 800604e:	46a9      	mov	r9, r5
 8006050:	46b2      	mov	sl, r6
 8006052:	eb19 0309 	adds.w	r3, r9, r9
 8006056:	eb4a 040a 	adc.w	r4, sl, sl
 800605a:	4699      	mov	r9, r3
 800605c:	46a2      	mov	sl, r4
 800605e:	eb19 0905 	adds.w	r9, r9, r5
 8006062:	eb4a 0a06 	adc.w	sl, sl, r6
 8006066:	f04f 0100 	mov.w	r1, #0
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006072:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006076:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800607a:	4689      	mov	r9, r1
 800607c:	4692      	mov	sl, r2
 800607e:	eb19 0005 	adds.w	r0, r9, r5
 8006082:	eb4a 0106 	adc.w	r1, sl, r6
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	461d      	mov	r5, r3
 800608c:	f04f 0600 	mov.w	r6, #0
 8006090:	196b      	adds	r3, r5, r5
 8006092:	eb46 0406 	adc.w	r4, r6, r6
 8006096:	461a      	mov	r2, r3
 8006098:	4623      	mov	r3, r4
 800609a:	f7fa fd85 	bl	8000ba8 <__aeabi_uldivmod>
 800609e:	4603      	mov	r3, r0
 80060a0:	460c      	mov	r4, r1
 80060a2:	461a      	mov	r2, r3
 80060a4:	4b6a      	ldr	r3, [pc, #424]	; (8006250 <UART_SetConfig+0x384>)
 80060a6:	fba3 1302 	umull	r1, r3, r3, r2
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	2164      	movs	r1, #100	; 0x64
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	3332      	adds	r3, #50	; 0x32
 80060b8:	4a65      	ldr	r2, [pc, #404]	; (8006250 <UART_SetConfig+0x384>)
 80060ba:	fba2 2303 	umull	r2, r3, r2, r3
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	f003 0207 	and.w	r2, r3, #7
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4442      	add	r2, r8
 80060ca:	609a      	str	r2, [r3, #8]
 80060cc:	e26f      	b.n	80065ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ce:	f7fe fbe9 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 80060d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	461d      	mov	r5, r3
 80060d8:	f04f 0600 	mov.w	r6, #0
 80060dc:	46a8      	mov	r8, r5
 80060de:	46b1      	mov	r9, r6
 80060e0:	eb18 0308 	adds.w	r3, r8, r8
 80060e4:	eb49 0409 	adc.w	r4, r9, r9
 80060e8:	4698      	mov	r8, r3
 80060ea:	46a1      	mov	r9, r4
 80060ec:	eb18 0805 	adds.w	r8, r8, r5
 80060f0:	eb49 0906 	adc.w	r9, r9, r6
 80060f4:	f04f 0100 	mov.w	r1, #0
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006100:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006104:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006108:	4688      	mov	r8, r1
 800610a:	4691      	mov	r9, r2
 800610c:	eb18 0005 	adds.w	r0, r8, r5
 8006110:	eb49 0106 	adc.w	r1, r9, r6
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	461d      	mov	r5, r3
 800611a:	f04f 0600 	mov.w	r6, #0
 800611e:	196b      	adds	r3, r5, r5
 8006120:	eb46 0406 	adc.w	r4, r6, r6
 8006124:	461a      	mov	r2, r3
 8006126:	4623      	mov	r3, r4
 8006128:	f7fa fd3e 	bl	8000ba8 <__aeabi_uldivmod>
 800612c:	4603      	mov	r3, r0
 800612e:	460c      	mov	r4, r1
 8006130:	461a      	mov	r2, r3
 8006132:	4b47      	ldr	r3, [pc, #284]	; (8006250 <UART_SetConfig+0x384>)
 8006134:	fba3 2302 	umull	r2, r3, r3, r2
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	461d      	mov	r5, r3
 8006142:	f04f 0600 	mov.w	r6, #0
 8006146:	46a9      	mov	r9, r5
 8006148:	46b2      	mov	sl, r6
 800614a:	eb19 0309 	adds.w	r3, r9, r9
 800614e:	eb4a 040a 	adc.w	r4, sl, sl
 8006152:	4699      	mov	r9, r3
 8006154:	46a2      	mov	sl, r4
 8006156:	eb19 0905 	adds.w	r9, r9, r5
 800615a:	eb4a 0a06 	adc.w	sl, sl, r6
 800615e:	f04f 0100 	mov.w	r1, #0
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800616a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800616e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006172:	4689      	mov	r9, r1
 8006174:	4692      	mov	sl, r2
 8006176:	eb19 0005 	adds.w	r0, r9, r5
 800617a:	eb4a 0106 	adc.w	r1, sl, r6
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	461d      	mov	r5, r3
 8006184:	f04f 0600 	mov.w	r6, #0
 8006188:	196b      	adds	r3, r5, r5
 800618a:	eb46 0406 	adc.w	r4, r6, r6
 800618e:	461a      	mov	r2, r3
 8006190:	4623      	mov	r3, r4
 8006192:	f7fa fd09 	bl	8000ba8 <__aeabi_uldivmod>
 8006196:	4603      	mov	r3, r0
 8006198:	460c      	mov	r4, r1
 800619a:	461a      	mov	r2, r3
 800619c:	4b2c      	ldr	r3, [pc, #176]	; (8006250 <UART_SetConfig+0x384>)
 800619e:	fba3 1302 	umull	r1, r3, r3, r2
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	2164      	movs	r1, #100	; 0x64
 80061a6:	fb01 f303 	mul.w	r3, r1, r3
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	3332      	adds	r3, #50	; 0x32
 80061b0:	4a27      	ldr	r2, [pc, #156]	; (8006250 <UART_SetConfig+0x384>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061be:	4498      	add	r8, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	461d      	mov	r5, r3
 80061c4:	f04f 0600 	mov.w	r6, #0
 80061c8:	46a9      	mov	r9, r5
 80061ca:	46b2      	mov	sl, r6
 80061cc:	eb19 0309 	adds.w	r3, r9, r9
 80061d0:	eb4a 040a 	adc.w	r4, sl, sl
 80061d4:	4699      	mov	r9, r3
 80061d6:	46a2      	mov	sl, r4
 80061d8:	eb19 0905 	adds.w	r9, r9, r5
 80061dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80061e0:	f04f 0100 	mov.w	r1, #0
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061f4:	4689      	mov	r9, r1
 80061f6:	4692      	mov	sl, r2
 80061f8:	eb19 0005 	adds.w	r0, r9, r5
 80061fc:	eb4a 0106 	adc.w	r1, sl, r6
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	461d      	mov	r5, r3
 8006206:	f04f 0600 	mov.w	r6, #0
 800620a:	196b      	adds	r3, r5, r5
 800620c:	eb46 0406 	adc.w	r4, r6, r6
 8006210:	461a      	mov	r2, r3
 8006212:	4623      	mov	r3, r4
 8006214:	f7fa fcc8 	bl	8000ba8 <__aeabi_uldivmod>
 8006218:	4603      	mov	r3, r0
 800621a:	460c      	mov	r4, r1
 800621c:	461a      	mov	r2, r3
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <UART_SetConfig+0x384>)
 8006220:	fba3 1302 	umull	r1, r3, r3, r2
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	2164      	movs	r1, #100	; 0x64
 8006228:	fb01 f303 	mul.w	r3, r1, r3
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	3332      	adds	r3, #50	; 0x32
 8006232:	4a07      	ldr	r2, [pc, #28]	; (8006250 <UART_SetConfig+0x384>)
 8006234:	fba2 2303 	umull	r2, r3, r2, r3
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f003 0207 	and.w	r2, r3, #7
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4442      	add	r2, r8
 8006244:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006246:	e1b2      	b.n	80065ae <UART_SetConfig+0x6e2>
 8006248:	40011000 	.word	0x40011000
 800624c:	40011400 	.word	0x40011400
 8006250:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4ad7      	ldr	r2, [pc, #860]	; (80065b8 <UART_SetConfig+0x6ec>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d005      	beq.n	800626a <UART_SetConfig+0x39e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4ad6      	ldr	r2, [pc, #856]	; (80065bc <UART_SetConfig+0x6f0>)
 8006264:	4293      	cmp	r3, r2
 8006266:	f040 80d1 	bne.w	800640c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800626a:	f7fe fb2f 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 800626e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	469a      	mov	sl, r3
 8006274:	f04f 0b00 	mov.w	fp, #0
 8006278:	46d0      	mov	r8, sl
 800627a:	46d9      	mov	r9, fp
 800627c:	eb18 0308 	adds.w	r3, r8, r8
 8006280:	eb49 0409 	adc.w	r4, r9, r9
 8006284:	4698      	mov	r8, r3
 8006286:	46a1      	mov	r9, r4
 8006288:	eb18 080a 	adds.w	r8, r8, sl
 800628c:	eb49 090b 	adc.w	r9, r9, fp
 8006290:	f04f 0100 	mov.w	r1, #0
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800629c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062a4:	4688      	mov	r8, r1
 80062a6:	4691      	mov	r9, r2
 80062a8:	eb1a 0508 	adds.w	r5, sl, r8
 80062ac:	eb4b 0609 	adc.w	r6, fp, r9
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	4619      	mov	r1, r3
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	f04f 0400 	mov.w	r4, #0
 80062c2:	0094      	lsls	r4, r2, #2
 80062c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062c8:	008b      	lsls	r3, r1, #2
 80062ca:	461a      	mov	r2, r3
 80062cc:	4623      	mov	r3, r4
 80062ce:	4628      	mov	r0, r5
 80062d0:	4631      	mov	r1, r6
 80062d2:	f7fa fc69 	bl	8000ba8 <__aeabi_uldivmod>
 80062d6:	4603      	mov	r3, r0
 80062d8:	460c      	mov	r4, r1
 80062da:	461a      	mov	r2, r3
 80062dc:	4bb8      	ldr	r3, [pc, #736]	; (80065c0 <UART_SetConfig+0x6f4>)
 80062de:	fba3 2302 	umull	r2, r3, r3, r2
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	469b      	mov	fp, r3
 80062ec:	f04f 0c00 	mov.w	ip, #0
 80062f0:	46d9      	mov	r9, fp
 80062f2:	46e2      	mov	sl, ip
 80062f4:	eb19 0309 	adds.w	r3, r9, r9
 80062f8:	eb4a 040a 	adc.w	r4, sl, sl
 80062fc:	4699      	mov	r9, r3
 80062fe:	46a2      	mov	sl, r4
 8006300:	eb19 090b 	adds.w	r9, r9, fp
 8006304:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006308:	f04f 0100 	mov.w	r1, #0
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006314:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006318:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800631c:	4689      	mov	r9, r1
 800631e:	4692      	mov	sl, r2
 8006320:	eb1b 0509 	adds.w	r5, fp, r9
 8006324:	eb4c 060a 	adc.w	r6, ip, sl
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	4619      	mov	r1, r3
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	f04f 0400 	mov.w	r4, #0
 800633a:	0094      	lsls	r4, r2, #2
 800633c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006340:	008b      	lsls	r3, r1, #2
 8006342:	461a      	mov	r2, r3
 8006344:	4623      	mov	r3, r4
 8006346:	4628      	mov	r0, r5
 8006348:	4631      	mov	r1, r6
 800634a:	f7fa fc2d 	bl	8000ba8 <__aeabi_uldivmod>
 800634e:	4603      	mov	r3, r0
 8006350:	460c      	mov	r4, r1
 8006352:	461a      	mov	r2, r3
 8006354:	4b9a      	ldr	r3, [pc, #616]	; (80065c0 <UART_SetConfig+0x6f4>)
 8006356:	fba3 1302 	umull	r1, r3, r3, r2
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	2164      	movs	r1, #100	; 0x64
 800635e:	fb01 f303 	mul.w	r3, r1, r3
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	3332      	adds	r3, #50	; 0x32
 8006368:	4a95      	ldr	r2, [pc, #596]	; (80065c0 <UART_SetConfig+0x6f4>)
 800636a:	fba2 2303 	umull	r2, r3, r2, r3
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006374:	4498      	add	r8, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	469b      	mov	fp, r3
 800637a:	f04f 0c00 	mov.w	ip, #0
 800637e:	46d9      	mov	r9, fp
 8006380:	46e2      	mov	sl, ip
 8006382:	eb19 0309 	adds.w	r3, r9, r9
 8006386:	eb4a 040a 	adc.w	r4, sl, sl
 800638a:	4699      	mov	r9, r3
 800638c:	46a2      	mov	sl, r4
 800638e:	eb19 090b 	adds.w	r9, r9, fp
 8006392:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006396:	f04f 0100 	mov.w	r1, #0
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063aa:	4689      	mov	r9, r1
 80063ac:	4692      	mov	sl, r2
 80063ae:	eb1b 0509 	adds.w	r5, fp, r9
 80063b2:	eb4c 060a 	adc.w	r6, ip, sl
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4619      	mov	r1, r3
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	f04f 0400 	mov.w	r4, #0
 80063c8:	0094      	lsls	r4, r2, #2
 80063ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063ce:	008b      	lsls	r3, r1, #2
 80063d0:	461a      	mov	r2, r3
 80063d2:	4623      	mov	r3, r4
 80063d4:	4628      	mov	r0, r5
 80063d6:	4631      	mov	r1, r6
 80063d8:	f7fa fbe6 	bl	8000ba8 <__aeabi_uldivmod>
 80063dc:	4603      	mov	r3, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	461a      	mov	r2, r3
 80063e2:	4b77      	ldr	r3, [pc, #476]	; (80065c0 <UART_SetConfig+0x6f4>)
 80063e4:	fba3 1302 	umull	r1, r3, r3, r2
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	2164      	movs	r1, #100	; 0x64
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	3332      	adds	r3, #50	; 0x32
 80063f6:	4a72      	ldr	r2, [pc, #456]	; (80065c0 <UART_SetConfig+0x6f4>)
 80063f8:	fba2 2303 	umull	r2, r3, r2, r3
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	f003 020f 	and.w	r2, r3, #15
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4442      	add	r2, r8
 8006408:	609a      	str	r2, [r3, #8]
 800640a:	e0d0      	b.n	80065ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800640c:	f7fe fa4a 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 8006410:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	469a      	mov	sl, r3
 8006416:	f04f 0b00 	mov.w	fp, #0
 800641a:	46d0      	mov	r8, sl
 800641c:	46d9      	mov	r9, fp
 800641e:	eb18 0308 	adds.w	r3, r8, r8
 8006422:	eb49 0409 	adc.w	r4, r9, r9
 8006426:	4698      	mov	r8, r3
 8006428:	46a1      	mov	r9, r4
 800642a:	eb18 080a 	adds.w	r8, r8, sl
 800642e:	eb49 090b 	adc.w	r9, r9, fp
 8006432:	f04f 0100 	mov.w	r1, #0
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800643e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006442:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006446:	4688      	mov	r8, r1
 8006448:	4691      	mov	r9, r2
 800644a:	eb1a 0508 	adds.w	r5, sl, r8
 800644e:	eb4b 0609 	adc.w	r6, fp, r9
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	4619      	mov	r1, r3
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	f04f 0400 	mov.w	r4, #0
 8006464:	0094      	lsls	r4, r2, #2
 8006466:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800646a:	008b      	lsls	r3, r1, #2
 800646c:	461a      	mov	r2, r3
 800646e:	4623      	mov	r3, r4
 8006470:	4628      	mov	r0, r5
 8006472:	4631      	mov	r1, r6
 8006474:	f7fa fb98 	bl	8000ba8 <__aeabi_uldivmod>
 8006478:	4603      	mov	r3, r0
 800647a:	460c      	mov	r4, r1
 800647c:	461a      	mov	r2, r3
 800647e:	4b50      	ldr	r3, [pc, #320]	; (80065c0 <UART_SetConfig+0x6f4>)
 8006480:	fba3 2302 	umull	r2, r3, r3, r2
 8006484:	095b      	lsrs	r3, r3, #5
 8006486:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	469b      	mov	fp, r3
 800648e:	f04f 0c00 	mov.w	ip, #0
 8006492:	46d9      	mov	r9, fp
 8006494:	46e2      	mov	sl, ip
 8006496:	eb19 0309 	adds.w	r3, r9, r9
 800649a:	eb4a 040a 	adc.w	r4, sl, sl
 800649e:	4699      	mov	r9, r3
 80064a0:	46a2      	mov	sl, r4
 80064a2:	eb19 090b 	adds.w	r9, r9, fp
 80064a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064aa:	f04f 0100 	mov.w	r1, #0
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064be:	4689      	mov	r9, r1
 80064c0:	4692      	mov	sl, r2
 80064c2:	eb1b 0509 	adds.w	r5, fp, r9
 80064c6:	eb4c 060a 	adc.w	r6, ip, sl
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4619      	mov	r1, r3
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	f04f 0400 	mov.w	r4, #0
 80064dc:	0094      	lsls	r4, r2, #2
 80064de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064e2:	008b      	lsls	r3, r1, #2
 80064e4:	461a      	mov	r2, r3
 80064e6:	4623      	mov	r3, r4
 80064e8:	4628      	mov	r0, r5
 80064ea:	4631      	mov	r1, r6
 80064ec:	f7fa fb5c 	bl	8000ba8 <__aeabi_uldivmod>
 80064f0:	4603      	mov	r3, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	461a      	mov	r2, r3
 80064f6:	4b32      	ldr	r3, [pc, #200]	; (80065c0 <UART_SetConfig+0x6f4>)
 80064f8:	fba3 1302 	umull	r1, r3, r3, r2
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	2164      	movs	r1, #100	; 0x64
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	3332      	adds	r3, #50	; 0x32
 800650a:	4a2d      	ldr	r2, [pc, #180]	; (80065c0 <UART_SetConfig+0x6f4>)
 800650c:	fba2 2303 	umull	r2, r3, r2, r3
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006516:	4498      	add	r8, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	469b      	mov	fp, r3
 800651c:	f04f 0c00 	mov.w	ip, #0
 8006520:	46d9      	mov	r9, fp
 8006522:	46e2      	mov	sl, ip
 8006524:	eb19 0309 	adds.w	r3, r9, r9
 8006528:	eb4a 040a 	adc.w	r4, sl, sl
 800652c:	4699      	mov	r9, r3
 800652e:	46a2      	mov	sl, r4
 8006530:	eb19 090b 	adds.w	r9, r9, fp
 8006534:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006538:	f04f 0100 	mov.w	r1, #0
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006544:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006548:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800654c:	4689      	mov	r9, r1
 800654e:	4692      	mov	sl, r2
 8006550:	eb1b 0509 	adds.w	r5, fp, r9
 8006554:	eb4c 060a 	adc.w	r6, ip, sl
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	4619      	mov	r1, r3
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	f04f 0400 	mov.w	r4, #0
 800656a:	0094      	lsls	r4, r2, #2
 800656c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006570:	008b      	lsls	r3, r1, #2
 8006572:	461a      	mov	r2, r3
 8006574:	4623      	mov	r3, r4
 8006576:	4628      	mov	r0, r5
 8006578:	4631      	mov	r1, r6
 800657a:	f7fa fb15 	bl	8000ba8 <__aeabi_uldivmod>
 800657e:	4603      	mov	r3, r0
 8006580:	460c      	mov	r4, r1
 8006582:	461a      	mov	r2, r3
 8006584:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <UART_SetConfig+0x6f4>)
 8006586:	fba3 1302 	umull	r1, r3, r3, r2
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	2164      	movs	r1, #100	; 0x64
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	3332      	adds	r3, #50	; 0x32
 8006598:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <UART_SetConfig+0x6f4>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	f003 020f 	and.w	r2, r3, #15
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4442      	add	r2, r8
 80065aa:	609a      	str	r2, [r3, #8]
}
 80065ac:	e7ff      	b.n	80065ae <UART_SetConfig+0x6e2>
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b8:	40011000 	.word	0x40011000
 80065bc:	40011400 	.word	0x40011400
 80065c0:	51eb851f 	.word	0x51eb851f

080065c4 <LED_SEQUENCE_init>:

#include "../Inc/Sequence_led.h"


//On initialise les paramètres
void LED_SEQUENCE_init(sequence_led_t * seq_led, GPIO_TypeDef* gpio, uint16_t gpio_pin, int32_t init_seq, uint32_t periode, int8_t length_sequence, bool_e output_logic){
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	80fb      	strh	r3, [r7, #6]
	//Init des varaibles
	seq_led->compteur = 0;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	741a      	strb	r2, [r3, #16]
	seq_led->gpio = gpio ;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	601a      	str	r2, [r3, #0]
	seq_led->gpio_pin = gpio_pin ;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	88fa      	ldrh	r2, [r7, #6]
 80065e4:	809a      	strh	r2, [r3, #4]
	seq_led->length_sequence = length_sequence ;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	7f3a      	ldrb	r2, [r7, #28]
 80065ea:	745a      	strb	r2, [r3, #17]
	seq_led->periode = periode ;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	609a      	str	r2, [r3, #8]
	seq_led->output_logic = output_logic ;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	619a      	str	r2, [r3, #24]
	if(seq_led->output_logic == 1)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d102      	bne.n	8006606 <LED_SEQUENCE_init+0x42>
		//Si logique négative on inverse la séquence
		init_seq = ~init_seq ;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	43db      	mvns	r3, r3
 8006604:	603b      	str	r3, [r7, #0]
	seq_led->sequence = init_seq ;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	60da      	str	r2, [r3, #12]
	seq_led->previous_time = 0 ;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	615a      	str	r2, [r3, #20]



}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <LED_SEQUENCE_play>:
	seq_led->compteur = 0 ;
	seq_led->sequence = seq ;
}

//On change la sortie de la led en fonction de la séquence active
void LED_SEQUENCE_play(sequence_led_t * seq_led, uint32_t current_time_us){
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
	if(current_time_us / 1000 > seq_led->previous_time + seq_led->periode){
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	4a25      	ldr	r2, [pc, #148]	; (80066c4 <LED_SEQUENCE_play+0xa4>)
 800662e:	fba2 2303 	umull	r2, r3, r2, r3
 8006632:	099a      	lsrs	r2, r3, #6
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6959      	ldr	r1, [r3, #20]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	440b      	add	r3, r1
 800663e:	429a      	cmp	r2, r3
 8006640:	d93a      	bls.n	80066b8 <LED_SEQUENCE_play+0x98>
		seq_led->previous_time += seq_led->periode ;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	441a      	add	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	615a      	str	r2, [r3, #20]
		//on récupère le niveau logique de la sortie
		bool_e output = ((seq_led->sequence) >> ((seq_led->length_sequence - seq_led->compteur) - 1)) & 1 ;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800665a:	4619      	mov	r1, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8006662:	1acb      	subs	r3, r1, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	fa42 f303 	asr.w	r3, r2, r3
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
		//On update la sortie
		if(output)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <LED_SEQUENCE_play+0x62>
			seq_led->gpio->BSRR = seq_led->gpio_pin ;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	889a      	ldrh	r2, [r3, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	619a      	str	r2, [r3, #24]
 8006680:	e006      	b.n	8006690 <LED_SEQUENCE_play+0x70>
		else
			seq_led->gpio->BSRR = (uint32_t)(seq_led->gpio_pin) << 16U ;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	889b      	ldrh	r3, [r3, #4]
 8006686:	461a      	mov	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	0412      	lsls	r2, r2, #16
 800668e:	619a      	str	r2, [r3, #24]
		//on update le compteur
		seq_led->compteur ++ ;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	3301      	adds	r3, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	b25a      	sxtb	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	741a      	strb	r2, [r3, #16]
		//TODO : verif l'init si length > 0
		if(seq_led->compteur == seq_led->length_sequence)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f993 2010 	ldrsb.w	r2, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d102      	bne.n	80066b8 <LED_SEQUENCE_play+0x98>
			seq_led->compteur = 0 ;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	741a      	strb	r2, [r3, #16]
	}
}
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	10624dd3 	.word	0x10624dd3

080066c8 <__errno>:
 80066c8:	4b01      	ldr	r3, [pc, #4]	; (80066d0 <__errno+0x8>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20000264 	.word	0x20000264

080066d4 <__libc_init_array>:
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	4e0d      	ldr	r6, [pc, #52]	; (800670c <__libc_init_array+0x38>)
 80066d8:	4c0d      	ldr	r4, [pc, #52]	; (8006710 <__libc_init_array+0x3c>)
 80066da:	1ba4      	subs	r4, r4, r6
 80066dc:	10a4      	asrs	r4, r4, #2
 80066de:	2500      	movs	r5, #0
 80066e0:	42a5      	cmp	r5, r4
 80066e2:	d109      	bne.n	80066f8 <__libc_init_array+0x24>
 80066e4:	4e0b      	ldr	r6, [pc, #44]	; (8006714 <__libc_init_array+0x40>)
 80066e6:	4c0c      	ldr	r4, [pc, #48]	; (8006718 <__libc_init_array+0x44>)
 80066e8:	f002 fc74 	bl	8008fd4 <_init>
 80066ec:	1ba4      	subs	r4, r4, r6
 80066ee:	10a4      	asrs	r4, r4, #2
 80066f0:	2500      	movs	r5, #0
 80066f2:	42a5      	cmp	r5, r4
 80066f4:	d105      	bne.n	8006702 <__libc_init_array+0x2e>
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066fc:	4798      	blx	r3
 80066fe:	3501      	adds	r5, #1
 8006700:	e7ee      	b.n	80066e0 <__libc_init_array+0xc>
 8006702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006706:	4798      	blx	r3
 8006708:	3501      	adds	r5, #1
 800670a:	e7f2      	b.n	80066f2 <__libc_init_array+0x1e>
 800670c:	080092f8 	.word	0x080092f8
 8006710:	080092f8 	.word	0x080092f8
 8006714:	080092f8 	.word	0x080092f8
 8006718:	080092fc 	.word	0x080092fc

0800671c <memmove>:
 800671c:	4288      	cmp	r0, r1
 800671e:	b510      	push	{r4, lr}
 8006720:	eb01 0302 	add.w	r3, r1, r2
 8006724:	d807      	bhi.n	8006736 <memmove+0x1a>
 8006726:	1e42      	subs	r2, r0, #1
 8006728:	4299      	cmp	r1, r3
 800672a:	d00a      	beq.n	8006742 <memmove+0x26>
 800672c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006730:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006734:	e7f8      	b.n	8006728 <memmove+0xc>
 8006736:	4283      	cmp	r3, r0
 8006738:	d9f5      	bls.n	8006726 <memmove+0xa>
 800673a:	1881      	adds	r1, r0, r2
 800673c:	1ad2      	subs	r2, r2, r3
 800673e:	42d3      	cmn	r3, r2
 8006740:	d100      	bne.n	8006744 <memmove+0x28>
 8006742:	bd10      	pop	{r4, pc}
 8006744:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006748:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800674c:	e7f7      	b.n	800673e <memmove+0x22>

0800674e <memset>:
 800674e:	4402      	add	r2, r0
 8006750:	4603      	mov	r3, r0
 8006752:	4293      	cmp	r3, r2
 8006754:	d100      	bne.n	8006758 <memset+0xa>
 8006756:	4770      	bx	lr
 8006758:	f803 1b01 	strb.w	r1, [r3], #1
 800675c:	e7f9      	b.n	8006752 <memset+0x4>

0800675e <__cvt>:
 800675e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006762:	ec55 4b10 	vmov	r4, r5, d0
 8006766:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006768:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800676c:	2d00      	cmp	r5, #0
 800676e:	460e      	mov	r6, r1
 8006770:	4691      	mov	r9, r2
 8006772:	4619      	mov	r1, r3
 8006774:	bfb8      	it	lt
 8006776:	4622      	movlt	r2, r4
 8006778:	462b      	mov	r3, r5
 800677a:	f027 0720 	bic.w	r7, r7, #32
 800677e:	bfbb      	ittet	lt
 8006780:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006784:	461d      	movlt	r5, r3
 8006786:	2300      	movge	r3, #0
 8006788:	232d      	movlt	r3, #45	; 0x2d
 800678a:	bfb8      	it	lt
 800678c:	4614      	movlt	r4, r2
 800678e:	2f46      	cmp	r7, #70	; 0x46
 8006790:	700b      	strb	r3, [r1, #0]
 8006792:	d004      	beq.n	800679e <__cvt+0x40>
 8006794:	2f45      	cmp	r7, #69	; 0x45
 8006796:	d100      	bne.n	800679a <__cvt+0x3c>
 8006798:	3601      	adds	r6, #1
 800679a:	2102      	movs	r1, #2
 800679c:	e000      	b.n	80067a0 <__cvt+0x42>
 800679e:	2103      	movs	r1, #3
 80067a0:	ab03      	add	r3, sp, #12
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	ab02      	add	r3, sp, #8
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	4632      	mov	r2, r6
 80067aa:	4653      	mov	r3, sl
 80067ac:	ec45 4b10 	vmov	d0, r4, r5
 80067b0:	f000 feaa 	bl	8007508 <_dtoa_r>
 80067b4:	2f47      	cmp	r7, #71	; 0x47
 80067b6:	4680      	mov	r8, r0
 80067b8:	d102      	bne.n	80067c0 <__cvt+0x62>
 80067ba:	f019 0f01 	tst.w	r9, #1
 80067be:	d026      	beq.n	800680e <__cvt+0xb0>
 80067c0:	2f46      	cmp	r7, #70	; 0x46
 80067c2:	eb08 0906 	add.w	r9, r8, r6
 80067c6:	d111      	bne.n	80067ec <__cvt+0x8e>
 80067c8:	f898 3000 	ldrb.w	r3, [r8]
 80067cc:	2b30      	cmp	r3, #48	; 0x30
 80067ce:	d10a      	bne.n	80067e6 <__cvt+0x88>
 80067d0:	2200      	movs	r2, #0
 80067d2:	2300      	movs	r3, #0
 80067d4:	4620      	mov	r0, r4
 80067d6:	4629      	mov	r1, r5
 80067d8:	f7fa f976 	bl	8000ac8 <__aeabi_dcmpeq>
 80067dc:	b918      	cbnz	r0, 80067e6 <__cvt+0x88>
 80067de:	f1c6 0601 	rsb	r6, r6, #1
 80067e2:	f8ca 6000 	str.w	r6, [sl]
 80067e6:	f8da 3000 	ldr.w	r3, [sl]
 80067ea:	4499      	add	r9, r3
 80067ec:	2200      	movs	r2, #0
 80067ee:	2300      	movs	r3, #0
 80067f0:	4620      	mov	r0, r4
 80067f2:	4629      	mov	r1, r5
 80067f4:	f7fa f968 	bl	8000ac8 <__aeabi_dcmpeq>
 80067f8:	b938      	cbnz	r0, 800680a <__cvt+0xac>
 80067fa:	2230      	movs	r2, #48	; 0x30
 80067fc:	9b03      	ldr	r3, [sp, #12]
 80067fe:	454b      	cmp	r3, r9
 8006800:	d205      	bcs.n	800680e <__cvt+0xb0>
 8006802:	1c59      	adds	r1, r3, #1
 8006804:	9103      	str	r1, [sp, #12]
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	e7f8      	b.n	80067fc <__cvt+0x9e>
 800680a:	f8cd 900c 	str.w	r9, [sp, #12]
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006812:	eba3 0308 	sub.w	r3, r3, r8
 8006816:	4640      	mov	r0, r8
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	b004      	add	sp, #16
 800681c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006820 <__exponent>:
 8006820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006822:	2900      	cmp	r1, #0
 8006824:	4604      	mov	r4, r0
 8006826:	bfba      	itte	lt
 8006828:	4249      	neglt	r1, r1
 800682a:	232d      	movlt	r3, #45	; 0x2d
 800682c:	232b      	movge	r3, #43	; 0x2b
 800682e:	2909      	cmp	r1, #9
 8006830:	f804 2b02 	strb.w	r2, [r4], #2
 8006834:	7043      	strb	r3, [r0, #1]
 8006836:	dd20      	ble.n	800687a <__exponent+0x5a>
 8006838:	f10d 0307 	add.w	r3, sp, #7
 800683c:	461f      	mov	r7, r3
 800683e:	260a      	movs	r6, #10
 8006840:	fb91 f5f6 	sdiv	r5, r1, r6
 8006844:	fb06 1115 	mls	r1, r6, r5, r1
 8006848:	3130      	adds	r1, #48	; 0x30
 800684a:	2d09      	cmp	r5, #9
 800684c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006850:	f103 32ff 	add.w	r2, r3, #4294967295
 8006854:	4629      	mov	r1, r5
 8006856:	dc09      	bgt.n	800686c <__exponent+0x4c>
 8006858:	3130      	adds	r1, #48	; 0x30
 800685a:	3b02      	subs	r3, #2
 800685c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006860:	42bb      	cmp	r3, r7
 8006862:	4622      	mov	r2, r4
 8006864:	d304      	bcc.n	8006870 <__exponent+0x50>
 8006866:	1a10      	subs	r0, r2, r0
 8006868:	b003      	add	sp, #12
 800686a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800686c:	4613      	mov	r3, r2
 800686e:	e7e7      	b.n	8006840 <__exponent+0x20>
 8006870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006874:	f804 2b01 	strb.w	r2, [r4], #1
 8006878:	e7f2      	b.n	8006860 <__exponent+0x40>
 800687a:	2330      	movs	r3, #48	; 0x30
 800687c:	4419      	add	r1, r3
 800687e:	7083      	strb	r3, [r0, #2]
 8006880:	1d02      	adds	r2, r0, #4
 8006882:	70c1      	strb	r1, [r0, #3]
 8006884:	e7ef      	b.n	8006866 <__exponent+0x46>
	...

08006888 <_printf_float>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	b08d      	sub	sp, #52	; 0x34
 800688e:	460c      	mov	r4, r1
 8006890:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006894:	4616      	mov	r6, r2
 8006896:	461f      	mov	r7, r3
 8006898:	4605      	mov	r5, r0
 800689a:	f001 fd67 	bl	800836c <_localeconv_r>
 800689e:	6803      	ldr	r3, [r0, #0]
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7f9 fc94 	bl	80001d0 <strlen>
 80068a8:	2300      	movs	r3, #0
 80068aa:	930a      	str	r3, [sp, #40]	; 0x28
 80068ac:	f8d8 3000 	ldr.w	r3, [r8]
 80068b0:	9005      	str	r0, [sp, #20]
 80068b2:	3307      	adds	r3, #7
 80068b4:	f023 0307 	bic.w	r3, r3, #7
 80068b8:	f103 0208 	add.w	r2, r3, #8
 80068bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80068c0:	f8d4 b000 	ldr.w	fp, [r4]
 80068c4:	f8c8 2000 	str.w	r2, [r8]
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068d0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068d8:	9307      	str	r3, [sp, #28]
 80068da:	f8cd 8018 	str.w	r8, [sp, #24]
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	4ba7      	ldr	r3, [pc, #668]	; (8006b80 <_printf_float+0x2f8>)
 80068e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068e8:	f7fa f920 	bl	8000b2c <__aeabi_dcmpun>
 80068ec:	bb70      	cbnz	r0, 800694c <_printf_float+0xc4>
 80068ee:	f04f 32ff 	mov.w	r2, #4294967295
 80068f2:	4ba3      	ldr	r3, [pc, #652]	; (8006b80 <_printf_float+0x2f8>)
 80068f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068f8:	f7fa f8fa 	bl	8000af0 <__aeabi_dcmple>
 80068fc:	bb30      	cbnz	r0, 800694c <_printf_float+0xc4>
 80068fe:	2200      	movs	r2, #0
 8006900:	2300      	movs	r3, #0
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f7fa f8e9 	bl	8000adc <__aeabi_dcmplt>
 800690a:	b110      	cbz	r0, 8006912 <_printf_float+0x8a>
 800690c:	232d      	movs	r3, #45	; 0x2d
 800690e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006912:	4a9c      	ldr	r2, [pc, #624]	; (8006b84 <_printf_float+0x2fc>)
 8006914:	4b9c      	ldr	r3, [pc, #624]	; (8006b88 <_printf_float+0x300>)
 8006916:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800691a:	bf8c      	ite	hi
 800691c:	4690      	movhi	r8, r2
 800691e:	4698      	movls	r8, r3
 8006920:	2303      	movs	r3, #3
 8006922:	f02b 0204 	bic.w	r2, fp, #4
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	f04f 0900 	mov.w	r9, #0
 800692e:	9700      	str	r7, [sp, #0]
 8006930:	4633      	mov	r3, r6
 8006932:	aa0b      	add	r2, sp, #44	; 0x2c
 8006934:	4621      	mov	r1, r4
 8006936:	4628      	mov	r0, r5
 8006938:	f000 f9e6 	bl	8006d08 <_printf_common>
 800693c:	3001      	adds	r0, #1
 800693e:	f040 808d 	bne.w	8006a5c <_printf_float+0x1d4>
 8006942:	f04f 30ff 	mov.w	r0, #4294967295
 8006946:	b00d      	add	sp, #52	; 0x34
 8006948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694c:	4642      	mov	r2, r8
 800694e:	464b      	mov	r3, r9
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7fa f8ea 	bl	8000b2c <__aeabi_dcmpun>
 8006958:	b110      	cbz	r0, 8006960 <_printf_float+0xd8>
 800695a:	4a8c      	ldr	r2, [pc, #560]	; (8006b8c <_printf_float+0x304>)
 800695c:	4b8c      	ldr	r3, [pc, #560]	; (8006b90 <_printf_float+0x308>)
 800695e:	e7da      	b.n	8006916 <_printf_float+0x8e>
 8006960:	6861      	ldr	r1, [r4, #4]
 8006962:	1c4b      	adds	r3, r1, #1
 8006964:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006968:	a80a      	add	r0, sp, #40	; 0x28
 800696a:	d13e      	bne.n	80069ea <_printf_float+0x162>
 800696c:	2306      	movs	r3, #6
 800696e:	6063      	str	r3, [r4, #4]
 8006970:	2300      	movs	r3, #0
 8006972:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006976:	ab09      	add	r3, sp, #36	; 0x24
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	ec49 8b10 	vmov	d0, r8, r9
 800697e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006982:	6022      	str	r2, [r4, #0]
 8006984:	f8cd a004 	str.w	sl, [sp, #4]
 8006988:	6861      	ldr	r1, [r4, #4]
 800698a:	4628      	mov	r0, r5
 800698c:	f7ff fee7 	bl	800675e <__cvt>
 8006990:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006994:	2b47      	cmp	r3, #71	; 0x47
 8006996:	4680      	mov	r8, r0
 8006998:	d109      	bne.n	80069ae <_printf_float+0x126>
 800699a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699c:	1cd8      	adds	r0, r3, #3
 800699e:	db02      	blt.n	80069a6 <_printf_float+0x11e>
 80069a0:	6862      	ldr	r2, [r4, #4]
 80069a2:	4293      	cmp	r3, r2
 80069a4:	dd47      	ble.n	8006a36 <_printf_float+0x1ae>
 80069a6:	f1aa 0a02 	sub.w	sl, sl, #2
 80069aa:	fa5f fa8a 	uxtb.w	sl, sl
 80069ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80069b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069b4:	d824      	bhi.n	8006a00 <_printf_float+0x178>
 80069b6:	3901      	subs	r1, #1
 80069b8:	4652      	mov	r2, sl
 80069ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069be:	9109      	str	r1, [sp, #36]	; 0x24
 80069c0:	f7ff ff2e 	bl	8006820 <__exponent>
 80069c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069c6:	1813      	adds	r3, r2, r0
 80069c8:	2a01      	cmp	r2, #1
 80069ca:	4681      	mov	r9, r0
 80069cc:	6123      	str	r3, [r4, #16]
 80069ce:	dc02      	bgt.n	80069d6 <_printf_float+0x14e>
 80069d0:	6822      	ldr	r2, [r4, #0]
 80069d2:	07d1      	lsls	r1, r2, #31
 80069d4:	d501      	bpl.n	80069da <_printf_float+0x152>
 80069d6:	3301      	adds	r3, #1
 80069d8:	6123      	str	r3, [r4, #16]
 80069da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0a5      	beq.n	800692e <_printf_float+0xa6>
 80069e2:	232d      	movs	r3, #45	; 0x2d
 80069e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e8:	e7a1      	b.n	800692e <_printf_float+0xa6>
 80069ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80069ee:	f000 8177 	beq.w	8006ce0 <_printf_float+0x458>
 80069f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80069f6:	d1bb      	bne.n	8006970 <_printf_float+0xe8>
 80069f8:	2900      	cmp	r1, #0
 80069fa:	d1b9      	bne.n	8006970 <_printf_float+0xe8>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e7b6      	b.n	800696e <_printf_float+0xe6>
 8006a00:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006a04:	d119      	bne.n	8006a3a <_printf_float+0x1b2>
 8006a06:	2900      	cmp	r1, #0
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	dd0c      	ble.n	8006a26 <_printf_float+0x19e>
 8006a0c:	6121      	str	r1, [r4, #16]
 8006a0e:	b913      	cbnz	r3, 8006a16 <_printf_float+0x18e>
 8006a10:	6822      	ldr	r2, [r4, #0]
 8006a12:	07d2      	lsls	r2, r2, #31
 8006a14:	d502      	bpl.n	8006a1c <_printf_float+0x194>
 8006a16:	3301      	adds	r3, #1
 8006a18:	440b      	add	r3, r1
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a20:	f04f 0900 	mov.w	r9, #0
 8006a24:	e7d9      	b.n	80069da <_printf_float+0x152>
 8006a26:	b913      	cbnz	r3, 8006a2e <_printf_float+0x1a6>
 8006a28:	6822      	ldr	r2, [r4, #0]
 8006a2a:	07d0      	lsls	r0, r2, #31
 8006a2c:	d501      	bpl.n	8006a32 <_printf_float+0x1aa>
 8006a2e:	3302      	adds	r3, #2
 8006a30:	e7f3      	b.n	8006a1a <_printf_float+0x192>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e7f1      	b.n	8006a1a <_printf_float+0x192>
 8006a36:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006a3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	db05      	blt.n	8006a4e <_printf_float+0x1c6>
 8006a42:	6822      	ldr	r2, [r4, #0]
 8006a44:	6123      	str	r3, [r4, #16]
 8006a46:	07d1      	lsls	r1, r2, #31
 8006a48:	d5e8      	bpl.n	8006a1c <_printf_float+0x194>
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	e7e5      	b.n	8006a1a <_printf_float+0x192>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bfd4      	ite	le
 8006a52:	f1c3 0302 	rsble	r3, r3, #2
 8006a56:	2301      	movgt	r3, #1
 8006a58:	4413      	add	r3, r2
 8006a5a:	e7de      	b.n	8006a1a <_printf_float+0x192>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	055a      	lsls	r2, r3, #21
 8006a60:	d407      	bmi.n	8006a72 <_printf_float+0x1ea>
 8006a62:	6923      	ldr	r3, [r4, #16]
 8006a64:	4642      	mov	r2, r8
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d12b      	bne.n	8006ac8 <_printf_float+0x240>
 8006a70:	e767      	b.n	8006942 <_printf_float+0xba>
 8006a72:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006a76:	f240 80dc 	bls.w	8006c32 <_printf_float+0x3aa>
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a82:	f7fa f821 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d033      	beq.n	8006af2 <_printf_float+0x26a>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4a41      	ldr	r2, [pc, #260]	; (8006b94 <_printf_float+0x30c>)
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b8      	blx	r7
 8006a94:	3001      	adds	r0, #1
 8006a96:	f43f af54 	beq.w	8006942 <_printf_float+0xba>
 8006a9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	db02      	blt.n	8006aa8 <_printf_float+0x220>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	07d8      	lsls	r0, r3, #31
 8006aa6:	d50f      	bpl.n	8006ac8 <_printf_float+0x240>
 8006aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aac:	4631      	mov	r1, r6
 8006aae:	4628      	mov	r0, r5
 8006ab0:	47b8      	blx	r7
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	f43f af45 	beq.w	8006942 <_printf_float+0xba>
 8006ab8:	f04f 0800 	mov.w	r8, #0
 8006abc:	f104 091a 	add.w	r9, r4, #26
 8006ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	4543      	cmp	r3, r8
 8006ac6:	dc09      	bgt.n	8006adc <_printf_float+0x254>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	079b      	lsls	r3, r3, #30
 8006acc:	f100 8103 	bmi.w	8006cd6 <_printf_float+0x44e>
 8006ad0:	68e0      	ldr	r0, [r4, #12]
 8006ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ad4:	4298      	cmp	r0, r3
 8006ad6:	bfb8      	it	lt
 8006ad8:	4618      	movlt	r0, r3
 8006ada:	e734      	b.n	8006946 <_printf_float+0xbe>
 8006adc:	2301      	movs	r3, #1
 8006ade:	464a      	mov	r2, r9
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b8      	blx	r7
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	f43f af2b 	beq.w	8006942 <_printf_float+0xba>
 8006aec:	f108 0801 	add.w	r8, r8, #1
 8006af0:	e7e6      	b.n	8006ac0 <_printf_float+0x238>
 8006af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	dc2b      	bgt.n	8006b50 <_printf_float+0x2c8>
 8006af8:	2301      	movs	r3, #1
 8006afa:	4a26      	ldr	r2, [pc, #152]	; (8006b94 <_printf_float+0x30c>)
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f af1d 	beq.w	8006942 <_printf_float+0xba>
 8006b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b0a:	b923      	cbnz	r3, 8006b16 <_printf_float+0x28e>
 8006b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0e:	b913      	cbnz	r3, 8006b16 <_printf_float+0x28e>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	07d9      	lsls	r1, r3, #31
 8006b14:	d5d8      	bpl.n	8006ac8 <_printf_float+0x240>
 8006b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b8      	blx	r7
 8006b20:	3001      	adds	r0, #1
 8006b22:	f43f af0e 	beq.w	8006942 <_printf_float+0xba>
 8006b26:	f04f 0900 	mov.w	r9, #0
 8006b2a:	f104 0a1a 	add.w	sl, r4, #26
 8006b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b30:	425b      	negs	r3, r3
 8006b32:	454b      	cmp	r3, r9
 8006b34:	dc01      	bgt.n	8006b3a <_printf_float+0x2b2>
 8006b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b38:	e794      	b.n	8006a64 <_printf_float+0x1dc>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4652      	mov	r2, sl
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	f43f aefc 	beq.w	8006942 <_printf_float+0xba>
 8006b4a:	f109 0901 	add.w	r9, r9, #1
 8006b4e:	e7ee      	b.n	8006b2e <_printf_float+0x2a6>
 8006b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b54:	429a      	cmp	r2, r3
 8006b56:	bfa8      	it	ge
 8006b58:	461a      	movge	r2, r3
 8006b5a:	2a00      	cmp	r2, #0
 8006b5c:	4691      	mov	r9, r2
 8006b5e:	dd07      	ble.n	8006b70 <_printf_float+0x2e8>
 8006b60:	4613      	mov	r3, r2
 8006b62:	4631      	mov	r1, r6
 8006b64:	4642      	mov	r2, r8
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f aee9 	beq.w	8006942 <_printf_float+0xba>
 8006b70:	f104 031a 	add.w	r3, r4, #26
 8006b74:	f04f 0b00 	mov.w	fp, #0
 8006b78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b7c:	9306      	str	r3, [sp, #24]
 8006b7e:	e015      	b.n	8006bac <_printf_float+0x324>
 8006b80:	7fefffff 	.word	0x7fefffff
 8006b84:	08009038 	.word	0x08009038
 8006b88:	08009034 	.word	0x08009034
 8006b8c:	08009040 	.word	0x08009040
 8006b90:	0800903c 	.word	0x0800903c
 8006b94:	08009044 	.word	0x08009044
 8006b98:	2301      	movs	r3, #1
 8006b9a:	9a06      	ldr	r2, [sp, #24]
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	f43f aecd 	beq.w	8006942 <_printf_float+0xba>
 8006ba8:	f10b 0b01 	add.w	fp, fp, #1
 8006bac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006bb0:	ebaa 0309 	sub.w	r3, sl, r9
 8006bb4:	455b      	cmp	r3, fp
 8006bb6:	dcef      	bgt.n	8006b98 <_printf_float+0x310>
 8006bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	44d0      	add	r8, sl
 8006bc0:	db15      	blt.n	8006bee <_printf_float+0x366>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	07da      	lsls	r2, r3, #31
 8006bc6:	d412      	bmi.n	8006bee <_printf_float+0x366>
 8006bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bcc:	eba3 020a 	sub.w	r2, r3, sl
 8006bd0:	eba3 0a01 	sub.w	sl, r3, r1
 8006bd4:	4592      	cmp	sl, r2
 8006bd6:	bfa8      	it	ge
 8006bd8:	4692      	movge	sl, r2
 8006bda:	f1ba 0f00 	cmp.w	sl, #0
 8006bde:	dc0e      	bgt.n	8006bfe <_printf_float+0x376>
 8006be0:	f04f 0800 	mov.w	r8, #0
 8006be4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006be8:	f104 091a 	add.w	r9, r4, #26
 8006bec:	e019      	b.n	8006c22 <_printf_float+0x39a>
 8006bee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d1e5      	bne.n	8006bc8 <_printf_float+0x340>
 8006bfc:	e6a1      	b.n	8006942 <_printf_float+0xba>
 8006bfe:	4653      	mov	r3, sl
 8006c00:	4642      	mov	r2, r8
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b8      	blx	r7
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d1e9      	bne.n	8006be0 <_printf_float+0x358>
 8006c0c:	e699      	b.n	8006942 <_printf_float+0xba>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	464a      	mov	r2, r9
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f43f ae92 	beq.w	8006942 <_printf_float+0xba>
 8006c1e:	f108 0801 	add.w	r8, r8, #1
 8006c22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c26:	1a9b      	subs	r3, r3, r2
 8006c28:	eba3 030a 	sub.w	r3, r3, sl
 8006c2c:	4543      	cmp	r3, r8
 8006c2e:	dcee      	bgt.n	8006c0e <_printf_float+0x386>
 8006c30:	e74a      	b.n	8006ac8 <_printf_float+0x240>
 8006c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c34:	2a01      	cmp	r2, #1
 8006c36:	dc01      	bgt.n	8006c3c <_printf_float+0x3b4>
 8006c38:	07db      	lsls	r3, r3, #31
 8006c3a:	d53a      	bpl.n	8006cb2 <_printf_float+0x42a>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	4642      	mov	r2, r8
 8006c40:	4631      	mov	r1, r6
 8006c42:	4628      	mov	r0, r5
 8006c44:	47b8      	blx	r7
 8006c46:	3001      	adds	r0, #1
 8006c48:	f43f ae7b 	beq.w	8006942 <_printf_float+0xba>
 8006c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c50:	4631      	mov	r1, r6
 8006c52:	4628      	mov	r0, r5
 8006c54:	47b8      	blx	r7
 8006c56:	3001      	adds	r0, #1
 8006c58:	f108 0801 	add.w	r8, r8, #1
 8006c5c:	f43f ae71 	beq.w	8006942 <_printf_float+0xba>
 8006c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c62:	2200      	movs	r2, #0
 8006c64:	f103 3aff 	add.w	sl, r3, #4294967295
 8006c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f7f9 ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c72:	b9c8      	cbnz	r0, 8006ca8 <_printf_float+0x420>
 8006c74:	4653      	mov	r3, sl
 8006c76:	4642      	mov	r2, r8
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	47b8      	blx	r7
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d10e      	bne.n	8006ca0 <_printf_float+0x418>
 8006c82:	e65e      	b.n	8006942 <_printf_float+0xba>
 8006c84:	2301      	movs	r3, #1
 8006c86:	4652      	mov	r2, sl
 8006c88:	4631      	mov	r1, r6
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	47b8      	blx	r7
 8006c8e:	3001      	adds	r0, #1
 8006c90:	f43f ae57 	beq.w	8006942 <_printf_float+0xba>
 8006c94:	f108 0801 	add.w	r8, r8, #1
 8006c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	4543      	cmp	r3, r8
 8006c9e:	dcf1      	bgt.n	8006c84 <_printf_float+0x3fc>
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ca6:	e6de      	b.n	8006a66 <_printf_float+0x1de>
 8006ca8:	f04f 0800 	mov.w	r8, #0
 8006cac:	f104 0a1a 	add.w	sl, r4, #26
 8006cb0:	e7f2      	b.n	8006c98 <_printf_float+0x410>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e7df      	b.n	8006c76 <_printf_float+0x3ee>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	464a      	mov	r2, r9
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	47b8      	blx	r7
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	f43f ae3e 	beq.w	8006942 <_printf_float+0xba>
 8006cc6:	f108 0801 	add.w	r8, r8, #1
 8006cca:	68e3      	ldr	r3, [r4, #12]
 8006ccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	4543      	cmp	r3, r8
 8006cd2:	dcf0      	bgt.n	8006cb6 <_printf_float+0x42e>
 8006cd4:	e6fc      	b.n	8006ad0 <_printf_float+0x248>
 8006cd6:	f04f 0800 	mov.w	r8, #0
 8006cda:	f104 0919 	add.w	r9, r4, #25
 8006cde:	e7f4      	b.n	8006cca <_printf_float+0x442>
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	f43f ae8b 	beq.w	80069fc <_printf_float+0x174>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006cec:	ab09      	add	r3, sp, #36	; 0x24
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	ec49 8b10 	vmov	d0, r8, r9
 8006cf4:	6022      	str	r2, [r4, #0]
 8006cf6:	f8cd a004 	str.w	sl, [sp, #4]
 8006cfa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f7ff fd2d 	bl	800675e <__cvt>
 8006d04:	4680      	mov	r8, r0
 8006d06:	e648      	b.n	800699a <_printf_float+0x112>

08006d08 <_printf_common>:
 8006d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	4691      	mov	r9, r2
 8006d0e:	461f      	mov	r7, r3
 8006d10:	688a      	ldr	r2, [r1, #8]
 8006d12:	690b      	ldr	r3, [r1, #16]
 8006d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	bfb8      	it	lt
 8006d1c:	4613      	movlt	r3, r2
 8006d1e:	f8c9 3000 	str.w	r3, [r9]
 8006d22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d26:	4606      	mov	r6, r0
 8006d28:	460c      	mov	r4, r1
 8006d2a:	b112      	cbz	r2, 8006d32 <_printf_common+0x2a>
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	f8c9 3000 	str.w	r3, [r9]
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	0699      	lsls	r1, r3, #26
 8006d36:	bf42      	ittt	mi
 8006d38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d3c:	3302      	addmi	r3, #2
 8006d3e:	f8c9 3000 	strmi.w	r3, [r9]
 8006d42:	6825      	ldr	r5, [r4, #0]
 8006d44:	f015 0506 	ands.w	r5, r5, #6
 8006d48:	d107      	bne.n	8006d5a <_printf_common+0x52>
 8006d4a:	f104 0a19 	add.w	sl, r4, #25
 8006d4e:	68e3      	ldr	r3, [r4, #12]
 8006d50:	f8d9 2000 	ldr.w	r2, [r9]
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	42ab      	cmp	r3, r5
 8006d58:	dc28      	bgt.n	8006dac <_printf_common+0xa4>
 8006d5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	3300      	adds	r3, #0
 8006d62:	bf18      	it	ne
 8006d64:	2301      	movne	r3, #1
 8006d66:	0692      	lsls	r2, r2, #26
 8006d68:	d42d      	bmi.n	8006dc6 <_printf_common+0xbe>
 8006d6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d6e:	4639      	mov	r1, r7
 8006d70:	4630      	mov	r0, r6
 8006d72:	47c0      	blx	r8
 8006d74:	3001      	adds	r0, #1
 8006d76:	d020      	beq.n	8006dba <_printf_common+0xb2>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	68e5      	ldr	r5, [r4, #12]
 8006d7c:	f8d9 2000 	ldr.w	r2, [r9]
 8006d80:	f003 0306 	and.w	r3, r3, #6
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	bf08      	it	eq
 8006d88:	1aad      	subeq	r5, r5, r2
 8006d8a:	68a3      	ldr	r3, [r4, #8]
 8006d8c:	6922      	ldr	r2, [r4, #16]
 8006d8e:	bf0c      	ite	eq
 8006d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d94:	2500      	movne	r5, #0
 8006d96:	4293      	cmp	r3, r2
 8006d98:	bfc4      	itt	gt
 8006d9a:	1a9b      	subgt	r3, r3, r2
 8006d9c:	18ed      	addgt	r5, r5, r3
 8006d9e:	f04f 0900 	mov.w	r9, #0
 8006da2:	341a      	adds	r4, #26
 8006da4:	454d      	cmp	r5, r9
 8006da6:	d11a      	bne.n	8006dde <_printf_common+0xd6>
 8006da8:	2000      	movs	r0, #0
 8006daa:	e008      	b.n	8006dbe <_printf_common+0xb6>
 8006dac:	2301      	movs	r3, #1
 8006dae:	4652      	mov	r2, sl
 8006db0:	4639      	mov	r1, r7
 8006db2:	4630      	mov	r0, r6
 8006db4:	47c0      	blx	r8
 8006db6:	3001      	adds	r0, #1
 8006db8:	d103      	bne.n	8006dc2 <_printf_common+0xba>
 8006dba:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc2:	3501      	adds	r5, #1
 8006dc4:	e7c3      	b.n	8006d4e <_printf_common+0x46>
 8006dc6:	18e1      	adds	r1, r4, r3
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	2030      	movs	r0, #48	; 0x30
 8006dcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dd0:	4422      	add	r2, r4
 8006dd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dda:	3302      	adds	r3, #2
 8006ddc:	e7c5      	b.n	8006d6a <_printf_common+0x62>
 8006dde:	2301      	movs	r3, #1
 8006de0:	4622      	mov	r2, r4
 8006de2:	4639      	mov	r1, r7
 8006de4:	4630      	mov	r0, r6
 8006de6:	47c0      	blx	r8
 8006de8:	3001      	adds	r0, #1
 8006dea:	d0e6      	beq.n	8006dba <_printf_common+0xb2>
 8006dec:	f109 0901 	add.w	r9, r9, #1
 8006df0:	e7d8      	b.n	8006da4 <_printf_common+0x9c>
	...

08006df4 <_printf_i>:
 8006df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006df8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	7e09      	ldrb	r1, [r1, #24]
 8006e00:	b085      	sub	sp, #20
 8006e02:	296e      	cmp	r1, #110	; 0x6e
 8006e04:	4617      	mov	r7, r2
 8006e06:	4606      	mov	r6, r0
 8006e08:	4698      	mov	r8, r3
 8006e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e0c:	f000 80b3 	beq.w	8006f76 <_printf_i+0x182>
 8006e10:	d822      	bhi.n	8006e58 <_printf_i+0x64>
 8006e12:	2963      	cmp	r1, #99	; 0x63
 8006e14:	d036      	beq.n	8006e84 <_printf_i+0x90>
 8006e16:	d80a      	bhi.n	8006e2e <_printf_i+0x3a>
 8006e18:	2900      	cmp	r1, #0
 8006e1a:	f000 80b9 	beq.w	8006f90 <_printf_i+0x19c>
 8006e1e:	2958      	cmp	r1, #88	; 0x58
 8006e20:	f000 8083 	beq.w	8006f2a <_printf_i+0x136>
 8006e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e2c:	e032      	b.n	8006e94 <_printf_i+0xa0>
 8006e2e:	2964      	cmp	r1, #100	; 0x64
 8006e30:	d001      	beq.n	8006e36 <_printf_i+0x42>
 8006e32:	2969      	cmp	r1, #105	; 0x69
 8006e34:	d1f6      	bne.n	8006e24 <_printf_i+0x30>
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	6813      	ldr	r3, [r2, #0]
 8006e3a:	0605      	lsls	r5, r0, #24
 8006e3c:	f103 0104 	add.w	r1, r3, #4
 8006e40:	d52a      	bpl.n	8006e98 <_printf_i+0xa4>
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6011      	str	r1, [r2, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	da03      	bge.n	8006e52 <_printf_i+0x5e>
 8006e4a:	222d      	movs	r2, #45	; 0x2d
 8006e4c:	425b      	negs	r3, r3
 8006e4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e52:	486f      	ldr	r0, [pc, #444]	; (8007010 <_printf_i+0x21c>)
 8006e54:	220a      	movs	r2, #10
 8006e56:	e039      	b.n	8006ecc <_printf_i+0xd8>
 8006e58:	2973      	cmp	r1, #115	; 0x73
 8006e5a:	f000 809d 	beq.w	8006f98 <_printf_i+0x1a4>
 8006e5e:	d808      	bhi.n	8006e72 <_printf_i+0x7e>
 8006e60:	296f      	cmp	r1, #111	; 0x6f
 8006e62:	d020      	beq.n	8006ea6 <_printf_i+0xb2>
 8006e64:	2970      	cmp	r1, #112	; 0x70
 8006e66:	d1dd      	bne.n	8006e24 <_printf_i+0x30>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	f043 0320 	orr.w	r3, r3, #32
 8006e6e:	6023      	str	r3, [r4, #0]
 8006e70:	e003      	b.n	8006e7a <_printf_i+0x86>
 8006e72:	2975      	cmp	r1, #117	; 0x75
 8006e74:	d017      	beq.n	8006ea6 <_printf_i+0xb2>
 8006e76:	2978      	cmp	r1, #120	; 0x78
 8006e78:	d1d4      	bne.n	8006e24 <_printf_i+0x30>
 8006e7a:	2378      	movs	r3, #120	; 0x78
 8006e7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e80:	4864      	ldr	r0, [pc, #400]	; (8007014 <_printf_i+0x220>)
 8006e82:	e055      	b.n	8006f30 <_printf_i+0x13c>
 8006e84:	6813      	ldr	r3, [r2, #0]
 8006e86:	1d19      	adds	r1, r3, #4
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6011      	str	r1, [r2, #0]
 8006e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e94:	2301      	movs	r3, #1
 8006e96:	e08c      	b.n	8006fb2 <_printf_i+0x1be>
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6011      	str	r1, [r2, #0]
 8006e9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ea0:	bf18      	it	ne
 8006ea2:	b21b      	sxthne	r3, r3
 8006ea4:	e7cf      	b.n	8006e46 <_printf_i+0x52>
 8006ea6:	6813      	ldr	r3, [r2, #0]
 8006ea8:	6825      	ldr	r5, [r4, #0]
 8006eaa:	1d18      	adds	r0, r3, #4
 8006eac:	6010      	str	r0, [r2, #0]
 8006eae:	0628      	lsls	r0, r5, #24
 8006eb0:	d501      	bpl.n	8006eb6 <_printf_i+0xc2>
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	e002      	b.n	8006ebc <_printf_i+0xc8>
 8006eb6:	0668      	lsls	r0, r5, #25
 8006eb8:	d5fb      	bpl.n	8006eb2 <_printf_i+0xbe>
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	4854      	ldr	r0, [pc, #336]	; (8007010 <_printf_i+0x21c>)
 8006ebe:	296f      	cmp	r1, #111	; 0x6f
 8006ec0:	bf14      	ite	ne
 8006ec2:	220a      	movne	r2, #10
 8006ec4:	2208      	moveq	r2, #8
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ecc:	6865      	ldr	r5, [r4, #4]
 8006ece:	60a5      	str	r5, [r4, #8]
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	f2c0 8095 	blt.w	8007000 <_printf_i+0x20c>
 8006ed6:	6821      	ldr	r1, [r4, #0]
 8006ed8:	f021 0104 	bic.w	r1, r1, #4
 8006edc:	6021      	str	r1, [r4, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d13d      	bne.n	8006f5e <_printf_i+0x16a>
 8006ee2:	2d00      	cmp	r5, #0
 8006ee4:	f040 808e 	bne.w	8007004 <_printf_i+0x210>
 8006ee8:	4665      	mov	r5, ip
 8006eea:	2a08      	cmp	r2, #8
 8006eec:	d10b      	bne.n	8006f06 <_printf_i+0x112>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	07db      	lsls	r3, r3, #31
 8006ef2:	d508      	bpl.n	8006f06 <_printf_i+0x112>
 8006ef4:	6923      	ldr	r3, [r4, #16]
 8006ef6:	6862      	ldr	r2, [r4, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	bfde      	ittt	le
 8006efc:	2330      	movle	r3, #48	; 0x30
 8006efe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f06:	ebac 0305 	sub.w	r3, ip, r5
 8006f0a:	6123      	str	r3, [r4, #16]
 8006f0c:	f8cd 8000 	str.w	r8, [sp]
 8006f10:	463b      	mov	r3, r7
 8006f12:	aa03      	add	r2, sp, #12
 8006f14:	4621      	mov	r1, r4
 8006f16:	4630      	mov	r0, r6
 8006f18:	f7ff fef6 	bl	8006d08 <_printf_common>
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d14d      	bne.n	8006fbc <_printf_i+0x1c8>
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	b005      	add	sp, #20
 8006f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f2a:	4839      	ldr	r0, [pc, #228]	; (8007010 <_printf_i+0x21c>)
 8006f2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f30:	6813      	ldr	r3, [r2, #0]
 8006f32:	6821      	ldr	r1, [r4, #0]
 8006f34:	1d1d      	adds	r5, r3, #4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6015      	str	r5, [r2, #0]
 8006f3a:	060a      	lsls	r2, r1, #24
 8006f3c:	d50b      	bpl.n	8006f56 <_printf_i+0x162>
 8006f3e:	07ca      	lsls	r2, r1, #31
 8006f40:	bf44      	itt	mi
 8006f42:	f041 0120 	orrmi.w	r1, r1, #32
 8006f46:	6021      	strmi	r1, [r4, #0]
 8006f48:	b91b      	cbnz	r3, 8006f52 <_printf_i+0x15e>
 8006f4a:	6822      	ldr	r2, [r4, #0]
 8006f4c:	f022 0220 	bic.w	r2, r2, #32
 8006f50:	6022      	str	r2, [r4, #0]
 8006f52:	2210      	movs	r2, #16
 8006f54:	e7b7      	b.n	8006ec6 <_printf_i+0xd2>
 8006f56:	064d      	lsls	r5, r1, #25
 8006f58:	bf48      	it	mi
 8006f5a:	b29b      	uxthmi	r3, r3
 8006f5c:	e7ef      	b.n	8006f3e <_printf_i+0x14a>
 8006f5e:	4665      	mov	r5, ip
 8006f60:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f64:	fb02 3311 	mls	r3, r2, r1, r3
 8006f68:	5cc3      	ldrb	r3, [r0, r3]
 8006f6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f6e:	460b      	mov	r3, r1
 8006f70:	2900      	cmp	r1, #0
 8006f72:	d1f5      	bne.n	8006f60 <_printf_i+0x16c>
 8006f74:	e7b9      	b.n	8006eea <_printf_i+0xf6>
 8006f76:	6813      	ldr	r3, [r2, #0]
 8006f78:	6825      	ldr	r5, [r4, #0]
 8006f7a:	6961      	ldr	r1, [r4, #20]
 8006f7c:	1d18      	adds	r0, r3, #4
 8006f7e:	6010      	str	r0, [r2, #0]
 8006f80:	0628      	lsls	r0, r5, #24
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	d501      	bpl.n	8006f8a <_printf_i+0x196>
 8006f86:	6019      	str	r1, [r3, #0]
 8006f88:	e002      	b.n	8006f90 <_printf_i+0x19c>
 8006f8a:	066a      	lsls	r2, r5, #25
 8006f8c:	d5fb      	bpl.n	8006f86 <_printf_i+0x192>
 8006f8e:	8019      	strh	r1, [r3, #0]
 8006f90:	2300      	movs	r3, #0
 8006f92:	6123      	str	r3, [r4, #16]
 8006f94:	4665      	mov	r5, ip
 8006f96:	e7b9      	b.n	8006f0c <_printf_i+0x118>
 8006f98:	6813      	ldr	r3, [r2, #0]
 8006f9a:	1d19      	adds	r1, r3, #4
 8006f9c:	6011      	str	r1, [r2, #0]
 8006f9e:	681d      	ldr	r5, [r3, #0]
 8006fa0:	6862      	ldr	r2, [r4, #4]
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f7f9 f91b 	bl	80001e0 <memchr>
 8006faa:	b108      	cbz	r0, 8006fb0 <_printf_i+0x1bc>
 8006fac:	1b40      	subs	r0, r0, r5
 8006fae:	6060      	str	r0, [r4, #4]
 8006fb0:	6863      	ldr	r3, [r4, #4]
 8006fb2:	6123      	str	r3, [r4, #16]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fba:	e7a7      	b.n	8006f0c <_printf_i+0x118>
 8006fbc:	6923      	ldr	r3, [r4, #16]
 8006fbe:	462a      	mov	r2, r5
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	47c0      	blx	r8
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d0aa      	beq.n	8006f20 <_printf_i+0x12c>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	079b      	lsls	r3, r3, #30
 8006fce:	d413      	bmi.n	8006ff8 <_printf_i+0x204>
 8006fd0:	68e0      	ldr	r0, [r4, #12]
 8006fd2:	9b03      	ldr	r3, [sp, #12]
 8006fd4:	4298      	cmp	r0, r3
 8006fd6:	bfb8      	it	lt
 8006fd8:	4618      	movlt	r0, r3
 8006fda:	e7a3      	b.n	8006f24 <_printf_i+0x130>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	464a      	mov	r2, r9
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	47c0      	blx	r8
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d09a      	beq.n	8006f20 <_printf_i+0x12c>
 8006fea:	3501      	adds	r5, #1
 8006fec:	68e3      	ldr	r3, [r4, #12]
 8006fee:	9a03      	ldr	r2, [sp, #12]
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	42ab      	cmp	r3, r5
 8006ff4:	dcf2      	bgt.n	8006fdc <_printf_i+0x1e8>
 8006ff6:	e7eb      	b.n	8006fd0 <_printf_i+0x1dc>
 8006ff8:	2500      	movs	r5, #0
 8006ffa:	f104 0919 	add.w	r9, r4, #25
 8006ffe:	e7f5      	b.n	8006fec <_printf_i+0x1f8>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1ac      	bne.n	8006f5e <_printf_i+0x16a>
 8007004:	7803      	ldrb	r3, [r0, #0]
 8007006:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800700a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800700e:	e76c      	b.n	8006eea <_printf_i+0xf6>
 8007010:	08009046 	.word	0x08009046
 8007014:	08009057 	.word	0x08009057

08007018 <iprintf>:
 8007018:	b40f      	push	{r0, r1, r2, r3}
 800701a:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <iprintf+0x2c>)
 800701c:	b513      	push	{r0, r1, r4, lr}
 800701e:	681c      	ldr	r4, [r3, #0]
 8007020:	b124      	cbz	r4, 800702c <iprintf+0x14>
 8007022:	69a3      	ldr	r3, [r4, #24]
 8007024:	b913      	cbnz	r3, 800702c <iprintf+0x14>
 8007026:	4620      	mov	r0, r4
 8007028:	f001 f916 	bl	8008258 <__sinit>
 800702c:	ab05      	add	r3, sp, #20
 800702e:	9a04      	ldr	r2, [sp, #16]
 8007030:	68a1      	ldr	r1, [r4, #8]
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	4620      	mov	r0, r4
 8007036:	f001 fdd9 	bl	8008bec <_vfiprintf_r>
 800703a:	b002      	add	sp, #8
 800703c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007040:	b004      	add	sp, #16
 8007042:	4770      	bx	lr
 8007044:	20000264 	.word	0x20000264

08007048 <_puts_r>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	460e      	mov	r6, r1
 800704c:	4605      	mov	r5, r0
 800704e:	b118      	cbz	r0, 8007058 <_puts_r+0x10>
 8007050:	6983      	ldr	r3, [r0, #24]
 8007052:	b90b      	cbnz	r3, 8007058 <_puts_r+0x10>
 8007054:	f001 f900 	bl	8008258 <__sinit>
 8007058:	69ab      	ldr	r3, [r5, #24]
 800705a:	68ac      	ldr	r4, [r5, #8]
 800705c:	b913      	cbnz	r3, 8007064 <_puts_r+0x1c>
 800705e:	4628      	mov	r0, r5
 8007060:	f001 f8fa 	bl	8008258 <__sinit>
 8007064:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <_puts_r+0xac>)
 8007066:	429c      	cmp	r4, r3
 8007068:	d117      	bne.n	800709a <_puts_r+0x52>
 800706a:	686c      	ldr	r4, [r5, #4]
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	071b      	lsls	r3, r3, #28
 8007070:	d51d      	bpl.n	80070ae <_puts_r+0x66>
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	b1db      	cbz	r3, 80070ae <_puts_r+0x66>
 8007076:	3e01      	subs	r6, #1
 8007078:	68a3      	ldr	r3, [r4, #8]
 800707a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800707e:	3b01      	subs	r3, #1
 8007080:	60a3      	str	r3, [r4, #8]
 8007082:	b9e9      	cbnz	r1, 80070c0 <_puts_r+0x78>
 8007084:	2b00      	cmp	r3, #0
 8007086:	da2e      	bge.n	80070e6 <_puts_r+0x9e>
 8007088:	4622      	mov	r2, r4
 800708a:	210a      	movs	r1, #10
 800708c:	4628      	mov	r0, r5
 800708e:	f000 f8ed 	bl	800726c <__swbuf_r>
 8007092:	3001      	adds	r0, #1
 8007094:	d011      	beq.n	80070ba <_puts_r+0x72>
 8007096:	200a      	movs	r0, #10
 8007098:	e011      	b.n	80070be <_puts_r+0x76>
 800709a:	4b17      	ldr	r3, [pc, #92]	; (80070f8 <_puts_r+0xb0>)
 800709c:	429c      	cmp	r4, r3
 800709e:	d101      	bne.n	80070a4 <_puts_r+0x5c>
 80070a0:	68ac      	ldr	r4, [r5, #8]
 80070a2:	e7e3      	b.n	800706c <_puts_r+0x24>
 80070a4:	4b15      	ldr	r3, [pc, #84]	; (80070fc <_puts_r+0xb4>)
 80070a6:	429c      	cmp	r4, r3
 80070a8:	bf08      	it	eq
 80070aa:	68ec      	ldreq	r4, [r5, #12]
 80070ac:	e7de      	b.n	800706c <_puts_r+0x24>
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	f000 f92d 	bl	8007310 <__swsetup_r>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d0dd      	beq.n	8007076 <_puts_r+0x2e>
 80070ba:	f04f 30ff 	mov.w	r0, #4294967295
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	da04      	bge.n	80070ce <_puts_r+0x86>
 80070c4:	69a2      	ldr	r2, [r4, #24]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	dc06      	bgt.n	80070d8 <_puts_r+0x90>
 80070ca:	290a      	cmp	r1, #10
 80070cc:	d004      	beq.n	80070d8 <_puts_r+0x90>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	6022      	str	r2, [r4, #0]
 80070d4:	7019      	strb	r1, [r3, #0]
 80070d6:	e7cf      	b.n	8007078 <_puts_r+0x30>
 80070d8:	4622      	mov	r2, r4
 80070da:	4628      	mov	r0, r5
 80070dc:	f000 f8c6 	bl	800726c <__swbuf_r>
 80070e0:	3001      	adds	r0, #1
 80070e2:	d1c9      	bne.n	8007078 <_puts_r+0x30>
 80070e4:	e7e9      	b.n	80070ba <_puts_r+0x72>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	200a      	movs	r0, #10
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	7018      	strb	r0, [r3, #0]
 80070f0:	e7e5      	b.n	80070be <_puts_r+0x76>
 80070f2:	bf00      	nop
 80070f4:	08009098 	.word	0x08009098
 80070f8:	080090b8 	.word	0x080090b8
 80070fc:	08009078 	.word	0x08009078

08007100 <puts>:
 8007100:	4b02      	ldr	r3, [pc, #8]	; (800710c <puts+0xc>)
 8007102:	4601      	mov	r1, r0
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	f7ff bf9f 	b.w	8007048 <_puts_r>
 800710a:	bf00      	nop
 800710c:	20000264 	.word	0x20000264

08007110 <setvbuf>:
 8007110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007114:	461d      	mov	r5, r3
 8007116:	4b51      	ldr	r3, [pc, #324]	; (800725c <setvbuf+0x14c>)
 8007118:	681e      	ldr	r6, [r3, #0]
 800711a:	4604      	mov	r4, r0
 800711c:	460f      	mov	r7, r1
 800711e:	4690      	mov	r8, r2
 8007120:	b126      	cbz	r6, 800712c <setvbuf+0x1c>
 8007122:	69b3      	ldr	r3, [r6, #24]
 8007124:	b913      	cbnz	r3, 800712c <setvbuf+0x1c>
 8007126:	4630      	mov	r0, r6
 8007128:	f001 f896 	bl	8008258 <__sinit>
 800712c:	4b4c      	ldr	r3, [pc, #304]	; (8007260 <setvbuf+0x150>)
 800712e:	429c      	cmp	r4, r3
 8007130:	d152      	bne.n	80071d8 <setvbuf+0xc8>
 8007132:	6874      	ldr	r4, [r6, #4]
 8007134:	f1b8 0f02 	cmp.w	r8, #2
 8007138:	d006      	beq.n	8007148 <setvbuf+0x38>
 800713a:	f1b8 0f01 	cmp.w	r8, #1
 800713e:	f200 8089 	bhi.w	8007254 <setvbuf+0x144>
 8007142:	2d00      	cmp	r5, #0
 8007144:	f2c0 8086 	blt.w	8007254 <setvbuf+0x144>
 8007148:	4621      	mov	r1, r4
 800714a:	4630      	mov	r0, r6
 800714c:	f001 f81a 	bl	8008184 <_fflush_r>
 8007150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007152:	b141      	cbz	r1, 8007166 <setvbuf+0x56>
 8007154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007158:	4299      	cmp	r1, r3
 800715a:	d002      	beq.n	8007162 <setvbuf+0x52>
 800715c:	4630      	mov	r0, r6
 800715e:	f001 fc73 	bl	8008a48 <_free_r>
 8007162:	2300      	movs	r3, #0
 8007164:	6363      	str	r3, [r4, #52]	; 0x34
 8007166:	2300      	movs	r3, #0
 8007168:	61a3      	str	r3, [r4, #24]
 800716a:	6063      	str	r3, [r4, #4]
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	061b      	lsls	r3, r3, #24
 8007170:	d503      	bpl.n	800717a <setvbuf+0x6a>
 8007172:	6921      	ldr	r1, [r4, #16]
 8007174:	4630      	mov	r0, r6
 8007176:	f001 fc67 	bl	8008a48 <_free_r>
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007180:	f023 0303 	bic.w	r3, r3, #3
 8007184:	f1b8 0f02 	cmp.w	r8, #2
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	d05d      	beq.n	8007248 <setvbuf+0x138>
 800718c:	ab01      	add	r3, sp, #4
 800718e:	466a      	mov	r2, sp
 8007190:	4621      	mov	r1, r4
 8007192:	4630      	mov	r0, r6
 8007194:	f001 f8f8 	bl	8008388 <__swhatbuf_r>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	4318      	orrs	r0, r3
 800719c:	81a0      	strh	r0, [r4, #12]
 800719e:	bb2d      	cbnz	r5, 80071ec <setvbuf+0xdc>
 80071a0:	9d00      	ldr	r5, [sp, #0]
 80071a2:	4628      	mov	r0, r5
 80071a4:	f001 f954 	bl	8008450 <malloc>
 80071a8:	4607      	mov	r7, r0
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d14e      	bne.n	800724c <setvbuf+0x13c>
 80071ae:	f8dd 9000 	ldr.w	r9, [sp]
 80071b2:	45a9      	cmp	r9, r5
 80071b4:	d13c      	bne.n	8007230 <setvbuf+0x120>
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	2300      	movs	r3, #0
 80071c4:	60a3      	str	r3, [r4, #8]
 80071c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	2301      	movs	r3, #1
 80071d0:	6163      	str	r3, [r4, #20]
 80071d2:	b003      	add	sp, #12
 80071d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071d8:	4b22      	ldr	r3, [pc, #136]	; (8007264 <setvbuf+0x154>)
 80071da:	429c      	cmp	r4, r3
 80071dc:	d101      	bne.n	80071e2 <setvbuf+0xd2>
 80071de:	68b4      	ldr	r4, [r6, #8]
 80071e0:	e7a8      	b.n	8007134 <setvbuf+0x24>
 80071e2:	4b21      	ldr	r3, [pc, #132]	; (8007268 <setvbuf+0x158>)
 80071e4:	429c      	cmp	r4, r3
 80071e6:	bf08      	it	eq
 80071e8:	68f4      	ldreq	r4, [r6, #12]
 80071ea:	e7a3      	b.n	8007134 <setvbuf+0x24>
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	d0d8      	beq.n	80071a2 <setvbuf+0x92>
 80071f0:	69b3      	ldr	r3, [r6, #24]
 80071f2:	b913      	cbnz	r3, 80071fa <setvbuf+0xea>
 80071f4:	4630      	mov	r0, r6
 80071f6:	f001 f82f 	bl	8008258 <__sinit>
 80071fa:	f1b8 0f01 	cmp.w	r8, #1
 80071fe:	bf08      	it	eq
 8007200:	89a3      	ldrheq	r3, [r4, #12]
 8007202:	6027      	str	r7, [r4, #0]
 8007204:	bf04      	itt	eq
 8007206:	f043 0301 	orreq.w	r3, r3, #1
 800720a:	81a3      	strheq	r3, [r4, #12]
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	f013 0008 	ands.w	r0, r3, #8
 8007212:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007216:	d01b      	beq.n	8007250 <setvbuf+0x140>
 8007218:	f013 0001 	ands.w	r0, r3, #1
 800721c:	bf18      	it	ne
 800721e:	426d      	negne	r5, r5
 8007220:	f04f 0300 	mov.w	r3, #0
 8007224:	bf1d      	ittte	ne
 8007226:	60a3      	strne	r3, [r4, #8]
 8007228:	61a5      	strne	r5, [r4, #24]
 800722a:	4618      	movne	r0, r3
 800722c:	60a5      	streq	r5, [r4, #8]
 800722e:	e7d0      	b.n	80071d2 <setvbuf+0xc2>
 8007230:	4648      	mov	r0, r9
 8007232:	f001 f90d 	bl	8008450 <malloc>
 8007236:	4607      	mov	r7, r0
 8007238:	2800      	cmp	r0, #0
 800723a:	d0bc      	beq.n	80071b6 <setvbuf+0xa6>
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007242:	81a3      	strh	r3, [r4, #12]
 8007244:	464d      	mov	r5, r9
 8007246:	e7d3      	b.n	80071f0 <setvbuf+0xe0>
 8007248:	2000      	movs	r0, #0
 800724a:	e7b6      	b.n	80071ba <setvbuf+0xaa>
 800724c:	46a9      	mov	r9, r5
 800724e:	e7f5      	b.n	800723c <setvbuf+0x12c>
 8007250:	60a0      	str	r0, [r4, #8]
 8007252:	e7be      	b.n	80071d2 <setvbuf+0xc2>
 8007254:	f04f 30ff 	mov.w	r0, #4294967295
 8007258:	e7bb      	b.n	80071d2 <setvbuf+0xc2>
 800725a:	bf00      	nop
 800725c:	20000264 	.word	0x20000264
 8007260:	08009098 	.word	0x08009098
 8007264:	080090b8 	.word	0x080090b8
 8007268:	08009078 	.word	0x08009078

0800726c <__swbuf_r>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	460e      	mov	r6, r1
 8007270:	4614      	mov	r4, r2
 8007272:	4605      	mov	r5, r0
 8007274:	b118      	cbz	r0, 800727e <__swbuf_r+0x12>
 8007276:	6983      	ldr	r3, [r0, #24]
 8007278:	b90b      	cbnz	r3, 800727e <__swbuf_r+0x12>
 800727a:	f000 ffed 	bl	8008258 <__sinit>
 800727e:	4b21      	ldr	r3, [pc, #132]	; (8007304 <__swbuf_r+0x98>)
 8007280:	429c      	cmp	r4, r3
 8007282:	d12a      	bne.n	80072da <__swbuf_r+0x6e>
 8007284:	686c      	ldr	r4, [r5, #4]
 8007286:	69a3      	ldr	r3, [r4, #24]
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	071a      	lsls	r2, r3, #28
 800728e:	d52e      	bpl.n	80072ee <__swbuf_r+0x82>
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	b363      	cbz	r3, 80072ee <__swbuf_r+0x82>
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	1ac0      	subs	r0, r0, r3
 800729a:	6963      	ldr	r3, [r4, #20]
 800729c:	b2f6      	uxtb	r6, r6
 800729e:	4283      	cmp	r3, r0
 80072a0:	4637      	mov	r7, r6
 80072a2:	dc04      	bgt.n	80072ae <__swbuf_r+0x42>
 80072a4:	4621      	mov	r1, r4
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 ff6c 	bl	8008184 <_fflush_r>
 80072ac:	bb28      	cbnz	r0, 80072fa <__swbuf_r+0x8e>
 80072ae:	68a3      	ldr	r3, [r4, #8]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	60a3      	str	r3, [r4, #8]
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	6022      	str	r2, [r4, #0]
 80072ba:	701e      	strb	r6, [r3, #0]
 80072bc:	6963      	ldr	r3, [r4, #20]
 80072be:	3001      	adds	r0, #1
 80072c0:	4283      	cmp	r3, r0
 80072c2:	d004      	beq.n	80072ce <__swbuf_r+0x62>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	07db      	lsls	r3, r3, #31
 80072c8:	d519      	bpl.n	80072fe <__swbuf_r+0x92>
 80072ca:	2e0a      	cmp	r6, #10
 80072cc:	d117      	bne.n	80072fe <__swbuf_r+0x92>
 80072ce:	4621      	mov	r1, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 ff57 	bl	8008184 <_fflush_r>
 80072d6:	b190      	cbz	r0, 80072fe <__swbuf_r+0x92>
 80072d8:	e00f      	b.n	80072fa <__swbuf_r+0x8e>
 80072da:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <__swbuf_r+0x9c>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	d101      	bne.n	80072e4 <__swbuf_r+0x78>
 80072e0:	68ac      	ldr	r4, [r5, #8]
 80072e2:	e7d0      	b.n	8007286 <__swbuf_r+0x1a>
 80072e4:	4b09      	ldr	r3, [pc, #36]	; (800730c <__swbuf_r+0xa0>)
 80072e6:	429c      	cmp	r4, r3
 80072e8:	bf08      	it	eq
 80072ea:	68ec      	ldreq	r4, [r5, #12]
 80072ec:	e7cb      	b.n	8007286 <__swbuf_r+0x1a>
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 f80d 	bl	8007310 <__swsetup_r>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d0cc      	beq.n	8007294 <__swbuf_r+0x28>
 80072fa:	f04f 37ff 	mov.w	r7, #4294967295
 80072fe:	4638      	mov	r0, r7
 8007300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007302:	bf00      	nop
 8007304:	08009098 	.word	0x08009098
 8007308:	080090b8 	.word	0x080090b8
 800730c:	08009078 	.word	0x08009078

08007310 <__swsetup_r>:
 8007310:	4b32      	ldr	r3, [pc, #200]	; (80073dc <__swsetup_r+0xcc>)
 8007312:	b570      	push	{r4, r5, r6, lr}
 8007314:	681d      	ldr	r5, [r3, #0]
 8007316:	4606      	mov	r6, r0
 8007318:	460c      	mov	r4, r1
 800731a:	b125      	cbz	r5, 8007326 <__swsetup_r+0x16>
 800731c:	69ab      	ldr	r3, [r5, #24]
 800731e:	b913      	cbnz	r3, 8007326 <__swsetup_r+0x16>
 8007320:	4628      	mov	r0, r5
 8007322:	f000 ff99 	bl	8008258 <__sinit>
 8007326:	4b2e      	ldr	r3, [pc, #184]	; (80073e0 <__swsetup_r+0xd0>)
 8007328:	429c      	cmp	r4, r3
 800732a:	d10f      	bne.n	800734c <__swsetup_r+0x3c>
 800732c:	686c      	ldr	r4, [r5, #4]
 800732e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007332:	b29a      	uxth	r2, r3
 8007334:	0715      	lsls	r5, r2, #28
 8007336:	d42c      	bmi.n	8007392 <__swsetup_r+0x82>
 8007338:	06d0      	lsls	r0, r2, #27
 800733a:	d411      	bmi.n	8007360 <__swsetup_r+0x50>
 800733c:	2209      	movs	r2, #9
 800733e:	6032      	str	r2, [r6, #0]
 8007340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	f04f 30ff 	mov.w	r0, #4294967295
 800734a:	e03e      	b.n	80073ca <__swsetup_r+0xba>
 800734c:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <__swsetup_r+0xd4>)
 800734e:	429c      	cmp	r4, r3
 8007350:	d101      	bne.n	8007356 <__swsetup_r+0x46>
 8007352:	68ac      	ldr	r4, [r5, #8]
 8007354:	e7eb      	b.n	800732e <__swsetup_r+0x1e>
 8007356:	4b24      	ldr	r3, [pc, #144]	; (80073e8 <__swsetup_r+0xd8>)
 8007358:	429c      	cmp	r4, r3
 800735a:	bf08      	it	eq
 800735c:	68ec      	ldreq	r4, [r5, #12]
 800735e:	e7e6      	b.n	800732e <__swsetup_r+0x1e>
 8007360:	0751      	lsls	r1, r2, #29
 8007362:	d512      	bpl.n	800738a <__swsetup_r+0x7a>
 8007364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007366:	b141      	cbz	r1, 800737a <__swsetup_r+0x6a>
 8007368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800736c:	4299      	cmp	r1, r3
 800736e:	d002      	beq.n	8007376 <__swsetup_r+0x66>
 8007370:	4630      	mov	r0, r6
 8007372:	f001 fb69 	bl	8008a48 <_free_r>
 8007376:	2300      	movs	r3, #0
 8007378:	6363      	str	r3, [r4, #52]	; 0x34
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	2300      	movs	r3, #0
 8007384:	6063      	str	r3, [r4, #4]
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	f043 0308 	orr.w	r3, r3, #8
 8007390:	81a3      	strh	r3, [r4, #12]
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	b94b      	cbnz	r3, 80073aa <__swsetup_r+0x9a>
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800739c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a0:	d003      	beq.n	80073aa <__swsetup_r+0x9a>
 80073a2:	4621      	mov	r1, r4
 80073a4:	4630      	mov	r0, r6
 80073a6:	f001 f813 	bl	80083d0 <__smakebuf_r>
 80073aa:	89a2      	ldrh	r2, [r4, #12]
 80073ac:	f012 0301 	ands.w	r3, r2, #1
 80073b0:	d00c      	beq.n	80073cc <__swsetup_r+0xbc>
 80073b2:	2300      	movs	r3, #0
 80073b4:	60a3      	str	r3, [r4, #8]
 80073b6:	6963      	ldr	r3, [r4, #20]
 80073b8:	425b      	negs	r3, r3
 80073ba:	61a3      	str	r3, [r4, #24]
 80073bc:	6923      	ldr	r3, [r4, #16]
 80073be:	b953      	cbnz	r3, 80073d6 <__swsetup_r+0xc6>
 80073c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80073c8:	d1ba      	bne.n	8007340 <__swsetup_r+0x30>
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	0792      	lsls	r2, r2, #30
 80073ce:	bf58      	it	pl
 80073d0:	6963      	ldrpl	r3, [r4, #20]
 80073d2:	60a3      	str	r3, [r4, #8]
 80073d4:	e7f2      	b.n	80073bc <__swsetup_r+0xac>
 80073d6:	2000      	movs	r0, #0
 80073d8:	e7f7      	b.n	80073ca <__swsetup_r+0xba>
 80073da:	bf00      	nop
 80073dc:	20000264 	.word	0x20000264
 80073e0:	08009098 	.word	0x08009098
 80073e4:	080090b8 	.word	0x080090b8
 80073e8:	08009078 	.word	0x08009078

080073ec <quorem>:
 80073ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	6903      	ldr	r3, [r0, #16]
 80073f2:	690c      	ldr	r4, [r1, #16]
 80073f4:	42a3      	cmp	r3, r4
 80073f6:	4680      	mov	r8, r0
 80073f8:	f2c0 8082 	blt.w	8007500 <quorem+0x114>
 80073fc:	3c01      	subs	r4, #1
 80073fe:	f101 0714 	add.w	r7, r1, #20
 8007402:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007406:	f100 0614 	add.w	r6, r0, #20
 800740a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800740e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007412:	eb06 030c 	add.w	r3, r6, ip
 8007416:	3501      	adds	r5, #1
 8007418:	eb07 090c 	add.w	r9, r7, ip
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007422:	b395      	cbz	r5, 800748a <quorem+0x9e>
 8007424:	f04f 0a00 	mov.w	sl, #0
 8007428:	4638      	mov	r0, r7
 800742a:	46b6      	mov	lr, r6
 800742c:	46d3      	mov	fp, sl
 800742e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007432:	b293      	uxth	r3, r2
 8007434:	fb05 a303 	mla	r3, r5, r3, sl
 8007438:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800743c:	b29b      	uxth	r3, r3
 800743e:	ebab 0303 	sub.w	r3, fp, r3
 8007442:	0c12      	lsrs	r2, r2, #16
 8007444:	f8de b000 	ldr.w	fp, [lr]
 8007448:	fb05 a202 	mla	r2, r5, r2, sl
 800744c:	fa13 f38b 	uxtah	r3, r3, fp
 8007450:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007454:	fa1f fb82 	uxth.w	fp, r2
 8007458:	f8de 2000 	ldr.w	r2, [lr]
 800745c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007464:	b29b      	uxth	r3, r3
 8007466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800746a:	4581      	cmp	r9, r0
 800746c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007470:	f84e 3b04 	str.w	r3, [lr], #4
 8007474:	d2db      	bcs.n	800742e <quorem+0x42>
 8007476:	f856 300c 	ldr.w	r3, [r6, ip]
 800747a:	b933      	cbnz	r3, 800748a <quorem+0x9e>
 800747c:	9b01      	ldr	r3, [sp, #4]
 800747e:	3b04      	subs	r3, #4
 8007480:	429e      	cmp	r6, r3
 8007482:	461a      	mov	r2, r3
 8007484:	d330      	bcc.n	80074e8 <quorem+0xfc>
 8007486:	f8c8 4010 	str.w	r4, [r8, #16]
 800748a:	4640      	mov	r0, r8
 800748c:	f001 fa08 	bl	80088a0 <__mcmp>
 8007490:	2800      	cmp	r0, #0
 8007492:	db25      	blt.n	80074e0 <quorem+0xf4>
 8007494:	3501      	adds	r5, #1
 8007496:	4630      	mov	r0, r6
 8007498:	f04f 0c00 	mov.w	ip, #0
 800749c:	f857 2b04 	ldr.w	r2, [r7], #4
 80074a0:	f8d0 e000 	ldr.w	lr, [r0]
 80074a4:	b293      	uxth	r3, r2
 80074a6:	ebac 0303 	sub.w	r3, ip, r3
 80074aa:	0c12      	lsrs	r2, r2, #16
 80074ac:	fa13 f38e 	uxtah	r3, r3, lr
 80074b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074be:	45b9      	cmp	r9, r7
 80074c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074c4:	f840 3b04 	str.w	r3, [r0], #4
 80074c8:	d2e8      	bcs.n	800749c <quorem+0xb0>
 80074ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80074ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80074d2:	b92a      	cbnz	r2, 80074e0 <quorem+0xf4>
 80074d4:	3b04      	subs	r3, #4
 80074d6:	429e      	cmp	r6, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	d30b      	bcc.n	80074f4 <quorem+0x108>
 80074dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80074e0:	4628      	mov	r0, r5
 80074e2:	b003      	add	sp, #12
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	6812      	ldr	r2, [r2, #0]
 80074ea:	3b04      	subs	r3, #4
 80074ec:	2a00      	cmp	r2, #0
 80074ee:	d1ca      	bne.n	8007486 <quorem+0x9a>
 80074f0:	3c01      	subs	r4, #1
 80074f2:	e7c5      	b.n	8007480 <quorem+0x94>
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	3b04      	subs	r3, #4
 80074f8:	2a00      	cmp	r2, #0
 80074fa:	d1ef      	bne.n	80074dc <quorem+0xf0>
 80074fc:	3c01      	subs	r4, #1
 80074fe:	e7ea      	b.n	80074d6 <quorem+0xea>
 8007500:	2000      	movs	r0, #0
 8007502:	e7ee      	b.n	80074e2 <quorem+0xf6>
 8007504:	0000      	movs	r0, r0
	...

08007508 <_dtoa_r>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	ec57 6b10 	vmov	r6, r7, d0
 8007510:	b097      	sub	sp, #92	; 0x5c
 8007512:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007514:	9106      	str	r1, [sp, #24]
 8007516:	4604      	mov	r4, r0
 8007518:	920b      	str	r2, [sp, #44]	; 0x2c
 800751a:	9312      	str	r3, [sp, #72]	; 0x48
 800751c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007520:	e9cd 6700 	strd	r6, r7, [sp]
 8007524:	b93d      	cbnz	r5, 8007536 <_dtoa_r+0x2e>
 8007526:	2010      	movs	r0, #16
 8007528:	f000 ff92 	bl	8008450 <malloc>
 800752c:	6260      	str	r0, [r4, #36]	; 0x24
 800752e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007532:	6005      	str	r5, [r0, #0]
 8007534:	60c5      	str	r5, [r0, #12]
 8007536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007538:	6819      	ldr	r1, [r3, #0]
 800753a:	b151      	cbz	r1, 8007552 <_dtoa_r+0x4a>
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	604a      	str	r2, [r1, #4]
 8007540:	2301      	movs	r3, #1
 8007542:	4093      	lsls	r3, r2
 8007544:	608b      	str	r3, [r1, #8]
 8007546:	4620      	mov	r0, r4
 8007548:	f000 ffc9 	bl	80084de <_Bfree>
 800754c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	1e3b      	subs	r3, r7, #0
 8007554:	bfbb      	ittet	lt
 8007556:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800755a:	9301      	strlt	r3, [sp, #4]
 800755c:	2300      	movge	r3, #0
 800755e:	2201      	movlt	r2, #1
 8007560:	bfac      	ite	ge
 8007562:	f8c8 3000 	strge.w	r3, [r8]
 8007566:	f8c8 2000 	strlt.w	r2, [r8]
 800756a:	4baf      	ldr	r3, [pc, #700]	; (8007828 <_dtoa_r+0x320>)
 800756c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007570:	ea33 0308 	bics.w	r3, r3, r8
 8007574:	d114      	bne.n	80075a0 <_dtoa_r+0x98>
 8007576:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007578:	f242 730f 	movw	r3, #9999	; 0x270f
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	b923      	cbnz	r3, 800758c <_dtoa_r+0x84>
 8007582:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007586:	2800      	cmp	r0, #0
 8007588:	f000 8542 	beq.w	8008010 <_dtoa_r+0xb08>
 800758c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800758e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800783c <_dtoa_r+0x334>
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 8544 	beq.w	8008020 <_dtoa_r+0xb18>
 8007598:	f10b 0303 	add.w	r3, fp, #3
 800759c:	f000 bd3e 	b.w	800801c <_dtoa_r+0xb14>
 80075a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075a4:	2200      	movs	r2, #0
 80075a6:	2300      	movs	r3, #0
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	f7f9 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80075b0:	4681      	mov	r9, r0
 80075b2:	b168      	cbz	r0, 80075d0 <_dtoa_r+0xc8>
 80075b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075b6:	2301      	movs	r3, #1
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8524 	beq.w	800800a <_dtoa_r+0xb02>
 80075c2:	4b9a      	ldr	r3, [pc, #616]	; (800782c <_dtoa_r+0x324>)
 80075c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	f000 bd28 	b.w	8008020 <_dtoa_r+0xb18>
 80075d0:	aa14      	add	r2, sp, #80	; 0x50
 80075d2:	a915      	add	r1, sp, #84	; 0x54
 80075d4:	ec47 6b10 	vmov	d0, r6, r7
 80075d8:	4620      	mov	r0, r4
 80075da:	f001 f9d8 	bl	800898e <__d2b>
 80075de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80075e2:	9004      	str	r0, [sp, #16]
 80075e4:	2d00      	cmp	r5, #0
 80075e6:	d07c      	beq.n	80076e2 <_dtoa_r+0x1da>
 80075e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80075f0:	46b2      	mov	sl, r6
 80075f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80075f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80075fe:	2200      	movs	r2, #0
 8007600:	4b8b      	ldr	r3, [pc, #556]	; (8007830 <_dtoa_r+0x328>)
 8007602:	4650      	mov	r0, sl
 8007604:	4659      	mov	r1, fp
 8007606:	f7f8 fe3f 	bl	8000288 <__aeabi_dsub>
 800760a:	a381      	add	r3, pc, #516	; (adr r3, 8007810 <_dtoa_r+0x308>)
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f8 fff2 	bl	80005f8 <__aeabi_dmul>
 8007614:	a380      	add	r3, pc, #512	; (adr r3, 8007818 <_dtoa_r+0x310>)
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f7f8 fe37 	bl	800028c <__adddf3>
 800761e:	4606      	mov	r6, r0
 8007620:	4628      	mov	r0, r5
 8007622:	460f      	mov	r7, r1
 8007624:	f7f8 ff7e 	bl	8000524 <__aeabi_i2d>
 8007628:	a37d      	add	r3, pc, #500	; (adr r3, 8007820 <_dtoa_r+0x318>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f8 ffe3 	bl	80005f8 <__aeabi_dmul>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4630      	mov	r0, r6
 8007638:	4639      	mov	r1, r7
 800763a:	f7f8 fe27 	bl	800028c <__adddf3>
 800763e:	4606      	mov	r6, r0
 8007640:	460f      	mov	r7, r1
 8007642:	f7f9 fa89 	bl	8000b58 <__aeabi_d2iz>
 8007646:	2200      	movs	r2, #0
 8007648:	4682      	mov	sl, r0
 800764a:	2300      	movs	r3, #0
 800764c:	4630      	mov	r0, r6
 800764e:	4639      	mov	r1, r7
 8007650:	f7f9 fa44 	bl	8000adc <__aeabi_dcmplt>
 8007654:	b148      	cbz	r0, 800766a <_dtoa_r+0x162>
 8007656:	4650      	mov	r0, sl
 8007658:	f7f8 ff64 	bl	8000524 <__aeabi_i2d>
 800765c:	4632      	mov	r2, r6
 800765e:	463b      	mov	r3, r7
 8007660:	f7f9 fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8007664:	b908      	cbnz	r0, 800766a <_dtoa_r+0x162>
 8007666:	f10a 3aff 	add.w	sl, sl, #4294967295
 800766a:	f1ba 0f16 	cmp.w	sl, #22
 800766e:	d859      	bhi.n	8007724 <_dtoa_r+0x21c>
 8007670:	4970      	ldr	r1, [pc, #448]	; (8007834 <_dtoa_r+0x32c>)
 8007672:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800767a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800767e:	f7f9 fa4b 	bl	8000b18 <__aeabi_dcmpgt>
 8007682:	2800      	cmp	r0, #0
 8007684:	d050      	beq.n	8007728 <_dtoa_r+0x220>
 8007686:	f10a 3aff 	add.w	sl, sl, #4294967295
 800768a:	2300      	movs	r3, #0
 800768c:	930f      	str	r3, [sp, #60]	; 0x3c
 800768e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007690:	1b5d      	subs	r5, r3, r5
 8007692:	f1b5 0801 	subs.w	r8, r5, #1
 8007696:	bf49      	itett	mi
 8007698:	f1c5 0301 	rsbmi	r3, r5, #1
 800769c:	2300      	movpl	r3, #0
 800769e:	9305      	strmi	r3, [sp, #20]
 80076a0:	f04f 0800 	movmi.w	r8, #0
 80076a4:	bf58      	it	pl
 80076a6:	9305      	strpl	r3, [sp, #20]
 80076a8:	f1ba 0f00 	cmp.w	sl, #0
 80076ac:	db3e      	blt.n	800772c <_dtoa_r+0x224>
 80076ae:	2300      	movs	r3, #0
 80076b0:	44d0      	add	r8, sl
 80076b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	9b06      	ldr	r3, [sp, #24]
 80076ba:	2b09      	cmp	r3, #9
 80076bc:	f200 8090 	bhi.w	80077e0 <_dtoa_r+0x2d8>
 80076c0:	2b05      	cmp	r3, #5
 80076c2:	bfc4      	itt	gt
 80076c4:	3b04      	subgt	r3, #4
 80076c6:	9306      	strgt	r3, [sp, #24]
 80076c8:	9b06      	ldr	r3, [sp, #24]
 80076ca:	f1a3 0302 	sub.w	r3, r3, #2
 80076ce:	bfcc      	ite	gt
 80076d0:	2500      	movgt	r5, #0
 80076d2:	2501      	movle	r5, #1
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	f200 808f 	bhi.w	80077f8 <_dtoa_r+0x2f0>
 80076da:	e8df f003 	tbb	[pc, r3]
 80076de:	7f7d      	.short	0x7f7d
 80076e0:	7131      	.short	0x7131
 80076e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80076e6:	441d      	add	r5, r3
 80076e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80076ec:	2820      	cmp	r0, #32
 80076ee:	dd13      	ble.n	8007718 <_dtoa_r+0x210>
 80076f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80076f4:	9b00      	ldr	r3, [sp, #0]
 80076f6:	fa08 f800 	lsl.w	r8, r8, r0
 80076fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80076fe:	fa23 f000 	lsr.w	r0, r3, r0
 8007702:	ea48 0000 	orr.w	r0, r8, r0
 8007706:	f7f8 fefd 	bl	8000504 <__aeabi_ui2d>
 800770a:	2301      	movs	r3, #1
 800770c:	4682      	mov	sl, r0
 800770e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007712:	3d01      	subs	r5, #1
 8007714:	9313      	str	r3, [sp, #76]	; 0x4c
 8007716:	e772      	b.n	80075fe <_dtoa_r+0xf6>
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	f1c0 0020 	rsb	r0, r0, #32
 800771e:	fa03 f000 	lsl.w	r0, r3, r0
 8007722:	e7f0      	b.n	8007706 <_dtoa_r+0x1fe>
 8007724:	2301      	movs	r3, #1
 8007726:	e7b1      	b.n	800768c <_dtoa_r+0x184>
 8007728:	900f      	str	r0, [sp, #60]	; 0x3c
 800772a:	e7b0      	b.n	800768e <_dtoa_r+0x186>
 800772c:	9b05      	ldr	r3, [sp, #20]
 800772e:	eba3 030a 	sub.w	r3, r3, sl
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	f1ca 0300 	rsb	r3, sl, #0
 8007738:	9307      	str	r3, [sp, #28]
 800773a:	2300      	movs	r3, #0
 800773c:	930e      	str	r3, [sp, #56]	; 0x38
 800773e:	e7bb      	b.n	80076b8 <_dtoa_r+0x1b0>
 8007740:	2301      	movs	r3, #1
 8007742:	930a      	str	r3, [sp, #40]	; 0x28
 8007744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007746:	2b00      	cmp	r3, #0
 8007748:	dd59      	ble.n	80077fe <_dtoa_r+0x2f6>
 800774a:	9302      	str	r3, [sp, #8]
 800774c:	4699      	mov	r9, r3
 800774e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007750:	2200      	movs	r2, #0
 8007752:	6072      	str	r2, [r6, #4]
 8007754:	2204      	movs	r2, #4
 8007756:	f102 0014 	add.w	r0, r2, #20
 800775a:	4298      	cmp	r0, r3
 800775c:	6871      	ldr	r1, [r6, #4]
 800775e:	d953      	bls.n	8007808 <_dtoa_r+0x300>
 8007760:	4620      	mov	r0, r4
 8007762:	f000 fe88 	bl	8008476 <_Balloc>
 8007766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007768:	6030      	str	r0, [r6, #0]
 800776a:	f1b9 0f0e 	cmp.w	r9, #14
 800776e:	f8d3 b000 	ldr.w	fp, [r3]
 8007772:	f200 80e6 	bhi.w	8007942 <_dtoa_r+0x43a>
 8007776:	2d00      	cmp	r5, #0
 8007778:	f000 80e3 	beq.w	8007942 <_dtoa_r+0x43a>
 800777c:	ed9d 7b00 	vldr	d7, [sp]
 8007780:	f1ba 0f00 	cmp.w	sl, #0
 8007784:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007788:	dd74      	ble.n	8007874 <_dtoa_r+0x36c>
 800778a:	4a2a      	ldr	r2, [pc, #168]	; (8007834 <_dtoa_r+0x32c>)
 800778c:	f00a 030f 	and.w	r3, sl, #15
 8007790:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007794:	ed93 7b00 	vldr	d7, [r3]
 8007798:	ea4f 162a 	mov.w	r6, sl, asr #4
 800779c:	06f0      	lsls	r0, r6, #27
 800779e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80077a2:	d565      	bpl.n	8007870 <_dtoa_r+0x368>
 80077a4:	4b24      	ldr	r3, [pc, #144]	; (8007838 <_dtoa_r+0x330>)
 80077a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077ae:	f7f9 f84d 	bl	800084c <__aeabi_ddiv>
 80077b2:	e9cd 0100 	strd	r0, r1, [sp]
 80077b6:	f006 060f 	and.w	r6, r6, #15
 80077ba:	2503      	movs	r5, #3
 80077bc:	4f1e      	ldr	r7, [pc, #120]	; (8007838 <_dtoa_r+0x330>)
 80077be:	e04c      	b.n	800785a <_dtoa_r+0x352>
 80077c0:	2301      	movs	r3, #1
 80077c2:	930a      	str	r3, [sp, #40]	; 0x28
 80077c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c6:	4453      	add	r3, sl
 80077c8:	f103 0901 	add.w	r9, r3, #1
 80077cc:	9302      	str	r3, [sp, #8]
 80077ce:	464b      	mov	r3, r9
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	bfb8      	it	lt
 80077d4:	2301      	movlt	r3, #1
 80077d6:	e7ba      	b.n	800774e <_dtoa_r+0x246>
 80077d8:	2300      	movs	r3, #0
 80077da:	e7b2      	b.n	8007742 <_dtoa_r+0x23a>
 80077dc:	2300      	movs	r3, #0
 80077de:	e7f0      	b.n	80077c2 <_dtoa_r+0x2ba>
 80077e0:	2501      	movs	r5, #1
 80077e2:	2300      	movs	r3, #0
 80077e4:	9306      	str	r3, [sp, #24]
 80077e6:	950a      	str	r5, [sp, #40]	; 0x28
 80077e8:	f04f 33ff 	mov.w	r3, #4294967295
 80077ec:	9302      	str	r3, [sp, #8]
 80077ee:	4699      	mov	r9, r3
 80077f0:	2200      	movs	r2, #0
 80077f2:	2312      	movs	r3, #18
 80077f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80077f6:	e7aa      	b.n	800774e <_dtoa_r+0x246>
 80077f8:	2301      	movs	r3, #1
 80077fa:	930a      	str	r3, [sp, #40]	; 0x28
 80077fc:	e7f4      	b.n	80077e8 <_dtoa_r+0x2e0>
 80077fe:	2301      	movs	r3, #1
 8007800:	9302      	str	r3, [sp, #8]
 8007802:	4699      	mov	r9, r3
 8007804:	461a      	mov	r2, r3
 8007806:	e7f5      	b.n	80077f4 <_dtoa_r+0x2ec>
 8007808:	3101      	adds	r1, #1
 800780a:	6071      	str	r1, [r6, #4]
 800780c:	0052      	lsls	r2, r2, #1
 800780e:	e7a2      	b.n	8007756 <_dtoa_r+0x24e>
 8007810:	636f4361 	.word	0x636f4361
 8007814:	3fd287a7 	.word	0x3fd287a7
 8007818:	8b60c8b3 	.word	0x8b60c8b3
 800781c:	3fc68a28 	.word	0x3fc68a28
 8007820:	509f79fb 	.word	0x509f79fb
 8007824:	3fd34413 	.word	0x3fd34413
 8007828:	7ff00000 	.word	0x7ff00000
 800782c:	08009045 	.word	0x08009045
 8007830:	3ff80000 	.word	0x3ff80000
 8007834:	08009100 	.word	0x08009100
 8007838:	080090d8 	.word	0x080090d8
 800783c:	08009071 	.word	0x08009071
 8007840:	07f1      	lsls	r1, r6, #31
 8007842:	d508      	bpl.n	8007856 <_dtoa_r+0x34e>
 8007844:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800784c:	f7f8 fed4 	bl	80005f8 <__aeabi_dmul>
 8007850:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007854:	3501      	adds	r5, #1
 8007856:	1076      	asrs	r6, r6, #1
 8007858:	3708      	adds	r7, #8
 800785a:	2e00      	cmp	r6, #0
 800785c:	d1f0      	bne.n	8007840 <_dtoa_r+0x338>
 800785e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007862:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007866:	f7f8 fff1 	bl	800084c <__aeabi_ddiv>
 800786a:	e9cd 0100 	strd	r0, r1, [sp]
 800786e:	e01a      	b.n	80078a6 <_dtoa_r+0x39e>
 8007870:	2502      	movs	r5, #2
 8007872:	e7a3      	b.n	80077bc <_dtoa_r+0x2b4>
 8007874:	f000 80a0 	beq.w	80079b8 <_dtoa_r+0x4b0>
 8007878:	f1ca 0600 	rsb	r6, sl, #0
 800787c:	4b9f      	ldr	r3, [pc, #636]	; (8007afc <_dtoa_r+0x5f4>)
 800787e:	4fa0      	ldr	r7, [pc, #640]	; (8007b00 <_dtoa_r+0x5f8>)
 8007880:	f006 020f 	and.w	r2, r6, #15
 8007884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007890:	f7f8 feb2 	bl	80005f8 <__aeabi_dmul>
 8007894:	e9cd 0100 	strd	r0, r1, [sp]
 8007898:	1136      	asrs	r6, r6, #4
 800789a:	2300      	movs	r3, #0
 800789c:	2502      	movs	r5, #2
 800789e:	2e00      	cmp	r6, #0
 80078a0:	d17f      	bne.n	80079a2 <_dtoa_r+0x49a>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e1      	bne.n	800786a <_dtoa_r+0x362>
 80078a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8087 	beq.w	80079bc <_dtoa_r+0x4b4>
 80078ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80078b2:	2200      	movs	r2, #0
 80078b4:	4b93      	ldr	r3, [pc, #588]	; (8007b04 <_dtoa_r+0x5fc>)
 80078b6:	4630      	mov	r0, r6
 80078b8:	4639      	mov	r1, r7
 80078ba:	f7f9 f90f 	bl	8000adc <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d07c      	beq.n	80079bc <_dtoa_r+0x4b4>
 80078c2:	f1b9 0f00 	cmp.w	r9, #0
 80078c6:	d079      	beq.n	80079bc <_dtoa_r+0x4b4>
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	dd35      	ble.n	800793a <_dtoa_r+0x432>
 80078ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80078d2:	9308      	str	r3, [sp, #32]
 80078d4:	4639      	mov	r1, r7
 80078d6:	2200      	movs	r2, #0
 80078d8:	4b8b      	ldr	r3, [pc, #556]	; (8007b08 <_dtoa_r+0x600>)
 80078da:	4630      	mov	r0, r6
 80078dc:	f7f8 fe8c 	bl	80005f8 <__aeabi_dmul>
 80078e0:	e9cd 0100 	strd	r0, r1, [sp]
 80078e4:	9f02      	ldr	r7, [sp, #8]
 80078e6:	3501      	adds	r5, #1
 80078e8:	4628      	mov	r0, r5
 80078ea:	f7f8 fe1b 	bl	8000524 <__aeabi_i2d>
 80078ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078f2:	f7f8 fe81 	bl	80005f8 <__aeabi_dmul>
 80078f6:	2200      	movs	r2, #0
 80078f8:	4b84      	ldr	r3, [pc, #528]	; (8007b0c <_dtoa_r+0x604>)
 80078fa:	f7f8 fcc7 	bl	800028c <__adddf3>
 80078fe:	4605      	mov	r5, r0
 8007900:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007904:	2f00      	cmp	r7, #0
 8007906:	d15d      	bne.n	80079c4 <_dtoa_r+0x4bc>
 8007908:	2200      	movs	r2, #0
 800790a:	4b81      	ldr	r3, [pc, #516]	; (8007b10 <_dtoa_r+0x608>)
 800790c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007910:	f7f8 fcba 	bl	8000288 <__aeabi_dsub>
 8007914:	462a      	mov	r2, r5
 8007916:	4633      	mov	r3, r6
 8007918:	e9cd 0100 	strd	r0, r1, [sp]
 800791c:	f7f9 f8fc 	bl	8000b18 <__aeabi_dcmpgt>
 8007920:	2800      	cmp	r0, #0
 8007922:	f040 8288 	bne.w	8007e36 <_dtoa_r+0x92e>
 8007926:	462a      	mov	r2, r5
 8007928:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800792c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007930:	f7f9 f8d4 	bl	8000adc <__aeabi_dcmplt>
 8007934:	2800      	cmp	r0, #0
 8007936:	f040 827c 	bne.w	8007e32 <_dtoa_r+0x92a>
 800793a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800793e:	e9cd 2300 	strd	r2, r3, [sp]
 8007942:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007944:	2b00      	cmp	r3, #0
 8007946:	f2c0 8150 	blt.w	8007bea <_dtoa_r+0x6e2>
 800794a:	f1ba 0f0e 	cmp.w	sl, #14
 800794e:	f300 814c 	bgt.w	8007bea <_dtoa_r+0x6e2>
 8007952:	4b6a      	ldr	r3, [pc, #424]	; (8007afc <_dtoa_r+0x5f4>)
 8007954:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007958:	ed93 7b00 	vldr	d7, [r3]
 800795c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795e:	2b00      	cmp	r3, #0
 8007960:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007964:	f280 80d8 	bge.w	8007b18 <_dtoa_r+0x610>
 8007968:	f1b9 0f00 	cmp.w	r9, #0
 800796c:	f300 80d4 	bgt.w	8007b18 <_dtoa_r+0x610>
 8007970:	f040 825e 	bne.w	8007e30 <_dtoa_r+0x928>
 8007974:	2200      	movs	r2, #0
 8007976:	4b66      	ldr	r3, [pc, #408]	; (8007b10 <_dtoa_r+0x608>)
 8007978:	ec51 0b17 	vmov	r0, r1, d7
 800797c:	f7f8 fe3c 	bl	80005f8 <__aeabi_dmul>
 8007980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007984:	f7f9 f8be 	bl	8000b04 <__aeabi_dcmpge>
 8007988:	464f      	mov	r7, r9
 800798a:	464e      	mov	r6, r9
 800798c:	2800      	cmp	r0, #0
 800798e:	f040 8234 	bne.w	8007dfa <_dtoa_r+0x8f2>
 8007992:	2331      	movs	r3, #49	; 0x31
 8007994:	f10b 0501 	add.w	r5, fp, #1
 8007998:	f88b 3000 	strb.w	r3, [fp]
 800799c:	f10a 0a01 	add.w	sl, sl, #1
 80079a0:	e22f      	b.n	8007e02 <_dtoa_r+0x8fa>
 80079a2:	07f2      	lsls	r2, r6, #31
 80079a4:	d505      	bpl.n	80079b2 <_dtoa_r+0x4aa>
 80079a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079aa:	f7f8 fe25 	bl	80005f8 <__aeabi_dmul>
 80079ae:	3501      	adds	r5, #1
 80079b0:	2301      	movs	r3, #1
 80079b2:	1076      	asrs	r6, r6, #1
 80079b4:	3708      	adds	r7, #8
 80079b6:	e772      	b.n	800789e <_dtoa_r+0x396>
 80079b8:	2502      	movs	r5, #2
 80079ba:	e774      	b.n	80078a6 <_dtoa_r+0x39e>
 80079bc:	f8cd a020 	str.w	sl, [sp, #32]
 80079c0:	464f      	mov	r7, r9
 80079c2:	e791      	b.n	80078e8 <_dtoa_r+0x3e0>
 80079c4:	4b4d      	ldr	r3, [pc, #308]	; (8007afc <_dtoa_r+0x5f4>)
 80079c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80079ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d047      	beq.n	8007a64 <_dtoa_r+0x55c>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	2000      	movs	r0, #0
 80079da:	494e      	ldr	r1, [pc, #312]	; (8007b14 <_dtoa_r+0x60c>)
 80079dc:	f7f8 ff36 	bl	800084c <__aeabi_ddiv>
 80079e0:	462a      	mov	r2, r5
 80079e2:	4633      	mov	r3, r6
 80079e4:	f7f8 fc50 	bl	8000288 <__aeabi_dsub>
 80079e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80079ec:	465d      	mov	r5, fp
 80079ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079f2:	f7f9 f8b1 	bl	8000b58 <__aeabi_d2iz>
 80079f6:	4606      	mov	r6, r0
 80079f8:	f7f8 fd94 	bl	8000524 <__aeabi_i2d>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a04:	f7f8 fc40 	bl	8000288 <__aeabi_dsub>
 8007a08:	3630      	adds	r6, #48	; 0x30
 8007a0a:	f805 6b01 	strb.w	r6, [r5], #1
 8007a0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a12:	e9cd 0100 	strd	r0, r1, [sp]
 8007a16:	f7f9 f861 	bl	8000adc <__aeabi_dcmplt>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d163      	bne.n	8007ae6 <_dtoa_r+0x5de>
 8007a1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a22:	2000      	movs	r0, #0
 8007a24:	4937      	ldr	r1, [pc, #220]	; (8007b04 <_dtoa_r+0x5fc>)
 8007a26:	f7f8 fc2f 	bl	8000288 <__aeabi_dsub>
 8007a2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a2e:	f7f9 f855 	bl	8000adc <__aeabi_dcmplt>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	f040 80b7 	bne.w	8007ba6 <_dtoa_r+0x69e>
 8007a38:	eba5 030b 	sub.w	r3, r5, fp
 8007a3c:	429f      	cmp	r7, r3
 8007a3e:	f77f af7c 	ble.w	800793a <_dtoa_r+0x432>
 8007a42:	2200      	movs	r2, #0
 8007a44:	4b30      	ldr	r3, [pc, #192]	; (8007b08 <_dtoa_r+0x600>)
 8007a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a4a:	f7f8 fdd5 	bl	80005f8 <__aeabi_dmul>
 8007a4e:	2200      	movs	r2, #0
 8007a50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a54:	4b2c      	ldr	r3, [pc, #176]	; (8007b08 <_dtoa_r+0x600>)
 8007a56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a5a:	f7f8 fdcd 	bl	80005f8 <__aeabi_dmul>
 8007a5e:	e9cd 0100 	strd	r0, r1, [sp]
 8007a62:	e7c4      	b.n	80079ee <_dtoa_r+0x4e6>
 8007a64:	462a      	mov	r2, r5
 8007a66:	4633      	mov	r3, r6
 8007a68:	f7f8 fdc6 	bl	80005f8 <__aeabi_dmul>
 8007a6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a70:	eb0b 0507 	add.w	r5, fp, r7
 8007a74:	465e      	mov	r6, fp
 8007a76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a7a:	f7f9 f86d 	bl	8000b58 <__aeabi_d2iz>
 8007a7e:	4607      	mov	r7, r0
 8007a80:	f7f8 fd50 	bl	8000524 <__aeabi_i2d>
 8007a84:	3730      	adds	r7, #48	; 0x30
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a8e:	f7f8 fbfb 	bl	8000288 <__aeabi_dsub>
 8007a92:	f806 7b01 	strb.w	r7, [r6], #1
 8007a96:	42ae      	cmp	r6, r5
 8007a98:	e9cd 0100 	strd	r0, r1, [sp]
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	d126      	bne.n	8007af0 <_dtoa_r+0x5e8>
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <_dtoa_r+0x60c>)
 8007aa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007aa8:	f7f8 fbf0 	bl	800028c <__adddf3>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ab4:	f7f9 f830 	bl	8000b18 <__aeabi_dcmpgt>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d174      	bne.n	8007ba6 <_dtoa_r+0x69e>
 8007abc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	4914      	ldr	r1, [pc, #80]	; (8007b14 <_dtoa_r+0x60c>)
 8007ac4:	f7f8 fbe0 	bl	8000288 <__aeabi_dsub>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ad0:	f7f9 f804 	bl	8000adc <__aeabi_dcmplt>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f43f af30 	beq.w	800793a <_dtoa_r+0x432>
 8007ada:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ade:	2b30      	cmp	r3, #48	; 0x30
 8007ae0:	f105 32ff 	add.w	r2, r5, #4294967295
 8007ae4:	d002      	beq.n	8007aec <_dtoa_r+0x5e4>
 8007ae6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007aea:	e04a      	b.n	8007b82 <_dtoa_r+0x67a>
 8007aec:	4615      	mov	r5, r2
 8007aee:	e7f4      	b.n	8007ada <_dtoa_r+0x5d2>
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <_dtoa_r+0x600>)
 8007af2:	f7f8 fd81 	bl	80005f8 <__aeabi_dmul>
 8007af6:	e9cd 0100 	strd	r0, r1, [sp]
 8007afa:	e7bc      	b.n	8007a76 <_dtoa_r+0x56e>
 8007afc:	08009100 	.word	0x08009100
 8007b00:	080090d8 	.word	0x080090d8
 8007b04:	3ff00000 	.word	0x3ff00000
 8007b08:	40240000 	.word	0x40240000
 8007b0c:	401c0000 	.word	0x401c0000
 8007b10:	40140000 	.word	0x40140000
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b1c:	465d      	mov	r5, fp
 8007b1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b22:	4630      	mov	r0, r6
 8007b24:	4639      	mov	r1, r7
 8007b26:	f7f8 fe91 	bl	800084c <__aeabi_ddiv>
 8007b2a:	f7f9 f815 	bl	8000b58 <__aeabi_d2iz>
 8007b2e:	4680      	mov	r8, r0
 8007b30:	f7f8 fcf8 	bl	8000524 <__aeabi_i2d>
 8007b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b38:	f7f8 fd5e 	bl	80005f8 <__aeabi_dmul>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4630      	mov	r0, r6
 8007b42:	4639      	mov	r1, r7
 8007b44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007b48:	f7f8 fb9e 	bl	8000288 <__aeabi_dsub>
 8007b4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007b50:	eba5 060b 	sub.w	r6, r5, fp
 8007b54:	45b1      	cmp	r9, r6
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	d139      	bne.n	8007bd0 <_dtoa_r+0x6c8>
 8007b5c:	f7f8 fb96 	bl	800028c <__adddf3>
 8007b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b64:	4606      	mov	r6, r0
 8007b66:	460f      	mov	r7, r1
 8007b68:	f7f8 ffd6 	bl	8000b18 <__aeabi_dcmpgt>
 8007b6c:	b9c8      	cbnz	r0, 8007ba2 <_dtoa_r+0x69a>
 8007b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b72:	4630      	mov	r0, r6
 8007b74:	4639      	mov	r1, r7
 8007b76:	f7f8 ffa7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b7a:	b110      	cbz	r0, 8007b82 <_dtoa_r+0x67a>
 8007b7c:	f018 0f01 	tst.w	r8, #1
 8007b80:	d10f      	bne.n	8007ba2 <_dtoa_r+0x69a>
 8007b82:	9904      	ldr	r1, [sp, #16]
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fcaa 	bl	80084de <_Bfree>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b8e:	702b      	strb	r3, [r5, #0]
 8007b90:	f10a 0301 	add.w	r3, sl, #1
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8241 	beq.w	8008020 <_dtoa_r+0xb18>
 8007b9e:	601d      	str	r5, [r3, #0]
 8007ba0:	e23e      	b.n	8008020 <_dtoa_r+0xb18>
 8007ba2:	f8cd a020 	str.w	sl, [sp, #32]
 8007ba6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007baa:	2a39      	cmp	r2, #57	; 0x39
 8007bac:	f105 33ff 	add.w	r3, r5, #4294967295
 8007bb0:	d108      	bne.n	8007bc4 <_dtoa_r+0x6bc>
 8007bb2:	459b      	cmp	fp, r3
 8007bb4:	d10a      	bne.n	8007bcc <_dtoa_r+0x6c4>
 8007bb6:	9b08      	ldr	r3, [sp, #32]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	9308      	str	r3, [sp, #32]
 8007bbc:	2330      	movs	r3, #48	; 0x30
 8007bbe:	f88b 3000 	strb.w	r3, [fp]
 8007bc2:	465b      	mov	r3, fp
 8007bc4:	781a      	ldrb	r2, [r3, #0]
 8007bc6:	3201      	adds	r2, #1
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	e78c      	b.n	8007ae6 <_dtoa_r+0x5de>
 8007bcc:	461d      	mov	r5, r3
 8007bce:	e7ea      	b.n	8007ba6 <_dtoa_r+0x69e>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4b9b      	ldr	r3, [pc, #620]	; (8007e40 <_dtoa_r+0x938>)
 8007bd4:	f7f8 fd10 	bl	80005f8 <__aeabi_dmul>
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4606      	mov	r6, r0
 8007bde:	460f      	mov	r7, r1
 8007be0:	f7f8 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d09a      	beq.n	8007b1e <_dtoa_r+0x616>
 8007be8:	e7cb      	b.n	8007b82 <_dtoa_r+0x67a>
 8007bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bec:	2a00      	cmp	r2, #0
 8007bee:	f000 808b 	beq.w	8007d08 <_dtoa_r+0x800>
 8007bf2:	9a06      	ldr	r2, [sp, #24]
 8007bf4:	2a01      	cmp	r2, #1
 8007bf6:	dc6e      	bgt.n	8007cd6 <_dtoa_r+0x7ce>
 8007bf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	d067      	beq.n	8007cce <_dtoa_r+0x7c6>
 8007bfe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c02:	9f07      	ldr	r7, [sp, #28]
 8007c04:	9d05      	ldr	r5, [sp, #20]
 8007c06:	9a05      	ldr	r2, [sp, #20]
 8007c08:	2101      	movs	r1, #1
 8007c0a:	441a      	add	r2, r3
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	9205      	str	r2, [sp, #20]
 8007c10:	4498      	add	r8, r3
 8007c12:	f000 fd04 	bl	800861e <__i2b>
 8007c16:	4606      	mov	r6, r0
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	dd0c      	ble.n	8007c36 <_dtoa_r+0x72e>
 8007c1c:	f1b8 0f00 	cmp.w	r8, #0
 8007c20:	dd09      	ble.n	8007c36 <_dtoa_r+0x72e>
 8007c22:	4545      	cmp	r5, r8
 8007c24:	9a05      	ldr	r2, [sp, #20]
 8007c26:	462b      	mov	r3, r5
 8007c28:	bfa8      	it	ge
 8007c2a:	4643      	movge	r3, r8
 8007c2c:	1ad2      	subs	r2, r2, r3
 8007c2e:	9205      	str	r2, [sp, #20]
 8007c30:	1aed      	subs	r5, r5, r3
 8007c32:	eba8 0803 	sub.w	r8, r8, r3
 8007c36:	9b07      	ldr	r3, [sp, #28]
 8007c38:	b1eb      	cbz	r3, 8007c76 <_dtoa_r+0x76e>
 8007c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d067      	beq.n	8007d10 <_dtoa_r+0x808>
 8007c40:	b18f      	cbz	r7, 8007c66 <_dtoa_r+0x75e>
 8007c42:	4631      	mov	r1, r6
 8007c44:	463a      	mov	r2, r7
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 fd88 	bl	800875c <__pow5mult>
 8007c4c:	9a04      	ldr	r2, [sp, #16]
 8007c4e:	4601      	mov	r1, r0
 8007c50:	4606      	mov	r6, r0
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fcec 	bl	8008630 <__multiply>
 8007c58:	9904      	ldr	r1, [sp, #16]
 8007c5a:	9008      	str	r0, [sp, #32]
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 fc3e 	bl	80084de <_Bfree>
 8007c62:	9b08      	ldr	r3, [sp, #32]
 8007c64:	9304      	str	r3, [sp, #16]
 8007c66:	9b07      	ldr	r3, [sp, #28]
 8007c68:	1bda      	subs	r2, r3, r7
 8007c6a:	d004      	beq.n	8007c76 <_dtoa_r+0x76e>
 8007c6c:	9904      	ldr	r1, [sp, #16]
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 fd74 	bl	800875c <__pow5mult>
 8007c74:	9004      	str	r0, [sp, #16]
 8007c76:	2101      	movs	r1, #1
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 fcd0 	bl	800861e <__i2b>
 8007c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c80:	4607      	mov	r7, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 81d0 	beq.w	8008028 <_dtoa_r+0xb20>
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 fd65 	bl	800875c <__pow5mult>
 8007c92:	9b06      	ldr	r3, [sp, #24]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	4607      	mov	r7, r0
 8007c98:	dc40      	bgt.n	8007d1c <_dtoa_r+0x814>
 8007c9a:	9b00      	ldr	r3, [sp, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d139      	bne.n	8007d14 <_dtoa_r+0x80c>
 8007ca0:	9b01      	ldr	r3, [sp, #4]
 8007ca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d136      	bne.n	8007d18 <_dtoa_r+0x810>
 8007caa:	9b01      	ldr	r3, [sp, #4]
 8007cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cb0:	0d1b      	lsrs	r3, r3, #20
 8007cb2:	051b      	lsls	r3, r3, #20
 8007cb4:	b12b      	cbz	r3, 8007cc2 <_dtoa_r+0x7ba>
 8007cb6:	9b05      	ldr	r3, [sp, #20]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	9305      	str	r3, [sp, #20]
 8007cbc:	f108 0801 	add.w	r8, r8, #1
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d12a      	bne.n	8007d20 <_dtoa_r+0x818>
 8007cca:	2001      	movs	r0, #1
 8007ccc:	e030      	b.n	8007d30 <_dtoa_r+0x828>
 8007cce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cd0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cd4:	e795      	b.n	8007c02 <_dtoa_r+0x6fa>
 8007cd6:	9b07      	ldr	r3, [sp, #28]
 8007cd8:	f109 37ff 	add.w	r7, r9, #4294967295
 8007cdc:	42bb      	cmp	r3, r7
 8007cde:	bfbf      	itttt	lt
 8007ce0:	9b07      	ldrlt	r3, [sp, #28]
 8007ce2:	9707      	strlt	r7, [sp, #28]
 8007ce4:	1afa      	sublt	r2, r7, r3
 8007ce6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007ce8:	bfbb      	ittet	lt
 8007cea:	189b      	addlt	r3, r3, r2
 8007cec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007cee:	1bdf      	subge	r7, r3, r7
 8007cf0:	2700      	movlt	r7, #0
 8007cf2:	f1b9 0f00 	cmp.w	r9, #0
 8007cf6:	bfb5      	itete	lt
 8007cf8:	9b05      	ldrlt	r3, [sp, #20]
 8007cfa:	9d05      	ldrge	r5, [sp, #20]
 8007cfc:	eba3 0509 	sublt.w	r5, r3, r9
 8007d00:	464b      	movge	r3, r9
 8007d02:	bfb8      	it	lt
 8007d04:	2300      	movlt	r3, #0
 8007d06:	e77e      	b.n	8007c06 <_dtoa_r+0x6fe>
 8007d08:	9f07      	ldr	r7, [sp, #28]
 8007d0a:	9d05      	ldr	r5, [sp, #20]
 8007d0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007d0e:	e783      	b.n	8007c18 <_dtoa_r+0x710>
 8007d10:	9a07      	ldr	r2, [sp, #28]
 8007d12:	e7ab      	b.n	8007c6c <_dtoa_r+0x764>
 8007d14:	2300      	movs	r3, #0
 8007d16:	e7d4      	b.n	8007cc2 <_dtoa_r+0x7ba>
 8007d18:	9b00      	ldr	r3, [sp, #0]
 8007d1a:	e7d2      	b.n	8007cc2 <_dtoa_r+0x7ba>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9307      	str	r3, [sp, #28]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007d26:	6918      	ldr	r0, [r3, #16]
 8007d28:	f000 fc2b 	bl	8008582 <__hi0bits>
 8007d2c:	f1c0 0020 	rsb	r0, r0, #32
 8007d30:	4440      	add	r0, r8
 8007d32:	f010 001f 	ands.w	r0, r0, #31
 8007d36:	d047      	beq.n	8007dc8 <_dtoa_r+0x8c0>
 8007d38:	f1c0 0320 	rsb	r3, r0, #32
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	dd3b      	ble.n	8007db8 <_dtoa_r+0x8b0>
 8007d40:	9b05      	ldr	r3, [sp, #20]
 8007d42:	f1c0 001c 	rsb	r0, r0, #28
 8007d46:	4403      	add	r3, r0
 8007d48:	9305      	str	r3, [sp, #20]
 8007d4a:	4405      	add	r5, r0
 8007d4c:	4480      	add	r8, r0
 8007d4e:	9b05      	ldr	r3, [sp, #20]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dd05      	ble.n	8007d60 <_dtoa_r+0x858>
 8007d54:	461a      	mov	r2, r3
 8007d56:	9904      	ldr	r1, [sp, #16]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 fd4d 	bl	80087f8 <__lshift>
 8007d5e:	9004      	str	r0, [sp, #16]
 8007d60:	f1b8 0f00 	cmp.w	r8, #0
 8007d64:	dd05      	ble.n	8007d72 <_dtoa_r+0x86a>
 8007d66:	4639      	mov	r1, r7
 8007d68:	4642      	mov	r2, r8
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 fd44 	bl	80087f8 <__lshift>
 8007d70:	4607      	mov	r7, r0
 8007d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d74:	b353      	cbz	r3, 8007dcc <_dtoa_r+0x8c4>
 8007d76:	4639      	mov	r1, r7
 8007d78:	9804      	ldr	r0, [sp, #16]
 8007d7a:	f000 fd91 	bl	80088a0 <__mcmp>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	da24      	bge.n	8007dcc <_dtoa_r+0x8c4>
 8007d82:	2300      	movs	r3, #0
 8007d84:	220a      	movs	r2, #10
 8007d86:	9904      	ldr	r1, [sp, #16]
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fbbf 	bl	800850c <__multadd>
 8007d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d90:	9004      	str	r0, [sp, #16]
 8007d92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 814d 	beq.w	8008036 <_dtoa_r+0xb2e>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4631      	mov	r1, r6
 8007da0:	220a      	movs	r2, #10
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 fbb2 	bl	800850c <__multadd>
 8007da8:	9b02      	ldr	r3, [sp, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	4606      	mov	r6, r0
 8007dae:	dc4f      	bgt.n	8007e50 <_dtoa_r+0x948>
 8007db0:	9b06      	ldr	r3, [sp, #24]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	dd4c      	ble.n	8007e50 <_dtoa_r+0x948>
 8007db6:	e011      	b.n	8007ddc <_dtoa_r+0x8d4>
 8007db8:	d0c9      	beq.n	8007d4e <_dtoa_r+0x846>
 8007dba:	9a05      	ldr	r2, [sp, #20]
 8007dbc:	331c      	adds	r3, #28
 8007dbe:	441a      	add	r2, r3
 8007dc0:	9205      	str	r2, [sp, #20]
 8007dc2:	441d      	add	r5, r3
 8007dc4:	4498      	add	r8, r3
 8007dc6:	e7c2      	b.n	8007d4e <_dtoa_r+0x846>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	e7f6      	b.n	8007dba <_dtoa_r+0x8b2>
 8007dcc:	f1b9 0f00 	cmp.w	r9, #0
 8007dd0:	dc38      	bgt.n	8007e44 <_dtoa_r+0x93c>
 8007dd2:	9b06      	ldr	r3, [sp, #24]
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	dd35      	ble.n	8007e44 <_dtoa_r+0x93c>
 8007dd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ddc:	9b02      	ldr	r3, [sp, #8]
 8007dde:	b963      	cbnz	r3, 8007dfa <_dtoa_r+0x8f2>
 8007de0:	4639      	mov	r1, r7
 8007de2:	2205      	movs	r2, #5
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 fb91 	bl	800850c <__multadd>
 8007dea:	4601      	mov	r1, r0
 8007dec:	4607      	mov	r7, r0
 8007dee:	9804      	ldr	r0, [sp, #16]
 8007df0:	f000 fd56 	bl	80088a0 <__mcmp>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f73f adcc 	bgt.w	8007992 <_dtoa_r+0x48a>
 8007dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dfc:	465d      	mov	r5, fp
 8007dfe:	ea6f 0a03 	mvn.w	sl, r3
 8007e02:	f04f 0900 	mov.w	r9, #0
 8007e06:	4639      	mov	r1, r7
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 fb68 	bl	80084de <_Bfree>
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	f43f aeb7 	beq.w	8007b82 <_dtoa_r+0x67a>
 8007e14:	f1b9 0f00 	cmp.w	r9, #0
 8007e18:	d005      	beq.n	8007e26 <_dtoa_r+0x91e>
 8007e1a:	45b1      	cmp	r9, r6
 8007e1c:	d003      	beq.n	8007e26 <_dtoa_r+0x91e>
 8007e1e:	4649      	mov	r1, r9
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fb5c 	bl	80084de <_Bfree>
 8007e26:	4631      	mov	r1, r6
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 fb58 	bl	80084de <_Bfree>
 8007e2e:	e6a8      	b.n	8007b82 <_dtoa_r+0x67a>
 8007e30:	2700      	movs	r7, #0
 8007e32:	463e      	mov	r6, r7
 8007e34:	e7e1      	b.n	8007dfa <_dtoa_r+0x8f2>
 8007e36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007e3a:	463e      	mov	r6, r7
 8007e3c:	e5a9      	b.n	8007992 <_dtoa_r+0x48a>
 8007e3e:	bf00      	nop
 8007e40:	40240000 	.word	0x40240000
 8007e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e46:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 80fa 	beq.w	8008044 <_dtoa_r+0xb3c>
 8007e50:	2d00      	cmp	r5, #0
 8007e52:	dd05      	ble.n	8007e60 <_dtoa_r+0x958>
 8007e54:	4631      	mov	r1, r6
 8007e56:	462a      	mov	r2, r5
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fccd 	bl	80087f8 <__lshift>
 8007e5e:	4606      	mov	r6, r0
 8007e60:	9b07      	ldr	r3, [sp, #28]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d04c      	beq.n	8007f00 <_dtoa_r+0x9f8>
 8007e66:	6871      	ldr	r1, [r6, #4]
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fb04 	bl	8008476 <_Balloc>
 8007e6e:	6932      	ldr	r2, [r6, #16]
 8007e70:	3202      	adds	r2, #2
 8007e72:	4605      	mov	r5, r0
 8007e74:	0092      	lsls	r2, r2, #2
 8007e76:	f106 010c 	add.w	r1, r6, #12
 8007e7a:	300c      	adds	r0, #12
 8007e7c:	f000 faf0 	bl	8008460 <memcpy>
 8007e80:	2201      	movs	r2, #1
 8007e82:	4629      	mov	r1, r5
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 fcb7 	bl	80087f8 <__lshift>
 8007e8a:	9b00      	ldr	r3, [sp, #0]
 8007e8c:	f8cd b014 	str.w	fp, [sp, #20]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	46b1      	mov	r9, r6
 8007e96:	9307      	str	r3, [sp, #28]
 8007e98:	4606      	mov	r6, r0
 8007e9a:	4639      	mov	r1, r7
 8007e9c:	9804      	ldr	r0, [sp, #16]
 8007e9e:	f7ff faa5 	bl	80073ec <quorem>
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007eaa:	9804      	ldr	r0, [sp, #16]
 8007eac:	f000 fcf8 	bl	80088a0 <__mcmp>
 8007eb0:	4632      	mov	r2, r6
 8007eb2:	9000      	str	r0, [sp, #0]
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 fd0c 	bl	80088d4 <__mdiff>
 8007ebc:	68c3      	ldr	r3, [r0, #12]
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	bb03      	cbnz	r3, 8007f04 <_dtoa_r+0x9fc>
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	9008      	str	r0, [sp, #32]
 8007ec6:	9804      	ldr	r0, [sp, #16]
 8007ec8:	f000 fcea 	bl	80088a0 <__mcmp>
 8007ecc:	9a08      	ldr	r2, [sp, #32]
 8007ece:	4603      	mov	r3, r0
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	9308      	str	r3, [sp, #32]
 8007ed6:	f000 fb02 	bl	80084de <_Bfree>
 8007eda:	9b08      	ldr	r3, [sp, #32]
 8007edc:	b9a3      	cbnz	r3, 8007f08 <_dtoa_r+0xa00>
 8007ede:	9a06      	ldr	r2, [sp, #24]
 8007ee0:	b992      	cbnz	r2, 8007f08 <_dtoa_r+0xa00>
 8007ee2:	9a07      	ldr	r2, [sp, #28]
 8007ee4:	b982      	cbnz	r2, 8007f08 <_dtoa_r+0xa00>
 8007ee6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007eea:	d029      	beq.n	8007f40 <_dtoa_r+0xa38>
 8007eec:	9b00      	ldr	r3, [sp, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dd01      	ble.n	8007ef6 <_dtoa_r+0x9ee>
 8007ef2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ef6:	9b05      	ldr	r3, [sp, #20]
 8007ef8:	1c5d      	adds	r5, r3, #1
 8007efa:	f883 8000 	strb.w	r8, [r3]
 8007efe:	e782      	b.n	8007e06 <_dtoa_r+0x8fe>
 8007f00:	4630      	mov	r0, r6
 8007f02:	e7c2      	b.n	8007e8a <_dtoa_r+0x982>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e7e3      	b.n	8007ed0 <_dtoa_r+0x9c8>
 8007f08:	9a00      	ldr	r2, [sp, #0]
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	db04      	blt.n	8007f18 <_dtoa_r+0xa10>
 8007f0e:	d125      	bne.n	8007f5c <_dtoa_r+0xa54>
 8007f10:	9a06      	ldr	r2, [sp, #24]
 8007f12:	bb1a      	cbnz	r2, 8007f5c <_dtoa_r+0xa54>
 8007f14:	9a07      	ldr	r2, [sp, #28]
 8007f16:	bb0a      	cbnz	r2, 8007f5c <_dtoa_r+0xa54>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	ddec      	ble.n	8007ef6 <_dtoa_r+0x9ee>
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	9904      	ldr	r1, [sp, #16]
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fc69 	bl	80087f8 <__lshift>
 8007f26:	4639      	mov	r1, r7
 8007f28:	9004      	str	r0, [sp, #16]
 8007f2a:	f000 fcb9 	bl	80088a0 <__mcmp>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	dc03      	bgt.n	8007f3a <_dtoa_r+0xa32>
 8007f32:	d1e0      	bne.n	8007ef6 <_dtoa_r+0x9ee>
 8007f34:	f018 0f01 	tst.w	r8, #1
 8007f38:	d0dd      	beq.n	8007ef6 <_dtoa_r+0x9ee>
 8007f3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f3e:	d1d8      	bne.n	8007ef2 <_dtoa_r+0x9ea>
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	9a05      	ldr	r2, [sp, #20]
 8007f44:	1c5d      	adds	r5, r3, #1
 8007f46:	2339      	movs	r3, #57	; 0x39
 8007f48:	7013      	strb	r3, [r2, #0]
 8007f4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f4e:	2b39      	cmp	r3, #57	; 0x39
 8007f50:	f105 32ff 	add.w	r2, r5, #4294967295
 8007f54:	d04f      	beq.n	8007ff6 <_dtoa_r+0xaee>
 8007f56:	3301      	adds	r3, #1
 8007f58:	7013      	strb	r3, [r2, #0]
 8007f5a:	e754      	b.n	8007e06 <_dtoa_r+0x8fe>
 8007f5c:	9a05      	ldr	r2, [sp, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f102 0501 	add.w	r5, r2, #1
 8007f64:	dd06      	ble.n	8007f74 <_dtoa_r+0xa6c>
 8007f66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f6a:	d0e9      	beq.n	8007f40 <_dtoa_r+0xa38>
 8007f6c:	f108 0801 	add.w	r8, r8, #1
 8007f70:	9b05      	ldr	r3, [sp, #20]
 8007f72:	e7c2      	b.n	8007efa <_dtoa_r+0x9f2>
 8007f74:	9a02      	ldr	r2, [sp, #8]
 8007f76:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007f7a:	eba5 030b 	sub.w	r3, r5, fp
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d021      	beq.n	8007fc6 <_dtoa_r+0xabe>
 8007f82:	2300      	movs	r3, #0
 8007f84:	220a      	movs	r2, #10
 8007f86:	9904      	ldr	r1, [sp, #16]
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 fabf 	bl	800850c <__multadd>
 8007f8e:	45b1      	cmp	r9, r6
 8007f90:	9004      	str	r0, [sp, #16]
 8007f92:	f04f 0300 	mov.w	r3, #0
 8007f96:	f04f 020a 	mov.w	r2, #10
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	d105      	bne.n	8007fac <_dtoa_r+0xaa4>
 8007fa0:	f000 fab4 	bl	800850c <__multadd>
 8007fa4:	4681      	mov	r9, r0
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	9505      	str	r5, [sp, #20]
 8007faa:	e776      	b.n	8007e9a <_dtoa_r+0x992>
 8007fac:	f000 faae 	bl	800850c <__multadd>
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4681      	mov	r9, r0
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	220a      	movs	r2, #10
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 faa7 	bl	800850c <__multadd>
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	e7f2      	b.n	8007fa8 <_dtoa_r+0xaa0>
 8007fc2:	f04f 0900 	mov.w	r9, #0
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	9904      	ldr	r1, [sp, #16]
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 fc14 	bl	80087f8 <__lshift>
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	9004      	str	r0, [sp, #16]
 8007fd4:	f000 fc64 	bl	80088a0 <__mcmp>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	dcb6      	bgt.n	8007f4a <_dtoa_r+0xa42>
 8007fdc:	d102      	bne.n	8007fe4 <_dtoa_r+0xadc>
 8007fde:	f018 0f01 	tst.w	r8, #1
 8007fe2:	d1b2      	bne.n	8007f4a <_dtoa_r+0xa42>
 8007fe4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fe8:	2b30      	cmp	r3, #48	; 0x30
 8007fea:	f105 32ff 	add.w	r2, r5, #4294967295
 8007fee:	f47f af0a 	bne.w	8007e06 <_dtoa_r+0x8fe>
 8007ff2:	4615      	mov	r5, r2
 8007ff4:	e7f6      	b.n	8007fe4 <_dtoa_r+0xadc>
 8007ff6:	4593      	cmp	fp, r2
 8007ff8:	d105      	bne.n	8008006 <_dtoa_r+0xafe>
 8007ffa:	2331      	movs	r3, #49	; 0x31
 8007ffc:	f10a 0a01 	add.w	sl, sl, #1
 8008000:	f88b 3000 	strb.w	r3, [fp]
 8008004:	e6ff      	b.n	8007e06 <_dtoa_r+0x8fe>
 8008006:	4615      	mov	r5, r2
 8008008:	e79f      	b.n	8007f4a <_dtoa_r+0xa42>
 800800a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008070 <_dtoa_r+0xb68>
 800800e:	e007      	b.n	8008020 <_dtoa_r+0xb18>
 8008010:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008012:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008074 <_dtoa_r+0xb6c>
 8008016:	b11b      	cbz	r3, 8008020 <_dtoa_r+0xb18>
 8008018:	f10b 0308 	add.w	r3, fp, #8
 800801c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	4658      	mov	r0, fp
 8008022:	b017      	add	sp, #92	; 0x5c
 8008024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008028:	9b06      	ldr	r3, [sp, #24]
 800802a:	2b01      	cmp	r3, #1
 800802c:	f77f ae35 	ble.w	8007c9a <_dtoa_r+0x792>
 8008030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008032:	9307      	str	r3, [sp, #28]
 8008034:	e649      	b.n	8007cca <_dtoa_r+0x7c2>
 8008036:	9b02      	ldr	r3, [sp, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	dc03      	bgt.n	8008044 <_dtoa_r+0xb3c>
 800803c:	9b06      	ldr	r3, [sp, #24]
 800803e:	2b02      	cmp	r3, #2
 8008040:	f73f aecc 	bgt.w	8007ddc <_dtoa_r+0x8d4>
 8008044:	465d      	mov	r5, fp
 8008046:	4639      	mov	r1, r7
 8008048:	9804      	ldr	r0, [sp, #16]
 800804a:	f7ff f9cf 	bl	80073ec <quorem>
 800804e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008052:	f805 8b01 	strb.w	r8, [r5], #1
 8008056:	9a02      	ldr	r2, [sp, #8]
 8008058:	eba5 030b 	sub.w	r3, r5, fp
 800805c:	429a      	cmp	r2, r3
 800805e:	ddb0      	ble.n	8007fc2 <_dtoa_r+0xaba>
 8008060:	2300      	movs	r3, #0
 8008062:	220a      	movs	r2, #10
 8008064:	9904      	ldr	r1, [sp, #16]
 8008066:	4620      	mov	r0, r4
 8008068:	f000 fa50 	bl	800850c <__multadd>
 800806c:	9004      	str	r0, [sp, #16]
 800806e:	e7ea      	b.n	8008046 <_dtoa_r+0xb3e>
 8008070:	08009044 	.word	0x08009044
 8008074:	08009068 	.word	0x08009068

08008078 <__sflush_r>:
 8008078:	898a      	ldrh	r2, [r1, #12]
 800807a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807e:	4605      	mov	r5, r0
 8008080:	0710      	lsls	r0, r2, #28
 8008082:	460c      	mov	r4, r1
 8008084:	d458      	bmi.n	8008138 <__sflush_r+0xc0>
 8008086:	684b      	ldr	r3, [r1, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	dc05      	bgt.n	8008098 <__sflush_r+0x20>
 800808c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	dc02      	bgt.n	8008098 <__sflush_r+0x20>
 8008092:	2000      	movs	r0, #0
 8008094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800809a:	2e00      	cmp	r6, #0
 800809c:	d0f9      	beq.n	8008092 <__sflush_r+0x1a>
 800809e:	2300      	movs	r3, #0
 80080a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080a4:	682f      	ldr	r7, [r5, #0]
 80080a6:	6a21      	ldr	r1, [r4, #32]
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	d032      	beq.n	8008112 <__sflush_r+0x9a>
 80080ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	075a      	lsls	r2, r3, #29
 80080b2:	d505      	bpl.n	80080c0 <__sflush_r+0x48>
 80080b4:	6863      	ldr	r3, [r4, #4]
 80080b6:	1ac0      	subs	r0, r0, r3
 80080b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080ba:	b10b      	cbz	r3, 80080c0 <__sflush_r+0x48>
 80080bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080be:	1ac0      	subs	r0, r0, r3
 80080c0:	2300      	movs	r3, #0
 80080c2:	4602      	mov	r2, r0
 80080c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080c6:	6a21      	ldr	r1, [r4, #32]
 80080c8:	4628      	mov	r0, r5
 80080ca:	47b0      	blx	r6
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	d106      	bne.n	80080e0 <__sflush_r+0x68>
 80080d2:	6829      	ldr	r1, [r5, #0]
 80080d4:	291d      	cmp	r1, #29
 80080d6:	d848      	bhi.n	800816a <__sflush_r+0xf2>
 80080d8:	4a29      	ldr	r2, [pc, #164]	; (8008180 <__sflush_r+0x108>)
 80080da:	40ca      	lsrs	r2, r1
 80080dc:	07d6      	lsls	r6, r2, #31
 80080de:	d544      	bpl.n	800816a <__sflush_r+0xf2>
 80080e0:	2200      	movs	r2, #0
 80080e2:	6062      	str	r2, [r4, #4]
 80080e4:	04d9      	lsls	r1, r3, #19
 80080e6:	6922      	ldr	r2, [r4, #16]
 80080e8:	6022      	str	r2, [r4, #0]
 80080ea:	d504      	bpl.n	80080f6 <__sflush_r+0x7e>
 80080ec:	1c42      	adds	r2, r0, #1
 80080ee:	d101      	bne.n	80080f4 <__sflush_r+0x7c>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	b903      	cbnz	r3, 80080f6 <__sflush_r+0x7e>
 80080f4:	6560      	str	r0, [r4, #84]	; 0x54
 80080f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080f8:	602f      	str	r7, [r5, #0]
 80080fa:	2900      	cmp	r1, #0
 80080fc:	d0c9      	beq.n	8008092 <__sflush_r+0x1a>
 80080fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008102:	4299      	cmp	r1, r3
 8008104:	d002      	beq.n	800810c <__sflush_r+0x94>
 8008106:	4628      	mov	r0, r5
 8008108:	f000 fc9e 	bl	8008a48 <_free_r>
 800810c:	2000      	movs	r0, #0
 800810e:	6360      	str	r0, [r4, #52]	; 0x34
 8008110:	e7c0      	b.n	8008094 <__sflush_r+0x1c>
 8008112:	2301      	movs	r3, #1
 8008114:	4628      	mov	r0, r5
 8008116:	47b0      	blx	r6
 8008118:	1c41      	adds	r1, r0, #1
 800811a:	d1c8      	bne.n	80080ae <__sflush_r+0x36>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0c5      	beq.n	80080ae <__sflush_r+0x36>
 8008122:	2b1d      	cmp	r3, #29
 8008124:	d001      	beq.n	800812a <__sflush_r+0xb2>
 8008126:	2b16      	cmp	r3, #22
 8008128:	d101      	bne.n	800812e <__sflush_r+0xb6>
 800812a:	602f      	str	r7, [r5, #0]
 800812c:	e7b1      	b.n	8008092 <__sflush_r+0x1a>
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008134:	81a3      	strh	r3, [r4, #12]
 8008136:	e7ad      	b.n	8008094 <__sflush_r+0x1c>
 8008138:	690f      	ldr	r7, [r1, #16]
 800813a:	2f00      	cmp	r7, #0
 800813c:	d0a9      	beq.n	8008092 <__sflush_r+0x1a>
 800813e:	0793      	lsls	r3, r2, #30
 8008140:	680e      	ldr	r6, [r1, #0]
 8008142:	bf08      	it	eq
 8008144:	694b      	ldreq	r3, [r1, #20]
 8008146:	600f      	str	r7, [r1, #0]
 8008148:	bf18      	it	ne
 800814a:	2300      	movne	r3, #0
 800814c:	eba6 0807 	sub.w	r8, r6, r7
 8008150:	608b      	str	r3, [r1, #8]
 8008152:	f1b8 0f00 	cmp.w	r8, #0
 8008156:	dd9c      	ble.n	8008092 <__sflush_r+0x1a>
 8008158:	4643      	mov	r3, r8
 800815a:	463a      	mov	r2, r7
 800815c:	6a21      	ldr	r1, [r4, #32]
 800815e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008160:	4628      	mov	r0, r5
 8008162:	47b0      	blx	r6
 8008164:	2800      	cmp	r0, #0
 8008166:	dc06      	bgt.n	8008176 <__sflush_r+0xfe>
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800816e:	81a3      	strh	r3, [r4, #12]
 8008170:	f04f 30ff 	mov.w	r0, #4294967295
 8008174:	e78e      	b.n	8008094 <__sflush_r+0x1c>
 8008176:	4407      	add	r7, r0
 8008178:	eba8 0800 	sub.w	r8, r8, r0
 800817c:	e7e9      	b.n	8008152 <__sflush_r+0xda>
 800817e:	bf00      	nop
 8008180:	20400001 	.word	0x20400001

08008184 <_fflush_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	690b      	ldr	r3, [r1, #16]
 8008188:	4605      	mov	r5, r0
 800818a:	460c      	mov	r4, r1
 800818c:	b1db      	cbz	r3, 80081c6 <_fflush_r+0x42>
 800818e:	b118      	cbz	r0, 8008198 <_fflush_r+0x14>
 8008190:	6983      	ldr	r3, [r0, #24]
 8008192:	b90b      	cbnz	r3, 8008198 <_fflush_r+0x14>
 8008194:	f000 f860 	bl	8008258 <__sinit>
 8008198:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <_fflush_r+0x48>)
 800819a:	429c      	cmp	r4, r3
 800819c:	d109      	bne.n	80081b2 <_fflush_r+0x2e>
 800819e:	686c      	ldr	r4, [r5, #4]
 80081a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a4:	b17b      	cbz	r3, 80081c6 <_fflush_r+0x42>
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ae:	f7ff bf63 	b.w	8008078 <__sflush_r>
 80081b2:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <_fflush_r+0x4c>)
 80081b4:	429c      	cmp	r4, r3
 80081b6:	d101      	bne.n	80081bc <_fflush_r+0x38>
 80081b8:	68ac      	ldr	r4, [r5, #8]
 80081ba:	e7f1      	b.n	80081a0 <_fflush_r+0x1c>
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <_fflush_r+0x50>)
 80081be:	429c      	cmp	r4, r3
 80081c0:	bf08      	it	eq
 80081c2:	68ec      	ldreq	r4, [r5, #12]
 80081c4:	e7ec      	b.n	80081a0 <_fflush_r+0x1c>
 80081c6:	2000      	movs	r0, #0
 80081c8:	bd38      	pop	{r3, r4, r5, pc}
 80081ca:	bf00      	nop
 80081cc:	08009098 	.word	0x08009098
 80081d0:	080090b8 	.word	0x080090b8
 80081d4:	08009078 	.word	0x08009078

080081d8 <std>:
 80081d8:	2300      	movs	r3, #0
 80081da:	b510      	push	{r4, lr}
 80081dc:	4604      	mov	r4, r0
 80081de:	e9c0 3300 	strd	r3, r3, [r0]
 80081e2:	6083      	str	r3, [r0, #8]
 80081e4:	8181      	strh	r1, [r0, #12]
 80081e6:	6643      	str	r3, [r0, #100]	; 0x64
 80081e8:	81c2      	strh	r2, [r0, #14]
 80081ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ee:	6183      	str	r3, [r0, #24]
 80081f0:	4619      	mov	r1, r3
 80081f2:	2208      	movs	r2, #8
 80081f4:	305c      	adds	r0, #92	; 0x5c
 80081f6:	f7fe faaa 	bl	800674e <memset>
 80081fa:	4b05      	ldr	r3, [pc, #20]	; (8008210 <std+0x38>)
 80081fc:	6263      	str	r3, [r4, #36]	; 0x24
 80081fe:	4b05      	ldr	r3, [pc, #20]	; (8008214 <std+0x3c>)
 8008200:	62a3      	str	r3, [r4, #40]	; 0x28
 8008202:	4b05      	ldr	r3, [pc, #20]	; (8008218 <std+0x40>)
 8008204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008206:	4b05      	ldr	r3, [pc, #20]	; (800821c <std+0x44>)
 8008208:	6224      	str	r4, [r4, #32]
 800820a:	6323      	str	r3, [r4, #48]	; 0x30
 800820c:	bd10      	pop	{r4, pc}
 800820e:	bf00      	nop
 8008210:	08008e39 	.word	0x08008e39
 8008214:	08008e5b 	.word	0x08008e5b
 8008218:	08008e93 	.word	0x08008e93
 800821c:	08008eb7 	.word	0x08008eb7

08008220 <_cleanup_r>:
 8008220:	4901      	ldr	r1, [pc, #4]	; (8008228 <_cleanup_r+0x8>)
 8008222:	f000 b885 	b.w	8008330 <_fwalk_reent>
 8008226:	bf00      	nop
 8008228:	08008185 	.word	0x08008185

0800822c <__sfmoreglue>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	1e4a      	subs	r2, r1, #1
 8008230:	2568      	movs	r5, #104	; 0x68
 8008232:	4355      	muls	r5, r2
 8008234:	460e      	mov	r6, r1
 8008236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800823a:	f000 fc53 	bl	8008ae4 <_malloc_r>
 800823e:	4604      	mov	r4, r0
 8008240:	b140      	cbz	r0, 8008254 <__sfmoreglue+0x28>
 8008242:	2100      	movs	r1, #0
 8008244:	e9c0 1600 	strd	r1, r6, [r0]
 8008248:	300c      	adds	r0, #12
 800824a:	60a0      	str	r0, [r4, #8]
 800824c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008250:	f7fe fa7d 	bl	800674e <memset>
 8008254:	4620      	mov	r0, r4
 8008256:	bd70      	pop	{r4, r5, r6, pc}

08008258 <__sinit>:
 8008258:	6983      	ldr	r3, [r0, #24]
 800825a:	b510      	push	{r4, lr}
 800825c:	4604      	mov	r4, r0
 800825e:	bb33      	cbnz	r3, 80082ae <__sinit+0x56>
 8008260:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008264:	6503      	str	r3, [r0, #80]	; 0x50
 8008266:	4b12      	ldr	r3, [pc, #72]	; (80082b0 <__sinit+0x58>)
 8008268:	4a12      	ldr	r2, [pc, #72]	; (80082b4 <__sinit+0x5c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6282      	str	r2, [r0, #40]	; 0x28
 800826e:	4298      	cmp	r0, r3
 8008270:	bf04      	itt	eq
 8008272:	2301      	moveq	r3, #1
 8008274:	6183      	streq	r3, [r0, #24]
 8008276:	f000 f81f 	bl	80082b8 <__sfp>
 800827a:	6060      	str	r0, [r4, #4]
 800827c:	4620      	mov	r0, r4
 800827e:	f000 f81b 	bl	80082b8 <__sfp>
 8008282:	60a0      	str	r0, [r4, #8]
 8008284:	4620      	mov	r0, r4
 8008286:	f000 f817 	bl	80082b8 <__sfp>
 800828a:	2200      	movs	r2, #0
 800828c:	60e0      	str	r0, [r4, #12]
 800828e:	2104      	movs	r1, #4
 8008290:	6860      	ldr	r0, [r4, #4]
 8008292:	f7ff ffa1 	bl	80081d8 <std>
 8008296:	2201      	movs	r2, #1
 8008298:	2109      	movs	r1, #9
 800829a:	68a0      	ldr	r0, [r4, #8]
 800829c:	f7ff ff9c 	bl	80081d8 <std>
 80082a0:	2202      	movs	r2, #2
 80082a2:	2112      	movs	r1, #18
 80082a4:	68e0      	ldr	r0, [r4, #12]
 80082a6:	f7ff ff97 	bl	80081d8 <std>
 80082aa:	2301      	movs	r3, #1
 80082ac:	61a3      	str	r3, [r4, #24]
 80082ae:	bd10      	pop	{r4, pc}
 80082b0:	08009030 	.word	0x08009030
 80082b4:	08008221 	.word	0x08008221

080082b8 <__sfp>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	4b1b      	ldr	r3, [pc, #108]	; (8008328 <__sfp+0x70>)
 80082bc:	681e      	ldr	r6, [r3, #0]
 80082be:	69b3      	ldr	r3, [r6, #24]
 80082c0:	4607      	mov	r7, r0
 80082c2:	b913      	cbnz	r3, 80082ca <__sfp+0x12>
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7ff ffc7 	bl	8008258 <__sinit>
 80082ca:	3648      	adds	r6, #72	; 0x48
 80082cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	d503      	bpl.n	80082dc <__sfp+0x24>
 80082d4:	6833      	ldr	r3, [r6, #0]
 80082d6:	b133      	cbz	r3, 80082e6 <__sfp+0x2e>
 80082d8:	6836      	ldr	r6, [r6, #0]
 80082da:	e7f7      	b.n	80082cc <__sfp+0x14>
 80082dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082e0:	b16d      	cbz	r5, 80082fe <__sfp+0x46>
 80082e2:	3468      	adds	r4, #104	; 0x68
 80082e4:	e7f4      	b.n	80082d0 <__sfp+0x18>
 80082e6:	2104      	movs	r1, #4
 80082e8:	4638      	mov	r0, r7
 80082ea:	f7ff ff9f 	bl	800822c <__sfmoreglue>
 80082ee:	6030      	str	r0, [r6, #0]
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d1f1      	bne.n	80082d8 <__sfp+0x20>
 80082f4:	230c      	movs	r3, #12
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	4604      	mov	r4, r0
 80082fa:	4620      	mov	r0, r4
 80082fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082fe:	4b0b      	ldr	r3, [pc, #44]	; (800832c <__sfp+0x74>)
 8008300:	6665      	str	r5, [r4, #100]	; 0x64
 8008302:	e9c4 5500 	strd	r5, r5, [r4]
 8008306:	60a5      	str	r5, [r4, #8]
 8008308:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800830c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008310:	2208      	movs	r2, #8
 8008312:	4629      	mov	r1, r5
 8008314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008318:	f7fe fa19 	bl	800674e <memset>
 800831c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008324:	e7e9      	b.n	80082fa <__sfp+0x42>
 8008326:	bf00      	nop
 8008328:	08009030 	.word	0x08009030
 800832c:	ffff0001 	.word	0xffff0001

08008330 <_fwalk_reent>:
 8008330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008334:	4680      	mov	r8, r0
 8008336:	4689      	mov	r9, r1
 8008338:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800833c:	2600      	movs	r6, #0
 800833e:	b914      	cbnz	r4, 8008346 <_fwalk_reent+0x16>
 8008340:	4630      	mov	r0, r6
 8008342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008346:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800834a:	3f01      	subs	r7, #1
 800834c:	d501      	bpl.n	8008352 <_fwalk_reent+0x22>
 800834e:	6824      	ldr	r4, [r4, #0]
 8008350:	e7f5      	b.n	800833e <_fwalk_reent+0xe>
 8008352:	89ab      	ldrh	r3, [r5, #12]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d907      	bls.n	8008368 <_fwalk_reent+0x38>
 8008358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800835c:	3301      	adds	r3, #1
 800835e:	d003      	beq.n	8008368 <_fwalk_reent+0x38>
 8008360:	4629      	mov	r1, r5
 8008362:	4640      	mov	r0, r8
 8008364:	47c8      	blx	r9
 8008366:	4306      	orrs	r6, r0
 8008368:	3568      	adds	r5, #104	; 0x68
 800836a:	e7ee      	b.n	800834a <_fwalk_reent+0x1a>

0800836c <_localeconv_r>:
 800836c:	4b04      	ldr	r3, [pc, #16]	; (8008380 <_localeconv_r+0x14>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6a18      	ldr	r0, [r3, #32]
 8008372:	4b04      	ldr	r3, [pc, #16]	; (8008384 <_localeconv_r+0x18>)
 8008374:	2800      	cmp	r0, #0
 8008376:	bf08      	it	eq
 8008378:	4618      	moveq	r0, r3
 800837a:	30f0      	adds	r0, #240	; 0xf0
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	20000264 	.word	0x20000264
 8008384:	200002c8 	.word	0x200002c8

08008388 <__swhatbuf_r>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	460e      	mov	r6, r1
 800838c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008390:	2900      	cmp	r1, #0
 8008392:	b096      	sub	sp, #88	; 0x58
 8008394:	4614      	mov	r4, r2
 8008396:	461d      	mov	r5, r3
 8008398:	da07      	bge.n	80083aa <__swhatbuf_r+0x22>
 800839a:	2300      	movs	r3, #0
 800839c:	602b      	str	r3, [r5, #0]
 800839e:	89b3      	ldrh	r3, [r6, #12]
 80083a0:	061a      	lsls	r2, r3, #24
 80083a2:	d410      	bmi.n	80083c6 <__swhatbuf_r+0x3e>
 80083a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083a8:	e00e      	b.n	80083c8 <__swhatbuf_r+0x40>
 80083aa:	466a      	mov	r2, sp
 80083ac:	f000 fdaa 	bl	8008f04 <_fstat_r>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	dbf2      	blt.n	800839a <__swhatbuf_r+0x12>
 80083b4:	9a01      	ldr	r2, [sp, #4]
 80083b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083be:	425a      	negs	r2, r3
 80083c0:	415a      	adcs	r2, r3
 80083c2:	602a      	str	r2, [r5, #0]
 80083c4:	e7ee      	b.n	80083a4 <__swhatbuf_r+0x1c>
 80083c6:	2340      	movs	r3, #64	; 0x40
 80083c8:	2000      	movs	r0, #0
 80083ca:	6023      	str	r3, [r4, #0]
 80083cc:	b016      	add	sp, #88	; 0x58
 80083ce:	bd70      	pop	{r4, r5, r6, pc}

080083d0 <__smakebuf_r>:
 80083d0:	898b      	ldrh	r3, [r1, #12]
 80083d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083d4:	079d      	lsls	r5, r3, #30
 80083d6:	4606      	mov	r6, r0
 80083d8:	460c      	mov	r4, r1
 80083da:	d507      	bpl.n	80083ec <__smakebuf_r+0x1c>
 80083dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	2301      	movs	r3, #1
 80083e6:	6163      	str	r3, [r4, #20]
 80083e8:	b002      	add	sp, #8
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	ab01      	add	r3, sp, #4
 80083ee:	466a      	mov	r2, sp
 80083f0:	f7ff ffca 	bl	8008388 <__swhatbuf_r>
 80083f4:	9900      	ldr	r1, [sp, #0]
 80083f6:	4605      	mov	r5, r0
 80083f8:	4630      	mov	r0, r6
 80083fa:	f000 fb73 	bl	8008ae4 <_malloc_r>
 80083fe:	b948      	cbnz	r0, 8008414 <__smakebuf_r+0x44>
 8008400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008404:	059a      	lsls	r2, r3, #22
 8008406:	d4ef      	bmi.n	80083e8 <__smakebuf_r+0x18>
 8008408:	f023 0303 	bic.w	r3, r3, #3
 800840c:	f043 0302 	orr.w	r3, r3, #2
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	e7e3      	b.n	80083dc <__smakebuf_r+0xc>
 8008414:	4b0d      	ldr	r3, [pc, #52]	; (800844c <__smakebuf_r+0x7c>)
 8008416:	62b3      	str	r3, [r6, #40]	; 0x28
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	6020      	str	r0, [r4, #0]
 800841c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	9b00      	ldr	r3, [sp, #0]
 8008424:	6163      	str	r3, [r4, #20]
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	6120      	str	r0, [r4, #16]
 800842a:	b15b      	cbz	r3, 8008444 <__smakebuf_r+0x74>
 800842c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008430:	4630      	mov	r0, r6
 8008432:	f000 fd79 	bl	8008f28 <_isatty_r>
 8008436:	b128      	cbz	r0, 8008444 <__smakebuf_r+0x74>
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	f023 0303 	bic.w	r3, r3, #3
 800843e:	f043 0301 	orr.w	r3, r3, #1
 8008442:	81a3      	strh	r3, [r4, #12]
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	431d      	orrs	r5, r3
 8008448:	81a5      	strh	r5, [r4, #12]
 800844a:	e7cd      	b.n	80083e8 <__smakebuf_r+0x18>
 800844c:	08008221 	.word	0x08008221

08008450 <malloc>:
 8008450:	4b02      	ldr	r3, [pc, #8]	; (800845c <malloc+0xc>)
 8008452:	4601      	mov	r1, r0
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	f000 bb45 	b.w	8008ae4 <_malloc_r>
 800845a:	bf00      	nop
 800845c:	20000264 	.word	0x20000264

08008460 <memcpy>:
 8008460:	b510      	push	{r4, lr}
 8008462:	1e43      	subs	r3, r0, #1
 8008464:	440a      	add	r2, r1
 8008466:	4291      	cmp	r1, r2
 8008468:	d100      	bne.n	800846c <memcpy+0xc>
 800846a:	bd10      	pop	{r4, pc}
 800846c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008474:	e7f7      	b.n	8008466 <memcpy+0x6>

08008476 <_Balloc>:
 8008476:	b570      	push	{r4, r5, r6, lr}
 8008478:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800847a:	4604      	mov	r4, r0
 800847c:	460e      	mov	r6, r1
 800847e:	b93d      	cbnz	r5, 8008490 <_Balloc+0x1a>
 8008480:	2010      	movs	r0, #16
 8008482:	f7ff ffe5 	bl	8008450 <malloc>
 8008486:	6260      	str	r0, [r4, #36]	; 0x24
 8008488:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800848c:	6005      	str	r5, [r0, #0]
 800848e:	60c5      	str	r5, [r0, #12]
 8008490:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008492:	68eb      	ldr	r3, [r5, #12]
 8008494:	b183      	cbz	r3, 80084b8 <_Balloc+0x42>
 8008496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800849e:	b9b8      	cbnz	r0, 80084d0 <_Balloc+0x5a>
 80084a0:	2101      	movs	r1, #1
 80084a2:	fa01 f506 	lsl.w	r5, r1, r6
 80084a6:	1d6a      	adds	r2, r5, #5
 80084a8:	0092      	lsls	r2, r2, #2
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 fabe 	bl	8008a2c <_calloc_r>
 80084b0:	b160      	cbz	r0, 80084cc <_Balloc+0x56>
 80084b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80084b6:	e00e      	b.n	80084d6 <_Balloc+0x60>
 80084b8:	2221      	movs	r2, #33	; 0x21
 80084ba:	2104      	movs	r1, #4
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fab5 	bl	8008a2c <_calloc_r>
 80084c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084c4:	60e8      	str	r0, [r5, #12]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e4      	bne.n	8008496 <_Balloc+0x20>
 80084cc:	2000      	movs	r0, #0
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	6802      	ldr	r2, [r0, #0]
 80084d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80084d6:	2300      	movs	r3, #0
 80084d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084dc:	e7f7      	b.n	80084ce <_Balloc+0x58>

080084de <_Bfree>:
 80084de:	b570      	push	{r4, r5, r6, lr}
 80084e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80084e2:	4606      	mov	r6, r0
 80084e4:	460d      	mov	r5, r1
 80084e6:	b93c      	cbnz	r4, 80084f8 <_Bfree+0x1a>
 80084e8:	2010      	movs	r0, #16
 80084ea:	f7ff ffb1 	bl	8008450 <malloc>
 80084ee:	6270      	str	r0, [r6, #36]	; 0x24
 80084f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084f4:	6004      	str	r4, [r0, #0]
 80084f6:	60c4      	str	r4, [r0, #12]
 80084f8:	b13d      	cbz	r5, 800850a <_Bfree+0x2c>
 80084fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80084fc:	686a      	ldr	r2, [r5, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008504:	6029      	str	r1, [r5, #0]
 8008506:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800850a:	bd70      	pop	{r4, r5, r6, pc}

0800850c <__multadd>:
 800850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008510:	690d      	ldr	r5, [r1, #16]
 8008512:	461f      	mov	r7, r3
 8008514:	4606      	mov	r6, r0
 8008516:	460c      	mov	r4, r1
 8008518:	f101 0c14 	add.w	ip, r1, #20
 800851c:	2300      	movs	r3, #0
 800851e:	f8dc 0000 	ldr.w	r0, [ip]
 8008522:	b281      	uxth	r1, r0
 8008524:	fb02 7101 	mla	r1, r2, r1, r7
 8008528:	0c0f      	lsrs	r7, r1, #16
 800852a:	0c00      	lsrs	r0, r0, #16
 800852c:	fb02 7000 	mla	r0, r2, r0, r7
 8008530:	b289      	uxth	r1, r1
 8008532:	3301      	adds	r3, #1
 8008534:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008538:	429d      	cmp	r5, r3
 800853a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800853e:	f84c 1b04 	str.w	r1, [ip], #4
 8008542:	dcec      	bgt.n	800851e <__multadd+0x12>
 8008544:	b1d7      	cbz	r7, 800857c <__multadd+0x70>
 8008546:	68a3      	ldr	r3, [r4, #8]
 8008548:	42ab      	cmp	r3, r5
 800854a:	dc12      	bgt.n	8008572 <__multadd+0x66>
 800854c:	6861      	ldr	r1, [r4, #4]
 800854e:	4630      	mov	r0, r6
 8008550:	3101      	adds	r1, #1
 8008552:	f7ff ff90 	bl	8008476 <_Balloc>
 8008556:	6922      	ldr	r2, [r4, #16]
 8008558:	3202      	adds	r2, #2
 800855a:	f104 010c 	add.w	r1, r4, #12
 800855e:	4680      	mov	r8, r0
 8008560:	0092      	lsls	r2, r2, #2
 8008562:	300c      	adds	r0, #12
 8008564:	f7ff ff7c 	bl	8008460 <memcpy>
 8008568:	4621      	mov	r1, r4
 800856a:	4630      	mov	r0, r6
 800856c:	f7ff ffb7 	bl	80084de <_Bfree>
 8008570:	4644      	mov	r4, r8
 8008572:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008576:	3501      	adds	r5, #1
 8008578:	615f      	str	r7, [r3, #20]
 800857a:	6125      	str	r5, [r4, #16]
 800857c:	4620      	mov	r0, r4
 800857e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008582 <__hi0bits>:
 8008582:	0c02      	lsrs	r2, r0, #16
 8008584:	0412      	lsls	r2, r2, #16
 8008586:	4603      	mov	r3, r0
 8008588:	b9b2      	cbnz	r2, 80085b8 <__hi0bits+0x36>
 800858a:	0403      	lsls	r3, r0, #16
 800858c:	2010      	movs	r0, #16
 800858e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008592:	bf04      	itt	eq
 8008594:	021b      	lsleq	r3, r3, #8
 8008596:	3008      	addeq	r0, #8
 8008598:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800859c:	bf04      	itt	eq
 800859e:	011b      	lsleq	r3, r3, #4
 80085a0:	3004      	addeq	r0, #4
 80085a2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80085a6:	bf04      	itt	eq
 80085a8:	009b      	lsleq	r3, r3, #2
 80085aa:	3002      	addeq	r0, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	db06      	blt.n	80085be <__hi0bits+0x3c>
 80085b0:	005b      	lsls	r3, r3, #1
 80085b2:	d503      	bpl.n	80085bc <__hi0bits+0x3a>
 80085b4:	3001      	adds	r0, #1
 80085b6:	4770      	bx	lr
 80085b8:	2000      	movs	r0, #0
 80085ba:	e7e8      	b.n	800858e <__hi0bits+0xc>
 80085bc:	2020      	movs	r0, #32
 80085be:	4770      	bx	lr

080085c0 <__lo0bits>:
 80085c0:	6803      	ldr	r3, [r0, #0]
 80085c2:	f013 0207 	ands.w	r2, r3, #7
 80085c6:	4601      	mov	r1, r0
 80085c8:	d00b      	beq.n	80085e2 <__lo0bits+0x22>
 80085ca:	07da      	lsls	r2, r3, #31
 80085cc:	d423      	bmi.n	8008616 <__lo0bits+0x56>
 80085ce:	0798      	lsls	r0, r3, #30
 80085d0:	bf49      	itett	mi
 80085d2:	085b      	lsrmi	r3, r3, #1
 80085d4:	089b      	lsrpl	r3, r3, #2
 80085d6:	2001      	movmi	r0, #1
 80085d8:	600b      	strmi	r3, [r1, #0]
 80085da:	bf5c      	itt	pl
 80085dc:	600b      	strpl	r3, [r1, #0]
 80085de:	2002      	movpl	r0, #2
 80085e0:	4770      	bx	lr
 80085e2:	b298      	uxth	r0, r3
 80085e4:	b9a8      	cbnz	r0, 8008612 <__lo0bits+0x52>
 80085e6:	0c1b      	lsrs	r3, r3, #16
 80085e8:	2010      	movs	r0, #16
 80085ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80085ee:	bf04      	itt	eq
 80085f0:	0a1b      	lsreq	r3, r3, #8
 80085f2:	3008      	addeq	r0, #8
 80085f4:	071a      	lsls	r2, r3, #28
 80085f6:	bf04      	itt	eq
 80085f8:	091b      	lsreq	r3, r3, #4
 80085fa:	3004      	addeq	r0, #4
 80085fc:	079a      	lsls	r2, r3, #30
 80085fe:	bf04      	itt	eq
 8008600:	089b      	lsreq	r3, r3, #2
 8008602:	3002      	addeq	r0, #2
 8008604:	07da      	lsls	r2, r3, #31
 8008606:	d402      	bmi.n	800860e <__lo0bits+0x4e>
 8008608:	085b      	lsrs	r3, r3, #1
 800860a:	d006      	beq.n	800861a <__lo0bits+0x5a>
 800860c:	3001      	adds	r0, #1
 800860e:	600b      	str	r3, [r1, #0]
 8008610:	4770      	bx	lr
 8008612:	4610      	mov	r0, r2
 8008614:	e7e9      	b.n	80085ea <__lo0bits+0x2a>
 8008616:	2000      	movs	r0, #0
 8008618:	4770      	bx	lr
 800861a:	2020      	movs	r0, #32
 800861c:	4770      	bx	lr

0800861e <__i2b>:
 800861e:	b510      	push	{r4, lr}
 8008620:	460c      	mov	r4, r1
 8008622:	2101      	movs	r1, #1
 8008624:	f7ff ff27 	bl	8008476 <_Balloc>
 8008628:	2201      	movs	r2, #1
 800862a:	6144      	str	r4, [r0, #20]
 800862c:	6102      	str	r2, [r0, #16]
 800862e:	bd10      	pop	{r4, pc}

08008630 <__multiply>:
 8008630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	4614      	mov	r4, r2
 8008636:	690a      	ldr	r2, [r1, #16]
 8008638:	6923      	ldr	r3, [r4, #16]
 800863a:	429a      	cmp	r2, r3
 800863c:	bfb8      	it	lt
 800863e:	460b      	movlt	r3, r1
 8008640:	4688      	mov	r8, r1
 8008642:	bfbc      	itt	lt
 8008644:	46a0      	movlt	r8, r4
 8008646:	461c      	movlt	r4, r3
 8008648:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800864c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008650:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008654:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008658:	eb07 0609 	add.w	r6, r7, r9
 800865c:	42b3      	cmp	r3, r6
 800865e:	bfb8      	it	lt
 8008660:	3101      	addlt	r1, #1
 8008662:	f7ff ff08 	bl	8008476 <_Balloc>
 8008666:	f100 0514 	add.w	r5, r0, #20
 800866a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800866e:	462b      	mov	r3, r5
 8008670:	2200      	movs	r2, #0
 8008672:	4573      	cmp	r3, lr
 8008674:	d316      	bcc.n	80086a4 <__multiply+0x74>
 8008676:	f104 0214 	add.w	r2, r4, #20
 800867a:	f108 0114 	add.w	r1, r8, #20
 800867e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008682:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	9b00      	ldr	r3, [sp, #0]
 800868a:	9201      	str	r2, [sp, #4]
 800868c:	4293      	cmp	r3, r2
 800868e:	d80c      	bhi.n	80086aa <__multiply+0x7a>
 8008690:	2e00      	cmp	r6, #0
 8008692:	dd03      	ble.n	800869c <__multiply+0x6c>
 8008694:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008698:	2b00      	cmp	r3, #0
 800869a:	d05d      	beq.n	8008758 <__multiply+0x128>
 800869c:	6106      	str	r6, [r0, #16]
 800869e:	b003      	add	sp, #12
 80086a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a4:	f843 2b04 	str.w	r2, [r3], #4
 80086a8:	e7e3      	b.n	8008672 <__multiply+0x42>
 80086aa:	f8b2 b000 	ldrh.w	fp, [r2]
 80086ae:	f1bb 0f00 	cmp.w	fp, #0
 80086b2:	d023      	beq.n	80086fc <__multiply+0xcc>
 80086b4:	4689      	mov	r9, r1
 80086b6:	46ac      	mov	ip, r5
 80086b8:	f04f 0800 	mov.w	r8, #0
 80086bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80086c0:	f8dc a000 	ldr.w	sl, [ip]
 80086c4:	b2a3      	uxth	r3, r4
 80086c6:	fa1f fa8a 	uxth.w	sl, sl
 80086ca:	fb0b a303 	mla	r3, fp, r3, sl
 80086ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80086d2:	f8dc 4000 	ldr.w	r4, [ip]
 80086d6:	4443      	add	r3, r8
 80086d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80086dc:	fb0b 840a 	mla	r4, fp, sl, r8
 80086e0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80086e4:	46e2      	mov	sl, ip
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80086ec:	454f      	cmp	r7, r9
 80086ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80086f2:	f84a 3b04 	str.w	r3, [sl], #4
 80086f6:	d82b      	bhi.n	8008750 <__multiply+0x120>
 80086f8:	f8cc 8004 	str.w	r8, [ip, #4]
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008702:	3204      	adds	r2, #4
 8008704:	f1ba 0f00 	cmp.w	sl, #0
 8008708:	d020      	beq.n	800874c <__multiply+0x11c>
 800870a:	682b      	ldr	r3, [r5, #0]
 800870c:	4689      	mov	r9, r1
 800870e:	46a8      	mov	r8, r5
 8008710:	f04f 0b00 	mov.w	fp, #0
 8008714:	f8b9 c000 	ldrh.w	ip, [r9]
 8008718:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800871c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008720:	445c      	add	r4, fp
 8008722:	46c4      	mov	ip, r8
 8008724:	b29b      	uxth	r3, r3
 8008726:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800872a:	f84c 3b04 	str.w	r3, [ip], #4
 800872e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008732:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008736:	0c1b      	lsrs	r3, r3, #16
 8008738:	fb0a b303 	mla	r3, sl, r3, fp
 800873c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008740:	454f      	cmp	r7, r9
 8008742:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008746:	d805      	bhi.n	8008754 <__multiply+0x124>
 8008748:	f8c8 3004 	str.w	r3, [r8, #4]
 800874c:	3504      	adds	r5, #4
 800874e:	e79b      	b.n	8008688 <__multiply+0x58>
 8008750:	46d4      	mov	ip, sl
 8008752:	e7b3      	b.n	80086bc <__multiply+0x8c>
 8008754:	46e0      	mov	r8, ip
 8008756:	e7dd      	b.n	8008714 <__multiply+0xe4>
 8008758:	3e01      	subs	r6, #1
 800875a:	e799      	b.n	8008690 <__multiply+0x60>

0800875c <__pow5mult>:
 800875c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008760:	4615      	mov	r5, r2
 8008762:	f012 0203 	ands.w	r2, r2, #3
 8008766:	4606      	mov	r6, r0
 8008768:	460f      	mov	r7, r1
 800876a:	d007      	beq.n	800877c <__pow5mult+0x20>
 800876c:	3a01      	subs	r2, #1
 800876e:	4c21      	ldr	r4, [pc, #132]	; (80087f4 <__pow5mult+0x98>)
 8008770:	2300      	movs	r3, #0
 8008772:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008776:	f7ff fec9 	bl	800850c <__multadd>
 800877a:	4607      	mov	r7, r0
 800877c:	10ad      	asrs	r5, r5, #2
 800877e:	d035      	beq.n	80087ec <__pow5mult+0x90>
 8008780:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008782:	b93c      	cbnz	r4, 8008794 <__pow5mult+0x38>
 8008784:	2010      	movs	r0, #16
 8008786:	f7ff fe63 	bl	8008450 <malloc>
 800878a:	6270      	str	r0, [r6, #36]	; 0x24
 800878c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008790:	6004      	str	r4, [r0, #0]
 8008792:	60c4      	str	r4, [r0, #12]
 8008794:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800879c:	b94c      	cbnz	r4, 80087b2 <__pow5mult+0x56>
 800879e:	f240 2171 	movw	r1, #625	; 0x271
 80087a2:	4630      	mov	r0, r6
 80087a4:	f7ff ff3b 	bl	800861e <__i2b>
 80087a8:	2300      	movs	r3, #0
 80087aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80087ae:	4604      	mov	r4, r0
 80087b0:	6003      	str	r3, [r0, #0]
 80087b2:	f04f 0800 	mov.w	r8, #0
 80087b6:	07eb      	lsls	r3, r5, #31
 80087b8:	d50a      	bpl.n	80087d0 <__pow5mult+0x74>
 80087ba:	4639      	mov	r1, r7
 80087bc:	4622      	mov	r2, r4
 80087be:	4630      	mov	r0, r6
 80087c0:	f7ff ff36 	bl	8008630 <__multiply>
 80087c4:	4639      	mov	r1, r7
 80087c6:	4681      	mov	r9, r0
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff fe88 	bl	80084de <_Bfree>
 80087ce:	464f      	mov	r7, r9
 80087d0:	106d      	asrs	r5, r5, #1
 80087d2:	d00b      	beq.n	80087ec <__pow5mult+0x90>
 80087d4:	6820      	ldr	r0, [r4, #0]
 80087d6:	b938      	cbnz	r0, 80087e8 <__pow5mult+0x8c>
 80087d8:	4622      	mov	r2, r4
 80087da:	4621      	mov	r1, r4
 80087dc:	4630      	mov	r0, r6
 80087de:	f7ff ff27 	bl	8008630 <__multiply>
 80087e2:	6020      	str	r0, [r4, #0]
 80087e4:	f8c0 8000 	str.w	r8, [r0]
 80087e8:	4604      	mov	r4, r0
 80087ea:	e7e4      	b.n	80087b6 <__pow5mult+0x5a>
 80087ec:	4638      	mov	r0, r7
 80087ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f2:	bf00      	nop
 80087f4:	080091c8 	.word	0x080091c8

080087f8 <__lshift>:
 80087f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087fc:	460c      	mov	r4, r1
 80087fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	6849      	ldr	r1, [r1, #4]
 8008806:	eb0a 0903 	add.w	r9, sl, r3
 800880a:	68a3      	ldr	r3, [r4, #8]
 800880c:	4607      	mov	r7, r0
 800880e:	4616      	mov	r6, r2
 8008810:	f109 0501 	add.w	r5, r9, #1
 8008814:	42ab      	cmp	r3, r5
 8008816:	db32      	blt.n	800887e <__lshift+0x86>
 8008818:	4638      	mov	r0, r7
 800881a:	f7ff fe2c 	bl	8008476 <_Balloc>
 800881e:	2300      	movs	r3, #0
 8008820:	4680      	mov	r8, r0
 8008822:	f100 0114 	add.w	r1, r0, #20
 8008826:	461a      	mov	r2, r3
 8008828:	4553      	cmp	r3, sl
 800882a:	db2b      	blt.n	8008884 <__lshift+0x8c>
 800882c:	6920      	ldr	r0, [r4, #16]
 800882e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008832:	f104 0314 	add.w	r3, r4, #20
 8008836:	f016 021f 	ands.w	r2, r6, #31
 800883a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800883e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008842:	d025      	beq.n	8008890 <__lshift+0x98>
 8008844:	f1c2 0e20 	rsb	lr, r2, #32
 8008848:	2000      	movs	r0, #0
 800884a:	681e      	ldr	r6, [r3, #0]
 800884c:	468a      	mov	sl, r1
 800884e:	4096      	lsls	r6, r2
 8008850:	4330      	orrs	r0, r6
 8008852:	f84a 0b04 	str.w	r0, [sl], #4
 8008856:	f853 0b04 	ldr.w	r0, [r3], #4
 800885a:	459c      	cmp	ip, r3
 800885c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008860:	d814      	bhi.n	800888c <__lshift+0x94>
 8008862:	6048      	str	r0, [r1, #4]
 8008864:	b108      	cbz	r0, 800886a <__lshift+0x72>
 8008866:	f109 0502 	add.w	r5, r9, #2
 800886a:	3d01      	subs	r5, #1
 800886c:	4638      	mov	r0, r7
 800886e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008872:	4621      	mov	r1, r4
 8008874:	f7ff fe33 	bl	80084de <_Bfree>
 8008878:	4640      	mov	r0, r8
 800887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887e:	3101      	adds	r1, #1
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	e7c7      	b.n	8008814 <__lshift+0x1c>
 8008884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008888:	3301      	adds	r3, #1
 800888a:	e7cd      	b.n	8008828 <__lshift+0x30>
 800888c:	4651      	mov	r1, sl
 800888e:	e7dc      	b.n	800884a <__lshift+0x52>
 8008890:	3904      	subs	r1, #4
 8008892:	f853 2b04 	ldr.w	r2, [r3], #4
 8008896:	f841 2f04 	str.w	r2, [r1, #4]!
 800889a:	459c      	cmp	ip, r3
 800889c:	d8f9      	bhi.n	8008892 <__lshift+0x9a>
 800889e:	e7e4      	b.n	800886a <__lshift+0x72>

080088a0 <__mcmp>:
 80088a0:	6903      	ldr	r3, [r0, #16]
 80088a2:	690a      	ldr	r2, [r1, #16]
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	b530      	push	{r4, r5, lr}
 80088a8:	d10c      	bne.n	80088c4 <__mcmp+0x24>
 80088aa:	0092      	lsls	r2, r2, #2
 80088ac:	3014      	adds	r0, #20
 80088ae:	3114      	adds	r1, #20
 80088b0:	1884      	adds	r4, r0, r2
 80088b2:	4411      	add	r1, r2
 80088b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088bc:	4295      	cmp	r5, r2
 80088be:	d003      	beq.n	80088c8 <__mcmp+0x28>
 80088c0:	d305      	bcc.n	80088ce <__mcmp+0x2e>
 80088c2:	2301      	movs	r3, #1
 80088c4:	4618      	mov	r0, r3
 80088c6:	bd30      	pop	{r4, r5, pc}
 80088c8:	42a0      	cmp	r0, r4
 80088ca:	d3f3      	bcc.n	80088b4 <__mcmp+0x14>
 80088cc:	e7fa      	b.n	80088c4 <__mcmp+0x24>
 80088ce:	f04f 33ff 	mov.w	r3, #4294967295
 80088d2:	e7f7      	b.n	80088c4 <__mcmp+0x24>

080088d4 <__mdiff>:
 80088d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d8:	460d      	mov	r5, r1
 80088da:	4607      	mov	r7, r0
 80088dc:	4611      	mov	r1, r2
 80088de:	4628      	mov	r0, r5
 80088e0:	4614      	mov	r4, r2
 80088e2:	f7ff ffdd 	bl	80088a0 <__mcmp>
 80088e6:	1e06      	subs	r6, r0, #0
 80088e8:	d108      	bne.n	80088fc <__mdiff+0x28>
 80088ea:	4631      	mov	r1, r6
 80088ec:	4638      	mov	r0, r7
 80088ee:	f7ff fdc2 	bl	8008476 <_Balloc>
 80088f2:	2301      	movs	r3, #1
 80088f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80088f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fc:	bfa4      	itt	ge
 80088fe:	4623      	movge	r3, r4
 8008900:	462c      	movge	r4, r5
 8008902:	4638      	mov	r0, r7
 8008904:	6861      	ldr	r1, [r4, #4]
 8008906:	bfa6      	itte	ge
 8008908:	461d      	movge	r5, r3
 800890a:	2600      	movge	r6, #0
 800890c:	2601      	movlt	r6, #1
 800890e:	f7ff fdb2 	bl	8008476 <_Balloc>
 8008912:	692b      	ldr	r3, [r5, #16]
 8008914:	60c6      	str	r6, [r0, #12]
 8008916:	6926      	ldr	r6, [r4, #16]
 8008918:	f105 0914 	add.w	r9, r5, #20
 800891c:	f104 0214 	add.w	r2, r4, #20
 8008920:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008924:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008928:	f100 0514 	add.w	r5, r0, #20
 800892c:	f04f 0e00 	mov.w	lr, #0
 8008930:	f852 ab04 	ldr.w	sl, [r2], #4
 8008934:	f859 4b04 	ldr.w	r4, [r9], #4
 8008938:	fa1e f18a 	uxtah	r1, lr, sl
 800893c:	b2a3      	uxth	r3, r4
 800893e:	1ac9      	subs	r1, r1, r3
 8008940:	0c23      	lsrs	r3, r4, #16
 8008942:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008946:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800894a:	b289      	uxth	r1, r1
 800894c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008950:	45c8      	cmp	r8, r9
 8008952:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008956:	4694      	mov	ip, r2
 8008958:	f845 3b04 	str.w	r3, [r5], #4
 800895c:	d8e8      	bhi.n	8008930 <__mdiff+0x5c>
 800895e:	45bc      	cmp	ip, r7
 8008960:	d304      	bcc.n	800896c <__mdiff+0x98>
 8008962:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008966:	b183      	cbz	r3, 800898a <__mdiff+0xb6>
 8008968:	6106      	str	r6, [r0, #16]
 800896a:	e7c5      	b.n	80088f8 <__mdiff+0x24>
 800896c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008970:	fa1e f381 	uxtah	r3, lr, r1
 8008974:	141a      	asrs	r2, r3, #16
 8008976:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800897a:	b29b      	uxth	r3, r3
 800897c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008980:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008984:	f845 3b04 	str.w	r3, [r5], #4
 8008988:	e7e9      	b.n	800895e <__mdiff+0x8a>
 800898a:	3e01      	subs	r6, #1
 800898c:	e7e9      	b.n	8008962 <__mdiff+0x8e>

0800898e <__d2b>:
 800898e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008992:	460e      	mov	r6, r1
 8008994:	2101      	movs	r1, #1
 8008996:	ec59 8b10 	vmov	r8, r9, d0
 800899a:	4615      	mov	r5, r2
 800899c:	f7ff fd6b 	bl	8008476 <_Balloc>
 80089a0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80089a4:	4607      	mov	r7, r0
 80089a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089aa:	bb34      	cbnz	r4, 80089fa <__d2b+0x6c>
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	f1b8 0300 	subs.w	r3, r8, #0
 80089b2:	d027      	beq.n	8008a04 <__d2b+0x76>
 80089b4:	a802      	add	r0, sp, #8
 80089b6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80089ba:	f7ff fe01 	bl	80085c0 <__lo0bits>
 80089be:	9900      	ldr	r1, [sp, #0]
 80089c0:	b1f0      	cbz	r0, 8008a00 <__d2b+0x72>
 80089c2:	9a01      	ldr	r2, [sp, #4]
 80089c4:	f1c0 0320 	rsb	r3, r0, #32
 80089c8:	fa02 f303 	lsl.w	r3, r2, r3
 80089cc:	430b      	orrs	r3, r1
 80089ce:	40c2      	lsrs	r2, r0
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	9201      	str	r2, [sp, #4]
 80089d4:	9b01      	ldr	r3, [sp, #4]
 80089d6:	61bb      	str	r3, [r7, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bf14      	ite	ne
 80089dc:	2102      	movne	r1, #2
 80089de:	2101      	moveq	r1, #1
 80089e0:	6139      	str	r1, [r7, #16]
 80089e2:	b1c4      	cbz	r4, 8008a16 <__d2b+0x88>
 80089e4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80089e8:	4404      	add	r4, r0
 80089ea:	6034      	str	r4, [r6, #0]
 80089ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80089f0:	6028      	str	r0, [r5, #0]
 80089f2:	4638      	mov	r0, r7
 80089f4:	b003      	add	sp, #12
 80089f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089fe:	e7d5      	b.n	80089ac <__d2b+0x1e>
 8008a00:	6179      	str	r1, [r7, #20]
 8008a02:	e7e7      	b.n	80089d4 <__d2b+0x46>
 8008a04:	a801      	add	r0, sp, #4
 8008a06:	f7ff fddb 	bl	80085c0 <__lo0bits>
 8008a0a:	9b01      	ldr	r3, [sp, #4]
 8008a0c:	617b      	str	r3, [r7, #20]
 8008a0e:	2101      	movs	r1, #1
 8008a10:	6139      	str	r1, [r7, #16]
 8008a12:	3020      	adds	r0, #32
 8008a14:	e7e5      	b.n	80089e2 <__d2b+0x54>
 8008a16:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008a1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a1e:	6030      	str	r0, [r6, #0]
 8008a20:	6918      	ldr	r0, [r3, #16]
 8008a22:	f7ff fdae 	bl	8008582 <__hi0bits>
 8008a26:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008a2a:	e7e1      	b.n	80089f0 <__d2b+0x62>

08008a2c <_calloc_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	fb02 f401 	mul.w	r4, r2, r1
 8008a32:	4621      	mov	r1, r4
 8008a34:	f000 f856 	bl	8008ae4 <_malloc_r>
 8008a38:	4605      	mov	r5, r0
 8008a3a:	b118      	cbz	r0, 8008a44 <_calloc_r+0x18>
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	2100      	movs	r1, #0
 8008a40:	f7fd fe85 	bl	800674e <memset>
 8008a44:	4628      	mov	r0, r5
 8008a46:	bd38      	pop	{r3, r4, r5, pc}

08008a48 <_free_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	2900      	cmp	r1, #0
 8008a4e:	d045      	beq.n	8008adc <_free_r+0x94>
 8008a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a54:	1f0c      	subs	r4, r1, #4
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bfb8      	it	lt
 8008a5a:	18e4      	addlt	r4, r4, r3
 8008a5c:	f000 fa98 	bl	8008f90 <__malloc_lock>
 8008a60:	4a1f      	ldr	r2, [pc, #124]	; (8008ae0 <_free_r+0x98>)
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	4610      	mov	r0, r2
 8008a66:	b933      	cbnz	r3, 8008a76 <_free_r+0x2e>
 8008a68:	6063      	str	r3, [r4, #4]
 8008a6a:	6014      	str	r4, [r2, #0]
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a72:	f000 ba8e 	b.w	8008f92 <__malloc_unlock>
 8008a76:	42a3      	cmp	r3, r4
 8008a78:	d90c      	bls.n	8008a94 <_free_r+0x4c>
 8008a7a:	6821      	ldr	r1, [r4, #0]
 8008a7c:	1862      	adds	r2, r4, r1
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	bf04      	itt	eq
 8008a82:	681a      	ldreq	r2, [r3, #0]
 8008a84:	685b      	ldreq	r3, [r3, #4]
 8008a86:	6063      	str	r3, [r4, #4]
 8008a88:	bf04      	itt	eq
 8008a8a:	1852      	addeq	r2, r2, r1
 8008a8c:	6022      	streq	r2, [r4, #0]
 8008a8e:	6004      	str	r4, [r0, #0]
 8008a90:	e7ec      	b.n	8008a6c <_free_r+0x24>
 8008a92:	4613      	mov	r3, r2
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	b10a      	cbz	r2, 8008a9c <_free_r+0x54>
 8008a98:	42a2      	cmp	r2, r4
 8008a9a:	d9fa      	bls.n	8008a92 <_free_r+0x4a>
 8008a9c:	6819      	ldr	r1, [r3, #0]
 8008a9e:	1858      	adds	r0, r3, r1
 8008aa0:	42a0      	cmp	r0, r4
 8008aa2:	d10b      	bne.n	8008abc <_free_r+0x74>
 8008aa4:	6820      	ldr	r0, [r4, #0]
 8008aa6:	4401      	add	r1, r0
 8008aa8:	1858      	adds	r0, r3, r1
 8008aaa:	4282      	cmp	r2, r0
 8008aac:	6019      	str	r1, [r3, #0]
 8008aae:	d1dd      	bne.n	8008a6c <_free_r+0x24>
 8008ab0:	6810      	ldr	r0, [r2, #0]
 8008ab2:	6852      	ldr	r2, [r2, #4]
 8008ab4:	605a      	str	r2, [r3, #4]
 8008ab6:	4401      	add	r1, r0
 8008ab8:	6019      	str	r1, [r3, #0]
 8008aba:	e7d7      	b.n	8008a6c <_free_r+0x24>
 8008abc:	d902      	bls.n	8008ac4 <_free_r+0x7c>
 8008abe:	230c      	movs	r3, #12
 8008ac0:	602b      	str	r3, [r5, #0]
 8008ac2:	e7d3      	b.n	8008a6c <_free_r+0x24>
 8008ac4:	6820      	ldr	r0, [r4, #0]
 8008ac6:	1821      	adds	r1, r4, r0
 8008ac8:	428a      	cmp	r2, r1
 8008aca:	bf04      	itt	eq
 8008acc:	6811      	ldreq	r1, [r2, #0]
 8008ace:	6852      	ldreq	r2, [r2, #4]
 8008ad0:	6062      	str	r2, [r4, #4]
 8008ad2:	bf04      	itt	eq
 8008ad4:	1809      	addeq	r1, r1, r0
 8008ad6:	6021      	streq	r1, [r4, #0]
 8008ad8:	605c      	str	r4, [r3, #4]
 8008ada:	e7c7      	b.n	8008a6c <_free_r+0x24>
 8008adc:	bd38      	pop	{r3, r4, r5, pc}
 8008ade:	bf00      	nop
 8008ae0:	20000478 	.word	0x20000478

08008ae4 <_malloc_r>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	1ccd      	adds	r5, r1, #3
 8008ae8:	f025 0503 	bic.w	r5, r5, #3
 8008aec:	3508      	adds	r5, #8
 8008aee:	2d0c      	cmp	r5, #12
 8008af0:	bf38      	it	cc
 8008af2:	250c      	movcc	r5, #12
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	4606      	mov	r6, r0
 8008af8:	db01      	blt.n	8008afe <_malloc_r+0x1a>
 8008afa:	42a9      	cmp	r1, r5
 8008afc:	d903      	bls.n	8008b06 <_malloc_r+0x22>
 8008afe:	230c      	movs	r3, #12
 8008b00:	6033      	str	r3, [r6, #0]
 8008b02:	2000      	movs	r0, #0
 8008b04:	bd70      	pop	{r4, r5, r6, pc}
 8008b06:	f000 fa43 	bl	8008f90 <__malloc_lock>
 8008b0a:	4a21      	ldr	r2, [pc, #132]	; (8008b90 <_malloc_r+0xac>)
 8008b0c:	6814      	ldr	r4, [r2, #0]
 8008b0e:	4621      	mov	r1, r4
 8008b10:	b991      	cbnz	r1, 8008b38 <_malloc_r+0x54>
 8008b12:	4c20      	ldr	r4, [pc, #128]	; (8008b94 <_malloc_r+0xb0>)
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	b91b      	cbnz	r3, 8008b20 <_malloc_r+0x3c>
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f000 f97d 	bl	8008e18 <_sbrk_r>
 8008b1e:	6020      	str	r0, [r4, #0]
 8008b20:	4629      	mov	r1, r5
 8008b22:	4630      	mov	r0, r6
 8008b24:	f000 f978 	bl	8008e18 <_sbrk_r>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d124      	bne.n	8008b76 <_malloc_r+0x92>
 8008b2c:	230c      	movs	r3, #12
 8008b2e:	6033      	str	r3, [r6, #0]
 8008b30:	4630      	mov	r0, r6
 8008b32:	f000 fa2e 	bl	8008f92 <__malloc_unlock>
 8008b36:	e7e4      	b.n	8008b02 <_malloc_r+0x1e>
 8008b38:	680b      	ldr	r3, [r1, #0]
 8008b3a:	1b5b      	subs	r3, r3, r5
 8008b3c:	d418      	bmi.n	8008b70 <_malloc_r+0x8c>
 8008b3e:	2b0b      	cmp	r3, #11
 8008b40:	d90f      	bls.n	8008b62 <_malloc_r+0x7e>
 8008b42:	600b      	str	r3, [r1, #0]
 8008b44:	50cd      	str	r5, [r1, r3]
 8008b46:	18cc      	adds	r4, r1, r3
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f000 fa22 	bl	8008f92 <__malloc_unlock>
 8008b4e:	f104 000b 	add.w	r0, r4, #11
 8008b52:	1d23      	adds	r3, r4, #4
 8008b54:	f020 0007 	bic.w	r0, r0, #7
 8008b58:	1ac3      	subs	r3, r0, r3
 8008b5a:	d0d3      	beq.n	8008b04 <_malloc_r+0x20>
 8008b5c:	425a      	negs	r2, r3
 8008b5e:	50e2      	str	r2, [r4, r3]
 8008b60:	e7d0      	b.n	8008b04 <_malloc_r+0x20>
 8008b62:	428c      	cmp	r4, r1
 8008b64:	684b      	ldr	r3, [r1, #4]
 8008b66:	bf16      	itet	ne
 8008b68:	6063      	strne	r3, [r4, #4]
 8008b6a:	6013      	streq	r3, [r2, #0]
 8008b6c:	460c      	movne	r4, r1
 8008b6e:	e7eb      	b.n	8008b48 <_malloc_r+0x64>
 8008b70:	460c      	mov	r4, r1
 8008b72:	6849      	ldr	r1, [r1, #4]
 8008b74:	e7cc      	b.n	8008b10 <_malloc_r+0x2c>
 8008b76:	1cc4      	adds	r4, r0, #3
 8008b78:	f024 0403 	bic.w	r4, r4, #3
 8008b7c:	42a0      	cmp	r0, r4
 8008b7e:	d005      	beq.n	8008b8c <_malloc_r+0xa8>
 8008b80:	1a21      	subs	r1, r4, r0
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f948 	bl	8008e18 <_sbrk_r>
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d0cf      	beq.n	8008b2c <_malloc_r+0x48>
 8008b8c:	6025      	str	r5, [r4, #0]
 8008b8e:	e7db      	b.n	8008b48 <_malloc_r+0x64>
 8008b90:	20000478 	.word	0x20000478
 8008b94:	2000047c 	.word	0x2000047c

08008b98 <__sfputc_r>:
 8008b98:	6893      	ldr	r3, [r2, #8]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	b410      	push	{r4}
 8008ba0:	6093      	str	r3, [r2, #8]
 8008ba2:	da08      	bge.n	8008bb6 <__sfputc_r+0x1e>
 8008ba4:	6994      	ldr	r4, [r2, #24]
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	db01      	blt.n	8008bae <__sfputc_r+0x16>
 8008baa:	290a      	cmp	r1, #10
 8008bac:	d103      	bne.n	8008bb6 <__sfputc_r+0x1e>
 8008bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bb2:	f7fe bb5b 	b.w	800726c <__swbuf_r>
 8008bb6:	6813      	ldr	r3, [r2, #0]
 8008bb8:	1c58      	adds	r0, r3, #1
 8008bba:	6010      	str	r0, [r2, #0]
 8008bbc:	7019      	strb	r1, [r3, #0]
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <__sfputs_r>:
 8008bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc8:	4606      	mov	r6, r0
 8008bca:	460f      	mov	r7, r1
 8008bcc:	4614      	mov	r4, r2
 8008bce:	18d5      	adds	r5, r2, r3
 8008bd0:	42ac      	cmp	r4, r5
 8008bd2:	d101      	bne.n	8008bd8 <__sfputs_r+0x12>
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	e007      	b.n	8008be8 <__sfputs_r+0x22>
 8008bd8:	463a      	mov	r2, r7
 8008bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff ffda 	bl	8008b98 <__sfputc_r>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	d1f3      	bne.n	8008bd0 <__sfputs_r+0xa>
 8008be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bec <_vfiprintf_r>:
 8008bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	b09d      	sub	sp, #116	; 0x74
 8008bf4:	4617      	mov	r7, r2
 8008bf6:	461d      	mov	r5, r3
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	b118      	cbz	r0, 8008c04 <_vfiprintf_r+0x18>
 8008bfc:	6983      	ldr	r3, [r0, #24]
 8008bfe:	b90b      	cbnz	r3, 8008c04 <_vfiprintf_r+0x18>
 8008c00:	f7ff fb2a 	bl	8008258 <__sinit>
 8008c04:	4b7c      	ldr	r3, [pc, #496]	; (8008df8 <_vfiprintf_r+0x20c>)
 8008c06:	429c      	cmp	r4, r3
 8008c08:	d158      	bne.n	8008cbc <_vfiprintf_r+0xd0>
 8008c0a:	6874      	ldr	r4, [r6, #4]
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	0718      	lsls	r0, r3, #28
 8008c10:	d55e      	bpl.n	8008cd0 <_vfiprintf_r+0xe4>
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d05b      	beq.n	8008cd0 <_vfiprintf_r+0xe4>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1c:	2320      	movs	r3, #32
 8008c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c22:	2330      	movs	r3, #48	; 0x30
 8008c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c28:	9503      	str	r5, [sp, #12]
 8008c2a:	f04f 0b01 	mov.w	fp, #1
 8008c2e:	46b8      	mov	r8, r7
 8008c30:	4645      	mov	r5, r8
 8008c32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c36:	b10b      	cbz	r3, 8008c3c <_vfiprintf_r+0x50>
 8008c38:	2b25      	cmp	r3, #37	; 0x25
 8008c3a:	d154      	bne.n	8008ce6 <_vfiprintf_r+0xfa>
 8008c3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008c40:	d00b      	beq.n	8008c5a <_vfiprintf_r+0x6e>
 8008c42:	4653      	mov	r3, sl
 8008c44:	463a      	mov	r2, r7
 8008c46:	4621      	mov	r1, r4
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff ffbc 	bl	8008bc6 <__sfputs_r>
 8008c4e:	3001      	adds	r0, #1
 8008c50:	f000 80c2 	beq.w	8008dd8 <_vfiprintf_r+0x1ec>
 8008c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c56:	4453      	add	r3, sl
 8008c58:	9309      	str	r3, [sp, #36]	; 0x24
 8008c5a:	f898 3000 	ldrb.w	r3, [r8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 80ba 	beq.w	8008dd8 <_vfiprintf_r+0x1ec>
 8008c64:	2300      	movs	r3, #0
 8008c66:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c6e:	9304      	str	r3, [sp, #16]
 8008c70:	9307      	str	r3, [sp, #28]
 8008c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c76:	931a      	str	r3, [sp, #104]	; 0x68
 8008c78:	46a8      	mov	r8, r5
 8008c7a:	2205      	movs	r2, #5
 8008c7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008c80:	485e      	ldr	r0, [pc, #376]	; (8008dfc <_vfiprintf_r+0x210>)
 8008c82:	f7f7 faad 	bl	80001e0 <memchr>
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	bb78      	cbnz	r0, 8008cea <_vfiprintf_r+0xfe>
 8008c8a:	06d9      	lsls	r1, r3, #27
 8008c8c:	bf44      	itt	mi
 8008c8e:	2220      	movmi	r2, #32
 8008c90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c94:	071a      	lsls	r2, r3, #28
 8008c96:	bf44      	itt	mi
 8008c98:	222b      	movmi	r2, #43	; 0x2b
 8008c9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c9e:	782a      	ldrb	r2, [r5, #0]
 8008ca0:	2a2a      	cmp	r2, #42	; 0x2a
 8008ca2:	d02a      	beq.n	8008cfa <_vfiprintf_r+0x10e>
 8008ca4:	9a07      	ldr	r2, [sp, #28]
 8008ca6:	46a8      	mov	r8, r5
 8008ca8:	2000      	movs	r0, #0
 8008caa:	250a      	movs	r5, #10
 8008cac:	4641      	mov	r1, r8
 8008cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cb2:	3b30      	subs	r3, #48	; 0x30
 8008cb4:	2b09      	cmp	r3, #9
 8008cb6:	d969      	bls.n	8008d8c <_vfiprintf_r+0x1a0>
 8008cb8:	b360      	cbz	r0, 8008d14 <_vfiprintf_r+0x128>
 8008cba:	e024      	b.n	8008d06 <_vfiprintf_r+0x11a>
 8008cbc:	4b50      	ldr	r3, [pc, #320]	; (8008e00 <_vfiprintf_r+0x214>)
 8008cbe:	429c      	cmp	r4, r3
 8008cc0:	d101      	bne.n	8008cc6 <_vfiprintf_r+0xda>
 8008cc2:	68b4      	ldr	r4, [r6, #8]
 8008cc4:	e7a2      	b.n	8008c0c <_vfiprintf_r+0x20>
 8008cc6:	4b4f      	ldr	r3, [pc, #316]	; (8008e04 <_vfiprintf_r+0x218>)
 8008cc8:	429c      	cmp	r4, r3
 8008cca:	bf08      	it	eq
 8008ccc:	68f4      	ldreq	r4, [r6, #12]
 8008cce:	e79d      	b.n	8008c0c <_vfiprintf_r+0x20>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f7fe fb1c 	bl	8007310 <__swsetup_r>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d09d      	beq.n	8008c18 <_vfiprintf_r+0x2c>
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	b01d      	add	sp, #116	; 0x74
 8008ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce6:	46a8      	mov	r8, r5
 8008ce8:	e7a2      	b.n	8008c30 <_vfiprintf_r+0x44>
 8008cea:	4a44      	ldr	r2, [pc, #272]	; (8008dfc <_vfiprintf_r+0x210>)
 8008cec:	1a80      	subs	r0, r0, r2
 8008cee:	fa0b f000 	lsl.w	r0, fp, r0
 8008cf2:	4318      	orrs	r0, r3
 8008cf4:	9004      	str	r0, [sp, #16]
 8008cf6:	4645      	mov	r5, r8
 8008cf8:	e7be      	b.n	8008c78 <_vfiprintf_r+0x8c>
 8008cfa:	9a03      	ldr	r2, [sp, #12]
 8008cfc:	1d11      	adds	r1, r2, #4
 8008cfe:	6812      	ldr	r2, [r2, #0]
 8008d00:	9103      	str	r1, [sp, #12]
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	db01      	blt.n	8008d0a <_vfiprintf_r+0x11e>
 8008d06:	9207      	str	r2, [sp, #28]
 8008d08:	e004      	b.n	8008d14 <_vfiprintf_r+0x128>
 8008d0a:	4252      	negs	r2, r2
 8008d0c:	f043 0302 	orr.w	r3, r3, #2
 8008d10:	9207      	str	r2, [sp, #28]
 8008d12:	9304      	str	r3, [sp, #16]
 8008d14:	f898 3000 	ldrb.w	r3, [r8]
 8008d18:	2b2e      	cmp	r3, #46	; 0x2e
 8008d1a:	d10e      	bne.n	8008d3a <_vfiprintf_r+0x14e>
 8008d1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008d20:	2b2a      	cmp	r3, #42	; 0x2a
 8008d22:	d138      	bne.n	8008d96 <_vfiprintf_r+0x1aa>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	1d1a      	adds	r2, r3, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	9203      	str	r2, [sp, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bfb8      	it	lt
 8008d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d34:	f108 0802 	add.w	r8, r8, #2
 8008d38:	9305      	str	r3, [sp, #20]
 8008d3a:	4d33      	ldr	r5, [pc, #204]	; (8008e08 <_vfiprintf_r+0x21c>)
 8008d3c:	f898 1000 	ldrb.w	r1, [r8]
 8008d40:	2203      	movs	r2, #3
 8008d42:	4628      	mov	r0, r5
 8008d44:	f7f7 fa4c 	bl	80001e0 <memchr>
 8008d48:	b140      	cbz	r0, 8008d5c <_vfiprintf_r+0x170>
 8008d4a:	2340      	movs	r3, #64	; 0x40
 8008d4c:	1b40      	subs	r0, r0, r5
 8008d4e:	fa03 f000 	lsl.w	r0, r3, r0
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	4303      	orrs	r3, r0
 8008d56:	f108 0801 	add.w	r8, r8, #1
 8008d5a:	9304      	str	r3, [sp, #16]
 8008d5c:	f898 1000 	ldrb.w	r1, [r8]
 8008d60:	482a      	ldr	r0, [pc, #168]	; (8008e0c <_vfiprintf_r+0x220>)
 8008d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d66:	2206      	movs	r2, #6
 8008d68:	f108 0701 	add.w	r7, r8, #1
 8008d6c:	f7f7 fa38 	bl	80001e0 <memchr>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d037      	beq.n	8008de4 <_vfiprintf_r+0x1f8>
 8008d74:	4b26      	ldr	r3, [pc, #152]	; (8008e10 <_vfiprintf_r+0x224>)
 8008d76:	bb1b      	cbnz	r3, 8008dc0 <_vfiprintf_r+0x1d4>
 8008d78:	9b03      	ldr	r3, [sp, #12]
 8008d7a:	3307      	adds	r3, #7
 8008d7c:	f023 0307 	bic.w	r3, r3, #7
 8008d80:	3308      	adds	r3, #8
 8008d82:	9303      	str	r3, [sp, #12]
 8008d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d86:	444b      	add	r3, r9
 8008d88:	9309      	str	r3, [sp, #36]	; 0x24
 8008d8a:	e750      	b.n	8008c2e <_vfiprintf_r+0x42>
 8008d8c:	fb05 3202 	mla	r2, r5, r2, r3
 8008d90:	2001      	movs	r0, #1
 8008d92:	4688      	mov	r8, r1
 8008d94:	e78a      	b.n	8008cac <_vfiprintf_r+0xc0>
 8008d96:	2300      	movs	r3, #0
 8008d98:	f108 0801 	add.w	r8, r8, #1
 8008d9c:	9305      	str	r3, [sp, #20]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	250a      	movs	r5, #10
 8008da2:	4640      	mov	r0, r8
 8008da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008da8:	3a30      	subs	r2, #48	; 0x30
 8008daa:	2a09      	cmp	r2, #9
 8008dac:	d903      	bls.n	8008db6 <_vfiprintf_r+0x1ca>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0c3      	beq.n	8008d3a <_vfiprintf_r+0x14e>
 8008db2:	9105      	str	r1, [sp, #20]
 8008db4:	e7c1      	b.n	8008d3a <_vfiprintf_r+0x14e>
 8008db6:	fb05 2101 	mla	r1, r5, r1, r2
 8008dba:	2301      	movs	r3, #1
 8008dbc:	4680      	mov	r8, r0
 8008dbe:	e7f0      	b.n	8008da2 <_vfiprintf_r+0x1b6>
 8008dc0:	ab03      	add	r3, sp, #12
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	4b13      	ldr	r3, [pc, #76]	; (8008e14 <_vfiprintf_r+0x228>)
 8008dc8:	a904      	add	r1, sp, #16
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f7fd fd5c 	bl	8006888 <_printf_float>
 8008dd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008dd4:	4681      	mov	r9, r0
 8008dd6:	d1d5      	bne.n	8008d84 <_vfiprintf_r+0x198>
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	065b      	lsls	r3, r3, #25
 8008ddc:	f53f af7e 	bmi.w	8008cdc <_vfiprintf_r+0xf0>
 8008de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008de2:	e77d      	b.n	8008ce0 <_vfiprintf_r+0xf4>
 8008de4:	ab03      	add	r3, sp, #12
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	4622      	mov	r2, r4
 8008dea:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <_vfiprintf_r+0x228>)
 8008dec:	a904      	add	r1, sp, #16
 8008dee:	4630      	mov	r0, r6
 8008df0:	f7fe f800 	bl	8006df4 <_printf_i>
 8008df4:	e7ec      	b.n	8008dd0 <_vfiprintf_r+0x1e4>
 8008df6:	bf00      	nop
 8008df8:	08009098 	.word	0x08009098
 8008dfc:	080091d4 	.word	0x080091d4
 8008e00:	080090b8 	.word	0x080090b8
 8008e04:	08009078 	.word	0x08009078
 8008e08:	080091da 	.word	0x080091da
 8008e0c:	080091de 	.word	0x080091de
 8008e10:	08006889 	.word	0x08006889
 8008e14:	08008bc7 	.word	0x08008bc7

08008e18 <_sbrk_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4c06      	ldr	r4, [pc, #24]	; (8008e34 <_sbrk_r+0x1c>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4605      	mov	r5, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	6023      	str	r3, [r4, #0]
 8008e24:	f7f9 fc22 	bl	800266c <_sbrk>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_sbrk_r+0x1a>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_sbrk_r+0x1a>
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	20000b70 	.word	0x20000b70

08008e38 <__sread>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e40:	f000 f8a8 	bl	8008f94 <_read_r>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	bfab      	itete	ge
 8008e48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e4c:	181b      	addge	r3, r3, r0
 8008e4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e52:	bfac      	ite	ge
 8008e54:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e56:	81a3      	strhlt	r3, [r4, #12]
 8008e58:	bd10      	pop	{r4, pc}

08008e5a <__swrite>:
 8008e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5e:	461f      	mov	r7, r3
 8008e60:	898b      	ldrh	r3, [r1, #12]
 8008e62:	05db      	lsls	r3, r3, #23
 8008e64:	4605      	mov	r5, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	4616      	mov	r6, r2
 8008e6a:	d505      	bpl.n	8008e78 <__swrite+0x1e>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e74:	f000 f868 	bl	8008f48 <_lseek_r>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	4632      	mov	r2, r6
 8008e86:	463b      	mov	r3, r7
 8008e88:	4628      	mov	r0, r5
 8008e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8e:	f000 b817 	b.w	8008ec0 <_write_r>

08008e92 <__sseek>:
 8008e92:	b510      	push	{r4, lr}
 8008e94:	460c      	mov	r4, r1
 8008e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9a:	f000 f855 	bl	8008f48 <_lseek_r>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	bf15      	itete	ne
 8008ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008eae:	81a3      	strheq	r3, [r4, #12]
 8008eb0:	bf18      	it	ne
 8008eb2:	81a3      	strhne	r3, [r4, #12]
 8008eb4:	bd10      	pop	{r4, pc}

08008eb6 <__sclose>:
 8008eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eba:	f000 b813 	b.w	8008ee4 <_close_r>
	...

08008ec0 <_write_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4c07      	ldr	r4, [pc, #28]	; (8008ee0 <_write_r+0x20>)
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	4611      	mov	r1, r2
 8008eca:	2200      	movs	r2, #0
 8008ecc:	6022      	str	r2, [r4, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f7f8 f826 	bl	8000f20 <_write>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d102      	bne.n	8008ede <_write_r+0x1e>
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	b103      	cbz	r3, 8008ede <_write_r+0x1e>
 8008edc:	602b      	str	r3, [r5, #0]
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	20000b70 	.word	0x20000b70

08008ee4 <_close_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4c06      	ldr	r4, [pc, #24]	; (8008f00 <_close_r+0x1c>)
 8008ee8:	2300      	movs	r3, #0
 8008eea:	4605      	mov	r5, r0
 8008eec:	4608      	mov	r0, r1
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	f7f8 f840 	bl	8000f74 <_close>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d102      	bne.n	8008efe <_close_r+0x1a>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	b103      	cbz	r3, 8008efe <_close_r+0x1a>
 8008efc:	602b      	str	r3, [r5, #0]
 8008efe:	bd38      	pop	{r3, r4, r5, pc}
 8008f00:	20000b70 	.word	0x20000b70

08008f04 <_fstat_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4c07      	ldr	r4, [pc, #28]	; (8008f24 <_fstat_r+0x20>)
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	4611      	mov	r1, r2
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	f7f8 f87f 	bl	8001014 <_fstat>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	d102      	bne.n	8008f20 <_fstat_r+0x1c>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	b103      	cbz	r3, 8008f20 <_fstat_r+0x1c>
 8008f1e:	602b      	str	r3, [r5, #0]
 8008f20:	bd38      	pop	{r3, r4, r5, pc}
 8008f22:	bf00      	nop
 8008f24:	20000b70 	.word	0x20000b70

08008f28 <_isatty_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4c06      	ldr	r4, [pc, #24]	; (8008f44 <_isatty_r+0x1c>)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4605      	mov	r5, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	f7f7 ffde 	bl	8000ef4 <_isatty>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	d102      	bne.n	8008f42 <_isatty_r+0x1a>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	b103      	cbz	r3, 8008f42 <_isatty_r+0x1a>
 8008f40:	602b      	str	r3, [r5, #0]
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
 8008f44:	20000b70 	.word	0x20000b70

08008f48 <_lseek_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4c07      	ldr	r4, [pc, #28]	; (8008f68 <_lseek_r+0x20>)
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	4608      	mov	r0, r1
 8008f50:	4611      	mov	r1, r2
 8008f52:	2200      	movs	r2, #0
 8008f54:	6022      	str	r2, [r4, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	f7f8 f823 	bl	8000fa2 <_lseek>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d102      	bne.n	8008f66 <_lseek_r+0x1e>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	b103      	cbz	r3, 8008f66 <_lseek_r+0x1e>
 8008f64:	602b      	str	r3, [r5, #0]
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	20000b70 	.word	0x20000b70

08008f6c <__ascii_mbtowc>:
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	b901      	cbnz	r1, 8008f72 <__ascii_mbtowc+0x6>
 8008f70:	a901      	add	r1, sp, #4
 8008f72:	b142      	cbz	r2, 8008f86 <__ascii_mbtowc+0x1a>
 8008f74:	b14b      	cbz	r3, 8008f8a <__ascii_mbtowc+0x1e>
 8008f76:	7813      	ldrb	r3, [r2, #0]
 8008f78:	600b      	str	r3, [r1, #0]
 8008f7a:	7812      	ldrb	r2, [r2, #0]
 8008f7c:	1c10      	adds	r0, r2, #0
 8008f7e:	bf18      	it	ne
 8008f80:	2001      	movne	r0, #1
 8008f82:	b002      	add	sp, #8
 8008f84:	4770      	bx	lr
 8008f86:	4610      	mov	r0, r2
 8008f88:	e7fb      	b.n	8008f82 <__ascii_mbtowc+0x16>
 8008f8a:	f06f 0001 	mvn.w	r0, #1
 8008f8e:	e7f8      	b.n	8008f82 <__ascii_mbtowc+0x16>

08008f90 <__malloc_lock>:
 8008f90:	4770      	bx	lr

08008f92 <__malloc_unlock>:
 8008f92:	4770      	bx	lr

08008f94 <_read_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4c07      	ldr	r4, [pc, #28]	; (8008fb4 <_read_r+0x20>)
 8008f98:	4605      	mov	r5, r0
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	6022      	str	r2, [r4, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f7f8 f80e 	bl	8000fc4 <_read>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_read_r+0x1e>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_read_r+0x1e>
 8008fb0:	602b      	str	r3, [r5, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	20000b70 	.word	0x20000b70

08008fb8 <__ascii_wctomb>:
 8008fb8:	b149      	cbz	r1, 8008fce <__ascii_wctomb+0x16>
 8008fba:	2aff      	cmp	r2, #255	; 0xff
 8008fbc:	bf85      	ittet	hi
 8008fbe:	238a      	movhi	r3, #138	; 0x8a
 8008fc0:	6003      	strhi	r3, [r0, #0]
 8008fc2:	700a      	strbls	r2, [r1, #0]
 8008fc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008fc8:	bf98      	it	ls
 8008fca:	2001      	movls	r0, #1
 8008fcc:	4770      	bx	lr
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4770      	bx	lr
	...

08008fd4 <_init>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	bf00      	nop
 8008fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fda:	bc08      	pop	{r3}
 8008fdc:	469e      	mov	lr, r3
 8008fde:	4770      	bx	lr

08008fe0 <_fini>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	bf00      	nop
 8008fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fe6:	bc08      	pop	{r3}
 8008fe8:	469e      	mov	lr, r3
 8008fea:	4770      	bx	lr
