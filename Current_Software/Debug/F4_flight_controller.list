
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e948  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800ead8  0800ead8  0001ead8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eddc  0800eddc  000216e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eddc  0800eddc  0001eddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ede4  0800ede4  000216e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ede4  0800ede4  0001ede4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ede8  0800ede8  0001ede8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000016e8  20000000  0800edec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001514  200016e8  080104d4  000216e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bfc  080104d4  00022bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000216e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048722  00000000  00000000  00021718  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007221  00000000  00000000  00069e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ad0  00000000  00000000  00071060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  00072b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bc45  00000000  00000000  000742e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002be98  00000000  00000000  0009ff2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cddc4  00000000  00000000  000cbdc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00199b89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077fc  00000000  00000000  00199c04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200016e8 	.word	0x200016e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eac0 	.word	0x0800eac0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200016ec 	.word	0x200016ec
 80001cc:	0800eac0 	.word	0x0800eac0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DATA_LOGGER_Init>:
static uint8_t name_yaw_gyro_raw[] = "Gyro raw YAW";

static uint8_t name_config_request[] = "Send Config";
static uint8_t name_flight_mode[] = "Flight Mode";

void DATA_LOGGER_Init(system_t * sys_){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	sys = sys_;
 8000f50:	4ab4      	ldr	r2, [pc, #720]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]

	//	-----------------------------------------------	Définitions des data	-----------------------------------------------------------------
	//Angle
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle, 		sizeof(name_roll_angle)-1, 							TRUE);
 8000f56:	4bb4      	ldr	r3, [pc, #720]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	4bb1      	ldr	r3, [pc, #708]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000f64:	4ab0      	ldr	r2, [pc, #704]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f66:	6053      	str	r3, [r2, #4]
 8000f68:	4baf      	ldr	r3, [pc, #700]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f6a:	2229      	movs	r2, #41	; 0x29
 8000f6c:	725a      	strb	r2, [r3, #9]
 8000f6e:	4bae      	ldr	r3, [pc, #696]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f70:	4aae      	ldr	r2, [pc, #696]	; (800122c <DATA_LOGGER_Init+0x2e4>)
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4bac      	ldr	r3, [pc, #688]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f76:	220a      	movs	r2, #10
 8000f78:	741a      	strb	r2, [r3, #16]
 8000f7a:	4bab      	ldr	r3, [pc, #684]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	615a      	str	r2, [r3, #20]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle, 		sizeof(name_pitch_angle)-1, 						FALSE);
 8000f80:	4ba9      	ldr	r3, [pc, #676]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
 8000f88:	4ba6      	ldr	r3, [pc, #664]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000f90:	4aa5      	ldr	r2, [pc, #660]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4ba4      	ldr	r3, [pc, #656]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f96:	2229      	movs	r2, #41	; 0x29
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f9c:	4ba2      	ldr	r3, [pc, #648]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f9e:	4aa4      	ldr	r2, [pc, #656]	; (8001230 <DATA_LOGGER_Init+0x2e8>)
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	4ba1      	ldr	r3, [pc, #644]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000faa:	4b9f      	ldr	r3, [pc, #636]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c

	//Consignes angles
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_roll, 		sizeof(name_consigne_angle_roll)-1, 		FALSE);
 8000fb0:	4b9d      	ldr	r3, [pc, #628]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fb2:	220d      	movs	r2, #13
 8000fb4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8000fb8:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8000fc0:	4a99      	ldr	r2, [pc, #612]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fc2:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000fc6:	4b98      	ldr	r3, [pc, #608]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fc8:	2229      	movs	r2, #41	; 0x29
 8000fca:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8000fce:	4b96      	ldr	r3, [pc, #600]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fd0:	4a98      	ldr	r2, [pc, #608]	; (8001234 <DATA_LOGGER_Init+0x2ec>)
 8000fd2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8000fd6:	4b94      	ldr	r3, [pc, #592]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fd8:	220b      	movs	r2, #11
 8000fda:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8000fde:	4b92      	ldr	r3, [pc, #584]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_pitch, 		sizeof(name_consigne_angle_pitch)-1, 		FALSE);
 8000fe6:	4b90      	ldr	r3, [pc, #576]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fe8:	220e      	movs	r2, #14
 8000fea:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8000fee:	4b8d      	ldr	r3, [pc, #564]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8000ff6:	4a8c      	ldr	r2, [pc, #560]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ff8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ffc:	4b8a      	ldr	r3, [pc, #552]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ffe:	2229      	movs	r2, #41	; 0x29
 8001000:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8001004:	4b88      	ldr	r3, [pc, #544]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001006:	4a8c      	ldr	r2, [pc, #560]	; (8001238 <DATA_LOGGER_Init+0x2f0>)
 8001008:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800100c:	4b86      	ldr	r3, [pc, #536]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800100e:	220c      	movs	r2, #12
 8001010:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8001014:	4b84      	ldr	r3, [pc, #528]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

	//Angle rate
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 		sizeof(name_roll_gyro)-1, 							TRUE);
 800101c:	4b82      	ldr	r3, [pc, #520]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800101e:	2202      	movs	r2, #2
 8001020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001024:	4b7f      	ldr	r3, [pc, #508]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	333c      	adds	r3, #60	; 0x3c
 800102a:	4a7f      	ldr	r2, [pc, #508]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800102c:	6353      	str	r3, [r2, #52]	; 0x34
 800102e:	4b7e      	ldr	r3, [pc, #504]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001030:	2229      	movs	r2, #41	; 0x29
 8001032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001036:	4b7c      	ldr	r3, [pc, #496]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001038:	4a80      	ldr	r2, [pc, #512]	; (800123c <DATA_LOGGER_Init+0x2f4>)
 800103a:	63da      	str	r2, [r3, #60]	; 0x3c
 800103c:	4b7a      	ldr	r3, [pc, #488]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800103e:	2209      	movs	r2, #9
 8001040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001044:	4b78      	ldr	r3, [pc, #480]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001046:	2201      	movs	r2, #1
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 		sizeof(name_pitch_gyro)-1, 							FALSE);
 800104a:	4b77      	ldr	r3, [pc, #476]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800104c:	2203      	movs	r2, #3
 800104e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001052:	4b74      	ldr	r3, [pc, #464]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3338      	adds	r3, #56	; 0x38
 8001058:	4a73      	ldr	r2, [pc, #460]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800105a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105c:	4b72      	ldr	r3, [pc, #456]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800105e:	2229      	movs	r2, #41	; 0x29
 8001060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001064:	4b70      	ldr	r3, [pc, #448]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001066:	4a76      	ldr	r2, [pc, #472]	; (8001240 <DATA_LOGGER_Init+0x2f8>)
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
 800106a:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800106c:	220a      	movs	r2, #10
 800106e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001072:	4b6d      	ldr	r3, [pc, #436]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001074:	2200      	movs	r2, #0
 8001076:	65da      	str	r2, [r3, #92]	; 0x5c
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			sizeof(name_yaw_gyro)-1, 							FALSE);
 8001078:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800107a:	2204      	movs	r2, #4
 800107c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3340      	adds	r3, #64	; 0x40
 8001086:	4a68      	ldr	r2, [pc, #416]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001088:	6653      	str	r3, [r2, #100]	; 0x64
 800108a:	4b67      	ldr	r3, [pc, #412]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800108c:	2229      	movs	r2, #41	; 0x29
 800108e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001092:	4b65      	ldr	r3, [pc, #404]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001094:	4a6b      	ldr	r2, [pc, #428]	; (8001244 <DATA_LOGGER_Init+0x2fc>)
 8001096:	66da      	str	r2, [r3, #108]	; 0x6c
 8001098:	4b63      	ldr	r3, [pc, #396]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800109a:	2208      	movs	r2, #8
 800109c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80010a0:	4b61      	ldr	r3, [pc, #388]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	675a      	str	r2, [r3, #116]	; 0x74

	//Consignes angles rates
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_roll_gyro, 		sizeof(name_target_roll_gyro)-1, 				FALSE);
 80010a6:	4b60      	ldr	r3, [pc, #384]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010a8:	220a      	movs	r2, #10
 80010aa:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 80010b6:	4a5c      	ldr	r2, [pc, #368]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010bc:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010be:	2229      	movs	r2, #41	; 0x29
 80010c0:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010c6:	4a60      	ldr	r2, [pc, #384]	; (8001248 <DATA_LOGGER_Init+0x300>)
 80010c8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80010cc:	4b56      	ldr	r3, [pc, #344]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ce:	220d      	movs	r2, #13
 80010d0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80010d4:	4b54      	ldr	r3, [pc, #336]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_pitch_gyro, 	sizeof(name_target_pitch_gyro)-1, 				FALSE);
 80010dc:	4b52      	ldr	r3, [pc, #328]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010de:	220b      	movs	r2, #11
 80010e0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ee:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80010f2:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010f4:	2229      	movs	r2, #41	; 0x29
 80010f6:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 80010fa:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010fc:	4a53      	ldr	r2, [pc, #332]	; (800124c <DATA_LOGGER_Init+0x304>)
 80010fe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001102:	4b49      	ldr	r3, [pc, #292]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001104:	220e      	movs	r2, #14
 8001106:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800110c:	2200      	movs	r2, #0
 800110e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_YAW, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW], 		DATA_FORMAT_16B_FLOAT_1D, 	name_target_yaw_gyro, 		sizeof(name_target_yaw_gyro)-1, 				FALSE);
 8001112:	4b45      	ldr	r3, [pc, #276]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001114:	220c      	movs	r2, #12
 8001116:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001122:	4a41      	ldr	r2, [pc, #260]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001124:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800112a:	2229      	movs	r2, #41	; 0x29
 800112c:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8001130:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001132:	4a47      	ldr	r2, [pc, #284]	; (8001250 <DATA_LOGGER_Init+0x308>)
 8001134:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8001138:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800113a:	220c      	movs	r2, #12
 800113c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001142:	2200      	movs	r2, #0
 8001144:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	//Angle Rate raw
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 	sizeof(name_roll_gyro_raw)-1, 						TRUE);
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800114a:	2205      	movs	r2, #5
 800114c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001156:	3304      	adds	r3, #4
 8001158:	4a33      	ldr	r2, [pc, #204]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800115a:	67d3      	str	r3, [r2, #124]	; 0x7c
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800115e:	2229      	movs	r2, #41	; 0x29
 8001160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001166:	4a3b      	ldr	r2, [pc, #236]	; (8001254 <DATA_LOGGER_Init+0x30c>)
 8001168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800116e:	220d      	movs	r2, #13
 8001170:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001176:	2201      	movs	r2, #1
 8001178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,	sizeof(name_pitch_gyro_raw)-1, 						FALSE);
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800117e:	2206      	movs	r2, #6
 8001180:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118a:	3304      	adds	r3, #4
 800118c:	4a26      	ldr	r2, [pc, #152]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800118e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001194:	2229      	movs	r2, #41	; 0x29
 8001196:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800119c:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <DATA_LOGGER_Init+0x310>)
 800119e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011a4:	220e      	movs	r2, #14
 80011a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 		sizeof(name_yaw_gyro_raw)-1, 						FALSE);
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c0:	3308      	adds	r3, #8
 80011c2:	4a19      	ldr	r2, [pc, #100]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011c4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011ca:	2229      	movs	r2, #41	; 0x29
 80011cc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011d2:	4a22      	ldr	r2, [pc, #136]	; (800125c <DATA_LOGGER_Init+0x314>)
 80011d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011da:	220c      	movs	r2, #12
 80011dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	//Buttons
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_config_request, 	sizeof(name_config_request)-1, 						FALSE);
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011ea:	220f      	movs	r2, #15
 80011ec:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <DATA_LOGGER_Init+0x318>)
 8001204:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800120a:	220b      	movs	r2, #11
 800120c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001212:	2200      	movs	r2, #0
 8001214:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	//Others
	DEFINE_DATA(DATA_ID_FLIGHT_MODE, sys->soft.flight_mode, 																	DATA_FORMAT_8B, 			name_flight_mode, 		sizeof(name_flight_mode)-1, 						TRUE);
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800121a:	2209      	movs	r2, #9
 800121c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8001220:	e020      	b.n	8001264 <DATA_LOGGER_Init+0x31c>
 8001222:	bf00      	nop
 8001224:	20001704 	.word	0x20001704
 8001228:	20001708 	.word	0x20001708
 800122c:	20000004 	.word	0x20000004
 8001230:	20000010 	.word	0x20000010
 8001234:	2000001c 	.word	0x2000001c
 8001238:	20000028 	.word	0x20000028
 800123c:	20000038 	.word	0x20000038
 8001240:	20000044 	.word	0x20000044
 8001244:	20000050 	.word	0x20000050
 8001248:	2000005c 	.word	0x2000005c
 800124c:	2000006c 	.word	0x2000006c
 8001250:	2000007c 	.word	0x2000007c
 8001254:	2000008c 	.word	0x2000008c
 8001258:	2000009c 	.word	0x2000009c
 800125c:	200000ac 	.word	0x200000ac
 8001260:	200000bc 	.word	0x200000bc
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <DATA_LOGGER_Init+0x358>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f8d3 3b14 	ldr.w	r3, [r3, #2836]	; 0xb14
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <DATA_LOGGER_Init+0x35c>)
 800126e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <DATA_LOGGER_Init+0x35c>)
 8001274:	2214      	movs	r2, #20
 8001276:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <DATA_LOGGER_Init+0x35c>)
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <DATA_LOGGER_Init+0x360>)
 800127e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <DATA_LOGGER_Init+0x35c>)
 8001284:	220b      	movs	r2, #11
 8001286:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <DATA_LOGGER_Init+0x35c>)
 800128c:	2201      	movs	r2, #1
 800128e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec


}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20001704 	.word	0x20001704
 80012a4:	20001708 	.word	0x20001708
 80012a8:	200000c8 	.word	0x200000c8

080012ac <DATA_LOGGER_Main>:

void DATA_LOGGER_Stop(){
	stop_flag = TRUE;
}

void DATA_LOGGER_Main(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

	static data_logger_state_e previous_state 	= LOGGER_TRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 80012b2:	4b62      	ldr	r3, [pc, #392]	; (800143c <DATA_LOGGER_Main+0x190>)
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	4b62      	ldr	r3, [pc, #392]	; (8001440 <DATA_LOGGER_Main+0x194>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	bf14      	ite	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	2300      	moveq	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	603b      	str	r3, [r7, #0]
	previous_state = state ;
 80012c6:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <DATA_LOGGER_Main+0x194>)
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <DATA_LOGGER_Main+0x190>)
 80012cc:	701a      	strb	r2, [r3, #0]

	switch(state){
 80012ce:	4b5c      	ldr	r3, [pc, #368]	; (8001440 <DATA_LOGGER_Main+0x194>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d036      	beq.n	8001344 <DATA_LOGGER_Main+0x98>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d07e      	beq.n	80013d8 <DATA_LOGGER_Main+0x12c>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d000      	beq.n	80012e0 <DATA_LOGGER_Main+0x34>
					}
			}
			break;
	}

}
 80012de:	e0a8      	b.n	8001432 <DATA_LOGGER_Main+0x186>
			if(entrance){
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <DATA_LOGGER_Main+0x42>
				SCHEDULER_reschedule_task(TASK_LOGGER, 2000000);
 80012e6:	4957      	ldr	r1, [pc, #348]	; (8001444 <DATA_LOGGER_Main+0x198>)
 80012e8:	200d      	movs	r0, #13
 80012ea:	f001 fff3 	bl	80032d4 <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(DATA_ID_CONFIG_REQUEST, tmp);
 80012ee:	4956      	ldr	r1, [pc, #344]	; (8001448 <DATA_LOGGER_Main+0x19c>)
 80012f0:	200f      	movs	r0, #15
 80012f2:	f000 fa1f 	bl	8001734 <DATA_LOGGER_Get_Data_Config>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b54      	ldr	r3, [pc, #336]	; (800144c <DATA_LOGGER_Main+0x1a0>)
 80012fc:	701a      	strb	r2, [r3, #0]
			TELEMETRY_Send_Data(tmp, tmp_len);
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <DATA_LOGGER_Main+0x1a0>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4850      	ldr	r0, [pc, #320]	; (8001448 <DATA_LOGGER_Main+0x19c>)
 8001306:	f005 f9cf 	bl	80066a8 <TELEMETRY_Send_Data>
			if(start_flag){
 800130a:	4b51      	ldr	r3, [pc, #324]	; (8001450 <DATA_LOGGER_Main+0x1a4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 808e 	beq.w	8001430 <DATA_LOGGER_Main+0x184>
				start_flag = FALSE;
 8001314:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <DATA_LOGGER_Main+0x1a4>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
				stop_flag = FALSE;
 800131a:	4b4e      	ldr	r3, [pc, #312]	; (8001454 <DATA_LOGGER_Main+0x1a8>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
				if(config_not_sent){
 8001320:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <DATA_LOGGER_Main+0x1ac>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <DATA_LOGGER_Main+0x90>
					id_init_counter = 0;
 8001328:	4b4c      	ldr	r3, [pc, #304]	; (800145c <DATA_LOGGER_Main+0x1b0>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 800132e:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <DATA_LOGGER_Main+0x1b4>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 8001334:	4b42      	ldr	r3, [pc, #264]	; (8001440 <DATA_LOGGER_Main+0x194>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
			break;
 800133a:	e079      	b.n	8001430 <DATA_LOGGER_Main+0x184>
					state = LOGGER_LOG;
 800133c:	4b40      	ldr	r3, [pc, #256]	; (8001440 <DATA_LOGGER_Main+0x194>)
 800133e:	2202      	movs	r2, #2
 8001340:	701a      	strb	r2, [r3, #0]
			break;
 8001342:	e075      	b.n	8001430 <DATA_LOGGER_Main+0x184>
			if(entrance)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00a      	beq.n	8001360 <DATA_LOGGER_Main+0xb4>
				SCHEDULER_reschedule_task(TASK_LOGGER, 500000);	//On abaisse la fréquence de la tâche pendant l'init
 800134a:	4946      	ldr	r1, [pc, #280]	; (8001464 <DATA_LOGGER_Main+0x1b8>)
 800134c:	200d      	movs	r0, #13
 800134e:	f001 ffc1 	bl	80032d4 <SCHEDULER_reschedule_task>
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 8001352:	e005      	b.n	8001360 <DATA_LOGGER_Main+0xb4>
				id_init_counter ++ ;
 8001354:	4b41      	ldr	r3, [pc, #260]	; (800145c <DATA_LOGGER_Main+0x1b0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b3f      	ldr	r3, [pc, #252]	; (800145c <DATA_LOGGER_Main+0x1b0>)
 800135e:	701a      	strb	r2, [r3, #0]
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 8001360:	4b3e      	ldr	r3, [pc, #248]	; (800145c <DATA_LOGGER_Main+0x1b0>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	4a40      	ldr	r2, [pc, #256]	; (8001468 <DATA_LOGGER_Main+0x1bc>)
 8001368:	460b      	mov	r3, r1
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	440b      	add	r3, r1
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4413      	add	r3, r2
 8001372:	3314      	adds	r3, #20
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d103      	bne.n	8001382 <DATA_LOGGER_Main+0xd6>
 800137a:	4b38      	ldr	r3, [pc, #224]	; (800145c <DATA_LOGGER_Main+0x1b0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	d9e8      	bls.n	8001354 <DATA_LOGGER_Main+0xa8>
			if(id_init_counter < DATA_ID_COUNT){
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <DATA_LOGGER_Main+0x1b0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	d817      	bhi.n	80013ba <DATA_LOGGER_Main+0x10e>
				is_any_data_used = TRUE;
 800138a:	4b35      	ldr	r3, [pc, #212]	; (8001460 <DATA_LOGGER_Main+0x1b4>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <DATA_LOGGER_Main+0x1b0>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	b2d1      	uxtb	r1, r2
 8001398:	4a30      	ldr	r2, [pc, #192]	; (800145c <DATA_LOGGER_Main+0x1b0>)
 800139a:	7011      	strb	r1, [r2, #0]
 800139c:	492a      	ldr	r1, [pc, #168]	; (8001448 <DATA_LOGGER_Main+0x19c>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f9c8 	bl	8001734 <DATA_LOGGER_Get_Data_Config>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <DATA_LOGGER_Main+0x1a0>)
 80013aa:	701a      	strb	r2, [r3, #0]
				TELEMETRY_Send_Data(tmp, tmp_len);
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <DATA_LOGGER_Main+0x1a0>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4825      	ldr	r0, [pc, #148]	; (8001448 <DATA_LOGGER_Main+0x19c>)
 80013b4:	f005 f978 	bl	80066a8 <TELEMETRY_Send_Data>
			break;
 80013b8:	e03b      	b.n	8001432 <DATA_LOGGER_Main+0x186>
				if(is_any_data_used)
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <DATA_LOGGER_Main+0x1b4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <DATA_LOGGER_Main+0x124>
					config_not_sent = FALSE ;
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <DATA_LOGGER_Main+0x1ac>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
					state = LOGGER_LOG ;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <DATA_LOGGER_Main+0x194>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	701a      	strb	r2, [r3, #0]
			break;
 80013ce:	e030      	b.n	8001432 <DATA_LOGGER_Main+0x186>
					state = LOGGER_IDDLE ;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <DATA_LOGGER_Main+0x194>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
			break;
 80013d6:	e02c      	b.n	8001432 <DATA_LOGGER_Main+0x186>
			if(entrance)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <DATA_LOGGER_Main+0x13c>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);	//On reprend une fréquence plus importante pour l'envoit en flux continu
 80013de:	f242 7110 	movw	r1, #10000	; 0x2710
 80013e2:	200d      	movs	r0, #13
 80013e4:	f001 ff76 	bl	80032d4 <SCHEDULER_reschedule_task>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	e01c      	b.n	8001428 <DATA_LOGGER_Main+0x17c>
				if(data_list[d].used)
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	491d      	ldr	r1, [pc, #116]	; (8001468 <DATA_LOGGER_Main+0x1bc>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	3314      	adds	r3, #20
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00e      	beq.n	8001422 <DATA_LOGGER_Main+0x176>
						tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	4910      	ldr	r1, [pc, #64]	; (8001448 <DATA_LOGGER_Main+0x19c>)
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f8ad 	bl	8001568 <DATA_LOGGER_Get_Data_Value>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <DATA_LOGGER_Main+0x1a0>)
 8001414:	701a      	strb	r2, [r3, #0]
						TELEMETRY_Send_Data(tmp, tmp_len);
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <DATA_LOGGER_Main+0x1a0>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	480a      	ldr	r0, [pc, #40]	; (8001448 <DATA_LOGGER_Main+0x19c>)
 800141e:	f005 f943 	bl	80066a8 <TELEMETRY_Send_Data>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	3301      	adds	r3, #1
 8001426:	71fb      	strb	r3, [r7, #7]
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	d9df      	bls.n	80013ee <DATA_LOGGER_Main+0x142>
			break;
 800142e:	e000      	b.n	8001432 <DATA_LOGGER_Main+0x186>
			break;
 8001430:	bf00      	nop
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200000d4 	.word	0x200000d4
 8001440:	20001888 	.word	0x20001888
 8001444:	001e8480 	.word	0x001e8480
 8001448:	20001894 	.word	0x20001894
 800144c:	200018a8 	.word	0x200018a8
 8001450:	2000188c 	.word	0x2000188c
 8001454:	20001890 	.word	0x20001890
 8001458:	20000000 	.word	0x20000000
 800145c:	200018a9 	.word	0x200018a9
 8001460:	200018ac 	.word	0x200018ac
 8001464:	0007a120 	.word	0x0007a120
 8001468:	20001708 	.word	0x20001708

0800146c <DATA_LOGGER_Reception>:

void DATA_LOGGER_Reception(uint8_t * input_buffer){
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	73fb      	strb	r3, [r7, #15]

	switch(data_list[id].format){
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	4938      	ldr	r1, [pc, #224]	; (8001560 <DATA_LOGGER_Reception+0xf4>)
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	3309      	adds	r3, #9
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b29      	cmp	r3, #41	; 0x29
 800148e:	d860      	bhi.n	8001552 <DATA_LOGGER_Reception+0xe6>
 8001490:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <DATA_LOGGER_Reception+0x2c>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	08001541 	.word	0x08001541
 800149c:	08001553 	.word	0x08001553
 80014a0:	08001553 	.word	0x08001553
 80014a4:	08001553 	.word	0x08001553
 80014a8:	08001553 	.word	0x08001553
 80014ac:	08001553 	.word	0x08001553
 80014b0:	08001553 	.word	0x08001553
 80014b4:	08001553 	.word	0x08001553
 80014b8:	08001553 	.word	0x08001553
 80014bc:	08001553 	.word	0x08001553
 80014c0:	08001553 	.word	0x08001553
 80014c4:	08001553 	.word	0x08001553
 80014c8:	08001553 	.word	0x08001553
 80014cc:	08001553 	.word	0x08001553
 80014d0:	08001553 	.word	0x08001553
 80014d4:	08001553 	.word	0x08001553
 80014d8:	08001553 	.word	0x08001553
 80014dc:	08001553 	.word	0x08001553
 80014e0:	08001553 	.word	0x08001553
 80014e4:	08001553 	.word	0x08001553
 80014e8:	08001553 	.word	0x08001553
 80014ec:	08001553 	.word	0x08001553
 80014f0:	08001553 	.word	0x08001553
 80014f4:	08001553 	.word	0x08001553
 80014f8:	08001553 	.word	0x08001553
 80014fc:	08001553 	.word	0x08001553
 8001500:	08001553 	.word	0x08001553
 8001504:	08001553 	.word	0x08001553
 8001508:	08001553 	.word	0x08001553
 800150c:	08001553 	.word	0x08001553
 8001510:	08001553 	.word	0x08001553
 8001514:	08001553 	.word	0x08001553
 8001518:	08001553 	.word	0x08001553
 800151c:	08001553 	.word	0x08001553
 8001520:	08001553 	.word	0x08001553
 8001524:	08001553 	.word	0x08001553
 8001528:	08001553 	.word	0x08001553
 800152c:	08001553 	.word	0x08001553
 8001530:	08001553 	.word	0x08001553
 8001534:	08001553 	.word	0x08001553
 8001538:	08001553 	.word	0x08001553
 800153c:	08001553 	.word	0x08001553
		case DATA_FORMAT_0B_BUTTON:
			//We can create an action for each id
			switch(id)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	d000      	beq.n	8001548 <DATA_LOGGER_Reception+0xdc>
			{
				default:
					break;
 8001546:	e003      	b.n	8001550 <DATA_LOGGER_Reception+0xe4>
				case DATA_ID_CONFIG_REQUEST:
					start_flag = TRUE;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <DATA_LOGGER_Reception+0xf8>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]
					break;
 800154e:	bf00      	nop
			}
			break;
 8001550:	e000      	b.n	8001554 <DATA_LOGGER_Reception+0xe8>
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			break;
		default:
			break;
 8001552:	bf00      	nop

	}
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20001708 	.word	0x20001708
 8001564:	2000188c 	.word	0x2000188c

08001568 <DATA_LOGGER_Get_Data_Value>:

uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer){
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	73fb      	strb	r3, [r7, #15]

//	uint16_t tmp_u16 = 0;
	int16_t tmp_16 = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	613b      	str	r3, [r7, #16]

	//Premier octet contient l'id
	buffer[0] = id ;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	701a      	strb	r2, [r3, #0]

	//Formatage de la donnée en fonction du type et du format
	switch(data_list[id].format){
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	4969      	ldr	r1, [pc, #420]	; (800172c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3309      	adds	r3, #9
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	3b14      	subs	r3, #20
 8001598:	2b17      	cmp	r3, #23
 800159a:	f200 80af 	bhi.w	80016fc <DATA_LOGGER_Get_Data_Value+0x194>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <DATA_LOGGER_Get_Data_Value+0x3c>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	08001605 	.word	0x08001605
 80015a8:	080016fd 	.word	0x080016fd
 80015ac:	080016fd 	.word	0x080016fd
 80015b0:	08001621 	.word	0x08001621
 80015b4:	080016fd 	.word	0x080016fd
 80015b8:	080016fd 	.word	0x080016fd
 80015bc:	080016fd 	.word	0x080016fd
 80015c0:	080016fd 	.word	0x080016fd
 80015c4:	080016fd 	.word	0x080016fd
 80015c8:	080016fd 	.word	0x080016fd
 80015cc:	080016fd 	.word	0x080016fd
 80015d0:	080016fd 	.word	0x080016fd
 80015d4:	080016fd 	.word	0x080016fd
 80015d8:	080016fd 	.word	0x080016fd
 80015dc:	080016fd 	.word	0x080016fd
 80015e0:	080016fd 	.word	0x080016fd
 80015e4:	080016fd 	.word	0x080016fd
 80015e8:	080016fd 	.word	0x080016fd
 80015ec:	080016fd 	.word	0x080016fd
 80015f0:	080016fd 	.word	0x080016fd
 80015f4:	080016fd 	.word	0x080016fd
 80015f8:	08001651 	.word	0x08001651
 80015fc:	08001699 	.word	0x08001699
 8001600:	080016cb 	.word	0x080016cb
		case DATA_FORMAT_8B:
			buffer[1] = *data_list[id].data ;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	4949      	ldr	r1, [pc, #292]	; (800172c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	3304      	adds	r3, #4
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3301      	adds	r3, #1
 800161a:	7812      	ldrb	r2, [r2, #0]
 800161c:	701a      	strb	r2, [r3, #0]
			break;
 800161e:	e06e      	b.n	80016fe <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_8B_PWM:
			break;
		case DATA_FORMAT_8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	4942      	ldr	r1, [pc, #264]	; (800172c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	3304      	adds	r3, #4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8001636:	edd7 7a04 	vldr	s15, [r7, #16]
 800163a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001642:	793b      	ldrb	r3, [r7, #4]
 8001644:	b25a      	sxtb	r2, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
			break;
 800164e:	e056      	b.n	80016fe <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_8B_FLOAT_1D:
			break;
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	4936      	ldr	r1, [pc, #216]	; (800172c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3304      	adds	r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8001666:	edd7 7a04 	vldr	s15, [r7, #16]
 800166a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800166e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001676:	ee17 3a90 	vmov	r3, s15
 800167a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800167c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001680:	121b      	asrs	r3, r3, #8
 8001682:	b21a      	sxth	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	3301      	adds	r3, #1
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	3302      	adds	r3, #2
 8001690:	8afa      	ldrh	r2, [r7, #22]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]
			break;
 8001696:	e032      	b.n	80016fe <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	4924      	ldr	r1, [pc, #144]	; (800172c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	3304      	adds	r3, #4
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80016ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016b2:	121b      	asrs	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3302      	adds	r3, #2
 80016c2:	8afa      	ldrh	r2, [r7, #22]
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
			break;
 80016c8:	e019      	b.n	80016fe <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	4917      	ldr	r1, [pc, #92]	; (800172c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	3304      	adds	r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80016e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016e4:	121b      	asrs	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3301      	adds	r3, #1
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3302      	adds	r3, #2
 80016f4:	8afa      	ldrh	r2, [r7, #22]
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]
			break;
 80016fa:	e000      	b.n	80016fe <DATA_LOGGER_Get_Data_Value+0x196>
		default:
			break;
 80016fc:	bf00      	nop
	}

	//Return the len of data
	return (data_list[id].format / 20) + 1;
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	490a      	ldr	r1, [pc, #40]	; (800172c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	440b      	add	r3, r1
 800170c:	3309      	adds	r3, #9
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <DATA_LOGGER_Get_Data_Value+0x1c8>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3301      	adds	r3, #1
 800171c:	b2db      	uxtb	r3, r3

}
 800171e:	4618      	mov	r0, r3
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20001708 	.word	0x20001708
 8001730:	cccccccd 	.word	0xcccccccd

08001734 <DATA_LOGGER_Get_Data_Config>:

uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer){
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
	//New data so we start with 255
	buffer[0] = 255;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	22ff      	movs	r2, #255	; 0xff
 8001744:	701a      	strb	r2, [r3, #0]
	//Then name len
	buffer[1] = data_list[id].len_name;
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	1c59      	adds	r1, r3, #1
 800174c:	481f      	ldr	r0, [pc, #124]	; (80017cc <DATA_LOGGER_Get_Data_Config+0x98>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4403      	add	r3, r0
 8001758:	3310      	adds	r3, #16
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	700b      	strb	r3, [r1, #0]
	//Then format
	buffer[2] = data_list[id].format ;
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	1c99      	adds	r1, r3, #2
 8001764:	4819      	ldr	r0, [pc, #100]	; (80017cc <DATA_LOGGER_Get_Data_Config+0x98>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4403      	add	r3, r0
 8001770:	3309      	adds	r3, #9
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	700b      	strb	r3, [r1, #0]
	//Taille du nom
	buffer[3] = id	 ;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	3303      	adds	r3, #3
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	701a      	strb	r2, [r3, #0]
	//Copie du nom
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	1d18      	adds	r0, r3, #4
 8001782:	79fa      	ldrb	r2, [r7, #7]
 8001784:	4911      	ldr	r1, [pc, #68]	; (80017cc <DATA_LOGGER_Get_Data_Config+0x98>)
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	330c      	adds	r3, #12
 8001792:	681c      	ldr	r4, [r3, #0]
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	490d      	ldr	r1, [pc, #52]	; (80017cc <DATA_LOGGER_Get_Data_Config+0x98>)
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	3310      	adds	r3, #16
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4621      	mov	r1, r4
 80017aa:	f00a fb85 	bl	800beb8 <memcpy>

	//And that s it
	return 4 + data_list[id].len_name ;
 80017ae:	79fa      	ldrb	r2, [r7, #7]
 80017b0:	4906      	ldr	r1, [pc, #24]	; (80017cc <DATA_LOGGER_Get_Data_Config+0x98>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	3310      	adds	r3, #16
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	3304      	adds	r3, #4
 80017c2:	b2db      	uxtb	r3, r3
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}
 80017cc:	20001708 	.word	0x20001708

080017d0 <DATA_LOGGER_Get_Data>:

data_t * DATA_LOGGER_Get_Data(data_id_e id){
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 80017da:	79fa      	ldrb	r2, [r7, #7]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <DATA_LOGGER_Get_Data+0x24>)
 80017e6:	4413      	add	r3, r2
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	20001708 	.word	0x20001708

080017f8 <angle_180>:
static float absolu(float x);
static float acc_correction(float x);
static float angle_180(float x);


static float angle_180(float x){
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 180)
 8001802:	edd7 7a01 	vldr	s15, [r7, #4]
 8001806:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800185c <angle_180+0x64>
 800180a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	dd08      	ble.n	8001826 <angle_180+0x2e>
		x -= 360;
 8001814:	edd7 7a01 	vldr	s15, [r7, #4]
 8001818:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001860 <angle_180+0x68>
 800181c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001820:	edc7 7a01 	vstr	s15, [r7, #4]
 8001824:	e010      	b.n	8001848 <angle_180+0x50>
	else if( x < -180)
 8001826:	edd7 7a01 	vldr	s15, [r7, #4]
 800182a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001864 <angle_180+0x6c>
 800182e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	d507      	bpl.n	8001848 <angle_180+0x50>
		x += 360 ;
 8001838:	edd7 7a01 	vldr	s15, [r7, #4]
 800183c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001860 <angle_180+0x68>
 8001840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001844:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	ee07 3a90 	vmov	s15, r3
}
 800184e:	eeb0 0a67 	vmov.f32	s0, s15
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	43340000 	.word	0x43340000
 8001860:	43b40000 	.word	0x43b40000
 8001864:	c3340000 	.word	0xc3340000

08001868 <absolu>:

static float absolu(float x){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	ed87 0a01 	vstr	s0, [r7, #4]
	if( x > 0)
 8001872:	edd7 7a01 	vldr	s15, [r7, #4]
 8001876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	dd02      	ble.n	8001886 <absolu+0x1e>
		return x ;
 8001880:	edd7 7a01 	vldr	s15, [r7, #4]
 8001884:	e003      	b.n	800188e <absolu+0x26>
	else
		return -x ;
 8001886:	edd7 7a01 	vldr	s15, [r7, #4]
 800188a:	eef1 7a67 	vneg.f32	s15, s15
}
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <acc_correction>:
static float acc_correction(float x){
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	ed87 0a01 	vstr	s0, [r7, #4]
	x = ( x > 0) ? 180 - x : -180 -x ;
 80018a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b2:	dd06      	ble.n	80018c2 <acc_correction+0x26>
 80018b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80018e8 <acc_correction+0x4c>
 80018b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	e005      	b.n	80018ce <acc_correction+0x32>
 80018c2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80018ec <acc_correction+0x50>
 80018c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ce:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	ee07 3a90 	vmov	s15, r3
}
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	43340000 	.word	0x43340000
 80018ec:	c3340000 	.word	0xc3340000

080018f0 <ORIENTATION_Init>:

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
	//Link data structures
	orientation->acc = acc ;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
	orientation->gyro = gyro ;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	621a      	str	r2, [r3, #32]
	orientation->angular_velocity = gyro->filtered ;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f103 0208 	add.w	r2, r3, #8
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	60da      	str	r2, [r3, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
	orientation->periode = (float)1 / (float)frequency ;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001924:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	orientation->alpha = ORIENTATION_ALPHA ;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <ORIENTATION_Init+0x84>)
 8001936:	631a      	str	r2, [r3, #48]	; 0x30

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e011      	b.n	8001962 <ORIENTATION_Init+0x72>
	{
		orientation->angular_position[x] = 0 ;
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
		orientation->angular_velocity[x] = 0 ;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < 3; x++)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b02      	cmp	r3, #2
 8001966:	ddea      	ble.n	800193e <ORIENTATION_Init+0x4e>
	}

}
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	3f7ff2e5 	.word	0x3f7ff2e5

08001978 <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	//Just to make the code lighter
	acc_t * acc = orientation->acc ;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	61fb      	str	r3, [r7, #28]
	gyro_t * gyro = orientation->gyro ;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	61bb      	str	r3, [r7, #24]

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ACC_AXE_X] * acc->filtered[ACC_AXE_X] ;
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	edd3 7a02 	vldr	s15, [r3, #8]
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += acc->filtered[ACC_AXE_Y] * acc->filtered[ACC_AXE_Y] ;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80019ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80019b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b8:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += acc->filtered[ACC_AXE_Z] * acc->filtered[ACC_AXE_Z] ;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	ed93 7a04 	vldr	s14, [r3, #16]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d4:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total = sqrtf(acc_total);
 80019d8:	ed97 0a05 	vldr	s0, [r7, #20]
 80019dc:	f00c ff20 	bl	800e820 <sqrtf>
 80019e0:	ed87 0a05 	vstr	s0, [r7, #20]

	if(acc_total)	//To avoid /0
 80019e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f0:	d069      	beq.n	8001ac6 <ORIENTATION_Update+0x14e>
	{
		if(absolu(acc->filtered[ACC_AXE_X]) < acc_total)	//To avoid asin x with x greater than 1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019f8:	eeb0 0a67 	vmov.f32	s0, s15
 80019fc:	f7ff ff34 	bl	8001868 <absolu>
 8001a00:	eeb0 7a40 	vmov.f32	s14, s0
 8001a04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	dd15      	ble.n	8001a3e <ORIENTATION_Update+0xc6>
			orientation->acc_angles[ACC_AXE_Y] = -asinf(acc->filtered[ACC_AXE_X] / acc_total) * 57.32f;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a18:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a20:	eeb0 0a66 	vmov.f32	s0, s13
 8001a24:	f00c fea4 	bl	800e770 <asinf>
 8001a28:	eef0 7a40 	vmov.f32	s15, s0
 8001a2c:	eef1 7a67 	vneg.f32	s15, s15
 8001a30:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001c04 <ORIENTATION_Update+0x28c>
 8001a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	edc3 7a05 	vstr	s15, [r3, #20]
		if(absolu(acc->filtered[ACC_AXE_Y]) < acc_total) 	//To avoid asin x with x greater than 1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a44:	eeb0 0a67 	vmov.f32	s0, s15
 8001a48:	f7ff ff0e 	bl	8001868 <absolu>
 8001a4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	dd13      	ble.n	8001a86 <ORIENTATION_Update+0x10e>
			orientation->acc_angles[ACC_AXE_X] = asinf(acc->filtered[ACC_AXE_Y] / acc_total) * 57.32f;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a6c:	eeb0 0a66 	vmov.f32	s0, s13
 8001a70:	f00c fe7e 	bl	800e770 <asinf>
 8001a74:	eeb0 7a40 	vmov.f32	s14, s0
 8001a78:	eddf 7a62 	vldr	s15, [pc, #392]	; 8001c04 <ORIENTATION_Update+0x28c>
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	edc3 7a04 	vstr	s15, [r3, #16]
		if(acc->filtered[ACC_AXE_Z] < 0)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	d517      	bpl.n	8001ac6 <ORIENTATION_Update+0x14e>
		{
			orientation->acc_angles[ACC_AXE_X] = acc_correction(orientation->acc_angles[ACC_AXE_X]);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa0:	f7ff fefc 	bl	800189c <acc_correction>
 8001aa4:	eef0 7a40 	vmov.f32	s15, s0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	edc3 7a04 	vstr	s15, [r3, #16]
			orientation->acc_angles[ACC_AXE_Y] = acc_correction(orientation->acc_angles[ACC_AXE_Y]);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab8:	f7ff fef0 	bl	800189c <acc_correction>
 8001abc:	eef0 7a40 	vmov.f32	s15, s0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	edc3 7a05 	vstr	s15, [r3, #20]
		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 8001ac6:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <ORIENTATION_Update+0x290>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00f      	beq.n	8001aee <ORIENTATION_Update+0x176>
	{
		orientation->angular_position[GYRO_AXE_X] = orientation->acc_angles[ACC_AXE_X] ;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->acc_angles[ACC_AXE_Y] ;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	605a      	str	r2, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] = 0 ;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
		first_use = FALSE ;
 8001ae6:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <ORIENTATION_Update+0x290>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];



	}
}
 8001aec:	e085      	b.n	8001bfa <ORIENTATION_Update+0x282>
		float dx = gyro->filtered[GYRO_AXE_X] * orientation->periode ;
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afe:	edc7 7a04 	vstr	s15, [r7, #16]
		float dy = gyro->filtered[GYRO_AXE_Y] * orientation->periode ;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b12:	edc7 7a03 	vstr	s15, [r7, #12]
		float dz = gyro->filtered[GYRO_AXE_Z] * orientation->periode ;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b26:	edc7 7a02 	vstr	s15, [r7, #8]
		orientation->angular_position[GYRO_AXE_X] += dx ;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	ed93 7a00 	vldr	s14, [r3]
 8001b30:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] += dy ;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] += dz ;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b58:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	edc3 7a02 	vstr	s15, [r3, #8]
		orientation->angular_position[GYRO_AXE_X] = angle_180(orientation->angular_position[GYRO_AXE_X]);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b70:	f7ff fe42 	bl	80017f8 <angle_180>
 8001b74:	eef0 7a40 	vmov.f32	s15, s0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = angle_180(orientation->angular_position[GYRO_AXE_Y]);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b84:	eeb0 0a67 	vmov.f32	s0, s15
 8001b88:	f7ff fe36 	bl	80017f8 <angle_180>
 8001b8c:	eef0 7a40 	vmov.f32	s15, s0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_X] = orientation->alpha * orientation->angular_position[GYRO_AXE_X] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_X];
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bb0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001be2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001bfa:	bf00      	nop
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	426547ae 	.word	0x426547ae
 8001c08:	200000d8 	.word	0x200000d8

08001c0c <arming_entrance>:
static state_arming_e state = 0;
static uint8_t state_vroum_vroum = 0;
static uint32_t next_change = 0 ;
static float elapsed = 0 ;

void arming_entrance(system_t * sys){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f002 f987 	bl	8003f28 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f002 fada 	bl	80041d4 <REGULATION_POSITION_Set_Regulation_Mode>
	sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2228      	movs	r2, #40	; 0x28
 8001c24:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_10, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001c30:	2000      	movs	r0, #0
 8001c32:	f000 fb49 	bl	80022c8 <IHM_Set_Sequences>
	state = ARMING_THROTTLE_LOW ;
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <arming_entrance+0x40>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
	state_vroum_vroum= 0 ;
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <arming_entrance+0x44>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200018b0 	.word	0x200018b0
 8001c50:	200018b1 	.word	0x200018b1

08001c54 <arming_main>:

void arming_main(system_t * sys, uint32_t time_us){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]



	switch(state){
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <arming_main+0x1f8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d019      	beq.n	8001c9a <arming_main+0x46>
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d036      	beq.n	8001cd8 <arming_main+0x84>
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d000      	beq.n	8001c70 <arming_main+0x1c>
				default:
					break;
			}
			break;
	}
}
 8001c6e:	e0e8      	b.n	8001e42 <arming_main+0x1ee>
			if(sys->radio.controller.channels[2]<1100){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001c76:	3304      	adds	r3, #4
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	f240 424b 	movw	r2, #1099	; 0x44b
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	f200 80dc 	bhi.w	8001e3c <arming_main+0x1e8>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_11, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001c84:	2300      	movs	r3, #0
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 fb1b 	bl	80022c8 <IHM_Set_Sequences>
				state = ARMING_STICK_ON_THE_RIGHT;
 8001c92:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <arming_main+0x1f8>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
			break;
 8001c98:	e0d0      	b.n	8001e3c <arming_main+0x1e8>
			if(sys->radio.controller.channels[3]>1950 && sys->radio.controller.channels[2]<1100){
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001ca0:	3306      	adds	r3, #6
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	f240 729e 	movw	r2, #1950	; 0x79e
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	f240 80c9 	bls.w	8001e40 <arming_main+0x1ec>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	f240 424b 	movw	r2, #1099	; 0x44b
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	f200 80bf 	bhi.w	8001e40 <arming_main+0x1ec>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_ON, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f000 fafc 	bl	80022c8 <IHM_Set_Sequences>
				state = ARMING_VROUM_VOUM;
 8001cd0:	4b5e      	ldr	r3, [pc, #376]	; (8001e4c <arming_main+0x1f8>)
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	701a      	strb	r2, [r3, #0]
			break;
 8001cd6:	e0b3      	b.n	8001e40 <arming_main+0x1ec>
			switch(state_vroum_vroum){
 8001cd8:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <arming_main+0x1fc>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	f200 80a3 	bhi.w	8001e28 <arming_main+0x1d4>
 8001ce2:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <arming_main+0x94>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001cfd 	.word	0x08001cfd
 8001cec:	08001d21 	.word	0x08001d21
 8001cf0:	08001daf 	.word	0x08001daf
 8001cf4:	08001ddd 	.word	0x08001ddd
 8001cf8:	08001e0b 	.word	0x08001e0b
					next_change = time_us + PERIODE_1;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 8001d02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d06:	4a53      	ldr	r2, [pc, #332]	; (8001e54 <arming_main+0x200>)
 8001d08:	6013      	str	r3, [r2, #0]
					sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	22c8      	movs	r2, #200	; 0xc8
 8001d0e:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
					state_vroum_vroum++;
 8001d12:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <arming_main+0x1fc>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <arming_main+0x1fc>)
 8001d1c:	701a      	strb	r2, [r3, #0]
					break;
 8001d1e:	e08c      	b.n	8001e3a <arming_main+0x1e6>
					elapsed = (float)time_us - (float)(next_change-PERIODE_1);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d2a:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <arming_main+0x200>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f5a3 23c3 	sub.w	r3, r3, #399360	; 0x61800
 8001d32:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d42:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <arming_main+0x204>)
 8001d44:	edc3 7a00 	vstr	s15, [r3]
					elapsed /= (float)PERIODE_1;
 8001d48:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <arming_main+0x204>)
 8001d4a:	ed93 7a00 	vldr	s14, [r3]
 8001d4e:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001e5c <arming_main+0x208>
 8001d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d56:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <arming_main+0x204>)
 8001d58:	edc3 7a00 	vstr	s15, [r3]
					sys->regulation.position.consigne = MOTORS_LOW_POWER + (uint32_t)((float)(MOTORS_HIGH_POWER - MOTORS_LOW_POWER) * elapsed);
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <arming_main+0x204>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001e60 <arming_main+0x20c>
 8001d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d6e:	ee17 3a90 	vmov	r3, s15
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3328      	adds	r3, #40	; 0x28
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
					if(time_us > next_change){
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <arming_main+0x200>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d950      	bls.n	8001e2c <arming_main+0x1d8>
						next_change = time_us + PERIODE_2;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8001d90:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8001d94:	4a2f      	ldr	r2, [pc, #188]	; (8001e54 <arming_main+0x200>)
 8001d96:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2228      	movs	r2, #40	; 0x28
 8001d9c:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
						state_vroum_vroum++;
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <arming_main+0x1fc>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <arming_main+0x1fc>)
 8001daa:	701a      	strb	r2, [r3, #0]
					break;
 8001dac:	e03e      	b.n	8001e2c <arming_main+0x1d8>
					if(time_us > next_change){
 8001dae:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <arming_main+0x200>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d93b      	bls.n	8001e30 <arming_main+0x1dc>
						next_change = time_us + PERIODE_3;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 8001dbe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001dc2:	4a24      	ldr	r2, [pc, #144]	; (8001e54 <arming_main+0x200>)
 8001dc4:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	22c8      	movs	r2, #200	; 0xc8
 8001dca:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
						state_vroum_vroum++;
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <arming_main+0x1fc>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <arming_main+0x1fc>)
 8001dd8:	701a      	strb	r2, [r3, #0]
					break;
 8001dda:	e029      	b.n	8001e30 <arming_main+0x1dc>
					if(time_us > next_change){
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <arming_main+0x200>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d926      	bls.n	8001e34 <arming_main+0x1e0>
						next_change = time_us + PERIODE_4;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8001dec:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <arming_main+0x200>)
 8001df2:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2228      	movs	r2, #40	; 0x28
 8001df8:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
						state_vroum_vroum++;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <arming_main+0x1fc>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <arming_main+0x1fc>)
 8001e06:	701a      	strb	r2, [r3, #0]
					break;
 8001e08:	e014      	b.n	8001e34 <arming_main+0x1e0>
					if(time_us > next_change){
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <arming_main+0x200>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d911      	bls.n	8001e38 <arming_main+0x1e4>
						EVENT_Set_flag(FLAG_ARMED);
 8001e14:	2019      	movs	r0, #25
 8001e16:	f000 fe51 	bl	8002abc <EVENT_Set_flag>
						state_vroum_vroum++;
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <arming_main+0x1fc>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <arming_main+0x1fc>)
 8001e24:	701a      	strb	r2, [r3, #0]
					break;
 8001e26:	e007      	b.n	8001e38 <arming_main+0x1e4>
					break;
 8001e28:	bf00      	nop
 8001e2a:	e00a      	b.n	8001e42 <arming_main+0x1ee>
					break;
 8001e2c:	bf00      	nop
 8001e2e:	e008      	b.n	8001e42 <arming_main+0x1ee>
					break;
 8001e30:	bf00      	nop
 8001e32:	e006      	b.n	8001e42 <arming_main+0x1ee>
					break;
 8001e34:	bf00      	nop
 8001e36:	e004      	b.n	8001e42 <arming_main+0x1ee>
					break;
 8001e38:	bf00      	nop
			break;
 8001e3a:	e002      	b.n	8001e42 <arming_main+0x1ee>
			break;
 8001e3c:	bf00      	nop
 8001e3e:	e000      	b.n	8001e42 <arming_main+0x1ee>
			break;
 8001e40:	bf00      	nop
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200018b0 	.word	0x200018b0
 8001e50:	200018b1 	.word	0x200018b1
 8001e54:	200018b4 	.word	0x200018b4
 8001e58:	200018b8 	.word	0x200018b8
 8001e5c:	48c35000 	.word	0x48c35000
 8001e60:	43200000 	.word	0x43200000

08001e64 <FLIGHT_MODE_Init>:
		[FLIGHT_MODE_GYRO_ACC_CALIBRATION] = 	DEF_FLIGHT_MODE(FLIGHT_MODE_GYRO_ACC_CALIBRATION, 		gyro_acc_calibration_entrance, 	gyro_acc_calibration_main),

};

//	-------------------------	Public functions	-------------------------
void FLIGHT_MODE_Init(system_t * sys_){
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	sys = sys_;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <FLIGHT_MODE_Init+0x24>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
	sys->soft.flight_mode = &current_flight_mode;
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <FLIGHT_MODE_Init+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <FLIGHT_MODE_Init+0x28>)
 8001e78:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	200018bc 	.word	0x200018bc
 8001e8c:	200018c0 	.word	0x200018c0

08001e90 <FLIGHT_MODE_Set_Flight_Mode>:

//Dont call it from an it plz for now ..
void FLIGHT_MODE_Set_Flight_Mode(flight_modes_names_e new){
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
	next_flight_mode = new ;
 8001e9a:	4a04      	ldr	r2, [pc, #16]	; (8001eac <FLIGHT_MODE_Set_Flight_Mode+0x1c>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	7013      	strb	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	200018c1 	.word	0x200018c1

08001eb0 <FLIGHT_MODE_Main>:

void FLIGHT_MODE_Main(uint32_t time_us){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	//Check if we have to change the current flight mode
	if(next_flight_mode != current_flight_mode){
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <FLIGHT_MODE_Main+0xa0>)
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <FLIGHT_MODE_Main+0xa4>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d02b      	beq.n	8001f1c <FLIGHT_MODE_Main+0x6c>

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(flights_modes[current_flight_mode].function_leave != NULL)
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <FLIGHT_MODE_Main+0xa4>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <FLIGHT_MODE_Main+0xa8>)
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	4413      	add	r3, r2
 8001ece:	330c      	adds	r3, #12
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <FLIGHT_MODE_Main+0x3c>
			flights_modes[current_flight_mode].function_leave(sys);
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <FLIGHT_MODE_Main+0xa4>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <FLIGHT_MODE_Main+0xa8>)
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4413      	add	r3, r2
 8001ee0:	330c      	adds	r3, #12
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <FLIGHT_MODE_Main+0xac>)
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4798      	blx	r3

		//Call the entrance function associated to the next flight mode if it exists
		if(flights_modes[next_flight_mode].function_entrance != NULL)
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <FLIGHT_MODE_Main+0xa0>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <FLIGHT_MODE_Main+0xa8>)
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <FLIGHT_MODE_Main+0x64>
			flights_modes[next_flight_mode].function_entrance(sys);
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <FLIGHT_MODE_Main+0xa0>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <FLIGHT_MODE_Main+0xa8>)
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	4413      	add	r3, r2
 8001f08:	3304      	adds	r3, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <FLIGHT_MODE_Main+0xac>)
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	4610      	mov	r0, r2
 8001f12:	4798      	blx	r3

		//Change the current flight mode
		current_flight_mode = next_flight_mode ;
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <FLIGHT_MODE_Main+0xa0>)
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <FLIGHT_MODE_Main+0xa4>)
 8001f1a:	701a      	strb	r2, [r3, #0]
	}
	//Call the function associated to the current flight mode
	if(flights_modes[next_flight_mode].function_main != NULL)
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <FLIGHT_MODE_Main+0xa0>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <FLIGHT_MODE_Main+0xa8>)
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	4413      	add	r3, r2
 8001f26:	3308      	adds	r3, #8
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <FLIGHT_MODE_Main+0x96>
		flights_modes[current_flight_mode].function_main(sys, time_us);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <FLIGHT_MODE_Main+0xa4>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <FLIGHT_MODE_Main+0xa8>)
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	3308      	adds	r3, #8
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <FLIGHT_MODE_Main+0xac>)
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4610      	mov	r0, r2
 8001f44:	4798      	blx	r3

}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200018c1 	.word	0x200018c1
 8001f54:	200018c0 	.word	0x200018c0
 8001f58:	200000dc 	.word	0x200000dc
 8001f5c:	200018bc 	.word	0x200018bc

08001f60 <gyro_acc_calibration_entrance>:

#include "Flight_mode.h"
#include "../OS/events/events.h"
#include "../OS/events/flags.h"

void gyro_acc_calibration_entrance(system_t * sys){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_3);
 8001f68:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2001      	movs	r0, #1
 8001f72:	f000 f9a9 	bl	80022c8 <IHM_Set_Sequences>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <gyro_acc_calibration_main>:
void gyro_acc_calibration_main(system_t * sys, uint32_t time_us){
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]

	if(GYRO_calibrate(&sys->sensors.gyro, 1500)){	//The high lvl runs at 500 HZ so 1500 by 500 => 3 secs of calibration
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3330      	adds	r3, #48	; 0x30
 8001f8c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001f90:	4618      	mov	r0, r3
 8001f92:	f002 fa4f 	bl	8004434 <GYRO_calibrate>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d009      	beq.n	8001fb0 <gyro_acc_calibration_main+0x32>
		EVENT_Set_flag(FLAG_GYRO_CALI_DONE);
 8001f9c:	201c      	movs	r0, #28
 8001f9e:	f000 fd8d 	bl	8002abc <EVENT_Set_flag>
		IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2001      	movs	r0, #1
 8001fac:	f000 f98c 	bl	80022c8 <IHM_Set_Sequences>
	}

}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <manual_accro_entrance>:
 */


#include "Flight_mode.h"

void manual_accro_entrance(system_t * sys){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f001 ffb1 	bl	8003f28 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f002 f904 	bl	80041d4 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_1);
 8001fcc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f000 f977 	bl	80022c8 <IHM_Set_Sequences>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <manual_accro_main>:

void manual_accro_main(system_t * sys, uint32_t time_us){
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL] = -((float)sys->radio.controller.channels[0]-1500);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffe:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002090 <manual_accro_main+0xac>
 8002002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002006:	eef1 7a67 	vneg.f32	s15, s15
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 8002010:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH] = -((float)sys->radio.controller.channels[1]-1500);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800201a:	3302      	adds	r3, #2
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002026:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002090 <manual_accro_main+0xac>
 800202a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800202e:	eef1 7a67 	vneg.f32	s15, s15
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8002038:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002042:	3306      	adds	r3, #6
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002090 <manual_accro_main+0xac>
 8002052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002056:	eef1 7a67 	vneg.f32	s15, s15
 800205a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002094 <manual_accro_main+0xb0>
 800205e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002068:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002072:	3304      	adds	r3, #4
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800207a:	b29b      	uxth	r3, r3
 800207c:	b21a      	sxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	44bb8000 	.word	0x44bb8000
 8002094:	3f99999a 	.word	0x3f99999a

08002098 <manual_angle_entrance>:
 *      Author: Théo
 */

#include "Flight_mode.h"

void manual_angle_entrance(system_t * sys){
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ANGLE);
 80020a0:	2002      	movs	r0, #2
 80020a2:	f001 ff41 	bl	8003f28 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f002 f894 	bl	80041d4 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_7);
 80020ac:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	2000      	movs	r0, #0
 80020b6:	f000 f907 	bl	80022c8 <IHM_Set_Sequences>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <manual_angle_main>:
void manual_angle_main(system_t * sys, uint32_t time_us){
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL] = -((float)sys->radio.controller.channels[0]-1500)*0.1f;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020de:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002180 <manual_angle_main+0xbc>
 80020e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020e6:	eef1 7a67 	vneg.f32	s15, s15
 80020ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002184 <manual_angle_main+0xc0>
 80020ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 80020f8:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH] = -((float)sys->radio.controller.channels[1]-1500)*0.1f;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002102:	3302      	adds	r3, #2
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002180 <manual_angle_main+0xbc>
 8002112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002116:	eef1 7a67 	vneg.f32	s15, s15
 800211a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002184 <manual_angle_main+0xc0>
 800211e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8002128:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002132:	3306      	adds	r3, #6
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002180 <manual_angle_main+0xbc>
 8002142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002146:	eef1 7a67 	vneg.f32	s15, s15
 800214a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002188 <manual_angle_main+0xc4>
 800214e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002158:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002162:	3304      	adds	r3, #4
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800216a:	b29b      	uxth	r3, r3
 800216c:	b21a      	sxth	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	44bb8000 	.word	0x44bb8000
 8002184:	3dcccccd 	.word	0x3dcccccd
 8002188:	3f99999a 	.word	0x3f99999a

0800218c <on_the_ground_entrance>:
 *  Created on: 19 déc. 2020
 *      Author: theom
 */
#include "Flight_mode.h"

void on_the_ground_entrance(system_t * sys){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8002194:	2000      	movs	r0, #0
 8002196:	f001 fec7 	bl	8003f28 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_OFF);
 800219a:	2000      	movs	r0, #0
 800219c:	f002 f81a 	bl	80041d4 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80021a0:	2300      	movs	r3, #0
 80021a2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80021a6:	2100      	movs	r1, #0
 80021a8:	2000      	movs	r0, #0
 80021aa:	f000 f88d 	bl	80022c8 <IHM_Set_Sequences>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <on_the_ground_main>:
void on_the_ground_main(system_t * sys, uint32_t time_us){
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <IHM_Init>:





void IHM_Init(Ihm_t * ihm_){
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	ihm = ihm_;
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <IHM_Init+0x1c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	200018c4 	.word	0x200018c4

080021ec <IHM_Led_Init>:

void IHM_Led_Init(led_name_e name, uint32_t periode, uint16_t pin, led_output_logic_e output_logic){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6039      	str	r1, [r7, #0]
 80021f4:	4611      	mov	r1, r2
 80021f6:	461a      	mov	r2, r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
 80021fc:	460b      	mov	r3, r1
 80021fe:	80bb      	strh	r3, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	ihm->leds[name].periode = periode ;
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <IHM_Led_Init+0x80>)
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	79fa      	ldrb	r2, [r7, #7]
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	330c      	adds	r3, #12
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	601a      	str	r2, [r3, #0]
	ihm->leds[name].pin = pin ;
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <IHM_Led_Init+0x80>)
 800221c:	6819      	ldr	r1, [r3, #0]
 800221e:	79fa      	ldrb	r2, [r7, #7]
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	3310      	adds	r3, #16
 800222c:	88ba      	ldrh	r2, [r7, #4]
 800222e:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].output_logic = output_logic ;
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <IHM_Led_Init+0x80>)
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	79fa      	ldrb	r2, [r7, #7]
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	3314      	adds	r3, #20
 8002242:	79ba      	ldrb	r2, [r7, #6]
 8002244:	701a      	strb	r2, [r3, #0]

	//Set the outputs low
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e008      	b.n	800225e <IHM_Led_Init+0x72>
		IHM_Set_Sequence(name, c, SEQUENCE_LED_OFF);
 800224c:	7bf9      	ldrb	r1, [r7, #15]
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2200      	movs	r2, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f80c 	bl	8002270 <IHM_Set_Sequence>
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	3301      	adds	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d9f3      	bls.n	800224c <IHM_Led_Init+0x60>
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200018c4 	.word	0x200018c4

08002270 <IHM_Set_Sequence>:

void IHM_Set_Sequence(led_name_e name, led_color_e color, uint16_t sequence){
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	460b      	mov	r3, r1
 800227c:	71bb      	strb	r3, [r7, #6]
 800227e:	4613      	mov	r3, r2
 8002280:	80bb      	strh	r3, [r7, #4]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE)
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <IHM_Set_Sequence+0x54>)
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	79fa      	ldrb	r2, [r7, #7]
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	3314      	adds	r3, #20
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d102      	bne.n	80022a0 <IHM_Set_Sequence+0x30>
		sequence = ~sequence ;
 800229a:	88bb      	ldrh	r3, [r7, #4]
 800229c:	43db      	mvns	r3, r3
 800229e:	80bb      	strh	r3, [r7, #4]
	ihm->leds[name].seqs[color] = sequence ;
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <IHM_Set_Sequence+0x54>)
 80022a2:	6819      	ldr	r1, [r3, #0]
 80022a4:	79fa      	ldrb	r2, [r7, #7]
 80022a6:	79b8      	ldrb	r0, [r7, #6]
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4403      	add	r3, r0
 80022b2:	88ba      	ldrh	r2, [r7, #4]
 80022b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	200018c4 	.word	0x200018c4

080022c8 <IHM_Set_Sequences>:

void IHM_Set_Sequences(led_name_e name, uint16_t sequence_red, uint16_t sequence_green, uint16_t sequence_blue){
 80022c8:	b490      	push	{r4, r7}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4604      	mov	r4, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	4623      	mov	r3, r4
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	4603      	mov	r3, r0
 80022dc:	80bb      	strh	r3, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	807b      	strh	r3, [r7, #2]
 80022e2:	4613      	mov	r3, r2
 80022e4:	803b      	strh	r3, [r7, #0]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE){
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <IHM_Set_Sequences+0x94>)
 80022e8:	6819      	ldr	r1, [r3, #0]
 80022ea:	79fa      	ldrb	r2, [r7, #7]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	3314      	adds	r3, #20
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d108      	bne.n	8002310 <IHM_Set_Sequences+0x48>
		sequence_red = ~sequence_red ;
 80022fe:	88bb      	ldrh	r3, [r7, #4]
 8002300:	43db      	mvns	r3, r3
 8002302:	80bb      	strh	r3, [r7, #4]
		sequence_green = ~sequence_green ;
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	43db      	mvns	r3, r3
 8002308:	807b      	strh	r3, [r7, #2]
		sequence_blue = ~sequence_blue ;
 800230a:	883b      	ldrh	r3, [r7, #0]
 800230c:	43db      	mvns	r3, r3
 800230e:	803b      	strh	r3, [r7, #0]
	}
	ihm->leds[name].seqs[LED_COLOR_RED] = sequence_red ;
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <IHM_Set_Sequences+0x94>)
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	79fa      	ldrb	r2, [r7, #7]
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	88ba      	ldrh	r2, [r7, #4]
 8002322:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_GREEN] = sequence_green ;
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <IHM_Set_Sequences+0x94>)
 8002326:	6819      	ldr	r1, [r3, #0]
 8002328:	79fa      	ldrb	r2, [r7, #7]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	3302      	adds	r3, #2
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_BLUE] = sequence_blue ;
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <IHM_Set_Sequences+0x94>)
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	3304      	adds	r3, #4
 800234c:	883a      	ldrh	r2, [r7, #0]
 800234e:	801a      	strh	r2, [r3, #0]
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bc90      	pop	{r4, r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	200018c4 	.word	0x200018c4

08002360 <IHM_Update>:

void IHM_Update(void){
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0

	//Increment the counter each time (since we re called at 1kHz
	compteur ++ ;
 8002366:	4b8a      	ldr	r3, [pc, #552]	; (8002590 <IHM_Update+0x230>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	4a88      	ldr	r2, [pc, #544]	; (8002590 <IHM_Update+0x230>)
 800236e:	6013      	str	r3, [r2, #0]
	//Update the current color and the current led
	current_led = compteur % LED_COUNT ;
 8002370:	4b87      	ldr	r3, [pc, #540]	; (8002590 <IHM_Update+0x230>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b85      	ldr	r3, [pc, #532]	; (8002594 <IHM_Update+0x234>)
 800237e:	701a      	strb	r2, [r3, #0]

	//Check if we have to change the current bit
	if(compteur > ihm->leds[current_led].next_time)
 8002380:	4b85      	ldr	r3, [pc, #532]	; (8002598 <IHM_Update+0x238>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b83      	ldr	r3, [pc, #524]	; (8002594 <IHM_Update+0x234>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	460b      	mov	r3, r1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	440b      	add	r3, r1
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	3308      	adds	r3, #8
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b7d      	ldr	r3, [pc, #500]	; (8002590 <IHM_Update+0x230>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d259      	bcs.n	8002454 <IHM_Update+0xf4>
	{
		ihm->leds[current_led].current_bit >>= 1;
 80023a0:	4b7d      	ldr	r3, [pc, #500]	; (8002598 <IHM_Update+0x238>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b7b      	ldr	r3, [pc, #492]	; (8002594 <IHM_Update+0x234>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	460b      	mov	r3, r1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	440b      	add	r3, r1
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	3312      	adds	r3, #18
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	4a77      	ldr	r2, [pc, #476]	; (8002598 <IHM_Update+0x238>)
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	4975      	ldr	r1, [pc, #468]	; (8002594 <IHM_Update+0x234>)
 80023be:	7809      	ldrb	r1, [r1, #0]
 80023c0:	085b      	lsrs	r3, r3, #1
 80023c2:	b298      	uxth	r0, r3
 80023c4:	460b      	mov	r3, r1
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	440b      	add	r3, r1
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	3312      	adds	r3, #18
 80023d0:	4602      	mov	r2, r0
 80023d2:	801a      	strh	r2, [r3, #0]
		ihm->leds[current_led].next_time += ihm->leds[current_led].periode ;
 80023d4:	4b70      	ldr	r3, [pc, #448]	; (8002598 <IHM_Update+0x238>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b6e      	ldr	r3, [pc, #440]	; (8002594 <IHM_Update+0x234>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	460b      	mov	r3, r1
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	440b      	add	r3, r1
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	3308      	adds	r3, #8
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <IHM_Update+0x238>)
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <IHM_Update+0x234>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4403      	add	r3, r0
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	330c      	adds	r3, #12
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4964      	ldr	r1, [pc, #400]	; (8002598 <IHM_Update+0x238>)
 8002406:	6809      	ldr	r1, [r1, #0]
 8002408:	4862      	ldr	r0, [pc, #392]	; (8002594 <IHM_Update+0x234>)
 800240a:	7800      	ldrb	r0, [r0, #0]
 800240c:	441a      	add	r2, r3
 800240e:	4603      	mov	r3, r0
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4403      	add	r3, r0
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	3308      	adds	r3, #8
 800241a:	601a      	str	r2, [r3, #0]

		if(ihm->leds[current_led].current_bit == 0)
 800241c:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <IHM_Update+0x238>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <IHM_Update+0x234>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	460b      	mov	r3, r1
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	440b      	add	r3, r1
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	3312      	adds	r3, #18
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10d      	bne.n	8002454 <IHM_Update+0xf4>
			ihm->leds[current_led].current_bit = 1 << (SEQUENCE_LEN-1);
 8002438:	4b57      	ldr	r3, [pc, #348]	; (8002598 <IHM_Update+0x238>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b55      	ldr	r3, [pc, #340]	; (8002594 <IHM_Update+0x234>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	460b      	mov	r3, r1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	440b      	add	r3, r1
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	3312      	adds	r3, #18
 800244e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002452:	801a      	strh	r2, [r3, #0]
	}

	uint16_t pins_high = 0 ;
 8002454:	2300      	movs	r3, #0
 8002456:	80fb      	strh	r3, [r7, #6]
	uint16_t pins_low = 0 ;
 8002458:	2300      	movs	r3, #0
 800245a:	80bb      	strh	r3, [r7, #4]
	uint16_t current_bit =  ihm->leds[current_led].current_bit ;
 800245c:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <IHM_Update+0x238>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b4c      	ldr	r3, [pc, #304]	; (8002594 <IHM_Update+0x234>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	460b      	mov	r3, r1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	440b      	add	r3, r1
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	3312      	adds	r3, #18
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	803b      	strh	r3, [r7, #0]

	//For each color, check if we have to set outputs high or low
	if(ihm->leds[current_led].seqs[LED_COLOR_RED] & current_bit)		//Red pin high ?
 8002476:	4b48      	ldr	r3, [pc, #288]	; (8002598 <IHM_Update+0x238>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b46      	ldr	r3, [pc, #280]	; (8002594 <IHM_Update+0x234>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	4619      	mov	r1, r3
 8002480:	460b      	mov	r3, r1
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	440b      	add	r3, r1
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	881a      	ldrh	r2, [r3, #0]
 800248c:	883b      	ldrh	r3, [r7, #0]
 800248e:	4013      	ands	r3, r2
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <IHM_Update+0x142>
		pins_high += pin_color[LED_COLOR_RED];
 8002496:	4b41      	ldr	r3, [pc, #260]	; (800259c <IHM_Update+0x23c>)
 8002498:	881a      	ldrh	r2, [r3, #0]
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	4413      	add	r3, r2
 800249e:	80fb      	strh	r3, [r7, #6]
 80024a0:	e004      	b.n	80024ac <IHM_Update+0x14c>
	else
		pins_low += pin_color[LED_COLOR_RED];
 80024a2:	4b3e      	ldr	r3, [pc, #248]	; (800259c <IHM_Update+0x23c>)
 80024a4:	881a      	ldrh	r2, [r3, #0]
 80024a6:	88bb      	ldrh	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_GREEN] & current_bit)		//Green pin High ?
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <IHM_Update+0x238>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b38      	ldr	r3, [pc, #224]	; (8002594 <IHM_Update+0x234>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	460b      	mov	r3, r1
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	440b      	add	r3, r1
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	3302      	adds	r3, #2
 80024c2:	881a      	ldrh	r2, [r3, #0]
 80024c4:	883b      	ldrh	r3, [r7, #0]
 80024c6:	4013      	ands	r3, r2
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <IHM_Update+0x17a>
		pins_high += pin_color[LED_COLOR_GREEN];
 80024ce:	4b33      	ldr	r3, [pc, #204]	; (800259c <IHM_Update+0x23c>)
 80024d0:	885a      	ldrh	r2, [r3, #2]
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	4413      	add	r3, r2
 80024d6:	80fb      	strh	r3, [r7, #6]
 80024d8:	e004      	b.n	80024e4 <IHM_Update+0x184>
	else
		pins_low += pin_color[LED_COLOR_GREEN];
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <IHM_Update+0x23c>)
 80024dc:	885a      	ldrh	r2, [r3, #2]
 80024de:	88bb      	ldrh	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_BLUE] & current_bit)		//Blue pin high ?
 80024e4:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <IHM_Update+0x238>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <IHM_Update+0x234>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	460b      	mov	r3, r1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	440b      	add	r3, r1
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	881a      	ldrh	r2, [r3, #0]
 80024fc:	883b      	ldrh	r3, [r7, #0]
 80024fe:	4013      	ands	r3, r2
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <IHM_Update+0x1b2>
		pins_high |= pin_color[LED_COLOR_BLUE];
 8002506:	4b25      	ldr	r3, [pc, #148]	; (800259c <IHM_Update+0x23c>)
 8002508:	889a      	ldrh	r2, [r3, #4]
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	4313      	orrs	r3, r2
 800250e:	80fb      	strh	r3, [r7, #6]
 8002510:	e004      	b.n	800251c <IHM_Update+0x1bc>
	else
		pins_low |= pin_color[LED_COLOR_BLUE];
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <IHM_Update+0x23c>)
 8002514:	889a      	ldrh	r2, [r3, #4]
 8002516:	88bb      	ldrh	r3, [r7, #4]
 8002518:	4313      	orrs	r3, r2
 800251a:	80bb      	strh	r3, [r7, #4]

	//Then we activate the current led
	for(uint8_t l = 0; l < LED_COUNT; l++){
 800251c:	2300      	movs	r3, #0
 800251e:	70fb      	strb	r3, [r7, #3]
 8002520:	e022      	b.n	8002568 <IHM_Update+0x208>
		if(l == current_led)
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <IHM_Update+0x234>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	429a      	cmp	r2, r3
 800252a:	d10d      	bne.n	8002548 <IHM_Update+0x1e8>
			pins_high |= ihm->leds[l].pin ;
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <IHM_Update+0x238>)
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	3310      	adds	r3, #16
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	4313      	orrs	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
 8002546:	e00c      	b.n	8002562 <IHM_Update+0x202>
		else
			pins_low |= ihm->leds[l].pin ;
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <IHM_Update+0x238>)
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	3310      	adds	r3, #16
 800255a:	881a      	ldrh	r2, [r3, #0]
 800255c:	88bb      	ldrh	r3, [r7, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	80bb      	strh	r3, [r7, #4]
	for(uint8_t l = 0; l < LED_COUNT; l++){
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	3301      	adds	r3, #1
 8002566:	70fb      	strb	r3, [r7, #3]
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d9d9      	bls.n	8002522 <IHM_Update+0x1c2>
	}
	HAL_GPIO_WritePin(GPIOC, pins_high, GPIO_PIN_SET);
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2201      	movs	r2, #1
 8002572:	4619      	mov	r1, r3
 8002574:	480a      	ldr	r0, [pc, #40]	; (80025a0 <IHM_Update+0x240>)
 8002576:	f005 fc0d 	bl	8007d94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, pins_low, GPIO_PIN_RESET);
 800257a:	88bb      	ldrh	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	4807      	ldr	r0, [pc, #28]	; (80025a0 <IHM_Update+0x240>)
 8002582:	f005 fc07 	bl	8007d94 <HAL_GPIO_WritePin>





}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200018c8 	.word	0x200018c8
 8002594:	200018cc 	.word	0x200018cc
 8002598:	200018c4 	.word	0x200018c4
 800259c:	2000012c 	.word	0x2000012c
 80025a0:	40020800 	.word	0x40020800

080025a4 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 80025a8:	4803      	ldr	r0, [pc, #12]	; (80025b8 <DEBUG_init+0x14>)
 80025aa:	f000 f809 	bl	80025c0 <RetargetInit>
	printf("Debuger is init\n");
 80025ae:	4803      	ldr	r0, [pc, #12]	; (80025bc <DEBUG_init+0x18>)
 80025b0:	f00a f97e 	bl	800c8b0 <puts>
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20002b74 	.word	0x20002b74
 80025bc:	0800ead8 	.word	0x0800ead8

080025c0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <RetargetInit+0x28>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <RetargetInit+0x2c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6898      	ldr	r0, [r3, #8]
 80025d4:	2300      	movs	r3, #0
 80025d6:	2202      	movs	r2, #2
 80025d8:	2100      	movs	r1, #0
 80025da:	f00a f971 	bl	800c8c0 <setvbuf>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200019cc 	.word	0x200019cc
 80025ec:	20001514 	.word	0x20001514

080025f0 <_isatty>:

int _isatty(int fd) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	db04      	blt.n	8002608 <_isatty+0x18>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b02      	cmp	r3, #2
 8002602:	dc01      	bgt.n	8002608 <_isatty+0x18>
    return 1;
 8002604:	2301      	movs	r3, #1
 8002606:	e005      	b.n	8002614 <_isatty+0x24>

  errno = EBADF;
 8002608:	f009 fc2c 	bl	800be64 <__errno>
 800260c:	4602      	mov	r2, r0
 800260e:	2309      	movs	r3, #9
 8002610:	6013      	str	r3, [r2, #0]
  return 0;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <_write>:

int _write(int fd, char* ptr, int len) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d002      	beq.n	8002634 <_write+0x18>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d110      	bne.n	8002656 <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <_write+0x50>)
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	b29a      	uxth	r2, r3
 800263c:	2364      	movs	r3, #100	; 0x64
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	f007 ff0f 	bl	800a462 <HAL_UART_Transmit>
 8002644:	4603      	mov	r3, r0
 8002646:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <_write+0x36>
      return len;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	e008      	b.n	8002664 <_write+0x48>
    else
      return EIO;
 8002652:	2305      	movs	r3, #5
 8002654:	e006      	b.n	8002664 <_write+0x48>
  }
  errno = EBADF;
 8002656:	f009 fc05 	bl	800be64 <__errno>
 800265a:	4602      	mov	r2, r0
 800265c:	2309      	movs	r3, #9
 800265e:	6013      	str	r3, [r2, #0]
  return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	200019cc 	.word	0x200019cc

08002670 <_close>:

int _close(int fd) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db04      	blt.n	8002688 <_close+0x18>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b02      	cmp	r3, #2
 8002682:	dc01      	bgt.n	8002688 <_close+0x18>
    return 0;
 8002684:	2300      	movs	r3, #0
 8002686:	e006      	b.n	8002696 <_close+0x26>

  errno = EBADF;
 8002688:	f009 fbec 	bl	800be64 <__errno>
 800268c:	4602      	mov	r2, r0
 800268e:	2309      	movs	r3, #9
 8002690:	6013      	str	r3, [r2, #0]
  return -1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80026aa:	f009 fbdb 	bl	800be64 <__errno>
 80026ae:	4602      	mov	r2, r0
 80026b0:	2309      	movs	r3, #9
 80026b2:	6013      	str	r3, [r2, #0]
  return -1;
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_read>:

int _read(int fd, char* ptr, int len) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d110      	bne.n	80026f4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <_read+0x4c>)
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	2201      	movs	r2, #1
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	f007 ff59 	bl	800a594 <HAL_UART_Receive>
 80026e2:	4603      	mov	r3, r0
 80026e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <_read+0x30>
      return 1;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e008      	b.n	8002702 <_read+0x42>
    else
      return EIO;
 80026f0:	2305      	movs	r3, #5
 80026f2:	e006      	b.n	8002702 <_read+0x42>
  }
  errno = EBADF;
 80026f4:	f009 fbb6 	bl	800be64 <__errno>
 80026f8:	4602      	mov	r2, r0
 80026fa:	2309      	movs	r3, #9
 80026fc:	6013      	str	r3, [r2, #0]
  return -1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200019cc 	.word	0x200019cc

08002710 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db08      	blt.n	8002732 <_fstat+0x22>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	dc05      	bgt.n	8002732 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800272c:	605a      	str	r2, [r3, #4]
    return 0;
 800272e:	2300      	movs	r3, #0
 8002730:	e005      	b.n	800273e <_fstat+0x2e>
  }

  errno = EBADF;
 8002732:	f009 fb97 	bl	800be64 <__errno>
 8002736:	4602      	mov	r2, r0
 8002738:	2309      	movs	r3, #9
 800273a:	6013      	str	r3, [r2, #0]
  return 0;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <gyro_init_ok_func>:
		[EVENT_GYRO_ACC_CALIBRATION] = 	DEFINE_EVENT(gyro_acc_calibration, 	MASK_GYRO_ACC_COUNT, 			EVENT_ENABLED),


};

static void gyro_init_ok_func(mask_def_ids_t mask_id){
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_GYRO_READING);
 8002752:	2001      	movs	r0, #1
 8002754:	f000 f9b2 	bl	8002abc <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 8002758:	2101      	movs	r1, #1
 800275a:	2004      	movs	r0, #4
 800275c:	f000 fd8e 	bl	800327c <SCHEDULER_task_set_mode>
	events_main[EVENT_GYRO_INIT_OK].state = EVENT_DISABLED ;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <gyro_init_ok_func+0x28>)
 8002762:	2201      	movs	r2, #1
 8002764:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000134 	.word	0x20000134

08002774 <acc_init_ok_func>:

static void acc_init_ok_func(mask_def_ids_t mask_id){
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_ACC_READING);
 800277e:	2005      	movs	r0, #5
 8002780:	f000 f99c 	bl	8002abc <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 8002784:	2101      	movs	r1, #1
 8002786:	2006      	movs	r0, #6
 8002788:	f000 fd78 	bl	800327c <SCHEDULER_task_set_mode>
	events_main[EVENT_ACC_INIT_OK].state = EVENT_DISABLED ;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <acc_init_ok_func+0x28>)
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000134 	.word	0x20000134

080027a0 <ibus_data_rdy>:

static void ibus_data_rdy(mask_def_ids_t mask_id){
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027aa:	b672      	cpsid	i
	//On clean le flag ibus_data_rdy
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_IBUS_DATA_RDY);
 80027ac:	2108      	movs	r1, #8
 80027ae:	4806      	ldr	r0, [pc, #24]	; (80027c8 <ibus_data_rdy+0x28>)
 80027b0:	f000 fa43 	bl	8002c3a <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80027b4:	b662      	cpsie	i
	__enable_irq();
	//On déclenche la tâche de traitement des octets pour l ibus
	SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_UPDATE, TASK_MODE_EVENT);
 80027b6:	2102      	movs	r1, #2
 80027b8:	2009      	movs	r0, #9
 80027ba:	f000 fd5f 	bl	800327c <SCHEDULER_task_set_mode>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200018d0 	.word	0x200018d0

080027cc <on_the_ground>:

static void on_the_ground(mask_def_ids_t mask_id){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80027d6:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_FLYING);
 80027d8:	211d      	movs	r1, #29
 80027da:	480d      	ldr	r0, [pc, #52]	; (8002810 <on_the_ground+0x44>)
 80027dc:	f000 fa2d 	bl	8002c3a <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMED);
 80027e0:	2119      	movs	r1, #25
 80027e2:	480b      	ldr	r0, [pc, #44]	; (8002810 <on_the_ground+0x44>)
 80027e4:	f000 fa29 	bl	8002c3a <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_BUSY);
 80027e8:	211a      	movs	r1, #26
 80027ea:	4809      	ldr	r0, [pc, #36]	; (8002810 <on_the_ground+0x44>)
 80027ec:	f000 fa25 	bl	8002c3a <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMING);
 80027f0:	2118      	movs	r1, #24
 80027f2:	4807      	ldr	r0, [pc, #28]	; (8002810 <on_the_ground+0x44>)
 80027f4:	f000 fa21 	bl	8002c3a <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 80027f8:	211b      	movs	r1, #27
 80027fa:	4805      	ldr	r0, [pc, #20]	; (8002810 <on_the_ground+0x44>)
 80027fc:	f000 fa1d 	bl	8002c3a <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002800:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ON_THE_GROUND);
 8002802:	2000      	movs	r0, #0
 8002804:	f7ff fb44 	bl	8001e90 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200018d0 	.word	0x200018d0

08002814 <manual_accro>:
static void manual_accro(mask_def_ids_t mask_id){
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800281e:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8002820:	211d      	movs	r1, #29
 8002822:	4807      	ldr	r0, [pc, #28]	; (8002840 <manual_accro+0x2c>)
 8002824:	f000 f9d9 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8002828:	211e      	movs	r1, #30
 800282a:	4805      	ldr	r0, [pc, #20]	; (8002840 <manual_accro+0x2c>)
 800282c:	f000 f9d5 	bl	8002bda <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002830:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ACCRO);
 8002832:	2001      	movs	r0, #1
 8002834:	f7ff fb2c 	bl	8001e90 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	200018d0 	.word	0x200018d0

08002844 <manual_angle>:

static void manual_angle(mask_def_ids_t mask_id){
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800284e:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8002850:	211d      	movs	r1, #29
 8002852:	4807      	ldr	r0, [pc, #28]	; (8002870 <manual_angle+0x2c>)
 8002854:	f000 f9c1 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8002858:	211e      	movs	r1, #30
 800285a:	4805      	ldr	r0, [pc, #20]	; (8002870 <manual_angle+0x2c>)
 800285c:	f000 f9bd 	bl	8002bda <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002860:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ANGLE);
 8002862:	2002      	movs	r0, #2
 8002864:	f7ff fb14 	bl	8001e90 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200018d0 	.word	0x200018d0

08002874 <gyro_data_ready_func>:

static void gyro_data_ready_func(mask_def_ids_t mask_id){
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800287e:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 8002880:	2102      	movs	r1, #2
 8002882:	4806      	ldr	r0, [pc, #24]	; (800289c <gyro_data_ready_func+0x28>)
 8002884:	f000 f9d9 	bl	8002c3a <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002888:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 800288a:	2102      	movs	r1, #2
 800288c:	2005      	movs	r0, #5
 800288e:	f000 fcf5 	bl	800327c <SCHEDULER_task_set_mode>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200018d0 	.word	0x200018d0

080028a0 <acc_data_ready_func>:

static void acc_data_ready_func(mask_def_ids_t mask_id){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80028aa:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 80028ac:	2106      	movs	r1, #6
 80028ae:	4806      	ldr	r0, [pc, #24]	; (80028c8 <acc_data_ready_func+0x28>)
 80028b0:	f000 f9c3 	bl	8002c3a <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80028b4:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 80028b6:	2102      	movs	r1, #2
 80028b8:	2007      	movs	r0, #7
 80028ba:	f000 fcdf 	bl	800327c <SCHEDULER_task_set_mode>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200018d0 	.word	0x200018d0

080028cc <orientation_update>:

static void orientation_update(mask_def_ids_t mask_id){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80028d6:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 80028d8:	2107      	movs	r1, #7
 80028da:	4808      	ldr	r0, [pc, #32]	; (80028fc <orientation_update+0x30>)
 80028dc:	f000 f9ad 	bl	8002c3a <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 80028e0:	2103      	movs	r1, #3
 80028e2:	4806      	ldr	r0, [pc, #24]	; (80028fc <orientation_update+0x30>)
 80028e4:	f000 f9a9 	bl	8002c3a <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80028e8:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 80028ea:	2102      	movs	r1, #2
 80028ec:	2008      	movs	r0, #8
 80028ee:	f000 fcc5 	bl	800327c <SCHEDULER_task_set_mode>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200018d0 	.word	0x200018d0

08002900 <arming>:

static void arming(mask_def_ids_t mask_id){
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800290a:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_ARMING);
 800290c:	2118      	movs	r1, #24
 800290e:	4807      	ldr	r0, [pc, #28]	; (800292c <arming+0x2c>)
 8002910:	f000 f963 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);	//We re now busy => cant go in calibration mode or other "on the ground" modes
 8002914:	211a      	movs	r1, #26
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <arming+0x2c>)
 8002918:	f000 f95f 	bl	8002bda <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800291c:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ARMING);
 800291e:	2003      	movs	r0, #3
 8002920:	f7ff fab6 	bl	8001e90 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200018d0 	.word	0x200018d0

08002930 <gyro_acc_calibration>:

static void gyro_acc_calibration(mask_def_ids_t mask_id){
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800293a:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 800293c:	211b      	movs	r1, #27
 800293e:	480b      	ldr	r0, [pc, #44]	; (800296c <gyro_acc_calibration+0x3c>)
 8002940:	f000 f94b 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);
 8002944:	211a      	movs	r1, #26
 8002946:	4809      	ldr	r0, [pc, #36]	; (800296c <gyro_acc_calibration+0x3c>)
 8002948:	f000 f947 	bl	8002bda <MASK_set_flag>
	MASK_clean_flag(&flags, FLAG_CHAN_9_PUSH);
 800294c:	2113      	movs	r1, #19
 800294e:	4807      	ldr	r0, [pc, #28]	; (800296c <gyro_acc_calibration+0x3c>)
 8002950:	f000 f973 	bl	8002c3a <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_DONE);
 8002954:	211c      	movs	r1, #28
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <gyro_acc_calibration+0x3c>)
 8002958:	f000 f96f 	bl	8002c3a <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800295c:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_GYRO_ACC_CALIBRATION);
 800295e:	2004      	movs	r0, #4
 8002960:	f7ff fa96 	bl	8001e90 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	200018d0 	.word	0x200018d0

08002970 <EVENT_init>:


void EVENT_init(system_t * sys_){
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	initialized = TRUE ;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <EVENT_init+0x24>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]
	sys =sys_;
 800297e:	4a06      	ldr	r2, [pc, #24]	; (8002998 <EVENT_init+0x28>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6013      	str	r3, [r2, #0]

	//Configuration des mask associés aux events
	mask_def_events_init(events_main);
 8002984:	4805      	ldr	r0, [pc, #20]	; (800299c <EVENT_init+0x2c>)
 8002986:	f000 f987 	bl	8002c98 <mask_def_events_init>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200018e0 	.word	0x200018e0
 8002998:	200018dc 	.word	0x200018dc
 800299c:	20000134 	.word	0x20000134

080029a0 <EVENT_process>:

//Déclenchement des events en main
void EVENT_process(bool_e test_all){
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	if(new_flag)
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <EVENT_process+0x110>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d07a      	beq.n	8002aa6 <EVENT_process+0x106>
	{
		new_flag = FALSE;
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <EVENT_process+0x110>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]

		//Nombre d'event à tester
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 80029b6:	2306      	movs	r3, #6
 80029b8:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <EVENT_process+0x24>
			max = EVENT_COUNT ;
 80029c0:	230b      	movs	r3, #11
 80029c2:	75fb      	strb	r3, [r7, #23]



		//Pout chaque event
		for(uint32_t e = 0; e < max; e ++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	e069      	b.n	8002a9e <EVENT_process+0xfe>
		{

			uint32_t m = 0 ;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]

			//On test chaque paires de masque
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 80029d2:	e049      	b.n	8002a68 <EVENT_process+0xc8>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 80029d4:	4837      	ldr	r0, [pc, #220]	; (8002ab4 <EVENT_process+0x114>)
 80029d6:	4938      	ldr	r1, [pc, #224]	; (8002ab8 <EVENT_process+0x118>)
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	00d2      	lsls	r2, r2, #3
 80029de:	24b4      	movs	r4, #180	; 0xb4
 80029e0:	fb04 f303 	mul.w	r3, r4, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	4419      	add	r1, r3
 80029e8:	e890 000c 	ldmia.w	r0, {r2, r3}
 80029ec:	c903      	ldmia	r1, {r0, r1}
 80029ee:	f000 f895 	bl	8002b1c <Mask_test_and>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d034      	beq.n	8002a62 <EVENT_process+0xc2>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 80029f8:	482e      	ldr	r0, [pc, #184]	; (8002ab4 <EVENT_process+0x114>)
 80029fa:	492f      	ldr	r1, [pc, #188]	; (8002ab8 <EVENT_process+0x118>)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1dda      	adds	r2, r3, #7
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	00d2      	lsls	r2, r2, #3
 8002a04:	24b4      	movs	r4, #180	; 0xb4
 8002a06:	fb04 f303 	mul.w	r3, r4, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4419      	add	r1, r3
 8002a0e:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002a12:	c903      	ldmia	r1, {r0, r1}
 8002a14:	f000 f8b5 	bl	8002b82 <Mask_test_or>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d021      	beq.n	8002a62 <EVENT_process+0xc2>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	//Mask not test
 8002a1e:	4825      	ldr	r0, [pc, #148]	; (8002ab4 <EVENT_process+0x114>)
 8002a20:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <EVENT_process+0x118>)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f103 020e 	add.w	r2, r3, #14
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	00d2      	lsls	r2, r2, #3
 8002a2c:	24b4      	movs	r4, #180	; 0xb4
 8002a2e:	fb04 f303 	mul.w	r3, r4, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	4419      	add	r1, r3
 8002a36:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002a3a:	c903      	ldmia	r1, {r0, r1}
 8002a3c:	f000 f8a1 	bl	8002b82 <Mask_test_or>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <EVENT_process+0xc2>
						{
							events_main[e].function(m);
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <EVENT_process+0x118>)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	21b4      	movs	r1, #180	; 0xb4
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	33b0      	adds	r3, #176	; 0xb0
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	60bb      	str	r3, [r7, #8]
						}
					}
				}
				m++ ;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3301      	adds	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8002a68:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <EVENT_process+0x118>)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	21b4      	movs	r1, #180	; 0xb4
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	33a8      	adds	r3, #168	; 0xa8
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d20c      	bcs.n	8002a98 <EVENT_process+0xf8>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <EVENT_process+0xf8>
 8002a84:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <EVENT_process+0x118>)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	21b4      	movs	r1, #180	; 0xb4
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	33ac      	adds	r3, #172	; 0xac
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d09d      	beq.n	80029d4 <EVENT_process+0x34>
		for(uint32_t e = 0; e < max; e ++)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d391      	bcc.n	80029ca <EVENT_process+0x2a>
			}

		}
	}
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd90      	pop	{r4, r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200018d8 	.word	0x200018d8
 8002ab4:	200018d0 	.word	0x200018d0
 8002ab8:	20000134 	.word	0x20000134

08002abc <EVENT_Set_flag>:


//Set a flag
void EVENT_Set_flag(Flags_e flag){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac6:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <EVENT_Set_flag+0x28>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <EVENT_Set_flag+0x2c>)
 8002ad4:	f000 f881 	bl	8002bda <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ad8:	b662      	cpsie	i
	__enable_irq();
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200018d8 	.word	0x200018d8
 8002ae8:	200018d0 	.word	0x200018d0

08002aec <EVENT_Clean_flag>:
//CleaR a flag (i know it should be called cleaR instead of cleaN but i didnt took the time to change it YET)
//Todo : cleaRRRRRRR a flag
void EVENT_Clean_flag(Flags_e flag){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002af6:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <EVENT_Clean_flag+0x28>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4619      	mov	r1, r3
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <EVENT_Clean_flag+0x2c>)
 8002b04:	f000 f899 	bl	8002c3a <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b08:	b662      	cpsie	i
	__enable_irq();
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200018d8 	.word	0x200018d8
 8002b18:	200018d0 	.word	0x200018d0

08002b1c <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 8002b1c:	b490      	push	{r4, r7}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	f107 0408 	add.w	r4, r7, #8
 8002b26:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b2a:	4639      	mov	r1, r7
 8002b2c:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e01c      	b.n	8002b70 <Mask_test_and+0x54>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	f107 0218 	add.w	r2, r7, #24
 8002b3e:	4413      	add	r3, r2
 8002b40:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	f107 0118 	add.w	r1, r7, #24
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002b52:	401a      	ands	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	f107 0118 	add.w	r1, r7, #24
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d001      	beq.n	8002b6a <Mask_test_and+0x4e>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e006      	b.n	8002b78 <Mask_test_and+0x5c>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	dddf      	ble.n	8002b36 <Mask_test_and+0x1a>
		}
	return TRUE ;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc90      	pop	{r4, r7}
 8002b80:	4770      	bx	lr

08002b82 <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8002b82:	b490      	push	{r4, r7}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	f107 0408 	add.w	r4, r7, #8
 8002b8c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b90:	4639      	mov	r1, r7
 8002b92:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e015      	b.n	8002bc8 <Mask_test_or+0x46>
		if(mask_test.array[m] & mask_ref.array[m])
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	f107 0218 	add.w	r2, r7, #24
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	f107 0118 	add.w	r1, r7, #24
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <Mask_test_or+0x40>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e006      	b.n	8002bd0 <Mask_test_or+0x4e>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	dde6      	ble.n	8002b9c <Mask_test_or+0x1a>
	return FALSE ;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc90      	pop	{r4, r7}
 8002bd8:	4770      	bx	lr

08002bda <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
 8002bda:	b480      	push	{r7}
 8002bdc:	b087      	sub	sp, #28
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	60fb      	str	r3, [r7, #12]
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d101      	bne.n	8002c16 <MASK_set_flag+0x3c>
		return FALSE ;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e00b      	b.n	8002c2e <MASK_set_flag+0x54>
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	ea42 0103 	orr.w	r1, r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return TRUE ;
 8002c2c:	2301      	movs	r3, #1
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
 8002c3a:	b480      	push	{r7}
 8002c3c:	b087      	sub	sp, #28
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	095b      	lsrs	r3, r3, #5
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8002c56:	2201      	movs	r2, #1
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	60fb      	str	r3, [r7, #12]
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d10b      	bne.n	8002c8a <MASK_clean_flag+0x50>
		mask->array[array_nb] -= flag_mask ;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad1      	subs	r1, r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return TRUE ;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <MASK_clean_flag+0x52>
	}
	return FALSE ;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <mask_def_events_init>:
static void mask_def_gyro_acc_calibration(Event_t * event);
static void mask_def_manual_angle(Event_t * event);



void mask_def_events_init(Event_t * event){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_init_ok(&event[EVENT_GYRO_INIT_OK]);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f83c 	bl	8002d24 <mask_def_gyro_init_ok>
	mask_def_gyro_data_ready(&event[EVENT_GYRO_DATA_READY]);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f852 	bl	8002d56 <mask_def_gyro_data_ready>
	//Acc mask def
	mask_def_acc_init_ok(&event[EVENT_ACC_INIT_OK]);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f85f 	bl	8002d7c <mask_def_acc_init_ok>
	mask_def_acc_data_ready(&event[EVENT_ACC_DATA_READY]);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	33b4      	adds	r3, #180	; 0xb4
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f873 	bl	8002dae <mask_def_acc_data_ready>
	//Ibus
	mask_def_ibus_data_rdy(&event[EVENT_IBUS_DATA_RDY]);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 f89d 	bl	8002e0e <mask_def_ibus_data_rdy>
	//Orientation
	mask_def_orientation_update(&event[EVENT_ORIENTATION_UPDATE]);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f87a 	bl	8002dd4 <mask_def_orientation_update>
	//Flight_modes
	mask_def_on_the_ground(&event[EVENT_ON_THE_GROUND]);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f8a4 	bl	8002e34 <mask_def_on_the_ground>
	mask_def_manual_accro(&event[EVENT_MANUAL_ACCRO]);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f8c9 	bl	8002e8a <mask_def_manual_accro>
	mask_def_arming(&event[EVENT_ARMING]);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f8e9 	bl	8002ed6 <mask_def_arming>
	mask_def_gyro_acc_calibration(&event[EVENT_GYRO_ACC_CALIBRATION]);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f902 	bl	8002f14 <mask_def_gyro_acc_calibration>
	mask_def_manual_angle(&event[EVENT_MANUAL_ANGLE]);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f8ca 	bl	8002eb0 <mask_def_manual_angle>

}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <mask_def_gyro_init_ok>:

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff52 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3338      	adds	r3, #56	; 0x38
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff4c 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3370      	adds	r3, #112	; 0x70
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff46 	bl	8002bda <MASK_set_flag>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff39 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3338      	adds	r3, #56	; 0x38
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff33 	bl	8002bda <MASK_set_flag>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2104      	movs	r1, #4
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff26 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3338      	adds	r3, #56	; 0x38
 8002d92:	2104      	movs	r1, #4
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff20 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3370      	adds	r3, #112	; 0x70
 8002d9e:	2105      	movs	r1, #5
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff1a 	bl	8002bda <MASK_set_flag>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2104      	movs	r1, #4
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff0d 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3338      	adds	r3, #56	; 0x38
 8002dc4:	2106      	movs	r1, #6
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff07 	bl	8002bda <MASK_set_flag>
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2104      	movs	r1, #4
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fefa 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fef5 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2103      	movs	r1, #3
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fef0 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3338      	adds	r3, #56	; 0x38
 8002dfe:	2107      	movs	r1, #7
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff feea 	bl	8002bda <MASK_set_flag>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <mask_def_ibus_data_rdy>:

// ----------------	Radio ------------------------

static void mask_def_ibus_data_rdy(Event_t * event){
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
	//Si flag data rdy on y go
	MASK_set_flag(&event->mask_and[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2108      	movs	r1, #8
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fedd 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3338      	adds	r3, #56	; 0x38
 8002e24:	2108      	movs	r1, #8
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fed7 	bl	8002bda <MASK_set_flag>
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <mask_def_on_the_ground>:

// ----------------	Flight Modes ------------------------
static void mask_def_on_the_ground(Event_t * event){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_FLYING], FLAG_FLYING);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	211d      	movs	r1, #29
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff feca 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_FLYING], FLAG_CHAN_5_POS_1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3338      	adds	r3, #56	; 0x38
 8002e4a:	2109      	movs	r1, #9
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fec4 	bl	8002bda <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_ARMING], FLAG_ARMING);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3308      	adds	r3, #8
 8002e56:	2118      	movs	r1, #24
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff febe 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_ARMING], FLAG_CHAN_5_POS_1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3340      	adds	r3, #64	; 0x40
 8002e62:	2109      	movs	r1, #9
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff feb8 	bl	8002bda <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_IN_PROGRESS);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	211b      	movs	r1, #27
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff feb2 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_DONE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3348      	adds	r3, #72	; 0x48
 8002e7a:	211c      	movs	r1, #28
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff feac 	bl	8002bda <MASK_set_flag>


}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <mask_def_manual_accro>:

static void mask_def_manual_accro(Event_t * event){
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_CHAN_6_POS_1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	210b      	movs	r1, #11
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fe9f 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_ARMED);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3338      	adds	r3, #56	; 0x38
 8002ea0:	2119      	movs	r1, #25
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fe99 	bl	8002bda <MASK_set_flag>
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <mask_def_manual_angle>:

static void mask_def_manual_angle(Event_t * event){
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_CHAN_6_POS_2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	210c      	movs	r1, #12
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fe8c 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_ARMED);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3338      	adds	r3, #56	; 0x38
 8002ec6:	2119      	movs	r1, #25
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fe86 	bl	8002bda <MASK_set_flag>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <mask_def_arming>:

static void mask_def_arming(Event_t * event){
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ARMING_ON_THE_GROUND], FLAG_GYRO_OK);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fe79 	bl	8002bda <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_ARMING_ON_THE_GROUND], FLAG_CHAN_5_POS_3);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3338      	adds	r3, #56	; 0x38
 8002eec:	210a      	movs	r1, #10
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fe73 	bl	8002bda <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_FLYING);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3370      	adds	r3, #112	; 0x70
 8002ef8:	211d      	movs	r1, #29
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fe6d 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_BUSY);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3370      	adds	r3, #112	; 0x70
 8002f04:	211a      	movs	r1, #26
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fe67 	bl	8002bda <MASK_set_flag>


}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <mask_def_gyro_acc_calibration>:

static void mask_def_gyro_acc_calibration(Event_t * event){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_GYRO_ACC_CALIBRATION], FLAG_GYRO_OK);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fe5a 	bl	8002bda <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_GYRO_ACC_CALIBRATION], FLAG_CHAN_9_PUSH);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3338      	adds	r3, #56	; 0x38
 8002f2a:	2113      	movs	r1, #19
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fe54 	bl	8002bda <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_BUSY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3370      	adds	r3, #112	; 0x70
 8002f36:	211a      	movs	r1, #26
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fe4e 	bl	8002bda <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_FLYING);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3370      	adds	r3, #112	; 0x70
 8002f42:	211d      	movs	r1, #29
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fe48 	bl	8002bda <MASK_set_flag>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 8002f5c:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <SCHEDULER_init+0x20>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 8002f62:	f7ff fb1f 	bl	80025a4 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fa8e 	bl	8003488 <tasks_init>
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20001924 	.word	0x20001924

08002f78 <SCHEDULER_run>:

void SCHEDULER_run(void){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8002f7e:	f000 fbc9 	bl	8003714 <TIME_us>
 8002f82:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 8002f84:	f000 f886 	bl	8003094 <get_first_task>
 8002f88:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
	while(task_queu_position < task_queu_size && task != NULL){
 8002f8e:	e046      	b.n	800301e <SCHEDULER_run+0xa6>

		switch(task->mode){
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	7a1b      	ldrb	r3, [r3, #8]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d020      	beq.n	8002fda <SCHEDULER_run+0x62>
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d002      	beq.n	8002fa2 <SCHEDULER_run+0x2a>
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d008      	beq.n	8002fb2 <SCHEDULER_run+0x3a>
				task->mode = TASK_MODE_WAIT ;
				break;
			case TASK_MODE_TIMMER :
			case TASK_MODE_WAIT:
			default:
				break;
 8002fa0:	e027      	b.n	8002ff2 <SCHEDULER_run+0x7a>
				current_time_us = task_process(task, current_time_us);
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	68b8      	ldr	r0, [r7, #8]
 8002fa6:	f000 f89b 	bl	80030e0 <task_process>
 8002faa:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8002fac:	2301      	movs	r3, #1
 8002fae:	607b      	str	r3, [r7, #4]
				break;
 8002fb0:	e01f      	b.n	8002ff2 <SCHEDULER_run+0x7a>
				if(current_time_us >= task->desired_next_start_us){
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d319      	bcc.n	8002ff0 <SCHEDULER_run+0x78>
					current_time_us = task_process(task, current_time_us);
 8002fbc:	68f9      	ldr	r1, [r7, #12]
 8002fbe:	68b8      	ldr	r0, [r7, #8]
 8002fc0:	f000 f88e 	bl	80030e0 <task_process>
 8002fc4:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us += task->desired_period_us ;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6a1a      	ldr	r2, [r3, #32]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	441a      	add	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	607b      	str	r3, [r7, #4]
				break;
 8002fd8:	e00a      	b.n	8002ff0 <SCHEDULER_run+0x78>
				current_time_us = task_process(task, current_time_us);
 8002fda:	68f9      	ldr	r1, [r7, #12]
 8002fdc:	68b8      	ldr	r0, [r7, #8]
 8002fde:	f000 f87f 	bl	80030e0 <task_process>
 8002fe2:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	607b      	str	r3, [r7, #4]
				task->mode = TASK_MODE_WAIT ;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	721a      	strb	r2, [r3, #8]
				break;
 8002fee:	e000      	b.n	8002ff2 <SCHEDULER_run+0x7a>
				break;
 8002ff0:	bf00      	nop
		}
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00d      	beq.n	8003014 <SCHEDULER_run+0x9c>
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f000 fb77 	bl	80036ec <TASK_get_task>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4293      	cmp	r3, r2
 8003004:	d006      	beq.n	8003014 <SCHEDULER_run+0x9c>
 8003006:	2001      	movs	r0, #1
 8003008:	f000 fb70 	bl	80036ec <TASK_get_task>
 800300c:	4602      	mov	r2, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	4293      	cmp	r3, r2
 8003012:	d10e      	bne.n	8003032 <SCHEDULER_run+0xba>
			//Stop the while loop if we executed a task
			break;
		task_executed = FALSE ;
 8003014:	2300      	movs	r3, #0
 8003016:	607b      	str	r3, [r7, #4]
		task = get_next_task();
 8003018:	f000 f84c 	bl	80030b4 <get_next_task>
 800301c:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL){
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <SCHEDULER_run+0xc4>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <SCHEDULER_run+0xc8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d204      	bcs.n	8003034 <SCHEDULER_run+0xbc>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1af      	bne.n	8002f90 <SCHEDULER_run+0x18>
	}
}
 8003030:	e000      	b.n	8003034 <SCHEDULER_run+0xbc>
			break;
 8003032:	bf00      	nop
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20001920 	.word	0x20001920
 8003040:	2000191c 	.word	0x2000191c

08003044 <SCHEDULER_task>:

void SCHEDULER_task(void){
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
	//Changement de mode pour les tâches
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 800304a:	2300      	movs	r3, #0
 800304c:	71fb      	strb	r3, [r7, #7]
 800304e:	e00b      	b.n	8003068 <SCHEDULER_task+0x24>
	{
		task_to_change[t]->mode = change_mode[t] ;
 8003050:	79fa      	ldrb	r2, [r7, #7]
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	490c      	ldr	r1, [pc, #48]	; (8003088 <SCHEDULER_task+0x44>)
 8003056:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800305a:	490c      	ldr	r1, [pc, #48]	; (800308c <SCHEDULER_task+0x48>)
 800305c:	5c8a      	ldrb	r2, [r1, r2]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	721a      	strb	r2, [r3, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	3301      	adds	r3, #1
 8003066:	71fb      	strb	r3, [r7, #7]
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <SCHEDULER_task+0x4c>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	79fa      	ldrb	r2, [r7, #7]
 8003070:	429a      	cmp	r2, r3
 8003072:	d3ed      	bcc.n	8003050 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <SCHEDULER_task+0x4c>)
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20001928 	.word	0x20001928
 800308c:	20001960 	.word	0x20001960
 8003090:	2000196e 	.word	0x2000196e

08003094 <get_first_task>:


	return load_pourcentage ;
}

static task_t * get_first_task(void){
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <get_first_task+0x18>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <get_first_task+0x1c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	20001920 	.word	0x20001920
 80030b0:	200018e4 	.word	0x200018e4

080030b4 <get_next_task>:

static task_t * get_next_task(void){
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <get_next_task+0x24>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <get_next_task+0x24>)
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <get_next_task+0x24>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a05      	ldr	r2, [pc, #20]	; (80030dc <get_next_task+0x28>)
 80030c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20001920 	.word	0x20001920
 80030dc:	200018e4 	.word	0x200018e4

080030e0 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <task_process+0x16>
		return current_time_us ;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	e09d      	b.n	8003232 <task_process+0x152>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	3308      	adds	r3, #8
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	1ad2      	subs	r2, r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800311a:	6839      	ldr	r1, [r7, #0]
 800311c:	1a8a      	subs	r2, r1, r2
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	3308      	adds	r3, #8
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	3308      	adds	r3, #8
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	441a      	add	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003146:	4a3d      	ldr	r2, [pc, #244]	; (800323c <task_process+0x15c>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	091a      	lsrs	r2, r3, #4
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	619a      	str	r2, [r3, #24]

	task->last_execution_us = current_time_us ;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	6838      	ldr	r0, [r7, #0]
 800315e:	4798      	blx	r3
	current_time_us = TIME_us();
 8003160:	f000 fad8 	bl	8003714 <TIME_us>
 8003164:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	311e      	adds	r1, #30
 8003176:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800317a:	1ad2      	subs	r2, r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	1ac9      	subs	r1, r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	321e      	adds	r2, #30
 8003194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	311e      	adds	r1, #30
 80031a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	bf38      	it	cc
 80031ae:	461a      	movcc	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	311e      	adds	r1, #30
 80031c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031c8:	441a      	add	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80031d6:	4a19      	ldr	r2, [pc, #100]	; (800323c <task_process+0x15c>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	091a      	lsrs	r2, r3, #4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	321e      	adds	r2, #30
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031f4:	d90c      	bls.n	8003210 <task_process+0x130>
		task->duration_us_average_array[task->average_index] ++ ;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	f103 011e 	add.w	r1, r3, #30
 8003202:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003206:	1c51      	adds	r1, r2, #1
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	331e      	adds	r3, #30
 800320c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003224:	2b14      	cmp	r3, #20
 8003226:	d103      	bne.n	8003230 <task_process+0x150>
		task->average_index = 0 ;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 8003230:	683b      	ldr	r3, [r7, #0]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	cccccccd 	.word	0xcccccccd

08003240 <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
	if(enable)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <SCHEDULER_enable_task+0x24>
		queu_add(TASK_get_task(id));
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fa49 	bl	80036ec <TASK_get_task>
 800325a:	4603      	mov	r3, r0
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f873 	bl	8003348 <queu_add>
	else
		queu_remove(TASK_get_task(id));
}
 8003262:	e007      	b.n	8003274 <SCHEDULER_enable_task+0x34>
		queu_remove(TASK_get_task(id));
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fa40 	bl	80036ec <TASK_get_task>
 800326c:	4603      	mov	r3, r0
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f8c8 	bl	8003404 <queu_remove>
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <SCHEDULER_task_set_mode>:

void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	460a      	mov	r2, r1
 8003286:	71fb      	strb	r3, [r7, #7]
 8003288:	4613      	mov	r3, r2
 800328a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 800328c:	b672      	cpsid	i
	__disable_irq();
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <SCHEDULER_task_set_mode+0x4c>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461c      	mov	r4, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fa27 	bl	80036ec <TASK_get_task>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <SCHEDULER_task_set_mode+0x50>)
 80032a2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <SCHEDULER_task_set_mode+0x4c>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	b2d1      	uxtb	r1, r2
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <SCHEDULER_task_set_mode+0x4c>)
 80032b2:	7011      	strb	r1, [r2, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	4a06      	ldr	r2, [pc, #24]	; (80032d0 <SCHEDULER_task_set_mode+0x54>)
 80032b8:	79bb      	ldrb	r3, [r7, #6]
 80032ba:	5453      	strb	r3, [r2, r1]
  __ASM volatile ("cpsie i" : : : "memory");
 80032bc:	b662      	cpsie	i
	__enable_irq();
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd90      	pop	{r4, r7, pc}
 80032c6:	bf00      	nop
 80032c8:	2000196e 	.word	0x2000196e
 80032cc:	20001928 	.word	0x20001928
 80032d0:	20001960 	.word	0x20001960

080032d4 <SCHEDULER_reschedule_task>:

void SCHEDULER_reschedule_task(task_ids_t id, uint32_t new_period_us){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	71fb      	strb	r3, [r7, #7]
	TASK_get_task(id)->desired_period_us = new_period_us ;
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fa02 	bl	80036ec <TASK_get_task>
 80032e8:	4602      	mov	r2, r0
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6153      	str	r3, [r2, #20]
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <queu_contains+0x12>
		return FALSE ;
 8003306:	2300      	movs	r3, #0
 8003308:	e014      	b.n	8003334 <queu_contains+0x3c>

	for(uint32_t t = 0; t < task_queu_size; t++)
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e00b      	b.n	8003328 <queu_contains+0x30>
		if(task_queu[t] == task)
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <queu_contains+0x48>)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	429a      	cmp	r2, r3
 800331c:	d101      	bne.n	8003322 <queu_contains+0x2a>
			return TRUE ;
 800331e:	2301      	movs	r3, #1
 8003320:	e008      	b.n	8003334 <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3301      	adds	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <queu_contains+0x4c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	429a      	cmp	r2, r3
 8003330:	d3ee      	bcc.n	8003310 <queu_contains+0x18>
	return FALSE ;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	200018e4 	.word	0x200018e4
 8003344:	2000191c 	.word	0x2000191c

08003348 <queu_add>:

static bool_e queu_add(task_t * task){
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff ffd1 	bl	80032f8 <queu_contains>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d106      	bne.n	800336a <queu_add+0x22>
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <queu_add+0xb4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b0d      	cmp	r3, #13
 8003362:	d802      	bhi.n	800336a <queu_add+0x22>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <queu_add+0x26>
		return FALSE ;
 800336a:	2300      	movs	r3, #0
 800336c:	e041      	b.n	80033f2 <queu_add+0xaa>


	uint32_t t = 0 ;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 8003372:	e03a      	b.n	80033ea <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 8003374:	4a22      	ldr	r2, [pc, #136]	; (8003400 <queu_add+0xb8>)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <queu_add+0x50>
		{
			task_queu[t] = task ;
 8003380:	491f      	ldr	r1, [pc, #124]	; (8003400 <queu_add+0xb8>)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 800338a:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <queu_add+0xb4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	4a1a      	ldr	r2, [pc, #104]	; (80033fc <queu_add+0xb4>)
 8003392:	6013      	str	r3, [r2, #0]
			return TRUE;
 8003394:	2301      	movs	r3, #1
 8003396:	e02c      	b.n	80033f2 <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	4918      	ldr	r1, [pc, #96]	; (8003400 <queu_add+0xb8>)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d91c      	bls.n	80033e4 <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3301      	adds	r3, #1
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4a13      	ldr	r2, [pc, #76]	; (8003400 <queu_add+0xb8>)
 80033b2:	1898      	adds	r0, r3, r2
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4a11      	ldr	r2, [pc, #68]	; (8003400 <queu_add+0xb8>)
 80033ba:	1899      	adds	r1, r3, r2
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <queu_add+0xb4>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	461a      	mov	r2, r3
 80033c8:	f008 fd81 	bl	800bece <memmove>
			task_queu[t] = task ;
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <queu_add+0xb8>)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <queu_add+0xb4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	4a07      	ldr	r2, [pc, #28]	; (80033fc <queu_add+0xb4>)
 80033de:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e006      	b.n	80033f2 <queu_add+0xaa>
		}
		t++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3301      	adds	r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b0d      	cmp	r3, #13
 80033ee:	d9c1      	bls.n	8003374 <queu_add+0x2c>
	}
	return FALSE ;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000191c 	.word	0x2000191c
 8003400:	200018e4 	.word	0x200018e4

08003404 <queu_remove>:

static bool_e queu_remove(task_t * task){
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff ff73 	bl	80032f8 <queu_contains>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <queu_remove+0x1a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <queu_remove+0x1e>
		return FALSE ;
 800341e:	2300      	movs	r3, #0
 8003420:	e02a      	b.n	8003478 <queu_remove+0x74>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e021      	b.n	800346c <queu_remove+0x68>
		if(task == task_queu[t]){
 8003428:	4a15      	ldr	r2, [pc, #84]	; (8003480 <queu_remove+0x7c>)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	d117      	bne.n	8003466 <queu_remove+0x62>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4a11      	ldr	r2, [pc, #68]	; (8003480 <queu_remove+0x7c>)
 800343c:	1898      	adds	r0, r3, r2
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3301      	adds	r3, #1
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <queu_remove+0x7c>)
 8003446:	1899      	adds	r1, r3, r2
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <queu_remove+0x80>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	461a      	mov	r2, r3
 8003454:	f008 fd3b 	bl	800bece <memmove>
			task_queu_size -- ;
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <queu_remove+0x80>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3b01      	subs	r3, #1
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <queu_remove+0x80>)
 8003460:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8003462:	2301      	movs	r3, #1
 8003464:	e008      	b.n	8003478 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3301      	adds	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <queu_remove+0x80>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	429a      	cmp	r2, r3
 8003474:	d3d8      	bcc.n	8003428 <queu_remove+0x24>
		}
	}
	return FALSE ;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	200018e4 	.word	0x200018e4
 8003484:	2000191c 	.word	0x2000191c

08003488 <tasks_init>:

static uint32_t start_time_gyro = 0;
static uint32_t end_time_filtering_gyro= 0;


void tasks_init(system_t * sys_){
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 8003490:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <tasks_init+0x78>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 8003496:	2101      	movs	r1, #1
 8003498:	2000      	movs	r0, #0
 800349a:	f7ff fed1 	bl	8003240 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 800349e:	2101      	movs	r1, #1
 80034a0:	2001      	movs	r0, #1
 80034a2:	f7ff fecd 	bl	8003240 <SCHEDULER_enable_task>

	SCHEDULER_enable_task(TASK_LED, TRUE);
 80034a6:	2101      	movs	r1, #1
 80034a8:	2003      	movs	r0, #3
 80034aa:	f7ff fec9 	bl	8003240 <SCHEDULER_enable_task>
	//SCHEDULER_enable_task(TASK_PRINTF, TRUE);
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 80034ae:	2101      	movs	r1, #1
 80034b0:	2008      	movs	r0, #8
 80034b2:	f7ff fec5 	bl	8003240 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 80034b6:	2101      	movs	r1, #1
 80034b8:	2005      	movs	r0, #5
 80034ba:	f7ff fec1 	bl	8003240 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 80034be:	2101      	movs	r1, #1
 80034c0:	2004      	movs	r0, #4
 80034c2:	f7ff febd 	bl	8003240 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 80034c6:	2101      	movs	r1, #1
 80034c8:	2007      	movs	r0, #7
 80034ca:	f7ff feb9 	bl	8003240 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_UPDATE, TRUE);
 80034ce:	2101      	movs	r1, #1
 80034d0:	2009      	movs	r0, #9
 80034d2:	f7ff feb5 	bl	8003240 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_ANALYSIS, TRUE);
 80034d6:	2101      	movs	r1, #1
 80034d8:	200a      	movs	r0, #10
 80034da:	f7ff feb1 	bl	8003240 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_HIGH_LVL, TRUE);
 80034de:	2101      	movs	r1, #1
 80034e0:	200b      	movs	r0, #11
 80034e2:	f7ff fead 	bl	8003240 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_TELEMETRIE, TRUE);
 80034e6:	2101      	movs	r1, #1
 80034e8:	200c      	movs	r0, #12
 80034ea:	f7ff fea9 	bl	8003240 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_LOGGER, TRUE);
 80034ee:	2101      	movs	r1, #1
 80034f0:	200d      	movs	r0, #13
 80034f2:	f7ff fea5 	bl	8003240 <SCHEDULER_enable_task>

}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20001970 	.word	0x20001970

08003504 <process_print_f>:

void process_print_f(uint32_t current_time_us){
 8003504:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003508:	b088      	sub	sp, #32
 800350a:	af04      	add	r7, sp, #16
 800350c:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);
//	gyro_t * gyro = &sys->sensors.gyro ;
//	acc_t * acc = &sys->sensors.acc ;
	orientation_t * ori = &sys->orientation ;
 800350e:	4b14      	ldr	r3, [pc, #80]	; (8003560 <process_print_f+0x5c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003516:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	//printf("%f\t%f\t%f\t%f\t%f\t%f\t%lu\n",acc->raw[0], acc->raw[1], acc->raw[2],gyro->raw[0], gyro->raw[1], gyro->raw[2], TASK_get_task(TASK_GYRO_UPDATE)->duration_us);
	//printf("%f\t%f\t%lu\n", acc->filtered[ACC_AXE_Z], gyro->filtered[ACC_AXE_X], delta_1);
	//printf("%f\n", acc->filtered[GYRO_AXE_X]);
	//printf("%lu\n", delta_1);
	printf("%f\t%f\t%f\n", ori->angular_position[0], ori->angular_velocity[0], ori->acc_angles[0]);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd f813 	bl	8000548 <__aeabi_f2d>
 8003522:	4680      	mov	r8, r0
 8003524:	4689      	mov	r9, r1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f80b 	bl	8000548 <__aeabi_f2d>
 8003532:	4604      	mov	r4, r0
 8003534:	460d      	mov	r5, r1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd f804 	bl	8000548 <__aeabi_f2d>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003548:	e9cd 4500 	strd	r4, r5, [sp]
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	4804      	ldr	r0, [pc, #16]	; (8003564 <process_print_f+0x60>)
 8003552:	f009 f939 	bl	800c7c8 <iprintf>
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003560:	20001970 	.word	0x20001970
 8003564:	0800eae8 	.word	0x0800eae8

08003568 <process_led>:


void process_led(uint32_t current_time_us){
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
//	uint8_t data[2];
//	uint8_t len = DATA_LOGGER_Get_Data(DATA_ID_ROLL_GYRO, data);
//	TELEMETRY_Send_Data(&sys->radio.telemetry, data, len);
	IHM_Update();
 8003570:	f7fe fef6 	bl	8002360 <IHM_Update>
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <process_gyro_update>:

void process_gyro_update(uint32_t current_time_us){
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	start_time_gyro = current_time_us ;
 8003584:	4a06      	ldr	r2, [pc, #24]	; (80035a0 <process_gyro_update+0x24>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6013      	str	r3, [r2, #0]
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <process_gyro_update+0x28>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3330      	adds	r3, #48	; 0x30
 8003590:	4618      	mov	r0, r3
 8003592:	f000 ffdd 	bl	8004550 <GYRO_ACC_update_dma>

}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20001974 	.word	0x20001974
 80035a4:	20001970 	.word	0x20001970

080035a8 <process_gyro_filter>:

void process_gyro_filter(uint32_t current_time_us){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	end_time_filtering_gyro = current_time_us ;
 80035b0:	4a06      	ldr	r2, [pc, #24]	; (80035cc <process_gyro_filter+0x24>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]

	GYRO_process_lpf(&sys->sensors.gyro);
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <process_gyro_filter+0x28>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3330      	adds	r3, #48	; 0x30
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 ffe3 	bl	8004588 <GYRO_process_lpf>

}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20001978 	.word	0x20001978
 80035d0:	20001970 	.word	0x20001970

080035d4 <process_acc_update>:

void process_acc_update(uint32_t current_time_us){
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <process_acc_update+0x1c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	33a4      	adds	r3, #164	; 0xa4
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fe6c 	bl	80042c0 <ACC_update>
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20001970 	.word	0x20001970

080035f4 <process_acc_filter>:

void process_acc_filter(uint32_t current_time_us){
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	ACC_process_lpf(&sys->sensors.acc);
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <process_acc_filter+0x1c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	33a4      	adds	r3, #164	; 0xa4
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fe7a 	bl	80042fc <ACC_process_lpf>
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20001970 	.word	0x20001970

08003614 <process_event_main>:

void process_event_main(uint32_t current_time_us){
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 800361c:	2000      	movs	r0, #0
 800361e:	f7ff f9bf 	bl	80029a0 <EVENT_process>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <process_orientation_update>:

void process_orientation_update(uint32_t current_time_us){
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

	ORIENTATION_Update(&sys->orientation);
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <process_orientation_update+0x2c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800363c:	4618      	mov	r0, r3
 800363e:	f7fe f99b 	bl	8001978 <ORIENTATION_Update>

	REGULATION_POSITION_Process();
 8003642:	f000 fdd9 	bl	80041f8 <REGULATION_POSITION_Process>
	REGULATION_ORIENTATION_Process();
 8003646:	f000 fc81 	bl	8003f4c <REGULATION_ORIENTATION_Process>
	PROPULSION_Update_Motors();
 800364a:	f000 f8ab 	bl	80037a4 <PROPULSION_Update_Motors>
	//delta_1 = (TIME_us() - start_time_gyro) ;
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20001970 	.word	0x20001970

0800365c <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 8003664:	f7ff fcee 	bl	8003044 <SCHEDULER_task>
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <process_controller_channel_update>:

void process_controller_channel_update(uint32_t current_time_us){
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	if(CONTROLLER_Update_Channels_Array())
 8003678:	f000 fbee 	bl	8003e58 <CONTROLLER_Update_Channels_Array>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <process_controller_channel_update+0x1a>
		SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_ANALYSIS, TASK_MODE_EVENT);
 8003682:	2102      	movs	r1, #2
 8003684:	200a      	movs	r0, #10
 8003686:	f7ff fdf9 	bl	800327c <SCHEDULER_task_set_mode>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <process_controller_channel_analysis>:

void process_controller_channel_analysis(uint32_t current_time_us){
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
	CONTROLLER_Update_Channels_Analysis();
 800369a:	f000 f95f 	bl	800395c <CONTROLLER_Update_Channels_Analysis>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <process_high_lvl>:

void process_high_lvl(uint32_t current_time_us){
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
	EVENT_process(TRUE);
 80036ae:	2001      	movs	r0, #1
 80036b0:	f7ff f976 	bl	80029a0 <EVENT_process>
	FLIGHT_MODE_Main(current_time_us);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fe fbfb 	bl	8001eb0 <FLIGHT_MODE_Main>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <process_telemetry>:

void process_telemetry(uint32_t current_time_us){
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
	TELEMETRY_Process(current_time_us);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f002 ff02 	bl	80064d4 <TELEMETRY_Process>
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <process_logger>:

void process_logger(uint32_t current_time_us){
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	DATA_LOGGER_Main();
 80036e0:	f7fd fde4 	bl	80012ac <DATA_LOGGER_Main>
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <TASK_get_task>:
	[TASK_CONTROLLER_CHANNEL_UPDATE] = 		DEFINE_TASK(TASK_CONTROLLER_CHANNEL_UPDATE, 	PRIORITY_MEDIUM,	process_controller_channel_update, 	PERIOD_US_FROM_HERTZ(1), 	TASK_MODE_EVENT),
	[TASK_CONTROLLER_CHANNEL_ANALYSIS] = 	DEFINE_TASK(TASK_CONTROLLER_CHANNEL_ANALYSIS, 	PRIORITY_MEDIUM,	process_controller_channel_analysis, 	PERIOD_US_FROM_HERTZ(1), 	TASK_MODE_EVENT),
};


task_t * TASK_get_task(task_ids_t id){
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	22d0      	movs	r2, #208	; 0xd0
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	4a04      	ldr	r2, [pc, #16]	; (8003710 <TASK_get_task+0x24>)
 8003700:	4413      	add	r3, r2
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	200008f0 	.word	0x200008f0

08003714 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800371a:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 800371c:	f003 f8dc 	bl	80068d8 <HAL_GetTick>
 8003720:	4603      	mov	r3, r0
 8003722:	3301      	adds	r3, #1
 8003724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003728:	fb02 f203 	mul.w	r2, r2, r3
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <TIME_us+0x50>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	08db      	lsrs	r3, r3, #3
 8003732:	490d      	ldr	r1, [pc, #52]	; (8003768 <TIME_us+0x54>)
 8003734:	fba1 1303 	umull	r1, r3, r1, r3
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800373e:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s ait pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us >= t_us)
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <TIME_us+0x58>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d803      	bhi.n	8003752 <TIME_us+0x3e>
		t_us += 1000;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003750:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 8003752:	4a06      	ldr	r2, [pc, #24]	; (800376c <TIME_us+0x58>)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6013      	str	r3, [r2, #0]

	return t_us;
 8003758:	687b      	ldr	r3, [r7, #4]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	e000e010 	.word	0xe000e010
 8003768:	18618619 	.word	0x18618619
 800376c:	2000197c 	.word	0x2000197c

08003770 <PROPULSION_Init>:
#define ROLL prop->consigne[PROP_CONSIGNE_ROLL]
#define PITCH prop->consigne[PROP_CONSIGNE_PITCH]
#define YAW prop->consigne[PROP_CONSIGNE_YAW]
#define THRUST prop->consigne[PROP_CONSIGNE_THRUST]

void PROPULSION_Init(propulsion_t * prop_, TIM_HandleTypeDef * htim){
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
	prop = prop_;
 800377a:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <PROPULSION_Init+0x30>)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6013      	str	r3, [r2, #0]

	MOTORS_Init(&prop->motors, htim, prop->motors_outputs, TRUE);
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <PROPULSION_Init+0x30>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <PROPULSION_Init+0x30>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f103 0218 	add.w	r2, r3, #24
 800378e:	2301      	movs	r3, #1
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	f008 f9f9 	bl	800bb88 <MOTORS_Init>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20001980 	.word	0x20001980

080037a4 <PROPULSION_Update_Motors>:

void PROPULSION_Update_Motors(void){
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0

	//Mixage des sorties
	int16_t m1 = THRUST - PITCH - ROLL + YAW;
 80037aa:	4b4c      	ldr	r3, [pc, #304]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	4b49      	ldr	r3, [pc, #292]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	4b46      	ldr	r3, [pc, #280]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	4b42      	ldr	r3, [pc, #264]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	4413      	add	r3, r2
 80037dc:	b29b      	uxth	r3, r3
 80037de:	80fb      	strh	r3, [r7, #6]
	int16_t m2 = THRUST - PITCH + ROLL - YAW ;
 80037e0:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	4b3c      	ldr	r3, [pc, #240]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	4b38      	ldr	r3, [pc, #224]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003800:	b29b      	uxth	r3, r3
 8003802:	4413      	add	r3, r2
 8003804:	b29a      	uxth	r2, r3
 8003806:	4b35      	ldr	r3, [pc, #212]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800380e:	b29b      	uxth	r3, r3
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	b29b      	uxth	r3, r3
 8003814:	80bb      	strh	r3, [r7, #4]
	int16_t m3 = THRUST + PITCH + ROLL + YAW ;
 8003816:	4b31      	ldr	r3, [pc, #196]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800381e:	b29a      	uxth	r2, r3
 8003820:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003828:	b29b      	uxth	r3, r3
 800382a:	4413      	add	r3, r2
 800382c:	b29a      	uxth	r2, r3
 800382e:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003836:	b29b      	uxth	r3, r3
 8003838:	4413      	add	r3, r2
 800383a:	b29a      	uxth	r2, r3
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003844:	b29b      	uxth	r3, r3
 8003846:	4413      	add	r3, r2
 8003848:	b29b      	uxth	r3, r3
 800384a:	807b      	strh	r3, [r7, #2]
	int16_t m4 = THRUST + PITCH - ROLL - YAW ;
 800384c:	4b23      	ldr	r3, [pc, #140]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003854:	b29a      	uxth	r2, r3
 8003856:	4b21      	ldr	r3, [pc, #132]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800385e:	b29b      	uxth	r3, r3
 8003860:	4413      	add	r3, r2
 8003862:	b29a      	uxth	r2, r3
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800386c:	b29b      	uxth	r3, r3
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	b29a      	uxth	r2, r3
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800387a:	b29b      	uxth	r3, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	b29b      	uxth	r3, r3
 8003880:	803b      	strh	r3, [r7, #0]
	prop->motors_outputs[MOTOR_FL] = (uint16_t)((m1 > 0) ? m1 : 0);
 8003882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003886:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800388a:	b21a      	sxth	r2, r3
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	b292      	uxth	r2, r2
 8003892:	83da      	strh	r2, [r3, #30]
	prop->motors_outputs[MOTOR_FR] = (uint16_t)((m2 > 0) ? m2 : 0);
 8003894:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003898:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800389c:	b21a      	sxth	r2, r3
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	b292      	uxth	r2, r2
 80038a4:	839a      	strh	r2, [r3, #28]
	prop->motors_outputs[MOTOR_BR] = (uint16_t)((m3 > 0) ? m3 : 0);
 80038a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80038ae:	b21a      	sxth	r2, r3
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	b292      	uxth	r2, r2
 80038b6:	831a      	strh	r2, [r3, #24]
	prop->motors_outputs[MOTOR_BL] = (uint16_t)((m4 > 0) ? m4 : 0);
 80038b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80038bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80038c0:	b21a      	sxth	r2, r3
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	b292      	uxth	r2, r2
 80038c8:	835a      	strh	r2, [r3, #26]
	MOTORS_Change_output(&prop->motors);
 80038ca:	4b04      	ldr	r3, [pc, #16]	; (80038dc <PROPULSION_Update_Motors+0x138>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f008 f991 	bl	800bbf6 <MOTORS_Change_output>

}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20001980 	.word	0x20001980

080038e0 <CONTROLLER_Init>:
//Controller used
static controller_t * controller ;
//Private functions prototypes
static void flag_process();

void CONTROLLER_Init(controller_t * controller_, ibus_t * ibus){
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
	//Sauvegarde la structure utilsié
	controller = controller_ ;
 80038ea:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <CONTROLLER_Init+0x78>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6013      	str	r3, [r2, #0]
	controller->channels = ibus->channels ;
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <CONTROLLER_Init+0x78>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	321a      	adds	r2, #26
 80038f8:	601a      	str	r2, [r3, #0]

	//Configuration du mode d'analyse pour les channels
	controller->analysis_mode[0] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <CONTROLLER_Init+0x78>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2201      	movs	r2, #1
 8003900:	711a      	strb	r2, [r3, #4]
	controller->analysis_mode[1] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <CONTROLLER_Init+0x78>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2201      	movs	r2, #1
 8003908:	715a      	strb	r2, [r3, #5]
	controller->analysis_mode[2] = ANALYSIS_MODE_STICK_LVL ;
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <CONTROLLER_Init+0x78>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2202      	movs	r2, #2
 8003910:	719a      	strb	r2, [r3, #6]
	controller->analysis_mode[3] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <CONTROLLER_Init+0x78>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2201      	movs	r2, #1
 8003918:	71da      	strb	r2, [r3, #7]
	controller->analysis_mode[4] = ANALYSIS_MODE_SWITCH_MODE ;
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <CONTROLLER_Init+0x78>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2204      	movs	r2, #4
 8003920:	721a      	strb	r2, [r3, #8]
	controller->analysis_mode[5] = ANALYSIS_MODE_SWITCH_MODE ;
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <CONTROLLER_Init+0x78>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2204      	movs	r2, #4
 8003928:	725a      	strb	r2, [r3, #9]
	controller->analysis_mode[6] = ANALYSIS_MODE_SWITCH_MODE ;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <CONTROLLER_Init+0x78>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2204      	movs	r2, #4
 8003930:	729a      	strb	r2, [r3, #10]
	controller->analysis_mode[7] = ANALYSIS_MODE_SWITCH_MODE ;
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <CONTROLLER_Init+0x78>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2204      	movs	r2, #4
 8003938:	72da      	strb	r2, [r3, #11]
	controller->analysis_mode[8] = ANALYSIS_MODE_BUTTON_PUSH ;
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <CONTROLLER_Init+0x78>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2206      	movs	r2, #6
 8003940:	731a      	strb	r2, [r3, #12]
	controller->analysis_mode[9] = ANALYSIS_MODE_BUTTON_ON_OFF ;
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <CONTROLLER_Init+0x78>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2205      	movs	r2, #5
 8003948:	735a      	strb	r2, [r3, #13]

}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20001984 	.word	0x20001984

0800395c <CONTROLLER_Update_Channels_Analysis>:

void CONTROLLER_Update_Channels_Analysis(void){
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
	//Analyse des channels
		bool_e button_state ;
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8003962:	2300      	movs	r3, #0
 8003964:	71fb      	strb	r3, [r7, #7]
 8003966:	e1a0      	b.n	8003caa <CONTROLLER_Update_Channels_Analysis+0x34e>
			switch (controller->analysis_mode[ch]) {
 8003968:	4bac      	ldr	r3, [pc, #688]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003970:	4413      	add	r3, r2
 8003972:	791b      	ldrb	r3, [r3, #4]
 8003974:	2b06      	cmp	r3, #6
 8003976:	f200 818d 	bhi.w	8003c94 <CONTROLLER_Update_Channels_Analysis+0x338>
 800397a:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <CONTROLLER_Update_Channels_Analysis+0x24>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	08003c95 	.word	0x08003c95
 8003984:	0800399d 	.word	0x0800399d
 8003988:	080039e9 	.word	0x080039e9
 800398c:	08003c95 	.word	0x08003c95
 8003990:	08003bf5 	.word	0x08003bf5
 8003994:	08003ab1 	.word	0x08003ab1
 8003998:	08003b65 	.word	0x08003b65
				case ANALYSIS_MODE_NONE:
					//On fait R
					break;

				case ANALYSIS_MODE_STICK_DEAD_BAND :
					if(abs(controller->channels[ch] - 1500) < JOYCTICK_DEAD_BAND)
 800399c:	4b9f      	ldr	r3, [pc, #636]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80039b0:	f113 0f1d 	cmn.w	r3, #29
 80039b4:	f2c0 8170 	blt.w	8003c98 <CONTROLLER_Update_Channels_Analysis+0x33c>
 80039b8:	4b98      	ldr	r3, [pc, #608]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80039cc:	2b1d      	cmp	r3, #29
 80039ce:	f300 8163 	bgt.w	8003c98 <CONTROLLER_Update_Channels_Analysis+0x33c>
						controller->channels[ch] = 1500 ;
 80039d2:	4b92      	ldr	r3, [pc, #584]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80039e4:	801a      	strh	r2, [r3, #0]
					break;
 80039e6:	e157      	b.n	8003c98 <CONTROLLER_Update_Channels_Analysis+0x33c>

				case ANALYSIS_MODE_STICK_LVL :
					if(controller->channels[ch] > 1000 && controller->channels[ch] <= 1050)
 80039e8:	4b8c      	ldr	r3, [pc, #560]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039fc:	d914      	bls.n	8003a28 <CONTROLLER_Update_Channels_Analysis+0xcc>
 80039fe:	4b87      	ldr	r3, [pc, #540]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	f240 421a 	movw	r2, #1050	; 0x41a
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d808      	bhi.n	8003a28 <CONTROLLER_Update_Channels_Analysis+0xcc>
						controller->throttle_lvl[ch] = THROTTLE_LVL_NULL ;
 8003a16:	4b81      	ldr	r3, [pc, #516]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	4413      	add	r3, r2
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2020 	strb.w	r2, [r3, #32]
 8003a26:	e042      	b.n	8003aae <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1050 && controller->channels[ch] <= 1150)
 8003a28:	4b7c      	ldr	r3, [pc, #496]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	f240 421a 	movw	r2, #1050	; 0x41a
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d914      	bls.n	8003a6a <CONTROLLER_Update_Channels_Analysis+0x10e>
 8003a40:	4b76      	ldr	r3, [pc, #472]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	f240 427e 	movw	r2, #1150	; 0x47e
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d808      	bhi.n	8003a6a <CONTROLLER_Update_Channels_Analysis+0x10e>
						controller->throttle_lvl[ch] = THROTTLE_LVL_LOW ;
 8003a58:	4b70      	ldr	r3, [pc, #448]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	4413      	add	r3, r2
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2020 	strb.w	r2, [r3, #32]
 8003a68:	e021      	b.n	8003aae <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1150 && controller->channels[ch] < 2000)
 8003a6a:	4b6c      	ldr	r3, [pc, #432]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	f240 427e 	movw	r2, #1150	; 0x47e
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	f240 810c 	bls.w	8003c9c <CONTROLLER_Update_Channels_Analysis+0x340>
 8003a84:	4b65      	ldr	r3, [pc, #404]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003a98:	f080 8100 	bcs.w	8003c9c <CONTROLLER_Update_Channels_Analysis+0x340>
						controller->throttle_lvl[ch] = THROTTLE_LVL_HIGH ;
 8003a9c:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2020 	strb.w	r2, [r3, #32]


					break;
 8003aac:	e0f6      	b.n	8003c9c <CONTROLLER_Update_Channels_Analysis+0x340>
 8003aae:	e0f5      	b.n	8003c9c <CONTROLLER_Update_Channels_Analysis+0x340>

				case ANALYSIS_MODE_BUTTON_ON_OFF :
					//Active le boutton dans le code
					if(!controller->button_on_off[ch])
 8003ab0:	4b5a      	ldr	r3, [pc, #360]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d107      	bne.n	8003ad2 <CONTROLLER_Update_Channels_Analysis+0x176>
						controller->button_on_off[ch] = BUTTON_OFF ;
 8003ac2:	4b56      	ldr	r3, [pc, #344]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	4413      	add	r3, r2
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8003ad2:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	bf8c      	ite	hi
 8003aea:	2301      	movhi	r3, #1
 8003aec:	2300      	movls	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8003af2:	4b4a      	ldr	r3, [pc, #296]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	4413      	add	r3, r2
 8003afc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003b00:	461a      	mov	r2, r3
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d022      	beq.n	8003b4e <CONTROLLER_Update_Channels_Analysis+0x1f2>
 8003b08:	4b44      	ldr	r3, [pc, #272]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b10:	4413      	add	r3, r2
 8003b12:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <CONTROLLER_Update_Channels_Analysis+0x1f2>
						if(controller->button_on_off[ch] == BUTTON_ON)
 8003b1a:	4b40      	ldr	r3, [pc, #256]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	4413      	add	r3, r2
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d108      	bne.n	8003b3e <CONTROLLER_Update_Channels_Analysis+0x1e2>
							controller->button_on_off[ch] = BUTTON_OFF ;
 8003b2c:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b34:	4413      	add	r3, r2
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b3c:	e007      	b.n	8003b4e <CONTROLLER_Update_Channels_Analysis+0x1f2>
						else
							controller->button_on_off[ch] = BUTTON_ON ;
 8003b3e:	4b37      	ldr	r3, [pc, #220]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	4413      	add	r3, r2
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}

					controller->button_state[ch] = button_state ;
 8003b4e:	4b33      	ldr	r3, [pc, #204]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	6839      	ldr	r1, [r7, #0]
 8003b58:	b2c9      	uxtb	r1, r1
 8003b5a:	4413      	add	r3, r2
 8003b5c:	460a      	mov	r2, r1
 8003b5e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8003b62:	e09c      	b.n	8003c9e <CONTROLLER_Update_Channels_Analysis+0x342>

				case ANALYSIS_MODE_BUTTON_PUSH :
					//Active le boutton dans le code
					if(!controller->button_pushed[ch])
 8003b64:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d107      	bne.n	8003b86 <CONTROLLER_Update_Channels_Analysis+0x22a>
						controller->button_pushed[ch] = BUTTON_PUSHED_NO_REQUEST ;
 8003b76:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	4413      	add	r3, r2
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	bf8c      	ite	hi
 8003b9e:	2301      	movhi	r3, #1
 8003ba0:	2300      	movls	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d010      	beq.n	8003bde <CONTROLLER_Update_Channels_Analysis+0x282>
 8003bbc:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d107      	bne.n	8003bde <CONTROLLER_Update_Channels_Analysis+0x282>
						controller->button_pushed[ch] = BUTTON_PUSHED_REQUEST ;
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	2202      	movs	r2, #2
 8003bda:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					}

					controller->button_state[ch] = button_state ;
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	6839      	ldr	r1, [r7, #0]
 8003be8:	b2c9      	uxtb	r1, r1
 8003bea:	4413      	add	r3, r2
 8003bec:	460a      	mov	r2, r1
 8003bee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8003bf2:	e054      	b.n	8003c9e <CONTROLLER_Update_Channels_Analysis+0x342>
				case ANALYSIS_MODE_SEQUENCE:
					//todo analyse de séquences sur les switchs
					break;

				case ANALYSIS_MODE_SWITCH_MODE:
					if(controller->channels[ch] < 1300)
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	f240 5213 	movw	r2, #1299	; 0x513
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d809      	bhi.n	8003c20 <CONTROLLER_Update_Channels_Analysis+0x2c4>
						controller->switch_pos[ch] = SWITCH_POS_1 ;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	4413      	add	r3, r2
 8003c16:	2200      	movs	r2, #0
 8003c18:	749a      	strb	r2, [r3, #18]
						controller->switch_pos[ch] = SWITCH_POS_2 ;
					else if(controller->channels[ch] > 1600)
						controller->switch_pos[ch] = SWITCH_POS_3 ;
					else
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
					break;
 8003c1a:	e040      	b.n	8003c9e <CONTROLLER_Update_Channels_Analysis+0x342>
 8003c1c:	20001984 	.word	0x20001984
					else if(controller->channels[ch] > 1300 && controller->channels[ch] < 1600)
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	f240 5214 	movw	r2, #1300	; 0x514
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d912      	bls.n	8003c5e <CONTROLLER_Update_Channels_Analysis+0x302>
 8003c38:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c4c:	d207      	bcs.n	8003c5e <CONTROLLER_Update_Channels_Analysis+0x302>
						controller->switch_pos[ch] = SWITCH_POS_2 ;
 8003c4e:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	4413      	add	r3, r2
 8003c58:	2201      	movs	r2, #1
 8003c5a:	749a      	strb	r2, [r3, #18]
					break;
 8003c5c:	e01f      	b.n	8003c9e <CONTROLLER_Update_Channels_Analysis+0x342>
					else if(controller->channels[ch] > 1600)
 8003c5e:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c72:	d907      	bls.n	8003c84 <CONTROLLER_Update_Channels_Analysis+0x328>
						controller->switch_pos[ch] = SWITCH_POS_3 ;
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	2202      	movs	r2, #2
 8003c80:	749a      	strb	r2, [r3, #18]
					break;
 8003c82:	e00c      	b.n	8003c9e <CONTROLLER_Update_Channels_Analysis+0x342>
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	2203      	movs	r2, #3
 8003c90:	749a      	strb	r2, [r3, #18]
					break;
 8003c92:	e004      	b.n	8003c9e <CONTROLLER_Update_Channels_Analysis+0x342>
				default:
					break;
 8003c94:	bf00      	nop
 8003c96:	e002      	b.n	8003c9e <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8003c98:	bf00      	nop
 8003c9a:	e000      	b.n	8003c9e <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8003c9c:	bf00      	nop
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	71fb      	strb	r3, [r7, #7]
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	2b09      	cmp	r3, #9
 8003cb0:	f77f ae5a 	ble.w	8003968 <CONTROLLER_Update_Channels_Analysis+0xc>
			}
		}

		flag_process();
 8003cb4:	f000 f806 	bl	8003cc4 <flag_process>
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20001984 	.word	0x20001984

08003cc4 <flag_process>:

static void flag_process()
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	//Throttle lvl
	switch(controller->throttle_lvl[2]){
 8003cc8:	4b62      	ldr	r3, [pc, #392]	; (8003e54 <flag_process+0x190>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d00d      	beq.n	8003cf0 <flag_process+0x2c>
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d015      	beq.n	8003d04 <flag_process+0x40>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d11d      	bne.n	8003d18 <flag_process+0x54>
		case THROTTLE_LVL_NULL :
			EVENT_Set_flag(FLAG_THROTTLE_NULL);
 8003cdc:	2017      	movs	r0, #23
 8003cde:	f7fe feed 	bl	8002abc <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8003ce2:	2016      	movs	r0, #22
 8003ce4:	f7fe ff02 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8003ce8:	2015      	movs	r0, #21
 8003cea:	f7fe feff 	bl	8002aec <EVENT_Clean_flag>
			break;
 8003cee:	e013      	b.n	8003d18 <flag_process+0x54>
		case THROTTLE_LVL_LOW :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8003cf0:	2017      	movs	r0, #23
 8003cf2:	f7fe fefb 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_LOW);
 8003cf6:	2016      	movs	r0, #22
 8003cf8:	f7fe fee0 	bl	8002abc <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8003cfc:	2015      	movs	r0, #21
 8003cfe:	f7fe fef5 	bl	8002aec <EVENT_Clean_flag>
			break;
 8003d02:	e009      	b.n	8003d18 <flag_process+0x54>
		case THROTTLE_LVL_HIGH :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8003d04:	2017      	movs	r0, #23
 8003d06:	f7fe fef1 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8003d0a:	2016      	movs	r0, #22
 8003d0c:	f7fe feee 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_HIGH);
 8003d10:	2015      	movs	r0, #21
 8003d12:	f7fe fed3 	bl	8002abc <EVENT_Set_flag>
			break;
 8003d16:	bf00      	nop
	}

	//Switch 1 (ch5 soit ch[4])
	if(controller->switch_pos[4] == SWITCH_POS_1){
 8003d18:	4b4e      	ldr	r3, [pc, #312]	; (8003e54 <flag_process+0x190>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	7d9b      	ldrb	r3, [r3, #22]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <flag_process+0x6c>
		EVENT_Set_flag(FLAG_CHAN_5_POS_1);
 8003d22:	2009      	movs	r0, #9
 8003d24:	f7fe feca 	bl	8002abc <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_5_POS_3);
 8003d28:	200a      	movs	r0, #10
 8003d2a:	f7fe fedf 	bl	8002aec <EVENT_Clean_flag>
 8003d2e:	e005      	b.n	8003d3c <flag_process+0x78>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_5_POS_1);
 8003d30:	2009      	movs	r0, #9
 8003d32:	f7fe fedb 	bl	8002aec <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_5_POS_3);
 8003d36:	200a      	movs	r0, #10
 8003d38:	f7fe fec0 	bl	8002abc <EVENT_Set_flag>
	}
	//Switch 2(ch6 soit ch[5])
	switch(controller->switch_pos[5]){
 8003d3c:	4b45      	ldr	r3, [pc, #276]	; (8003e54 <flag_process+0x190>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	7ddb      	ldrb	r3, [r3, #23]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d828      	bhi.n	8003d98 <flag_process+0xd4>
 8003d46:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <flag_process+0x88>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d71 	.word	0x08003d71
 8003d54:	08003d85 	.word	0x08003d85
 8003d58:	08003d99 	.word	0x08003d99
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_6_POS_1);
 8003d5c:	200b      	movs	r0, #11
 8003d5e:	f7fe fead 	bl	8002abc <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8003d62:	200c      	movs	r0, #12
 8003d64:	f7fe fec2 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8003d68:	200d      	movs	r0, #13
 8003d6a:	f7fe febf 	bl	8002aec <EVENT_Clean_flag>
			break;
 8003d6e:	e013      	b.n	8003d98 <flag_process+0xd4>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8003d70:	200b      	movs	r0, #11
 8003d72:	f7fe febb 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_2);
 8003d76:	200c      	movs	r0, #12
 8003d78:	f7fe fea0 	bl	8002abc <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8003d7c:	200d      	movs	r0, #13
 8003d7e:	f7fe feb5 	bl	8002aec <EVENT_Clean_flag>
			break;
 8003d82:	e009      	b.n	8003d98 <flag_process+0xd4>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8003d84:	200b      	movs	r0, #11
 8003d86:	f7fe feb1 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8003d8a:	200c      	movs	r0, #12
 8003d8c:	f7fe feae 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_3);
 8003d90:	200d      	movs	r0, #13
 8003d92:	f7fe fe93 	bl	8002abc <EVENT_Set_flag>
			break;
 8003d96:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 3(ch7 soit ch[6])
	switch(controller->switch_pos[6]){
 8003d98:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <flag_process+0x190>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	7e1b      	ldrb	r3, [r3, #24]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d828      	bhi.n	8003df4 <flag_process+0x130>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <flag_process+0xe4>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003db9 	.word	0x08003db9
 8003dac:	08003dcd 	.word	0x08003dcd
 8003db0:	08003de1 	.word	0x08003de1
 8003db4:	08003df5 	.word	0x08003df5
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_7_POS_1);
 8003db8:	200e      	movs	r0, #14
 8003dba:	f7fe fe7f 	bl	8002abc <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8003dbe:	200f      	movs	r0, #15
 8003dc0:	f7fe fe94 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8003dc4:	2010      	movs	r0, #16
 8003dc6:	f7fe fe91 	bl	8002aec <EVENT_Clean_flag>
			break;
 8003dca:	e013      	b.n	8003df4 <flag_process+0x130>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8003dcc:	200e      	movs	r0, #14
 8003dce:	f7fe fe8d 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_2);
 8003dd2:	200f      	movs	r0, #15
 8003dd4:	f7fe fe72 	bl	8002abc <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8003dd8:	2010      	movs	r0, #16
 8003dda:	f7fe fe87 	bl	8002aec <EVENT_Clean_flag>
			break;
 8003dde:	e009      	b.n	8003df4 <flag_process+0x130>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8003de0:	200e      	movs	r0, #14
 8003de2:	f7fe fe83 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8003de6:	200f      	movs	r0, #15
 8003de8:	f7fe fe80 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_3);
 8003dec:	2010      	movs	r0, #16
 8003dee:	f7fe fe65 	bl	8002abc <EVENT_Set_flag>
			break;
 8003df2:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 4 (ch8 soit ch[7])
	if(controller->switch_pos[7] == SWITCH_POS_1){
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <flag_process+0x190>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	7e5b      	ldrb	r3, [r3, #25]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <flag_process+0x148>
		EVENT_Set_flag(FLAG_CHAN_8_POS_1);
 8003dfe:	2011      	movs	r0, #17
 8003e00:	f7fe fe5c 	bl	8002abc <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_8_POS_3);
 8003e04:	2012      	movs	r0, #18
 8003e06:	f7fe fe71 	bl	8002aec <EVENT_Clean_flag>
 8003e0a:	e005      	b.n	8003e18 <flag_process+0x154>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_8_POS_1);
 8003e0c:	2011      	movs	r0, #17
 8003e0e:	f7fe fe6d 	bl	8002aec <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_8_POS_3);
 8003e12:	2012      	movs	r0, #18
 8003e14:	f7fe fe52 	bl	8002abc <EVENT_Set_flag>
	}

	//Button 1 (ch9 soit ch[8]) en mode push
	if(controller->button_pushed[8] == BUTTON_PUSHED_REQUEST){
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <flag_process+0x190>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d107      	bne.n	8003e34 <flag_process+0x170>
		EVENT_Set_flag(FLAG_CHAN_9_PUSH);
 8003e24:	2013      	movs	r0, #19
 8003e26:	f7fe fe49 	bl	8002abc <EVENT_Set_flag>
		controller->button_pushed[8] = BUTTON_PUSHED_NO_REQUEST ;
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <flag_process+0x190>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	//Button 2 (ch10 soit ch[9]) en mode on/off
	if(controller->button_on_off[9] == BUTTON_ON)
 8003e34:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <flag_process+0x190>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d103      	bne.n	8003e48 <flag_process+0x184>
		EVENT_Set_flag(FLAG_CHAN_10_ON);
 8003e40:	2014      	movs	r0, #20
 8003e42:	f7fe fe3b 	bl	8002abc <EVENT_Set_flag>
	else
		EVENT_Clean_flag(FLAG_CHAN_10_ON);



}
 8003e46:	e002      	b.n	8003e4e <flag_process+0x18a>
		EVENT_Clean_flag(FLAG_CHAN_10_ON);
 8003e48:	2014      	movs	r0, #20
 8003e4a:	f7fe fe4f 	bl	8002aec <EVENT_Clean_flag>
}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20001984 	.word	0x20001984

08003e58 <CONTROLLER_Update_Channels_Array>:

bool_e CONTROLLER_Update_Channels_Array(void){
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
	//Utilisation de l'ibus atm
	return IBUS_Channel_Update();
 8003e5c:	f007 fd0c 	bl	800b878 <IBUS_Channel_Update>
 8003e60:	4603      	mov	r3, r0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <CONTROLLER_Rx_Data_Rdy>:

void CONTROLLER_Rx_Data_Rdy(void){
 8003e66:	b580      	push	{r7, lr}
 8003e68:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_IBUS_DATA_RDY);
 8003e6a:	2008      	movs	r0, #8
 8003e6c:	f7fe fe26 	bl	8002abc <EVENT_Set_flag>
}
 8003e70:	bf00      	nop
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <REGULATION_ORIENTATION_Init>:

float pid_angle_settings_roll[PID_NB_SETTINGS] = {10.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};
float pid_angle_settings_pitch[PID_NB_SETTINGS] = {1.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};


void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
	orientation = orientation_ ;
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <REGULATION_ORIENTATION_Init+0x8c>)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_ ;
 8003e86:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <REGULATION_ORIENTATION_Init+0x90>)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6013      	str	r3, [r2, #0]
	regu_orientation->mode = REGULATION_ORIENTATION_MODE_OFF ;
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <REGULATION_ORIENTATION_Init+0x90>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2200      	movs	r2, #0
 8003e92:	711a      	strb	r2, [r3, #4]
	regu_orientation->outputs = output ;
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <REGULATION_ORIENTATION_Init+0x90>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8


	//Init PIDs angular speed
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], pid_velocity_settings_roll, FILTER_FIRST_ORDER, filter_pid_velocity_roll_pitch);
 8003e9e:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <REGULATION_ORIENTATION_Init+0x90>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <REGULATION_ORIENTATION_Init+0x94>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4918      	ldr	r1, [pc, #96]	; (8003f0c <REGULATION_ORIENTATION_Init+0x98>)
 8003eac:	f007 ffa6 	bl	800bdfc <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], pid_velocity_settings_pitch, FILTER_FIRST_ORDER, filter_pid_velocity_roll_pitch);
 8003eb0:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <REGULATION_ORIENTATION_Init+0x90>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f103 0008 	add.w	r0, r3, #8
 8003eb8:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <REGULATION_ORIENTATION_Init+0x94>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	4914      	ldr	r1, [pc, #80]	; (8003f10 <REGULATION_ORIENTATION_Init+0x9c>)
 8003ebe:	f007 ff9d 	bl	800bdfc <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], pid_velocity_settings_yaw, FILTER_FIRST_ORDER, filter_pid_velocity_yaw);
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <REGULATION_ORIENTATION_Init+0x90>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <REGULATION_ORIENTATION_Init+0xa0>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4912      	ldr	r1, [pc, #72]	; (8003f18 <REGULATION_ORIENTATION_Init+0xa4>)
 8003ed0:	f007 ff94 	bl	800bdfc <PID_init>


	//Init PIDs angular position
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], pid_angle_settings_roll, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <REGULATION_ORIENTATION_Init+0x90>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f503 709c 	add.w	r0, r3, #312	; 0x138
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <REGULATION_ORIENTATION_Init+0xa8>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	490f      	ldr	r1, [pc, #60]	; (8003f20 <REGULATION_ORIENTATION_Init+0xac>)
 8003ee2:	f007 ff8b 	bl	800bdfc <PID_init>
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], pid_angle_settings_pitch, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 8003ee6:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <REGULATION_ORIENTATION_Init+0x90>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <REGULATION_ORIENTATION_Init+0xa8>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	490c      	ldr	r1, [pc, #48]	; (8003f24 <REGULATION_ORIENTATION_Init+0xb0>)
 8003ef4:	f007 ff82 	bl	800bdfc <PID_init>


}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	2000198c 	.word	0x2000198c
 8003f04:	20001988 	.word	0x20001988
 8003f08:	20001450 	.word	0x20001450
 8003f0c:	20001468 	.word	0x20001468
 8003f10:	2000147c 	.word	0x2000147c
 8003f14:	2000145c 	.word	0x2000145c
 8003f18:	20001490 	.word	0x20001490
 8003f1c:	200014a4 	.word	0x200014a4
 8003f20:	200014b0 	.word	0x200014b0
 8003f24:	200014c4 	.word	0x200014c4

08003f28 <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_orientation_mode_e regu_mode){
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
	regu_orientation->mode = regu_mode;
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <REGULATION_ORIENTATION_Set_Regulation_Mode+0x20>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	79fa      	ldrb	r2, [r7, #7]
 8003f38:	711a      	strb	r2, [r3, #4]
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20001988 	.word	0x20001988

08003f4c <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){
 8003f4c:	b598      	push	{r3, r4, r7, lr}
 8003f4e:	af00      	add	r7, sp, #0

	switch(regu_orientation->mode){
 8003f50:	4b8f      	ldr	r3, [pc, #572]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	791b      	ldrb	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d019      	beq.n	8003f8e <REGULATION_ORIENTATION_Process+0x42>
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d07c      	beq.n	8004058 <REGULATION_ORIENTATION_Process+0x10c>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d000      	beq.n	8003f64 <REGULATION_ORIENTATION_Process+0x18>
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
			break;
	}

}
 8003f62:	e112      	b.n	800418a <REGULATION_ORIENTATION_Process+0x23e>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = 0;
 8003f64:	4b8a      	ldr	r3, [pc, #552]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = 0;
 8003f70:	4b87      	ldr	r3, [pc, #540]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003f78:	3302      	adds	r3, #2
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = 0;
 8003f7e:	4b84      	ldr	r3, [pc, #528]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003f86:	3304      	adds	r3, #4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	801a      	strh	r2, [r3, #0]
			break;
 8003f8c:	e0fd      	b.n	800418a <REGULATION_ORIENTATION_Process+0x23e>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 8003f8e:	4b80      	ldr	r3, [pc, #512]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8003f96:	4b7e      	ldr	r3, [pc, #504]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8003f9e:	4b7d      	ldr	r3, [pc, #500]	; (8004194 <REGULATION_ORIENTATION_Process+0x248>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	ed93 7a00 	vldr	s14, [r3]
 8003faa:	eef0 0a47 	vmov.f32	s1, s14
 8003fae:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f007 fe86 	bl	800bcc4 <PID_compute>
 8003fb8:	eef0 7a40 	vmov.f32	s15, s0
 8003fbc:	4b74      	ldr	r3, [pc, #464]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fc8:	ee17 2a90 	vmov	r2, s15
 8003fcc:	b212      	sxth	r2, r2
 8003fce:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 8003fd0:	4b6f      	ldr	r3, [pc, #444]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f103 0208 	add.w	r2, r3, #8
 8003fd8:	4b6d      	ldr	r3, [pc, #436]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8003fe0:	4b6c      	ldr	r3, [pc, #432]	; (8004194 <REGULATION_ORIENTATION_Process+0x248>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	ed93 7a00 	vldr	s14, [r3]
 8003fea:	eef0 0a47 	vmov.f32	s1, s14
 8003fee:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f007 fe66 	bl	800bcc4 <PID_compute>
 8003ff8:	eef0 7a40 	vmov.f32	s15, s0
 8003ffc:	4b64      	ldr	r3, [pc, #400]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004004:	3302      	adds	r3, #2
 8004006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800400a:	ee17 2a90 	vmov	r2, s15
 800400e:	b212      	sxth	r2, r2
 8004010:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 8004012:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800401a:	4b5d      	ldr	r3, [pc, #372]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8004022:	4b5c      	ldr	r3, [pc, #368]	; (8004194 <REGULATION_ORIENTATION_Process+0x248>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	3308      	adds	r3, #8
 800402a:	ed93 7a00 	vldr	s14, [r3]
 800402e:	eef0 0a47 	vmov.f32	s1, s14
 8004032:	eeb0 0a67 	vmov.f32	s0, s15
 8004036:	4610      	mov	r0, r2
 8004038:	f007 fe44 	bl	800bcc4 <PID_compute>
 800403c:	eef0 7a40 	vmov.f32	s15, s0
 8004040:	4b53      	ldr	r3, [pc, #332]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004048:	3304      	adds	r3, #4
 800404a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800404e:	ee17 2a90 	vmov	r2, s15
 8004052:	b212      	sxth	r2, r2
 8004054:	801a      	strh	r2, [r3, #0]
			break;
 8004056:	e098      	b.n	800418a <REGULATION_ORIENTATION_Process+0x23e>
			regu_orientation->consigne_angular_speed[ORIENTATION_ROLL] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], regu_orientation->consigne_angular_pos[ORIENTATION_ROLL], orientation->angular_position[ORIENTATION_ROLL]);
 8004058:	4b4d      	ldr	r3, [pc, #308]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8004060:	4b4b      	ldr	r3, [pc, #300]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8004068:	4b4a      	ldr	r3, [pc, #296]	; (8004194 <REGULATION_ORIENTATION_Process+0x248>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004070:	eef0 0a47 	vmov.f32	s1, s14
 8004074:	eeb0 0a67 	vmov.f32	s0, s15
 8004078:	4610      	mov	r0, r2
 800407a:	f007 fe23 	bl	800bcc4 <PID_compute>
 800407e:	eef0 7a40 	vmov.f32	s15, s0
 8004082:	4b43      	ldr	r3, [pc, #268]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	eef1 7a67 	vneg.f32	s15, s15
 800408a:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0
			regu_orientation->consigne_angular_speed[ORIENTATION_PITCH] = PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], regu_orientation->consigne_angular_pos[ORIENTATION_PITCH], orientation->angular_position[ORIENTATION_PITCH]);
 800408e:	4b40      	ldr	r3, [pc, #256]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8004096:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 800409e:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <REGULATION_ORIENTATION_Process+0x248>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	ed93 7a00 	vldr	s14, [r3]
 80040a6:	4b3a      	ldr	r3, [pc, #232]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 80040a8:	681c      	ldr	r4, [r3, #0]
 80040aa:	eef0 0a47 	vmov.f32	s1, s14
 80040ae:	eeb0 0a67 	vmov.f32	s0, s15
 80040b2:	4610      	mov	r0, r2
 80040b4:	f007 fe06 	bl	800bcc4 <PID_compute>
 80040b8:	eef0 7a40 	vmov.f32	s15, s0
 80040bc:	edc4 7a77 	vstr	s15, [r4, #476]	; 0x1dc
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 80040c0:	4b33      	ldr	r3, [pc, #204]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80040c8:	4b31      	ldr	r3, [pc, #196]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80040d0:	4b30      	ldr	r3, [pc, #192]	; (8004194 <REGULATION_ORIENTATION_Process+0x248>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	3304      	adds	r3, #4
 80040d8:	ed93 7a00 	vldr	s14, [r3]
 80040dc:	eef0 0a47 	vmov.f32	s1, s14
 80040e0:	eeb0 0a67 	vmov.f32	s0, s15
 80040e4:	4610      	mov	r0, r2
 80040e6:	f007 fded 	bl	800bcc4 <PID_compute>
 80040ea:	eef0 7a40 	vmov.f32	s15, s0
 80040ee:	4b28      	ldr	r3, [pc, #160]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80040f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fa:	ee17 2a90 	vmov	r2, s15
 80040fe:	b212      	sxth	r2, r2
 8004100:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 8004102:	4b23      	ldr	r3, [pc, #140]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f103 0208 	add.w	r2, r3, #8
 800410a:	4b21      	ldr	r3, [pc, #132]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <REGULATION_ORIENTATION_Process+0x248>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	ed93 7a00 	vldr	s14, [r3]
 800411c:	eef0 0a47 	vmov.f32	s1, s14
 8004120:	eeb0 0a67 	vmov.f32	s0, s15
 8004124:	4610      	mov	r0, r2
 8004126:	f007 fdcd 	bl	800bcc4 <PID_compute>
 800412a:	eef0 7a40 	vmov.f32	s15, s0
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004136:	3302      	adds	r3, #2
 8004138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800413c:	ee17 2a90 	vmov	r2, s15
 8004140:	b212      	sxth	r2, r2
 8004142:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 8004144:	4b12      	ldr	r3, [pc, #72]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800414c:	4b10      	ldr	r3, [pc, #64]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <REGULATION_ORIENTATION_Process+0x248>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	3308      	adds	r3, #8
 800415c:	ed93 7a00 	vldr	s14, [r3]
 8004160:	eef0 0a47 	vmov.f32	s1, s14
 8004164:	eeb0 0a67 	vmov.f32	s0, s15
 8004168:	4610      	mov	r0, r2
 800416a:	f007 fdab 	bl	800bcc4 <PID_compute>
 800416e:	eef0 7a40 	vmov.f32	s15, s0
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <REGULATION_ORIENTATION_Process+0x244>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800417a:	3304      	adds	r3, #4
 800417c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004180:	ee17 2a90 	vmov	r2, s15
 8004184:	b212      	sxth	r2, r2
 8004186:	801a      	strh	r2, [r3, #0]
			break;
 8004188:	bf00      	nop
}
 800418a:	bf00      	nop
 800418c:	bd98      	pop	{r3, r4, r7, pc}
 800418e:	bf00      	nop
 8004190:	20001988 	.word	0x20001988
 8004194:	2000198c 	.word	0x2000198c

08004198 <REGULATION_POSITION_Init>:





void REGULATION_POSITION_Init(regu_position_t * regu_position_, regu_orientation_t * regu_orientation_, int16_t * outputs){
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
	regu_position = regu_position_;
 80041a4:	4a09      	ldr	r2, [pc, #36]	; (80041cc <REGULATION_POSITION_Init+0x34>)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_;
 80041aa:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <REGULATION_POSITION_Init+0x38>)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	6013      	str	r3, [r2, #0]
	regu_position->mode = REGULATION_POSITION_MODE_OFF ;
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <REGULATION_POSITION_Init+0x34>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2200      	movs	r2, #0
 80041b6:	721a      	strb	r2, [r3, #8]
	regu_position->outputs = outputs ;
 80041b8:	4b04      	ldr	r3, [pc, #16]	; (80041cc <REGULATION_POSITION_Init+0x34>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	605a      	str	r2, [r3, #4]


}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	20001990 	.word	0x20001990
 80041d0:	20001994 	.word	0x20001994

080041d4 <REGULATION_POSITION_Set_Regulation_Mode>:

void REGULATION_POSITION_Set_Regulation_Mode(regu_position_mode_e regu_mode){
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
	regu_position->mode = regu_mode ;
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <REGULATION_POSITION_Set_Regulation_Mode+0x20>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	79fa      	ldrb	r2, [r7, #7]
 80041e4:	721a      	strb	r2, [r3, #8]
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20001990 	.word	0x20001990

080041f8 <REGULATION_POSITION_Process>:

void REGULATION_POSITION_Process(void){
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
	switch(regu_position->mode){
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <REGULATION_POSITION_Process+0x40>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	7a1b      	ldrb	r3, [r3, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <REGULATION_POSITION_Process+0x14>
 8004206:	2b01      	cmp	r3, #1
 8004208:	d007      	beq.n	800421a <REGULATION_POSITION_Process+0x22>
			break;
		case REGULATION_POSITION_MODE_ON:
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
			break;
	}
}
 800420a:	e010      	b.n	800422e <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = 0;
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <REGULATION_POSITION_Process+0x40>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	3306      	adds	r3, #6
 8004214:	2200      	movs	r2, #0
 8004216:	801a      	strh	r2, [r3, #0]
			break;
 8004218:	e009      	b.n	800422e <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <REGULATION_POSITION_Process+0x40>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <REGULATION_POSITION_Process+0x40>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	3306      	adds	r3, #6
 8004226:	f9b2 2000 	ldrsh.w	r2, [r2]
 800422a:	801a      	strh	r2, [r3, #0]
			break;
 800422c:	bf00      	nop
}
 800422e:	bf00      	nop
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20001990 	.word	0x20001990

0800423c <ACC_init>:
static void acc_data_callback(void);

float filter_config [3] = {0.1f, 0.9f, 0};


void ACC_init(acc_t * acc, mpu_t * mpu){
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]

	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_FIRST_ORDER);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3314      	adds	r3, #20
 800424a:	2200      	movs	r2, #0
 800424c:	491a      	ldr	r1, [pc, #104]	; (80042b8 <ACC_init+0x7c>)
 800424e:	4618      	mov	r0, r3
 8004250:	f007 fa10 	bl	800b674 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_FIRST_ORDER);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3330      	adds	r3, #48	; 0x30
 8004258:	2200      	movs	r2, #0
 800425a:	4917      	ldr	r1, [pc, #92]	; (80042b8 <ACC_init+0x7c>)
 800425c:	4618      	mov	r0, r3
 800425e:	f007 fa09 	bl	800b674 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_FIRST_ORDER);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	334c      	adds	r3, #76	; 0x4c
 8004266:	2200      	movs	r2, #0
 8004268:	4913      	ldr	r1, [pc, #76]	; (80042b8 <ACC_init+0x7c>)
 800426a:	4618      	mov	r0, r3
 800426c:	f007 fa02 	bl	800b674 <FILTER_init>


	acc->mpu = mpu ;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	601a      	str	r2, [r3, #0]
	acc->raw = acc->mpu->acc ;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	605a      	str	r2, [r3, #4]

	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <ACC_init+0x80>)
 8004288:	2101      	movs	r1, #1
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fc36 	bl	8004afc <MPU_init_acc>
 8004290:	4603      	mov	r3, r0
 8004292:	2b01      	cmp	r3, #1
 8004294:	d008      	beq.n	80042a8 <ACC_init+0x6c>
 8004296:	2b02      	cmp	r3, #2
 8004298:	d008      	beq.n	80042ac <ACC_init+0x70>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d000      	beq.n	80042a0 <ACC_init+0x64>
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}

}
 800429e:	e006      	b.n	80042ae <ACC_init+0x72>
			EVENT_Set_flag(FLAG_ACC_OK);
 80042a0:	2004      	movs	r0, #4
 80042a2:	f7fe fc0b 	bl	8002abc <EVENT_Set_flag>
			break;
 80042a6:	e002      	b.n	80042ae <ACC_init+0x72>
			break;
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <ACC_init+0x72>
			break;
 80042ac:	bf00      	nop
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200014d8 	.word	0x200014d8
 80042bc:	0800437d 	.word	0x0800437d

080042c0 <ACC_update>:

void ACC_update(acc_t * acc){
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	switch(MPU_update_acc(acc->mpu)){
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fcc3 	bl	8004c58 <MPU_update_acc>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d00c      	beq.n	80042f2 <ACC_update+0x32>
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d006      	beq.n	80042ea <ACC_update+0x2a>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d000      	beq.n	80042e2 <ACC_update+0x22>
			EVENT_Clean_flag(FLAG_ACC_OK);
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 80042e0:	e008      	b.n	80042f4 <ACC_update+0x34>
			EVENT_Set_flag(FLAG_ACC_DATA_READY);
 80042e2:	2006      	movs	r0, #6
 80042e4:	f7fe fbea 	bl	8002abc <EVENT_Set_flag>
			break;
 80042e8:	e004      	b.n	80042f4 <ACC_update+0x34>
			EVENT_Clean_flag(FLAG_ACC_OK);
 80042ea:	2004      	movs	r0, #4
 80042ec:	f7fe fbfe 	bl	8002aec <EVENT_Clean_flag>
			break;
 80042f0:	e000      	b.n	80042f4 <ACC_update+0x34>
			break;
 80042f2:	bf00      	nop
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <ACC_process_lpf>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void ACC_process_lpf(acc_t * acc){
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f103 0214 	add.w	r2, r3, #20
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	edd3 7a00 	vldr	s15, [r3]
 8004312:	eeb0 0a67 	vmov.f32	s0, s15
 8004316:	4610      	mov	r0, r2
 8004318:	f007 f9cf 	bl	800b6ba <FILTER_process>
 800431c:	eef0 7a40 	vmov.f32	s15, s0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	edd3 7a00 	vldr	s15, [r3]
 8004336:	eeb0 0a67 	vmov.f32	s0, s15
 800433a:	4610      	mov	r0, r2
 800433c:	f007 f9bd 	bl	800b6ba <FILTER_process>
 8004340:	eef0 7a40 	vmov.f32	s15, s0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	edc3 7a03 	vstr	s15, [r3, #12]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	3308      	adds	r3, #8
 8004356:	edd3 7a00 	vldr	s15, [r3]
 800435a:	eeb0 0a67 	vmov.f32	s0, s15
 800435e:	4610      	mov	r0, r2
 8004360:	f007 f9ab 	bl	800b6ba <FILTER_process>
 8004364:	eef0 7a40 	vmov.f32	s15, s0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	edc3 7a04 	vstr	s15, [r3, #16]
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 800436e:	2007      	movs	r0, #7
 8004370:	f7fe fba4 	bl	8002abc <EVENT_Set_flag>
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <acc_data_callback>:

static void acc_data_callback(void){
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8004380:	2006      	movs	r0, #6
 8004382:	f7fe fb9b 	bl	8002abc <EVENT_Set_flag>
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}

0800438a <BATTERIE_Init>:


#include "batterie.h"


void BATTERIE_Init(batterie_t * batterie, ADC_HandleTypeDef * hadc){
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
	batterie->hadc = hadc ;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(hadc, batterie->reading, 16);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	2210      	movs	r2, #16
 80043a0:	4619      	mov	r1, r3
 80043a2:	6838      	ldr	r0, [r7, #0]
 80043a4:	f002 fb0a 	bl	80069bc <HAL_ADC_Start_DMA>
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <GYRO_init>:

float filter[3] = {0.1f, 0.9f, 0};

static void gyro_data_callback(void);

void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]

	//Filters init
	FILTER_init(&gyro->filters[GYRO_AXE_X], filter, FILTER_FIRST_ORDER);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3320      	adds	r3, #32
 80043be:	2200      	movs	r2, #0
 80043c0:	491a      	ldr	r1, [pc, #104]	; (800442c <GYRO_init+0x7c>)
 80043c2:	4618      	mov	r0, r3
 80043c4:	f007 f956 	bl	800b674 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Y], filter, FILTER_FIRST_ORDER);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	333c      	adds	r3, #60	; 0x3c
 80043cc:	2200      	movs	r2, #0
 80043ce:	4917      	ldr	r1, [pc, #92]	; (800442c <GYRO_init+0x7c>)
 80043d0:	4618      	mov	r0, r3
 80043d2:	f007 f94f 	bl	800b674 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Z], filter, FILTER_FIRST_ORDER);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3358      	adds	r3, #88	; 0x58
 80043da:	2200      	movs	r2, #0
 80043dc:	4913      	ldr	r1, [pc, #76]	; (800442c <GYRO_init+0x7c>)
 80043de:	4618      	mov	r0, r3
 80043e0:	f007 f948 	bl	800b674 <FILTER_init>

	gyro->mpu = mpu ;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	601a      	str	r2, [r3, #0]
	gyro->raw = gyro->mpu->gyro ;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	605a      	str	r2, [r3, #4]

	//Raise the flag "ok" if the gyro get succesfully initiated
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <GYRO_init+0x80>)
 80043fc:	2103      	movs	r1, #3
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fac2 	bl	8004988 <MPU_init_gyro>
 8004404:	4603      	mov	r3, r0
 8004406:	2b01      	cmp	r3, #1
 8004408:	d008      	beq.n	800441c <GYRO_init+0x6c>
 800440a:	2b02      	cmp	r3, #2
 800440c:	d008      	beq.n	8004420 <GYRO_init+0x70>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d000      	beq.n	8004414 <GYRO_init+0x64>
		case SENSOR_REQUEST_FAIL:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8004412:	e006      	b.n	8004422 <GYRO_init+0x72>
			EVENT_Set_flag(FLAG_GYRO_OK);
 8004414:	2000      	movs	r0, #0
 8004416:	f7fe fb51 	bl	8002abc <EVENT_Set_flag>
			break;
 800441a:	e002      	b.n	8004422 <GYRO_init+0x72>
			break;
 800441c:	bf00      	nop
 800441e:	e000      	b.n	8004422 <GYRO_init+0x72>
			break;
 8004420:	bf00      	nop
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	200014e4 	.word	0x200014e4
 8004430:	0800465f 	.word	0x0800465f

08004434 <GYRO_calibrate>:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
bool_e GYRO_calibrate(gyro_t * gyro, uint16_t iteration){
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	807b      	strh	r3, [r7, #2]
	static uint16_t compteur = 0;

	static float sum[3] = {0};

	if(!compteur){
 8004440:	4b41      	ldr	r3, [pc, #260]	; (8004548 <GYRO_calibrate+0x114>)
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <GYRO_calibrate+0x2c>
		sum[0] = 0 ;
 8004448:	4b40      	ldr	r3, [pc, #256]	; (800454c <GYRO_calibrate+0x118>)
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
		sum[1] = 0 ;
 8004450:	4b3e      	ldr	r3, [pc, #248]	; (800454c <GYRO_calibrate+0x118>)
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	605a      	str	r2, [r3, #4]
		sum[2] = 0 ;
 8004458:	4b3c      	ldr	r3, [pc, #240]	; (800454c <GYRO_calibrate+0x118>)
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	609a      	str	r2, [r3, #8]
	}

	sum[0] += gyro->raw[0] + gyro->offsets[0];
 8004460:	4b3a      	ldr	r3, [pc, #232]	; (800454c <GYRO_calibrate+0x118>)
 8004462:	ed93 7a00 	vldr	s14, [r3]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	edd3 6a00 	vldr	s13, [r3]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	edd3 7a05 	vldr	s15, [r3, #20]
 8004474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800447c:	4b33      	ldr	r3, [pc, #204]	; (800454c <GYRO_calibrate+0x118>)
 800447e:	edc3 7a00 	vstr	s15, [r3]
	sum[1] += gyro->raw[1] + gyro->offsets[1];
 8004482:	4b32      	ldr	r3, [pc, #200]	; (800454c <GYRO_calibrate+0x118>)
 8004484:	ed93 7a01 	vldr	s14, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	3304      	adds	r3, #4
 800448e:	edd3 6a00 	vldr	s13, [r3]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	edd3 7a06 	vldr	s15, [r3, #24]
 8004498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a0:	4b2a      	ldr	r3, [pc, #168]	; (800454c <GYRO_calibrate+0x118>)
 80044a2:	edc3 7a01 	vstr	s15, [r3, #4]
	sum[2] += gyro->raw[2] + gyro->offsets[2];
 80044a6:	4b29      	ldr	r3, [pc, #164]	; (800454c <GYRO_calibrate+0x118>)
 80044a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	3308      	adds	r3, #8
 80044b2:	edd3 6a00 	vldr	s13, [r3]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80044bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c4:	4b21      	ldr	r3, [pc, #132]	; (800454c <GYRO_calibrate+0x118>)
 80044c6:	edc3 7a02 	vstr	s15, [r3, #8]

	compteur ++;
 80044ca:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <GYRO_calibrate+0x114>)
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	3301      	adds	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <GYRO_calibrate+0x114>)
 80044d4:	801a      	strh	r2, [r3, #0]

	if(compteur == iteration){
 80044d6:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <GYRO_calibrate+0x114>)
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d12b      	bne.n	8004538 <GYRO_calibrate+0x104>
		gyro->offsets[0] = sum[0] / (float)iteration;
 80044e0:	4b1a      	ldr	r3, [pc, #104]	; (800454c <GYRO_calibrate+0x118>)
 80044e2:	edd3 6a00 	vldr	s13, [r3]
 80044e6:	887b      	ldrh	r3, [r7, #2]
 80044e8:	ee07 3a90 	vmov	s15, r3
 80044ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	edc3 7a05 	vstr	s15, [r3, #20]
		gyro->offsets[1] = sum[1] / (float)iteration;
 80044fa:	4b14      	ldr	r3, [pc, #80]	; (800454c <GYRO_calibrate+0x118>)
 80044fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8004500:	887b      	ldrh	r3, [r7, #2]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800450a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	edc3 7a06 	vstr	s15, [r3, #24]
		gyro->offsets[2] = sum[2] / (float)iteration;
 8004514:	4b0d      	ldr	r3, [pc, #52]	; (800454c <GYRO_calibrate+0x118>)
 8004516:	edd3 6a02 	vldr	s13, [r3, #8]
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	ee07 3a90 	vmov	s15, r3
 8004520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	edc3 7a07 	vstr	s15, [r3, #28]
		compteur = 0;
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <GYRO_calibrate+0x114>)
 8004530:	2200      	movs	r2, #0
 8004532:	801a      	strh	r2, [r3, #0]
		return TRUE;
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <GYRO_calibrate+0x106>
	}

	return FALSE;
 8004538:	2300      	movs	r3, #0

}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20001998 	.word	0x20001998
 800454c:	2000199c 	.word	0x2000199c

08004550 <GYRO_ACC_update_dma>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void GYRO_ACC_update_dma(gyro_t * gyro){
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	switch(MPU_update_all_dma(gyro->mpu)){
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fbba 	bl	8004cd6 <MPU_update_all_dma>
 8004562:	4603      	mov	r3, r0
 8004564:	2b01      	cmp	r3, #1
 8004566:	d00a      	beq.n	800457e <GYRO_ACC_update_dma+0x2e>
 8004568:	2b02      	cmp	r3, #2
 800456a:	d001      	beq.n	8004570 <GYRO_ACC_update_dma+0x20>
 800456c:	2b00      	cmp	r3, #0
		case SENSOR_REQUEST_OK:
			break;
 800456e:	e007      	b.n	8004580 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_FAIL:
			EVENT_Clean_flag(FLAG_GYRO_OK);
 8004570:	2000      	movs	r0, #0
 8004572:	f7fe fabb 	bl	8002aec <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8004576:	2004      	movs	r0, #4
 8004578:	f7fe fab8 	bl	8002aec <EVENT_Clean_flag>
			break;
 800457c:	e000      	b.n	8004580 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_BUSY:
			break;
 800457e:	bf00      	nop
	}
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <GYRO_process_lpf>:

void GYRO_process_lpf(gyro_t * gyro){
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	//Offset correction first
	gyro->raw[GYRO_AXE_X] -= gyro->offsets[GYRO_AXE_X];
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	ed93 7a00 	vldr	s14, [r3]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	edd3 7a05 	vldr	s15, [r3, #20]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a6:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[GYRO_AXE_Y] -= gyro->offsets[GYRO_AXE_Y];
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	ed93 7a00 	vldr	s14, [r3]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	3304      	adds	r3, #4
 80045c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045c4:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[GYRO_AXE_Z] -= gyro->offsets[GYRO_AXE_Z];
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	3308      	adds	r3, #8
 80045ce:	ed93 7a00 	vldr	s14, [r3]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	3308      	adds	r3, #8
 80045de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045e2:	edc3 7a00 	vstr	s15, [r3]
	//Then the actual low pass filter
	gyro->filtered[GYRO_AXE_X] =  FILTER_process(&gyro->filters[GYRO_AXE_X], gyro->raw[GYRO_AXE_X]);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f103 0220 	add.w	r2, r3, #32
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	eeb0 0a67 	vmov.f32	s0, s15
 80045f8:	4610      	mov	r0, r2
 80045fa:	f007 f85e 	bl	800b6ba <FILTER_process>
 80045fe:	eef0 7a40 	vmov.f32	s15, s0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[GYRO_AXE_Y] =  FILTER_process(&gyro->filters[GYRO_AXE_Y], gyro->raw[GYRO_AXE_Y]);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	edd3 7a00 	vldr	s15, [r3]
 8004618:	eeb0 0a67 	vmov.f32	s0, s15
 800461c:	4610      	mov	r0, r2
 800461e:	f007 f84c 	bl	800b6ba <FILTER_process>
 8004622:	eef0 7a40 	vmov.f32	s15, s0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro->filtered[GYRO_AXE_Z] =  FILTER_process(&gyro->filters[GYRO_AXE_Z], gyro->raw[GYRO_AXE_Z]);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	3308      	adds	r3, #8
 8004638:	edd3 7a00 	vldr	s15, [r3]
 800463c:	eeb0 0a67 	vmov.f32	s0, s15
 8004640:	4610      	mov	r0, r2
 8004642:	f007 f83a 	bl	800b6ba <FILTER_process>
 8004646:	eef0 7a40 	vmov.f32	s15, s0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	edc3 7a04 	vstr	s15, [r3, #16]
	//We warn the system that we ve got new data ready to be used :)
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 8004650:	2003      	movs	r0, #3
 8004652:	f7fe fa33 	bl	8002abc <EVENT_Set_flag>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <gyro_data_callback>:

static void gyro_data_callback(void){
 800465e:	b580      	push	{r7, lr}
 8004660:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 8004662:	2002      	movs	r0, #2
 8004664:	f7fe fa2a 	bl	8002abc <EVENT_Set_flag>
}
 8004668:	bf00      	nop
 800466a:	bd80      	pop	{r7, pc}

0800466c <convert_gyro>:

static void MPU_spi_slow(mpu_t * mpu);
static void MPU_spi_fast(mpu_t * mpu);

//Private functions def
static void convert_gyro(mpu_t * mpu){
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	3301      	adds	r3, #1
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	b21a      	sxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	b21b      	sxth	r3, r3
 8004688:	4313      	orrs	r3, r2
 800468a:	b21a      	sxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	3303      	adds	r3, #3
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	b21a      	sxth	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	3302      	adds	r3, #2
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b21b      	sxth	r3, r3
 80046a6:	4313      	orrs	r3, r2
 80046a8:	b21a      	sxth	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	3305      	adds	r3, #5
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	b21a      	sxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	3304      	adds	r3, #4
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	b21b      	sxth	r3, r3
 80046c4:	4313      	orrs	r3, r2
 80046c6:	b21a      	sxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	851a      	strh	r2, [r3, #40]	; 0x28

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80046e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800471c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <convert_acc>:
static void convert_acc(mpu_t * mpu){
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	3301      	adds	r3, #1
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	b21a      	sxth	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b21b      	sxth	r3, r3
 800474e:	4313      	orrs	r3, r2
 8004750:	b21a      	sxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	3303      	adds	r3, #3
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	b21a      	sxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	3302      	adds	r3, #2
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	b21b      	sxth	r3, r3
 800476e:	4313      	orrs	r3, r2
 8004770:	b21a      	sxth	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	3305      	adds	r3, #5
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	b21a      	sxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004788:	3304      	adds	r3, #4
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b21b      	sxth	r3, r3
 800478e:	4313      	orrs	r3, r2
 8004790:	b21a      	sxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80047ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80047bc:	ee07 3a90 	vmov	s15, r3
 80047c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80047e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <MPU_cs_lock>:

static void MPU_cs_lock(mpu_t * mpu){
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6898      	ldr	r0, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	899b      	ldrh	r3, [r3, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	4619      	mov	r1, r3
 8004812:	f003 fabf 	bl	8007d94 <HAL_GPIO_WritePin>
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <MPU_cs_unlock>:
static void MPU_cs_unlock(mpu_t * mpu){
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6898      	ldr	r0, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	899b      	ldrh	r3, [r3, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	4619      	mov	r1, r3
 8004832:	f003 faaf 	bl	8007d94 <HAL_GPIO_WritePin>
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <MPU_spi_slow>:

static void MPU_spi_slow(mpu_t * mpu){
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_SLOW;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 64 ;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2240      	movs	r2, #64	; 0x40
 8004854:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4618      	mov	r0, r3
 800485c:	f004 f828 	bl	80088b0 <HAL_SPI_Init>
 8004860:	4603      	mov	r3, r0
 8004862:	461a      	mov	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 8004868:	200a      	movs	r0, #10
 800486a:	f002 f841 	bl	80068f0 <HAL_Delay>
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <MPU_spi_fast>:
static void MPU_spi_fast(mpu_t * mpu){
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_FAST;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 4 ;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2204      	movs	r2, #4
 800488c:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4618      	mov	r0, r3
 8004894:	f004 f80c 	bl	80088b0 <HAL_SPI_Init>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 80048a0:	200a      	movs	r0, #10
 80048a2:	f002 f825 	bl	80068f0 <HAL_Delay>
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <MPU_init>:


/*
 *
 */
sensor_request_e MPU_init(mpu_t * mpu, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	807b      	strh	r3, [r7, #2]

	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	73da      	strb	r2, [r3, #15]

	//SPI slow pdt l'init, max si 1Mhz for the mpu
	if(mpu->spi_speed ==  MPU_SPI_FAST)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d102      	bne.n	80048d4 <MPU_init+0x24>
		MPU_spi_slow(mpu);
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff ffb5 	bl	800483e <MPU_spi_slow>


	//Définit d'après la doc pour les registres du mpu
	mpu->gyro_data = &mpu->data[8] ;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f103 021a 	add.w	r2, r3, #26
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
	mpu->acc_data = &mpu->data[0] ;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f103 0212 	add.w	r2, r3, #18
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44


	//Requiert un I2C ou SPI pour fonctionner
	if(hspi == NULL)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <MPU_init+0x42>
		return SENSOR_REQUEST_FAIL ;
 80048ee:	2302      	movs	r3, #2
 80048f0:	e040      	b.n	8004974 <MPU_init+0xc4>

	//Application des paramètres de connexion
	mpu->hspi = hspi ;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	887a      	ldrh	r2, [r7, #2]
 80048fc:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	22d0      	movs	r2, #208	; 0xd0
 8004908:	745a      	strb	r2, [r3, #17]

	mpu_handlers[mpu_init_compteur] = mpu ;
 800490a:	4b1c      	ldr	r3, [pc, #112]	; (800497c <MPU_init+0xcc>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	4619      	mov	r1, r3
 8004910:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <MPU_init+0xd0>)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	SPI_handlers[mpu_init_compteur++] = hspi ;
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <MPU_init+0xcc>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	b2d1      	uxtb	r1, r2
 8004920:	4a16      	ldr	r2, [pc, #88]	; (800497c <MPU_init+0xcc>)
 8004922:	7011      	strb	r1, [r2, #0]
 8004924:	4619      	mov	r1, r3
 8004926:	4a17      	ldr	r2, [pc, #92]	; (8004984 <MPU_init+0xd4>)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x00} ;
 800492e:	236b      	movs	r3, #107	; 0x6b
 8004930:	753b      	strb	r3, [r7, #20]
 8004932:	2300      	movs	r3, #0
 8004934:	757b      	strb	r3, [r7, #21]

	MPU_cs_lock(mpu);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7ff ff61 	bl	80047fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6858      	ldr	r0, [r3, #4]
 8004940:	f107 0114 	add.w	r1, r7, #20
 8004944:	2302      	movs	r3, #2
 8004946:	2202      	movs	r2, #2
 8004948:	f004 f816 	bl	8008978 <HAL_SPI_Transmit>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f7ff ff62 	bl	800481e <MPU_cs_unlock>

	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	7b9b      	ldrb	r3, [r3, #14]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d004      	beq.n	800496c <MPU_init+0xbc>
		mpu->state = SENSOR_ERROR ;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2204      	movs	r2, #4
 8004966:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8004968:	2302      	movs	r3, #2
 800496a:	e003      	b.n	8004974 <MPU_init+0xc4>
	}

	mpu->state = SENSOR_IDDLE ;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	73da      	strb	r2, [r3, #15]
	return SENSOR_REQUEST_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	200019b0 	.word	0x200019b0
 8004980:	200019ac 	.word	0x200019ac
 8004984:	200019a8 	.word	0x200019a8

08004988 <MPU_init_gyro>:

/*
 *
 */
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	460b      	mov	r3, r1
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	72fb      	strb	r3, [r7, #11]

	mpu->gyro_range = gyro_range ;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	7afa      	ldrb	r2, [r7, #11]
 800499a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mpu->gyro_data_callback = gyro_data_callback ;
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	7bdb      	ldrb	r3, [r3, #15]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MPU_init_gyro+0x28>
		return SENSOR_REQUEST_FAIL ;
 80049ac:	2302      	movs	r3, #2
 80049ae:	e099      	b.n	8004ae4 <MPU_init_gyro+0x15c>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d102      	bne.n	80049c0 <MPU_init_gyro+0x38>
		MPU_spi_slow(mpu);
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff ff3f 	bl	800483e <MPU_spi_slow>

	//Configuration de la sensi du gyro dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 80049c0:	239b      	movs	r3, #155	; 0x9b
 80049c2:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f7ff ff1a 	bl	80047fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6858      	ldr	r0, [r3, #4]
 80049ce:	f107 0214 	add.w	r2, r7, #20
 80049d2:	f107 0114 	add.w	r1, r7, #20
 80049d6:	2302      	movs	r3, #2
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2302      	movs	r3, #2
 80049dc:	f004 f900 	bl	8008be0 <HAL_SPI_TransmitReceive>
 80049e0:	4603      	mov	r3, r0
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff ff18 	bl	800481e <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	7b9b      	ldrb	r3, [r3, #14]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d122      	bne.n	8004a3c <MPU_init_gyro+0xb4>
		HAL_Delay(1);
 80049f6:	2001      	movs	r0, #1
 80049f8:	f001 ff7a 	bl	80068f0 <HAL_Delay>
		MPU_cs_lock(mpu);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff fefe 	bl	80047fe <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 8004a02:	231b      	movs	r3, #27
 8004a04:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 8004a06:	7d7b      	ldrb	r3, [r7, #21]
 8004a08:	b25b      	sxtb	r3, r3
 8004a0a:	f023 0318 	bic.w	r3, r3, #24
 8004a0e:	b25a      	sxtb	r2, r3
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	4313      	orrs	r3, r2
 8004a18:	b25b      	sxtb	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6858      	ldr	r0, [r3, #4]
 8004a22:	f107 0114 	add.w	r1, r7, #20
 8004a26:	2302      	movs	r3, #2
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f003 ffa5 	bl	8008978 <HAL_SPI_Transmit>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	461a      	mov	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff fef1 	bl	800481e <MPU_cs_unlock>
	}

	//ON vérifi si on a bien écris ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	7b9b      	ldrb	r3, [r3, #14]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d124      	bne.n	8004a8e <MPU_init_gyro+0x106>
		uint8_t temp2 = temp[1];
 8004a44:	7d7b      	ldrb	r3, [r7, #21]
 8004a46:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8004a48:	239b      	movs	r3, #155	; 0x9b
 8004a4a:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	f001 ff4f 	bl	80068f0 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f7ff fed3 	bl	80047fe <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6858      	ldr	r0, [r3, #4]
 8004a5c:	f107 0214 	add.w	r2, r7, #20
 8004a60:	f107 0114 	add.w	r1, r7, #20
 8004a64:	2302      	movs	r3, #2
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f004 f8b9 	bl	8008be0 <HAL_SPI_TransmitReceive>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff fed1 	bl	800481e <MPU_cs_unlock>

		if(temp[1] != temp2)
 8004a7c:	7d7b      	ldrb	r3, [r7, #21]
 8004a7e:	7dfa      	ldrb	r2, [r7, #23]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d004      	beq.n	8004a8e <MPU_init_gyro+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2204      	movs	r2, #4
 8004a88:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e02a      	b.n	8004ae4 <MPU_init_gyro+0x15c>

	}



	if(mpu->hal_state != HAL_OK)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	7b9b      	ldrb	r3, [r3, #14]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <MPU_init_gyro+0x118>
	{
		mpu->state = SENSOR_ERROR ;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2204      	movs	r2, #4
 8004a9a:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e021      	b.n	8004ae4 <MPU_init_gyro+0x15c>
	}

	switch(gyro_range){
 8004aa0:	7afb      	ldrb	r3, [r7, #11]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d81a      	bhi.n	8004adc <MPU_init_gyro+0x154>
 8004aa6:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <MPU_init_gyro+0x124>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004ac5 	.word	0x08004ac5
 8004ab4:	08004acd 	.word	0x08004acd
 8004ab8:	08004ad5 	.word	0x08004ad5
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a0b      	ldr	r2, [pc, #44]	; (8004aec <MPU_init_gyro+0x164>)
 8004ac0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004ac2:	e00b      	b.n	8004adc <MPU_init_gyro+0x154>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <MPU_init_gyro+0x168>)
 8004ac8:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004aca:	e007      	b.n	8004adc <MPU_init_gyro+0x154>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <MPU_init_gyro+0x16c>)
 8004ad0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004ad2:	e003      	b.n	8004adc <MPU_init_gyro+0x154>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <MPU_init_gyro+0x170>)
 8004ad8:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004ada:	bf00      	nop
	}

	MPU_spi_fast(mpu);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7ff feca 	bl	8004876 <MPU_spi_fast>
	return SENSOR_REQUEST_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	3bfa232d 	.word	0x3bfa232d
 8004af0:	3c7a232d 	.word	0x3c7a232d
 8004af4:	3cf9c190 	.word	0x3cf9c190
 8004af8:	3d79c190 	.word	0x3d79c190

08004afc <MPU_init_acc>:

/*
 *
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	460b      	mov	r3, r1
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	72fb      	strb	r3, [r7, #11]
	mpu->acc_range = acc_range ;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	7afa      	ldrb	r2, [r7, #11]
 8004b0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	mpu->acc_data_callback = acc_data_callback ;
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	665a      	str	r2, [r3, #100]	; 0x64
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	7bdb      	ldrb	r3, [r3, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <MPU_init_acc+0x28>
		return SENSOR_REQUEST_FAIL ;
 8004b20:	2302      	movs	r3, #2
 8004b22:	e095      	b.n	8004c50 <MPU_init_acc+0x154>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d102      	bne.n	8004b34 <MPU_init_acc+0x38>
			MPU_spi_slow(mpu);
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff fe85 	bl	800483e <MPU_spi_slow>

	//Configuration de la sensi de l'acc dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8004b34:	239c      	movs	r3, #156	; 0x9c
 8004b36:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff fe60 	bl	80047fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6858      	ldr	r0, [r3, #4]
 8004b42:	f107 0214 	add.w	r2, r7, #20
 8004b46:	f107 0114 	add.w	r1, r7, #20
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	2302      	movs	r3, #2
 8004b50:	f004 f846 	bl	8008be0 <HAL_SPI_TransmitReceive>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff fe5e 	bl	800481e <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){	//Si mpu ok on écrit en spi dans le registre de config du mpu dédié au gyro
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	7b9b      	ldrb	r3, [r3, #14]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d122      	bne.n	8004bb0 <MPU_init_acc+0xb4>
		HAL_Delay(1);
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	f001 fec0 	bl	80068f0 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7ff fe44 	bl	80047fe <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 8004b76:	231c      	movs	r3, #28
 8004b78:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 8004b7a:	7d7b      	ldrb	r3, [r7, #21]
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	f023 0318 	bic.w	r3, r3, #24
 8004b82:	b25a      	sxtb	r2, r3
 8004b84:	7afb      	ldrb	r3, [r7, #11]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6858      	ldr	r0, [r3, #4]
 8004b96:	f107 0114 	add.w	r1, r7, #20
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f003 feeb 	bl	8008978 <HAL_SPI_Transmit>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff fe37 	bl	800481e <MPU_cs_unlock>
	}

	//On test si on a bien écrit ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	7b9b      	ldrb	r3, [r3, #14]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d124      	bne.n	8004c02 <MPU_init_acc+0x106>
		uint8_t temp2 = temp[1];
 8004bb8:	7d7b      	ldrb	r3, [r7, #21]
 8004bba:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8004bbc:	239c      	movs	r3, #156	; 0x9c
 8004bbe:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	f001 fe95 	bl	80068f0 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7ff fe19 	bl	80047fe <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6858      	ldr	r0, [r3, #4]
 8004bd0:	f107 0214 	add.w	r2, r7, #20
 8004bd4:	f107 0114 	add.w	r1, r7, #20
 8004bd8:	2302      	movs	r3, #2
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f003 ffff 	bl	8008be0 <HAL_SPI_TransmitReceive>
 8004be2:	4603      	mov	r3, r0
 8004be4:	461a      	mov	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff fe17 	bl	800481e <MPU_cs_unlock>

		if(temp[1] != temp2)
 8004bf0:	7d7b      	ldrb	r3, [r7, #21]
 8004bf2:	7dfa      	ldrb	r2, [r7, #23]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d004      	beq.n	8004c02 <MPU_init_acc+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e026      	b.n	8004c50 <MPU_init_acc+0x154>
		}
	}



	switch(acc_range){
 8004c02:	7afb      	ldrb	r3, [r7, #11]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d81f      	bhi.n	8004c48 <MPU_init_acc+0x14c>
 8004c08:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <MPU_init_acc+0x114>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c21 	.word	0x08004c21
 8004c14:	08004c2b 	.word	0x08004c2b
 8004c18:	08004c35 	.word	0x08004c35
 8004c1c:	08004c3f 	.word	0x08004c3f
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8004c26:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004c28:	e00e      	b.n	8004c48 <MPU_init_acc+0x14c>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8004c30:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004c32:	e009      	b.n	8004c48 <MPU_init_acc+0x14c>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8004c3a:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004c3c:	e004      	b.n	8004c48 <MPU_init_acc+0x14c>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8004c44:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004c46:	bf00      	nop
	}
	MPU_spi_fast(mpu);
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff fe14 	bl	8004876 <MPU_spi_fast>
	return SENSOR_REQUEST_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_REQUEST_OK ;

}

sensor_request_e MPU_update_acc(mpu_t * mpu){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	6078      	str	r0, [r7, #4]

	if(mpu->state != SENSOR_IDDLE){
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	7bdb      	ldrb	r3, [r3, #15]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <MPU_update_acc+0x14>
		return SENSOR_REQUEST_FAIL ;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e030      	b.n	8004cce <MPU_update_acc+0x76>
	}

	//Update des valeurs
	uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 8004c6c:	23bb      	movs	r3, #187	; 0xbb
 8004c6e:	723b      	strb	r3, [r7, #8]
 8004c70:	2300      	movs	r3, #0
 8004c72:	727b      	strb	r3, [r7, #9]
 8004c74:	2300      	movs	r3, #0
 8004c76:	72bb      	strb	r3, [r7, #10]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	72fb      	strb	r3, [r7, #11]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	733b      	strb	r3, [r7, #12]
 8004c80:	2300      	movs	r3, #0
 8004c82:	737b      	strb	r3, [r7, #13]
	MPU_cs_lock(mpu);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fdba 	bl	80047fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6858      	ldr	r0, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c92:	f107 0108 	add.w	r1, r7, #8
 8004c96:	2302      	movs	r3, #2
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2306      	movs	r3, #6
 8004c9c:	f003 ffa0 	bl	8008be0 <HAL_SPI_TransmitReceive>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff fdb8 	bl	800481e <MPU_cs_unlock>


	if(mpu->hal_state == HAL_BUSY)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	7b9b      	ldrb	r3, [r3, #14]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d101      	bne.n	8004cba <MPU_update_acc+0x62>
		return SENSOR_REQUEST_BUSY ;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e009      	b.n	8004cce <MPU_update_acc+0x76>
	if(mpu->hal_state != HAL_OK){
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	7b9b      	ldrb	r3, [r3, #14]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <MPU_update_acc+0x6e>
		return SENSOR_REQUEST_FAIL ;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e003      	b.n	8004cce <MPU_update_acc+0x76>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7ff fd33 	bl	8004732 <convert_acc>
	return SENSOR_REQUEST_OK ;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <MPU_update_all_dma>:
	}

	return SENSOR_REQUEST_OK;
}

sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]

	uint8_t registers [14] = {0};
 8004cde:	f107 0308 	add.w	r3, r7, #8
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	609a      	str	r2, [r3, #8]
 8004cea:	819a      	strh	r2, [r3, #12]
	registers[0] = MPU6050_ACCEL_XOUT_H | MPU6050_READ ;
 8004cec:	23bb      	movs	r3, #187	; 0xbb
 8004cee:	723b      	strb	r3, [r7, #8]
	MPU_cs_lock(mpu);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff fd84 	bl	80047fe <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive_DMA(mpu->hspi, registers, mpu->data, 14);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6858      	ldr	r0, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f103 0212 	add.w	r2, r3, #18
 8004d00:	f107 0108 	add.w	r1, r7, #8
 8004d04:	230e      	movs	r3, #14
 8004d06:	f004 f90d 	bl	8008f24 <HAL_SPI_TransmitReceive_DMA>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	7b9b      	ldrb	r3, [r3, #14]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d107      	bne.n	8004d2a <MPU_update_all_dma+0x54>
	{
		mpu->state = SENSOR_BUSY ;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	73da      	strb	r2, [r3, #15]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2203      	movs	r2, #3
 8004d24:	741a      	strb	r2, [r3, #16]
	{
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	return SENSOR_REQUEST_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e009      	b.n	8004d3e <MPU_update_all_dma+0x68>
	else if(mpu->hal_state == HAL_BUSY)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	7b9b      	ldrb	r3, [r3, #14]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d101      	bne.n	8004d36 <MPU_update_all_dma+0x60>
		return SENSOR_REQUEST_BUSY;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e003      	b.n	8004d3e <MPU_update_all_dma+0x68>
		mpu->state = SENSOR_ERROR ;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2204      	movs	r2, #4
 8004d3a:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8004d3c:	2302      	movs	r3, #2
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <MPU_dma_transmit_complete>:



static void MPU_dma_transmit_complete(mpu_t * mpu){
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]

	//On relâche le pin CS du mpu
	MPU_cs_unlock(mpu);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fd65 	bl	800481e <MPU_cs_unlock>


	switch(mpu->dma_state){
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	7c1b      	ldrb	r3, [r3, #16]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d00b      	beq.n	8004d74 <MPU_dma_transmit_complete+0x2e>
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d010      	beq.n	8004d82 <MPU_dma_transmit_complete+0x3c>
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d000      	beq.n	8004d66 <MPU_dma_transmit_complete+0x20>
			mpu->gyro_data_callback();

			break;
		case MPU_DMA_IDDLE:
		default:
			break;
 8004d64:	e014      	b.n	8004d90 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fc80 	bl	800466c <convert_gyro>
			mpu->gyro_data_callback();
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	4798      	blx	r3
			break;
 8004d72:	e00d      	b.n	8004d90 <MPU_dma_transmit_complete+0x4a>
			convert_acc(mpu);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fcdc 	bl	8004732 <convert_acc>
			mpu->acc_data_callback();
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d7e:	4798      	blx	r3
			break;
 8004d80:	e006      	b.n	8004d90 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fc72 	bl	800466c <convert_gyro>
			mpu->gyro_data_callback();
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	4798      	blx	r3
			break;
 8004d8e:	bf00      	nop

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	741a      	strb	r2, [r3, #16]
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <MPU_dma_transmit_half_complete>:
static void MPU_dma_transmit_half_complete(mpu_t * mpu){
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]

	if(mpu->dma_state == MPU_DMA_ACC_AND_GYRO_IN_PROGRESS)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	7c1b      	ldrb	r3, [r3, #16]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d105      	bne.n	8004dba <MPU_dma_transmit_half_complete+0x1c>
	{
		//A la moitié donc les données de l'acc sont arrivées
		convert_acc(mpu);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fcbf 	bl	8004732 <convert_acc>
		mpu->acc_data_callback();
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db8:	4798      	blx	r3
	}
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
	if(hspi == SPI_handlers[0])
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_SPI_TxRxCpltCallback+0x24>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d104      	bne.n	8004de0 <HAL_SPI_TxRxCpltCallback+0x1c>
		MPU_dma_transmit_complete(mpu_handlers[0]);
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_SPI_TxRxCpltCallback+0x28>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff ffb3 	bl	8004d46 <MPU_dma_transmit_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	200019a8 	.word	0x200019a8
 8004dec:	200019ac 	.word	0x200019ac

08004df0 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
if(hspi == SPI_handlers[0])
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d104      	bne.n	8004e0c <HAL_SPI_TxRxHalfCpltCallback+0x1c>
	MPU_dma_transmit_half_complete(mpu_handlers[0]);
 8004e02:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff ffc9 	bl	8004d9e <MPU_dma_transmit_half_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif

}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200019a8 	.word	0x200019a8
 8004e18:	200019ac 	.word	0x200019ac

08004e1c <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8004e22:	463b      	mov	r3, r7
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004e2e:	4b21      	ldr	r3, [pc, #132]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e30:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <MX_ADC2_Init+0x9c>)
 8004e32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004e34:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004e3c:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004e42:	4b1c      	ldr	r3, [pc, #112]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004e48:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004e4e:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e56:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <MX_ADC2_Init+0xa0>)
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e62:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004e68:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004e6e:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e76:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004e7c:	480d      	ldr	r0, [pc, #52]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e7e:	f001 fd59 	bl	8006934 <HAL_ADC_Init>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004e88:	f000 fbc2 	bl	8005610 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004e8c:	2309      	movs	r3, #9
 8004e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004e90:	2301      	movs	r3, #1
 8004e92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e98:	463b      	mov	r3, r7
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4805      	ldr	r0, [pc, #20]	; (8004eb4 <MX_ADC2_Init+0x98>)
 8004e9e:	f001 fe9d 	bl	8006bdc <HAL_ADC_ConfigChannel>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004ea8:	f000 fbb2 	bl	8005610 <Error_Handler>
  }

}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200019d0 	.word	0x200019d0
 8004eb8:	40012100 	.word	0x40012100
 8004ebc:	0f000001 	.word	0x0f000001

08004ec0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec8:	f107 0314 	add.w	r3, r7, #20
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	60da      	str	r2, [r3, #12]
 8004ed6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a3c      	ldr	r2, [pc, #240]	; (8004fd0 <HAL_ADC_MspInit+0x110>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d172      	bne.n	8004fc8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <HAL_ADC_MspInit+0x114>)
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	4a3a      	ldr	r2, [pc, #232]	; (8004fd4 <HAL_ADC_MspInit+0x114>)
 8004eec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ef2:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <HAL_ADC_MspInit+0x114>)
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <HAL_ADC_MspInit+0x114>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	4a33      	ldr	r2, [pc, #204]	; (8004fd4 <HAL_ADC_MspInit+0x114>)
 8004f08:	f043 0304 	orr.w	r3, r3, #4
 8004f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0e:	4b31      	ldr	r3, [pc, #196]	; (8004fd4 <HAL_ADC_MspInit+0x114>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	4b2d      	ldr	r3, [pc, #180]	; (8004fd4 <HAL_ADC_MspInit+0x114>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	4a2c      	ldr	r2, [pc, #176]	; (8004fd4 <HAL_ADC_MspInit+0x114>)
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2a:	4b2a      	ldr	r3, [pc, #168]	; (8004fd4 <HAL_ADC_MspInit+0x114>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 8004f36:	2302      	movs	r3, #2
 8004f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 8004f42:	f107 0314 	add.w	r3, r7, #20
 8004f46:	4619      	mov	r1, r3
 8004f48:	4823      	ldr	r0, [pc, #140]	; (8004fd8 <HAL_ADC_MspInit+0x118>)
 8004f4a:	f002 fd89 	bl	8007a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f52:	2303      	movs	r3, #3
 8004f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8004f5a:	f107 0314 	add.w	r3, r7, #20
 8004f5e:	4619      	mov	r1, r3
 8004f60:	481e      	ldr	r0, [pc, #120]	; (8004fdc <HAL_ADC_MspInit+0x11c>)
 8004f62:	f002 fd7d 	bl	8007a60 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004f66:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004f68:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <HAL_ADC_MspInit+0x124>)
 8004f6a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004f6c:	4b1c      	ldr	r3, [pc, #112]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f72:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f74:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f7a:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004f80:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f86:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004f88:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f8e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004f90:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f96:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004f98:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f9e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004fa0:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fa6:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004fac:	480c      	ldr	r0, [pc, #48]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004fae:	f002 f9c7 	bl	8007340 <HAL_DMA_Init>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8004fb8:	f000 fb2a 	bl	8005610 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a08      	ldr	r2, [pc, #32]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38
 8004fc2:	4a07      	ldr	r2, [pc, #28]	; (8004fe0 <HAL_ADC_MspInit+0x120>)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8004fc8:	bf00      	nop
 8004fca:	3728      	adds	r7, #40	; 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40012100 	.word	0x40012100
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	40020800 	.word	0x40020800
 8004fdc:	40020400 	.word	0x40020400
 8004fe0:	20001a18 	.word	0x20001a18
 8004fe4:	40026440 	.word	0x40026440

08004fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	4b3f      	ldr	r3, [pc, #252]	; (80050f0 <MX_DMA_Init+0x108>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	4a3e      	ldr	r2, [pc, #248]	; (80050f0 <MX_DMA_Init+0x108>)
 8004ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ffe:	4b3c      	ldr	r3, [pc, #240]	; (80050f0 <MX_DMA_Init+0x108>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	4b38      	ldr	r3, [pc, #224]	; (80050f0 <MX_DMA_Init+0x108>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	4a37      	ldr	r2, [pc, #220]	; (80050f0 <MX_DMA_Init+0x108>)
 8005014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005018:	6313      	str	r3, [r2, #48]	; 0x30
 800501a:	4b35      	ldr	r3, [pc, #212]	; (80050f0 <MX_DMA_Init+0x108>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005026:	2200      	movs	r2, #0
 8005028:	2100      	movs	r1, #0
 800502a:	200b      	movs	r0, #11
 800502c:	f002 f951 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005030:	200b      	movs	r0, #11
 8005032:	f002 f96a 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8005036:	2200      	movs	r2, #0
 8005038:	2100      	movs	r1, #0
 800503a:	200c      	movs	r0, #12
 800503c:	f002 f949 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005040:	200c      	movs	r0, #12
 8005042:	f002 f962 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8005046:	2200      	movs	r2, #0
 8005048:	2100      	movs	r1, #0
 800504a:	200e      	movs	r0, #14
 800504c:	f002 f941 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005050:	200e      	movs	r0, #14
 8005052:	f002 f95a 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005056:	2200      	movs	r2, #0
 8005058:	2100      	movs	r1, #0
 800505a:	200f      	movs	r0, #15
 800505c:	f002 f939 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005060:	200f      	movs	r0, #15
 8005062:	f002 f952 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005066:	2200      	movs	r2, #0
 8005068:	2100      	movs	r1, #0
 800506a:	2010      	movs	r0, #16
 800506c:	f002 f931 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005070:	2010      	movs	r0, #16
 8005072:	f002 f94a 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8005076:	2200      	movs	r2, #0
 8005078:	2100      	movs	r1, #0
 800507a:	2011      	movs	r0, #17
 800507c:	f002 f929 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005080:	2011      	movs	r0, #17
 8005082:	f002 f942 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8005086:	2200      	movs	r2, #0
 8005088:	2100      	movs	r1, #0
 800508a:	202f      	movs	r0, #47	; 0x2f
 800508c:	f002 f921 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8005090:	202f      	movs	r0, #47	; 0x2f
 8005092:	f002 f93a 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005096:	2200      	movs	r2, #0
 8005098:	2100      	movs	r1, #0
 800509a:	2038      	movs	r0, #56	; 0x38
 800509c:	f002 f919 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80050a0:	2038      	movs	r0, #56	; 0x38
 80050a2:	f002 f932 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80050a6:	2200      	movs	r2, #0
 80050a8:	2100      	movs	r1, #0
 80050aa:	2039      	movs	r0, #57	; 0x39
 80050ac:	f002 f911 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80050b0:	2039      	movs	r0, #57	; 0x39
 80050b2:	f002 f92a 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80050b6:	2200      	movs	r2, #0
 80050b8:	2100      	movs	r1, #0
 80050ba:	203a      	movs	r0, #58	; 0x3a
 80050bc:	f002 f909 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80050c0:	203a      	movs	r0, #58	; 0x3a
 80050c2:	f002 f922 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80050c6:	2200      	movs	r2, #0
 80050c8:	2100      	movs	r1, #0
 80050ca:	203b      	movs	r0, #59	; 0x3b
 80050cc:	f002 f901 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80050d0:	203b      	movs	r0, #59	; 0x3b
 80050d2:	f002 f91a 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80050d6:	2200      	movs	r2, #0
 80050d8:	2100      	movs	r1, #0
 80050da:	2045      	movs	r0, #69	; 0x45
 80050dc:	f002 f8f9 	bl	80072d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80050e0:	2045      	movs	r0, #69	; 0x45
 80050e2:	f002 f912 	bl	800730a <HAL_NVIC_EnableIRQ>

}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800

080050f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050fa:	f107 0314 	add.w	r3, r7, #20
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	605a      	str	r2, [r3, #4]
 8005104:	609a      	str	r2, [r3, #8]
 8005106:	60da      	str	r2, [r3, #12]
 8005108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	4b44      	ldr	r3, [pc, #272]	; (8005220 <MX_GPIO_Init+0x12c>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	4a43      	ldr	r2, [pc, #268]	; (8005220 <MX_GPIO_Init+0x12c>)
 8005114:	f043 0304 	orr.w	r3, r3, #4
 8005118:	6313      	str	r3, [r2, #48]	; 0x30
 800511a:	4b41      	ldr	r3, [pc, #260]	; (8005220 <MX_GPIO_Init+0x12c>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	4b3d      	ldr	r3, [pc, #244]	; (8005220 <MX_GPIO_Init+0x12c>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	4a3c      	ldr	r2, [pc, #240]	; (8005220 <MX_GPIO_Init+0x12c>)
 8005130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005134:	6313      	str	r3, [r2, #48]	; 0x30
 8005136:	4b3a      	ldr	r3, [pc, #232]	; (8005220 <MX_GPIO_Init+0x12c>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	4b36      	ldr	r3, [pc, #216]	; (8005220 <MX_GPIO_Init+0x12c>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	4a35      	ldr	r2, [pc, #212]	; (8005220 <MX_GPIO_Init+0x12c>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6313      	str	r3, [r2, #48]	; 0x30
 8005152:	4b33      	ldr	r3, [pc, #204]	; (8005220 <MX_GPIO_Init+0x12c>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	4b2f      	ldr	r3, [pc, #188]	; (8005220 <MX_GPIO_Init+0x12c>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	4a2e      	ldr	r2, [pc, #184]	; (8005220 <MX_GPIO_Init+0x12c>)
 8005168:	f043 0302 	orr.w	r3, r3, #2
 800516c:	6313      	str	r3, [r2, #48]	; 0x30
 800516e:	4b2c      	ldr	r3, [pc, #176]	; (8005220 <MX_GPIO_Init+0x12c>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 800517a:	2200      	movs	r2, #0
 800517c:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8005180:	4828      	ldr	r0, [pc, #160]	; (8005224 <MX_GPIO_Init+0x130>)
 8005182:	f002 fe07 	bl	8007d94 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 8005186:	2201      	movs	r2, #1
 8005188:	2101      	movs	r1, #1
 800518a:	4826      	ldr	r0, [pc, #152]	; (8005224 <MX_GPIO_Init+0x130>)
 800518c:	f002 fe02 	bl	8007d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8005190:	2200      	movs	r2, #0
 8005192:	2101      	movs	r1, #1
 8005194:	4824      	ldr	r0, [pc, #144]	; (8005228 <MX_GPIO_Init+0x134>)
 8005196:	f002 fdfd 	bl	8007d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 800519a:	2200      	movs	r2, #0
 800519c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051a0:	4822      	ldr	r0, [pc, #136]	; (800522c <MX_GPIO_Init+0x138>)
 80051a2:	f002 fdf7 	bl	8007d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 80051a6:	f24e 231d 	movw	r3, #57885	; 0xe21d
 80051aa:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ac:	2301      	movs	r3, #1
 80051ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b4:	2300      	movs	r3, #0
 80051b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051b8:	f107 0314 	add.w	r3, r7, #20
 80051bc:	4619      	mov	r1, r3
 80051be:	4819      	ldr	r0, [pc, #100]	; (8005224 <MX_GPIO_Init+0x130>)
 80051c0:	f002 fc4e 	bl	8007a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 80051c4:	2301      	movs	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051c8:	2301      	movs	r3, #1
 80051ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d0:	2300      	movs	r3, #0
 80051d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 80051d4:	f107 0314 	add.w	r3, r7, #20
 80051d8:	4619      	mov	r1, r3
 80051da:	4813      	ldr	r0, [pc, #76]	; (8005228 <MX_GPIO_Init+0x134>)
 80051dc:	f002 fc40 	bl	8007a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 80051e0:	2302      	movs	r3, #2
 80051e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 80051ec:	f107 0314 	add.w	r3, r7, #20
 80051f0:	4619      	mov	r1, r3
 80051f2:	480d      	ldr	r0, [pc, #52]	; (8005228 <MX_GPIO_Init+0x134>)
 80051f4:	f002 fc34 	bl	8007a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 80051f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051fe:	2301      	movs	r3, #1
 8005200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005206:	2300      	movs	r3, #0
 8005208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 800520a:	f107 0314 	add.w	r3, r7, #20
 800520e:	4619      	mov	r1, r3
 8005210:	4806      	ldr	r0, [pc, #24]	; (800522c <MX_GPIO_Init+0x138>)
 8005212:	f002 fc25 	bl	8007a60 <HAL_GPIO_Init>

}
 8005216:	bf00      	nop
 8005218:	3728      	adds	r7, #40	; 0x28
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40023800 	.word	0x40023800
 8005224:	40020800 	.word	0x40020800
 8005228:	40020000 	.word	0x40020000
 800522c:	40020400 	.word	0x40020400

08005230 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005234:	4b12      	ldr	r3, [pc, #72]	; (8005280 <MX_I2C1_Init+0x50>)
 8005236:	4a13      	ldr	r2, [pc, #76]	; (8005284 <MX_I2C1_Init+0x54>)
 8005238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800523a:	4b11      	ldr	r3, [pc, #68]	; (8005280 <MX_I2C1_Init+0x50>)
 800523c:	4a12      	ldr	r2, [pc, #72]	; (8005288 <MX_I2C1_Init+0x58>)
 800523e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005240:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <MX_I2C1_Init+0x50>)
 8005242:	2200      	movs	r2, #0
 8005244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005246:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <MX_I2C1_Init+0x50>)
 8005248:	2200      	movs	r2, #0
 800524a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800524c:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <MX_I2C1_Init+0x50>)
 800524e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <MX_I2C1_Init+0x50>)
 8005256:	2200      	movs	r2, #0
 8005258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <MX_I2C1_Init+0x50>)
 800525c:	2200      	movs	r2, #0
 800525e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <MX_I2C1_Init+0x50>)
 8005262:	2200      	movs	r2, #0
 8005264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <MX_I2C1_Init+0x50>)
 8005268:	2200      	movs	r2, #0
 800526a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800526c:	4804      	ldr	r0, [pc, #16]	; (8005280 <MX_I2C1_Init+0x50>)
 800526e:	f002 fdab 	bl	8007dc8 <HAL_I2C_Init>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005278:	f000 f9ca 	bl	8005610 <Error_Handler>
  }

}
 800527c:	bf00      	nop
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20001ad8 	.word	0x20001ad8
 8005284:	40005400 	.word	0x40005400
 8005288:	00061a80 	.word	0x00061a80

0800528c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	f107 0314 	add.w	r3, r7, #20
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a47      	ldr	r2, [pc, #284]	; (80053c8 <HAL_I2C_MspInit+0x13c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f040 8088 	bne.w	80053c0 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b0:	2300      	movs	r3, #0
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	4b45      	ldr	r3, [pc, #276]	; (80053cc <HAL_I2C_MspInit+0x140>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	4a44      	ldr	r2, [pc, #272]	; (80053cc <HAL_I2C_MspInit+0x140>)
 80052ba:	f043 0302 	orr.w	r3, r3, #2
 80052be:	6313      	str	r3, [r2, #48]	; 0x30
 80052c0:	4b42      	ldr	r3, [pc, #264]	; (80053cc <HAL_I2C_MspInit+0x140>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80052cc:	23c0      	movs	r3, #192	; 0xc0
 80052ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052d0:	2312      	movs	r3, #18
 80052d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052d4:	2301      	movs	r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d8:	2303      	movs	r3, #3
 80052da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80052dc:	2304      	movs	r3, #4
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052e0:	f107 0314 	add.w	r3, r7, #20
 80052e4:	4619      	mov	r1, r3
 80052e6:	483a      	ldr	r0, [pc, #232]	; (80053d0 <HAL_I2C_MspInit+0x144>)
 80052e8:	f002 fbba 	bl	8007a60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	4b36      	ldr	r3, [pc, #216]	; (80053cc <HAL_I2C_MspInit+0x140>)
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	4a35      	ldr	r2, [pc, #212]	; (80053cc <HAL_I2C_MspInit+0x140>)
 80052f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052fa:	6413      	str	r3, [r2, #64]	; 0x40
 80052fc:	4b33      	ldr	r3, [pc, #204]	; (80053cc <HAL_I2C_MspInit+0x140>)
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005308:	4b32      	ldr	r3, [pc, #200]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 800530a:	4a33      	ldr	r2, [pc, #204]	; (80053d8 <HAL_I2C_MspInit+0x14c>)
 800530c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800530e:	4b31      	ldr	r3, [pc, #196]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 8005310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005314:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005316:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 8005318:	2200      	movs	r2, #0
 800531a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800531c:	4b2d      	ldr	r3, [pc, #180]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 800531e:	2200      	movs	r2, #0
 8005320:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005322:	4b2c      	ldr	r3, [pc, #176]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 8005324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005328:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800532a:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 800532c:	2200      	movs	r2, #0
 800532e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005330:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005336:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 8005338:	2200      	movs	r2, #0
 800533a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800533c:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 800533e:	2200      	movs	r2, #0
 8005340:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 8005344:	2200      	movs	r2, #0
 8005346:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005348:	4822      	ldr	r0, [pc, #136]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 800534a:	f001 fff9 	bl	8007340 <HAL_DMA_Init>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8005354:	f000 f95c 	bl	8005610 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a1e      	ldr	r2, [pc, #120]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
 800535e:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <HAL_I2C_MspInit+0x148>)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8005364:	4b1d      	ldr	r3, [pc, #116]	; (80053dc <HAL_I2C_MspInit+0x150>)
 8005366:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <HAL_I2C_MspInit+0x154>)
 8005368:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800536a:	4b1c      	ldr	r3, [pc, #112]	; (80053dc <HAL_I2C_MspInit+0x150>)
 800536c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005370:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005372:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <HAL_I2C_MspInit+0x150>)
 8005374:	2240      	movs	r2, #64	; 0x40
 8005376:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005378:	4b18      	ldr	r3, [pc, #96]	; (80053dc <HAL_I2C_MspInit+0x150>)
 800537a:	2200      	movs	r2, #0
 800537c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800537e:	4b17      	ldr	r3, [pc, #92]	; (80053dc <HAL_I2C_MspInit+0x150>)
 8005380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005384:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005386:	4b15      	ldr	r3, [pc, #84]	; (80053dc <HAL_I2C_MspInit+0x150>)
 8005388:	2200      	movs	r2, #0
 800538a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800538c:	4b13      	ldr	r3, [pc, #76]	; (80053dc <HAL_I2C_MspInit+0x150>)
 800538e:	2200      	movs	r2, #0
 8005390:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005392:	4b12      	ldr	r3, [pc, #72]	; (80053dc <HAL_I2C_MspInit+0x150>)
 8005394:	2200      	movs	r2, #0
 8005396:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005398:	4b10      	ldr	r3, [pc, #64]	; (80053dc <HAL_I2C_MspInit+0x150>)
 800539a:	2200      	movs	r2, #0
 800539c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800539e:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <HAL_I2C_MspInit+0x150>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80053a4:	480d      	ldr	r0, [pc, #52]	; (80053dc <HAL_I2C_MspInit+0x150>)
 80053a6:	f001 ffcb 	bl	8007340 <HAL_DMA_Init>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 80053b0:	f000 f92e 	bl	8005610 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <HAL_I2C_MspInit+0x150>)
 80053b8:	635a      	str	r2, [r3, #52]	; 0x34
 80053ba:	4a08      	ldr	r2, [pc, #32]	; (80053dc <HAL_I2C_MspInit+0x150>)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80053c0:	bf00      	nop
 80053c2:	3728      	adds	r7, #40	; 0x28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40005400 	.word	0x40005400
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40020400 	.word	0x40020400
 80053d4:	20001b2c 	.word	0x20001b2c
 80053d8:	40026010 	.word	0x40026010
 80053dc:	20001a78 	.word	0x20001a78
 80053e0:	400260b8 	.word	0x400260b8

080053e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053e8:	f001 fa10 	bl	800680c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80053ec:	f000 f8a6 	bl	800553c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);	//Let the time to the components to start
 80053f0:	2064      	movs	r0, #100	; 0x64
 80053f2:	f001 fa7d 	bl	80068f0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80053f6:	f7ff fe7d 	bl	80050f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80053fa:	f7ff fdf5 	bl	8004fe8 <MX_DMA_Init>
  MX_I2C1_Init();
 80053fe:	f7ff ff17 	bl	8005230 <MX_I2C1_Init>
  MX_SPI1_Init();
 8005402:	f000 f90d 	bl	8005620 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005406:	f000 f941 	bl	800568c <MX_SPI2_Init>
  MX_TIM1_Init();
 800540a:	f000 fc1f 	bl	8005c4c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800540e:	f000 fda5 	bl	8005f5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005412:	f000 fdcd 	bl	8005fb0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8005416:	f000 fdf5 	bl	8006004 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 800541a:	f7ff fcff 	bl	8004e1c <MX_ADC2_Init>
  MX_TIM2_Init();
 800541e:	f000 fcdb 	bl	8005dd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);	//Let the time for the components to start
 8005422:	2064      	movs	r0, #100	; 0x64
 8005424:	f001 fa64 	bl	80068f0 <HAL_Delay>

  //Init du baromètre
  //MS5611_init(&sys.sensors.ms5611, &hi2c1);

  //Init du GYRO et de l ACC en utilisant un MPU6000
  MPU_init(&sys.sensors.mpu, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 8005428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800542c:	4a2f      	ldr	r2, [pc, #188]	; (80054ec <main+0x108>)
 800542e:	4930      	ldr	r1, [pc, #192]	; (80054f0 <main+0x10c>)
 8005430:	4830      	ldr	r0, [pc, #192]	; (80054f4 <main+0x110>)
 8005432:	f7ff fa3d 	bl	80048b0 <MPU_init>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 8005436:	492f      	ldr	r1, [pc, #188]	; (80054f4 <main+0x110>)
 8005438:	482f      	ldr	r0, [pc, #188]	; (80054f8 <main+0x114>)
 800543a:	f7fe ffb9 	bl	80043b0 <GYRO_init>
  ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 800543e:	492d      	ldr	r1, [pc, #180]	; (80054f4 <main+0x110>)
 8005440:	482e      	ldr	r0, [pc, #184]	; (80054fc <main+0x118>)
 8005442:	f7fe fefb 	bl	800423c <ACC_init>



  IHM_Init(&sys.ihm);
 8005446:	482e      	ldr	r0, [pc, #184]	; (8005500 <main+0x11c>)
 8005448:	f7fc fec0 	bl	80021cc <IHM_Init>
  IHM_Led_Init(LED_HIGH_LVL, 30, PIN_LED_RGB_1_Pin, LED_OUTPUT_NEGATIVE);
 800544c:	2301      	movs	r3, #1
 800544e:	2201      	movs	r2, #1
 8005450:	211e      	movs	r1, #30
 8005452:	2000      	movs	r0, #0
 8005454:	f7fc feca 	bl	80021ec <IHM_Led_Init>
  IHM_Led_Init(LED_SENSORS, 30, PIN_LED_RGB_2_Pin, LED_OUTPUT_NEGATIVE);
 8005458:	2301      	movs	r3, #1
 800545a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800545e:	211e      	movs	r1, #30
 8005460:	2001      	movs	r0, #1
 8005462:	f7fc fec3 	bl	80021ec <IHM_Led_Init>

  IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8005466:	2300      	movs	r3, #0
 8005468:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800546c:	2100      	movs	r1, #0
 800546e:	2000      	movs	r0, #0
 8005470:	f7fc ff2a 	bl	80022c8 <IHM_Set_Sequences>
  IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8005474:	2300      	movs	r3, #0
 8005476:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800547a:	2100      	movs	r1, #0
 800547c:	2001      	movs	r0, #1
 800547e:	f7fc ff23 	bl	80022c8 <IHM_Set_Sequences>

  BATTERIE_Init(&sys.sensors.batterie, &hadc2);
 8005482:	4920      	ldr	r1, [pc, #128]	; (8005504 <main+0x120>)
 8005484:	4820      	ldr	r0, [pc, #128]	; (8005508 <main+0x124>)
 8005486:	f7fe ff80 	bl	800438a <BATTERIE_Init>

  CONTROLLER_Init(&sys.radio.controller, &sys.radio.ibus);
 800548a:	4920      	ldr	r1, [pc, #128]	; (800550c <main+0x128>)
 800548c:	4820      	ldr	r0, [pc, #128]	; (8005510 <main+0x12c>)
 800548e:	f7fe fa27 	bl	80038e0 <CONTROLLER_Init>
  IBUS_init(&sys.radio.ibus, &huart3, CONTROLLER_Rx_Data_Rdy);
 8005492:	4a20      	ldr	r2, [pc, #128]	; (8005514 <main+0x130>)
 8005494:	4920      	ldr	r1, [pc, #128]	; (8005518 <main+0x134>)
 8005496:	481d      	ldr	r0, [pc, #116]	; (800550c <main+0x128>)
 8005498:	f006 f994 	bl	800b7c4 <IBUS_init>

  ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_FREQUENCY);
 800549c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80054a0:	4a16      	ldr	r2, [pc, #88]	; (80054fc <main+0x118>)
 80054a2:	4915      	ldr	r1, [pc, #84]	; (80054f8 <main+0x114>)
 80054a4:	481d      	ldr	r0, [pc, #116]	; (800551c <main+0x138>)
 80054a6:	f7fc fa23 	bl	80018f0 <ORIENTATION_Init>
  REGULATION_ORIENTATION_Init(&sys.regulation.orientation, &sys.orientation, sys.propulsion.consigne);
 80054aa:	4a1d      	ldr	r2, [pc, #116]	; (8005520 <main+0x13c>)
 80054ac:	491b      	ldr	r1, [pc, #108]	; (800551c <main+0x138>)
 80054ae:	481d      	ldr	r0, [pc, #116]	; (8005524 <main+0x140>)
 80054b0:	f7fe fce0 	bl	8003e74 <REGULATION_ORIENTATION_Init>
  REGULATION_POSITION_Init(&sys.regulation.position, &sys.regulation.orientation, sys.propulsion.consigne);
 80054b4:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <main+0x13c>)
 80054b6:	491b      	ldr	r1, [pc, #108]	; (8005524 <main+0x140>)
 80054b8:	481b      	ldr	r0, [pc, #108]	; (8005528 <main+0x144>)
 80054ba:	f7fe fe6d 	bl	8004198 <REGULATION_POSITION_Init>
  PROPULSION_Init(&sys.propulsion, &htim1);
 80054be:	491b      	ldr	r1, [pc, #108]	; (800552c <main+0x148>)
 80054c0:	481b      	ldr	r0, [pc, #108]	; (8005530 <main+0x14c>)
 80054c2:	f7fe f955 	bl	8003770 <PROPULSION_Init>

  TELEMETRY_Init(&sys.radio.telemetry, &huart2);
 80054c6:	491b      	ldr	r1, [pc, #108]	; (8005534 <main+0x150>)
 80054c8:	481b      	ldr	r0, [pc, #108]	; (8005538 <main+0x154>)
 80054ca:	f000 ffcf 	bl	800646c <TELEMETRY_Init>

  FLIGHT_MODE_Init(&sys);
 80054ce:	480c      	ldr	r0, [pc, #48]	; (8005500 <main+0x11c>)
 80054d0:	f7fc fcc8 	bl	8001e64 <FLIGHT_MODE_Init>

  SCHEDULER_init(&sys);
 80054d4:	480a      	ldr	r0, [pc, #40]	; (8005500 <main+0x11c>)
 80054d6:	f7fd fd3d 	bl	8002f54 <SCHEDULER_init>
  EVENT_init(&sys);
 80054da:	4809      	ldr	r0, [pc, #36]	; (8005500 <main+0x11c>)
 80054dc:	f7fd fa48 	bl	8002970 <EVENT_init>

  DATA_LOGGER_Init(&sys);
 80054e0:	4807      	ldr	r0, [pc, #28]	; (8005500 <main+0x11c>)
 80054e2:	f7fb fd31 	bl	8000f48 <DATA_LOGGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 80054e6:	f7fd fd47 	bl	8002f78 <SCHEDULER_run>
 80054ea:	e7fc      	b.n	80054e6 <main+0x102>
 80054ec:	40020400 	.word	0x40020400
 80054f0:	200026a4 	.word	0x200026a4
 80054f4:	20001cdc 	.word	0x20001cdc
 80054f8:	20001bbc 	.word	0x20001bbc
 80054fc:	20001c30 	.word	0x20001c30
 8005500:	20001b8c 	.word	0x20001b8c
 8005504:	200019d0 	.word	0x200019d0
 8005508:	20001c98 	.word	0x20001c98
 800550c:	20001da4 	.word	0x20001da4
 8005510:	20001e04 	.word	0x20001e04
 8005514:	08003e67 	.word	0x08003e67
 8005518:	20002a74 	.word	0x20002a74
 800551c:	20001d70 	.word	0x20001d70
 8005520:	20002498 	.word	0x20002498
 8005524:	200024a8 	.word	0x200024a8
 8005528:	20002694 	.word	0x20002694
 800552c:	200028d4 	.word	0x200028d4
 8005530:	20002488 	.word	0x20002488
 8005534:	20002bb4 	.word	0x20002bb4
 8005538:	20001e5c 	.word	0x20001e5c

0800553c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b094      	sub	sp, #80	; 0x50
 8005540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005542:	f107 0320 	add.w	r3, r7, #32
 8005546:	2230      	movs	r2, #48	; 0x30
 8005548:	2100      	movs	r1, #0
 800554a:	4618      	mov	r0, r3
 800554c:	f006 fcd8 	bl	800bf00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005560:	2300      	movs	r3, #0
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	4b28      	ldr	r3, [pc, #160]	; (8005608 <SystemClock_Config+0xcc>)
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	4a27      	ldr	r2, [pc, #156]	; (8005608 <SystemClock_Config+0xcc>)
 800556a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556e:	6413      	str	r3, [r2, #64]	; 0x40
 8005570:	4b25      	ldr	r3, [pc, #148]	; (8005608 <SystemClock_Config+0xcc>)
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800557c:	2300      	movs	r3, #0
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	4b22      	ldr	r3, [pc, #136]	; (800560c <SystemClock_Config+0xd0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a21      	ldr	r2, [pc, #132]	; (800560c <SystemClock_Config+0xd0>)
 8005586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <SystemClock_Config+0xd0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005598:	2302      	movs	r3, #2
 800559a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800559c:	2301      	movs	r3, #1
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80055a0:	2310      	movs	r3, #16
 80055a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055a4:	2302      	movs	r3, #2
 80055a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80055a8:	2300      	movs	r3, #0
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80055ac:	2308      	movs	r3, #8
 80055ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80055b0:	23a8      	movs	r3, #168	; 0xa8
 80055b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80055b4:	2302      	movs	r3, #2
 80055b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80055b8:	2304      	movs	r3, #4
 80055ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055bc:	f107 0320 	add.w	r3, r7, #32
 80055c0:	4618      	mov	r0, r3
 80055c2:	f002 fd39 	bl	8008038 <HAL_RCC_OscConfig>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80055cc:	f000 f820 	bl	8005610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055d0:	230f      	movs	r3, #15
 80055d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055d4:	2302      	movs	r3, #2
 80055d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80055dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80055e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80055e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80055e8:	f107 030c 	add.w	r3, r7, #12
 80055ec:	2105      	movs	r1, #5
 80055ee:	4618      	mov	r0, r3
 80055f0:	f002 ff92 	bl	8008518 <HAL_RCC_ClockConfig>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80055fa:	f000 f809 	bl	8005610 <Error_Handler>
  }
}
 80055fe:	bf00      	nop
 8005600:	3750      	adds	r7, #80	; 0x50
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800
 800560c:	40007000 	.word	0x40007000

08005610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005614:	bf00      	nop
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8005624:	4b17      	ldr	r3, [pc, #92]	; (8005684 <MX_SPI1_Init+0x64>)
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <MX_SPI1_Init+0x68>)
 8005628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <MX_SPI1_Init+0x64>)
 800562c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005632:	4b14      	ldr	r3, [pc, #80]	; (8005684 <MX_SPI1_Init+0x64>)
 8005634:	2200      	movs	r2, #0
 8005636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005638:	4b12      	ldr	r3, [pc, #72]	; (8005684 <MX_SPI1_Init+0x64>)
 800563a:	2200      	movs	r2, #0
 800563c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <MX_SPI1_Init+0x64>)
 8005640:	2200      	movs	r2, #0
 8005642:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005644:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <MX_SPI1_Init+0x64>)
 8005646:	2200      	movs	r2, #0
 8005648:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800564a:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <MX_SPI1_Init+0x64>)
 800564c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005650:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005652:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <MX_SPI1_Init+0x64>)
 8005654:	2238      	movs	r2, #56	; 0x38
 8005656:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <MX_SPI1_Init+0x64>)
 800565a:	2200      	movs	r2, #0
 800565c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <MX_SPI1_Init+0x64>)
 8005660:	2200      	movs	r2, #0
 8005662:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005664:	4b07      	ldr	r3, [pc, #28]	; (8005684 <MX_SPI1_Init+0x64>)
 8005666:	2200      	movs	r2, #0
 8005668:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <MX_SPI1_Init+0x64>)
 800566c:	220a      	movs	r2, #10
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005670:	4804      	ldr	r0, [pc, #16]	; (8005684 <MX_SPI1_Init+0x64>)
 8005672:	f003 f91d 	bl	80088b0 <HAL_SPI_Init>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800567c:	f7ff ffc8 	bl	8005610 <Error_Handler>
  }

}
 8005680:	bf00      	nop
 8005682:	bd80      	pop	{r7, pc}
 8005684:	2000275c 	.word	0x2000275c
 8005688:	40013000 	.word	0x40013000

0800568c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8005690:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <MX_SPI2_Init+0x64>)
 8005692:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <MX_SPI2_Init+0x68>)
 8005694:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005696:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <MX_SPI2_Init+0x64>)
 8005698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800569c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800569e:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80056a4:	4b12      	ldr	r3, [pc, #72]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80056aa:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80056b0:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80056b6:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80056be:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056c0:	2228      	movs	r2, #40	; 0x28
 80056c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80056d6:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056d8:	220a      	movs	r2, #10
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80056dc:	4804      	ldr	r0, [pc, #16]	; (80056f0 <MX_SPI2_Init+0x64>)
 80056de:	f003 f8e7 	bl	80088b0 <HAL_SPI_Init>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80056e8:	f7ff ff92 	bl	8005610 <Error_Handler>
  }

}
 80056ec:	bf00      	nop
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	200026a4 	.word	0x200026a4
 80056f4:	40003800 	.word	0x40003800

080056f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	; 0x30
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005700:	f107 031c 	add.w	r3, r7, #28
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	609a      	str	r2, [r3, #8]
 800570c:	60da      	str	r2, [r3, #12]
 800570e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a8e      	ldr	r2, [pc, #568]	; (8005950 <HAL_SPI_MspInit+0x258>)
 8005716:	4293      	cmp	r3, r2
 8005718:	f040 8089 	bne.w	800582e <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	4b8c      	ldr	r3, [pc, #560]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	4a8b      	ldr	r2, [pc, #556]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 8005726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800572a:	6453      	str	r3, [r2, #68]	; 0x44
 800572c:	4b89      	ldr	r3, [pc, #548]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 800572e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	4b85      	ldr	r3, [pc, #532]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	4a84      	ldr	r2, [pc, #528]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 8005742:	f043 0301 	orr.w	r3, r3, #1
 8005746:	6313      	str	r3, [r2, #48]	; 0x30
 8005748:	4b82      	ldr	r3, [pc, #520]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005754:	23e0      	movs	r3, #224	; 0xe0
 8005756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005758:	2302      	movs	r3, #2
 800575a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575c:	2300      	movs	r3, #0
 800575e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005760:	2303      	movs	r3, #3
 8005762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005764:	2305      	movs	r3, #5
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005768:	f107 031c 	add.w	r3, r7, #28
 800576c:	4619      	mov	r1, r3
 800576e:	487a      	ldr	r0, [pc, #488]	; (8005958 <HAL_SPI_MspInit+0x260>)
 8005770:	f002 f976 	bl	8007a60 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8005774:	4b79      	ldr	r3, [pc, #484]	; (800595c <HAL_SPI_MspInit+0x264>)
 8005776:	4a7a      	ldr	r2, [pc, #488]	; (8005960 <HAL_SPI_MspInit+0x268>)
 8005778:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800577a:	4b78      	ldr	r3, [pc, #480]	; (800595c <HAL_SPI_MspInit+0x264>)
 800577c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005780:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005782:	4b76      	ldr	r3, [pc, #472]	; (800595c <HAL_SPI_MspInit+0x264>)
 8005784:	2200      	movs	r2, #0
 8005786:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005788:	4b74      	ldr	r3, [pc, #464]	; (800595c <HAL_SPI_MspInit+0x264>)
 800578a:	2200      	movs	r2, #0
 800578c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800578e:	4b73      	ldr	r3, [pc, #460]	; (800595c <HAL_SPI_MspInit+0x264>)
 8005790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005794:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005796:	4b71      	ldr	r3, [pc, #452]	; (800595c <HAL_SPI_MspInit+0x264>)
 8005798:	2200      	movs	r2, #0
 800579a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800579c:	4b6f      	ldr	r3, [pc, #444]	; (800595c <HAL_SPI_MspInit+0x264>)
 800579e:	2200      	movs	r2, #0
 80057a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80057a2:	4b6e      	ldr	r3, [pc, #440]	; (800595c <HAL_SPI_MspInit+0x264>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80057a8:	4b6c      	ldr	r3, [pc, #432]	; (800595c <HAL_SPI_MspInit+0x264>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057ae:	4b6b      	ldr	r3, [pc, #428]	; (800595c <HAL_SPI_MspInit+0x264>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80057b4:	4869      	ldr	r0, [pc, #420]	; (800595c <HAL_SPI_MspInit+0x264>)
 80057b6:	f001 fdc3 	bl	8007340 <HAL_DMA_Init>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80057c0:	f7ff ff26 	bl	8005610 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a65      	ldr	r2, [pc, #404]	; (800595c <HAL_SPI_MspInit+0x264>)
 80057c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80057ca:	4a64      	ldr	r2, [pc, #400]	; (800595c <HAL_SPI_MspInit+0x264>)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80057d0:	4b64      	ldr	r3, [pc, #400]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 80057d2:	4a65      	ldr	r2, [pc, #404]	; (8005968 <HAL_SPI_MspInit+0x270>)
 80057d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80057d6:	4b63      	ldr	r3, [pc, #396]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 80057d8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80057dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057de:	4b61      	ldr	r3, [pc, #388]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 80057e0:	2240      	movs	r2, #64	; 0x40
 80057e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057e4:	4b5f      	ldr	r3, [pc, #380]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057ea:	4b5e      	ldr	r3, [pc, #376]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 80057ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057f2:	4b5c      	ldr	r3, [pc, #368]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057f8:	4b5a      	ldr	r3, [pc, #360]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80057fe:	4b59      	ldr	r3, [pc, #356]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 8005800:	2200      	movs	r2, #0
 8005802:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005804:	4b57      	ldr	r3, [pc, #348]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 8005806:	2200      	movs	r2, #0
 8005808:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800580a:	4b56      	ldr	r3, [pc, #344]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 800580c:	2200      	movs	r2, #0
 800580e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005810:	4854      	ldr	r0, [pc, #336]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 8005812:	f001 fd95 	bl	8007340 <HAL_DMA_Init>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800581c:	f7ff fef8 	bl	8005610 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a50      	ldr	r2, [pc, #320]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 8005824:	649a      	str	r2, [r3, #72]	; 0x48
 8005826:	4a4f      	ldr	r2, [pc, #316]	; (8005964 <HAL_SPI_MspInit+0x26c>)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800582c:	e08c      	b.n	8005948 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a4e      	ldr	r2, [pc, #312]	; (800596c <HAL_SPI_MspInit+0x274>)
 8005834:	4293      	cmp	r3, r2
 8005836:	f040 8087 	bne.w	8005948 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	4b45      	ldr	r3, [pc, #276]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	4a44      	ldr	r2, [pc, #272]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 8005844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005848:	6413      	str	r3, [r2, #64]	; 0x40
 800584a:	4b42      	ldr	r3, [pc, #264]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	4b3e      	ldr	r3, [pc, #248]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	4a3d      	ldr	r2, [pc, #244]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 8005860:	f043 0302 	orr.w	r3, r3, #2
 8005864:	6313      	str	r3, [r2, #48]	; 0x30
 8005866:	4b3b      	ldr	r3, [pc, #236]	; (8005954 <HAL_SPI_MspInit+0x25c>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005872:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005878:	2302      	movs	r3, #2
 800587a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800587c:	2300      	movs	r3, #0
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005880:	2303      	movs	r3, #3
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005884:	2305      	movs	r3, #5
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005888:	f107 031c 	add.w	r3, r7, #28
 800588c:	4619      	mov	r1, r3
 800588e:	4838      	ldr	r0, [pc, #224]	; (8005970 <HAL_SPI_MspInit+0x278>)
 8005890:	f002 f8e6 	bl	8007a60 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005894:	4b37      	ldr	r3, [pc, #220]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 8005896:	4a38      	ldr	r2, [pc, #224]	; (8005978 <HAL_SPI_MspInit+0x280>)
 8005898:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800589a:	4b36      	ldr	r3, [pc, #216]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 800589c:	2200      	movs	r2, #0
 800589e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058a0:	4b34      	ldr	r3, [pc, #208]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058a6:	4b33      	ldr	r3, [pc, #204]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058ac:	4b31      	ldr	r3, [pc, #196]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058b4:	4b2f      	ldr	r3, [pc, #188]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058ba:	4b2e      	ldr	r3, [pc, #184]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058bc:	2200      	movs	r2, #0
 80058be:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80058c0:	4b2c      	ldr	r3, [pc, #176]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80058c6:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058cc:	4b29      	ldr	r3, [pc, #164]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80058d2:	4828      	ldr	r0, [pc, #160]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058d4:	f001 fd34 	bl	8007340 <HAL_DMA_Init>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 80058de:	f7ff fe97 	bl	8005610 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a23      	ldr	r2, [pc, #140]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80058e8:	4a22      	ldr	r2, [pc, #136]	; (8005974 <HAL_SPI_MspInit+0x27c>)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80058ee:	4b23      	ldr	r3, [pc, #140]	; (800597c <HAL_SPI_MspInit+0x284>)
 80058f0:	4a23      	ldr	r2, [pc, #140]	; (8005980 <HAL_SPI_MspInit+0x288>)
 80058f2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80058f4:	4b21      	ldr	r3, [pc, #132]	; (800597c <HAL_SPI_MspInit+0x284>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058fa:	4b20      	ldr	r3, [pc, #128]	; (800597c <HAL_SPI_MspInit+0x284>)
 80058fc:	2240      	movs	r2, #64	; 0x40
 80058fe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005900:	4b1e      	ldr	r3, [pc, #120]	; (800597c <HAL_SPI_MspInit+0x284>)
 8005902:	2200      	movs	r2, #0
 8005904:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005906:	4b1d      	ldr	r3, [pc, #116]	; (800597c <HAL_SPI_MspInit+0x284>)
 8005908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800590c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800590e:	4b1b      	ldr	r3, [pc, #108]	; (800597c <HAL_SPI_MspInit+0x284>)
 8005910:	2200      	movs	r2, #0
 8005912:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005914:	4b19      	ldr	r3, [pc, #100]	; (800597c <HAL_SPI_MspInit+0x284>)
 8005916:	2200      	movs	r2, #0
 8005918:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800591a:	4b18      	ldr	r3, [pc, #96]	; (800597c <HAL_SPI_MspInit+0x284>)
 800591c:	2200      	movs	r2, #0
 800591e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005920:	4b16      	ldr	r3, [pc, #88]	; (800597c <HAL_SPI_MspInit+0x284>)
 8005922:	2200      	movs	r2, #0
 8005924:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005926:	4b15      	ldr	r3, [pc, #84]	; (800597c <HAL_SPI_MspInit+0x284>)
 8005928:	2200      	movs	r2, #0
 800592a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800592c:	4813      	ldr	r0, [pc, #76]	; (800597c <HAL_SPI_MspInit+0x284>)
 800592e:	f001 fd07 	bl	8007340 <HAL_DMA_Init>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <HAL_SPI_MspInit+0x244>
      Error_Handler();
 8005938:	f7ff fe6a 	bl	8005610 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a0f      	ldr	r2, [pc, #60]	; (800597c <HAL_SPI_MspInit+0x284>)
 8005940:	649a      	str	r2, [r3, #72]	; 0x48
 8005942:	4a0e      	ldr	r2, [pc, #56]	; (800597c <HAL_SPI_MspInit+0x284>)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005948:	bf00      	nop
 800594a:	3730      	adds	r7, #48	; 0x30
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40013000 	.word	0x40013000
 8005954:	40023800 	.word	0x40023800
 8005958:	40020000 	.word	0x40020000
 800595c:	200027b4 	.word	0x200027b4
 8005960:	40026410 	.word	0x40026410
 8005964:	20002874 	.word	0x20002874
 8005968:	40026458 	.word	0x40026458
 800596c:	40003800 	.word	0x40003800
 8005970:	40020400 	.word	0x40020400
 8005974:	200026fc 	.word	0x200026fc
 8005978:	40026058 	.word	0x40026058
 800597c:	20002814 	.word	0x20002814
 8005980:	40026070 	.word	0x40026070

08005984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800598a:	2300      	movs	r3, #0
 800598c:	607b      	str	r3, [r7, #4]
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <HAL_MspInit+0x4c>)
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	4a0f      	ldr	r2, [pc, #60]	; (80059d0 <HAL_MspInit+0x4c>)
 8005994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005998:	6453      	str	r3, [r2, #68]	; 0x44
 800599a:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <HAL_MspInit+0x4c>)
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a2:	607b      	str	r3, [r7, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059a6:	2300      	movs	r3, #0
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <HAL_MspInit+0x4c>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	4a08      	ldr	r2, [pc, #32]	; (80059d0 <HAL_MspInit+0x4c>)
 80059b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b4:	6413      	str	r3, [r2, #64]	; 0x40
 80059b6:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <HAL_MspInit+0x4c>)
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40023800 	.word	0x40023800

080059d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80059d8:	bf00      	nop
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059e2:	b480      	push	{r7}
 80059e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059e6:	e7fe      	b.n	80059e6 <HardFault_Handler+0x4>

080059e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059ec:	e7fe      	b.n	80059ec <MemManage_Handler+0x4>

080059ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059ee:	b480      	push	{r7}
 80059f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059f2:	e7fe      	b.n	80059f2 <BusFault_Handler+0x4>

080059f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059f8:	e7fe      	b.n	80059f8 <UsageFault_Handler+0x4>

080059fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059fa:	b480      	push	{r7}
 80059fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059fe:	bf00      	nop
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a0c:	bf00      	nop
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a16:	b480      	push	{r7}
 8005a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a1a:	bf00      	nop
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a28:	f000 ff42 	bl	80068b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a2c:	bf00      	nop
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005a34:	4802      	ldr	r0, [pc, #8]	; (8005a40 <DMA1_Stream0_IRQHandler+0x10>)
 8005a36:	f001 fdab 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005a3a:	bf00      	nop
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20001b2c 	.word	0x20001b2c

08005a44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005a48:	4802      	ldr	r0, [pc, #8]	; (8005a54 <DMA1_Stream1_IRQHandler+0x10>)
 8005a4a:	f001 fda1 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005a4e:	bf00      	nop
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20002a14 	.word	0x20002a14

08005a58 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005a5c:	4802      	ldr	r0, [pc, #8]	; (8005a68 <DMA1_Stream3_IRQHandler+0x10>)
 8005a5e:	f001 fd97 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005a62:	bf00      	nop
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	200026fc 	.word	0x200026fc

08005a6c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005a70:	4802      	ldr	r0, [pc, #8]	; (8005a7c <DMA1_Stream4_IRQHandler+0x10>)
 8005a72:	f001 fd8d 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20002814 	.word	0x20002814

08005a80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005a84:	4802      	ldr	r0, [pc, #8]	; (8005a90 <DMA1_Stream5_IRQHandler+0x10>)
 8005a86:	f001 fd83 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20002954 	.word	0x20002954

08005a94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005a98:	4802      	ldr	r0, [pc, #8]	; (8005aa4 <DMA1_Stream6_IRQHandler+0x10>)
 8005a9a:	f001 fd79 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20002b14 	.word	0x20002b14

08005aa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005aac:	4802      	ldr	r0, [pc, #8]	; (8005ab8 <TIM2_IRQHandler+0x10>)
 8005aae:	f003 fde1 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005ab2:	bf00      	nop
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20002914 	.word	0x20002914

08005abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ac2:	480d      	ldr	r0, [pc, #52]	; (8005af8 <USART2_IRQHandler+0x3c>)
 8005ac4:	f004 fef8 	bl	800a8b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)){
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <USART2_IRQHandler+0x3c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d10c      	bne.n	8005af0 <USART2_IRQHandler+0x34>
	  TELEMETRY_Idle_Line_Detection();
 8005ad6:	f000 fe81 	bl	80067dc <TELEMETRY_Idle_Line_Detection>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <USART2_IRQHandler+0x3c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <USART2_IRQHandler+0x3c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
	}
  /* USER CODE END USART2_IRQn 1 */
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20002bb4 	.word	0x20002bb4

08005afc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b00:	4802      	ldr	r0, [pc, #8]	; (8005b0c <USART3_IRQHandler+0x10>)
 8005b02:	f004 fed9 	bl	800a8b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b06:	bf00      	nop
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20002a74 	.word	0x20002a74

08005b10 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005b14:	4802      	ldr	r0, [pc, #8]	; (8005b20 <DMA1_Stream7_IRQHandler+0x10>)
 8005b16:	f001 fd3b 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005b1a:	bf00      	nop
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20001a78 	.word	0x20001a78

08005b24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005b28:	4802      	ldr	r0, [pc, #8]	; (8005b34 <DMA2_Stream0_IRQHandler+0x10>)
 8005b2a:	f001 fd31 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005b2e:	bf00      	nop
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	200027b4 	.word	0x200027b4

08005b38 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005b3c:	4802      	ldr	r0, [pc, #8]	; (8005b48 <DMA2_Stream1_IRQHandler+0x10>)
 8005b3e:	f001 fd27 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005b42:	bf00      	nop
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200029b4 	.word	0x200029b4

08005b4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005b50:	4802      	ldr	r0, [pc, #8]	; (8005b5c <DMA2_Stream2_IRQHandler+0x10>)
 8005b52:	f001 fd1d 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005b56:	bf00      	nop
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20001a18 	.word	0x20001a18

08005b60 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005b64:	4802      	ldr	r0, [pc, #8]	; (8005b70 <DMA2_Stream3_IRQHandler+0x10>)
 8005b66:	f001 fd13 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005b6a:	bf00      	nop
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20002874 	.word	0x20002874

08005b74 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005b78:	4802      	ldr	r0, [pc, #8]	; (8005b84 <DMA2_Stream6_IRQHandler+0x10>)
 8005b7a:	f001 fd09 	bl	8007590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005b7e:	bf00      	nop
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20002ab4 	.word	0x20002ab4

08005b88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	IBUS_RxCplt(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f005 fe3d 	bl	800b810 <IBUS_RxCplt>
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
	IBUS_RxHalfCplt(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f005 fe4c 	bl	800b844 <IBUS_RxHalfCplt>
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bbc:	4a14      	ldr	r2, [pc, #80]	; (8005c10 <_sbrk+0x5c>)
 8005bbe:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <_sbrk+0x60>)
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bc8:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <_sbrk+0x64>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005bd0:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <_sbrk+0x64>)
 8005bd2:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <_sbrk+0x68>)
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <_sbrk+0x64>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d207      	bcs.n	8005bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005be4:	f006 f93e 	bl	800be64 <__errno>
 8005be8:	4602      	mov	r2, r0
 8005bea:	230c      	movs	r3, #12
 8005bec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf2:	e009      	b.n	8005c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bf4:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <_sbrk+0x64>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <_sbrk+0x64>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	4a05      	ldr	r2, [pc, #20]	; (8005c18 <_sbrk+0x64>)
 8005c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20020000 	.word	0x20020000
 8005c14:	00000400 	.word	0x00000400
 8005c18:	200019b4 	.word	0x200019b4
 8005c1c:	20002c00 	.word	0x20002c00

08005c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <SystemInit+0x28>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	4a07      	ldr	r2, [pc, #28]	; (8005c48 <SystemInit+0x28>)
 8005c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <SystemInit+0x28>)
 8005c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c3a:	609a      	str	r2, [r3, #8]
#endif
}
 8005c3c:	bf00      	nop
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	e000ed00 	.word	0xe000ed00

08005c4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b096      	sub	sp, #88	; 0x58
 8005c50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	605a      	str	r2, [r3, #4]
 8005c5c:	609a      	str	r2, [r3, #8]
 8005c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	605a      	str	r2, [r3, #4]
 8005c74:	609a      	str	r2, [r3, #8]
 8005c76:	60da      	str	r2, [r3, #12]
 8005c78:	611a      	str	r2, [r3, #16]
 8005c7a:	615a      	str	r2, [r3, #20]
 8005c7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005c7e:	1d3b      	adds	r3, r7, #4
 8005c80:	2220      	movs	r2, #32
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f006 f93b 	bl	800bf00 <memset>

  htim1.Instance = TIM1;
 8005c8a:	4b51      	ldr	r3, [pc, #324]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005c8c:	4a51      	ldr	r2, [pc, #324]	; (8005dd4 <MX_TIM1_Init+0x188>)
 8005c8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8005c90:	4b4f      	ldr	r3, [pc, #316]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005c92:	2214      	movs	r2, #20
 8005c94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c96:	4b4e      	ldr	r3, [pc, #312]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8005c9c:	4b4c      	ldr	r3, [pc, #304]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005c9e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005ca2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ca4:	4b4a      	ldr	r3, [pc, #296]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005caa:	4b49      	ldr	r3, [pc, #292]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005cb0:	4b47      	ldr	r3, [pc, #284]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005cb2:	2280      	movs	r2, #128	; 0x80
 8005cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005cb6:	4846      	ldr	r0, [pc, #280]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005cb8:	f003 fc3e 	bl	8009538 <HAL_TIM_Base_Init>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005cc2:	f7ff fca5 	bl	8005610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005ccc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	483f      	ldr	r0, [pc, #252]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005cd4:	f003 fe9c 	bl	8009a10 <HAL_TIM_ConfigClockSource>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005cde:	f7ff fc97 	bl	8005610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005ce2:	483b      	ldr	r0, [pc, #236]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005ce4:	f003 fc53 	bl	800958e <HAL_TIM_PWM_Init>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005cee:	f7ff fc8f 	bl	8005610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005cfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cfe:	4619      	mov	r1, r3
 8005d00:	4833      	ldr	r0, [pc, #204]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005d02:	f004 fa7f 	bl	800a204 <HAL_TIMEx_MasterConfigSynchronization>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005d0c:	f7ff fc80 	bl	8005610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d10:	2360      	movs	r3, #96	; 0x60
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 8005d14:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d22:	2300      	movs	r3, #0
 8005d24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005d26:	2300      	movs	r3, #0
 8005d28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d32:	2200      	movs	r2, #0
 8005d34:	4619      	mov	r1, r3
 8005d36:	4826      	ldr	r0, [pc, #152]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005d38:	f003 fda4 	bl	8009884 <HAL_TIM_PWM_ConfigChannel>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8005d42:	f7ff fc65 	bl	8005610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d4a:	2204      	movs	r2, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4820      	ldr	r0, [pc, #128]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005d50:	f003 fd98 	bl	8009884 <HAL_TIM_PWM_ConfigChannel>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8005d5a:	f7ff fc59 	bl	8005610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d62:	2208      	movs	r2, #8
 8005d64:	4619      	mov	r1, r3
 8005d66:	481a      	ldr	r0, [pc, #104]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005d68:	f003 fd8c 	bl	8009884 <HAL_TIM_PWM_ConfigChannel>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8005d72:	f7ff fc4d 	bl	8005610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d7a:	220c      	movs	r2, #12
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4814      	ldr	r0, [pc, #80]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005d80:	f003 fd80 	bl	8009884 <HAL_TIM_PWM_ConfigChannel>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8005d8a:	f7ff fc41 	bl	8005610 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005da6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005dac:	1d3b      	adds	r3, r7, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4807      	ldr	r0, [pc, #28]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005db2:	f004 faa3 	bl	800a2fc <HAL_TIMEx_ConfigBreakDeadTime>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8005dbc:	f7ff fc28 	bl	8005610 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005dc0:	4803      	ldr	r0, [pc, #12]	; (8005dd0 <MX_TIM1_Init+0x184>)
 8005dc2:	f000 f891 	bl	8005ee8 <HAL_TIM_MspPostInit>

}
 8005dc6:	bf00      	nop
 8005dc8:	3758      	adds	r7, #88	; 0x58
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	200028d4 	.word	0x200028d4
 8005dd4:	40010000 	.word	0x40010000

08005dd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dde:	f107 0308 	add.w	r3, r7, #8
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	609a      	str	r2, [r3, #8]
 8005dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dec:	463b      	mov	r3, r7
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8005df4:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <MX_TIM2_Init+0x94>)
 8005df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005dfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <MX_TIM2_Init+0x94>)
 8005dfe:	22a7      	movs	r2, #167	; 0xa7
 8005e00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e02:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <MX_TIM2_Init+0x94>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8005e08:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <MX_TIM2_Init+0x94>)
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e0e:	4b17      	ldr	r3, [pc, #92]	; (8005e6c <MX_TIM2_Init+0x94>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e14:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <MX_TIM2_Init+0x94>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e1a:	4814      	ldr	r0, [pc, #80]	; (8005e6c <MX_TIM2_Init+0x94>)
 8005e1c:	f003 fb8c 	bl	8009538 <HAL_TIM_Base_Init>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8005e26:	f7ff fbf3 	bl	8005610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e30:	f107 0308 	add.w	r3, r7, #8
 8005e34:	4619      	mov	r1, r3
 8005e36:	480d      	ldr	r0, [pc, #52]	; (8005e6c <MX_TIM2_Init+0x94>)
 8005e38:	f003 fdea 	bl	8009a10 <HAL_TIM_ConfigClockSource>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8005e42:	f7ff fbe5 	bl	8005610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e46:	2300      	movs	r3, #0
 8005e48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e4e:	463b      	mov	r3, r7
 8005e50:	4619      	mov	r1, r3
 8005e52:	4806      	ldr	r0, [pc, #24]	; (8005e6c <MX_TIM2_Init+0x94>)
 8005e54:	f004 f9d6 	bl	800a204 <HAL_TIMEx_MasterConfigSynchronization>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8005e5e:	f7ff fbd7 	bl	8005610 <Error_Handler>
  }

}
 8005e62:	bf00      	nop
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20002914 	.word	0x20002914

08005e70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a18      	ldr	r2, [pc, #96]	; (8005ee0 <HAL_TIM_Base_MspInit+0x70>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d10e      	bne.n	8005ea0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	4b17      	ldr	r3, [pc, #92]	; (8005ee4 <HAL_TIM_Base_MspInit+0x74>)
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <HAL_TIM_Base_MspInit+0x74>)
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	6453      	str	r3, [r2, #68]	; 0x44
 8005e92:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <HAL_TIM_Base_MspInit+0x74>)
 8005e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005e9e:	e01a      	b.n	8005ed6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea8:	d115      	bne.n	8005ed6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <HAL_TIM_Base_MspInit+0x74>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	4a0c      	ldr	r2, [pc, #48]	; (8005ee4 <HAL_TIM_Base_MspInit+0x74>)
 8005eb4:	f043 0301 	orr.w	r3, r3, #1
 8005eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eba:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <HAL_TIM_Base_MspInit+0x74>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	60bb      	str	r3, [r7, #8]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	2100      	movs	r1, #0
 8005eca:	201c      	movs	r0, #28
 8005ecc:	f001 fa01 	bl	80072d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005ed0:	201c      	movs	r0, #28
 8005ed2:	f001 fa1a 	bl	800730a <HAL_NVIC_EnableIRQ>
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40023800 	.word	0x40023800

08005ee8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef0:	f107 030c 	add.w	r3, r7, #12
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	609a      	str	r2, [r3, #8]
 8005efc:	60da      	str	r2, [r3, #12]
 8005efe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a12      	ldr	r2, [pc, #72]	; (8005f50 <HAL_TIM_MspPostInit+0x68>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d11e      	bne.n	8005f48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <HAL_TIM_MspPostInit+0x6c>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	4a10      	ldr	r2, [pc, #64]	; (8005f54 <HAL_TIM_MspPostInit+0x6c>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	6313      	str	r3, [r2, #48]	; 0x30
 8005f1a:	4b0e      	ldr	r3, [pc, #56]	; (8005f54 <HAL_TIM_MspPostInit+0x6c>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	60bb      	str	r3, [r7, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005f26:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005f2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f3c:	f107 030c 	add.w	r3, r7, #12
 8005f40:	4619      	mov	r1, r3
 8005f42:	4805      	ldr	r0, [pc, #20]	; (8005f58 <HAL_TIM_MspPostInit+0x70>)
 8005f44:	f001 fd8c 	bl	8007a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005f48:	bf00      	nop
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40023800 	.word	0x40023800
 8005f58:	40020000 	.word	0x40020000

08005f5c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005f60:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <MX_USART2_UART_Init+0x4c>)
 8005f62:	4a12      	ldr	r2, [pc, #72]	; (8005fac <MX_USART2_UART_Init+0x50>)
 8005f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8005f66:	4b10      	ldr	r3, [pc, #64]	; (8005fa8 <MX_USART2_UART_Init+0x4c>)
 8005f68:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f6e:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <MX_USART2_UART_Init+0x4c>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f74:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <MX_USART2_UART_Init+0x4c>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <MX_USART2_UART_Init+0x4c>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <MX_USART2_UART_Init+0x4c>)
 8005f82:	220c      	movs	r2, #12
 8005f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f86:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <MX_USART2_UART_Init+0x4c>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <MX_USART2_UART_Init+0x4c>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f92:	4805      	ldr	r0, [pc, #20]	; (8005fa8 <MX_USART2_UART_Init+0x4c>)
 8005f94:	f004 fa18 	bl	800a3c8 <HAL_UART_Init>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005f9e:	f7ff fb37 	bl	8005610 <Error_Handler>
  }

}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20002bb4 	.word	0x20002bb4
 8005fac:	40004400 	.word	0x40004400

08005fb0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005fb4:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <MX_USART3_UART_Init+0x4c>)
 8005fb6:	4a12      	ldr	r2, [pc, #72]	; (8006000 <MX_USART3_UART_Init+0x50>)
 8005fb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005fba:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <MX_USART3_UART_Init+0x4c>)
 8005fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005fc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005fc2:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <MX_USART3_UART_Init+0x4c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <MX_USART3_UART_Init+0x4c>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <MX_USART3_UART_Init+0x4c>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005fd4:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <MX_USART3_UART_Init+0x4c>)
 8005fd6:	220c      	movs	r2, #12
 8005fd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fda:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <MX_USART3_UART_Init+0x4c>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fe0:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <MX_USART3_UART_Init+0x4c>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005fe6:	4805      	ldr	r0, [pc, #20]	; (8005ffc <MX_USART3_UART_Init+0x4c>)
 8005fe8:	f004 f9ee 	bl	800a3c8 <HAL_UART_Init>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005ff2:	f7ff fb0d 	bl	8005610 <Error_Handler>
  }

}
 8005ff6:	bf00      	nop
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20002a74 	.word	0x20002a74
 8006000:	40004800 	.word	0x40004800

08006004 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8006008:	4b11      	ldr	r3, [pc, #68]	; (8006050 <MX_USART6_UART_Init+0x4c>)
 800600a:	4a12      	ldr	r2, [pc, #72]	; (8006054 <MX_USART6_UART_Init+0x50>)
 800600c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <MX_USART6_UART_Init+0x4c>)
 8006010:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8006014:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006016:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <MX_USART6_UART_Init+0x4c>)
 8006018:	2200      	movs	r2, #0
 800601a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <MX_USART6_UART_Init+0x4c>)
 800601e:	2200      	movs	r2, #0
 8006020:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006022:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <MX_USART6_UART_Init+0x4c>)
 8006024:	2200      	movs	r2, #0
 8006026:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006028:	4b09      	ldr	r3, [pc, #36]	; (8006050 <MX_USART6_UART_Init+0x4c>)
 800602a:	220c      	movs	r2, #12
 800602c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800602e:	4b08      	ldr	r3, [pc, #32]	; (8006050 <MX_USART6_UART_Init+0x4c>)
 8006030:	2200      	movs	r2, #0
 8006032:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006034:	4b06      	ldr	r3, [pc, #24]	; (8006050 <MX_USART6_UART_Init+0x4c>)
 8006036:	2200      	movs	r2, #0
 8006038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800603a:	4805      	ldr	r0, [pc, #20]	; (8006050 <MX_USART6_UART_Init+0x4c>)
 800603c:	f004 f9c4 	bl	800a3c8 <HAL_UART_Init>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006046:	f7ff fae3 	bl	8005610 <Error_Handler>
  }

}
 800604a:	bf00      	nop
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20002b74 	.word	0x20002b74
 8006054:	40011400 	.word	0x40011400

08006058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08e      	sub	sp, #56	; 0x38
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	60da      	str	r2, [r3, #12]
 800606e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a7f      	ldr	r2, [pc, #508]	; (8006274 <HAL_UART_MspInit+0x21c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	f040 8091 	bne.w	800619e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800607c:	2300      	movs	r3, #0
 800607e:	623b      	str	r3, [r7, #32]
 8006080:	4b7d      	ldr	r3, [pc, #500]	; (8006278 <HAL_UART_MspInit+0x220>)
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	4a7c      	ldr	r2, [pc, #496]	; (8006278 <HAL_UART_MspInit+0x220>)
 8006086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800608a:	6413      	str	r3, [r2, #64]	; 0x40
 800608c:	4b7a      	ldr	r3, [pc, #488]	; (8006278 <HAL_UART_MspInit+0x220>)
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006094:	623b      	str	r3, [r7, #32]
 8006096:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006098:	2300      	movs	r3, #0
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	4b76      	ldr	r3, [pc, #472]	; (8006278 <HAL_UART_MspInit+0x220>)
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	4a75      	ldr	r2, [pc, #468]	; (8006278 <HAL_UART_MspInit+0x220>)
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	6313      	str	r3, [r2, #48]	; 0x30
 80060a8:	4b73      	ldr	r3, [pc, #460]	; (8006278 <HAL_UART_MspInit+0x220>)
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80060b4:	230c      	movs	r3, #12
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b8:	2302      	movs	r3, #2
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060bc:	2300      	movs	r3, #0
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060c0:	2303      	movs	r3, #3
 80060c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060c4:	2307      	movs	r3, #7
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060cc:	4619      	mov	r1, r3
 80060ce:	486b      	ldr	r0, [pc, #428]	; (800627c <HAL_UART_MspInit+0x224>)
 80060d0:	f001 fcc6 	bl	8007a60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80060d4:	4b6a      	ldr	r3, [pc, #424]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060d6:	4a6b      	ldr	r2, [pc, #428]	; (8006284 <HAL_UART_MspInit+0x22c>)
 80060d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80060da:	4b69      	ldr	r3, [pc, #420]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060e2:	4b67      	ldr	r3, [pc, #412]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060e8:	4b65      	ldr	r3, [pc, #404]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060ee:	4b64      	ldr	r3, [pc, #400]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060f6:	4b62      	ldr	r3, [pc, #392]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060fc:	4b60      	ldr	r3, [pc, #384]	; (8006280 <HAL_UART_MspInit+0x228>)
 80060fe:	2200      	movs	r2, #0
 8006100:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006102:	4b5f      	ldr	r3, [pc, #380]	; (8006280 <HAL_UART_MspInit+0x228>)
 8006104:	2200      	movs	r2, #0
 8006106:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006108:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <HAL_UART_MspInit+0x228>)
 800610a:	2200      	movs	r2, #0
 800610c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800610e:	4b5c      	ldr	r3, [pc, #368]	; (8006280 <HAL_UART_MspInit+0x228>)
 8006110:	2200      	movs	r2, #0
 8006112:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006114:	485a      	ldr	r0, [pc, #360]	; (8006280 <HAL_UART_MspInit+0x228>)
 8006116:	f001 f913 	bl	8007340 <HAL_DMA_Init>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006120:	f7ff fa76 	bl	8005610 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a56      	ldr	r2, [pc, #344]	; (8006280 <HAL_UART_MspInit+0x228>)
 8006128:	635a      	str	r2, [r3, #52]	; 0x34
 800612a:	4a55      	ldr	r2, [pc, #340]	; (8006280 <HAL_UART_MspInit+0x228>)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006130:	4b55      	ldr	r3, [pc, #340]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006132:	4a56      	ldr	r2, [pc, #344]	; (800628c <HAL_UART_MspInit+0x234>)
 8006134:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006136:	4b54      	ldr	r3, [pc, #336]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006138:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800613c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800613e:	4b52      	ldr	r3, [pc, #328]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006140:	2240      	movs	r2, #64	; 0x40
 8006142:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006144:	4b50      	ldr	r3, [pc, #320]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006146:	2200      	movs	r2, #0
 8006148:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800614a:	4b4f      	ldr	r3, [pc, #316]	; (8006288 <HAL_UART_MspInit+0x230>)
 800614c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006150:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006152:	4b4d      	ldr	r3, [pc, #308]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006154:	2200      	movs	r2, #0
 8006156:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006158:	4b4b      	ldr	r3, [pc, #300]	; (8006288 <HAL_UART_MspInit+0x230>)
 800615a:	2200      	movs	r2, #0
 800615c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800615e:	4b4a      	ldr	r3, [pc, #296]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006160:	2200      	movs	r2, #0
 8006162:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006164:	4b48      	ldr	r3, [pc, #288]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006166:	2200      	movs	r2, #0
 8006168:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800616a:	4b47      	ldr	r3, [pc, #284]	; (8006288 <HAL_UART_MspInit+0x230>)
 800616c:	2200      	movs	r2, #0
 800616e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006170:	4845      	ldr	r0, [pc, #276]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006172:	f001 f8e5 	bl	8007340 <HAL_DMA_Init>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800617c:	f7ff fa48 	bl	8005610 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a41      	ldr	r2, [pc, #260]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006184:	631a      	str	r2, [r3, #48]	; 0x30
 8006186:	4a40      	ldr	r2, [pc, #256]	; (8006288 <HAL_UART_MspInit+0x230>)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800618c:	2200      	movs	r2, #0
 800618e:	2100      	movs	r1, #0
 8006190:	2026      	movs	r0, #38	; 0x26
 8006192:	f001 f89e 	bl	80072d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006196:	2026      	movs	r0, #38	; 0x26
 8006198:	f001 f8b7 	bl	800730a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800619c:	e10e      	b.n	80063bc <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART3)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a3b      	ldr	r2, [pc, #236]	; (8006290 <HAL_UART_MspInit+0x238>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d17b      	bne.n	80062a0 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	4b32      	ldr	r3, [pc, #200]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	4a31      	ldr	r2, [pc, #196]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061b6:	6413      	str	r3, [r2, #64]	; 0x40
 80061b8:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	4b2b      	ldr	r3, [pc, #172]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	4a2a      	ldr	r2, [pc, #168]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061ce:	f043 0302 	orr.w	r3, r3, #2
 80061d2:	6313      	str	r3, [r2, #48]	; 0x30
 80061d4:	4b28      	ldr	r3, [pc, #160]	; (8006278 <HAL_UART_MspInit+0x220>)
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80061e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e6:	2302      	movs	r3, #2
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061ee:	2303      	movs	r3, #3
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061f2:	2307      	movs	r3, #7
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061fa:	4619      	mov	r1, r3
 80061fc:	4825      	ldr	r0, [pc, #148]	; (8006294 <HAL_UART_MspInit+0x23c>)
 80061fe:	f001 fc2f 	bl	8007a60 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006202:	4b25      	ldr	r3, [pc, #148]	; (8006298 <HAL_UART_MspInit+0x240>)
 8006204:	4a25      	ldr	r2, [pc, #148]	; (800629c <HAL_UART_MspInit+0x244>)
 8006206:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006208:	4b23      	ldr	r3, [pc, #140]	; (8006298 <HAL_UART_MspInit+0x240>)
 800620a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800620e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006210:	4b21      	ldr	r3, [pc, #132]	; (8006298 <HAL_UART_MspInit+0x240>)
 8006212:	2200      	movs	r2, #0
 8006214:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006216:	4b20      	ldr	r3, [pc, #128]	; (8006298 <HAL_UART_MspInit+0x240>)
 8006218:	2200      	movs	r2, #0
 800621a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800621c:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <HAL_UART_MspInit+0x240>)
 800621e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006222:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006224:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <HAL_UART_MspInit+0x240>)
 8006226:	2200      	movs	r2, #0
 8006228:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800622a:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <HAL_UART_MspInit+0x240>)
 800622c:	2200      	movs	r2, #0
 800622e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006230:	4b19      	ldr	r3, [pc, #100]	; (8006298 <HAL_UART_MspInit+0x240>)
 8006232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006236:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006238:	4b17      	ldr	r3, [pc, #92]	; (8006298 <HAL_UART_MspInit+0x240>)
 800623a:	2200      	movs	r2, #0
 800623c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800623e:	4b16      	ldr	r3, [pc, #88]	; (8006298 <HAL_UART_MspInit+0x240>)
 8006240:	2200      	movs	r2, #0
 8006242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006244:	4814      	ldr	r0, [pc, #80]	; (8006298 <HAL_UART_MspInit+0x240>)
 8006246:	f001 f87b 	bl	8007340 <HAL_DMA_Init>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8006250:	f7ff f9de 	bl	8005610 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a10      	ldr	r2, [pc, #64]	; (8006298 <HAL_UART_MspInit+0x240>)
 8006258:	635a      	str	r2, [r3, #52]	; 0x34
 800625a:	4a0f      	ldr	r2, [pc, #60]	; (8006298 <HAL_UART_MspInit+0x240>)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006260:	2200      	movs	r2, #0
 8006262:	2100      	movs	r1, #0
 8006264:	2027      	movs	r0, #39	; 0x27
 8006266:	f001 f834 	bl	80072d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800626a:	2027      	movs	r0, #39	; 0x27
 800626c:	f001 f84d 	bl	800730a <HAL_NVIC_EnableIRQ>
}
 8006270:	e0a4      	b.n	80063bc <HAL_UART_MspInit+0x364>
 8006272:	bf00      	nop
 8006274:	40004400 	.word	0x40004400
 8006278:	40023800 	.word	0x40023800
 800627c:	40020000 	.word	0x40020000
 8006280:	20002954 	.word	0x20002954
 8006284:	40026088 	.word	0x40026088
 8006288:	20002b14 	.word	0x20002b14
 800628c:	400260a0 	.word	0x400260a0
 8006290:	40004800 	.word	0x40004800
 8006294:	40020400 	.word	0x40020400
 8006298:	20002a14 	.word	0x20002a14
 800629c:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a47      	ldr	r2, [pc, #284]	; (80063c4 <HAL_UART_MspInit+0x36c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	f040 8088 	bne.w	80063bc <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	4b45      	ldr	r3, [pc, #276]	; (80063c8 <HAL_UART_MspInit+0x370>)
 80062b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b4:	4a44      	ldr	r2, [pc, #272]	; (80063c8 <HAL_UART_MspInit+0x370>)
 80062b6:	f043 0320 	orr.w	r3, r3, #32
 80062ba:	6453      	str	r3, [r2, #68]	; 0x44
 80062bc:	4b42      	ldr	r3, [pc, #264]	; (80063c8 <HAL_UART_MspInit+0x370>)
 80062be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	4b3e      	ldr	r3, [pc, #248]	; (80063c8 <HAL_UART_MspInit+0x370>)
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	4a3d      	ldr	r2, [pc, #244]	; (80063c8 <HAL_UART_MspInit+0x370>)
 80062d2:	f043 0304 	orr.w	r3, r3, #4
 80062d6:	6313      	str	r3, [r2, #48]	; 0x30
 80062d8:	4b3b      	ldr	r3, [pc, #236]	; (80063c8 <HAL_UART_MspInit+0x370>)
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80062e4:	23c0      	movs	r3, #192	; 0xc0
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e8:	2302      	movs	r3, #2
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062f0:	2303      	movs	r3, #3
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80062f4:	2308      	movs	r3, #8
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062fc:	4619      	mov	r1, r3
 80062fe:	4833      	ldr	r0, [pc, #204]	; (80063cc <HAL_UART_MspInit+0x374>)
 8006300:	f001 fbae 	bl	8007a60 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006304:	4b32      	ldr	r3, [pc, #200]	; (80063d0 <HAL_UART_MspInit+0x378>)
 8006306:	4a33      	ldr	r2, [pc, #204]	; (80063d4 <HAL_UART_MspInit+0x37c>)
 8006308:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800630a:	4b31      	ldr	r3, [pc, #196]	; (80063d0 <HAL_UART_MspInit+0x378>)
 800630c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006310:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006312:	4b2f      	ldr	r3, [pc, #188]	; (80063d0 <HAL_UART_MspInit+0x378>)
 8006314:	2240      	movs	r2, #64	; 0x40
 8006316:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006318:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <HAL_UART_MspInit+0x378>)
 800631a:	2200      	movs	r2, #0
 800631c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800631e:	4b2c      	ldr	r3, [pc, #176]	; (80063d0 <HAL_UART_MspInit+0x378>)
 8006320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006324:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006326:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <HAL_UART_MspInit+0x378>)
 8006328:	2200      	movs	r2, #0
 800632a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800632c:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <HAL_UART_MspInit+0x378>)
 800632e:	2200      	movs	r2, #0
 8006330:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006332:	4b27      	ldr	r3, [pc, #156]	; (80063d0 <HAL_UART_MspInit+0x378>)
 8006334:	2200      	movs	r2, #0
 8006336:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006338:	4b25      	ldr	r3, [pc, #148]	; (80063d0 <HAL_UART_MspInit+0x378>)
 800633a:	2200      	movs	r2, #0
 800633c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800633e:	4b24      	ldr	r3, [pc, #144]	; (80063d0 <HAL_UART_MspInit+0x378>)
 8006340:	2200      	movs	r2, #0
 8006342:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006344:	4822      	ldr	r0, [pc, #136]	; (80063d0 <HAL_UART_MspInit+0x378>)
 8006346:	f000 fffb 	bl	8007340 <HAL_DMA_Init>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8006350:	f7ff f95e 	bl	8005610 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a1e      	ldr	r2, [pc, #120]	; (80063d0 <HAL_UART_MspInit+0x378>)
 8006358:	631a      	str	r2, [r3, #48]	; 0x30
 800635a:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <HAL_UART_MspInit+0x378>)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006360:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <HAL_UART_MspInit+0x380>)
 8006362:	4a1e      	ldr	r2, [pc, #120]	; (80063dc <HAL_UART_MspInit+0x384>)
 8006364:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006366:	4b1c      	ldr	r3, [pc, #112]	; (80063d8 <HAL_UART_MspInit+0x380>)
 8006368:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800636c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800636e:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <HAL_UART_MspInit+0x380>)
 8006370:	2200      	movs	r2, #0
 8006372:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006374:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <HAL_UART_MspInit+0x380>)
 8006376:	2200      	movs	r2, #0
 8006378:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800637a:	4b17      	ldr	r3, [pc, #92]	; (80063d8 <HAL_UART_MspInit+0x380>)
 800637c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006380:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006382:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <HAL_UART_MspInit+0x380>)
 8006384:	2200      	movs	r2, #0
 8006386:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006388:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <HAL_UART_MspInit+0x380>)
 800638a:	2200      	movs	r2, #0
 800638c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800638e:	4b12      	ldr	r3, [pc, #72]	; (80063d8 <HAL_UART_MspInit+0x380>)
 8006390:	2200      	movs	r2, #0
 8006392:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006394:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <HAL_UART_MspInit+0x380>)
 8006396:	2200      	movs	r2, #0
 8006398:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <HAL_UART_MspInit+0x380>)
 800639c:	2200      	movs	r2, #0
 800639e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80063a0:	480d      	ldr	r0, [pc, #52]	; (80063d8 <HAL_UART_MspInit+0x380>)
 80063a2:	f000 ffcd 	bl	8007340 <HAL_DMA_Init>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <HAL_UART_MspInit+0x358>
      Error_Handler();
 80063ac:	f7ff f930 	bl	8005610 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <HAL_UART_MspInit+0x380>)
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34
 80063b6:	4a08      	ldr	r2, [pc, #32]	; (80063d8 <HAL_UART_MspInit+0x380>)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80063bc:	bf00      	nop
 80063be:	3738      	adds	r7, #56	; 0x38
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40011400 	.word	0x40011400
 80063c8:	40023800 	.word	0x40023800
 80063cc:	40020800 	.word	0x40020800
 80063d0:	20002ab4 	.word	0x20002ab4
 80063d4:	400264a0 	.word	0x400264a0
 80063d8:	200029b4 	.word	0x200029b4
 80063dc:	40026428 	.word	0x40026428

080063e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80063e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006418 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80063e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80063e6:	e003      	b.n	80063f0 <LoopCopyDataInit>

080063e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80063ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80063ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80063ee:	3104      	adds	r1, #4

080063f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80063f0:	480b      	ldr	r0, [pc, #44]	; (8006420 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80063f2:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80063f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80063f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80063f8:	d3f6      	bcc.n	80063e8 <CopyDataInit>
  ldr  r2, =_sbss
 80063fa:	4a0b      	ldr	r2, [pc, #44]	; (8006428 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80063fc:	e002      	b.n	8006404 <LoopFillZerobss>

080063fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80063fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006400:	f842 3b04 	str.w	r3, [r2], #4

08006404 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006404:	4b09      	ldr	r3, [pc, #36]	; (800642c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006406:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006408:	d3f9      	bcc.n	80063fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800640a:	f7ff fc09 	bl	8005c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800640e:	f005 fd2f 	bl	800be70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006412:	f7fe ffe7 	bl	80053e4 <main>
  bx  lr    
 8006416:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006418:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800641c:	0800edec 	.word	0x0800edec
  ldr  r0, =_sdata
 8006420:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006424:	200016e8 	.word	0x200016e8
  ldr  r2, =_sbss
 8006428:	200016e8 	.word	0x200016e8
  ldr  r3, = _ebss
 800642c:	20002bfc 	.word	0x20002bfc

08006430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006430:	e7fe      	b.n	8006430 <ADC_IRQHandler>

08006432 <get_nb_bytes_available>:

static telemetry_t * telem ;	//We dont use multiples telemetry anyways

//Private function to know the number of bytes available
uint16_t get_nb_bytes_available(telemetry_t * telem);
uint16_t get_nb_bytes_available(telemetry_t * telem){
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
	uint16_t nb = 0 ;
 800643a:	2300      	movs	r3, #0
 800643c:	81fb      	strh	r3, [r7, #14]
	if(telem->index_write_rx > telem->index_read_rx){
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800644a:	429a      	cmp	r2, r3
 800644c:	d907      	bls.n	800645e <get_nb_bytes_available+0x2c>
		nb = telem->index_write_rx - telem->index_read_rx ;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 800645e:	89fb      	ldrh	r3, [r7, #14]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <TELEMETRY_Init>:

void TELEMETRY_Init(telemetry_t * telem_, UART_HandleTypeDef * huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
	telem = telem_ ;
 8006476:	4a15      	ldr	r2, [pc, #84]	; (80064cc <TELEMETRY_Init+0x60>)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6013      	str	r3, [r2, #0]
	telem->huart = huart ;
 800647c:	4b13      	ldr	r3, [pc, #76]	; (80064cc <TELEMETRY_Init+0x60>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	601a      	str	r2, [r3, #0]

	//On envoit un premier message qui sert sutout à éviter que les premiers octet utiles soient perdu
	static uint8_t hey_msg[] = "Hey it s me Theo...\n";
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 8006484:	4b11      	ldr	r3, [pc, #68]	; (80064cc <TELEMETRY_Init+0x60>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2214      	movs	r2, #20
 800648c:	4910      	ldr	r1, [pc, #64]	; (80064d0 <TELEMETRY_Init+0x64>)
 800648e:	4618      	mov	r0, r3
 8006490:	f004 f926 	bl	800a6e0 <HAL_UART_Transmit_DMA>

	//Activation de l'it "idle" qui préviendra de la fin de la récéption d'un message
	__HAL_UART_ENABLE_IT(telem->huart, UART_IT_IDLE);
 8006494:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <TELEMETRY_Init+0x60>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <TELEMETRY_Init+0x60>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0210 	orr.w	r2, r2, #16
 80064aa:	60da      	str	r2, [r3, #12]
	//On lance la récéption en DMA
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 80064ac:	4b07      	ldr	r3, [pc, #28]	; (80064cc <TELEMETRY_Init+0x60>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	4b06      	ldr	r3, [pc, #24]	; (80064cc <TELEMETRY_Init+0x60>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80064ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064be:	4619      	mov	r1, r3
 80064c0:	f004 f97a 	bl	800a7b8 <HAL_UART_Receive_DMA>
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	200019b8 	.word	0x200019b8
 80064d0:	200014f4 	.word	0x200014f4

080064d4 <TELEMETRY_Process>:


void TELEMETRY_Process(uint32_t time_us){
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]

	//	--------------------	Transmission	------------------------
	//Ce qui suit vide le buffer en transmettant on contenu en respectant la limite
	//de vitesse maximum
	if(telem->index_write_tx != telem->index_read_tx && time_us > telem->next_send)
 80064dc:	4b6f      	ldr	r3, [pc, #444]	; (800669c <TELEMETRY_Process+0x1c8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 80064e4:	4b6d      	ldr	r3, [pc, #436]	; (800669c <TELEMETRY_Process+0x1c8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d051      	beq.n	8006594 <TELEMETRY_Process+0xc0>
 80064f0:	4b6a      	ldr	r3, [pc, #424]	; (800669c <TELEMETRY_Process+0x1c8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d94a      	bls.n	8006594 <TELEMETRY_Process+0xc0>
	{
		telem->next_send = time_us + telem->len_portion_tx[telem->index_read_tx] * PERIODE_1_OCTET ;
 80064fe:	4b67      	ldr	r3, [pc, #412]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a66      	ldr	r2, [pc, #408]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 800650a:	4413      	add	r3, r2
 800650c:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 8006510:	461a      	mov	r2, r3
 8006512:	f240 134d 	movw	r3, #333	; 0x14d
 8006516:	fb03 f302 	mul.w	r3, r3, r2
 800651a:	4619      	mov	r1, r3
 800651c:	4b5f      	ldr	r3, [pc, #380]	; (800669c <TELEMETRY_Process+0x1c8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	440a      	add	r2, r1
 8006524:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

		//On transmet les données
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 8006528:	4b5c      	ldr	r3, [pc, #368]	; (800669c <TELEMETRY_Process+0x1c8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	4b5b      	ldr	r3, [pc, #364]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b5a      	ldr	r3, [pc, #360]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 800653a:	4619      	mov	r1, r3
 800653c:	460b      	mov	r3, r1
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	1d59      	adds	r1, r3, #5
 8006548:	4b54      	ldr	r3, [pc, #336]	; (800669c <TELEMETRY_Process+0x1c8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a53      	ldr	r2, [pc, #332]	; (800669c <TELEMETRY_Process+0x1c8>)
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 8006554:	4413      	add	r3, r2
 8006556:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	f004 f8bf 	bl	800a6e0 <HAL_UART_Transmit_DMA>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
 8006562:	4b4e      	ldr	r3, [pc, #312]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f8b3 2426 	ldrh.w	r2, [r3, #1062]	; 0x426
 800656a:	3201      	adds	r2, #1
 800656c:	b292      	uxth	r2, r2
 800656e:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 8006572:	4b4a      	ldr	r3, [pc, #296]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 800657a:	4a48      	ldr	r2, [pc, #288]	; (800669c <TELEMETRY_Process+0x1c8>)
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	4948      	ldr	r1, [pc, #288]	; (80066a0 <TELEMETRY_Process+0x1cc>)
 8006580:	fba1 0103 	umull	r0, r1, r1, r3
 8006584:	0909      	lsrs	r1, r1, #4
 8006586:	2032      	movs	r0, #50	; 0x32
 8006588:	fb00 f101 	mul.w	r1, r0, r1
 800658c:	1a5b      	subs	r3, r3, r1
 800658e:	b29b      	uxth	r3, r3
 8006590:	f8a2 3426 	strh.w	r3, [r2, #1062]	; 0x426
	}

	//	---------------------	Reception	-------------------------------

	uint16_t bytes_avaibles = get_nb_bytes_available(telem);
 8006594:	4b41      	ldr	r3, [pc, #260]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff ff4a 	bl	8006432 <get_nb_bytes_available>
 800659e:	4603      	mov	r3, r0
 80065a0:	823b      	strh	r3, [r7, #16]
	if(bytes_avaibles > 2)	//Minimum trois octets pour faire quoi que ce soit
 80065a2:	8a3b      	ldrh	r3, [r7, #16]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d976      	bls.n	8006696 <TELEMETRY_Process+0x1c2>
	{
		uint16_t bytes_used = 1 ;
 80065a8:	2301      	movs	r3, #1
 80065aa:	82fb      	strh	r3, [r7, #22]
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 80065ac:	4b3b      	ldr	r3, [pc, #236]	; (800669c <TELEMETRY_Process+0x1c8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a3a      	ldr	r2, [pc, #232]	; (800669c <TELEMETRY_Process+0x1c8>)
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	f8b2 262a 	ldrh.w	r2, [r2, #1578]	; 0x62a
 80065b8:	4413      	add	r3, r2
 80065ba:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80065be:	2b24      	cmp	r3, #36	; 0x24
 80065c0:	d15c      	bne.n	800667c <TELEMETRY_Process+0x1a8>
		{
			//Number of byte recquiered including the '$' and the checksum to use the current frame we are on
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[telem->index_read_rx+1]);
 80065c2:	4b36      	ldr	r3, [pc, #216]	; (800669c <TELEMETRY_Process+0x1c8>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b35      	ldr	r3, [pc, #212]	; (800669c <TELEMETRY_Process+0x1c8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80065ce:	3301      	adds	r3, #1
 80065d0:	4413      	add	r3, r2
 80065d2:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fb f8fa 	bl	80017d0 <DATA_LOGGER_Get_Data>
 80065dc:	60f8      	str	r0, [r7, #12]
			uint16_t bytes_recquired = (current_data->format / 20) + 3 ;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	7a5b      	ldrb	r3, [r3, #9]
 80065e2:	4a30      	ldr	r2, [pc, #192]	; (80066a4 <TELEMETRY_Process+0x1d0>)
 80065e4:	fba2 2303 	umull	r2, r3, r2, r3
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3303      	adds	r3, #3
 80065f0:	817b      	strh	r3, [r7, #10]

			if(bytes_recquired > bytes_avaibles)
 80065f2:	897a      	ldrh	r2, [r7, #10]
 80065f4:	8a3b      	ldrh	r3, [r7, #16]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d84c      	bhi.n	8006694 <TELEMETRY_Process+0x1c0>
				return ;	//We just wait for then next call with hopefully more data available
			bytes_used = bytes_recquired;
 80065fa:	897b      	ldrh	r3, [r7, #10]
 80065fc:	82fb      	strh	r3, [r7, #22]

			//Len is id(1 byte) + data(x bytes)
			uint16_t len_frame = bytes_recquired - 2 ;
 80065fe:	897b      	ldrh	r3, [r7, #10]
 8006600:	3b02      	subs	r3, #2
 8006602:	813b      	strh	r3, [r7, #8]

			//Checksum
			uint16_t checksum = 0 ;
 8006604:	2300      	movs	r3, #0
 8006606:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 8006608:	2300      	movs	r3, #0
 800660a:	827b      	strh	r3, [r7, #18]
 800660c:	e012      	b.n	8006634 <TELEMETRY_Process+0x160>
			{
				checksum += telem->buffer_rx[telem->index_read_rx+1+b];
 800660e:	4b23      	ldr	r3, [pc, #140]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b22      	ldr	r3, [pc, #136]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800661a:	1c59      	adds	r1, r3, #1
 800661c:	8a7b      	ldrh	r3, [r7, #18]
 800661e:	440b      	add	r3, r1
 8006620:	4413      	add	r3, r2
 8006622:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8006626:	b29a      	uxth	r2, r3
 8006628:	8abb      	ldrh	r3, [r7, #20]
 800662a:	4413      	add	r3, r2
 800662c:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 800662e:	8a7b      	ldrh	r3, [r7, #18]
 8006630:	3301      	adds	r3, #1
 8006632:	827b      	strh	r3, [r7, #18]
 8006634:	8a7a      	ldrh	r2, [r7, #18]
 8006636:	893b      	ldrh	r3, [r7, #8]
 8006638:	429a      	cmp	r2, r3
 800663a:	d3e8      	bcc.n	800660e <TELEMETRY_Process+0x13a>
			}
			if(checksum % 256 == telem->buffer_rx[telem->index_read_rx + bytes_recquired-1])
 800663c:	8abb      	ldrh	r3, [r7, #20]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	b29a      	uxth	r2, r3
 8006642:	4b16      	ldr	r3, [pc, #88]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006644:	6819      	ldr	r1, [r3, #0]
 8006646:	4b15      	ldr	r3, [pc, #84]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800664e:	4618      	mov	r0, r3
 8006650:	897b      	ldrh	r3, [r7, #10]
 8006652:	4403      	add	r3, r0
 8006654:	3b01      	subs	r3, #1
 8006656:	440b      	add	r3, r1
 8006658:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800665c:	b29b      	uxth	r3, r3
 800665e:	429a      	cmp	r2, r3
 8006660:	d10c      	bne.n	800667c <TELEMETRY_Process+0x1a8>
			{
				DATA_LOGGER_Reception(&telem->buffer_rx[telem->index_read_rx+1]);
 8006662:	4b0e      	ldr	r3, [pc, #56]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4b0d      	ldr	r3, [pc, #52]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800666e:	3301      	adds	r3, #1
 8006670:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8006674:	4413      	add	r3, r2
 8006676:	4618      	mov	r0, r3
 8006678:	f7fa fef8 	bl	800146c <DATA_LOGGER_Reception>
			}
		}
		telem->index_read_rx += bytes_used ;
 800667c:	4b07      	ldr	r3, [pc, #28]	; (800669c <TELEMETRY_Process+0x1c8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f8b3 162a 	ldrh.w	r1, [r3, #1578]	; 0x62a
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <TELEMETRY_Process+0x1c8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	8afa      	ldrh	r2, [r7, #22]
 800668a:	440a      	add	r2, r1
 800668c:	b292      	uxth	r2, r2
 800668e:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
 8006692:	e000      	b.n	8006696 <TELEMETRY_Process+0x1c2>
				return ;	//We just wait for then next call with hopefully more data available
 8006694:	bf00      	nop
	}

}
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	200019b8 	.word	0x200019b8
 80066a0:	51eb851f 	.word	0x51eb851f
 80066a4:	cccccccd 	.word	0xcccccccd

080066a8 <TELEMETRY_Send_Data>:


void TELEMETRY_Send_Data(uint8_t * data, uint8_t len){
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	; 0x28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
	uint8_t to_send[SIZE_PORTION_BUFFER];
	uint32_t checksum = 0 ;
 80066b4:	2300      	movs	r3, #0
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24


	to_send[0] = '$';
 80066b8:	2324      	movs	r3, #36	; 0x24
 80066ba:	733b      	strb	r3, [r7, #12]

	for(uint8_t b = 0; b < len; b++){
 80066bc:	2300      	movs	r3, #0
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c2:	e01d      	b.n	8006700 <TELEMETRY_Send_Data+0x58>
		to_send[1 + b] = data[b];
 80066c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	441a      	add	r2, r3
 80066cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066d0:	3301      	adds	r3, #1
 80066d2:	7812      	ldrb	r2, [r2, #0]
 80066d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80066d8:	440b      	add	r3, r1
 80066da:	f803 2c1c 	strb.w	r2, [r3, #-28]
		checksum += (uint32_t)to_send[1 + b];
 80066de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066e2:	3301      	adds	r3, #1
 80066e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80066e8:	4413      	add	r3, r2
 80066ea:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	4413      	add	r3, r2
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint8_t b = 0; b < len; b++){
 80066f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066fa:	3301      	adds	r3, #1
 80066fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006700:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	429a      	cmp	r2, r3
 8006708:	d3dc      	bcc.n	80066c4 <TELEMETRY_Send_Data+0x1c>
	}

	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	3301      	adds	r3, #1
 800670e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006716:	440b      	add	r3, r1
 8006718:	f803 2c1c 	strb.w	r2, [r3, #-28]
	TELEMETRY_Send_Data_Raw(to_send, len+2);
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	3302      	adds	r3, #2
 8006720:	b2da      	uxtb	r2, r3
 8006722:	f107 030c 	add.w	r3, r7, #12
 8006726:	4611      	mov	r1, r2
 8006728:	4618      	mov	r0, r3
 800672a:	f000 f805 	bl	8006738 <TELEMETRY_Send_Data_Raw>
}
 800672e:	bf00      	nop
 8006730:	3728      	adds	r7, #40	; 0x28
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <TELEMETRY_Send_Data_Raw>:

void TELEMETRY_Send_Data_Raw(uint8_t * data, uint8_t len){
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]

	//Copie du tableau dans le buffer
	for(uint8_t c = 0; c < len; c++)
 8006744:	2300      	movs	r3, #0
 8006746:	73fb      	strb	r3, [r7, #15]
 8006748:	e017      	b.n	800677a <TELEMETRY_Send_Data_Raw+0x42>
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	18d1      	adds	r1, r2, r3
 8006750:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	4b1f      	ldr	r3, [pc, #124]	; (80067d4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 800675c:	4618      	mov	r0, r3
 800675e:	4603      	mov	r3, r0
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4403      	add	r3, r0
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4618      	mov	r0, r3
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	4403      	add	r3, r0
 800676c:	7809      	ldrb	r1, [r1, #0]
 800676e:	4413      	add	r3, r2
 8006770:	460a      	mov	r2, r1
 8006772:	715a      	strb	r2, [r3, #5]
	for(uint8_t c = 0; c < len; c++)
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	3301      	adds	r3, #1
 8006778:	73fb      	strb	r3, [r7, #15]
 800677a:	7bfa      	ldrb	r2, [r7, #15]
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	429a      	cmp	r2, r3
 8006780:	d3e3      	bcc.n	800674a <TELEMETRY_Send_Data_Raw+0x12>
	//On enregistre la taille de la donnée
	telem->len_portion_tx[telem->index_write_tx] = len ;
 8006782:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	f8b2 2424 	ldrh.w	r2, [r2, #1060]	; 0x424
 800678e:	4413      	add	r3, r2
 8006790:	78fa      	ldrb	r2, [r7, #3]
 8006792:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed

	//Incrémentation de l'index
	telem->index_write_tx ++ ;
 8006796:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 800679e:	3201      	adds	r2, #1
 80067a0:	b292      	uxth	r2, r2
 80067a2:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 80067a6:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <TELEMETRY_Send_Data_Raw+0x9c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 80067ae:	4a09      	ldr	r2, [pc, #36]	; (80067d4 <TELEMETRY_Send_Data_Raw+0x9c>)
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	4909      	ldr	r1, [pc, #36]	; (80067d8 <TELEMETRY_Send_Data_Raw+0xa0>)
 80067b4:	fba1 0103 	umull	r0, r1, r1, r3
 80067b8:	0909      	lsrs	r1, r1, #4
 80067ba:	2032      	movs	r0, #50	; 0x32
 80067bc:	fb00 f101 	mul.w	r1, r0, r1
 80067c0:	1a5b      	subs	r3, r3, r1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f8a2 3424 	strh.w	r3, [r2, #1060]	; 0x424
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	200019b8 	.word	0x200019b8
 80067d8:	51eb851f 	.word	0x51eb851f

080067dc <TELEMETRY_Idle_Line_Detection>:

void TELEMETRY_Idle_Line_Detection(void){
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
	//On met à jour l'index d'écriture du buffer rx
	telem->index_write_rx = LEN_RX_BUFFER - telem->huart->hdmarx->Instance->NDTR ;
 80067e0:	4b09      	ldr	r3, [pc, #36]	; (8006808 <TELEMETRY_Idle_Line_Detection+0x2c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <TELEMETRY_Idle_Line_Detection+0x2c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80067f6:	b292      	uxth	r2, r2
 80067f8:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
}
 80067fc:	bf00      	nop
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	200019b8 	.word	0x200019b8

0800680c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006810:	4b0e      	ldr	r3, [pc, #56]	; (800684c <HAL_Init+0x40>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a0d      	ldr	r2, [pc, #52]	; (800684c <HAL_Init+0x40>)
 8006816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800681a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <HAL_Init+0x40>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a0a      	ldr	r2, [pc, #40]	; (800684c <HAL_Init+0x40>)
 8006822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006828:	4b08      	ldr	r3, [pc, #32]	; (800684c <HAL_Init+0x40>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a07      	ldr	r2, [pc, #28]	; (800684c <HAL_Init+0x40>)
 800682e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006834:	2003      	movs	r0, #3
 8006836:	f000 fd41 	bl	80072bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800683a:	2000      	movs	r0, #0
 800683c:	f000 f808 	bl	8006850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006840:	f7ff f8a0 	bl	8005984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40023c00 	.word	0x40023c00

08006850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006858:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <HAL_InitTick+0x54>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <HAL_InitTick+0x58>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	4619      	mov	r1, r3
 8006862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006866:	fbb3 f3f1 	udiv	r3, r3, r1
 800686a:	fbb2 f3f3 	udiv	r3, r2, r3
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fd59 	bl	8007326 <HAL_SYSTICK_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e00e      	b.n	800689c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b0f      	cmp	r3, #15
 8006882:	d80a      	bhi.n	800689a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006884:	2200      	movs	r2, #0
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	f04f 30ff 	mov.w	r0, #4294967295
 800688c:	f000 fd21 	bl	80072d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006890:	4a06      	ldr	r2, [pc, #24]	; (80068ac <HAL_InitTick+0x5c>)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	e000      	b.n	800689c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	200014f0 	.word	0x200014f0
 80068a8:	20001510 	.word	0x20001510
 80068ac:	2000150c 	.word	0x2000150c

080068b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068b4:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <HAL_IncTick+0x20>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <HAL_IncTick+0x24>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4413      	add	r3, r2
 80068c0:	4a04      	ldr	r2, [pc, #16]	; (80068d4 <HAL_IncTick+0x24>)
 80068c2:	6013      	str	r3, [r2, #0]
}
 80068c4:	bf00      	nop
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	20001510 	.word	0x20001510
 80068d4:	20002bf4 	.word	0x20002bf4

080068d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  return uwTick;
 80068dc:	4b03      	ldr	r3, [pc, #12]	; (80068ec <HAL_GetTick+0x14>)
 80068de:	681b      	ldr	r3, [r3, #0]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20002bf4 	.word	0x20002bf4

080068f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068f8:	f7ff ffee 	bl	80068d8 <HAL_GetTick>
 80068fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006908:	d005      	beq.n	8006916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <HAL_Delay+0x40>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006916:	bf00      	nop
 8006918:	f7ff ffde 	bl	80068d8 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	429a      	cmp	r2, r3
 8006926:	d8f7      	bhi.n	8006918 <HAL_Delay+0x28>
  {
  }
}
 8006928:	bf00      	nop
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	20001510 	.word	0x20001510

08006934 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e033      	b.n	80069b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d109      	bne.n	8006966 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fe fab4 	bl	8004ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b00      	cmp	r3, #0
 8006970:	d118      	bne.n	80069a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800697a:	f023 0302 	bic.w	r3, r3, #2
 800697e:	f043 0202 	orr.w	r2, r3, #2
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fa4a 	bl	8006e20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f023 0303 	bic.w	r3, r3, #3
 800699a:	f043 0201 	orr.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
 80069a2:	e001      	b.n	80069a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_ADC_Start_DMA+0x1e>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e0cc      	b.n	8006b74 <HAL_ADC_Start_DMA+0x1b8>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d018      	beq.n	8006a22 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006a00:	4b5e      	ldr	r3, [pc, #376]	; (8006b7c <HAL_ADC_Start_DMA+0x1c0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5e      	ldr	r2, [pc, #376]	; (8006b80 <HAL_ADC_Start_DMA+0x1c4>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	0c9a      	lsrs	r2, r3, #18
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	4413      	add	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006a14:	e002      	b.n	8006a1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1f9      	bne.n	8006a16 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	f040 80a0 	bne.w	8006b72 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a3a:	f023 0301 	bic.w	r3, r3, #1
 8006a3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a70:	d106      	bne.n	8006a80 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	f023 0206 	bic.w	r2, r3, #6
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44
 8006a7e:	e002      	b.n	8006a86 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a8e:	4b3d      	ldr	r3, [pc, #244]	; (8006b84 <HAL_ADC_Start_DMA+0x1c8>)
 8006a90:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	4a3c      	ldr	r2, [pc, #240]	; (8006b88 <HAL_ADC_Start_DMA+0x1cc>)
 8006a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	4a3b      	ldr	r2, [pc, #236]	; (8006b8c <HAL_ADC_Start_DMA+0x1d0>)
 8006aa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	4a3a      	ldr	r2, [pc, #232]	; (8006b90 <HAL_ADC_Start_DMA+0x1d4>)
 8006aa8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006ab2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006ac2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ad2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	334c      	adds	r3, #76	; 0x4c
 8006ade:	4619      	mov	r1, r3
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f000 fcda 	bl	800749c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f003 031f 	and.w	r3, r3, #31
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d12a      	bne.n	8006b4a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a26      	ldr	r2, [pc, #152]	; (8006b94 <HAL_ADC_Start_DMA+0x1d8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d015      	beq.n	8006b2a <HAL_ADC_Start_DMA+0x16e>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a25      	ldr	r2, [pc, #148]	; (8006b98 <HAL_ADC_Start_DMA+0x1dc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d105      	bne.n	8006b14 <HAL_ADC_Start_DMA+0x158>
 8006b08:	4b1e      	ldr	r3, [pc, #120]	; (8006b84 <HAL_ADC_Start_DMA+0x1c8>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f003 031f 	and.w	r3, r3, #31
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a20      	ldr	r2, [pc, #128]	; (8006b9c <HAL_ADC_Start_DMA+0x1e0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d129      	bne.n	8006b72 <HAL_ADC_Start_DMA+0x1b6>
 8006b1e:	4b19      	ldr	r3, [pc, #100]	; (8006b84 <HAL_ADC_Start_DMA+0x1c8>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	2b0f      	cmp	r3, #15
 8006b28:	d823      	bhi.n	8006b72 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d11c      	bne.n	8006b72 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b46:	609a      	str	r2, [r3, #8]
 8006b48:	e013      	b.n	8006b72 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a11      	ldr	r2, [pc, #68]	; (8006b94 <HAL_ADC_Start_DMA+0x1d8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d10e      	bne.n	8006b72 <HAL_ADC_Start_DMA+0x1b6>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d107      	bne.n	8006b72 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b70:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	200014f0 	.word	0x200014f0
 8006b80:	431bde83 	.word	0x431bde83
 8006b84:	40012300 	.word	0x40012300
 8006b88:	08007019 	.word	0x08007019
 8006b8c:	080070d3 	.word	0x080070d3
 8006b90:	080070ef 	.word	0x080070ef
 8006b94:	40012000 	.word	0x40012000
 8006b98:	40012100 	.word	0x40012100
 8006b9c:	40012200 	.word	0x40012200

08006ba0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_ADC_ConfigChannel+0x1c>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e105      	b.n	8006e04 <HAL_ADC_ConfigChannel+0x228>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b09      	cmp	r3, #9
 8006c06:	d925      	bls.n	8006c54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68d9      	ldr	r1, [r3, #12]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	4613      	mov	r3, r2
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	4413      	add	r3, r2
 8006c1c:	3b1e      	subs	r3, #30
 8006c1e:	2207      	movs	r2, #7
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	43da      	mvns	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	400a      	ands	r2, r1
 8006c2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68d9      	ldr	r1, [r3, #12]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	4618      	mov	r0, r3
 8006c40:	4603      	mov	r3, r0
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	4403      	add	r3, r0
 8006c46:	3b1e      	subs	r3, #30
 8006c48:	409a      	lsls	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	60da      	str	r2, [r3, #12]
 8006c52:	e022      	b.n	8006c9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6919      	ldr	r1, [r3, #16]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	4613      	mov	r3, r2
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	4413      	add	r3, r2
 8006c68:	2207      	movs	r2, #7
 8006c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6e:	43da      	mvns	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	400a      	ands	r2, r1
 8006c76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6919      	ldr	r1, [r3, #16]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4618      	mov	r0, r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4403      	add	r3, r0
 8006c90:	409a      	lsls	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2b06      	cmp	r3, #6
 8006ca0:	d824      	bhi.n	8006cec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3b05      	subs	r3, #5
 8006cb4:	221f      	movs	r2, #31
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	43da      	mvns	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	400a      	ands	r2, r1
 8006cc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	3b05      	subs	r3, #5
 8006cde:	fa00 f203 	lsl.w	r2, r0, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8006cea:	e04c      	b.n	8006d86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b0c      	cmp	r3, #12
 8006cf2:	d824      	bhi.n	8006d3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	3b23      	subs	r3, #35	; 0x23
 8006d06:	221f      	movs	r2, #31
 8006d08:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0c:	43da      	mvns	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	400a      	ands	r2, r1
 8006d14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4618      	mov	r0, r3
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3b23      	subs	r3, #35	; 0x23
 8006d30:	fa00 f203 	lsl.w	r2, r0, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d3c:	e023      	b.n	8006d86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3b41      	subs	r3, #65	; 0x41
 8006d50:	221f      	movs	r2, #31
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	43da      	mvns	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	400a      	ands	r2, r1
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	3b41      	subs	r3, #65	; 0x41
 8006d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <HAL_ADC_ConfigChannel+0x234>)
 8006d88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <HAL_ADC_ConfigChannel+0x238>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d109      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x1cc>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b12      	cmp	r3, #18
 8006d9a:	d105      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a19      	ldr	r2, [pc, #100]	; (8006e14 <HAL_ADC_ConfigChannel+0x238>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d123      	bne.n	8006dfa <HAL_ADC_ConfigChannel+0x21e>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d003      	beq.n	8006dc2 <HAL_ADC_ConfigChannel+0x1e6>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b11      	cmp	r3, #17
 8006dc0:	d11b      	bne.n	8006dfa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b10      	cmp	r3, #16
 8006dd4:	d111      	bne.n	8006dfa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006dd6:	4b10      	ldr	r3, [pc, #64]	; (8006e18 <HAL_ADC_ConfigChannel+0x23c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a10      	ldr	r2, [pc, #64]	; (8006e1c <HAL_ADC_ConfigChannel+0x240>)
 8006ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8006de0:	0c9a      	lsrs	r2, r3, #18
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006dec:	e002      	b.n	8006df4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1f9      	bne.n	8006dee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	40012300 	.word	0x40012300
 8006e14:	40012000 	.word	0x40012000
 8006e18:	200014f0 	.word	0x200014f0
 8006e1c:	431bde83 	.word	0x431bde83

08006e20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e28:	4b79      	ldr	r3, [pc, #484]	; (8007010 <ADC_Init+0x1f0>)
 8006e2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	431a      	orrs	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6859      	ldr	r1, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	021a      	lsls	r2, r3, #8
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6859      	ldr	r1, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6899      	ldr	r1, [r3, #8]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	4a58      	ldr	r2, [pc, #352]	; (8007014 <ADC_Init+0x1f4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d022      	beq.n	8006efe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ec6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6899      	ldr	r1, [r3, #8]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6899      	ldr	r1, [r3, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	609a      	str	r2, [r3, #8]
 8006efc:	e00f      	b.n	8006f1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0202 	bic.w	r2, r2, #2
 8006f2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6899      	ldr	r1, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	7e1b      	ldrb	r3, [r3, #24]
 8006f38:	005a      	lsls	r2, r3, #1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01b      	beq.n	8006f84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006f6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6859      	ldr	r1, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	3b01      	subs	r3, #1
 8006f78:	035a      	lsls	r2, r3, #13
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
 8006f82:	e007      	b.n	8006f94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	051a      	lsls	r2, r3, #20
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006fc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6899      	ldr	r1, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fd6:	025a      	lsls	r2, r3, #9
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6899      	ldr	r1, [r3, #8]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	029a      	lsls	r2, r3, #10
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	609a      	str	r2, [r3, #8]
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	40012300 	.word	0x40012300
 8007014:	0f000001 	.word	0x0f000001

08007018 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007024:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800702e:	2b00      	cmp	r3, #0
 8007030:	d13c      	bne.n	80070ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d12b      	bne.n	80070a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007050:	2b00      	cmp	r3, #0
 8007052:	d127      	bne.n	80070a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800705e:	2b00      	cmp	r3, #0
 8007060:	d006      	beq.n	8007070 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800706c:	2b00      	cmp	r3, #0
 800706e:	d119      	bne.n	80070a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0220 	bic.w	r2, r2, #32
 800707e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007084:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	f043 0201 	orr.w	r2, r3, #1
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f7ff fd7b 	bl	8006ba0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80070aa:	e00e      	b.n	80070ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7ff fd85 	bl	8006bc8 <HAL_ADC_ErrorCallback>
}
 80070be:	e004      	b.n	80070ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff fd67 	bl	8006bb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80070e6:	bf00      	nop
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2240      	movs	r2, #64	; 0x40
 8007100:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	f043 0204 	orr.w	r2, r3, #4
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f7ff fd5a 	bl	8006bc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <__NVIC_SetPriorityGrouping+0x44>)
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007138:	4013      	ands	r3, r2
 800713a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800714c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800714e:	4a04      	ldr	r2, [pc, #16]	; (8007160 <__NVIC_SetPriorityGrouping+0x44>)
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	60d3      	str	r3, [r2, #12]
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	e000ed00 	.word	0xe000ed00

08007164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007168:	4b04      	ldr	r3, [pc, #16]	; (800717c <__NVIC_GetPriorityGrouping+0x18>)
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	0a1b      	lsrs	r3, r3, #8
 800716e:	f003 0307 	and.w	r3, r3, #7
}
 8007172:	4618      	mov	r0, r3
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	e000ed00 	.word	0xe000ed00

08007180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800718a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800718e:	2b00      	cmp	r3, #0
 8007190:	db0b      	blt.n	80071aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	f003 021f 	and.w	r2, r3, #31
 8007198:	4907      	ldr	r1, [pc, #28]	; (80071b8 <__NVIC_EnableIRQ+0x38>)
 800719a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	2001      	movs	r0, #1
 80071a2:	fa00 f202 	lsl.w	r2, r0, r2
 80071a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	e000e100 	.word	0xe000e100

080071bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	6039      	str	r1, [r7, #0]
 80071c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	db0a      	blt.n	80071e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	490c      	ldr	r1, [pc, #48]	; (8007208 <__NVIC_SetPriority+0x4c>)
 80071d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071da:	0112      	lsls	r2, r2, #4
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	440b      	add	r3, r1
 80071e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071e4:	e00a      	b.n	80071fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	4908      	ldr	r1, [pc, #32]	; (800720c <__NVIC_SetPriority+0x50>)
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	3b04      	subs	r3, #4
 80071f4:	0112      	lsls	r2, r2, #4
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	440b      	add	r3, r1
 80071fa:	761a      	strb	r2, [r3, #24]
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	e000e100 	.word	0xe000e100
 800720c:	e000ed00 	.word	0xe000ed00

08007210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007210:	b480      	push	{r7}
 8007212:	b089      	sub	sp, #36	; 0x24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	f1c3 0307 	rsb	r3, r3, #7
 800722a:	2b04      	cmp	r3, #4
 800722c:	bf28      	it	cs
 800722e:	2304      	movcs	r3, #4
 8007230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3304      	adds	r3, #4
 8007236:	2b06      	cmp	r3, #6
 8007238:	d902      	bls.n	8007240 <NVIC_EncodePriority+0x30>
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	3b03      	subs	r3, #3
 800723e:	e000      	b.n	8007242 <NVIC_EncodePriority+0x32>
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007244:	f04f 32ff 	mov.w	r2, #4294967295
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	fa02 f303 	lsl.w	r3, r2, r3
 800724e:	43da      	mvns	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	401a      	ands	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007258:	f04f 31ff 	mov.w	r1, #4294967295
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	fa01 f303 	lsl.w	r3, r1, r3
 8007262:	43d9      	mvns	r1, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007268:	4313      	orrs	r3, r2
         );
}
 800726a:	4618      	mov	r0, r3
 800726c:	3724      	adds	r7, #36	; 0x24
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
	...

08007278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3b01      	subs	r3, #1
 8007284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007288:	d301      	bcc.n	800728e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800728a:	2301      	movs	r3, #1
 800728c:	e00f      	b.n	80072ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800728e:	4a0a      	ldr	r2, [pc, #40]	; (80072b8 <SysTick_Config+0x40>)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3b01      	subs	r3, #1
 8007294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007296:	210f      	movs	r1, #15
 8007298:	f04f 30ff 	mov.w	r0, #4294967295
 800729c:	f7ff ff8e 	bl	80071bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <SysTick_Config+0x40>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072a6:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <SysTick_Config+0x40>)
 80072a8:	2207      	movs	r2, #7
 80072aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	e000e010 	.word	0xe000e010

080072bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff ff29 	bl	800711c <__NVIC_SetPriorityGrouping>
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b086      	sub	sp, #24
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	4603      	mov	r3, r0
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80072e4:	f7ff ff3e 	bl	8007164 <__NVIC_GetPriorityGrouping>
 80072e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	6978      	ldr	r0, [r7, #20]
 80072f0:	f7ff ff8e 	bl	8007210 <NVIC_EncodePriority>
 80072f4:	4602      	mov	r2, r0
 80072f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072fa:	4611      	mov	r1, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff ff5d 	bl	80071bc <__NVIC_SetPriority>
}
 8007302:	bf00      	nop
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	4603      	mov	r3, r0
 8007312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff ff31 	bl	8007180 <__NVIC_EnableIRQ>
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff ffa2 	bl	8007278 <SysTick_Config>
 8007334:	4603      	mov	r3, r0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800734c:	f7ff fac4 	bl	80068d8 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e099      	b.n	8007490 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800737c:	e00f      	b.n	800739e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800737e:	f7ff faab 	bl	80068d8 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b05      	cmp	r3, #5
 800738a:	d908      	bls.n	800739e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2203      	movs	r2, #3
 8007396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e078      	b.n	8007490 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e8      	bne.n	800737e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4b38      	ldr	r3, [pc, #224]	; (8007498 <HAL_DMA_Init+0x158>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d107      	bne.n	8007408 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007400:	4313      	orrs	r3, r2
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f023 0307 	bic.w	r3, r3, #7
 800741e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	2b04      	cmp	r3, #4
 8007430:	d117      	bne.n	8007462 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	4313      	orrs	r3, r2
 800743a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00e      	beq.n	8007462 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fa91 	bl	800796c <DMA_CheckFifoParam>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2240      	movs	r2, #64	; 0x40
 8007454:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800745e:	2301      	movs	r3, #1
 8007460:	e016      	b.n	8007490 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa48 	bl	8007900 <DMA_CalcBaseAndBitshift>
 8007470:	4603      	mov	r3, r0
 8007472:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007478:	223f      	movs	r2, #63	; 0x3f
 800747a:	409a      	lsls	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	f010803f 	.word	0xf010803f

0800749c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <HAL_DMA_Start_IT+0x26>
 80074be:	2302      	movs	r3, #2
 80074c0:	e040      	b.n	8007544 <HAL_DMA_Start_IT+0xa8>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d12f      	bne.n	8007536 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2202      	movs	r2, #2
 80074da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 f9da 	bl	80078a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f4:	223f      	movs	r2, #63	; 0x3f
 80074f6:	409a      	lsls	r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0216 	orr.w	r2, r2, #22
 800750a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0208 	orr.w	r2, r2, #8
 8007522:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	e005      	b.n	8007542 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800753e:	2302      	movs	r3, #2
 8007540:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d004      	beq.n	800756a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2280      	movs	r2, #128	; 0x80
 8007564:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e00c      	b.n	8007584 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2205      	movs	r2, #5
 800756e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0201 	bic.w	r2, r2, #1
 8007580:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800759c:	4b92      	ldr	r3, [pc, #584]	; (80077e8 <HAL_DMA_IRQHandler+0x258>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a92      	ldr	r2, [pc, #584]	; (80077ec <HAL_DMA_IRQHandler+0x25c>)
 80075a2:	fba2 2303 	umull	r2, r3, r2, r3
 80075a6:	0a9b      	lsrs	r3, r3, #10
 80075a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ba:	2208      	movs	r2, #8
 80075bc:	409a      	lsls	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01a      	beq.n	80075fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d013      	beq.n	80075fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0204 	bic.w	r2, r2, #4
 80075e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e8:	2208      	movs	r2, #8
 80075ea:	409a      	lsls	r2, r3
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	f043 0201 	orr.w	r2, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007600:	2201      	movs	r2, #1
 8007602:	409a      	lsls	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4013      	ands	r3, r2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d012      	beq.n	8007632 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761e:	2201      	movs	r2, #1
 8007620:	409a      	lsls	r2, r3
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762a:	f043 0202 	orr.w	r2, r3, #2
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007636:	2204      	movs	r2, #4
 8007638:	409a      	lsls	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4013      	ands	r3, r2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d012      	beq.n	8007668 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007654:	2204      	movs	r2, #4
 8007656:	409a      	lsls	r2, r3
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007660:	f043 0204 	orr.w	r2, r3, #4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766c:	2210      	movs	r2, #16
 800766e:	409a      	lsls	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4013      	ands	r3, r2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d043      	beq.n	8007700 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0308 	and.w	r3, r3, #8
 8007682:	2b00      	cmp	r3, #0
 8007684:	d03c      	beq.n	8007700 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800768a:	2210      	movs	r2, #16
 800768c:	409a      	lsls	r2, r3
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d018      	beq.n	80076d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d108      	bne.n	80076c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d024      	beq.n	8007700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
 80076be:	e01f      	b.n	8007700 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d01b      	beq.n	8007700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	4798      	blx	r3
 80076d0:	e016      	b.n	8007700 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d107      	bne.n	80076f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0208 	bic.w	r2, r2, #8
 80076ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007704:	2220      	movs	r2, #32
 8007706:	409a      	lsls	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 808e 	beq.w	800782e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 8086 	beq.w	800782e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007726:	2220      	movs	r2, #32
 8007728:	409a      	lsls	r2, r3
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b05      	cmp	r3, #5
 8007738:	d136      	bne.n	80077a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0216 	bic.w	r2, r2, #22
 8007748:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695a      	ldr	r2, [r3, #20]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007758:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d103      	bne.n	800776a <HAL_DMA_IRQHandler+0x1da>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0208 	bic.w	r2, r2, #8
 8007778:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777e:	223f      	movs	r2, #63	; 0x3f
 8007780:	409a      	lsls	r2, r3
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	2b00      	cmp	r3, #0
 800779c:	d07d      	beq.n	800789a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
        }
        return;
 80077a6:	e078      	b.n	800789a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d01c      	beq.n	80077f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d108      	bne.n	80077d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d030      	beq.n	800782e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	4798      	blx	r3
 80077d4:	e02b      	b.n	800782e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d027      	beq.n	800782e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
 80077e6:	e022      	b.n	800782e <HAL_DMA_IRQHandler+0x29e>
 80077e8:	200014f0 	.word	0x200014f0
 80077ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10f      	bne.n	800781e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0210 	bic.w	r2, r2, #16
 800780c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007832:	2b00      	cmp	r3, #0
 8007834:	d032      	beq.n	800789c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d022      	beq.n	8007888 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2205      	movs	r2, #5
 8007846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0201 	bic.w	r2, r2, #1
 8007858:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	3301      	adds	r3, #1
 800785e:	60bb      	str	r3, [r7, #8]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	429a      	cmp	r2, r3
 8007864:	d307      	bcc.n	8007876 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1f2      	bne.n	800785a <HAL_DMA_IRQHandler+0x2ca>
 8007874:	e000      	b.n	8007878 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007876:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d005      	beq.n	800789c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	4798      	blx	r3
 8007898:	e000      	b.n	800789c <HAL_DMA_IRQHandler+0x30c>
        return;
 800789a:	bf00      	nop
    }
  }
}
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop

080078a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d108      	bne.n	80078e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80078e2:	e007      	b.n	80078f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	60da      	str	r2, [r3, #12]
}
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	3b10      	subs	r3, #16
 8007910:	4a14      	ldr	r2, [pc, #80]	; (8007964 <DMA_CalcBaseAndBitshift+0x64>)
 8007912:	fba2 2303 	umull	r2, r3, r2, r3
 8007916:	091b      	lsrs	r3, r3, #4
 8007918:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800791a:	4a13      	ldr	r2, [pc, #76]	; (8007968 <DMA_CalcBaseAndBitshift+0x68>)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b03      	cmp	r3, #3
 800792c:	d909      	bls.n	8007942 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	1d1a      	adds	r2, r3, #4
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	659a      	str	r2, [r3, #88]	; 0x58
 8007940:	e007      	b.n	8007952 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800794a:	f023 0303 	bic.w	r3, r3, #3
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	aaaaaaab 	.word	0xaaaaaaab
 8007968:	0800eb0c 	.word	0x0800eb0c

0800796c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d11f      	bne.n	80079c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b03      	cmp	r3, #3
 800798a:	d855      	bhi.n	8007a38 <DMA_CheckFifoParam+0xcc>
 800798c:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <DMA_CheckFifoParam+0x28>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079a5 	.word	0x080079a5
 8007998:	080079b7 	.word	0x080079b7
 800799c:	080079a5 	.word	0x080079a5
 80079a0:	08007a39 	.word	0x08007a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d045      	beq.n	8007a3c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079b4:	e042      	b.n	8007a3c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079be:	d13f      	bne.n	8007a40 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079c4:	e03c      	b.n	8007a40 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ce:	d121      	bne.n	8007a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d836      	bhi.n	8007a44 <DMA_CheckFifoParam+0xd8>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <DMA_CheckFifoParam+0x70>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	080079ed 	.word	0x080079ed
 80079e0:	080079f3 	.word	0x080079f3
 80079e4:	080079ed 	.word	0x080079ed
 80079e8:	08007a05 	.word	0x08007a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	73fb      	strb	r3, [r7, #15]
      break;
 80079f0:	e02f      	b.n	8007a52 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d024      	beq.n	8007a48 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a02:	e021      	b.n	8007a48 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a0c:	d11e      	bne.n	8007a4c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007a12:	e01b      	b.n	8007a4c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d902      	bls.n	8007a20 <DMA_CheckFifoParam+0xb4>
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d003      	beq.n	8007a26 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007a1e:	e018      	b.n	8007a52 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	73fb      	strb	r3, [r7, #15]
      break;
 8007a24:	e015      	b.n	8007a52 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00e      	beq.n	8007a50 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	73fb      	strb	r3, [r7, #15]
      break;
 8007a36:	e00b      	b.n	8007a50 <DMA_CheckFifoParam+0xe4>
      break;
 8007a38:	bf00      	nop
 8007a3a:	e00a      	b.n	8007a52 <DMA_CheckFifoParam+0xe6>
      break;
 8007a3c:	bf00      	nop
 8007a3e:	e008      	b.n	8007a52 <DMA_CheckFifoParam+0xe6>
      break;
 8007a40:	bf00      	nop
 8007a42:	e006      	b.n	8007a52 <DMA_CheckFifoParam+0xe6>
      break;
 8007a44:	bf00      	nop
 8007a46:	e004      	b.n	8007a52 <DMA_CheckFifoParam+0xe6>
      break;
 8007a48:	bf00      	nop
 8007a4a:	e002      	b.n	8007a52 <DMA_CheckFifoParam+0xe6>
      break;   
 8007a4c:	bf00      	nop
 8007a4e:	e000      	b.n	8007a52 <DMA_CheckFifoParam+0xe6>
      break;
 8007a50:	bf00      	nop
    }
  } 
  
  return status; 
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b089      	sub	sp, #36	; 0x24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a76:	2300      	movs	r3, #0
 8007a78:	61fb      	str	r3, [r7, #28]
 8007a7a:	e16b      	b.n	8007d54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	fa02 f303 	lsl.w	r3, r2, r3
 8007a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	f040 815a 	bne.w	8007d4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d00b      	beq.n	8007aba <HAL_GPIO_Init+0x5a>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d007      	beq.n	8007aba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007aae:	2b11      	cmp	r3, #17
 8007ab0:	d003      	beq.n	8007aba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2b12      	cmp	r3, #18
 8007ab8:	d130      	bne.n	8007b1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	43db      	mvns	r3, r3
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	fa02 f303 	lsl.w	r3, r2, r3
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007af0:	2201      	movs	r2, #1
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	fa02 f303 	lsl.w	r3, r2, r3
 8007af8:	43db      	mvns	r3, r3
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	4013      	ands	r3, r2
 8007afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	091b      	lsrs	r3, r3, #4
 8007b06:	f003 0201 	and.w	r2, r3, #1
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	2203      	movs	r2, #3
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	4013      	ands	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d003      	beq.n	8007b5c <HAL_GPIO_Init+0xfc>
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b12      	cmp	r3, #18
 8007b5a:	d123      	bne.n	8007ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	08da      	lsrs	r2, r3, #3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3208      	adds	r2, #8
 8007b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	220f      	movs	r2, #15
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	08da      	lsrs	r2, r3, #3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3208      	adds	r2, #8
 8007b9e:	69b9      	ldr	r1, [r7, #24]
 8007ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	2203      	movs	r2, #3
 8007bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb4:	43db      	mvns	r3, r3
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	4013      	ands	r3, r2
 8007bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f003 0203 	and.w	r2, r3, #3
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 80b4 	beq.w	8007d4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	4b5f      	ldr	r3, [pc, #380]	; (8007d68 <HAL_GPIO_Init+0x308>)
 8007bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bee:	4a5e      	ldr	r2, [pc, #376]	; (8007d68 <HAL_GPIO_Init+0x308>)
 8007bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8007bf6:	4b5c      	ldr	r3, [pc, #368]	; (8007d68 <HAL_GPIO_Init+0x308>)
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c02:	4a5a      	ldr	r2, [pc, #360]	; (8007d6c <HAL_GPIO_Init+0x30c>)
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	089b      	lsrs	r3, r3, #2
 8007c08:	3302      	adds	r3, #2
 8007c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	220f      	movs	r2, #15
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	4013      	ands	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a51      	ldr	r2, [pc, #324]	; (8007d70 <HAL_GPIO_Init+0x310>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d02b      	beq.n	8007c86 <HAL_GPIO_Init+0x226>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a50      	ldr	r2, [pc, #320]	; (8007d74 <HAL_GPIO_Init+0x314>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d025      	beq.n	8007c82 <HAL_GPIO_Init+0x222>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a4f      	ldr	r2, [pc, #316]	; (8007d78 <HAL_GPIO_Init+0x318>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d01f      	beq.n	8007c7e <HAL_GPIO_Init+0x21e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a4e      	ldr	r2, [pc, #312]	; (8007d7c <HAL_GPIO_Init+0x31c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d019      	beq.n	8007c7a <HAL_GPIO_Init+0x21a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a4d      	ldr	r2, [pc, #308]	; (8007d80 <HAL_GPIO_Init+0x320>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d013      	beq.n	8007c76 <HAL_GPIO_Init+0x216>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a4c      	ldr	r2, [pc, #304]	; (8007d84 <HAL_GPIO_Init+0x324>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00d      	beq.n	8007c72 <HAL_GPIO_Init+0x212>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a4b      	ldr	r2, [pc, #300]	; (8007d88 <HAL_GPIO_Init+0x328>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d007      	beq.n	8007c6e <HAL_GPIO_Init+0x20e>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a4a      	ldr	r2, [pc, #296]	; (8007d8c <HAL_GPIO_Init+0x32c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d101      	bne.n	8007c6a <HAL_GPIO_Init+0x20a>
 8007c66:	2307      	movs	r3, #7
 8007c68:	e00e      	b.n	8007c88 <HAL_GPIO_Init+0x228>
 8007c6a:	2308      	movs	r3, #8
 8007c6c:	e00c      	b.n	8007c88 <HAL_GPIO_Init+0x228>
 8007c6e:	2306      	movs	r3, #6
 8007c70:	e00a      	b.n	8007c88 <HAL_GPIO_Init+0x228>
 8007c72:	2305      	movs	r3, #5
 8007c74:	e008      	b.n	8007c88 <HAL_GPIO_Init+0x228>
 8007c76:	2304      	movs	r3, #4
 8007c78:	e006      	b.n	8007c88 <HAL_GPIO_Init+0x228>
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e004      	b.n	8007c88 <HAL_GPIO_Init+0x228>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e002      	b.n	8007c88 <HAL_GPIO_Init+0x228>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <HAL_GPIO_Init+0x228>
 8007c86:	2300      	movs	r3, #0
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	f002 0203 	and.w	r2, r2, #3
 8007c8e:	0092      	lsls	r2, r2, #2
 8007c90:	4093      	lsls	r3, r2
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c98:	4934      	ldr	r1, [pc, #208]	; (8007d6c <HAL_GPIO_Init+0x30c>)
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	089b      	lsrs	r3, r3, #2
 8007c9e:	3302      	adds	r3, #2
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ca6:	4b3a      	ldr	r3, [pc, #232]	; (8007d90 <HAL_GPIO_Init+0x330>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007cca:	4a31      	ldr	r2, [pc, #196]	; (8007d90 <HAL_GPIO_Init+0x330>)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007cd0:	4b2f      	ldr	r3, [pc, #188]	; (8007d90 <HAL_GPIO_Init+0x330>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007cf4:	4a26      	ldr	r2, [pc, #152]	; (8007d90 <HAL_GPIO_Init+0x330>)
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cfa:	4b25      	ldr	r3, [pc, #148]	; (8007d90 <HAL_GPIO_Init+0x330>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	43db      	mvns	r3, r3
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	4013      	ands	r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007d1e:	4a1c      	ldr	r2, [pc, #112]	; (8007d90 <HAL_GPIO_Init+0x330>)
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d24:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <HAL_GPIO_Init+0x330>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	43db      	mvns	r3, r3
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	4013      	ands	r3, r2
 8007d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d48:	4a11      	ldr	r2, [pc, #68]	; (8007d90 <HAL_GPIO_Init+0x330>)
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	3301      	adds	r3, #1
 8007d52:	61fb      	str	r3, [r7, #28]
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	2b0f      	cmp	r3, #15
 8007d58:	f67f ae90 	bls.w	8007a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d5c:	bf00      	nop
 8007d5e:	3724      	adds	r7, #36	; 0x24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	40013800 	.word	0x40013800
 8007d70:	40020000 	.word	0x40020000
 8007d74:	40020400 	.word	0x40020400
 8007d78:	40020800 	.word	0x40020800
 8007d7c:	40020c00 	.word	0x40020c00
 8007d80:	40021000 	.word	0x40021000
 8007d84:	40021400 	.word	0x40021400
 8007d88:	40021800 	.word	0x40021800
 8007d8c:	40021c00 	.word	0x40021c00
 8007d90:	40013c00 	.word	0x40013c00

08007d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	807b      	strh	r3, [r7, #2]
 8007da0:	4613      	mov	r3, r2
 8007da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007da4:	787b      	ldrb	r3, [r7, #1]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007daa:	887a      	ldrh	r2, [r7, #2]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007db0:	e003      	b.n	8007dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007db2:	887b      	ldrh	r3, [r7, #2]
 8007db4:	041a      	lsls	r2, r3, #16
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	619a      	str	r2, [r3, #24]
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e11f      	b.n	800801a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fd fa4c 	bl	800528c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2224      	movs	r2, #36	; 0x24
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0201 	bic.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e2c:	f000 fd18 	bl	8008860 <HAL_RCC_GetPCLK1Freq>
 8007e30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	4a7b      	ldr	r2, [pc, #492]	; (8008024 <HAL_I2C_Init+0x25c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d807      	bhi.n	8007e4c <HAL_I2C_Init+0x84>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4a7a      	ldr	r2, [pc, #488]	; (8008028 <HAL_I2C_Init+0x260>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	bf94      	ite	ls
 8007e44:	2301      	movls	r3, #1
 8007e46:	2300      	movhi	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	e006      	b.n	8007e5a <HAL_I2C_Init+0x92>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4a77      	ldr	r2, [pc, #476]	; (800802c <HAL_I2C_Init+0x264>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	bf94      	ite	ls
 8007e54:	2301      	movls	r3, #1
 8007e56:	2300      	movhi	r3, #0
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e0db      	b.n	800801a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4a72      	ldr	r2, [pc, #456]	; (8008030 <HAL_I2C_Init+0x268>)
 8007e66:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6a:	0c9b      	lsrs	r3, r3, #18
 8007e6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	4a64      	ldr	r2, [pc, #400]	; (8008024 <HAL_I2C_Init+0x25c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d802      	bhi.n	8007e9c <HAL_I2C_Init+0xd4>
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	e009      	b.n	8007eb0 <HAL_I2C_Init+0xe8>
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
 8007ea6:	4a63      	ldr	r2, [pc, #396]	; (8008034 <HAL_I2C_Init+0x26c>)
 8007ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eac:	099b      	lsrs	r3, r3, #6
 8007eae:	3301      	adds	r3, #1
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6812      	ldr	r2, [r2, #0]
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007ec2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	4956      	ldr	r1, [pc, #344]	; (8008024 <HAL_I2C_Init+0x25c>)
 8007ecc:	428b      	cmp	r3, r1
 8007ece:	d80d      	bhi.n	8007eec <HAL_I2C_Init+0x124>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	1e59      	subs	r1, r3, #1
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ede:	3301      	adds	r3, #1
 8007ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	bf38      	it	cc
 8007ee8:	2304      	movcc	r3, #4
 8007eea:	e04f      	b.n	8007f8c <HAL_I2C_Init+0x1c4>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d111      	bne.n	8007f18 <HAL_I2C_Init+0x150>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	1e58      	subs	r0, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6859      	ldr	r1, [r3, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	440b      	add	r3, r1
 8007f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f06:	3301      	adds	r3, #1
 8007f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	e012      	b.n	8007f3e <HAL_I2C_Init+0x176>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	1e58      	subs	r0, r3, #1
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6859      	ldr	r1, [r3, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	440b      	add	r3, r1
 8007f26:	0099      	lsls	r1, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f2e:	3301      	adds	r3, #1
 8007f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	bf0c      	ite	eq
 8007f38:	2301      	moveq	r3, #1
 8007f3a:	2300      	movne	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <HAL_I2C_Init+0x17e>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e022      	b.n	8007f8c <HAL_I2C_Init+0x1c4>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10e      	bne.n	8007f6c <HAL_I2C_Init+0x1a4>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1e58      	subs	r0, r3, #1
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6859      	ldr	r1, [r3, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	440b      	add	r3, r1
 8007f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f60:	3301      	adds	r3, #1
 8007f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f6a:	e00f      	b.n	8007f8c <HAL_I2C_Init+0x1c4>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	1e58      	subs	r0, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6859      	ldr	r1, [r3, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	0099      	lsls	r1, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f82:	3301      	adds	r3, #1
 8007f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	6809      	ldr	r1, [r1, #0]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69da      	ldr	r2, [r3, #28]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6911      	ldr	r1, [r2, #16]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	68d2      	ldr	r2, [r2, #12]
 8007fc6:	4311      	orrs	r1, r2
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6812      	ldr	r2, [r2, #0]
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	695a      	ldr	r2, [r3, #20]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	000186a0 	.word	0x000186a0
 8008028:	001e847f 	.word	0x001e847f
 800802c:	003d08ff 	.word	0x003d08ff
 8008030:	431bde83 	.word	0x431bde83
 8008034:	10624dd3 	.word	0x10624dd3

08008038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e25b      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	d075      	beq.n	8008142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008056:	4ba3      	ldr	r3, [pc, #652]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 030c 	and.w	r3, r3, #12
 800805e:	2b04      	cmp	r3, #4
 8008060:	d00c      	beq.n	800807c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008062:	4ba0      	ldr	r3, [pc, #640]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800806a:	2b08      	cmp	r3, #8
 800806c:	d112      	bne.n	8008094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800806e:	4b9d      	ldr	r3, [pc, #628]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800807a:	d10b      	bne.n	8008094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800807c:	4b99      	ldr	r3, [pc, #612]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d05b      	beq.n	8008140 <HAL_RCC_OscConfig+0x108>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d157      	bne.n	8008140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e236      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800809c:	d106      	bne.n	80080ac <HAL_RCC_OscConfig+0x74>
 800809e:	4b91      	ldr	r3, [pc, #580]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a90      	ldr	r2, [pc, #576]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80080a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e01d      	b.n	80080e8 <HAL_RCC_OscConfig+0xb0>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080b4:	d10c      	bne.n	80080d0 <HAL_RCC_OscConfig+0x98>
 80080b6:	4b8b      	ldr	r3, [pc, #556]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a8a      	ldr	r2, [pc, #552]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80080bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080c0:	6013      	str	r3, [r2, #0]
 80080c2:	4b88      	ldr	r3, [pc, #544]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a87      	ldr	r2, [pc, #540]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80080c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	e00b      	b.n	80080e8 <HAL_RCC_OscConfig+0xb0>
 80080d0:	4b84      	ldr	r3, [pc, #528]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a83      	ldr	r2, [pc, #524]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80080d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	4b81      	ldr	r3, [pc, #516]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a80      	ldr	r2, [pc, #512]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80080e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d013      	beq.n	8008118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f0:	f7fe fbf2 	bl	80068d8 <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080f8:	f7fe fbee 	bl	80068d8 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b64      	cmp	r3, #100	; 0x64
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e1fb      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800810a:	4b76      	ldr	r3, [pc, #472]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0f0      	beq.n	80080f8 <HAL_RCC_OscConfig+0xc0>
 8008116:	e014      	b.n	8008142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008118:	f7fe fbde 	bl	80068d8 <HAL_GetTick>
 800811c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008120:	f7fe fbda 	bl	80068d8 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b64      	cmp	r3, #100	; 0x64
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e1e7      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008132:	4b6c      	ldr	r3, [pc, #432]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f0      	bne.n	8008120 <HAL_RCC_OscConfig+0xe8>
 800813e:	e000      	b.n	8008142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d063      	beq.n	8008216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800814e:	4b65      	ldr	r3, [pc, #404]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f003 030c 	and.w	r3, r3, #12
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800815a:	4b62      	ldr	r3, [pc, #392]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008162:	2b08      	cmp	r3, #8
 8008164:	d11c      	bne.n	80081a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008166:	4b5f      	ldr	r3, [pc, #380]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d116      	bne.n	80081a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008172:	4b5c      	ldr	r3, [pc, #368]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <HAL_RCC_OscConfig+0x152>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d001      	beq.n	800818a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e1bb      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800818a:	4b56      	ldr	r3, [pc, #344]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	4952      	ldr	r1, [pc, #328]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 800819a:	4313      	orrs	r3, r2
 800819c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800819e:	e03a      	b.n	8008216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d020      	beq.n	80081ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081a8:	4b4f      	ldr	r3, [pc, #316]	; (80082e8 <HAL_RCC_OscConfig+0x2b0>)
 80081aa:	2201      	movs	r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ae:	f7fe fb93 	bl	80068d8 <HAL_GetTick>
 80081b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081b4:	e008      	b.n	80081c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081b6:	f7fe fb8f 	bl	80068d8 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d901      	bls.n	80081c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e19c      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081c8:	4b46      	ldr	r3, [pc, #280]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d0f0      	beq.n	80081b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081d4:	4b43      	ldr	r3, [pc, #268]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	4940      	ldr	r1, [pc, #256]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	600b      	str	r3, [r1, #0]
 80081e8:	e015      	b.n	8008216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081ea:	4b3f      	ldr	r3, [pc, #252]	; (80082e8 <HAL_RCC_OscConfig+0x2b0>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f0:	f7fe fb72 	bl	80068d8 <HAL_GetTick>
 80081f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081f6:	e008      	b.n	800820a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081f8:	f7fe fb6e 	bl	80068d8 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d901      	bls.n	800820a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e17b      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800820a:	4b36      	ldr	r3, [pc, #216]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1f0      	bne.n	80081f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0308 	and.w	r3, r3, #8
 800821e:	2b00      	cmp	r3, #0
 8008220:	d030      	beq.n	8008284 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d016      	beq.n	8008258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800822a:	4b30      	ldr	r3, [pc, #192]	; (80082ec <HAL_RCC_OscConfig+0x2b4>)
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008230:	f7fe fb52 	bl	80068d8 <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008238:	f7fe fb4e 	bl	80068d8 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e15b      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800824a:	4b26      	ldr	r3, [pc, #152]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 800824c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x200>
 8008256:	e015      	b.n	8008284 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008258:	4b24      	ldr	r3, [pc, #144]	; (80082ec <HAL_RCC_OscConfig+0x2b4>)
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800825e:	f7fe fb3b 	bl	80068d8 <HAL_GetTick>
 8008262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008264:	e008      	b.n	8008278 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008266:	f7fe fb37 	bl	80068d8 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b02      	cmp	r3, #2
 8008272:	d901      	bls.n	8008278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e144      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008278:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 800827a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1f0      	bne.n	8008266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80a0 	beq.w	80083d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008292:	2300      	movs	r3, #0
 8008294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008296:	4b13      	ldr	r3, [pc, #76]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10f      	bne.n	80082c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082a2:	2300      	movs	r3, #0
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80082a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082aa:	4a0e      	ldr	r2, [pc, #56]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80082ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b0:	6413      	str	r3, [r2, #64]	; 0x40
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <HAL_RCC_OscConfig+0x2ac>)
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ba:	60bb      	str	r3, [r7, #8]
 80082bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082be:	2301      	movs	r3, #1
 80082c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082c2:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <HAL_RCC_OscConfig+0x2b8>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d121      	bne.n	8008312 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082ce:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <HAL_RCC_OscConfig+0x2b8>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a07      	ldr	r2, [pc, #28]	; (80082f0 <HAL_RCC_OscConfig+0x2b8>)
 80082d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082da:	f7fe fafd 	bl	80068d8 <HAL_GetTick>
 80082de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082e0:	e011      	b.n	8008306 <HAL_RCC_OscConfig+0x2ce>
 80082e2:	bf00      	nop
 80082e4:	40023800 	.word	0x40023800
 80082e8:	42470000 	.word	0x42470000
 80082ec:	42470e80 	.word	0x42470e80
 80082f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082f4:	f7fe faf0 	bl	80068d8 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e0fd      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008306:	4b81      	ldr	r3, [pc, #516]	; (800850c <HAL_RCC_OscConfig+0x4d4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0f0      	beq.n	80082f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d106      	bne.n	8008328 <HAL_RCC_OscConfig+0x2f0>
 800831a:	4b7d      	ldr	r3, [pc, #500]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 800831c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831e:	4a7c      	ldr	r2, [pc, #496]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 8008320:	f043 0301 	orr.w	r3, r3, #1
 8008324:	6713      	str	r3, [r2, #112]	; 0x70
 8008326:	e01c      	b.n	8008362 <HAL_RCC_OscConfig+0x32a>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	2b05      	cmp	r3, #5
 800832e:	d10c      	bne.n	800834a <HAL_RCC_OscConfig+0x312>
 8008330:	4b77      	ldr	r3, [pc, #476]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 8008332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008334:	4a76      	ldr	r2, [pc, #472]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 8008336:	f043 0304 	orr.w	r3, r3, #4
 800833a:	6713      	str	r3, [r2, #112]	; 0x70
 800833c:	4b74      	ldr	r3, [pc, #464]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 800833e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008340:	4a73      	ldr	r2, [pc, #460]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 8008342:	f043 0301 	orr.w	r3, r3, #1
 8008346:	6713      	str	r3, [r2, #112]	; 0x70
 8008348:	e00b      	b.n	8008362 <HAL_RCC_OscConfig+0x32a>
 800834a:	4b71      	ldr	r3, [pc, #452]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 800834c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834e:	4a70      	ldr	r2, [pc, #448]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 8008350:	f023 0301 	bic.w	r3, r3, #1
 8008354:	6713      	str	r3, [r2, #112]	; 0x70
 8008356:	4b6e      	ldr	r3, [pc, #440]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 8008358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835a:	4a6d      	ldr	r2, [pc, #436]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 800835c:	f023 0304 	bic.w	r3, r3, #4
 8008360:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d015      	beq.n	8008396 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800836a:	f7fe fab5 	bl	80068d8 <HAL_GetTick>
 800836e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008370:	e00a      	b.n	8008388 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008372:	f7fe fab1 	bl	80068d8 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008380:	4293      	cmp	r3, r2
 8008382:	d901      	bls.n	8008388 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e0bc      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008388:	4b61      	ldr	r3, [pc, #388]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 800838a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0ee      	beq.n	8008372 <HAL_RCC_OscConfig+0x33a>
 8008394:	e014      	b.n	80083c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008396:	f7fe fa9f 	bl	80068d8 <HAL_GetTick>
 800839a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800839c:	e00a      	b.n	80083b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800839e:	f7fe fa9b 	bl	80068d8 <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d901      	bls.n	80083b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e0a6      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083b4:	4b56      	ldr	r3, [pc, #344]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 80083b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1ee      	bne.n	800839e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d105      	bne.n	80083d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083c6:	4b52      	ldr	r3, [pc, #328]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	4a51      	ldr	r2, [pc, #324]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 80083cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 8092 	beq.w	8008500 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083dc:	4b4c      	ldr	r3, [pc, #304]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f003 030c 	and.w	r3, r3, #12
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d05c      	beq.n	80084a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d141      	bne.n	8008474 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083f0:	4b48      	ldr	r3, [pc, #288]	; (8008514 <HAL_RCC_OscConfig+0x4dc>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083f6:	f7fe fa6f 	bl	80068d8 <HAL_GetTick>
 80083fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083fc:	e008      	b.n	8008410 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083fe:	f7fe fa6b 	bl	80068d8 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d901      	bls.n	8008410 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e078      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008410:	4b3f      	ldr	r3, [pc, #252]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1f0      	bne.n	80083fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69da      	ldr	r2, [r3, #28]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	019b      	lsls	r3, r3, #6
 800842c:	431a      	orrs	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	3b01      	subs	r3, #1
 8008436:	041b      	lsls	r3, r3, #16
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	061b      	lsls	r3, r3, #24
 8008440:	4933      	ldr	r1, [pc, #204]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 8008442:	4313      	orrs	r3, r2
 8008444:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008446:	4b33      	ldr	r3, [pc, #204]	; (8008514 <HAL_RCC_OscConfig+0x4dc>)
 8008448:	2201      	movs	r2, #1
 800844a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800844c:	f7fe fa44 	bl	80068d8 <HAL_GetTick>
 8008450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008452:	e008      	b.n	8008466 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008454:	f7fe fa40 	bl	80068d8 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	2b02      	cmp	r3, #2
 8008460:	d901      	bls.n	8008466 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e04d      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008466:	4b2a      	ldr	r3, [pc, #168]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0f0      	beq.n	8008454 <HAL_RCC_OscConfig+0x41c>
 8008472:	e045      	b.n	8008500 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008474:	4b27      	ldr	r3, [pc, #156]	; (8008514 <HAL_RCC_OscConfig+0x4dc>)
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800847a:	f7fe fa2d 	bl	80068d8 <HAL_GetTick>
 800847e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008480:	e008      	b.n	8008494 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008482:	f7fe fa29 	bl	80068d8 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b02      	cmp	r3, #2
 800848e:	d901      	bls.n	8008494 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e036      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008494:	4b1e      	ldr	r3, [pc, #120]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1f0      	bne.n	8008482 <HAL_RCC_OscConfig+0x44a>
 80084a0:	e02e      	b.n	8008500 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d101      	bne.n	80084ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e029      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084ae:	4b18      	ldr	r3, [pc, #96]	; (8008510 <HAL_RCC_OscConfig+0x4d8>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d11c      	bne.n	80084fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d115      	bne.n	80084fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084d6:	4013      	ands	r3, r2
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80084dc:	4293      	cmp	r3, r2
 80084de:	d10d      	bne.n	80084fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d106      	bne.n	80084fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d001      	beq.n	8008500 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	40007000 	.word	0x40007000
 8008510:	40023800 	.word	0x40023800
 8008514:	42470060 	.word	0x42470060

08008518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e0cc      	b.n	80086c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800852c:	4b68      	ldr	r3, [pc, #416]	; (80086d0 <HAL_RCC_ClockConfig+0x1b8>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 030f 	and.w	r3, r3, #15
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	429a      	cmp	r2, r3
 8008538:	d90c      	bls.n	8008554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800853a:	4b65      	ldr	r3, [pc, #404]	; (80086d0 <HAL_RCC_ClockConfig+0x1b8>)
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008542:	4b63      	ldr	r3, [pc, #396]	; (80086d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d001      	beq.n	8008554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e0b8      	b.n	80086c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d020      	beq.n	80085a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800856c:	4b59      	ldr	r3, [pc, #356]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	4a58      	ldr	r2, [pc, #352]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008584:	4b53      	ldr	r3, [pc, #332]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	4a52      	ldr	r2, [pc, #328]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 800858a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800858e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008590:	4b50      	ldr	r3, [pc, #320]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	494d      	ldr	r1, [pc, #308]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d044      	beq.n	8008638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d107      	bne.n	80085c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085b6:	4b47      	ldr	r3, [pc, #284]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d119      	bne.n	80085f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e07f      	b.n	80086c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d003      	beq.n	80085d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d107      	bne.n	80085e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085d6:	4b3f      	ldr	r3, [pc, #252]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e06f      	b.n	80086c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085e6:	4b3b      	ldr	r3, [pc, #236]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e067      	b.n	80086c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085f6:	4b37      	ldr	r3, [pc, #220]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f023 0203 	bic.w	r2, r3, #3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	4934      	ldr	r1, [pc, #208]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008604:	4313      	orrs	r3, r2
 8008606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008608:	f7fe f966 	bl	80068d8 <HAL_GetTick>
 800860c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800860e:	e00a      	b.n	8008626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008610:	f7fe f962 	bl	80068d8 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	f241 3288 	movw	r2, #5000	; 0x1388
 800861e:	4293      	cmp	r3, r2
 8008620:	d901      	bls.n	8008626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e04f      	b.n	80086c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008626:	4b2b      	ldr	r3, [pc, #172]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f003 020c 	and.w	r2, r3, #12
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	429a      	cmp	r2, r3
 8008636:	d1eb      	bne.n	8008610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008638:	4b25      	ldr	r3, [pc, #148]	; (80086d0 <HAL_RCC_ClockConfig+0x1b8>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 030f 	and.w	r3, r3, #15
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	429a      	cmp	r2, r3
 8008644:	d20c      	bcs.n	8008660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008646:	4b22      	ldr	r3, [pc, #136]	; (80086d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800864e:	4b20      	ldr	r3, [pc, #128]	; (80086d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	429a      	cmp	r2, r3
 800865a:	d001      	beq.n	8008660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e032      	b.n	80086c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d008      	beq.n	800867e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800866c:	4b19      	ldr	r3, [pc, #100]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	4916      	ldr	r1, [pc, #88]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 800867a:	4313      	orrs	r3, r2
 800867c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800868a:	4b12      	ldr	r3, [pc, #72]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	490e      	ldr	r1, [pc, #56]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 800869a:	4313      	orrs	r3, r2
 800869c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800869e:	f000 f821 	bl	80086e4 <HAL_RCC_GetSysClockFreq>
 80086a2:	4601      	mov	r1, r0
 80086a4:	4b0b      	ldr	r3, [pc, #44]	; (80086d4 <HAL_RCC_ClockConfig+0x1bc>)
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	091b      	lsrs	r3, r3, #4
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <HAL_RCC_ClockConfig+0x1c0>)
 80086b0:	5cd3      	ldrb	r3, [r2, r3]
 80086b2:	fa21 f303 	lsr.w	r3, r1, r3
 80086b6:	4a09      	ldr	r2, [pc, #36]	; (80086dc <HAL_RCC_ClockConfig+0x1c4>)
 80086b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <HAL_RCC_ClockConfig+0x1c8>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe f8c6 	bl	8006850 <HAL_InitTick>

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	40023c00 	.word	0x40023c00
 80086d4:	40023800 	.word	0x40023800
 80086d8:	0800eaf4 	.word	0x0800eaf4
 80086dc:	200014f0 	.word	0x200014f0
 80086e0:	2000150c 	.word	0x2000150c

080086e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	2300      	movs	r3, #0
 80086f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086fa:	4b50      	ldr	r3, [pc, #320]	; (800883c <HAL_RCC_GetSysClockFreq+0x158>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 030c 	and.w	r3, r3, #12
 8008702:	2b04      	cmp	r3, #4
 8008704:	d007      	beq.n	8008716 <HAL_RCC_GetSysClockFreq+0x32>
 8008706:	2b08      	cmp	r3, #8
 8008708:	d008      	beq.n	800871c <HAL_RCC_GetSysClockFreq+0x38>
 800870a:	2b00      	cmp	r3, #0
 800870c:	f040 808d 	bne.w	800882a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008710:	4b4b      	ldr	r3, [pc, #300]	; (8008840 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008712:	60bb      	str	r3, [r7, #8]
       break;
 8008714:	e08c      	b.n	8008830 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008716:	4b4b      	ldr	r3, [pc, #300]	; (8008844 <HAL_RCC_GetSysClockFreq+0x160>)
 8008718:	60bb      	str	r3, [r7, #8]
      break;
 800871a:	e089      	b.n	8008830 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800871c:	4b47      	ldr	r3, [pc, #284]	; (800883c <HAL_RCC_GetSysClockFreq+0x158>)
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008724:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008726:	4b45      	ldr	r3, [pc, #276]	; (800883c <HAL_RCC_GetSysClockFreq+0x158>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d023      	beq.n	800877a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008732:	4b42      	ldr	r3, [pc, #264]	; (800883c <HAL_RCC_GetSysClockFreq+0x158>)
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	099b      	lsrs	r3, r3, #6
 8008738:	f04f 0400 	mov.w	r4, #0
 800873c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008740:	f04f 0200 	mov.w	r2, #0
 8008744:	ea03 0501 	and.w	r5, r3, r1
 8008748:	ea04 0602 	and.w	r6, r4, r2
 800874c:	4a3d      	ldr	r2, [pc, #244]	; (8008844 <HAL_RCC_GetSysClockFreq+0x160>)
 800874e:	fb02 f106 	mul.w	r1, r2, r6
 8008752:	2200      	movs	r2, #0
 8008754:	fb02 f205 	mul.w	r2, r2, r5
 8008758:	440a      	add	r2, r1
 800875a:	493a      	ldr	r1, [pc, #232]	; (8008844 <HAL_RCC_GetSysClockFreq+0x160>)
 800875c:	fba5 0101 	umull	r0, r1, r5, r1
 8008760:	1853      	adds	r3, r2, r1
 8008762:	4619      	mov	r1, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f04f 0400 	mov.w	r4, #0
 800876a:	461a      	mov	r2, r3
 800876c:	4623      	mov	r3, r4
 800876e:	f7f8 fa6b 	bl	8000c48 <__aeabi_uldivmod>
 8008772:	4603      	mov	r3, r0
 8008774:	460c      	mov	r4, r1
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	e049      	b.n	800880e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800877a:	4b30      	ldr	r3, [pc, #192]	; (800883c <HAL_RCC_GetSysClockFreq+0x158>)
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	099b      	lsrs	r3, r3, #6
 8008780:	f04f 0400 	mov.w	r4, #0
 8008784:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	ea03 0501 	and.w	r5, r3, r1
 8008790:	ea04 0602 	and.w	r6, r4, r2
 8008794:	4629      	mov	r1, r5
 8008796:	4632      	mov	r2, r6
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	f04f 0400 	mov.w	r4, #0
 80087a0:	0154      	lsls	r4, r2, #5
 80087a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80087a6:	014b      	lsls	r3, r1, #5
 80087a8:	4619      	mov	r1, r3
 80087aa:	4622      	mov	r2, r4
 80087ac:	1b49      	subs	r1, r1, r5
 80087ae:	eb62 0206 	sbc.w	r2, r2, r6
 80087b2:	f04f 0300 	mov.w	r3, #0
 80087b6:	f04f 0400 	mov.w	r4, #0
 80087ba:	0194      	lsls	r4, r2, #6
 80087bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80087c0:	018b      	lsls	r3, r1, #6
 80087c2:	1a5b      	subs	r3, r3, r1
 80087c4:	eb64 0402 	sbc.w	r4, r4, r2
 80087c8:	f04f 0100 	mov.w	r1, #0
 80087cc:	f04f 0200 	mov.w	r2, #0
 80087d0:	00e2      	lsls	r2, r4, #3
 80087d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80087d6:	00d9      	lsls	r1, r3, #3
 80087d8:	460b      	mov	r3, r1
 80087da:	4614      	mov	r4, r2
 80087dc:	195b      	adds	r3, r3, r5
 80087de:	eb44 0406 	adc.w	r4, r4, r6
 80087e2:	f04f 0100 	mov.w	r1, #0
 80087e6:	f04f 0200 	mov.w	r2, #0
 80087ea:	02a2      	lsls	r2, r4, #10
 80087ec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80087f0:	0299      	lsls	r1, r3, #10
 80087f2:	460b      	mov	r3, r1
 80087f4:	4614      	mov	r4, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	4621      	mov	r1, r4
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f04f 0400 	mov.w	r4, #0
 8008800:	461a      	mov	r2, r3
 8008802:	4623      	mov	r3, r4
 8008804:	f7f8 fa20 	bl	8000c48 <__aeabi_uldivmod>
 8008808:	4603      	mov	r3, r0
 800880a:	460c      	mov	r4, r1
 800880c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800880e:	4b0b      	ldr	r3, [pc, #44]	; (800883c <HAL_RCC_GetSysClockFreq+0x158>)
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	0c1b      	lsrs	r3, r3, #16
 8008814:	f003 0303 	and.w	r3, r3, #3
 8008818:	3301      	adds	r3, #1
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	fbb2 f3f3 	udiv	r3, r2, r3
 8008826:	60bb      	str	r3, [r7, #8]
      break;
 8008828:	e002      	b.n	8008830 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800882a:	4b05      	ldr	r3, [pc, #20]	; (8008840 <HAL_RCC_GetSysClockFreq+0x15c>)
 800882c:	60bb      	str	r3, [r7, #8]
      break;
 800882e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008830:	68bb      	ldr	r3, [r7, #8]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800883a:	bf00      	nop
 800883c:	40023800 	.word	0x40023800
 8008840:	00f42400 	.word	0x00f42400
 8008844:	017d7840 	.word	0x017d7840

08008848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800884c:	4b03      	ldr	r3, [pc, #12]	; (800885c <HAL_RCC_GetHCLKFreq+0x14>)
 800884e:	681b      	ldr	r3, [r3, #0]
}
 8008850:	4618      	mov	r0, r3
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	200014f0 	.word	0x200014f0

08008860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008864:	f7ff fff0 	bl	8008848 <HAL_RCC_GetHCLKFreq>
 8008868:	4601      	mov	r1, r0
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	0a9b      	lsrs	r3, r3, #10
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	4a03      	ldr	r2, [pc, #12]	; (8008884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008876:	5cd3      	ldrb	r3, [r2, r3]
 8008878:	fa21 f303 	lsr.w	r3, r1, r3
}
 800887c:	4618      	mov	r0, r3
 800887e:	bd80      	pop	{r7, pc}
 8008880:	40023800 	.word	0x40023800
 8008884:	0800eb04 	.word	0x0800eb04

08008888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800888c:	f7ff ffdc 	bl	8008848 <HAL_RCC_GetHCLKFreq>
 8008890:	4601      	mov	r1, r0
 8008892:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	0b5b      	lsrs	r3, r3, #13
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	4a03      	ldr	r2, [pc, #12]	; (80088ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800889e:	5cd3      	ldrb	r3, [r2, r3]
 80088a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	40023800 	.word	0x40023800
 80088ac:	0800eb04 	.word	0x0800eb04

080088b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e056      	b.n	8008970 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d106      	bne.n	80088e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7fc ff0b 	bl	80056f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2202      	movs	r2, #2
 80088e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	431a      	orrs	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	431a      	orrs	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	431a      	orrs	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	ea42 0103 	orr.w	r1, r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	0c1b      	lsrs	r3, r3, #16
 8008940:	f003 0104 	and.w	r1, r3, #4
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	69da      	ldr	r2, [r3, #28]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800895e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b088      	sub	sp, #32
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	4613      	mov	r3, r2
 8008986:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008992:	2b01      	cmp	r3, #1
 8008994:	d101      	bne.n	800899a <HAL_SPI_Transmit+0x22>
 8008996:	2302      	movs	r3, #2
 8008998:	e11e      	b.n	8008bd8 <HAL_SPI_Transmit+0x260>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089a2:	f7fd ff99 	bl	80068d8 <HAL_GetTick>
 80089a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d002      	beq.n	80089be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80089b8:	2302      	movs	r3, #2
 80089ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089bc:	e103      	b.n	8008bc6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <HAL_SPI_Transmit+0x52>
 80089c4:	88fb      	ldrh	r3, [r7, #6]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d102      	bne.n	80089d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089ce:	e0fa      	b.n	8008bc6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2203      	movs	r2, #3
 80089d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	88fa      	ldrh	r2, [r7, #6]
 80089e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	88fa      	ldrh	r2, [r7, #6]
 80089ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a16:	d107      	bne.n	8008a28 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a32:	2b40      	cmp	r3, #64	; 0x40
 8008a34:	d007      	beq.n	8008a46 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a4e:	d14b      	bne.n	8008ae8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <HAL_SPI_Transmit+0xe6>
 8008a58:	8afb      	ldrh	r3, [r7, #22]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d13e      	bne.n	8008adc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a62:	881a      	ldrh	r2, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6e:	1c9a      	adds	r2, r3, #2
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a82:	e02b      	b.n	8008adc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d112      	bne.n	8008ab8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	881a      	ldrh	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	1c9a      	adds	r2, r3, #2
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ab6:	e011      	b.n	8008adc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ab8:	f7fd ff0e 	bl	80068d8 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d803      	bhi.n	8008ad0 <HAL_SPI_Transmit+0x158>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ace:	d102      	bne.n	8008ad6 <HAL_SPI_Transmit+0x15e>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d102      	bne.n	8008adc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ada:	e074      	b.n	8008bc6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1ce      	bne.n	8008a84 <HAL_SPI_Transmit+0x10c>
 8008ae6:	e04c      	b.n	8008b82 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <HAL_SPI_Transmit+0x17e>
 8008af0:	8afb      	ldrh	r3, [r7, #22]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d140      	bne.n	8008b78 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	330c      	adds	r3, #12
 8008b00:	7812      	ldrb	r2, [r2, #0]
 8008b02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	3b01      	subs	r3, #1
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008b1c:	e02c      	b.n	8008b78 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d113      	bne.n	8008b54 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	7812      	ldrb	r2, [r2, #0]
 8008b38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b52:	e011      	b.n	8008b78 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b54:	f7fd fec0 	bl	80068d8 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d803      	bhi.n	8008b6c <HAL_SPI_Transmit+0x1f4>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6a:	d102      	bne.n	8008b72 <HAL_SPI_Transmit+0x1fa>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d102      	bne.n	8008b78 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b76:	e026      	b.n	8008bc6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1cd      	bne.n	8008b1e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 fc94 	bl	80094b4 <SPI_EndRxTxTransaction>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2220      	movs	r2, #32
 8008b96:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	613b      	str	r3, [r7, #16]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	613b      	str	r3, [r7, #16]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	613b      	str	r3, [r7, #16]
 8008bb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	77fb      	strb	r3, [r7, #31]
 8008bc2:	e000      	b.n	8008bc6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008bc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008bd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3720      	adds	r7, #32
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08c      	sub	sp, #48	; 0x30
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d101      	bne.n	8008c06 <HAL_SPI_TransmitReceive+0x26>
 8008c02:	2302      	movs	r3, #2
 8008c04:	e18a      	b.n	8008f1c <HAL_SPI_TransmitReceive+0x33c>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c0e:	f7fd fe63 	bl	80068d8 <HAL_GetTick>
 8008c12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c24:	887b      	ldrh	r3, [r7, #2]
 8008c26:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d00f      	beq.n	8008c50 <HAL_SPI_TransmitReceive+0x70>
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c36:	d107      	bne.n	8008c48 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d103      	bne.n	8008c48 <HAL_SPI_TransmitReceive+0x68>
 8008c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	d003      	beq.n	8008c50 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c4e:	e15b      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <HAL_SPI_TransmitReceive+0x82>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <HAL_SPI_TransmitReceive+0x82>
 8008c5c:	887b      	ldrh	r3, [r7, #2]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d103      	bne.n	8008c6a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c68:	e14e      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d003      	beq.n	8008c7e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2205      	movs	r2, #5
 8008c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	887a      	ldrh	r2, [r7, #2]
 8008c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	887a      	ldrh	r2, [r7, #2]
 8008c94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	887a      	ldrh	r2, [r7, #2]
 8008ca0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	887a      	ldrh	r2, [r7, #2]
 8008ca6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cbe:	2b40      	cmp	r3, #64	; 0x40
 8008cc0:	d007      	beq.n	8008cd2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cda:	d178      	bne.n	8008dce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d002      	beq.n	8008cea <HAL_SPI_TransmitReceive+0x10a>
 8008ce4:	8b7b      	ldrh	r3, [r7, #26]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d166      	bne.n	8008db8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cee:	881a      	ldrh	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfa:	1c9a      	adds	r2, r3, #2
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	3b01      	subs	r3, #1
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d0e:	e053      	b.n	8008db8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d11b      	bne.n	8008d56 <HAL_SPI_TransmitReceive+0x176>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d016      	beq.n	8008d56 <HAL_SPI_TransmitReceive+0x176>
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d113      	bne.n	8008d56 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d32:	881a      	ldrh	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	1c9a      	adds	r2, r3, #2
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d119      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x1b8>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d014      	beq.n	8008d98 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68da      	ldr	r2, [r3, #12]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d78:	b292      	uxth	r2, r2
 8008d7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	1c9a      	adds	r2, r3, #2
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d94:	2301      	movs	r3, #1
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d98:	f7fd fd9e 	bl	80068d8 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d807      	bhi.n	8008db8 <HAL_SPI_TransmitReceive+0x1d8>
 8008da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dae:	d003      	beq.n	8008db8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008db6:	e0a7      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1a6      	bne.n	8008d10 <HAL_SPI_TransmitReceive+0x130>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1a1      	bne.n	8008d10 <HAL_SPI_TransmitReceive+0x130>
 8008dcc:	e07c      	b.n	8008ec8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <HAL_SPI_TransmitReceive+0x1fc>
 8008dd6:	8b7b      	ldrh	r3, [r7, #26]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d16b      	bne.n	8008eb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	330c      	adds	r3, #12
 8008de6:	7812      	ldrb	r2, [r2, #0]
 8008de8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e02:	e057      	b.n	8008eb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d11c      	bne.n	8008e4c <HAL_SPI_TransmitReceive+0x26c>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d017      	beq.n	8008e4c <HAL_SPI_TransmitReceive+0x26c>
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d114      	bne.n	8008e4c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	330c      	adds	r3, #12
 8008e2c:	7812      	ldrb	r2, [r2, #0]
 8008e2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d119      	bne.n	8008e8e <HAL_SPI_TransmitReceive+0x2ae>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d014      	beq.n	8008e8e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	b2d2      	uxtb	r2, r2
 8008e70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	1c5a      	adds	r2, r3, #1
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e8e:	f7fd fd23 	bl	80068d8 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d803      	bhi.n	8008ea6 <HAL_SPI_TransmitReceive+0x2c6>
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea4:	d102      	bne.n	8008eac <HAL_SPI_TransmitReceive+0x2cc>
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d103      	bne.n	8008eb4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008eb2:	e029      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1a2      	bne.n	8008e04 <HAL_SPI_TransmitReceive+0x224>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d19d      	bne.n	8008e04 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 faf1 	bl	80094b4 <SPI_EndRxTxTransaction>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d006      	beq.n	8008ee6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008ee4:	e010      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10b      	bne.n	8008f06 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008eee:	2300      	movs	r3, #0
 8008ef0:	617b      	str	r3, [r7, #20]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	617b      	str	r3, [r7, #20]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	e000      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008f06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3730      	adds	r7, #48	; 0x30
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d101      	bne.n	8008f44 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008f40:	2302      	movs	r3, #2
 8008f42:	e0e3      	b.n	800910c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f52:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008f5a:	7dbb      	ldrb	r3, [r7, #22]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d00d      	beq.n	8008f7c <HAL_SPI_TransmitReceive_DMA+0x58>
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f66:	d106      	bne.n	8008f76 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <HAL_SPI_TransmitReceive_DMA+0x52>
 8008f70:	7dbb      	ldrb	r3, [r7, #22]
 8008f72:	2b04      	cmp	r3, #4
 8008f74:	d002      	beq.n	8008f7c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008f76:	2302      	movs	r3, #2
 8008f78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f7a:	e0c2      	b.n	8009102 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008f88:	887b      	ldrh	r3, [r7, #2]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d102      	bne.n	8008f94 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f92:	e0b6      	b.n	8009102 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d003      	beq.n	8008fa8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2205      	movs	r2, #5
 8008fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	887a      	ldrh	r2, [r7, #2]
 8008fb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	887a      	ldrh	r2, [r7, #2]
 8008fbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	887a      	ldrh	r2, [r7, #2]
 8008fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	887a      	ldrh	r2, [r7, #2]
 8008fd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	d108      	bne.n	8008ffc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fee:	4a49      	ldr	r2, [pc, #292]	; (8009114 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8008ff0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff6:	4a48      	ldr	r2, [pc, #288]	; (8009118 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8008ff8:	63da      	str	r2, [r3, #60]	; 0x3c
 8008ffa:	e007      	b.n	800900c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009000:	4a46      	ldr	r2, [pc, #280]	; (800911c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8009002:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009008:	4a45      	ldr	r2, [pc, #276]	; (8009120 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800900a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009010:	4a44      	ldr	r2, [pc, #272]	; (8009124 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8009012:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009018:	2200      	movs	r2, #0
 800901a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	330c      	adds	r3, #12
 8009026:	4619      	mov	r1, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009032:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009034:	f7fe fa32 	bl	800749c <HAL_DMA_Start_IT>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00c      	beq.n	8009058 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009042:	f043 0210 	orr.w	r2, r3, #16
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8009056:	e054      	b.n	8009102 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800906c:	2200      	movs	r2, #0
 800906e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009074:	2200      	movs	r2, #0
 8009076:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800907c:	2200      	movs	r2, #0
 800907e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009084:	2200      	movs	r2, #0
 8009086:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009090:	4619      	mov	r1, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	330c      	adds	r3, #12
 8009098:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800909e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80090a0:	f7fe f9fc 	bl	800749c <HAL_DMA_Start_IT>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00c      	beq.n	80090c4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ae:	f043 0210 	orr.w	r2, r3, #16
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80090c2:	e01e      	b.n	8009102 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ce:	2b40      	cmp	r3, #64	; 0x40
 80090d0:	d007      	beq.n	80090e2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090e0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0220 	orr.w	r2, r2, #32
 80090f0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0202 	orr.w	r2, r2, #2
 8009100:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800910a:	7dfb      	ldrb	r3, [r7, #23]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	0800929d 	.word	0x0800929d
 8009118:	08009165 	.word	0x08009165
 800911c:	080092b9 	.word	0x080092b9
 8009120:	0800920d 	.word	0x0800920d
 8009124:	080092d5 	.word	0x080092d5

08009128 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009170:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009172:	f7fd fbb1 	bl	80068d8 <HAL_GetTick>
 8009176:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009186:	d03b      	beq.n	8009200 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 0220 	bic.w	r2, r2, #32
 8009196:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10d      	bne.n	80091bc <SPI_DMAReceiveCplt+0x58>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091a8:	d108      	bne.n	80091bc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0203 	bic.w	r2, r2, #3
 80091b8:	605a      	str	r2, [r3, #4]
 80091ba:	e007      	b.n	80091cc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f022 0201 	bic.w	r2, r2, #1
 80091ca:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	2164      	movs	r1, #100	; 0x64
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 f909 	bl	80093e8 <SPI_EndRxTransaction>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2220      	movs	r2, #32
 80091e0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f7ff ffa9 	bl	8009150 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80091fe:	e002      	b.n	8009206 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f7ff ff91 	bl	8009128 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009218:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800921a:	f7fd fb5d 	bl	80068d8 <HAL_GetTick>
 800921e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800922e:	d02f      	beq.n	8009290 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685a      	ldr	r2, [r3, #4]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f022 0220 	bic.w	r2, r2, #32
 800923e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	2164      	movs	r1, #100	; 0x64
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 f935 	bl	80094b4 <SPI_EndRxTxTransaction>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009254:	f043 0220 	orr.w	r2, r3, #32
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 0203 	bic.w	r2, r2, #3
 800926a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f7ff ff61 	bl	8009150 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800928e:	e002      	b.n	8009296 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7fb fd97 	bl	8004dc4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff ff46 	bl	800913c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092b0:	bf00      	nop
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f7fb fd92 	bl	8004df0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092cc:	bf00      	nop
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0203 	bic.w	r2, r2, #3
 80092f0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f6:	f043 0210 	orr.w	r2, r3, #16
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f7ff ff22 	bl	8009150 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800930c:	bf00      	nop
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	4613      	mov	r3, r2
 8009322:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009324:	e04c      	b.n	80093c0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932c:	d048      	beq.n	80093c0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800932e:	f7fd fad3 	bl	80068d8 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d902      	bls.n	8009344 <SPI_WaitFlagStateUntilTimeout+0x30>
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d13d      	bne.n	80093c0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009352:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800935c:	d111      	bne.n	8009382 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009366:	d004      	beq.n	8009372 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009370:	d107      	bne.n	8009382 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800938a:	d10f      	bne.n	80093ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	e00f      	b.n	80093e0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	4013      	ands	r3, r2
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	bf0c      	ite	eq
 80093d0:	2301      	moveq	r3, #1
 80093d2:	2300      	movne	r3, #0
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d1a3      	bne.n	8009326 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af02      	add	r7, sp, #8
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093fc:	d111      	bne.n	8009422 <SPI_EndRxTransaction+0x3a>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009406:	d004      	beq.n	8009412 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009410:	d107      	bne.n	8009422 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009420:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800942a:	d12a      	bne.n	8009482 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009434:	d012      	beq.n	800945c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2200      	movs	r2, #0
 800943e:	2180      	movs	r1, #128	; 0x80
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f7ff ff67 	bl	8009314 <SPI_WaitFlagStateUntilTimeout>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d02d      	beq.n	80094a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009450:	f043 0220 	orr.w	r2, r3, #32
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e026      	b.n	80094aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2200      	movs	r2, #0
 8009464:	2101      	movs	r1, #1
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f7ff ff54 	bl	8009314 <SPI_WaitFlagStateUntilTimeout>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d01a      	beq.n	80094a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009476:	f043 0220 	orr.w	r2, r3, #32
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e013      	b.n	80094aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2200      	movs	r2, #0
 800948a:	2101      	movs	r1, #1
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f7ff ff41 	bl	8009314 <SPI_WaitFlagStateUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949c:	f043 0220 	orr.w	r2, r3, #32
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e000      	b.n	80094aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af02      	add	r7, sp, #8
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80094c0:	4b1b      	ldr	r3, [pc, #108]	; (8009530 <SPI_EndRxTxTransaction+0x7c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a1b      	ldr	r2, [pc, #108]	; (8009534 <SPI_EndRxTxTransaction+0x80>)
 80094c6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ca:	0d5b      	lsrs	r3, r3, #21
 80094cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094d0:	fb02 f303 	mul.w	r3, r2, r3
 80094d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094de:	d112      	bne.n	8009506 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2200      	movs	r2, #0
 80094e8:	2180      	movs	r1, #128	; 0x80
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f7ff ff12 	bl	8009314 <SPI_WaitFlagStateUntilTimeout>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d016      	beq.n	8009524 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fa:	f043 0220 	orr.w	r2, r3, #32
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e00f      	b.n	8009526 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00a      	beq.n	8009522 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	3b01      	subs	r3, #1
 8009510:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951c:	2b80      	cmp	r3, #128	; 0x80
 800951e:	d0f2      	beq.n	8009506 <SPI_EndRxTxTransaction+0x52>
 8009520:	e000      	b.n	8009524 <SPI_EndRxTxTransaction+0x70>
        break;
 8009522:	bf00      	nop
  }

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	200014f0 	.word	0x200014f0
 8009534:	165e9f81 	.word	0x165e9f81

08009538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e01d      	b.n	8009586 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d106      	bne.n	8009564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7fc fc86 	bl	8005e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	3304      	adds	r3, #4
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f000 fb34 	bl	8009be4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e01d      	b.n	80095dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d106      	bne.n	80095ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f815 	bl	80095e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2202      	movs	r2, #2
 80095be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4619      	mov	r1, r3
 80095cc:	4610      	mov	r0, r2
 80095ce:	f000 fb09 	bl	8009be4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2201      	movs	r2, #1
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fdd4 	bl	800a1b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a15      	ldr	r2, [pc, #84]	; (800966c <HAL_TIM_PWM_Start+0x74>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d004      	beq.n	8009624 <HAL_TIM_PWM_Start+0x2c>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a14      	ldr	r2, [pc, #80]	; (8009670 <HAL_TIM_PWM_Start+0x78>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d101      	bne.n	8009628 <HAL_TIM_PWM_Start+0x30>
 8009624:	2301      	movs	r3, #1
 8009626:	e000      	b.n	800962a <HAL_TIM_PWM_Start+0x32>
 8009628:	2300      	movs	r3, #0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d007      	beq.n	800963e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800963c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b06      	cmp	r3, #6
 800964e:	d007      	beq.n	8009660 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0201 	orr.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	40010000 	.word	0x40010000
 8009670:	40010400 	.word	0x40010400

08009674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b02      	cmp	r3, #2
 8009688:	d122      	bne.n	80096d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b02      	cmp	r3, #2
 8009696:	d11b      	bne.n	80096d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f06f 0202 	mvn.w	r2, #2
 80096a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	f003 0303 	and.w	r3, r3, #3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fa75 	bl	8009ba6 <HAL_TIM_IC_CaptureCallback>
 80096bc:	e005      	b.n	80096ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa67 	bl	8009b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fa78 	bl	8009bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 0304 	and.w	r3, r3, #4
 80096da:	2b04      	cmp	r3, #4
 80096dc:	d122      	bne.n	8009724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d11b      	bne.n	8009724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f06f 0204 	mvn.w	r2, #4
 80096f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2202      	movs	r2, #2
 80096fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa4b 	bl	8009ba6 <HAL_TIM_IC_CaptureCallback>
 8009710:	e005      	b.n	800971e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa3d 	bl	8009b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fa4e 	bl	8009bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	f003 0308 	and.w	r3, r3, #8
 800972e:	2b08      	cmp	r3, #8
 8009730:	d122      	bne.n	8009778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	2b08      	cmp	r3, #8
 800973e:	d11b      	bne.n	8009778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f06f 0208 	mvn.w	r2, #8
 8009748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2204      	movs	r2, #4
 800974e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fa21 	bl	8009ba6 <HAL_TIM_IC_CaptureCallback>
 8009764:	e005      	b.n	8009772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fa13 	bl	8009b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fa24 	bl	8009bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	f003 0310 	and.w	r3, r3, #16
 8009782:	2b10      	cmp	r3, #16
 8009784:	d122      	bne.n	80097cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f003 0310 	and.w	r3, r3, #16
 8009790:	2b10      	cmp	r3, #16
 8009792:	d11b      	bne.n	80097cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f06f 0210 	mvn.w	r2, #16
 800979c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2208      	movs	r2, #8
 80097a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f9f7 	bl	8009ba6 <HAL_TIM_IC_CaptureCallback>
 80097b8:	e005      	b.n	80097c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f9e9 	bl	8009b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f9fa 	bl	8009bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d10e      	bne.n	80097f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d107      	bne.n	80097f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f06f 0201 	mvn.w	r2, #1
 80097f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f9c3 	bl	8009b7e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009802:	2b80      	cmp	r3, #128	; 0x80
 8009804:	d10e      	bne.n	8009824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009810:	2b80      	cmp	r3, #128	; 0x80
 8009812:	d107      	bne.n	8009824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800981c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fdc8 	bl	800a3b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982e:	2b40      	cmp	r3, #64	; 0x40
 8009830:	d10e      	bne.n	8009850 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b40      	cmp	r3, #64	; 0x40
 800983e:	d107      	bne.n	8009850 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f9bf 	bl	8009bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b20      	cmp	r3, #32
 800985c:	d10e      	bne.n	800987c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b20      	cmp	r3, #32
 800986a:	d107      	bne.n	800987c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f06f 0220 	mvn.w	r2, #32
 8009874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fd92 	bl	800a3a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009896:	2b01      	cmp	r3, #1
 8009898:	d101      	bne.n	800989e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800989a:	2302      	movs	r3, #2
 800989c:	e0b4      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x184>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2202      	movs	r2, #2
 80098aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b0c      	cmp	r3, #12
 80098b2:	f200 809f 	bhi.w	80099f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80098b6:	a201      	add	r2, pc, #4	; (adr r2, 80098bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80098b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098bc:	080098f1 	.word	0x080098f1
 80098c0:	080099f5 	.word	0x080099f5
 80098c4:	080099f5 	.word	0x080099f5
 80098c8:	080099f5 	.word	0x080099f5
 80098cc:	08009931 	.word	0x08009931
 80098d0:	080099f5 	.word	0x080099f5
 80098d4:	080099f5 	.word	0x080099f5
 80098d8:	080099f5 	.word	0x080099f5
 80098dc:	08009973 	.word	0x08009973
 80098e0:	080099f5 	.word	0x080099f5
 80098e4:	080099f5 	.word	0x080099f5
 80098e8:	080099f5 	.word	0x080099f5
 80098ec:	080099b3 	.word	0x080099b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68b9      	ldr	r1, [r7, #8]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 fa14 	bl	8009d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	699a      	ldr	r2, [r3, #24]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f042 0208 	orr.w	r2, r2, #8
 800990a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	699a      	ldr	r2, [r3, #24]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f022 0204 	bic.w	r2, r2, #4
 800991a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6999      	ldr	r1, [r3, #24]
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	691a      	ldr	r2, [r3, #16]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	619a      	str	r2, [r3, #24]
      break;
 800992e:	e062      	b.n	80099f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68b9      	ldr	r1, [r7, #8]
 8009936:	4618      	mov	r0, r3
 8009938:	f000 fa64 	bl	8009e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	699a      	ldr	r2, [r3, #24]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800994a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	699a      	ldr	r2, [r3, #24]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800995a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6999      	ldr	r1, [r3, #24]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	021a      	lsls	r2, r3, #8
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	430a      	orrs	r2, r1
 800996e:	619a      	str	r2, [r3, #24]
      break;
 8009970:	e041      	b.n	80099f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68b9      	ldr	r1, [r7, #8]
 8009978:	4618      	mov	r0, r3
 800997a:	f000 fab9 	bl	8009ef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	69da      	ldr	r2, [r3, #28]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f042 0208 	orr.w	r2, r2, #8
 800998c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69da      	ldr	r2, [r3, #28]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f022 0204 	bic.w	r2, r2, #4
 800999c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	69d9      	ldr	r1, [r3, #28]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	691a      	ldr	r2, [r3, #16]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	61da      	str	r2, [r3, #28]
      break;
 80099b0:	e021      	b.n	80099f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68b9      	ldr	r1, [r7, #8]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 fb0d 	bl	8009fd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69da      	ldr	r2, [r3, #28]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	69da      	ldr	r2, [r3, #28]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	69d9      	ldr	r1, [r3, #28]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	021a      	lsls	r2, r3, #8
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	61da      	str	r2, [r3, #28]
      break;
 80099f2:	e000      	b.n	80099f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80099f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d101      	bne.n	8009a28 <HAL_TIM_ConfigClockSource+0x18>
 8009a24:	2302      	movs	r3, #2
 8009a26:	e0a6      	b.n	8009b76 <HAL_TIM_ConfigClockSource+0x166>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2202      	movs	r2, #2
 8009a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b40      	cmp	r3, #64	; 0x40
 8009a5e:	d067      	beq.n	8009b30 <HAL_TIM_ConfigClockSource+0x120>
 8009a60:	2b40      	cmp	r3, #64	; 0x40
 8009a62:	d80b      	bhi.n	8009a7c <HAL_TIM_ConfigClockSource+0x6c>
 8009a64:	2b10      	cmp	r3, #16
 8009a66:	d073      	beq.n	8009b50 <HAL_TIM_ConfigClockSource+0x140>
 8009a68:	2b10      	cmp	r3, #16
 8009a6a:	d802      	bhi.n	8009a72 <HAL_TIM_ConfigClockSource+0x62>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d06f      	beq.n	8009b50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009a70:	e078      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a72:	2b20      	cmp	r3, #32
 8009a74:	d06c      	beq.n	8009b50 <HAL_TIM_ConfigClockSource+0x140>
 8009a76:	2b30      	cmp	r3, #48	; 0x30
 8009a78:	d06a      	beq.n	8009b50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009a7a:	e073      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a7c:	2b70      	cmp	r3, #112	; 0x70
 8009a7e:	d00d      	beq.n	8009a9c <HAL_TIM_ConfigClockSource+0x8c>
 8009a80:	2b70      	cmp	r3, #112	; 0x70
 8009a82:	d804      	bhi.n	8009a8e <HAL_TIM_ConfigClockSource+0x7e>
 8009a84:	2b50      	cmp	r3, #80	; 0x50
 8009a86:	d033      	beq.n	8009af0 <HAL_TIM_ConfigClockSource+0xe0>
 8009a88:	2b60      	cmp	r3, #96	; 0x60
 8009a8a:	d041      	beq.n	8009b10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009a8c:	e06a      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a92:	d066      	beq.n	8009b62 <HAL_TIM_ConfigClockSource+0x152>
 8009a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a98:	d017      	beq.n	8009aca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009a9a:	e063      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	6899      	ldr	r1, [r3, #8]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	f000 fb64 	bl	800a178 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009abe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	609a      	str	r2, [r3, #8]
      break;
 8009ac8:	e04c      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	6899      	ldr	r1, [r3, #8]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	f000 fb4d 	bl	800a178 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689a      	ldr	r2, [r3, #8]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009aec:	609a      	str	r2, [r3, #8]
      break;
 8009aee:	e039      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6818      	ldr	r0, [r3, #0]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	6859      	ldr	r1, [r3, #4]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	461a      	mov	r2, r3
 8009afe:	f000 fac1 	bl	800a084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2150      	movs	r1, #80	; 0x50
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 fb1a 	bl	800a142 <TIM_ITRx_SetConfig>
      break;
 8009b0e:	e029      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6818      	ldr	r0, [r3, #0]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	6859      	ldr	r1, [r3, #4]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	f000 fae0 	bl	800a0e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2160      	movs	r1, #96	; 0x60
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 fb0a 	bl	800a142 <TIM_ITRx_SetConfig>
      break;
 8009b2e:	e019      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6818      	ldr	r0, [r3, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6859      	ldr	r1, [r3, #4]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	f000 faa1 	bl	800a084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2140      	movs	r1, #64	; 0x40
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 fafa 	bl	800a142 <TIM_ITRx_SetConfig>
      break;
 8009b4e:	e009      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	f000 faf1 	bl	800a142 <TIM_ITRx_SetConfig>
      break;
 8009b60:	e000      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b083      	sub	sp, #12
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bae:	bf00      	nop
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bc2:	bf00      	nop
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b083      	sub	sp, #12
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
	...

08009be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a40      	ldr	r2, [pc, #256]	; (8009cf8 <TIM_Base_SetConfig+0x114>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d013      	beq.n	8009c24 <TIM_Base_SetConfig+0x40>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c02:	d00f      	beq.n	8009c24 <TIM_Base_SetConfig+0x40>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a3d      	ldr	r2, [pc, #244]	; (8009cfc <TIM_Base_SetConfig+0x118>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00b      	beq.n	8009c24 <TIM_Base_SetConfig+0x40>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a3c      	ldr	r2, [pc, #240]	; (8009d00 <TIM_Base_SetConfig+0x11c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d007      	beq.n	8009c24 <TIM_Base_SetConfig+0x40>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a3b      	ldr	r2, [pc, #236]	; (8009d04 <TIM_Base_SetConfig+0x120>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d003      	beq.n	8009c24 <TIM_Base_SetConfig+0x40>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a3a      	ldr	r2, [pc, #232]	; (8009d08 <TIM_Base_SetConfig+0x124>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d108      	bne.n	8009c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a2f      	ldr	r2, [pc, #188]	; (8009cf8 <TIM_Base_SetConfig+0x114>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d02b      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c44:	d027      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a2c      	ldr	r2, [pc, #176]	; (8009cfc <TIM_Base_SetConfig+0x118>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d023      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a2b      	ldr	r2, [pc, #172]	; (8009d00 <TIM_Base_SetConfig+0x11c>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d01f      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a2a      	ldr	r2, [pc, #168]	; (8009d04 <TIM_Base_SetConfig+0x120>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d01b      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a29      	ldr	r2, [pc, #164]	; (8009d08 <TIM_Base_SetConfig+0x124>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d017      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a28      	ldr	r2, [pc, #160]	; (8009d0c <TIM_Base_SetConfig+0x128>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d013      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a27      	ldr	r2, [pc, #156]	; (8009d10 <TIM_Base_SetConfig+0x12c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d00f      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a26      	ldr	r2, [pc, #152]	; (8009d14 <TIM_Base_SetConfig+0x130>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d00b      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a25      	ldr	r2, [pc, #148]	; (8009d18 <TIM_Base_SetConfig+0x134>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d007      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a24      	ldr	r2, [pc, #144]	; (8009d1c <TIM_Base_SetConfig+0x138>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d003      	beq.n	8009c96 <TIM_Base_SetConfig+0xb2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a23      	ldr	r2, [pc, #140]	; (8009d20 <TIM_Base_SetConfig+0x13c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d108      	bne.n	8009ca8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a0a      	ldr	r2, [pc, #40]	; (8009cf8 <TIM_Base_SetConfig+0x114>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d003      	beq.n	8009cdc <TIM_Base_SetConfig+0xf8>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a0c      	ldr	r2, [pc, #48]	; (8009d08 <TIM_Base_SetConfig+0x124>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d103      	bne.n	8009ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	691a      	ldr	r2, [r3, #16]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	615a      	str	r2, [r3, #20]
}
 8009cea:	bf00      	nop
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40010000 	.word	0x40010000
 8009cfc:	40000400 	.word	0x40000400
 8009d00:	40000800 	.word	0x40000800
 8009d04:	40000c00 	.word	0x40000c00
 8009d08:	40010400 	.word	0x40010400
 8009d0c:	40014000 	.word	0x40014000
 8009d10:	40014400 	.word	0x40014400
 8009d14:	40014800 	.word	0x40014800
 8009d18:	40001800 	.word	0x40001800
 8009d1c:	40001c00 	.word	0x40001c00
 8009d20:	40002000 	.word	0x40002000

08009d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b087      	sub	sp, #28
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	f023 0201 	bic.w	r2, r3, #1
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0303 	bic.w	r3, r3, #3
 8009d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f023 0302 	bic.w	r3, r3, #2
 8009d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a20      	ldr	r2, [pc, #128]	; (8009dfc <TIM_OC1_SetConfig+0xd8>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d003      	beq.n	8009d88 <TIM_OC1_SetConfig+0x64>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a1f      	ldr	r2, [pc, #124]	; (8009e00 <TIM_OC1_SetConfig+0xdc>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d10c      	bne.n	8009da2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f023 0308 	bic.w	r3, r3, #8
 8009d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f023 0304 	bic.w	r3, r3, #4
 8009da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a15      	ldr	r2, [pc, #84]	; (8009dfc <TIM_OC1_SetConfig+0xd8>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d003      	beq.n	8009db2 <TIM_OC1_SetConfig+0x8e>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a14      	ldr	r2, [pc, #80]	; (8009e00 <TIM_OC1_SetConfig+0xdc>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d111      	bne.n	8009dd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	621a      	str	r2, [r3, #32]
}
 8009df0:	bf00      	nop
 8009df2:	371c      	adds	r7, #28
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	40010000 	.word	0x40010000
 8009e00:	40010400 	.word	0x40010400

08009e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	f023 0210 	bic.w	r2, r3, #16
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	021b      	lsls	r3, r3, #8
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f023 0320 	bic.w	r3, r3, #32
 8009e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	011b      	lsls	r3, r3, #4
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a22      	ldr	r2, [pc, #136]	; (8009ee8 <TIM_OC2_SetConfig+0xe4>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d003      	beq.n	8009e6c <TIM_OC2_SetConfig+0x68>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a21      	ldr	r2, [pc, #132]	; (8009eec <TIM_OC2_SetConfig+0xe8>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d10d      	bne.n	8009e88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	011b      	lsls	r3, r3, #4
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a17      	ldr	r2, [pc, #92]	; (8009ee8 <TIM_OC2_SetConfig+0xe4>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d003      	beq.n	8009e98 <TIM_OC2_SetConfig+0x94>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a16      	ldr	r2, [pc, #88]	; (8009eec <TIM_OC2_SetConfig+0xe8>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d113      	bne.n	8009ec0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	621a      	str	r2, [r3, #32]
}
 8009eda:	bf00      	nop
 8009edc:	371c      	adds	r7, #28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	40010000 	.word	0x40010000
 8009eec:	40010400 	.word	0x40010400

08009ef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f023 0303 	bic.w	r3, r3, #3
 8009f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	021b      	lsls	r3, r3, #8
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a21      	ldr	r2, [pc, #132]	; (8009fd0 <TIM_OC3_SetConfig+0xe0>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d003      	beq.n	8009f56 <TIM_OC3_SetConfig+0x66>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a20      	ldr	r2, [pc, #128]	; (8009fd4 <TIM_OC3_SetConfig+0xe4>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d10d      	bne.n	8009f72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a16      	ldr	r2, [pc, #88]	; (8009fd0 <TIM_OC3_SetConfig+0xe0>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d003      	beq.n	8009f82 <TIM_OC3_SetConfig+0x92>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a15      	ldr	r2, [pc, #84]	; (8009fd4 <TIM_OC3_SetConfig+0xe4>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d113      	bne.n	8009faa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	011b      	lsls	r3, r3, #4
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	621a      	str	r2, [r3, #32]
}
 8009fc4:	bf00      	nop
 8009fc6:	371c      	adds	r7, #28
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	40010000 	.word	0x40010000
 8009fd4:	40010400 	.word	0x40010400

08009fd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	021b      	lsls	r3, r3, #8
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	4313      	orrs	r3, r2
 800a01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	031b      	lsls	r3, r3, #12
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a12      	ldr	r2, [pc, #72]	; (800a07c <TIM_OC4_SetConfig+0xa4>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d003      	beq.n	800a040 <TIM_OC4_SetConfig+0x68>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a11      	ldr	r2, [pc, #68]	; (800a080 <TIM_OC4_SetConfig+0xa8>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d109      	bne.n	800a054 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a046:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	019b      	lsls	r3, r3, #6
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	4313      	orrs	r3, r2
 800a052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	621a      	str	r2, [r3, #32]
}
 800a06e:	bf00      	nop
 800a070:	371c      	adds	r7, #28
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	40010000 	.word	0x40010000
 800a080:	40010400 	.word	0x40010400

0800a084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6a1b      	ldr	r3, [r3, #32]
 800a094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	f023 0201 	bic.w	r2, r3, #1
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f023 030a 	bic.w	r3, r3, #10
 800a0c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	621a      	str	r2, [r3, #32]
}
 800a0d6:	bf00      	nop
 800a0d8:	371c      	adds	r7, #28
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b087      	sub	sp, #28
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	f023 0210 	bic.w	r2, r3, #16
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a10c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	031b      	lsls	r3, r3, #12
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	4313      	orrs	r3, r2
 800a116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a11e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	011b      	lsls	r3, r3, #4
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	4313      	orrs	r3, r2
 800a128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	621a      	str	r2, [r3, #32]
}
 800a136:	bf00      	nop
 800a138:	371c      	adds	r7, #28
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a142:	b480      	push	{r7}
 800a144:	b085      	sub	sp, #20
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4313      	orrs	r3, r2
 800a160:	f043 0307 	orr.w	r3, r3, #7
 800a164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	609a      	str	r2, [r3, #8]
}
 800a16c:	bf00      	nop
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	021a      	lsls	r2, r3, #8
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	609a      	str	r2, [r3, #8]
}
 800a1ac:	bf00      	nop
 800a1ae:	371c      	adds	r7, #28
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f003 031f 	and.w	r3, r3, #31
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6a1a      	ldr	r2, [r3, #32]
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	43db      	mvns	r3, r3
 800a1da:	401a      	ands	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6a1a      	ldr	r2, [r3, #32]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f003 031f 	and.w	r3, r3, #31
 800a1ea:	6879      	ldr	r1, [r7, #4]
 800a1ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	621a      	str	r2, [r3, #32]
}
 800a1f6:	bf00      	nop
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
	...

0800a204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a214:	2b01      	cmp	r3, #1
 800a216:	d101      	bne.n	800a21c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a218:	2302      	movs	r3, #2
 800a21a:	e05a      	b.n	800a2d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a21      	ldr	r2, [pc, #132]	; (800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d022      	beq.n	800a2a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a268:	d01d      	beq.n	800a2a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a1d      	ldr	r2, [pc, #116]	; (800a2e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d018      	beq.n	800a2a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a1b      	ldr	r2, [pc, #108]	; (800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d013      	beq.n	800a2a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a1a      	ldr	r2, [pc, #104]	; (800a2ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d00e      	beq.n	800a2a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a18      	ldr	r2, [pc, #96]	; (800a2f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d009      	beq.n	800a2a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a17      	ldr	r2, [pc, #92]	; (800a2f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d004      	beq.n	800a2a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a15      	ldr	r2, [pc, #84]	; (800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d10c      	bne.n	800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	40010000 	.word	0x40010000
 800a2e4:	40000400 	.word	0x40000400
 800a2e8:	40000800 	.word	0x40000800
 800a2ec:	40000c00 	.word	0x40000c00
 800a2f0:	40010400 	.word	0x40010400
 800a2f4:	40014000 	.word	0x40014000
 800a2f8:	40001800 	.word	0x40001800

0800a2fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a306:	2300      	movs	r3, #0
 800a308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a310:	2b01      	cmp	r3, #1
 800a312:	d101      	bne.n	800a318 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a314:	2302      	movs	r3, #2
 800a316:	e03d      	b.n	800a394 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	4313      	orrs	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	4313      	orrs	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	4313      	orrs	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e03f      	b.n	800a45a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7fb fe32 	bl	8006058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2224      	movs	r2, #36	; 0x24
 800a3f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a40a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fdb5 	bl	800af7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	691a      	ldr	r2, [r3, #16]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	695a      	ldr	r2, [r3, #20]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68da      	ldr	r2, [r3, #12]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2220      	movs	r2, #32
 800a454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b088      	sub	sp, #32
 800a466:	af02      	add	r7, sp, #8
 800a468:	60f8      	str	r0, [r7, #12]
 800a46a:	60b9      	str	r1, [r7, #8]
 800a46c:	603b      	str	r3, [r7, #0]
 800a46e:	4613      	mov	r3, r2
 800a470:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b20      	cmp	r3, #32
 800a480:	f040 8083 	bne.w	800a58a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <HAL_UART_Transmit+0x2e>
 800a48a:	88fb      	ldrh	r3, [r7, #6]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e07b      	b.n	800a58c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d101      	bne.n	800a4a2 <HAL_UART_Transmit+0x40>
 800a49e:	2302      	movs	r3, #2
 800a4a0:	e074      	b.n	800a58c <HAL_UART_Transmit+0x12a>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2221      	movs	r2, #33	; 0x21
 800a4b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a4b8:	f7fc fa0e 	bl	80068d8 <HAL_GetTick>
 800a4bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	88fa      	ldrh	r2, [r7, #6]
 800a4c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a4d2:	e042      	b.n	800a55a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ea:	d122      	bne.n	800a532 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2180      	movs	r1, #128	; 0x80
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 fbbf 	bl	800ac7a <UART_WaitOnFlagUntilTimeout>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e042      	b.n	800a58c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a518:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d103      	bne.n	800a52a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	3302      	adds	r3, #2
 800a526:	60bb      	str	r3, [r7, #8]
 800a528:	e017      	b.n	800a55a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	3301      	adds	r3, #1
 800a52e:	60bb      	str	r3, [r7, #8]
 800a530:	e013      	b.n	800a55a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2200      	movs	r2, #0
 800a53a:	2180      	movs	r1, #128	; 0x80
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 fb9c 	bl	800ac7a <UART_WaitOnFlagUntilTimeout>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e01f      	b.n	800a58c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	60ba      	str	r2, [r7, #8]
 800a552:	781a      	ldrb	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a55e:	b29b      	uxth	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1b7      	bne.n	800a4d4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	2200      	movs	r2, #0
 800a56c:	2140      	movs	r1, #64	; 0x40
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 fb83 	bl	800ac7a <UART_WaitOnFlagUntilTimeout>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e006      	b.n	800a58c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2220      	movs	r2, #32
 800a582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	e000      	b.n	800a58c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a58a:	2302      	movs	r3, #2
  }
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af02      	add	r7, sp, #8
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b20      	cmp	r3, #32
 800a5b2:	f040 8090 	bne.w	800a6d6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <HAL_UART_Receive+0x2e>
 800a5bc:	88fb      	ldrh	r3, [r7, #6]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e088      	b.n	800a6d8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d101      	bne.n	800a5d4 <HAL_UART_Receive+0x40>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	e081      	b.n	800a6d8 <HAL_UART_Receive+0x144>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2222      	movs	r2, #34	; 0x22
 800a5e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a5ea:	f7fc f975 	bl	80068d8 <HAL_GetTick>
 800a5ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	88fa      	ldrh	r2, [r7, #6]
 800a5f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	88fa      	ldrh	r2, [r7, #6]
 800a5fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a604:	e05c      	b.n	800a6c0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3b01      	subs	r3, #1
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a61c:	d12b      	bne.n	800a676 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2200      	movs	r2, #0
 800a626:	2120      	movs	r1, #32
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 fb26 	bl	800ac7a <UART_WaitOnFlagUntilTimeout>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800a634:	2303      	movs	r3, #3
 800a636:	e04f      	b.n	800a6d8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10c      	bne.n	800a65e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a650:	b29a      	uxth	r2, r3
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	3302      	adds	r3, #2
 800a65a:	60bb      	str	r3, [r7, #8]
 800a65c:	e030      	b.n	800a6c0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	b29b      	uxth	r3, r3
 800a666:	b2db      	uxtb	r3, r3
 800a668:	b29a      	uxth	r2, r3
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	3301      	adds	r3, #1
 800a672:	60bb      	str	r3, [r7, #8]
 800a674:	e024      	b.n	800a6c0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2200      	movs	r2, #0
 800a67e:	2120      	movs	r1, #32
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 fafa 	bl	800ac7a <UART_WaitOnFlagUntilTimeout>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e023      	b.n	800a6d8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d108      	bne.n	800a6aa <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6859      	ldr	r1, [r3, #4]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	60ba      	str	r2, [r7, #8]
 800a6a4:	b2ca      	uxtb	r2, r1
 800a6a6:	701a      	strb	r2, [r3, #0]
 800a6a8:	e00a      	b.n	800a6c0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	1c59      	adds	r1, r3, #1
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a6bc:	b2d2      	uxtb	r2, r2
 800a6be:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d19d      	bne.n	800a606 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2220      	movs	r2, #32
 800a6ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	e000      	b.n	800a6d8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a6d6:	2302      	movs	r3, #2
  }
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b20      	cmp	r3, #32
 800a6f8:	d153      	bne.n	800a7a2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d002      	beq.n	800a706 <HAL_UART_Transmit_DMA+0x26>
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e04c      	b.n	800a7a4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a710:	2b01      	cmp	r3, #1
 800a712:	d101      	bne.n	800a718 <HAL_UART_Transmit_DMA+0x38>
 800a714:	2302      	movs	r3, #2
 800a716:	e045      	b.n	800a7a4 <HAL_UART_Transmit_DMA+0xc4>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	88fa      	ldrh	r2, [r7, #6]
 800a72a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	88fa      	ldrh	r2, [r7, #6]
 800a730:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2221      	movs	r2, #33	; 0x21
 800a73c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a744:	4a19      	ldr	r2, [pc, #100]	; (800a7ac <HAL_UART_Transmit_DMA+0xcc>)
 800a746:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74c:	4a18      	ldr	r2, [pc, #96]	; (800a7b0 <HAL_UART_Transmit_DMA+0xd0>)
 800a74e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a754:	4a17      	ldr	r2, [pc, #92]	; (800a7b4 <HAL_UART_Transmit_DMA+0xd4>)
 800a756:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75c:	2200      	movs	r2, #0
 800a75e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a760:	f107 0308 	add.w	r3, r7, #8
 800a764:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	6819      	ldr	r1, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3304      	adds	r3, #4
 800a774:	461a      	mov	r2, r3
 800a776:	88fb      	ldrh	r3, [r7, #6]
 800a778:	f7fc fe90 	bl	800749c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a784:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	695a      	ldr	r2, [r3, #20]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a79c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	e000      	b.n	800a7a4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800a7a2:	2302      	movs	r3, #2
  }
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	0800aaf5 	.word	0x0800aaf5
 800a7b0:	0800ab47 	.word	0x0800ab47
 800a7b4:	0800abe7 	.word	0x0800abe7

0800a7b8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b20      	cmp	r3, #32
 800a7d0:	d166      	bne.n	800a8a0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d002      	beq.n	800a7de <HAL_UART_Receive_DMA+0x26>
 800a7d8:	88fb      	ldrh	r3, [r7, #6]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d101      	bne.n	800a7e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e05f      	b.n	800a8a2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d101      	bne.n	800a7f0 <HAL_UART_Receive_DMA+0x38>
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	e058      	b.n	800a8a2 <HAL_UART_Receive_DMA+0xea>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	88fa      	ldrh	r2, [r7, #6]
 800a802:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2222      	movs	r2, #34	; 0x22
 800a80e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a816:	4a25      	ldr	r2, [pc, #148]	; (800a8ac <HAL_UART_Receive_DMA+0xf4>)
 800a818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81e:	4a24      	ldr	r2, [pc, #144]	; (800a8b0 <HAL_UART_Receive_DMA+0xf8>)
 800a820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a826:	4a23      	ldr	r2, [pc, #140]	; (800a8b4 <HAL_UART_Receive_DMA+0xfc>)
 800a828:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82e:	2200      	movs	r2, #0
 800a830:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800a832:	f107 0308 	add.w	r3, r7, #8
 800a836:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3304      	adds	r3, #4
 800a842:	4619      	mov	r1, r3
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	88fb      	ldrh	r3, [r7, #6]
 800a84a:	f7fc fe27 	bl	800749c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a84e:	2300      	movs	r3, #0
 800a850:	613b      	str	r3, [r7, #16]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	613b      	str	r3, [r7, #16]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68da      	ldr	r2, [r3, #12]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a87a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	695a      	ldr	r2, [r3, #20]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0201 	orr.w	r2, r2, #1
 800a88a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	695a      	ldr	r2, [r3, #20]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a89a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	e000      	b.n	800a8a2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a8a0:	2302      	movs	r3, #2
  }
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	0800ab63 	.word	0x0800ab63
 800a8b0:	0800abcb 	.word	0x0800abcb
 800a8b4:	0800abe7 	.word	0x0800abe7

0800a8b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b088      	sub	sp, #32
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	f003 030f 	and.w	r3, r3, #15
 800a8e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10d      	bne.n	800a90a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	f003 0320 	and.w	r3, r3, #32
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d008      	beq.n	800a90a <HAL_UART_IRQHandler+0x52>
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fab9 	bl	800ae7a <UART_Receive_IT>
      return;
 800a908:	e0d1      	b.n	800aaae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 80b0 	beq.w	800aa72 <HAL_UART_IRQHandler+0x1ba>
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f003 0301 	and.w	r3, r3, #1
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d105      	bne.n	800a928 <HAL_UART_IRQHandler+0x70>
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 80a5 	beq.w	800aa72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	f003 0301 	and.w	r3, r3, #1
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00a      	beq.n	800a948 <HAL_UART_IRQHandler+0x90>
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d005      	beq.n	800a948 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a940:	f043 0201 	orr.w	r2, r3, #1
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	f003 0304 	and.w	r3, r3, #4
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00a      	beq.n	800a968 <HAL_UART_IRQHandler+0xb0>
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d005      	beq.n	800a968 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a960:	f043 0202 	orr.w	r2, r3, #2
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	f003 0302 	and.w	r3, r3, #2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00a      	beq.n	800a988 <HAL_UART_IRQHandler+0xd0>
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d005      	beq.n	800a988 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a980:	f043 0204 	orr.w	r2, r3, #4
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	f003 0308 	and.w	r3, r3, #8
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00f      	beq.n	800a9b2 <HAL_UART_IRQHandler+0xfa>
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	f003 0320 	and.w	r3, r3, #32
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d104      	bne.n	800a9a6 <HAL_UART_IRQHandler+0xee>
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d005      	beq.n	800a9b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9aa:	f043 0208 	orr.w	r2, r3, #8
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d078      	beq.n	800aaac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	f003 0320 	and.w	r3, r3, #32
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d007      	beq.n	800a9d4 <HAL_UART_IRQHandler+0x11c>
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	f003 0320 	and.w	r3, r3, #32
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fa53 	bl	800ae7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9de:	2b40      	cmp	r3, #64	; 0x40
 800a9e0:	bf0c      	ite	eq
 800a9e2:	2301      	moveq	r3, #1
 800a9e4:	2300      	movne	r3, #0
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d102      	bne.n	800a9fc <HAL_UART_IRQHandler+0x144>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d031      	beq.n	800aa60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f99c 	bl	800ad3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	695b      	ldr	r3, [r3, #20]
 800aa08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0c:	2b40      	cmp	r3, #64	; 0x40
 800aa0e:	d123      	bne.n	800aa58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	695a      	ldr	r2, [r3, #20]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d013      	beq.n	800aa50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2c:	4a21      	ldr	r2, [pc, #132]	; (800aab4 <HAL_UART_IRQHandler+0x1fc>)
 800aa2e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fc fd89 	bl	800754c <HAL_DMA_Abort_IT>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d016      	beq.n	800aa6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa4e:	e00e      	b.n	800aa6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f845 	bl	800aae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa56:	e00a      	b.n	800aa6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f841 	bl	800aae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa5e:	e006      	b.n	800aa6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f83d 	bl	800aae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800aa6c:	e01e      	b.n	800aaac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa6e:	bf00      	nop
    return;
 800aa70:	e01c      	b.n	800aaac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d008      	beq.n	800aa8e <HAL_UART_IRQHandler+0x1d6>
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f989 	bl	800ad9e <UART_Transmit_IT>
    return;
 800aa8c:	e00f      	b.n	800aaae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00a      	beq.n	800aaae <HAL_UART_IRQHandler+0x1f6>
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d005      	beq.n	800aaae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f9d1 	bl	800ae4a <UART_EndTransmit_IT>
    return;
 800aaa8:	bf00      	nop
 800aaaa:	e000      	b.n	800aaae <HAL_UART_IRQHandler+0x1f6>
    return;
 800aaac:	bf00      	nop
  }
}
 800aaae:	3720      	adds	r7, #32
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	0800ad77 	.word	0x0800ad77

0800aab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab00:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d113      	bne.n	800ab38 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	695a      	ldr	r2, [r3, #20]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab24:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68da      	ldr	r2, [r3, #12]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab34:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab36:	e002      	b.n	800ab3e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f7ff ffbd 	bl	800aab8 <HAL_UART_TxCpltCallback>
}
 800ab3e:	bf00      	nop
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f7ff ffb9 	bl	800aacc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab5a:	bf00      	nop
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d11e      	bne.n	800abbc <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab92:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	695a      	ldr	r2, [r3, #20]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f022 0201 	bic.w	r2, r2, #1
 800aba2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	695a      	ldr	r2, [r3, #20]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abb2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f7fa ffe3 	bl	8005b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abc2:	bf00      	nop
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f7fa ffe0 	bl	8005b9e <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abde:	bf00      	nop
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b084      	sub	sp, #16
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac02:	2b80      	cmp	r3, #128	; 0x80
 800ac04:	bf0c      	ite	eq
 800ac06:	2301      	moveq	r3, #1
 800ac08:	2300      	movne	r3, #0
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b21      	cmp	r3, #33	; 0x21
 800ac18:	d108      	bne.n	800ac2c <UART_DMAError+0x46>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ac26:	68b8      	ldr	r0, [r7, #8]
 800ac28:	f000 f871 	bl	800ad0e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac36:	2b40      	cmp	r3, #64	; 0x40
 800ac38:	bf0c      	ite	eq
 800ac3a:	2301      	moveq	r3, #1
 800ac3c:	2300      	movne	r3, #0
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b22      	cmp	r3, #34	; 0x22
 800ac4c:	d108      	bne.n	800ac60 <UART_DMAError+0x7a>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d005      	beq.n	800ac60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2200      	movs	r2, #0
 800ac58:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac5a:	68b8      	ldr	r0, [r7, #8]
 800ac5c:	f000 f86d 	bl	800ad3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac64:	f043 0210 	orr.w	r2, r3, #16
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac6c:	68b8      	ldr	r0, [r7, #8]
 800ac6e:	f7ff ff37 	bl	800aae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac72:	bf00      	nop
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	60f8      	str	r0, [r7, #12]
 800ac82:	60b9      	str	r1, [r7, #8]
 800ac84:	603b      	str	r3, [r7, #0]
 800ac86:	4613      	mov	r3, r2
 800ac88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac8a:	e02c      	b.n	800ace6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac92:	d028      	beq.n	800ace6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d007      	beq.n	800acaa <UART_WaitOnFlagUntilTimeout+0x30>
 800ac9a:	f7fb fe1d 	bl	80068d8 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	69ba      	ldr	r2, [r7, #24]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d21d      	bcs.n	800ace6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68da      	ldr	r2, [r3, #12]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800acb8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	695a      	ldr	r2, [r3, #20]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f022 0201 	bic.w	r2, r2, #1
 800acc8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2220      	movs	r2, #32
 800acce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2220      	movs	r2, #32
 800acd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800ace2:	2303      	movs	r3, #3
 800ace4:	e00f      	b.n	800ad06 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	4013      	ands	r3, r2
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	bf0c      	ite	eq
 800acf6:	2301      	moveq	r3, #1
 800acf8:	2300      	movne	r3, #0
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	461a      	mov	r2, r3
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d0c3      	beq.n	800ac8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b083      	sub	sp, #12
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68da      	ldr	r2, [r3, #12]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ad24:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68da      	ldr	r2, [r3, #12]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ad50:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	695a      	ldr	r2, [r3, #20]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f022 0201 	bic.w	r2, r2, #1
 800ad60:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2220      	movs	r2, #32
 800ad66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ad6a:	bf00      	nop
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f7ff fea5 	bl	800aae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad96:	bf00      	nop
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b085      	sub	sp, #20
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b21      	cmp	r3, #33	; 0x21
 800adb0:	d144      	bne.n	800ae3c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adba:	d11a      	bne.n	800adf2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800add0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d105      	bne.n	800ade6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	1c9a      	adds	r2, r3, #2
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	621a      	str	r2, [r3, #32]
 800ade4:	e00e      	b.n	800ae04 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	1c5a      	adds	r2, r3, #1
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	621a      	str	r2, [r3, #32]
 800adf0:	e008      	b.n	800ae04 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	1c59      	adds	r1, r3, #1
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6211      	str	r1, [r2, #32]
 800adfc:	781a      	ldrb	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	4619      	mov	r1, r3
 800ae12:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10f      	bne.n	800ae38 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68da      	ldr	r2, [r3, #12]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68da      	ldr	r2, [r3, #12]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e000      	b.n	800ae3e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ae3c:	2302      	movs	r3, #2
  }
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68da      	ldr	r2, [r3, #12]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7ff fe24 	bl	800aab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b22      	cmp	r3, #34	; 0x22
 800ae8c:	d171      	bne.n	800af72 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae96:	d123      	bne.n	800aee0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10e      	bne.n	800aec4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebc:	1c9a      	adds	r2, r3, #2
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	629a      	str	r2, [r3, #40]	; 0x28
 800aec2:	e029      	b.n	800af18 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	b29a      	uxth	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	629a      	str	r2, [r3, #40]	; 0x28
 800aede:	e01b      	b.n	800af18 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10a      	bne.n	800aefe <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6858      	ldr	r0, [r3, #4]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef2:	1c59      	adds	r1, r3, #1
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	6291      	str	r1, [r2, #40]	; 0x28
 800aef8:	b2c2      	uxtb	r2, r0
 800aefa:	701a      	strb	r2, [r3, #0]
 800aefc:	e00c      	b.n	800af18 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	b2da      	uxtb	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	1c58      	adds	r0, r3, #1
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	6288      	str	r0, [r1, #40]	; 0x28
 800af10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800af14:	b2d2      	uxtb	r2, r2
 800af16:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	3b01      	subs	r3, #1
 800af20:	b29b      	uxth	r3, r3
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	4619      	mov	r1, r3
 800af26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d120      	bne.n	800af6e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68da      	ldr	r2, [r3, #12]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f022 0220 	bic.w	r2, r2, #32
 800af3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68da      	ldr	r2, [r3, #12]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	695a      	ldr	r2, [r3, #20]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f022 0201 	bic.w	r2, r2, #1
 800af5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2220      	movs	r2, #32
 800af60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7fa fe0f 	bl	8005b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	e002      	b.n	800af74 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	e000      	b.n	800af74 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800af72:	2302      	movs	r3, #2
  }
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	b085      	sub	sp, #20
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	68da      	ldr	r2, [r3, #12]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	430a      	orrs	r2, r1
 800af9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	431a      	orrs	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	431a      	orrs	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800afbe:	f023 030c 	bic.w	r3, r3, #12
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	6812      	ldr	r2, [r2, #0]
 800afc6:	68f9      	ldr	r1, [r7, #12]
 800afc8:	430b      	orrs	r3, r1
 800afca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	699a      	ldr	r2, [r3, #24]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	430a      	orrs	r2, r1
 800afe0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	69db      	ldr	r3, [r3, #28]
 800afe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afea:	f040 818b 	bne.w	800b304 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4ac1      	ldr	r2, [pc, #772]	; (800b2f8 <UART_SetConfig+0x37c>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d005      	beq.n	800b004 <UART_SetConfig+0x88>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4abf      	ldr	r2, [pc, #764]	; (800b2fc <UART_SetConfig+0x380>)
 800affe:	4293      	cmp	r3, r2
 800b000:	f040 80bd 	bne.w	800b17e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b004:	f7fd fc40 	bl	8008888 <HAL_RCC_GetPCLK2Freq>
 800b008:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	461d      	mov	r5, r3
 800b00e:	f04f 0600 	mov.w	r6, #0
 800b012:	46a8      	mov	r8, r5
 800b014:	46b1      	mov	r9, r6
 800b016:	eb18 0308 	adds.w	r3, r8, r8
 800b01a:	eb49 0409 	adc.w	r4, r9, r9
 800b01e:	4698      	mov	r8, r3
 800b020:	46a1      	mov	r9, r4
 800b022:	eb18 0805 	adds.w	r8, r8, r5
 800b026:	eb49 0906 	adc.w	r9, r9, r6
 800b02a:	f04f 0100 	mov.w	r1, #0
 800b02e:	f04f 0200 	mov.w	r2, #0
 800b032:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b036:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b03a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b03e:	4688      	mov	r8, r1
 800b040:	4691      	mov	r9, r2
 800b042:	eb18 0005 	adds.w	r0, r8, r5
 800b046:	eb49 0106 	adc.w	r1, r9, r6
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	461d      	mov	r5, r3
 800b050:	f04f 0600 	mov.w	r6, #0
 800b054:	196b      	adds	r3, r5, r5
 800b056:	eb46 0406 	adc.w	r4, r6, r6
 800b05a:	461a      	mov	r2, r3
 800b05c:	4623      	mov	r3, r4
 800b05e:	f7f5 fdf3 	bl	8000c48 <__aeabi_uldivmod>
 800b062:	4603      	mov	r3, r0
 800b064:	460c      	mov	r4, r1
 800b066:	461a      	mov	r2, r3
 800b068:	4ba5      	ldr	r3, [pc, #660]	; (800b300 <UART_SetConfig+0x384>)
 800b06a:	fba3 2302 	umull	r2, r3, r3, r2
 800b06e:	095b      	lsrs	r3, r3, #5
 800b070:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	461d      	mov	r5, r3
 800b078:	f04f 0600 	mov.w	r6, #0
 800b07c:	46a9      	mov	r9, r5
 800b07e:	46b2      	mov	sl, r6
 800b080:	eb19 0309 	adds.w	r3, r9, r9
 800b084:	eb4a 040a 	adc.w	r4, sl, sl
 800b088:	4699      	mov	r9, r3
 800b08a:	46a2      	mov	sl, r4
 800b08c:	eb19 0905 	adds.w	r9, r9, r5
 800b090:	eb4a 0a06 	adc.w	sl, sl, r6
 800b094:	f04f 0100 	mov.w	r1, #0
 800b098:	f04f 0200 	mov.w	r2, #0
 800b09c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b0a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b0a8:	4689      	mov	r9, r1
 800b0aa:	4692      	mov	sl, r2
 800b0ac:	eb19 0005 	adds.w	r0, r9, r5
 800b0b0:	eb4a 0106 	adc.w	r1, sl, r6
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	461d      	mov	r5, r3
 800b0ba:	f04f 0600 	mov.w	r6, #0
 800b0be:	196b      	adds	r3, r5, r5
 800b0c0:	eb46 0406 	adc.w	r4, r6, r6
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	4623      	mov	r3, r4
 800b0c8:	f7f5 fdbe 	bl	8000c48 <__aeabi_uldivmod>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4b8b      	ldr	r3, [pc, #556]	; (800b300 <UART_SetConfig+0x384>)
 800b0d4:	fba3 1302 	umull	r1, r3, r3, r2
 800b0d8:	095b      	lsrs	r3, r3, #5
 800b0da:	2164      	movs	r1, #100	; 0x64
 800b0dc:	fb01 f303 	mul.w	r3, r1, r3
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	00db      	lsls	r3, r3, #3
 800b0e4:	3332      	adds	r3, #50	; 0x32
 800b0e6:	4a86      	ldr	r2, [pc, #536]	; (800b300 <UART_SetConfig+0x384>)
 800b0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ec:	095b      	lsrs	r3, r3, #5
 800b0ee:	005b      	lsls	r3, r3, #1
 800b0f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b0f4:	4498      	add	r8, r3
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	461d      	mov	r5, r3
 800b0fa:	f04f 0600 	mov.w	r6, #0
 800b0fe:	46a9      	mov	r9, r5
 800b100:	46b2      	mov	sl, r6
 800b102:	eb19 0309 	adds.w	r3, r9, r9
 800b106:	eb4a 040a 	adc.w	r4, sl, sl
 800b10a:	4699      	mov	r9, r3
 800b10c:	46a2      	mov	sl, r4
 800b10e:	eb19 0905 	adds.w	r9, r9, r5
 800b112:	eb4a 0a06 	adc.w	sl, sl, r6
 800b116:	f04f 0100 	mov.w	r1, #0
 800b11a:	f04f 0200 	mov.w	r2, #0
 800b11e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b122:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b126:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b12a:	4689      	mov	r9, r1
 800b12c:	4692      	mov	sl, r2
 800b12e:	eb19 0005 	adds.w	r0, r9, r5
 800b132:	eb4a 0106 	adc.w	r1, sl, r6
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	461d      	mov	r5, r3
 800b13c:	f04f 0600 	mov.w	r6, #0
 800b140:	196b      	adds	r3, r5, r5
 800b142:	eb46 0406 	adc.w	r4, r6, r6
 800b146:	461a      	mov	r2, r3
 800b148:	4623      	mov	r3, r4
 800b14a:	f7f5 fd7d 	bl	8000c48 <__aeabi_uldivmod>
 800b14e:	4603      	mov	r3, r0
 800b150:	460c      	mov	r4, r1
 800b152:	461a      	mov	r2, r3
 800b154:	4b6a      	ldr	r3, [pc, #424]	; (800b300 <UART_SetConfig+0x384>)
 800b156:	fba3 1302 	umull	r1, r3, r3, r2
 800b15a:	095b      	lsrs	r3, r3, #5
 800b15c:	2164      	movs	r1, #100	; 0x64
 800b15e:	fb01 f303 	mul.w	r3, r1, r3
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	00db      	lsls	r3, r3, #3
 800b166:	3332      	adds	r3, #50	; 0x32
 800b168:	4a65      	ldr	r2, [pc, #404]	; (800b300 <UART_SetConfig+0x384>)
 800b16a:	fba2 2303 	umull	r2, r3, r2, r3
 800b16e:	095b      	lsrs	r3, r3, #5
 800b170:	f003 0207 	and.w	r2, r3, #7
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4442      	add	r2, r8
 800b17a:	609a      	str	r2, [r3, #8]
 800b17c:	e26f      	b.n	800b65e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b17e:	f7fd fb6f 	bl	8008860 <HAL_RCC_GetPCLK1Freq>
 800b182:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	461d      	mov	r5, r3
 800b188:	f04f 0600 	mov.w	r6, #0
 800b18c:	46a8      	mov	r8, r5
 800b18e:	46b1      	mov	r9, r6
 800b190:	eb18 0308 	adds.w	r3, r8, r8
 800b194:	eb49 0409 	adc.w	r4, r9, r9
 800b198:	4698      	mov	r8, r3
 800b19a:	46a1      	mov	r9, r4
 800b19c:	eb18 0805 	adds.w	r8, r8, r5
 800b1a0:	eb49 0906 	adc.w	r9, r9, r6
 800b1a4:	f04f 0100 	mov.w	r1, #0
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b1b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b1b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b1b8:	4688      	mov	r8, r1
 800b1ba:	4691      	mov	r9, r2
 800b1bc:	eb18 0005 	adds.w	r0, r8, r5
 800b1c0:	eb49 0106 	adc.w	r1, r9, r6
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	461d      	mov	r5, r3
 800b1ca:	f04f 0600 	mov.w	r6, #0
 800b1ce:	196b      	adds	r3, r5, r5
 800b1d0:	eb46 0406 	adc.w	r4, r6, r6
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	4623      	mov	r3, r4
 800b1d8:	f7f5 fd36 	bl	8000c48 <__aeabi_uldivmod>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	460c      	mov	r4, r1
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	4b47      	ldr	r3, [pc, #284]	; (800b300 <UART_SetConfig+0x384>)
 800b1e4:	fba3 2302 	umull	r2, r3, r3, r2
 800b1e8:	095b      	lsrs	r3, r3, #5
 800b1ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	461d      	mov	r5, r3
 800b1f2:	f04f 0600 	mov.w	r6, #0
 800b1f6:	46a9      	mov	r9, r5
 800b1f8:	46b2      	mov	sl, r6
 800b1fa:	eb19 0309 	adds.w	r3, r9, r9
 800b1fe:	eb4a 040a 	adc.w	r4, sl, sl
 800b202:	4699      	mov	r9, r3
 800b204:	46a2      	mov	sl, r4
 800b206:	eb19 0905 	adds.w	r9, r9, r5
 800b20a:	eb4a 0a06 	adc.w	sl, sl, r6
 800b20e:	f04f 0100 	mov.w	r1, #0
 800b212:	f04f 0200 	mov.w	r2, #0
 800b216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b21a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b21e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b222:	4689      	mov	r9, r1
 800b224:	4692      	mov	sl, r2
 800b226:	eb19 0005 	adds.w	r0, r9, r5
 800b22a:	eb4a 0106 	adc.w	r1, sl, r6
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	461d      	mov	r5, r3
 800b234:	f04f 0600 	mov.w	r6, #0
 800b238:	196b      	adds	r3, r5, r5
 800b23a:	eb46 0406 	adc.w	r4, r6, r6
 800b23e:	461a      	mov	r2, r3
 800b240:	4623      	mov	r3, r4
 800b242:	f7f5 fd01 	bl	8000c48 <__aeabi_uldivmod>
 800b246:	4603      	mov	r3, r0
 800b248:	460c      	mov	r4, r1
 800b24a:	461a      	mov	r2, r3
 800b24c:	4b2c      	ldr	r3, [pc, #176]	; (800b300 <UART_SetConfig+0x384>)
 800b24e:	fba3 1302 	umull	r1, r3, r3, r2
 800b252:	095b      	lsrs	r3, r3, #5
 800b254:	2164      	movs	r1, #100	; 0x64
 800b256:	fb01 f303 	mul.w	r3, r1, r3
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	00db      	lsls	r3, r3, #3
 800b25e:	3332      	adds	r3, #50	; 0x32
 800b260:	4a27      	ldr	r2, [pc, #156]	; (800b300 <UART_SetConfig+0x384>)
 800b262:	fba2 2303 	umull	r2, r3, r2, r3
 800b266:	095b      	lsrs	r3, r3, #5
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b26e:	4498      	add	r8, r3
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	461d      	mov	r5, r3
 800b274:	f04f 0600 	mov.w	r6, #0
 800b278:	46a9      	mov	r9, r5
 800b27a:	46b2      	mov	sl, r6
 800b27c:	eb19 0309 	adds.w	r3, r9, r9
 800b280:	eb4a 040a 	adc.w	r4, sl, sl
 800b284:	4699      	mov	r9, r3
 800b286:	46a2      	mov	sl, r4
 800b288:	eb19 0905 	adds.w	r9, r9, r5
 800b28c:	eb4a 0a06 	adc.w	sl, sl, r6
 800b290:	f04f 0100 	mov.w	r1, #0
 800b294:	f04f 0200 	mov.w	r2, #0
 800b298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b29c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b2a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b2a4:	4689      	mov	r9, r1
 800b2a6:	4692      	mov	sl, r2
 800b2a8:	eb19 0005 	adds.w	r0, r9, r5
 800b2ac:	eb4a 0106 	adc.w	r1, sl, r6
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	461d      	mov	r5, r3
 800b2b6:	f04f 0600 	mov.w	r6, #0
 800b2ba:	196b      	adds	r3, r5, r5
 800b2bc:	eb46 0406 	adc.w	r4, r6, r6
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	f7f5 fcc0 	bl	8000c48 <__aeabi_uldivmod>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	4b0c      	ldr	r3, [pc, #48]	; (800b300 <UART_SetConfig+0x384>)
 800b2d0:	fba3 1302 	umull	r1, r3, r3, r2
 800b2d4:	095b      	lsrs	r3, r3, #5
 800b2d6:	2164      	movs	r1, #100	; 0x64
 800b2d8:	fb01 f303 	mul.w	r3, r1, r3
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	00db      	lsls	r3, r3, #3
 800b2e0:	3332      	adds	r3, #50	; 0x32
 800b2e2:	4a07      	ldr	r2, [pc, #28]	; (800b300 <UART_SetConfig+0x384>)
 800b2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e8:	095b      	lsrs	r3, r3, #5
 800b2ea:	f003 0207 	and.w	r2, r3, #7
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4442      	add	r2, r8
 800b2f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b2f6:	e1b2      	b.n	800b65e <UART_SetConfig+0x6e2>
 800b2f8:	40011000 	.word	0x40011000
 800b2fc:	40011400 	.word	0x40011400
 800b300:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4ad7      	ldr	r2, [pc, #860]	; (800b668 <UART_SetConfig+0x6ec>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d005      	beq.n	800b31a <UART_SetConfig+0x39e>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4ad6      	ldr	r2, [pc, #856]	; (800b66c <UART_SetConfig+0x6f0>)
 800b314:	4293      	cmp	r3, r2
 800b316:	f040 80d1 	bne.w	800b4bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b31a:	f7fd fab5 	bl	8008888 <HAL_RCC_GetPCLK2Freq>
 800b31e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	469a      	mov	sl, r3
 800b324:	f04f 0b00 	mov.w	fp, #0
 800b328:	46d0      	mov	r8, sl
 800b32a:	46d9      	mov	r9, fp
 800b32c:	eb18 0308 	adds.w	r3, r8, r8
 800b330:	eb49 0409 	adc.w	r4, r9, r9
 800b334:	4698      	mov	r8, r3
 800b336:	46a1      	mov	r9, r4
 800b338:	eb18 080a 	adds.w	r8, r8, sl
 800b33c:	eb49 090b 	adc.w	r9, r9, fp
 800b340:	f04f 0100 	mov.w	r1, #0
 800b344:	f04f 0200 	mov.w	r2, #0
 800b348:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b34c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b350:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b354:	4688      	mov	r8, r1
 800b356:	4691      	mov	r9, r2
 800b358:	eb1a 0508 	adds.w	r5, sl, r8
 800b35c:	eb4b 0609 	adc.w	r6, fp, r9
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	4619      	mov	r1, r3
 800b366:	f04f 0200 	mov.w	r2, #0
 800b36a:	f04f 0300 	mov.w	r3, #0
 800b36e:	f04f 0400 	mov.w	r4, #0
 800b372:	0094      	lsls	r4, r2, #2
 800b374:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b378:	008b      	lsls	r3, r1, #2
 800b37a:	461a      	mov	r2, r3
 800b37c:	4623      	mov	r3, r4
 800b37e:	4628      	mov	r0, r5
 800b380:	4631      	mov	r1, r6
 800b382:	f7f5 fc61 	bl	8000c48 <__aeabi_uldivmod>
 800b386:	4603      	mov	r3, r0
 800b388:	460c      	mov	r4, r1
 800b38a:	461a      	mov	r2, r3
 800b38c:	4bb8      	ldr	r3, [pc, #736]	; (800b670 <UART_SetConfig+0x6f4>)
 800b38e:	fba3 2302 	umull	r2, r3, r3, r2
 800b392:	095b      	lsrs	r3, r3, #5
 800b394:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	469b      	mov	fp, r3
 800b39c:	f04f 0c00 	mov.w	ip, #0
 800b3a0:	46d9      	mov	r9, fp
 800b3a2:	46e2      	mov	sl, ip
 800b3a4:	eb19 0309 	adds.w	r3, r9, r9
 800b3a8:	eb4a 040a 	adc.w	r4, sl, sl
 800b3ac:	4699      	mov	r9, r3
 800b3ae:	46a2      	mov	sl, r4
 800b3b0:	eb19 090b 	adds.w	r9, r9, fp
 800b3b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b3b8:	f04f 0100 	mov.w	r1, #0
 800b3bc:	f04f 0200 	mov.w	r2, #0
 800b3c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b3c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b3cc:	4689      	mov	r9, r1
 800b3ce:	4692      	mov	sl, r2
 800b3d0:	eb1b 0509 	adds.w	r5, fp, r9
 800b3d4:	eb4c 060a 	adc.w	r6, ip, sl
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	f04f 0200 	mov.w	r2, #0
 800b3e2:	f04f 0300 	mov.w	r3, #0
 800b3e6:	f04f 0400 	mov.w	r4, #0
 800b3ea:	0094      	lsls	r4, r2, #2
 800b3ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b3f0:	008b      	lsls	r3, r1, #2
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	4623      	mov	r3, r4
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	f7f5 fc25 	bl	8000c48 <__aeabi_uldivmod>
 800b3fe:	4603      	mov	r3, r0
 800b400:	460c      	mov	r4, r1
 800b402:	461a      	mov	r2, r3
 800b404:	4b9a      	ldr	r3, [pc, #616]	; (800b670 <UART_SetConfig+0x6f4>)
 800b406:	fba3 1302 	umull	r1, r3, r3, r2
 800b40a:	095b      	lsrs	r3, r3, #5
 800b40c:	2164      	movs	r1, #100	; 0x64
 800b40e:	fb01 f303 	mul.w	r3, r1, r3
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	011b      	lsls	r3, r3, #4
 800b416:	3332      	adds	r3, #50	; 0x32
 800b418:	4a95      	ldr	r2, [pc, #596]	; (800b670 <UART_SetConfig+0x6f4>)
 800b41a:	fba2 2303 	umull	r2, r3, r2, r3
 800b41e:	095b      	lsrs	r3, r3, #5
 800b420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b424:	4498      	add	r8, r3
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	469b      	mov	fp, r3
 800b42a:	f04f 0c00 	mov.w	ip, #0
 800b42e:	46d9      	mov	r9, fp
 800b430:	46e2      	mov	sl, ip
 800b432:	eb19 0309 	adds.w	r3, r9, r9
 800b436:	eb4a 040a 	adc.w	r4, sl, sl
 800b43a:	4699      	mov	r9, r3
 800b43c:	46a2      	mov	sl, r4
 800b43e:	eb19 090b 	adds.w	r9, r9, fp
 800b442:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b446:	f04f 0100 	mov.w	r1, #0
 800b44a:	f04f 0200 	mov.w	r2, #0
 800b44e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b452:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b456:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b45a:	4689      	mov	r9, r1
 800b45c:	4692      	mov	sl, r2
 800b45e:	eb1b 0509 	adds.w	r5, fp, r9
 800b462:	eb4c 060a 	adc.w	r6, ip, sl
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	4619      	mov	r1, r3
 800b46c:	f04f 0200 	mov.w	r2, #0
 800b470:	f04f 0300 	mov.w	r3, #0
 800b474:	f04f 0400 	mov.w	r4, #0
 800b478:	0094      	lsls	r4, r2, #2
 800b47a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b47e:	008b      	lsls	r3, r1, #2
 800b480:	461a      	mov	r2, r3
 800b482:	4623      	mov	r3, r4
 800b484:	4628      	mov	r0, r5
 800b486:	4631      	mov	r1, r6
 800b488:	f7f5 fbde 	bl	8000c48 <__aeabi_uldivmod>
 800b48c:	4603      	mov	r3, r0
 800b48e:	460c      	mov	r4, r1
 800b490:	461a      	mov	r2, r3
 800b492:	4b77      	ldr	r3, [pc, #476]	; (800b670 <UART_SetConfig+0x6f4>)
 800b494:	fba3 1302 	umull	r1, r3, r3, r2
 800b498:	095b      	lsrs	r3, r3, #5
 800b49a:	2164      	movs	r1, #100	; 0x64
 800b49c:	fb01 f303 	mul.w	r3, r1, r3
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	011b      	lsls	r3, r3, #4
 800b4a4:	3332      	adds	r3, #50	; 0x32
 800b4a6:	4a72      	ldr	r2, [pc, #456]	; (800b670 <UART_SetConfig+0x6f4>)
 800b4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ac:	095b      	lsrs	r3, r3, #5
 800b4ae:	f003 020f 	and.w	r2, r3, #15
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4442      	add	r2, r8
 800b4b8:	609a      	str	r2, [r3, #8]
 800b4ba:	e0d0      	b.n	800b65e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4bc:	f7fd f9d0 	bl	8008860 <HAL_RCC_GetPCLK1Freq>
 800b4c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	469a      	mov	sl, r3
 800b4c6:	f04f 0b00 	mov.w	fp, #0
 800b4ca:	46d0      	mov	r8, sl
 800b4cc:	46d9      	mov	r9, fp
 800b4ce:	eb18 0308 	adds.w	r3, r8, r8
 800b4d2:	eb49 0409 	adc.w	r4, r9, r9
 800b4d6:	4698      	mov	r8, r3
 800b4d8:	46a1      	mov	r9, r4
 800b4da:	eb18 080a 	adds.w	r8, r8, sl
 800b4de:	eb49 090b 	adc.w	r9, r9, fp
 800b4e2:	f04f 0100 	mov.w	r1, #0
 800b4e6:	f04f 0200 	mov.w	r2, #0
 800b4ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b4ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b4f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b4f6:	4688      	mov	r8, r1
 800b4f8:	4691      	mov	r9, r2
 800b4fa:	eb1a 0508 	adds.w	r5, sl, r8
 800b4fe:	eb4b 0609 	adc.w	r6, fp, r9
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	4619      	mov	r1, r3
 800b508:	f04f 0200 	mov.w	r2, #0
 800b50c:	f04f 0300 	mov.w	r3, #0
 800b510:	f04f 0400 	mov.w	r4, #0
 800b514:	0094      	lsls	r4, r2, #2
 800b516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b51a:	008b      	lsls	r3, r1, #2
 800b51c:	461a      	mov	r2, r3
 800b51e:	4623      	mov	r3, r4
 800b520:	4628      	mov	r0, r5
 800b522:	4631      	mov	r1, r6
 800b524:	f7f5 fb90 	bl	8000c48 <__aeabi_uldivmod>
 800b528:	4603      	mov	r3, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	461a      	mov	r2, r3
 800b52e:	4b50      	ldr	r3, [pc, #320]	; (800b670 <UART_SetConfig+0x6f4>)
 800b530:	fba3 2302 	umull	r2, r3, r3, r2
 800b534:	095b      	lsrs	r3, r3, #5
 800b536:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	469b      	mov	fp, r3
 800b53e:	f04f 0c00 	mov.w	ip, #0
 800b542:	46d9      	mov	r9, fp
 800b544:	46e2      	mov	sl, ip
 800b546:	eb19 0309 	adds.w	r3, r9, r9
 800b54a:	eb4a 040a 	adc.w	r4, sl, sl
 800b54e:	4699      	mov	r9, r3
 800b550:	46a2      	mov	sl, r4
 800b552:	eb19 090b 	adds.w	r9, r9, fp
 800b556:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b55a:	f04f 0100 	mov.w	r1, #0
 800b55e:	f04f 0200 	mov.w	r2, #0
 800b562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b56a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b56e:	4689      	mov	r9, r1
 800b570:	4692      	mov	sl, r2
 800b572:	eb1b 0509 	adds.w	r5, fp, r9
 800b576:	eb4c 060a 	adc.w	r6, ip, sl
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	4619      	mov	r1, r3
 800b580:	f04f 0200 	mov.w	r2, #0
 800b584:	f04f 0300 	mov.w	r3, #0
 800b588:	f04f 0400 	mov.w	r4, #0
 800b58c:	0094      	lsls	r4, r2, #2
 800b58e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b592:	008b      	lsls	r3, r1, #2
 800b594:	461a      	mov	r2, r3
 800b596:	4623      	mov	r3, r4
 800b598:	4628      	mov	r0, r5
 800b59a:	4631      	mov	r1, r6
 800b59c:	f7f5 fb54 	bl	8000c48 <__aeabi_uldivmod>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	4b32      	ldr	r3, [pc, #200]	; (800b670 <UART_SetConfig+0x6f4>)
 800b5a8:	fba3 1302 	umull	r1, r3, r3, r2
 800b5ac:	095b      	lsrs	r3, r3, #5
 800b5ae:	2164      	movs	r1, #100	; 0x64
 800b5b0:	fb01 f303 	mul.w	r3, r1, r3
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	011b      	lsls	r3, r3, #4
 800b5b8:	3332      	adds	r3, #50	; 0x32
 800b5ba:	4a2d      	ldr	r2, [pc, #180]	; (800b670 <UART_SetConfig+0x6f4>)
 800b5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c0:	095b      	lsrs	r3, r3, #5
 800b5c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5c6:	4498      	add	r8, r3
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	469b      	mov	fp, r3
 800b5cc:	f04f 0c00 	mov.w	ip, #0
 800b5d0:	46d9      	mov	r9, fp
 800b5d2:	46e2      	mov	sl, ip
 800b5d4:	eb19 0309 	adds.w	r3, r9, r9
 800b5d8:	eb4a 040a 	adc.w	r4, sl, sl
 800b5dc:	4699      	mov	r9, r3
 800b5de:	46a2      	mov	sl, r4
 800b5e0:	eb19 090b 	adds.w	r9, r9, fp
 800b5e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b5e8:	f04f 0100 	mov.w	r1, #0
 800b5ec:	f04f 0200 	mov.w	r2, #0
 800b5f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b5f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b5fc:	4689      	mov	r9, r1
 800b5fe:	4692      	mov	sl, r2
 800b600:	eb1b 0509 	adds.w	r5, fp, r9
 800b604:	eb4c 060a 	adc.w	r6, ip, sl
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	4619      	mov	r1, r3
 800b60e:	f04f 0200 	mov.w	r2, #0
 800b612:	f04f 0300 	mov.w	r3, #0
 800b616:	f04f 0400 	mov.w	r4, #0
 800b61a:	0094      	lsls	r4, r2, #2
 800b61c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b620:	008b      	lsls	r3, r1, #2
 800b622:	461a      	mov	r2, r3
 800b624:	4623      	mov	r3, r4
 800b626:	4628      	mov	r0, r5
 800b628:	4631      	mov	r1, r6
 800b62a:	f7f5 fb0d 	bl	8000c48 <__aeabi_uldivmod>
 800b62e:	4603      	mov	r3, r0
 800b630:	460c      	mov	r4, r1
 800b632:	461a      	mov	r2, r3
 800b634:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <UART_SetConfig+0x6f4>)
 800b636:	fba3 1302 	umull	r1, r3, r3, r2
 800b63a:	095b      	lsrs	r3, r3, #5
 800b63c:	2164      	movs	r1, #100	; 0x64
 800b63e:	fb01 f303 	mul.w	r3, r1, r3
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	011b      	lsls	r3, r3, #4
 800b646:	3332      	adds	r3, #50	; 0x32
 800b648:	4a09      	ldr	r2, [pc, #36]	; (800b670 <UART_SetConfig+0x6f4>)
 800b64a:	fba2 2303 	umull	r2, r3, r2, r3
 800b64e:	095b      	lsrs	r3, r3, #5
 800b650:	f003 020f 	and.w	r2, r3, #15
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4442      	add	r2, r8
 800b65a:	609a      	str	r2, [r3, #8]
}
 800b65c:	e7ff      	b.n	800b65e <UART_SetConfig+0x6e2>
 800b65e:	bf00      	nop
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b668:	40011000 	.word	0x40011000
 800b66c:	40011400 	.word	0x40011400
 800b670:	51eb851f 	.word	0x51eb851f

0800b674 <FILTER_init>:
 *  Created on: 20 ao�t 2020
 *      Author: Th�o
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 800b674:	b480      	push	{r7}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4613      	mov	r3, r2
 800b680:	71fb      	strb	r3, [r7, #7]
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 800b682:	2300      	movs	r3, #0
 800b684:	617b      	str	r3, [r7, #20]
 800b686:	e00c      	b.n	800b6a2 <FILTER_init+0x2e>
		filter->settings[s] = settings[s] ;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	4413      	add	r3, r2
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	68f9      	ldr	r1, [r7, #12]
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	440b      	add	r3, r1
 800b69a:	601a      	str	r2, [r3, #0]
	for(int32_t s = 0; s < 3; s++)
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	617b      	str	r3, [r7, #20]
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	ddef      	ble.n	800b688 <FILTER_init+0x14>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	79fa      	ldrb	r2, [r7, #7]
 800b6ac:	761a      	strb	r2, [r3, #24]
}
 800b6ae:	bf00      	nop
 800b6b0:	371c      	adds	r7, #28
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
 800b6ba:	b480      	push	{r7}
 800b6bc:	b085      	sub	sp, #20
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	ed87 0a00 	vstr	s0, [r7]
	float to_return = 0 ;
 800b6c6:	f04f 0300 	mov.w	r3, #0
 800b6ca:	60fb      	str	r3, [r7, #12]
	switch(filter->order){
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	7e1b      	ldrb	r3, [r3, #24]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d01f      	beq.n	800b714 <FILTER_process+0x5a>
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	d047      	beq.n	800b768 <FILTER_process+0xae>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d148      	bne.n	800b76e <FILTER_process+0xb4>
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	ed93 7a00 	vldr	s14, [r3]
 800b6e2:	edd7 7a00 	vldr	s15, [r7]
 800b6e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	edd3 6a04 	vldr	s13, [r3, #16]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b6f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[1] = filter->values[0];
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68da      	ldr	r2, [r3, #12]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	611a      	str	r2, [r3, #16]
			to_return =  filter->values[0];
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	60fb      	str	r3, [r7, #12]
			break ;
 800b712:	e02f      	b.n	800b774 <FILTER_process+0xba>

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	ed93 7a00 	vldr	s14, [r3]
 800b71a:	edd7 7a00 	vldr	s15, [r7]
 800b71e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	edd3 6a04 	vldr	s13, [r3, #16]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b72e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b732:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	edd3 6a05 	vldr	s13, [r3, #20]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[2] = filter->values[1];
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	691a      	ldr	r2, [r3, #16]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	615a      	str	r2, [r3, #20]
			filter->values[1] = filter->values[0];
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68da      	ldr	r2, [r3, #12]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	611a      	str	r2, [r3, #16]
			to_return = filter->values[0];
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	60fb      	str	r3, [r7, #12]
			break;
 800b766:	e005      	b.n	800b774 <FILTER_process+0xba>

		case FILTER_NO_FILTERING :
			to_return = new_value ;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	60fb      	str	r3, [r7, #12]
			break;
 800b76c:	e002      	b.n	800b774 <FILTER_process+0xba>
		default:
			to_return = new_value ;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	60fb      	str	r3, [r7, #12]
			break;
 800b772:	bf00      	nop
	}

	return to_return ;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	ee07 3a90 	vmov	s15, r3
};
 800b77a:	eeb0 0a67 	vmov.f32	s0, s15
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <check_sum_f>:
static rx_cplt_mode_e rx_cplt_mode ;
static ibus_t * ibus ;	//On ne peut utilsier qu'une radio en ibus à la fois

//Fonction privé qui test si le checsum est bon sur un buffer
uint32_t check_sum_f(uint8_t * buffer);
uint32_t check_sum_f(uint8_t * buffer){
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 800b790:	2300      	movs	r3, #0
 800b792:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800b794:	2300      	movs	r3, #0
 800b796:	72fb      	strb	r3, [r7, #11]
 800b798:	e00a      	b.n	800b7b0 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 800b79a:	7afb      	ldrb	r3, [r7, #11]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	4413      	add	r3, r2
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800b7aa:	7afb      	ldrb	r3, [r7, #11]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	72fb      	strb	r3, [r7, #11]
 800b7b0:	7afb      	ldrb	r3, [r7, #11]
 800b7b2:	2b1d      	cmp	r3, #29
 800b7b4:	d9f1      	bls.n	800b79a <check_sum_f+0x12>
	return sum ;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <IBUS_init>:

void IBUS_init(ibus_t * ibus_, UART_HandleTypeDef * huart, void(*data_rdy_callback)){
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
	ibus = ibus_;
 800b7d0:	4a0e      	ldr	r2, [pc, #56]	; (800b80c <IBUS_init+0x48>)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6013      	str	r3, [r2, #0]
	ibus->huart = huart ;
 800b7d6:	4b0d      	ldr	r3, [pc, #52]	; (800b80c <IBUS_init+0x48>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	601a      	str	r2, [r3, #0]
	ibus->data_rdy_callback = data_rdy_callback ;
 800b7de:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <IBUS_init+0x48>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	639a      	str	r2, [r3, #56]	; 0x38
	//On lance la lecture
	HAL_UART_Receive_DMA(ibus->huart, ibus->dma_buffer, SIZE_DMA_BUFFER);
 800b7e6:	4b09      	ldr	r3, [pc, #36]	; (800b80c <IBUS_init+0x48>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	6818      	ldr	r0, [r3, #0]
 800b7ec:	4b07      	ldr	r3, [pc, #28]	; (800b80c <IBUS_init+0x48>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	2214      	movs	r2, #20
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	f7fe ffdf 	bl	800a7b8 <HAL_UART_Receive_DMA>
	ibus->index_write = 1 ;
 800b7fa:	4b04      	ldr	r3, [pc, #16]	; (800b80c <IBUS_init+0x48>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2201      	movs	r2, #1
 800b800:	761a      	strb	r2, [r3, #24]
}
 800b802:	bf00      	nop
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	200019c0 	.word	0x200019c0

0800b810 <IBUS_RxCplt>:

void IBUS_RxCplt(UART_HandleTypeDef * huart){
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800b818:	4b08      	ldr	r3, [pc, #32]	; (800b83c <IBUS_RxCplt+0x2c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	429a      	cmp	r2, r3
 800b822:	d106      	bne.n	800b832 <IBUS_RxCplt+0x22>
		rx_cplt_mode = MODE_CPLT_FULL;
 800b824:	4b06      	ldr	r3, [pc, #24]	; (800b840 <IBUS_RxCplt+0x30>)
 800b826:	2201      	movs	r2, #1
 800b828:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800b82a:	4b04      	ldr	r3, [pc, #16]	; (800b83c <IBUS_RxCplt+0x2c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b830:	4798      	blx	r3
	}
}
 800b832:	bf00      	nop
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	200019c0 	.word	0x200019c0
 800b840:	200019bc 	.word	0x200019bc

0800b844 <IBUS_RxHalfCplt>:
void IBUS_RxHalfCplt(UART_HandleTypeDef * huart){
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800b84c:	4b08      	ldr	r3, [pc, #32]	; (800b870 <IBUS_RxHalfCplt+0x2c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	429a      	cmp	r2, r3
 800b856:	d106      	bne.n	800b866 <IBUS_RxHalfCplt+0x22>
		rx_cplt_mode = MODE_CPLT_HALF ;
 800b858:	4b06      	ldr	r3, [pc, #24]	; (800b874 <IBUS_RxHalfCplt+0x30>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800b85e:	4b04      	ldr	r3, [pc, #16]	; (800b870 <IBUS_RxHalfCplt+0x2c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b864:	4798      	blx	r3
	}
}
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	200019c0 	.word	0x200019c0
 800b874:	200019bc 	.word	0x200019bc

0800b878 <IBUS_Channel_Update>:

bool_e IBUS_Channel_Update(void){
 800b878:	b5b0      	push	{r4, r5, r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0

	bool_e to_return = FALSE ;
 800b87e:	2300      	movs	r3, #0
 800b880:	61fb      	str	r3, [r7, #28]

	if(rx_cplt_mode == MODE_CPLT_HALF)
 800b882:	4ba0      	ldr	r3, [pc, #640]	; (800bb04 <IBUS_Channel_Update+0x28c>)
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	f040 80ba 	bne.w	800ba00 <IBUS_Channel_Update+0x188>
	{
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800b88c:	2300      	movs	r3, #0
 800b88e:	76fb      	strb	r3, [r7, #27]
 800b890:	e0b1      	b.n	800b9f6 <IBUS_Channel_Update+0x17e>
			switch(ibus->state){
 800b892:	4b9d      	ldr	r3, [pc, #628]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d01b      	beq.n	800b8d6 <IBUS_Channel_Update+0x5e>
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d041      	beq.n	800b926 <IBUS_Channel_Update+0xae>
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f040 80a4 	bne.w	800b9f0 <IBUS_Channel_Update+0x178>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800b8a8:	4b97      	ldr	r3, [pc, #604]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	7efb      	ldrb	r3, [r7, #27]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	791b      	ldrb	r3, [r3, #4]
 800b8b2:	2b20      	cmp	r3, #32
 800b8b4:	f040 8097 	bne.w	800b9e6 <IBUS_Channel_Update+0x16e>
						ibus->state = STATE_IBUS_COMMAND ;
 800b8b8:	4b93      	ldr	r3, [pc, #588]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800b8c2:	4b91      	ldr	r3, [pc, #580]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b8c4:	6819      	ldr	r1, [r3, #0]
 800b8c6:	7efa      	ldrb	r2, [r7, #27]
 800b8c8:	4b8f      	ldr	r3, [pc, #572]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	440a      	add	r2, r1
 800b8ce:	7912      	ldrb	r2, [r2, #4]
 800b8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800b8d4:	e087      	b.n	800b9e6 <IBUS_Channel_Update+0x16e>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800b8d6:	4b8c      	ldr	r3, [pc, #560]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	7efb      	ldrb	r3, [r7, #27]
 800b8dc:	4413      	add	r3, r2
 800b8de:	791b      	ldrb	r3, [r3, #4]
 800b8e0:	2b40      	cmp	r3, #64	; 0x40
 800b8e2:	d113      	bne.n	800b90c <IBUS_Channel_Update+0x94>
						ibus->state = STATE_IBUS_CHANNELS ;
 800b8e4:	4b88      	ldr	r3, [pc, #544]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800b8ee:	4b86      	ldr	r3, [pc, #536]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b8f0:	6819      	ldr	r1, [r3, #0]
 800b8f2:	7efa      	ldrb	r2, [r7, #27]
 800b8f4:	4b84      	ldr	r3, [pc, #528]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	440a      	add	r2, r1
 800b8fa:	7912      	ldrb	r2, [r2, #4]
 800b8fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800b900:	4b81      	ldr	r3, [pc, #516]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2202      	movs	r2, #2
 800b906:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800b90a:	e06e      	b.n	800b9ea <IBUS_Channel_Update+0x172>
					else if(ibus->dma_buffer[c] != 0x20)
 800b90c:	4b7e      	ldr	r3, [pc, #504]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	7efb      	ldrb	r3, [r7, #27]
 800b912:	4413      	add	r3, r2
 800b914:	791b      	ldrb	r3, [r3, #4]
 800b916:	2b20      	cmp	r3, #32
 800b918:	d067      	beq.n	800b9ea <IBUS_Channel_Update+0x172>
						ibus->state = STATE_IBUS_LENGTH ;
 800b91a:	4b7b      	ldr	r3, [pc, #492]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800b924:	e061      	b.n	800b9ea <IBUS_Channel_Update+0x172>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800b926:	4b78      	ldr	r3, [pc, #480]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b928:	681c      	ldr	r4, [r3, #0]
 800b92a:	7ef8      	ldrb	r0, [r7, #27]
 800b92c:	4b76      	ldr	r3, [pc, #472]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b92e:	6819      	ldr	r1, [r3, #0]
 800b930:	4b75      	ldr	r3, [pc, #468]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800b938:	1c55      	adds	r5, r2, #1
 800b93a:	b2ad      	uxth	r5, r5
 800b93c:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800b940:	4615      	mov	r5, r2
 800b942:	1823      	adds	r3, r4, r0
 800b944:	791a      	ldrb	r2, [r3, #4]
 800b946:	194b      	adds	r3, r1, r5
 800b948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800b94c:	4b6e      	ldr	r3, [pc, #440]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b954:	2b20      	cmp	r3, #32
 800b956:	d14a      	bne.n	800b9ee <IBUS_Channel_Update+0x176>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800b958:	4b6b      	ldr	r3, [pc, #428]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b960:	461a      	mov	r2, r3
 800b962:	4b69      	ldr	r3, [pc, #420]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b96a:	021b      	lsls	r3, r3, #8
 800b96c:	4313      	orrs	r3, r2
 800b96e:	607b      	str	r3, [r7, #4]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800b970:	4b65      	ldr	r3, [pc, #404]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	333d      	adds	r3, #61	; 0x3d
 800b976:	4618      	mov	r0, r3
 800b978:	f7ff ff06 	bl	800b788 <check_sum_f>
 800b97c:	4603      	mov	r3, r0
 800b97e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800b982:	33ff      	adds	r3, #255	; 0xff
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	429a      	cmp	r2, r3
 800b988:	d127      	bne.n	800b9da <IBUS_Channel_Update+0x162>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800b98a:	2300      	movs	r3, #0
 800b98c:	617b      	str	r3, [r7, #20]
 800b98e:	e01f      	b.n	800b9d0 <IBUS_Channel_Update+0x158>
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800b990:	4b5d      	ldr	r3, [pc, #372]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	3302      	adds	r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b99e:	b21a      	sxth	r2, r3
 800b9a0:	4b59      	ldr	r3, [pc, #356]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b9a2:	6819      	ldr	r1, [r3, #0]
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	3303      	adds	r3, #3
 800b9a8:	440b      	add	r3, r1
 800b9aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9ae:	021b      	lsls	r3, r3, #8
 800b9b0:	b21b      	sxth	r3, r3
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	b219      	sxth	r1, r3
 800b9b6:	4b54      	ldr	r3, [pc, #336]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	085b      	lsrs	r3, r3, #1
 800b9be:	b289      	uxth	r1, r1
 800b9c0:	330c      	adds	r3, #12
 800b9c2:	005b      	lsls	r3, r3, #1
 800b9c4:	4413      	add	r3, r2
 800b9c6:	460a      	mov	r2, r1
 800b9c8:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	3302      	adds	r3, #2
 800b9ce:	617b      	str	r3, [r7, #20]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	2b1b      	cmp	r3, #27
 800b9d4:	d9dc      	bls.n	800b990 <IBUS_Channel_Update+0x118>
							to_return = TRUE;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800b9da:	4b4b      	ldr	r3, [pc, #300]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800b9e4:	e003      	b.n	800b9ee <IBUS_Channel_Update+0x176>
					break;
 800b9e6:	bf00      	nop
 800b9e8:	e002      	b.n	800b9f0 <IBUS_Channel_Update+0x178>
					break ;
 800b9ea:	bf00      	nop
 800b9ec:	e000      	b.n	800b9f0 <IBUS_Channel_Update+0x178>
					break;
 800b9ee:	bf00      	nop
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800b9f0:	7efb      	ldrb	r3, [r7, #27]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	76fb      	strb	r3, [r7, #27]
 800b9f6:	7efb      	ldrb	r3, [r7, #27]
 800b9f8:	2b09      	cmp	r3, #9
 800b9fa:	f67f af4a 	bls.w	800b892 <IBUS_Channel_Update+0x1a>
 800b9fe:	e0bc      	b.n	800bb7a <IBUS_Channel_Update+0x302>
			}
		}
	}
	else
	{
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800ba00:	230a      	movs	r3, #10
 800ba02:	74fb      	strb	r3, [r7, #19]
 800ba04:	e0b5      	b.n	800bb72 <IBUS_Channel_Update+0x2fa>
			switch(ibus->state){
 800ba06:	4b40      	ldr	r3, [pc, #256]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d01b      	beq.n	800ba4a <IBUS_Channel_Update+0x1d2>
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	d041      	beq.n	800ba9a <IBUS_Channel_Update+0x222>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f040 80a8 	bne.w	800bb6c <IBUS_Channel_Update+0x2f4>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800ba1c:	4b3a      	ldr	r3, [pc, #232]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	7cfb      	ldrb	r3, [r7, #19]
 800ba22:	4413      	add	r3, r2
 800ba24:	791b      	ldrb	r3, [r3, #4]
 800ba26:	2b20      	cmp	r3, #32
 800ba28:	f040 809b 	bne.w	800bb62 <IBUS_Channel_Update+0x2ea>
						ibus->state = STATE_IBUS_COMMAND ;
 800ba2c:	4b36      	ldr	r3, [pc, #216]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800ba36:	4b34      	ldr	r3, [pc, #208]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba38:	6819      	ldr	r1, [r3, #0]
 800ba3a:	7cfa      	ldrb	r2, [r7, #19]
 800ba3c:	4b32      	ldr	r3, [pc, #200]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	440a      	add	r2, r1
 800ba42:	7912      	ldrb	r2, [r2, #4]
 800ba44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800ba48:	e08b      	b.n	800bb62 <IBUS_Channel_Update+0x2ea>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800ba4a:	4b2f      	ldr	r3, [pc, #188]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	7cfb      	ldrb	r3, [r7, #19]
 800ba50:	4413      	add	r3, r2
 800ba52:	791b      	ldrb	r3, [r3, #4]
 800ba54:	2b40      	cmp	r3, #64	; 0x40
 800ba56:	d113      	bne.n	800ba80 <IBUS_Channel_Update+0x208>
						ibus->state = STATE_IBUS_CHANNELS ;
 800ba58:	4b2b      	ldr	r3, [pc, #172]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800ba62:	4b29      	ldr	r3, [pc, #164]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba64:	6819      	ldr	r1, [r3, #0]
 800ba66:	7cfa      	ldrb	r2, [r7, #19]
 800ba68:	4b27      	ldr	r3, [pc, #156]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	440a      	add	r2, r1
 800ba6e:	7912      	ldrb	r2, [r2, #4]
 800ba70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800ba74:	4b24      	ldr	r3, [pc, #144]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2202      	movs	r2, #2
 800ba7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800ba7e:	e072      	b.n	800bb66 <IBUS_Channel_Update+0x2ee>
					else if(ibus->dma_buffer[c] != 0x20)
 800ba80:	4b21      	ldr	r3, [pc, #132]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	7cfb      	ldrb	r3, [r7, #19]
 800ba86:	4413      	add	r3, r2
 800ba88:	791b      	ldrb	r3, [r3, #4]
 800ba8a:	2b20      	cmp	r3, #32
 800ba8c:	d06b      	beq.n	800bb66 <IBUS_Channel_Update+0x2ee>
						ibus->state = STATE_IBUS_LENGTH ;
 800ba8e:	4b1e      	ldr	r3, [pc, #120]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800ba98:	e065      	b.n	800bb66 <IBUS_Channel_Update+0x2ee>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800ba9c:	681c      	ldr	r4, [r3, #0]
 800ba9e:	7cf8      	ldrb	r0, [r7, #19]
 800baa0:	4b19      	ldr	r3, [pc, #100]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800baa2:	6819      	ldr	r1, [r3, #0]
 800baa4:	4b18      	ldr	r3, [pc, #96]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800baac:	1c55      	adds	r5, r2, #1
 800baae:	b2ad      	uxth	r5, r5
 800bab0:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800bab4:	4615      	mov	r5, r2
 800bab6:	1823      	adds	r3, r4, r0
 800bab8:	791a      	ldrb	r2, [r3, #4]
 800baba:	194b      	adds	r3, r1, r5
 800babc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800bac0:	4b11      	ldr	r3, [pc, #68]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bac8:	2b20      	cmp	r3, #32
 800baca:	d14e      	bne.n	800bb6a <IBUS_Channel_Update+0x2f2>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800bacc:	4b0e      	ldr	r3, [pc, #56]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800bad4:	461a      	mov	r2, r3
 800bad6:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bade:	021b      	lsls	r3, r3, #8
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60bb      	str	r3, [r7, #8]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800bae4:	4b08      	ldr	r3, [pc, #32]	; (800bb08 <IBUS_Channel_Update+0x290>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	333d      	adds	r3, #61	; 0x3d
 800baea:	4618      	mov	r0, r3
 800baec:	f7ff fe4c 	bl	800b788 <check_sum_f>
 800baf0:	4603      	mov	r3, r0
 800baf2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800baf6:	33ff      	adds	r3, #255	; 0xff
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d12b      	bne.n	800bb56 <IBUS_Channel_Update+0x2de>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800bafe:	2300      	movs	r3, #0
 800bb00:	60fb      	str	r3, [r7, #12]
 800bb02:	e023      	b.n	800bb4c <IBUS_Channel_Update+0x2d4>
 800bb04:	200019bc 	.word	0x200019bc
 800bb08:	200019c0 	.word	0x200019c0
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800bb0c:	4b1d      	ldr	r3, [pc, #116]	; (800bb84 <IBUS_Channel_Update+0x30c>)
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	3302      	adds	r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb1a:	b21a      	sxth	r2, r3
 800bb1c:	4b19      	ldr	r3, [pc, #100]	; (800bb84 <IBUS_Channel_Update+0x30c>)
 800bb1e:	6819      	ldr	r1, [r3, #0]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3303      	adds	r3, #3
 800bb24:	440b      	add	r3, r1
 800bb26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb2a:	021b      	lsls	r3, r3, #8
 800bb2c:	b21b      	sxth	r3, r3
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	b219      	sxth	r1, r3
 800bb32:	4b14      	ldr	r3, [pc, #80]	; (800bb84 <IBUS_Channel_Update+0x30c>)
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	085b      	lsrs	r3, r3, #1
 800bb3a:	b289      	uxth	r1, r1
 800bb3c:	330c      	adds	r3, #12
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	4413      	add	r3, r2
 800bb42:	460a      	mov	r2, r1
 800bb44:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3302      	adds	r3, #2
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2b1b      	cmp	r3, #27
 800bb50:	d9dc      	bls.n	800bb0c <IBUS_Channel_Update+0x294>
							to_return = TRUE;
 800bb52:	2301      	movs	r3, #1
 800bb54:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800bb56:	4b0b      	ldr	r3, [pc, #44]	; (800bb84 <IBUS_Channel_Update+0x30c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800bb60:	e003      	b.n	800bb6a <IBUS_Channel_Update+0x2f2>
					break;
 800bb62:	bf00      	nop
 800bb64:	e002      	b.n	800bb6c <IBUS_Channel_Update+0x2f4>
					break ;
 800bb66:	bf00      	nop
 800bb68:	e000      	b.n	800bb6c <IBUS_Channel_Update+0x2f4>
					break;
 800bb6a:	bf00      	nop
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800bb6c:	7cfb      	ldrb	r3, [r7, #19]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	74fb      	strb	r3, [r7, #19]
 800bb72:	7cfb      	ldrb	r3, [r7, #19]
 800bb74:	2b13      	cmp	r3, #19
 800bb76:	f67f af46 	bls.w	800ba06 <IBUS_Channel_Update+0x18e>
		}
	}



	return to_return ;
 800bb7a:	69fb      	ldr	r3, [r7, #28]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3720      	adds	r7, #32
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bdb0      	pop	{r4, r5, r7, pc}
 800bb84:	200019c0 	.word	0x200019c0

0800bb88 <MOTORS_Init>:
 */

#include "../Inc/Motors.h"


void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, uint16_t * duty, bool_e start){
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
	motors->htim = htim ;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	601a      	str	r2, [r3, #0]
	motors->duty = duty;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	609a      	str	r2, [r3, #8]
	if(start){
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d022      	beq.n	800bbee <MOTORS_Init+0x66>
		motors->state = MOTORS_STATE_RUNNING ;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	711a      	strb	r2, [r3, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 800bbae:	2100      	movs	r1, #0
 800bbb0:	68b8      	ldr	r0, [r7, #8]
 800bbb2:	f7fd fd21 	bl	80095f8 <HAL_TIM_PWM_Start>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	461a      	mov	r2, r3
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 800bbbe:	2104      	movs	r1, #4
 800bbc0:	68b8      	ldr	r0, [r7, #8]
 800bbc2:	f7fd fd19 	bl	80095f8 <HAL_TIM_PWM_Start>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	461a      	mov	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 800bbce:	2108      	movs	r1, #8
 800bbd0:	68b8      	ldr	r0, [r7, #8]
 800bbd2:	f7fd fd11 	bl	80095f8 <HAL_TIM_PWM_Start>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	461a      	mov	r2, r3
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 800bbde:	210c      	movs	r1, #12
 800bbe0:	68b8      	ldr	r0, [r7, #8]
 800bbe2:	f7fd fd09 	bl	80095f8 <HAL_TIM_PWM_Start>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	461a      	mov	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	731a      	strb	r2, [r3, #12]
	}
}
 800bbee:	bf00      	nop
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_2);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_3);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]

	motors->duty[0] = MIN(1000, motors->duty[0]);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	881a      	ldrh	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800bc0c:	bf28      	it	cs
 800bc0e:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800bc12:	b292      	uxth	r2, r2
 800bc14:	801a      	strh	r2, [r3, #0]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	3302      	adds	r3, #2
 800bc1c:	881a      	ldrh	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	3302      	adds	r3, #2
 800bc24:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800bc28:	bf28      	it	cs
 800bc2a:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800bc2e:	b292      	uxth	r2, r2
 800bc30:	801a      	strh	r2, [r3, #0]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	3304      	adds	r3, #4
 800bc38:	881a      	ldrh	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800bc44:	bf28      	it	cs
 800bc46:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800bc4a:	b292      	uxth	r2, r2
 800bc4c:	801a      	strh	r2, [r3, #0]
	motors->duty[3] = MIN(1000, motors->duty[3]);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	3306      	adds	r3, #6
 800bc54:	881a      	ldrh	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	3306      	adds	r3, #6
 800bc5c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800bc60:	bf28      	it	cs
 800bc62:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800bc66:	b292      	uxth	r2, r2
 800bc68:	801a      	strh	r2, [r3, #0]


	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	635a      	str	r2, [r3, #52]	; 0x34
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	3302      	adds	r3, #2
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	639a      	str	r2, [r3, #56]	; 0x38
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	3304      	adds	r3, #4
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	63da      	str	r2, [r3, #60]	; 0x3c
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	3306      	adds	r3, #6
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	641a      	str	r2, [r3, #64]	; 0x40
}
 800bcb8:	bf00      	nop
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <PID_compute>:
 */

#include "../Inc/Pid.h"

//renvoit la sortie du pid
float PID_compute(PID_t * pid, float consigne, float measurement){
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	ed87 0a02 	vstr	s0, [r7, #8]
 800bcd0:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calcul de l'erreur
	pid->error = measurement - consigne ;
 800bcd4:	ed97 7a01 	vldr	s14, [r7, #4]
 800bcd8:	edd7 7a02 	vldr	s15, [r7, #8]
 800bcdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Calcul des P I D
	pid->P = pid->settings[PID_KP] * pid->error ;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	ed93 7a04 	vldr	s14, [r3, #16]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800bcf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->I += pid->settings[PID_KI] * pid->error / pid->settings[PID_FREQUENCY];
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	ed93 7a02 	vldr	s14, [r3, #8]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	edd3 6a05 	vldr	s13, [r3, #20]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800bd0e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	edd3 6a07 	vldr	s13, [r3, #28]
 800bd18:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bd1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	edc3 7a02 	vstr	s15, [r3, #8]
	pid->D = pid->settings[PID_KD] * (measurement - pid->previous_measurement) * pid->settings[PID_FREQUENCY] ;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	ed93 7a06 	vldr	s14, [r3, #24]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bd32:	edd7 6a01 	vldr	s13, [r7, #4]
 800bd36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bd3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	edd3 7a07 	vldr	s15, [r3, #28]
 800bd44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	edc3 7a03 	vstr	s15, [r3, #12]

	//Filtrage
	pid->D = FILTER_process(&pid->d_filter, pid->D);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	edd3 7a03 	vldr	s15, [r3, #12]
 800bd5a:	eeb0 0a67 	vmov.f32	s0, s15
 800bd5e:	4610      	mov	r0, r2
 800bd60:	f7ff fcab 	bl	800b6ba <FILTER_process>
 800bd64:	eef0 7a40 	vmov.f32	s15, s0
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	edc3 7a03 	vstr	s15, [r3, #12]

	//On somme le tout
	pid->output = pid->P + pid->I + pid->D ;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	ed93 7a01 	vldr	s14, [r3, #4]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	edd3 7a02 	vldr	s15, [r3, #8]
 800bd7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	edd3 7a03 	vldr	s15, [r3, #12]
 800bd84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	edc3 7a00 	vstr	s15, [r3]

	//Check mid and max
	pid->output = MIN(pid->settings[PID_MAX_OUTPUT], pid->output);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	ed93 7a08 	vldr	s14, [r3, #32]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	edd3 7a00 	vldr	s15, [r3]
 800bd9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda2:	dd02      	ble.n	800bdaa <PID_compute+0xe6>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	e001      	b.n	800bdae <PID_compute+0xea>
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	6013      	str	r3, [r2, #0]
	pid->output = MAX(-pid->settings[PID_MAX_OUTPUT], pid->output);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	edd3 7a08 	vldr	s15, [r3, #32]
 800bdb8:	eeb1 7a67 	vneg.f32	s14, s15
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	edd3 7a00 	vldr	s15, [r3]
 800bdc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdca:	dd05      	ble.n	800bdd8 <PID_compute+0x114>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	edd3 7a08 	vldr	s15, [r3, #32]
 800bdd2:	eef1 7a67 	vneg.f32	s15, s15
 800bdd6:	e002      	b.n	800bdde <PID_compute+0x11a>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	edd3 7a00 	vldr	s15, [r3]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	edc3 7a00 	vstr	s15, [r3]

	//Mise � jour des valeurs ant�rieures
	pid->previous_measurement = measurement ;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	629a      	str	r2, [r3, #40]	; 0x28
	return pid->output ;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	ee07 3a90 	vmov	s15, r3
}
 800bdf2:	eeb0 0a67 	vmov.f32	s0, s15
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <PID_init>:



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	603b      	str	r3, [r7, #0]
 800be08:	4613      	mov	r3, r2
 800be0a:	71fb      	strb	r3, [r7, #7]
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800be0c:	2300      	movs	r3, #0
 800be0e:	75fb      	strb	r3, [r7, #23]
 800be10:	e00d      	b.n	800be2e <PID_init+0x32>
		pid->settings[s] = settings[s] ;
 800be12:	7dfb      	ldrb	r3, [r7, #23]
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	441a      	add	r2, r3
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	6812      	ldr	r2, [r2, #0]
 800be1e:	68f9      	ldr	r1, [r7, #12]
 800be20:	3304      	adds	r3, #4
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	440b      	add	r3, r1
 800be26:	601a      	str	r2, [r3, #0]
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800be28:	7dfb      	ldrb	r3, [r7, #23]
 800be2a:	3301      	adds	r3, #1
 800be2c:	75fb      	strb	r3, [r7, #23]
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
 800be30:	2b04      	cmp	r3, #4
 800be32:	d9ee      	bls.n	800be12 <PID_init+0x16>

	//Init values
	pid->P = 0 ;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f04f 0200 	mov.w	r2, #0
 800be3a:	605a      	str	r2, [r3, #4]
	pid->I = 0 ;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f04f 0200 	mov.w	r2, #0
 800be42:	609a      	str	r2, [r3, #8]
	pid->D = 0 ;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f04f 0200 	mov.w	r2, #0
 800be4a:	60da      	str	r2, [r3, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	332c      	adds	r3, #44	; 0x2c
 800be50:	79fa      	ldrb	r2, [r7, #7]
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	4618      	mov	r0, r3
 800be56:	f7ff fc0d 	bl	800b674 <FILTER_init>
}
 800be5a:	bf00      	nop
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
	...

0800be64 <__errno>:
 800be64:	4b01      	ldr	r3, [pc, #4]	; (800be6c <__errno+0x8>)
 800be66:	6818      	ldr	r0, [r3, #0]
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	20001514 	.word	0x20001514

0800be70 <__libc_init_array>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	4e0d      	ldr	r6, [pc, #52]	; (800bea8 <__libc_init_array+0x38>)
 800be74:	4c0d      	ldr	r4, [pc, #52]	; (800beac <__libc_init_array+0x3c>)
 800be76:	1ba4      	subs	r4, r4, r6
 800be78:	10a4      	asrs	r4, r4, #2
 800be7a:	2500      	movs	r5, #0
 800be7c:	42a5      	cmp	r5, r4
 800be7e:	d109      	bne.n	800be94 <__libc_init_array+0x24>
 800be80:	4e0b      	ldr	r6, [pc, #44]	; (800beb0 <__libc_init_array+0x40>)
 800be82:	4c0c      	ldr	r4, [pc, #48]	; (800beb4 <__libc_init_array+0x44>)
 800be84:	f002 fe1c 	bl	800eac0 <_init>
 800be88:	1ba4      	subs	r4, r4, r6
 800be8a:	10a4      	asrs	r4, r4, #2
 800be8c:	2500      	movs	r5, #0
 800be8e:	42a5      	cmp	r5, r4
 800be90:	d105      	bne.n	800be9e <__libc_init_array+0x2e>
 800be92:	bd70      	pop	{r4, r5, r6, pc}
 800be94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be98:	4798      	blx	r3
 800be9a:	3501      	adds	r5, #1
 800be9c:	e7ee      	b.n	800be7c <__libc_init_array+0xc>
 800be9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bea2:	4798      	blx	r3
 800bea4:	3501      	adds	r5, #1
 800bea6:	e7f2      	b.n	800be8e <__libc_init_array+0x1e>
 800bea8:	0800ede4 	.word	0x0800ede4
 800beac:	0800ede4 	.word	0x0800ede4
 800beb0:	0800ede4 	.word	0x0800ede4
 800beb4:	0800ede8 	.word	0x0800ede8

0800beb8 <memcpy>:
 800beb8:	b510      	push	{r4, lr}
 800beba:	1e43      	subs	r3, r0, #1
 800bebc:	440a      	add	r2, r1
 800bebe:	4291      	cmp	r1, r2
 800bec0:	d100      	bne.n	800bec4 <memcpy+0xc>
 800bec2:	bd10      	pop	{r4, pc}
 800bec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800becc:	e7f7      	b.n	800bebe <memcpy+0x6>

0800bece <memmove>:
 800bece:	4288      	cmp	r0, r1
 800bed0:	b510      	push	{r4, lr}
 800bed2:	eb01 0302 	add.w	r3, r1, r2
 800bed6:	d807      	bhi.n	800bee8 <memmove+0x1a>
 800bed8:	1e42      	subs	r2, r0, #1
 800beda:	4299      	cmp	r1, r3
 800bedc:	d00a      	beq.n	800bef4 <memmove+0x26>
 800bede:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bee2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bee6:	e7f8      	b.n	800beda <memmove+0xc>
 800bee8:	4283      	cmp	r3, r0
 800beea:	d9f5      	bls.n	800bed8 <memmove+0xa>
 800beec:	1881      	adds	r1, r0, r2
 800beee:	1ad2      	subs	r2, r2, r3
 800bef0:	42d3      	cmn	r3, r2
 800bef2:	d100      	bne.n	800bef6 <memmove+0x28>
 800bef4:	bd10      	pop	{r4, pc}
 800bef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800befa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800befe:	e7f7      	b.n	800bef0 <memmove+0x22>

0800bf00 <memset>:
 800bf00:	4402      	add	r2, r0
 800bf02:	4603      	mov	r3, r0
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d100      	bne.n	800bf0a <memset+0xa>
 800bf08:	4770      	bx	lr
 800bf0a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf0e:	e7f9      	b.n	800bf04 <memset+0x4>

0800bf10 <__cvt>:
 800bf10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf14:	ec55 4b10 	vmov	r4, r5, d0
 800bf18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bf1a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bf1e:	2d00      	cmp	r5, #0
 800bf20:	460e      	mov	r6, r1
 800bf22:	4691      	mov	r9, r2
 800bf24:	4619      	mov	r1, r3
 800bf26:	bfb8      	it	lt
 800bf28:	4622      	movlt	r2, r4
 800bf2a:	462b      	mov	r3, r5
 800bf2c:	f027 0720 	bic.w	r7, r7, #32
 800bf30:	bfbb      	ittet	lt
 800bf32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bf36:	461d      	movlt	r5, r3
 800bf38:	2300      	movge	r3, #0
 800bf3a:	232d      	movlt	r3, #45	; 0x2d
 800bf3c:	bfb8      	it	lt
 800bf3e:	4614      	movlt	r4, r2
 800bf40:	2f46      	cmp	r7, #70	; 0x46
 800bf42:	700b      	strb	r3, [r1, #0]
 800bf44:	d004      	beq.n	800bf50 <__cvt+0x40>
 800bf46:	2f45      	cmp	r7, #69	; 0x45
 800bf48:	d100      	bne.n	800bf4c <__cvt+0x3c>
 800bf4a:	3601      	adds	r6, #1
 800bf4c:	2102      	movs	r1, #2
 800bf4e:	e000      	b.n	800bf52 <__cvt+0x42>
 800bf50:	2103      	movs	r1, #3
 800bf52:	ab03      	add	r3, sp, #12
 800bf54:	9301      	str	r3, [sp, #4]
 800bf56:	ab02      	add	r3, sp, #8
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	4632      	mov	r2, r6
 800bf5c:	4653      	mov	r3, sl
 800bf5e:	ec45 4b10 	vmov	d0, r4, r5
 800bf62:	f000 fea9 	bl	800ccb8 <_dtoa_r>
 800bf66:	2f47      	cmp	r7, #71	; 0x47
 800bf68:	4680      	mov	r8, r0
 800bf6a:	d102      	bne.n	800bf72 <__cvt+0x62>
 800bf6c:	f019 0f01 	tst.w	r9, #1
 800bf70:	d026      	beq.n	800bfc0 <__cvt+0xb0>
 800bf72:	2f46      	cmp	r7, #70	; 0x46
 800bf74:	eb08 0906 	add.w	r9, r8, r6
 800bf78:	d111      	bne.n	800bf9e <__cvt+0x8e>
 800bf7a:	f898 3000 	ldrb.w	r3, [r8]
 800bf7e:	2b30      	cmp	r3, #48	; 0x30
 800bf80:	d10a      	bne.n	800bf98 <__cvt+0x88>
 800bf82:	2200      	movs	r2, #0
 800bf84:	2300      	movs	r3, #0
 800bf86:	4620      	mov	r0, r4
 800bf88:	4629      	mov	r1, r5
 800bf8a:	f7f4 fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf8e:	b918      	cbnz	r0, 800bf98 <__cvt+0x88>
 800bf90:	f1c6 0601 	rsb	r6, r6, #1
 800bf94:	f8ca 6000 	str.w	r6, [sl]
 800bf98:	f8da 3000 	ldr.w	r3, [sl]
 800bf9c:	4499      	add	r9, r3
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	f7f4 fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfaa:	b938      	cbnz	r0, 800bfbc <__cvt+0xac>
 800bfac:	2230      	movs	r2, #48	; 0x30
 800bfae:	9b03      	ldr	r3, [sp, #12]
 800bfb0:	454b      	cmp	r3, r9
 800bfb2:	d205      	bcs.n	800bfc0 <__cvt+0xb0>
 800bfb4:	1c59      	adds	r1, r3, #1
 800bfb6:	9103      	str	r1, [sp, #12]
 800bfb8:	701a      	strb	r2, [r3, #0]
 800bfba:	e7f8      	b.n	800bfae <__cvt+0x9e>
 800bfbc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfc0:	9b03      	ldr	r3, [sp, #12]
 800bfc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfc4:	eba3 0308 	sub.w	r3, r3, r8
 800bfc8:	4640      	mov	r0, r8
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	b004      	add	sp, #16
 800bfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bfd2 <__exponent>:
 800bfd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfd4:	2900      	cmp	r1, #0
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	bfba      	itte	lt
 800bfda:	4249      	neglt	r1, r1
 800bfdc:	232d      	movlt	r3, #45	; 0x2d
 800bfde:	232b      	movge	r3, #43	; 0x2b
 800bfe0:	2909      	cmp	r1, #9
 800bfe2:	f804 2b02 	strb.w	r2, [r4], #2
 800bfe6:	7043      	strb	r3, [r0, #1]
 800bfe8:	dd20      	ble.n	800c02c <__exponent+0x5a>
 800bfea:	f10d 0307 	add.w	r3, sp, #7
 800bfee:	461f      	mov	r7, r3
 800bff0:	260a      	movs	r6, #10
 800bff2:	fb91 f5f6 	sdiv	r5, r1, r6
 800bff6:	fb06 1115 	mls	r1, r6, r5, r1
 800bffa:	3130      	adds	r1, #48	; 0x30
 800bffc:	2d09      	cmp	r5, #9
 800bffe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c002:	f103 32ff 	add.w	r2, r3, #4294967295
 800c006:	4629      	mov	r1, r5
 800c008:	dc09      	bgt.n	800c01e <__exponent+0x4c>
 800c00a:	3130      	adds	r1, #48	; 0x30
 800c00c:	3b02      	subs	r3, #2
 800c00e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c012:	42bb      	cmp	r3, r7
 800c014:	4622      	mov	r2, r4
 800c016:	d304      	bcc.n	800c022 <__exponent+0x50>
 800c018:	1a10      	subs	r0, r2, r0
 800c01a:	b003      	add	sp, #12
 800c01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c01e:	4613      	mov	r3, r2
 800c020:	e7e7      	b.n	800bff2 <__exponent+0x20>
 800c022:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c026:	f804 2b01 	strb.w	r2, [r4], #1
 800c02a:	e7f2      	b.n	800c012 <__exponent+0x40>
 800c02c:	2330      	movs	r3, #48	; 0x30
 800c02e:	4419      	add	r1, r3
 800c030:	7083      	strb	r3, [r0, #2]
 800c032:	1d02      	adds	r2, r0, #4
 800c034:	70c1      	strb	r1, [r0, #3]
 800c036:	e7ef      	b.n	800c018 <__exponent+0x46>

0800c038 <_printf_float>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	b08d      	sub	sp, #52	; 0x34
 800c03e:	460c      	mov	r4, r1
 800c040:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c044:	4616      	mov	r6, r2
 800c046:	461f      	mov	r7, r3
 800c048:	4605      	mov	r5, r0
 800c04a:	f001 fd67 	bl	800db1c <_localeconv_r>
 800c04e:	6803      	ldr	r3, [r0, #0]
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	4618      	mov	r0, r3
 800c054:	f7f4 f8bc 	bl	80001d0 <strlen>
 800c058:	2300      	movs	r3, #0
 800c05a:	930a      	str	r3, [sp, #40]	; 0x28
 800c05c:	f8d8 3000 	ldr.w	r3, [r8]
 800c060:	9005      	str	r0, [sp, #20]
 800c062:	3307      	adds	r3, #7
 800c064:	f023 0307 	bic.w	r3, r3, #7
 800c068:	f103 0208 	add.w	r2, r3, #8
 800c06c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c070:	f8d4 b000 	ldr.w	fp, [r4]
 800c074:	f8c8 2000 	str.w	r2, [r8]
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c080:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c084:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c088:	9307      	str	r3, [sp, #28]
 800c08a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c08e:	f04f 32ff 	mov.w	r2, #4294967295
 800c092:	4ba7      	ldr	r3, [pc, #668]	; (800c330 <_printf_float+0x2f8>)
 800c094:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c098:	f7f4 fd48 	bl	8000b2c <__aeabi_dcmpun>
 800c09c:	bb70      	cbnz	r0, 800c0fc <_printf_float+0xc4>
 800c09e:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a2:	4ba3      	ldr	r3, [pc, #652]	; (800c330 <_printf_float+0x2f8>)
 800c0a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0a8:	f7f4 fd22 	bl	8000af0 <__aeabi_dcmple>
 800c0ac:	bb30      	cbnz	r0, 800c0fc <_printf_float+0xc4>
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	4640      	mov	r0, r8
 800c0b4:	4649      	mov	r1, r9
 800c0b6:	f7f4 fd11 	bl	8000adc <__aeabi_dcmplt>
 800c0ba:	b110      	cbz	r0, 800c0c2 <_printf_float+0x8a>
 800c0bc:	232d      	movs	r3, #45	; 0x2d
 800c0be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0c2:	4a9c      	ldr	r2, [pc, #624]	; (800c334 <_printf_float+0x2fc>)
 800c0c4:	4b9c      	ldr	r3, [pc, #624]	; (800c338 <_printf_float+0x300>)
 800c0c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c0ca:	bf8c      	ite	hi
 800c0cc:	4690      	movhi	r8, r2
 800c0ce:	4698      	movls	r8, r3
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	f02b 0204 	bic.w	r2, fp, #4
 800c0d6:	6123      	str	r3, [r4, #16]
 800c0d8:	6022      	str	r2, [r4, #0]
 800c0da:	f04f 0900 	mov.w	r9, #0
 800c0de:	9700      	str	r7, [sp, #0]
 800c0e0:	4633      	mov	r3, r6
 800c0e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f000 f9e6 	bl	800c4b8 <_printf_common>
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	f040 808d 	bne.w	800c20c <_printf_float+0x1d4>
 800c0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f6:	b00d      	add	sp, #52	; 0x34
 800c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fc:	4642      	mov	r2, r8
 800c0fe:	464b      	mov	r3, r9
 800c100:	4640      	mov	r0, r8
 800c102:	4649      	mov	r1, r9
 800c104:	f7f4 fd12 	bl	8000b2c <__aeabi_dcmpun>
 800c108:	b110      	cbz	r0, 800c110 <_printf_float+0xd8>
 800c10a:	4a8c      	ldr	r2, [pc, #560]	; (800c33c <_printf_float+0x304>)
 800c10c:	4b8c      	ldr	r3, [pc, #560]	; (800c340 <_printf_float+0x308>)
 800c10e:	e7da      	b.n	800c0c6 <_printf_float+0x8e>
 800c110:	6861      	ldr	r1, [r4, #4]
 800c112:	1c4b      	adds	r3, r1, #1
 800c114:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c118:	a80a      	add	r0, sp, #40	; 0x28
 800c11a:	d13e      	bne.n	800c19a <_printf_float+0x162>
 800c11c:	2306      	movs	r3, #6
 800c11e:	6063      	str	r3, [r4, #4]
 800c120:	2300      	movs	r3, #0
 800c122:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c126:	ab09      	add	r3, sp, #36	; 0x24
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	ec49 8b10 	vmov	d0, r8, r9
 800c12e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c132:	6022      	str	r2, [r4, #0]
 800c134:	f8cd a004 	str.w	sl, [sp, #4]
 800c138:	6861      	ldr	r1, [r4, #4]
 800c13a:	4628      	mov	r0, r5
 800c13c:	f7ff fee8 	bl	800bf10 <__cvt>
 800c140:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c144:	2b47      	cmp	r3, #71	; 0x47
 800c146:	4680      	mov	r8, r0
 800c148:	d109      	bne.n	800c15e <_printf_float+0x126>
 800c14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14c:	1cd8      	adds	r0, r3, #3
 800c14e:	db02      	blt.n	800c156 <_printf_float+0x11e>
 800c150:	6862      	ldr	r2, [r4, #4]
 800c152:	4293      	cmp	r3, r2
 800c154:	dd47      	ble.n	800c1e6 <_printf_float+0x1ae>
 800c156:	f1aa 0a02 	sub.w	sl, sl, #2
 800c15a:	fa5f fa8a 	uxtb.w	sl, sl
 800c15e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c162:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c164:	d824      	bhi.n	800c1b0 <_printf_float+0x178>
 800c166:	3901      	subs	r1, #1
 800c168:	4652      	mov	r2, sl
 800c16a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c16e:	9109      	str	r1, [sp, #36]	; 0x24
 800c170:	f7ff ff2f 	bl	800bfd2 <__exponent>
 800c174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c176:	1813      	adds	r3, r2, r0
 800c178:	2a01      	cmp	r2, #1
 800c17a:	4681      	mov	r9, r0
 800c17c:	6123      	str	r3, [r4, #16]
 800c17e:	dc02      	bgt.n	800c186 <_printf_float+0x14e>
 800c180:	6822      	ldr	r2, [r4, #0]
 800c182:	07d1      	lsls	r1, r2, #31
 800c184:	d501      	bpl.n	800c18a <_printf_float+0x152>
 800c186:	3301      	adds	r3, #1
 800c188:	6123      	str	r3, [r4, #16]
 800c18a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d0a5      	beq.n	800c0de <_printf_float+0xa6>
 800c192:	232d      	movs	r3, #45	; 0x2d
 800c194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c198:	e7a1      	b.n	800c0de <_printf_float+0xa6>
 800c19a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c19e:	f000 8177 	beq.w	800c490 <_printf_float+0x458>
 800c1a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c1a6:	d1bb      	bne.n	800c120 <_printf_float+0xe8>
 800c1a8:	2900      	cmp	r1, #0
 800c1aa:	d1b9      	bne.n	800c120 <_printf_float+0xe8>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e7b6      	b.n	800c11e <_printf_float+0xe6>
 800c1b0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c1b4:	d119      	bne.n	800c1ea <_printf_float+0x1b2>
 800c1b6:	2900      	cmp	r1, #0
 800c1b8:	6863      	ldr	r3, [r4, #4]
 800c1ba:	dd0c      	ble.n	800c1d6 <_printf_float+0x19e>
 800c1bc:	6121      	str	r1, [r4, #16]
 800c1be:	b913      	cbnz	r3, 800c1c6 <_printf_float+0x18e>
 800c1c0:	6822      	ldr	r2, [r4, #0]
 800c1c2:	07d2      	lsls	r2, r2, #31
 800c1c4:	d502      	bpl.n	800c1cc <_printf_float+0x194>
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	440b      	add	r3, r1
 800c1ca:	6123      	str	r3, [r4, #16]
 800c1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ce:	65a3      	str	r3, [r4, #88]	; 0x58
 800c1d0:	f04f 0900 	mov.w	r9, #0
 800c1d4:	e7d9      	b.n	800c18a <_printf_float+0x152>
 800c1d6:	b913      	cbnz	r3, 800c1de <_printf_float+0x1a6>
 800c1d8:	6822      	ldr	r2, [r4, #0]
 800c1da:	07d0      	lsls	r0, r2, #31
 800c1dc:	d501      	bpl.n	800c1e2 <_printf_float+0x1aa>
 800c1de:	3302      	adds	r3, #2
 800c1e0:	e7f3      	b.n	800c1ca <_printf_float+0x192>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e7f1      	b.n	800c1ca <_printf_float+0x192>
 800c1e6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c1ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	db05      	blt.n	800c1fe <_printf_float+0x1c6>
 800c1f2:	6822      	ldr	r2, [r4, #0]
 800c1f4:	6123      	str	r3, [r4, #16]
 800c1f6:	07d1      	lsls	r1, r2, #31
 800c1f8:	d5e8      	bpl.n	800c1cc <_printf_float+0x194>
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	e7e5      	b.n	800c1ca <_printf_float+0x192>
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	bfd4      	ite	le
 800c202:	f1c3 0302 	rsble	r3, r3, #2
 800c206:	2301      	movgt	r3, #1
 800c208:	4413      	add	r3, r2
 800c20a:	e7de      	b.n	800c1ca <_printf_float+0x192>
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	055a      	lsls	r2, r3, #21
 800c210:	d407      	bmi.n	800c222 <_printf_float+0x1ea>
 800c212:	6923      	ldr	r3, [r4, #16]
 800c214:	4642      	mov	r2, r8
 800c216:	4631      	mov	r1, r6
 800c218:	4628      	mov	r0, r5
 800c21a:	47b8      	blx	r7
 800c21c:	3001      	adds	r0, #1
 800c21e:	d12b      	bne.n	800c278 <_printf_float+0x240>
 800c220:	e767      	b.n	800c0f2 <_printf_float+0xba>
 800c222:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c226:	f240 80dc 	bls.w	800c3e2 <_printf_float+0x3aa>
 800c22a:	2200      	movs	r2, #0
 800c22c:	2300      	movs	r3, #0
 800c22e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c232:	f7f4 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 800c236:	2800      	cmp	r0, #0
 800c238:	d033      	beq.n	800c2a2 <_printf_float+0x26a>
 800c23a:	2301      	movs	r3, #1
 800c23c:	4a41      	ldr	r2, [pc, #260]	; (800c344 <_printf_float+0x30c>)
 800c23e:	4631      	mov	r1, r6
 800c240:	4628      	mov	r0, r5
 800c242:	47b8      	blx	r7
 800c244:	3001      	adds	r0, #1
 800c246:	f43f af54 	beq.w	800c0f2 <_printf_float+0xba>
 800c24a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c24e:	429a      	cmp	r2, r3
 800c250:	db02      	blt.n	800c258 <_printf_float+0x220>
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	07d8      	lsls	r0, r3, #31
 800c256:	d50f      	bpl.n	800c278 <_printf_float+0x240>
 800c258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c25c:	4631      	mov	r1, r6
 800c25e:	4628      	mov	r0, r5
 800c260:	47b8      	blx	r7
 800c262:	3001      	adds	r0, #1
 800c264:	f43f af45 	beq.w	800c0f2 <_printf_float+0xba>
 800c268:	f04f 0800 	mov.w	r8, #0
 800c26c:	f104 091a 	add.w	r9, r4, #26
 800c270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c272:	3b01      	subs	r3, #1
 800c274:	4543      	cmp	r3, r8
 800c276:	dc09      	bgt.n	800c28c <_printf_float+0x254>
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	079b      	lsls	r3, r3, #30
 800c27c:	f100 8103 	bmi.w	800c486 <_printf_float+0x44e>
 800c280:	68e0      	ldr	r0, [r4, #12]
 800c282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c284:	4298      	cmp	r0, r3
 800c286:	bfb8      	it	lt
 800c288:	4618      	movlt	r0, r3
 800c28a:	e734      	b.n	800c0f6 <_printf_float+0xbe>
 800c28c:	2301      	movs	r3, #1
 800c28e:	464a      	mov	r2, r9
 800c290:	4631      	mov	r1, r6
 800c292:	4628      	mov	r0, r5
 800c294:	47b8      	blx	r7
 800c296:	3001      	adds	r0, #1
 800c298:	f43f af2b 	beq.w	800c0f2 <_printf_float+0xba>
 800c29c:	f108 0801 	add.w	r8, r8, #1
 800c2a0:	e7e6      	b.n	800c270 <_printf_float+0x238>
 800c2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	dc2b      	bgt.n	800c300 <_printf_float+0x2c8>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	4a26      	ldr	r2, [pc, #152]	; (800c344 <_printf_float+0x30c>)
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	47b8      	blx	r7
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	f43f af1d 	beq.w	800c0f2 <_printf_float+0xba>
 800c2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2ba:	b923      	cbnz	r3, 800c2c6 <_printf_float+0x28e>
 800c2bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2be:	b913      	cbnz	r3, 800c2c6 <_printf_float+0x28e>
 800c2c0:	6823      	ldr	r3, [r4, #0]
 800c2c2:	07d9      	lsls	r1, r3, #31
 800c2c4:	d5d8      	bpl.n	800c278 <_printf_float+0x240>
 800c2c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2ca:	4631      	mov	r1, r6
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	47b8      	blx	r7
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	f43f af0e 	beq.w	800c0f2 <_printf_float+0xba>
 800c2d6:	f04f 0900 	mov.w	r9, #0
 800c2da:	f104 0a1a 	add.w	sl, r4, #26
 800c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e0:	425b      	negs	r3, r3
 800c2e2:	454b      	cmp	r3, r9
 800c2e4:	dc01      	bgt.n	800c2ea <_printf_float+0x2b2>
 800c2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2e8:	e794      	b.n	800c214 <_printf_float+0x1dc>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	4652      	mov	r2, sl
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	47b8      	blx	r7
 800c2f4:	3001      	adds	r0, #1
 800c2f6:	f43f aefc 	beq.w	800c0f2 <_printf_float+0xba>
 800c2fa:	f109 0901 	add.w	r9, r9, #1
 800c2fe:	e7ee      	b.n	800c2de <_printf_float+0x2a6>
 800c300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c304:	429a      	cmp	r2, r3
 800c306:	bfa8      	it	ge
 800c308:	461a      	movge	r2, r3
 800c30a:	2a00      	cmp	r2, #0
 800c30c:	4691      	mov	r9, r2
 800c30e:	dd07      	ble.n	800c320 <_printf_float+0x2e8>
 800c310:	4613      	mov	r3, r2
 800c312:	4631      	mov	r1, r6
 800c314:	4642      	mov	r2, r8
 800c316:	4628      	mov	r0, r5
 800c318:	47b8      	blx	r7
 800c31a:	3001      	adds	r0, #1
 800c31c:	f43f aee9 	beq.w	800c0f2 <_printf_float+0xba>
 800c320:	f104 031a 	add.w	r3, r4, #26
 800c324:	f04f 0b00 	mov.w	fp, #0
 800c328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c32c:	9306      	str	r3, [sp, #24]
 800c32e:	e015      	b.n	800c35c <_printf_float+0x324>
 800c330:	7fefffff 	.word	0x7fefffff
 800c334:	0800edd2 	.word	0x0800edd2
 800c338:	0800eb18 	.word	0x0800eb18
 800c33c:	0800eb20 	.word	0x0800eb20
 800c340:	0800eb1c 	.word	0x0800eb1c
 800c344:	0800eb24 	.word	0x0800eb24
 800c348:	2301      	movs	r3, #1
 800c34a:	9a06      	ldr	r2, [sp, #24]
 800c34c:	4631      	mov	r1, r6
 800c34e:	4628      	mov	r0, r5
 800c350:	47b8      	blx	r7
 800c352:	3001      	adds	r0, #1
 800c354:	f43f aecd 	beq.w	800c0f2 <_printf_float+0xba>
 800c358:	f10b 0b01 	add.w	fp, fp, #1
 800c35c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c360:	ebaa 0309 	sub.w	r3, sl, r9
 800c364:	455b      	cmp	r3, fp
 800c366:	dcef      	bgt.n	800c348 <_printf_float+0x310>
 800c368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c36c:	429a      	cmp	r2, r3
 800c36e:	44d0      	add	r8, sl
 800c370:	db15      	blt.n	800c39e <_printf_float+0x366>
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	07da      	lsls	r2, r3, #31
 800c376:	d412      	bmi.n	800c39e <_printf_float+0x366>
 800c378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c37a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c37c:	eba3 020a 	sub.w	r2, r3, sl
 800c380:	eba3 0a01 	sub.w	sl, r3, r1
 800c384:	4592      	cmp	sl, r2
 800c386:	bfa8      	it	ge
 800c388:	4692      	movge	sl, r2
 800c38a:	f1ba 0f00 	cmp.w	sl, #0
 800c38e:	dc0e      	bgt.n	800c3ae <_printf_float+0x376>
 800c390:	f04f 0800 	mov.w	r8, #0
 800c394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c398:	f104 091a 	add.w	r9, r4, #26
 800c39c:	e019      	b.n	800c3d2 <_printf_float+0x39a>
 800c39e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	47b8      	blx	r7
 800c3a8:	3001      	adds	r0, #1
 800c3aa:	d1e5      	bne.n	800c378 <_printf_float+0x340>
 800c3ac:	e6a1      	b.n	800c0f2 <_printf_float+0xba>
 800c3ae:	4653      	mov	r3, sl
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	4631      	mov	r1, r6
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	47b8      	blx	r7
 800c3b8:	3001      	adds	r0, #1
 800c3ba:	d1e9      	bne.n	800c390 <_printf_float+0x358>
 800c3bc:	e699      	b.n	800c0f2 <_printf_float+0xba>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	464a      	mov	r2, r9
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	47b8      	blx	r7
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	f43f ae92 	beq.w	800c0f2 <_printf_float+0xba>
 800c3ce:	f108 0801 	add.w	r8, r8, #1
 800c3d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3d6:	1a9b      	subs	r3, r3, r2
 800c3d8:	eba3 030a 	sub.w	r3, r3, sl
 800c3dc:	4543      	cmp	r3, r8
 800c3de:	dcee      	bgt.n	800c3be <_printf_float+0x386>
 800c3e0:	e74a      	b.n	800c278 <_printf_float+0x240>
 800c3e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3e4:	2a01      	cmp	r2, #1
 800c3e6:	dc01      	bgt.n	800c3ec <_printf_float+0x3b4>
 800c3e8:	07db      	lsls	r3, r3, #31
 800c3ea:	d53a      	bpl.n	800c462 <_printf_float+0x42a>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	4642      	mov	r2, r8
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	47b8      	blx	r7
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	f43f ae7b 	beq.w	800c0f2 <_printf_float+0xba>
 800c3fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c400:	4631      	mov	r1, r6
 800c402:	4628      	mov	r0, r5
 800c404:	47b8      	blx	r7
 800c406:	3001      	adds	r0, #1
 800c408:	f108 0801 	add.w	r8, r8, #1
 800c40c:	f43f ae71 	beq.w	800c0f2 <_printf_float+0xba>
 800c410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c412:	2200      	movs	r2, #0
 800c414:	f103 3aff 	add.w	sl, r3, #4294967295
 800c418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c41c:	2300      	movs	r3, #0
 800c41e:	f7f4 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 800c422:	b9c8      	cbnz	r0, 800c458 <_printf_float+0x420>
 800c424:	4653      	mov	r3, sl
 800c426:	4642      	mov	r2, r8
 800c428:	4631      	mov	r1, r6
 800c42a:	4628      	mov	r0, r5
 800c42c:	47b8      	blx	r7
 800c42e:	3001      	adds	r0, #1
 800c430:	d10e      	bne.n	800c450 <_printf_float+0x418>
 800c432:	e65e      	b.n	800c0f2 <_printf_float+0xba>
 800c434:	2301      	movs	r3, #1
 800c436:	4652      	mov	r2, sl
 800c438:	4631      	mov	r1, r6
 800c43a:	4628      	mov	r0, r5
 800c43c:	47b8      	blx	r7
 800c43e:	3001      	adds	r0, #1
 800c440:	f43f ae57 	beq.w	800c0f2 <_printf_float+0xba>
 800c444:	f108 0801 	add.w	r8, r8, #1
 800c448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c44a:	3b01      	subs	r3, #1
 800c44c:	4543      	cmp	r3, r8
 800c44e:	dcf1      	bgt.n	800c434 <_printf_float+0x3fc>
 800c450:	464b      	mov	r3, r9
 800c452:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c456:	e6de      	b.n	800c216 <_printf_float+0x1de>
 800c458:	f04f 0800 	mov.w	r8, #0
 800c45c:	f104 0a1a 	add.w	sl, r4, #26
 800c460:	e7f2      	b.n	800c448 <_printf_float+0x410>
 800c462:	2301      	movs	r3, #1
 800c464:	e7df      	b.n	800c426 <_printf_float+0x3ee>
 800c466:	2301      	movs	r3, #1
 800c468:	464a      	mov	r2, r9
 800c46a:	4631      	mov	r1, r6
 800c46c:	4628      	mov	r0, r5
 800c46e:	47b8      	blx	r7
 800c470:	3001      	adds	r0, #1
 800c472:	f43f ae3e 	beq.w	800c0f2 <_printf_float+0xba>
 800c476:	f108 0801 	add.w	r8, r8, #1
 800c47a:	68e3      	ldr	r3, [r4, #12]
 800c47c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c47e:	1a9b      	subs	r3, r3, r2
 800c480:	4543      	cmp	r3, r8
 800c482:	dcf0      	bgt.n	800c466 <_printf_float+0x42e>
 800c484:	e6fc      	b.n	800c280 <_printf_float+0x248>
 800c486:	f04f 0800 	mov.w	r8, #0
 800c48a:	f104 0919 	add.w	r9, r4, #25
 800c48e:	e7f4      	b.n	800c47a <_printf_float+0x442>
 800c490:	2900      	cmp	r1, #0
 800c492:	f43f ae8b 	beq.w	800c1ac <_printf_float+0x174>
 800c496:	2300      	movs	r3, #0
 800c498:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c49c:	ab09      	add	r3, sp, #36	; 0x24
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	ec49 8b10 	vmov	d0, r8, r9
 800c4a4:	6022      	str	r2, [r4, #0]
 800c4a6:	f8cd a004 	str.w	sl, [sp, #4]
 800c4aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f7ff fd2e 	bl	800bf10 <__cvt>
 800c4b4:	4680      	mov	r8, r0
 800c4b6:	e648      	b.n	800c14a <_printf_float+0x112>

0800c4b8 <_printf_common>:
 800c4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4bc:	4691      	mov	r9, r2
 800c4be:	461f      	mov	r7, r3
 800c4c0:	688a      	ldr	r2, [r1, #8]
 800c4c2:	690b      	ldr	r3, [r1, #16]
 800c4c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	bfb8      	it	lt
 800c4cc:	4613      	movlt	r3, r2
 800c4ce:	f8c9 3000 	str.w	r3, [r9]
 800c4d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	460c      	mov	r4, r1
 800c4da:	b112      	cbz	r2, 800c4e2 <_printf_common+0x2a>
 800c4dc:	3301      	adds	r3, #1
 800c4de:	f8c9 3000 	str.w	r3, [r9]
 800c4e2:	6823      	ldr	r3, [r4, #0]
 800c4e4:	0699      	lsls	r1, r3, #26
 800c4e6:	bf42      	ittt	mi
 800c4e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c4ec:	3302      	addmi	r3, #2
 800c4ee:	f8c9 3000 	strmi.w	r3, [r9]
 800c4f2:	6825      	ldr	r5, [r4, #0]
 800c4f4:	f015 0506 	ands.w	r5, r5, #6
 800c4f8:	d107      	bne.n	800c50a <_printf_common+0x52>
 800c4fa:	f104 0a19 	add.w	sl, r4, #25
 800c4fe:	68e3      	ldr	r3, [r4, #12]
 800c500:	f8d9 2000 	ldr.w	r2, [r9]
 800c504:	1a9b      	subs	r3, r3, r2
 800c506:	42ab      	cmp	r3, r5
 800c508:	dc28      	bgt.n	800c55c <_printf_common+0xa4>
 800c50a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c50e:	6822      	ldr	r2, [r4, #0]
 800c510:	3300      	adds	r3, #0
 800c512:	bf18      	it	ne
 800c514:	2301      	movne	r3, #1
 800c516:	0692      	lsls	r2, r2, #26
 800c518:	d42d      	bmi.n	800c576 <_printf_common+0xbe>
 800c51a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c51e:	4639      	mov	r1, r7
 800c520:	4630      	mov	r0, r6
 800c522:	47c0      	blx	r8
 800c524:	3001      	adds	r0, #1
 800c526:	d020      	beq.n	800c56a <_printf_common+0xb2>
 800c528:	6823      	ldr	r3, [r4, #0]
 800c52a:	68e5      	ldr	r5, [r4, #12]
 800c52c:	f8d9 2000 	ldr.w	r2, [r9]
 800c530:	f003 0306 	and.w	r3, r3, #6
 800c534:	2b04      	cmp	r3, #4
 800c536:	bf08      	it	eq
 800c538:	1aad      	subeq	r5, r5, r2
 800c53a:	68a3      	ldr	r3, [r4, #8]
 800c53c:	6922      	ldr	r2, [r4, #16]
 800c53e:	bf0c      	ite	eq
 800c540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c544:	2500      	movne	r5, #0
 800c546:	4293      	cmp	r3, r2
 800c548:	bfc4      	itt	gt
 800c54a:	1a9b      	subgt	r3, r3, r2
 800c54c:	18ed      	addgt	r5, r5, r3
 800c54e:	f04f 0900 	mov.w	r9, #0
 800c552:	341a      	adds	r4, #26
 800c554:	454d      	cmp	r5, r9
 800c556:	d11a      	bne.n	800c58e <_printf_common+0xd6>
 800c558:	2000      	movs	r0, #0
 800c55a:	e008      	b.n	800c56e <_printf_common+0xb6>
 800c55c:	2301      	movs	r3, #1
 800c55e:	4652      	mov	r2, sl
 800c560:	4639      	mov	r1, r7
 800c562:	4630      	mov	r0, r6
 800c564:	47c0      	blx	r8
 800c566:	3001      	adds	r0, #1
 800c568:	d103      	bne.n	800c572 <_printf_common+0xba>
 800c56a:	f04f 30ff 	mov.w	r0, #4294967295
 800c56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c572:	3501      	adds	r5, #1
 800c574:	e7c3      	b.n	800c4fe <_printf_common+0x46>
 800c576:	18e1      	adds	r1, r4, r3
 800c578:	1c5a      	adds	r2, r3, #1
 800c57a:	2030      	movs	r0, #48	; 0x30
 800c57c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c580:	4422      	add	r2, r4
 800c582:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c586:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c58a:	3302      	adds	r3, #2
 800c58c:	e7c5      	b.n	800c51a <_printf_common+0x62>
 800c58e:	2301      	movs	r3, #1
 800c590:	4622      	mov	r2, r4
 800c592:	4639      	mov	r1, r7
 800c594:	4630      	mov	r0, r6
 800c596:	47c0      	blx	r8
 800c598:	3001      	adds	r0, #1
 800c59a:	d0e6      	beq.n	800c56a <_printf_common+0xb2>
 800c59c:	f109 0901 	add.w	r9, r9, #1
 800c5a0:	e7d8      	b.n	800c554 <_printf_common+0x9c>
	...

0800c5a4 <_printf_i>:
 800c5a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c5ac:	460c      	mov	r4, r1
 800c5ae:	7e09      	ldrb	r1, [r1, #24]
 800c5b0:	b085      	sub	sp, #20
 800c5b2:	296e      	cmp	r1, #110	; 0x6e
 800c5b4:	4617      	mov	r7, r2
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	4698      	mov	r8, r3
 800c5ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5bc:	f000 80b3 	beq.w	800c726 <_printf_i+0x182>
 800c5c0:	d822      	bhi.n	800c608 <_printf_i+0x64>
 800c5c2:	2963      	cmp	r1, #99	; 0x63
 800c5c4:	d036      	beq.n	800c634 <_printf_i+0x90>
 800c5c6:	d80a      	bhi.n	800c5de <_printf_i+0x3a>
 800c5c8:	2900      	cmp	r1, #0
 800c5ca:	f000 80b9 	beq.w	800c740 <_printf_i+0x19c>
 800c5ce:	2958      	cmp	r1, #88	; 0x58
 800c5d0:	f000 8083 	beq.w	800c6da <_printf_i+0x136>
 800c5d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c5dc:	e032      	b.n	800c644 <_printf_i+0xa0>
 800c5de:	2964      	cmp	r1, #100	; 0x64
 800c5e0:	d001      	beq.n	800c5e6 <_printf_i+0x42>
 800c5e2:	2969      	cmp	r1, #105	; 0x69
 800c5e4:	d1f6      	bne.n	800c5d4 <_printf_i+0x30>
 800c5e6:	6820      	ldr	r0, [r4, #0]
 800c5e8:	6813      	ldr	r3, [r2, #0]
 800c5ea:	0605      	lsls	r5, r0, #24
 800c5ec:	f103 0104 	add.w	r1, r3, #4
 800c5f0:	d52a      	bpl.n	800c648 <_printf_i+0xa4>
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6011      	str	r1, [r2, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	da03      	bge.n	800c602 <_printf_i+0x5e>
 800c5fa:	222d      	movs	r2, #45	; 0x2d
 800c5fc:	425b      	negs	r3, r3
 800c5fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c602:	486f      	ldr	r0, [pc, #444]	; (800c7c0 <_printf_i+0x21c>)
 800c604:	220a      	movs	r2, #10
 800c606:	e039      	b.n	800c67c <_printf_i+0xd8>
 800c608:	2973      	cmp	r1, #115	; 0x73
 800c60a:	f000 809d 	beq.w	800c748 <_printf_i+0x1a4>
 800c60e:	d808      	bhi.n	800c622 <_printf_i+0x7e>
 800c610:	296f      	cmp	r1, #111	; 0x6f
 800c612:	d020      	beq.n	800c656 <_printf_i+0xb2>
 800c614:	2970      	cmp	r1, #112	; 0x70
 800c616:	d1dd      	bne.n	800c5d4 <_printf_i+0x30>
 800c618:	6823      	ldr	r3, [r4, #0]
 800c61a:	f043 0320 	orr.w	r3, r3, #32
 800c61e:	6023      	str	r3, [r4, #0]
 800c620:	e003      	b.n	800c62a <_printf_i+0x86>
 800c622:	2975      	cmp	r1, #117	; 0x75
 800c624:	d017      	beq.n	800c656 <_printf_i+0xb2>
 800c626:	2978      	cmp	r1, #120	; 0x78
 800c628:	d1d4      	bne.n	800c5d4 <_printf_i+0x30>
 800c62a:	2378      	movs	r3, #120	; 0x78
 800c62c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c630:	4864      	ldr	r0, [pc, #400]	; (800c7c4 <_printf_i+0x220>)
 800c632:	e055      	b.n	800c6e0 <_printf_i+0x13c>
 800c634:	6813      	ldr	r3, [r2, #0]
 800c636:	1d19      	adds	r1, r3, #4
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	6011      	str	r1, [r2, #0]
 800c63c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c644:	2301      	movs	r3, #1
 800c646:	e08c      	b.n	800c762 <_printf_i+0x1be>
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6011      	str	r1, [r2, #0]
 800c64c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c650:	bf18      	it	ne
 800c652:	b21b      	sxthne	r3, r3
 800c654:	e7cf      	b.n	800c5f6 <_printf_i+0x52>
 800c656:	6813      	ldr	r3, [r2, #0]
 800c658:	6825      	ldr	r5, [r4, #0]
 800c65a:	1d18      	adds	r0, r3, #4
 800c65c:	6010      	str	r0, [r2, #0]
 800c65e:	0628      	lsls	r0, r5, #24
 800c660:	d501      	bpl.n	800c666 <_printf_i+0xc2>
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	e002      	b.n	800c66c <_printf_i+0xc8>
 800c666:	0668      	lsls	r0, r5, #25
 800c668:	d5fb      	bpl.n	800c662 <_printf_i+0xbe>
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	4854      	ldr	r0, [pc, #336]	; (800c7c0 <_printf_i+0x21c>)
 800c66e:	296f      	cmp	r1, #111	; 0x6f
 800c670:	bf14      	ite	ne
 800c672:	220a      	movne	r2, #10
 800c674:	2208      	moveq	r2, #8
 800c676:	2100      	movs	r1, #0
 800c678:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c67c:	6865      	ldr	r5, [r4, #4]
 800c67e:	60a5      	str	r5, [r4, #8]
 800c680:	2d00      	cmp	r5, #0
 800c682:	f2c0 8095 	blt.w	800c7b0 <_printf_i+0x20c>
 800c686:	6821      	ldr	r1, [r4, #0]
 800c688:	f021 0104 	bic.w	r1, r1, #4
 800c68c:	6021      	str	r1, [r4, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d13d      	bne.n	800c70e <_printf_i+0x16a>
 800c692:	2d00      	cmp	r5, #0
 800c694:	f040 808e 	bne.w	800c7b4 <_printf_i+0x210>
 800c698:	4665      	mov	r5, ip
 800c69a:	2a08      	cmp	r2, #8
 800c69c:	d10b      	bne.n	800c6b6 <_printf_i+0x112>
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	07db      	lsls	r3, r3, #31
 800c6a2:	d508      	bpl.n	800c6b6 <_printf_i+0x112>
 800c6a4:	6923      	ldr	r3, [r4, #16]
 800c6a6:	6862      	ldr	r2, [r4, #4]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	bfde      	ittt	le
 800c6ac:	2330      	movle	r3, #48	; 0x30
 800c6ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c6b6:	ebac 0305 	sub.w	r3, ip, r5
 800c6ba:	6123      	str	r3, [r4, #16]
 800c6bc:	f8cd 8000 	str.w	r8, [sp]
 800c6c0:	463b      	mov	r3, r7
 800c6c2:	aa03      	add	r2, sp, #12
 800c6c4:	4621      	mov	r1, r4
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	f7ff fef6 	bl	800c4b8 <_printf_common>
 800c6cc:	3001      	adds	r0, #1
 800c6ce:	d14d      	bne.n	800c76c <_printf_i+0x1c8>
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d4:	b005      	add	sp, #20
 800c6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6da:	4839      	ldr	r0, [pc, #228]	; (800c7c0 <_printf_i+0x21c>)
 800c6dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c6e0:	6813      	ldr	r3, [r2, #0]
 800c6e2:	6821      	ldr	r1, [r4, #0]
 800c6e4:	1d1d      	adds	r5, r3, #4
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	6015      	str	r5, [r2, #0]
 800c6ea:	060a      	lsls	r2, r1, #24
 800c6ec:	d50b      	bpl.n	800c706 <_printf_i+0x162>
 800c6ee:	07ca      	lsls	r2, r1, #31
 800c6f0:	bf44      	itt	mi
 800c6f2:	f041 0120 	orrmi.w	r1, r1, #32
 800c6f6:	6021      	strmi	r1, [r4, #0]
 800c6f8:	b91b      	cbnz	r3, 800c702 <_printf_i+0x15e>
 800c6fa:	6822      	ldr	r2, [r4, #0]
 800c6fc:	f022 0220 	bic.w	r2, r2, #32
 800c700:	6022      	str	r2, [r4, #0]
 800c702:	2210      	movs	r2, #16
 800c704:	e7b7      	b.n	800c676 <_printf_i+0xd2>
 800c706:	064d      	lsls	r5, r1, #25
 800c708:	bf48      	it	mi
 800c70a:	b29b      	uxthmi	r3, r3
 800c70c:	e7ef      	b.n	800c6ee <_printf_i+0x14a>
 800c70e:	4665      	mov	r5, ip
 800c710:	fbb3 f1f2 	udiv	r1, r3, r2
 800c714:	fb02 3311 	mls	r3, r2, r1, r3
 800c718:	5cc3      	ldrb	r3, [r0, r3]
 800c71a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c71e:	460b      	mov	r3, r1
 800c720:	2900      	cmp	r1, #0
 800c722:	d1f5      	bne.n	800c710 <_printf_i+0x16c>
 800c724:	e7b9      	b.n	800c69a <_printf_i+0xf6>
 800c726:	6813      	ldr	r3, [r2, #0]
 800c728:	6825      	ldr	r5, [r4, #0]
 800c72a:	6961      	ldr	r1, [r4, #20]
 800c72c:	1d18      	adds	r0, r3, #4
 800c72e:	6010      	str	r0, [r2, #0]
 800c730:	0628      	lsls	r0, r5, #24
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	d501      	bpl.n	800c73a <_printf_i+0x196>
 800c736:	6019      	str	r1, [r3, #0]
 800c738:	e002      	b.n	800c740 <_printf_i+0x19c>
 800c73a:	066a      	lsls	r2, r5, #25
 800c73c:	d5fb      	bpl.n	800c736 <_printf_i+0x192>
 800c73e:	8019      	strh	r1, [r3, #0]
 800c740:	2300      	movs	r3, #0
 800c742:	6123      	str	r3, [r4, #16]
 800c744:	4665      	mov	r5, ip
 800c746:	e7b9      	b.n	800c6bc <_printf_i+0x118>
 800c748:	6813      	ldr	r3, [r2, #0]
 800c74a:	1d19      	adds	r1, r3, #4
 800c74c:	6011      	str	r1, [r2, #0]
 800c74e:	681d      	ldr	r5, [r3, #0]
 800c750:	6862      	ldr	r2, [r4, #4]
 800c752:	2100      	movs	r1, #0
 800c754:	4628      	mov	r0, r5
 800c756:	f7f3 fd43 	bl	80001e0 <memchr>
 800c75a:	b108      	cbz	r0, 800c760 <_printf_i+0x1bc>
 800c75c:	1b40      	subs	r0, r0, r5
 800c75e:	6060      	str	r0, [r4, #4]
 800c760:	6863      	ldr	r3, [r4, #4]
 800c762:	6123      	str	r3, [r4, #16]
 800c764:	2300      	movs	r3, #0
 800c766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c76a:	e7a7      	b.n	800c6bc <_printf_i+0x118>
 800c76c:	6923      	ldr	r3, [r4, #16]
 800c76e:	462a      	mov	r2, r5
 800c770:	4639      	mov	r1, r7
 800c772:	4630      	mov	r0, r6
 800c774:	47c0      	blx	r8
 800c776:	3001      	adds	r0, #1
 800c778:	d0aa      	beq.n	800c6d0 <_printf_i+0x12c>
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	079b      	lsls	r3, r3, #30
 800c77e:	d413      	bmi.n	800c7a8 <_printf_i+0x204>
 800c780:	68e0      	ldr	r0, [r4, #12]
 800c782:	9b03      	ldr	r3, [sp, #12]
 800c784:	4298      	cmp	r0, r3
 800c786:	bfb8      	it	lt
 800c788:	4618      	movlt	r0, r3
 800c78a:	e7a3      	b.n	800c6d4 <_printf_i+0x130>
 800c78c:	2301      	movs	r3, #1
 800c78e:	464a      	mov	r2, r9
 800c790:	4639      	mov	r1, r7
 800c792:	4630      	mov	r0, r6
 800c794:	47c0      	blx	r8
 800c796:	3001      	adds	r0, #1
 800c798:	d09a      	beq.n	800c6d0 <_printf_i+0x12c>
 800c79a:	3501      	adds	r5, #1
 800c79c:	68e3      	ldr	r3, [r4, #12]
 800c79e:	9a03      	ldr	r2, [sp, #12]
 800c7a0:	1a9b      	subs	r3, r3, r2
 800c7a2:	42ab      	cmp	r3, r5
 800c7a4:	dcf2      	bgt.n	800c78c <_printf_i+0x1e8>
 800c7a6:	e7eb      	b.n	800c780 <_printf_i+0x1dc>
 800c7a8:	2500      	movs	r5, #0
 800c7aa:	f104 0919 	add.w	r9, r4, #25
 800c7ae:	e7f5      	b.n	800c79c <_printf_i+0x1f8>
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1ac      	bne.n	800c70e <_printf_i+0x16a>
 800c7b4:	7803      	ldrb	r3, [r0, #0]
 800c7b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7be:	e76c      	b.n	800c69a <_printf_i+0xf6>
 800c7c0:	0800eb26 	.word	0x0800eb26
 800c7c4:	0800eb37 	.word	0x0800eb37

0800c7c8 <iprintf>:
 800c7c8:	b40f      	push	{r0, r1, r2, r3}
 800c7ca:	4b0a      	ldr	r3, [pc, #40]	; (800c7f4 <iprintf+0x2c>)
 800c7cc:	b513      	push	{r0, r1, r4, lr}
 800c7ce:	681c      	ldr	r4, [r3, #0]
 800c7d0:	b124      	cbz	r4, 800c7dc <iprintf+0x14>
 800c7d2:	69a3      	ldr	r3, [r4, #24]
 800c7d4:	b913      	cbnz	r3, 800c7dc <iprintf+0x14>
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f001 f916 	bl	800da08 <__sinit>
 800c7dc:	ab05      	add	r3, sp, #20
 800c7de:	9a04      	ldr	r2, [sp, #16]
 800c7e0:	68a1      	ldr	r1, [r4, #8]
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f001 fdcf 	bl	800e388 <_vfiprintf_r>
 800c7ea:	b002      	add	sp, #8
 800c7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7f0:	b004      	add	sp, #16
 800c7f2:	4770      	bx	lr
 800c7f4:	20001514 	.word	0x20001514

0800c7f8 <_puts_r>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	460e      	mov	r6, r1
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	b118      	cbz	r0, 800c808 <_puts_r+0x10>
 800c800:	6983      	ldr	r3, [r0, #24]
 800c802:	b90b      	cbnz	r3, 800c808 <_puts_r+0x10>
 800c804:	f001 f900 	bl	800da08 <__sinit>
 800c808:	69ab      	ldr	r3, [r5, #24]
 800c80a:	68ac      	ldr	r4, [r5, #8]
 800c80c:	b913      	cbnz	r3, 800c814 <_puts_r+0x1c>
 800c80e:	4628      	mov	r0, r5
 800c810:	f001 f8fa 	bl	800da08 <__sinit>
 800c814:	4b23      	ldr	r3, [pc, #140]	; (800c8a4 <_puts_r+0xac>)
 800c816:	429c      	cmp	r4, r3
 800c818:	d117      	bne.n	800c84a <_puts_r+0x52>
 800c81a:	686c      	ldr	r4, [r5, #4]
 800c81c:	89a3      	ldrh	r3, [r4, #12]
 800c81e:	071b      	lsls	r3, r3, #28
 800c820:	d51d      	bpl.n	800c85e <_puts_r+0x66>
 800c822:	6923      	ldr	r3, [r4, #16]
 800c824:	b1db      	cbz	r3, 800c85e <_puts_r+0x66>
 800c826:	3e01      	subs	r6, #1
 800c828:	68a3      	ldr	r3, [r4, #8]
 800c82a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c82e:	3b01      	subs	r3, #1
 800c830:	60a3      	str	r3, [r4, #8]
 800c832:	b9e9      	cbnz	r1, 800c870 <_puts_r+0x78>
 800c834:	2b00      	cmp	r3, #0
 800c836:	da2e      	bge.n	800c896 <_puts_r+0x9e>
 800c838:	4622      	mov	r2, r4
 800c83a:	210a      	movs	r1, #10
 800c83c:	4628      	mov	r0, r5
 800c83e:	f000 f8ed 	bl	800ca1c <__swbuf_r>
 800c842:	3001      	adds	r0, #1
 800c844:	d011      	beq.n	800c86a <_puts_r+0x72>
 800c846:	200a      	movs	r0, #10
 800c848:	e011      	b.n	800c86e <_puts_r+0x76>
 800c84a:	4b17      	ldr	r3, [pc, #92]	; (800c8a8 <_puts_r+0xb0>)
 800c84c:	429c      	cmp	r4, r3
 800c84e:	d101      	bne.n	800c854 <_puts_r+0x5c>
 800c850:	68ac      	ldr	r4, [r5, #8]
 800c852:	e7e3      	b.n	800c81c <_puts_r+0x24>
 800c854:	4b15      	ldr	r3, [pc, #84]	; (800c8ac <_puts_r+0xb4>)
 800c856:	429c      	cmp	r4, r3
 800c858:	bf08      	it	eq
 800c85a:	68ec      	ldreq	r4, [r5, #12]
 800c85c:	e7de      	b.n	800c81c <_puts_r+0x24>
 800c85e:	4621      	mov	r1, r4
 800c860:	4628      	mov	r0, r5
 800c862:	f000 f92d 	bl	800cac0 <__swsetup_r>
 800c866:	2800      	cmp	r0, #0
 800c868:	d0dd      	beq.n	800c826 <_puts_r+0x2e>
 800c86a:	f04f 30ff 	mov.w	r0, #4294967295
 800c86e:	bd70      	pop	{r4, r5, r6, pc}
 800c870:	2b00      	cmp	r3, #0
 800c872:	da04      	bge.n	800c87e <_puts_r+0x86>
 800c874:	69a2      	ldr	r2, [r4, #24]
 800c876:	429a      	cmp	r2, r3
 800c878:	dc06      	bgt.n	800c888 <_puts_r+0x90>
 800c87a:	290a      	cmp	r1, #10
 800c87c:	d004      	beq.n	800c888 <_puts_r+0x90>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	1c5a      	adds	r2, r3, #1
 800c882:	6022      	str	r2, [r4, #0]
 800c884:	7019      	strb	r1, [r3, #0]
 800c886:	e7cf      	b.n	800c828 <_puts_r+0x30>
 800c888:	4622      	mov	r2, r4
 800c88a:	4628      	mov	r0, r5
 800c88c:	f000 f8c6 	bl	800ca1c <__swbuf_r>
 800c890:	3001      	adds	r0, #1
 800c892:	d1c9      	bne.n	800c828 <_puts_r+0x30>
 800c894:	e7e9      	b.n	800c86a <_puts_r+0x72>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	200a      	movs	r0, #10
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	6022      	str	r2, [r4, #0]
 800c89e:	7018      	strb	r0, [r3, #0]
 800c8a0:	e7e5      	b.n	800c86e <_puts_r+0x76>
 800c8a2:	bf00      	nop
 800c8a4:	0800eb78 	.word	0x0800eb78
 800c8a8:	0800eb98 	.word	0x0800eb98
 800c8ac:	0800eb58 	.word	0x0800eb58

0800c8b0 <puts>:
 800c8b0:	4b02      	ldr	r3, [pc, #8]	; (800c8bc <puts+0xc>)
 800c8b2:	4601      	mov	r1, r0
 800c8b4:	6818      	ldr	r0, [r3, #0]
 800c8b6:	f7ff bf9f 	b.w	800c7f8 <_puts_r>
 800c8ba:	bf00      	nop
 800c8bc:	20001514 	.word	0x20001514

0800c8c0 <setvbuf>:
 800c8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	461d      	mov	r5, r3
 800c8c6:	4b51      	ldr	r3, [pc, #324]	; (800ca0c <setvbuf+0x14c>)
 800c8c8:	681e      	ldr	r6, [r3, #0]
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	460f      	mov	r7, r1
 800c8ce:	4690      	mov	r8, r2
 800c8d0:	b126      	cbz	r6, 800c8dc <setvbuf+0x1c>
 800c8d2:	69b3      	ldr	r3, [r6, #24]
 800c8d4:	b913      	cbnz	r3, 800c8dc <setvbuf+0x1c>
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f001 f896 	bl	800da08 <__sinit>
 800c8dc:	4b4c      	ldr	r3, [pc, #304]	; (800ca10 <setvbuf+0x150>)
 800c8de:	429c      	cmp	r4, r3
 800c8e0:	d152      	bne.n	800c988 <setvbuf+0xc8>
 800c8e2:	6874      	ldr	r4, [r6, #4]
 800c8e4:	f1b8 0f02 	cmp.w	r8, #2
 800c8e8:	d006      	beq.n	800c8f8 <setvbuf+0x38>
 800c8ea:	f1b8 0f01 	cmp.w	r8, #1
 800c8ee:	f200 8089 	bhi.w	800ca04 <setvbuf+0x144>
 800c8f2:	2d00      	cmp	r5, #0
 800c8f4:	f2c0 8086 	blt.w	800ca04 <setvbuf+0x144>
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	f001 f81a 	bl	800d934 <_fflush_r>
 800c900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c902:	b141      	cbz	r1, 800c916 <setvbuf+0x56>
 800c904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c908:	4299      	cmp	r1, r3
 800c90a:	d002      	beq.n	800c912 <setvbuf+0x52>
 800c90c:	4630      	mov	r0, r6
 800c90e:	f001 fc69 	bl	800e1e4 <_free_r>
 800c912:	2300      	movs	r3, #0
 800c914:	6363      	str	r3, [r4, #52]	; 0x34
 800c916:	2300      	movs	r3, #0
 800c918:	61a3      	str	r3, [r4, #24]
 800c91a:	6063      	str	r3, [r4, #4]
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	061b      	lsls	r3, r3, #24
 800c920:	d503      	bpl.n	800c92a <setvbuf+0x6a>
 800c922:	6921      	ldr	r1, [r4, #16]
 800c924:	4630      	mov	r0, r6
 800c926:	f001 fc5d 	bl	800e1e4 <_free_r>
 800c92a:	89a3      	ldrh	r3, [r4, #12]
 800c92c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800c930:	f023 0303 	bic.w	r3, r3, #3
 800c934:	f1b8 0f02 	cmp.w	r8, #2
 800c938:	81a3      	strh	r3, [r4, #12]
 800c93a:	d05d      	beq.n	800c9f8 <setvbuf+0x138>
 800c93c:	ab01      	add	r3, sp, #4
 800c93e:	466a      	mov	r2, sp
 800c940:	4621      	mov	r1, r4
 800c942:	4630      	mov	r0, r6
 800c944:	f001 f8f8 	bl	800db38 <__swhatbuf_r>
 800c948:	89a3      	ldrh	r3, [r4, #12]
 800c94a:	4318      	orrs	r0, r3
 800c94c:	81a0      	strh	r0, [r4, #12]
 800c94e:	bb2d      	cbnz	r5, 800c99c <setvbuf+0xdc>
 800c950:	9d00      	ldr	r5, [sp, #0]
 800c952:	4628      	mov	r0, r5
 800c954:	f001 f954 	bl	800dc00 <malloc>
 800c958:	4607      	mov	r7, r0
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d14e      	bne.n	800c9fc <setvbuf+0x13c>
 800c95e:	f8dd 9000 	ldr.w	r9, [sp]
 800c962:	45a9      	cmp	r9, r5
 800c964:	d13c      	bne.n	800c9e0 <setvbuf+0x120>
 800c966:	f04f 30ff 	mov.w	r0, #4294967295
 800c96a:	89a3      	ldrh	r3, [r4, #12]
 800c96c:	f043 0302 	orr.w	r3, r3, #2
 800c970:	81a3      	strh	r3, [r4, #12]
 800c972:	2300      	movs	r3, #0
 800c974:	60a3      	str	r3, [r4, #8]
 800c976:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c97a:	6023      	str	r3, [r4, #0]
 800c97c:	6123      	str	r3, [r4, #16]
 800c97e:	2301      	movs	r3, #1
 800c980:	6163      	str	r3, [r4, #20]
 800c982:	b003      	add	sp, #12
 800c984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c988:	4b22      	ldr	r3, [pc, #136]	; (800ca14 <setvbuf+0x154>)
 800c98a:	429c      	cmp	r4, r3
 800c98c:	d101      	bne.n	800c992 <setvbuf+0xd2>
 800c98e:	68b4      	ldr	r4, [r6, #8]
 800c990:	e7a8      	b.n	800c8e4 <setvbuf+0x24>
 800c992:	4b21      	ldr	r3, [pc, #132]	; (800ca18 <setvbuf+0x158>)
 800c994:	429c      	cmp	r4, r3
 800c996:	bf08      	it	eq
 800c998:	68f4      	ldreq	r4, [r6, #12]
 800c99a:	e7a3      	b.n	800c8e4 <setvbuf+0x24>
 800c99c:	2f00      	cmp	r7, #0
 800c99e:	d0d8      	beq.n	800c952 <setvbuf+0x92>
 800c9a0:	69b3      	ldr	r3, [r6, #24]
 800c9a2:	b913      	cbnz	r3, 800c9aa <setvbuf+0xea>
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f001 f82f 	bl	800da08 <__sinit>
 800c9aa:	f1b8 0f01 	cmp.w	r8, #1
 800c9ae:	bf08      	it	eq
 800c9b0:	89a3      	ldrheq	r3, [r4, #12]
 800c9b2:	6027      	str	r7, [r4, #0]
 800c9b4:	bf04      	itt	eq
 800c9b6:	f043 0301 	orreq.w	r3, r3, #1
 800c9ba:	81a3      	strheq	r3, [r4, #12]
 800c9bc:	89a3      	ldrh	r3, [r4, #12]
 800c9be:	f013 0008 	ands.w	r0, r3, #8
 800c9c2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800c9c6:	d01b      	beq.n	800ca00 <setvbuf+0x140>
 800c9c8:	f013 0001 	ands.w	r0, r3, #1
 800c9cc:	bf18      	it	ne
 800c9ce:	426d      	negne	r5, r5
 800c9d0:	f04f 0300 	mov.w	r3, #0
 800c9d4:	bf1d      	ittte	ne
 800c9d6:	60a3      	strne	r3, [r4, #8]
 800c9d8:	61a5      	strne	r5, [r4, #24]
 800c9da:	4618      	movne	r0, r3
 800c9dc:	60a5      	streq	r5, [r4, #8]
 800c9de:	e7d0      	b.n	800c982 <setvbuf+0xc2>
 800c9e0:	4648      	mov	r0, r9
 800c9e2:	f001 f90d 	bl	800dc00 <malloc>
 800c9e6:	4607      	mov	r7, r0
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d0bc      	beq.n	800c966 <setvbuf+0xa6>
 800c9ec:	89a3      	ldrh	r3, [r4, #12]
 800c9ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f2:	81a3      	strh	r3, [r4, #12]
 800c9f4:	464d      	mov	r5, r9
 800c9f6:	e7d3      	b.n	800c9a0 <setvbuf+0xe0>
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	e7b6      	b.n	800c96a <setvbuf+0xaa>
 800c9fc:	46a9      	mov	r9, r5
 800c9fe:	e7f5      	b.n	800c9ec <setvbuf+0x12c>
 800ca00:	60a0      	str	r0, [r4, #8]
 800ca02:	e7be      	b.n	800c982 <setvbuf+0xc2>
 800ca04:	f04f 30ff 	mov.w	r0, #4294967295
 800ca08:	e7bb      	b.n	800c982 <setvbuf+0xc2>
 800ca0a:	bf00      	nop
 800ca0c:	20001514 	.word	0x20001514
 800ca10:	0800eb78 	.word	0x0800eb78
 800ca14:	0800eb98 	.word	0x0800eb98
 800ca18:	0800eb58 	.word	0x0800eb58

0800ca1c <__swbuf_r>:
 800ca1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1e:	460e      	mov	r6, r1
 800ca20:	4614      	mov	r4, r2
 800ca22:	4605      	mov	r5, r0
 800ca24:	b118      	cbz	r0, 800ca2e <__swbuf_r+0x12>
 800ca26:	6983      	ldr	r3, [r0, #24]
 800ca28:	b90b      	cbnz	r3, 800ca2e <__swbuf_r+0x12>
 800ca2a:	f000 ffed 	bl	800da08 <__sinit>
 800ca2e:	4b21      	ldr	r3, [pc, #132]	; (800cab4 <__swbuf_r+0x98>)
 800ca30:	429c      	cmp	r4, r3
 800ca32:	d12a      	bne.n	800ca8a <__swbuf_r+0x6e>
 800ca34:	686c      	ldr	r4, [r5, #4]
 800ca36:	69a3      	ldr	r3, [r4, #24]
 800ca38:	60a3      	str	r3, [r4, #8]
 800ca3a:	89a3      	ldrh	r3, [r4, #12]
 800ca3c:	071a      	lsls	r2, r3, #28
 800ca3e:	d52e      	bpl.n	800ca9e <__swbuf_r+0x82>
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	b363      	cbz	r3, 800ca9e <__swbuf_r+0x82>
 800ca44:	6923      	ldr	r3, [r4, #16]
 800ca46:	6820      	ldr	r0, [r4, #0]
 800ca48:	1ac0      	subs	r0, r0, r3
 800ca4a:	6963      	ldr	r3, [r4, #20]
 800ca4c:	b2f6      	uxtb	r6, r6
 800ca4e:	4283      	cmp	r3, r0
 800ca50:	4637      	mov	r7, r6
 800ca52:	dc04      	bgt.n	800ca5e <__swbuf_r+0x42>
 800ca54:	4621      	mov	r1, r4
 800ca56:	4628      	mov	r0, r5
 800ca58:	f000 ff6c 	bl	800d934 <_fflush_r>
 800ca5c:	bb28      	cbnz	r0, 800caaa <__swbuf_r+0x8e>
 800ca5e:	68a3      	ldr	r3, [r4, #8]
 800ca60:	3b01      	subs	r3, #1
 800ca62:	60a3      	str	r3, [r4, #8]
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	1c5a      	adds	r2, r3, #1
 800ca68:	6022      	str	r2, [r4, #0]
 800ca6a:	701e      	strb	r6, [r3, #0]
 800ca6c:	6963      	ldr	r3, [r4, #20]
 800ca6e:	3001      	adds	r0, #1
 800ca70:	4283      	cmp	r3, r0
 800ca72:	d004      	beq.n	800ca7e <__swbuf_r+0x62>
 800ca74:	89a3      	ldrh	r3, [r4, #12]
 800ca76:	07db      	lsls	r3, r3, #31
 800ca78:	d519      	bpl.n	800caae <__swbuf_r+0x92>
 800ca7a:	2e0a      	cmp	r6, #10
 800ca7c:	d117      	bne.n	800caae <__swbuf_r+0x92>
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4628      	mov	r0, r5
 800ca82:	f000 ff57 	bl	800d934 <_fflush_r>
 800ca86:	b190      	cbz	r0, 800caae <__swbuf_r+0x92>
 800ca88:	e00f      	b.n	800caaa <__swbuf_r+0x8e>
 800ca8a:	4b0b      	ldr	r3, [pc, #44]	; (800cab8 <__swbuf_r+0x9c>)
 800ca8c:	429c      	cmp	r4, r3
 800ca8e:	d101      	bne.n	800ca94 <__swbuf_r+0x78>
 800ca90:	68ac      	ldr	r4, [r5, #8]
 800ca92:	e7d0      	b.n	800ca36 <__swbuf_r+0x1a>
 800ca94:	4b09      	ldr	r3, [pc, #36]	; (800cabc <__swbuf_r+0xa0>)
 800ca96:	429c      	cmp	r4, r3
 800ca98:	bf08      	it	eq
 800ca9a:	68ec      	ldreq	r4, [r5, #12]
 800ca9c:	e7cb      	b.n	800ca36 <__swbuf_r+0x1a>
 800ca9e:	4621      	mov	r1, r4
 800caa0:	4628      	mov	r0, r5
 800caa2:	f000 f80d 	bl	800cac0 <__swsetup_r>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d0cc      	beq.n	800ca44 <__swbuf_r+0x28>
 800caaa:	f04f 37ff 	mov.w	r7, #4294967295
 800caae:	4638      	mov	r0, r7
 800cab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cab2:	bf00      	nop
 800cab4:	0800eb78 	.word	0x0800eb78
 800cab8:	0800eb98 	.word	0x0800eb98
 800cabc:	0800eb58 	.word	0x0800eb58

0800cac0 <__swsetup_r>:
 800cac0:	4b32      	ldr	r3, [pc, #200]	; (800cb8c <__swsetup_r+0xcc>)
 800cac2:	b570      	push	{r4, r5, r6, lr}
 800cac4:	681d      	ldr	r5, [r3, #0]
 800cac6:	4606      	mov	r6, r0
 800cac8:	460c      	mov	r4, r1
 800caca:	b125      	cbz	r5, 800cad6 <__swsetup_r+0x16>
 800cacc:	69ab      	ldr	r3, [r5, #24]
 800cace:	b913      	cbnz	r3, 800cad6 <__swsetup_r+0x16>
 800cad0:	4628      	mov	r0, r5
 800cad2:	f000 ff99 	bl	800da08 <__sinit>
 800cad6:	4b2e      	ldr	r3, [pc, #184]	; (800cb90 <__swsetup_r+0xd0>)
 800cad8:	429c      	cmp	r4, r3
 800cada:	d10f      	bne.n	800cafc <__swsetup_r+0x3c>
 800cadc:	686c      	ldr	r4, [r5, #4]
 800cade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	0715      	lsls	r5, r2, #28
 800cae6:	d42c      	bmi.n	800cb42 <__swsetup_r+0x82>
 800cae8:	06d0      	lsls	r0, r2, #27
 800caea:	d411      	bmi.n	800cb10 <__swsetup_r+0x50>
 800caec:	2209      	movs	r2, #9
 800caee:	6032      	str	r2, [r6, #0]
 800caf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caf4:	81a3      	strh	r3, [r4, #12]
 800caf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cafa:	e03e      	b.n	800cb7a <__swsetup_r+0xba>
 800cafc:	4b25      	ldr	r3, [pc, #148]	; (800cb94 <__swsetup_r+0xd4>)
 800cafe:	429c      	cmp	r4, r3
 800cb00:	d101      	bne.n	800cb06 <__swsetup_r+0x46>
 800cb02:	68ac      	ldr	r4, [r5, #8]
 800cb04:	e7eb      	b.n	800cade <__swsetup_r+0x1e>
 800cb06:	4b24      	ldr	r3, [pc, #144]	; (800cb98 <__swsetup_r+0xd8>)
 800cb08:	429c      	cmp	r4, r3
 800cb0a:	bf08      	it	eq
 800cb0c:	68ec      	ldreq	r4, [r5, #12]
 800cb0e:	e7e6      	b.n	800cade <__swsetup_r+0x1e>
 800cb10:	0751      	lsls	r1, r2, #29
 800cb12:	d512      	bpl.n	800cb3a <__swsetup_r+0x7a>
 800cb14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb16:	b141      	cbz	r1, 800cb2a <__swsetup_r+0x6a>
 800cb18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb1c:	4299      	cmp	r1, r3
 800cb1e:	d002      	beq.n	800cb26 <__swsetup_r+0x66>
 800cb20:	4630      	mov	r0, r6
 800cb22:	f001 fb5f 	bl	800e1e4 <_free_r>
 800cb26:	2300      	movs	r3, #0
 800cb28:	6363      	str	r3, [r4, #52]	; 0x34
 800cb2a:	89a3      	ldrh	r3, [r4, #12]
 800cb2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb30:	81a3      	strh	r3, [r4, #12]
 800cb32:	2300      	movs	r3, #0
 800cb34:	6063      	str	r3, [r4, #4]
 800cb36:	6923      	ldr	r3, [r4, #16]
 800cb38:	6023      	str	r3, [r4, #0]
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	f043 0308 	orr.w	r3, r3, #8
 800cb40:	81a3      	strh	r3, [r4, #12]
 800cb42:	6923      	ldr	r3, [r4, #16]
 800cb44:	b94b      	cbnz	r3, 800cb5a <__swsetup_r+0x9a>
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb50:	d003      	beq.n	800cb5a <__swsetup_r+0x9a>
 800cb52:	4621      	mov	r1, r4
 800cb54:	4630      	mov	r0, r6
 800cb56:	f001 f813 	bl	800db80 <__smakebuf_r>
 800cb5a:	89a2      	ldrh	r2, [r4, #12]
 800cb5c:	f012 0301 	ands.w	r3, r2, #1
 800cb60:	d00c      	beq.n	800cb7c <__swsetup_r+0xbc>
 800cb62:	2300      	movs	r3, #0
 800cb64:	60a3      	str	r3, [r4, #8]
 800cb66:	6963      	ldr	r3, [r4, #20]
 800cb68:	425b      	negs	r3, r3
 800cb6a:	61a3      	str	r3, [r4, #24]
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	b953      	cbnz	r3, 800cb86 <__swsetup_r+0xc6>
 800cb70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cb78:	d1ba      	bne.n	800caf0 <__swsetup_r+0x30>
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	0792      	lsls	r2, r2, #30
 800cb7e:	bf58      	it	pl
 800cb80:	6963      	ldrpl	r3, [r4, #20]
 800cb82:	60a3      	str	r3, [r4, #8]
 800cb84:	e7f2      	b.n	800cb6c <__swsetup_r+0xac>
 800cb86:	2000      	movs	r0, #0
 800cb88:	e7f7      	b.n	800cb7a <__swsetup_r+0xba>
 800cb8a:	bf00      	nop
 800cb8c:	20001514 	.word	0x20001514
 800cb90:	0800eb78 	.word	0x0800eb78
 800cb94:	0800eb98 	.word	0x0800eb98
 800cb98:	0800eb58 	.word	0x0800eb58

0800cb9c <quorem>:
 800cb9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba0:	6903      	ldr	r3, [r0, #16]
 800cba2:	690c      	ldr	r4, [r1, #16]
 800cba4:	42a3      	cmp	r3, r4
 800cba6:	4680      	mov	r8, r0
 800cba8:	f2c0 8082 	blt.w	800ccb0 <quorem+0x114>
 800cbac:	3c01      	subs	r4, #1
 800cbae:	f101 0714 	add.w	r7, r1, #20
 800cbb2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cbb6:	f100 0614 	add.w	r6, r0, #20
 800cbba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cbbe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cbc2:	eb06 030c 	add.w	r3, r6, ip
 800cbc6:	3501      	adds	r5, #1
 800cbc8:	eb07 090c 	add.w	r9, r7, ip
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	fbb0 f5f5 	udiv	r5, r0, r5
 800cbd2:	b395      	cbz	r5, 800cc3a <quorem+0x9e>
 800cbd4:	f04f 0a00 	mov.w	sl, #0
 800cbd8:	4638      	mov	r0, r7
 800cbda:	46b6      	mov	lr, r6
 800cbdc:	46d3      	mov	fp, sl
 800cbde:	f850 2b04 	ldr.w	r2, [r0], #4
 800cbe2:	b293      	uxth	r3, r2
 800cbe4:	fb05 a303 	mla	r3, r5, r3, sl
 800cbe8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	ebab 0303 	sub.w	r3, fp, r3
 800cbf2:	0c12      	lsrs	r2, r2, #16
 800cbf4:	f8de b000 	ldr.w	fp, [lr]
 800cbf8:	fb05 a202 	mla	r2, r5, r2, sl
 800cbfc:	fa13 f38b 	uxtah	r3, r3, fp
 800cc00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cc04:	fa1f fb82 	uxth.w	fp, r2
 800cc08:	f8de 2000 	ldr.w	r2, [lr]
 800cc0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cc10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc1a:	4581      	cmp	r9, r0
 800cc1c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cc20:	f84e 3b04 	str.w	r3, [lr], #4
 800cc24:	d2db      	bcs.n	800cbde <quorem+0x42>
 800cc26:	f856 300c 	ldr.w	r3, [r6, ip]
 800cc2a:	b933      	cbnz	r3, 800cc3a <quorem+0x9e>
 800cc2c:	9b01      	ldr	r3, [sp, #4]
 800cc2e:	3b04      	subs	r3, #4
 800cc30:	429e      	cmp	r6, r3
 800cc32:	461a      	mov	r2, r3
 800cc34:	d330      	bcc.n	800cc98 <quorem+0xfc>
 800cc36:	f8c8 4010 	str.w	r4, [r8, #16]
 800cc3a:	4640      	mov	r0, r8
 800cc3c:	f001 f9fe 	bl	800e03c <__mcmp>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	db25      	blt.n	800cc90 <quorem+0xf4>
 800cc44:	3501      	adds	r5, #1
 800cc46:	4630      	mov	r0, r6
 800cc48:	f04f 0c00 	mov.w	ip, #0
 800cc4c:	f857 2b04 	ldr.w	r2, [r7], #4
 800cc50:	f8d0 e000 	ldr.w	lr, [r0]
 800cc54:	b293      	uxth	r3, r2
 800cc56:	ebac 0303 	sub.w	r3, ip, r3
 800cc5a:	0c12      	lsrs	r2, r2, #16
 800cc5c:	fa13 f38e 	uxtah	r3, r3, lr
 800cc60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cc64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc6e:	45b9      	cmp	r9, r7
 800cc70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cc74:	f840 3b04 	str.w	r3, [r0], #4
 800cc78:	d2e8      	bcs.n	800cc4c <quorem+0xb0>
 800cc7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cc7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cc82:	b92a      	cbnz	r2, 800cc90 <quorem+0xf4>
 800cc84:	3b04      	subs	r3, #4
 800cc86:	429e      	cmp	r6, r3
 800cc88:	461a      	mov	r2, r3
 800cc8a:	d30b      	bcc.n	800cca4 <quorem+0x108>
 800cc8c:	f8c8 4010 	str.w	r4, [r8, #16]
 800cc90:	4628      	mov	r0, r5
 800cc92:	b003      	add	sp, #12
 800cc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc98:	6812      	ldr	r2, [r2, #0]
 800cc9a:	3b04      	subs	r3, #4
 800cc9c:	2a00      	cmp	r2, #0
 800cc9e:	d1ca      	bne.n	800cc36 <quorem+0x9a>
 800cca0:	3c01      	subs	r4, #1
 800cca2:	e7c5      	b.n	800cc30 <quorem+0x94>
 800cca4:	6812      	ldr	r2, [r2, #0]
 800cca6:	3b04      	subs	r3, #4
 800cca8:	2a00      	cmp	r2, #0
 800ccaa:	d1ef      	bne.n	800cc8c <quorem+0xf0>
 800ccac:	3c01      	subs	r4, #1
 800ccae:	e7ea      	b.n	800cc86 <quorem+0xea>
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	e7ee      	b.n	800cc92 <quorem+0xf6>
 800ccb4:	0000      	movs	r0, r0
	...

0800ccb8 <_dtoa_r>:
 800ccb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccbc:	ec57 6b10 	vmov	r6, r7, d0
 800ccc0:	b097      	sub	sp, #92	; 0x5c
 800ccc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ccc4:	9106      	str	r1, [sp, #24]
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	920b      	str	r2, [sp, #44]	; 0x2c
 800ccca:	9312      	str	r3, [sp, #72]	; 0x48
 800cccc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ccd0:	e9cd 6700 	strd	r6, r7, [sp]
 800ccd4:	b93d      	cbnz	r5, 800cce6 <_dtoa_r+0x2e>
 800ccd6:	2010      	movs	r0, #16
 800ccd8:	f000 ff92 	bl	800dc00 <malloc>
 800ccdc:	6260      	str	r0, [r4, #36]	; 0x24
 800ccde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cce2:	6005      	str	r5, [r0, #0]
 800cce4:	60c5      	str	r5, [r0, #12]
 800cce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cce8:	6819      	ldr	r1, [r3, #0]
 800ccea:	b151      	cbz	r1, 800cd02 <_dtoa_r+0x4a>
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	604a      	str	r2, [r1, #4]
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	4093      	lsls	r3, r2
 800ccf4:	608b      	str	r3, [r1, #8]
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f000 ffbe 	bl	800dc78 <_Bfree>
 800ccfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccfe:	2200      	movs	r2, #0
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	1e3b      	subs	r3, r7, #0
 800cd04:	bfbb      	ittet	lt
 800cd06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cd0a:	9301      	strlt	r3, [sp, #4]
 800cd0c:	2300      	movge	r3, #0
 800cd0e:	2201      	movlt	r2, #1
 800cd10:	bfac      	ite	ge
 800cd12:	f8c8 3000 	strge.w	r3, [r8]
 800cd16:	f8c8 2000 	strlt.w	r2, [r8]
 800cd1a:	4baf      	ldr	r3, [pc, #700]	; (800cfd8 <_dtoa_r+0x320>)
 800cd1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cd20:	ea33 0308 	bics.w	r3, r3, r8
 800cd24:	d114      	bne.n	800cd50 <_dtoa_r+0x98>
 800cd26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd28:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	9b00      	ldr	r3, [sp, #0]
 800cd30:	b923      	cbnz	r3, 800cd3c <_dtoa_r+0x84>
 800cd32:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cd36:	2800      	cmp	r0, #0
 800cd38:	f000 8542 	beq.w	800d7c0 <_dtoa_r+0xb08>
 800cd3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd3e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cfec <_dtoa_r+0x334>
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f000 8544 	beq.w	800d7d0 <_dtoa_r+0xb18>
 800cd48:	f10b 0303 	add.w	r3, fp, #3
 800cd4c:	f000 bd3e 	b.w	800d7cc <_dtoa_r+0xb14>
 800cd50:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd54:	2200      	movs	r2, #0
 800cd56:	2300      	movs	r3, #0
 800cd58:	4630      	mov	r0, r6
 800cd5a:	4639      	mov	r1, r7
 800cd5c:	f7f3 feb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd60:	4681      	mov	r9, r0
 800cd62:	b168      	cbz	r0, 800cd80 <_dtoa_r+0xc8>
 800cd64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd66:	2301      	movs	r3, #1
 800cd68:	6013      	str	r3, [r2, #0]
 800cd6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f000 8524 	beq.w	800d7ba <_dtoa_r+0xb02>
 800cd72:	4b9a      	ldr	r3, [pc, #616]	; (800cfdc <_dtoa_r+0x324>)
 800cd74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd76:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd7a:	6013      	str	r3, [r2, #0]
 800cd7c:	f000 bd28 	b.w	800d7d0 <_dtoa_r+0xb18>
 800cd80:	aa14      	add	r2, sp, #80	; 0x50
 800cd82:	a915      	add	r1, sp, #84	; 0x54
 800cd84:	ec47 6b10 	vmov	d0, r6, r7
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f001 f9ce 	bl	800e12a <__d2b>
 800cd8e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cd92:	9004      	str	r0, [sp, #16]
 800cd94:	2d00      	cmp	r5, #0
 800cd96:	d07c      	beq.n	800ce92 <_dtoa_r+0x1da>
 800cd98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd9c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cda0:	46b2      	mov	sl, r6
 800cda2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cda6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cdaa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cdae:	2200      	movs	r2, #0
 800cdb0:	4b8b      	ldr	r3, [pc, #556]	; (800cfe0 <_dtoa_r+0x328>)
 800cdb2:	4650      	mov	r0, sl
 800cdb4:	4659      	mov	r1, fp
 800cdb6:	f7f3 fa67 	bl	8000288 <__aeabi_dsub>
 800cdba:	a381      	add	r3, pc, #516	; (adr r3, 800cfc0 <_dtoa_r+0x308>)
 800cdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc0:	f7f3 fc1a 	bl	80005f8 <__aeabi_dmul>
 800cdc4:	a380      	add	r3, pc, #512	; (adr r3, 800cfc8 <_dtoa_r+0x310>)
 800cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdca:	f7f3 fa5f 	bl	800028c <__adddf3>
 800cdce:	4606      	mov	r6, r0
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	460f      	mov	r7, r1
 800cdd4:	f7f3 fba6 	bl	8000524 <__aeabi_i2d>
 800cdd8:	a37d      	add	r3, pc, #500	; (adr r3, 800cfd0 <_dtoa_r+0x318>)
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	f7f3 fc0b 	bl	80005f8 <__aeabi_dmul>
 800cde2:	4602      	mov	r2, r0
 800cde4:	460b      	mov	r3, r1
 800cde6:	4630      	mov	r0, r6
 800cde8:	4639      	mov	r1, r7
 800cdea:	f7f3 fa4f 	bl	800028c <__adddf3>
 800cdee:	4606      	mov	r6, r0
 800cdf0:	460f      	mov	r7, r1
 800cdf2:	f7f3 feb1 	bl	8000b58 <__aeabi_d2iz>
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	4682      	mov	sl, r0
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	4639      	mov	r1, r7
 800ce00:	f7f3 fe6c 	bl	8000adc <__aeabi_dcmplt>
 800ce04:	b148      	cbz	r0, 800ce1a <_dtoa_r+0x162>
 800ce06:	4650      	mov	r0, sl
 800ce08:	f7f3 fb8c 	bl	8000524 <__aeabi_i2d>
 800ce0c:	4632      	mov	r2, r6
 800ce0e:	463b      	mov	r3, r7
 800ce10:	f7f3 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce14:	b908      	cbnz	r0, 800ce1a <_dtoa_r+0x162>
 800ce16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce1a:	f1ba 0f16 	cmp.w	sl, #22
 800ce1e:	d859      	bhi.n	800ced4 <_dtoa_r+0x21c>
 800ce20:	4970      	ldr	r1, [pc, #448]	; (800cfe4 <_dtoa_r+0x32c>)
 800ce22:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ce26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce2e:	f7f3 fe73 	bl	8000b18 <__aeabi_dcmpgt>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d050      	beq.n	800ced8 <_dtoa_r+0x220>
 800ce36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce40:	1b5d      	subs	r5, r3, r5
 800ce42:	f1b5 0801 	subs.w	r8, r5, #1
 800ce46:	bf49      	itett	mi
 800ce48:	f1c5 0301 	rsbmi	r3, r5, #1
 800ce4c:	2300      	movpl	r3, #0
 800ce4e:	9305      	strmi	r3, [sp, #20]
 800ce50:	f04f 0800 	movmi.w	r8, #0
 800ce54:	bf58      	it	pl
 800ce56:	9305      	strpl	r3, [sp, #20]
 800ce58:	f1ba 0f00 	cmp.w	sl, #0
 800ce5c:	db3e      	blt.n	800cedc <_dtoa_r+0x224>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	44d0      	add	r8, sl
 800ce62:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ce66:	9307      	str	r3, [sp, #28]
 800ce68:	9b06      	ldr	r3, [sp, #24]
 800ce6a:	2b09      	cmp	r3, #9
 800ce6c:	f200 8090 	bhi.w	800cf90 <_dtoa_r+0x2d8>
 800ce70:	2b05      	cmp	r3, #5
 800ce72:	bfc4      	itt	gt
 800ce74:	3b04      	subgt	r3, #4
 800ce76:	9306      	strgt	r3, [sp, #24]
 800ce78:	9b06      	ldr	r3, [sp, #24]
 800ce7a:	f1a3 0302 	sub.w	r3, r3, #2
 800ce7e:	bfcc      	ite	gt
 800ce80:	2500      	movgt	r5, #0
 800ce82:	2501      	movle	r5, #1
 800ce84:	2b03      	cmp	r3, #3
 800ce86:	f200 808f 	bhi.w	800cfa8 <_dtoa_r+0x2f0>
 800ce8a:	e8df f003 	tbb	[pc, r3]
 800ce8e:	7f7d      	.short	0x7f7d
 800ce90:	7131      	.short	0x7131
 800ce92:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ce96:	441d      	add	r5, r3
 800ce98:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ce9c:	2820      	cmp	r0, #32
 800ce9e:	dd13      	ble.n	800cec8 <_dtoa_r+0x210>
 800cea0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cea4:	9b00      	ldr	r3, [sp, #0]
 800cea6:	fa08 f800 	lsl.w	r8, r8, r0
 800ceaa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ceae:	fa23 f000 	lsr.w	r0, r3, r0
 800ceb2:	ea48 0000 	orr.w	r0, r8, r0
 800ceb6:	f7f3 fb25 	bl	8000504 <__aeabi_ui2d>
 800ceba:	2301      	movs	r3, #1
 800cebc:	4682      	mov	sl, r0
 800cebe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cec2:	3d01      	subs	r5, #1
 800cec4:	9313      	str	r3, [sp, #76]	; 0x4c
 800cec6:	e772      	b.n	800cdae <_dtoa_r+0xf6>
 800cec8:	9b00      	ldr	r3, [sp, #0]
 800ceca:	f1c0 0020 	rsb	r0, r0, #32
 800cece:	fa03 f000 	lsl.w	r0, r3, r0
 800ced2:	e7f0      	b.n	800ceb6 <_dtoa_r+0x1fe>
 800ced4:	2301      	movs	r3, #1
 800ced6:	e7b1      	b.n	800ce3c <_dtoa_r+0x184>
 800ced8:	900f      	str	r0, [sp, #60]	; 0x3c
 800ceda:	e7b0      	b.n	800ce3e <_dtoa_r+0x186>
 800cedc:	9b05      	ldr	r3, [sp, #20]
 800cede:	eba3 030a 	sub.w	r3, r3, sl
 800cee2:	9305      	str	r3, [sp, #20]
 800cee4:	f1ca 0300 	rsb	r3, sl, #0
 800cee8:	9307      	str	r3, [sp, #28]
 800ceea:	2300      	movs	r3, #0
 800ceec:	930e      	str	r3, [sp, #56]	; 0x38
 800ceee:	e7bb      	b.n	800ce68 <_dtoa_r+0x1b0>
 800cef0:	2301      	movs	r3, #1
 800cef2:	930a      	str	r3, [sp, #40]	; 0x28
 800cef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	dd59      	ble.n	800cfae <_dtoa_r+0x2f6>
 800cefa:	9302      	str	r3, [sp, #8]
 800cefc:	4699      	mov	r9, r3
 800cefe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf00:	2200      	movs	r2, #0
 800cf02:	6072      	str	r2, [r6, #4]
 800cf04:	2204      	movs	r2, #4
 800cf06:	f102 0014 	add.w	r0, r2, #20
 800cf0a:	4298      	cmp	r0, r3
 800cf0c:	6871      	ldr	r1, [r6, #4]
 800cf0e:	d953      	bls.n	800cfb8 <_dtoa_r+0x300>
 800cf10:	4620      	mov	r0, r4
 800cf12:	f000 fe7d 	bl	800dc10 <_Balloc>
 800cf16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf18:	6030      	str	r0, [r6, #0]
 800cf1a:	f1b9 0f0e 	cmp.w	r9, #14
 800cf1e:	f8d3 b000 	ldr.w	fp, [r3]
 800cf22:	f200 80e6 	bhi.w	800d0f2 <_dtoa_r+0x43a>
 800cf26:	2d00      	cmp	r5, #0
 800cf28:	f000 80e3 	beq.w	800d0f2 <_dtoa_r+0x43a>
 800cf2c:	ed9d 7b00 	vldr	d7, [sp]
 800cf30:	f1ba 0f00 	cmp.w	sl, #0
 800cf34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cf38:	dd74      	ble.n	800d024 <_dtoa_r+0x36c>
 800cf3a:	4a2a      	ldr	r2, [pc, #168]	; (800cfe4 <_dtoa_r+0x32c>)
 800cf3c:	f00a 030f 	and.w	r3, sl, #15
 800cf40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf44:	ed93 7b00 	vldr	d7, [r3]
 800cf48:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cf4c:	06f0      	lsls	r0, r6, #27
 800cf4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cf52:	d565      	bpl.n	800d020 <_dtoa_r+0x368>
 800cf54:	4b24      	ldr	r3, [pc, #144]	; (800cfe8 <_dtoa_r+0x330>)
 800cf56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cf5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf5e:	f7f3 fc75 	bl	800084c <__aeabi_ddiv>
 800cf62:	e9cd 0100 	strd	r0, r1, [sp]
 800cf66:	f006 060f 	and.w	r6, r6, #15
 800cf6a:	2503      	movs	r5, #3
 800cf6c:	4f1e      	ldr	r7, [pc, #120]	; (800cfe8 <_dtoa_r+0x330>)
 800cf6e:	e04c      	b.n	800d00a <_dtoa_r+0x352>
 800cf70:	2301      	movs	r3, #1
 800cf72:	930a      	str	r3, [sp, #40]	; 0x28
 800cf74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf76:	4453      	add	r3, sl
 800cf78:	f103 0901 	add.w	r9, r3, #1
 800cf7c:	9302      	str	r3, [sp, #8]
 800cf7e:	464b      	mov	r3, r9
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	bfb8      	it	lt
 800cf84:	2301      	movlt	r3, #1
 800cf86:	e7ba      	b.n	800cefe <_dtoa_r+0x246>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	e7b2      	b.n	800cef2 <_dtoa_r+0x23a>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	e7f0      	b.n	800cf72 <_dtoa_r+0x2ba>
 800cf90:	2501      	movs	r5, #1
 800cf92:	2300      	movs	r3, #0
 800cf94:	9306      	str	r3, [sp, #24]
 800cf96:	950a      	str	r5, [sp, #40]	; 0x28
 800cf98:	f04f 33ff 	mov.w	r3, #4294967295
 800cf9c:	9302      	str	r3, [sp, #8]
 800cf9e:	4699      	mov	r9, r3
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	2312      	movs	r3, #18
 800cfa4:	920b      	str	r2, [sp, #44]	; 0x2c
 800cfa6:	e7aa      	b.n	800cefe <_dtoa_r+0x246>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	930a      	str	r3, [sp, #40]	; 0x28
 800cfac:	e7f4      	b.n	800cf98 <_dtoa_r+0x2e0>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	9302      	str	r3, [sp, #8]
 800cfb2:	4699      	mov	r9, r3
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	e7f5      	b.n	800cfa4 <_dtoa_r+0x2ec>
 800cfb8:	3101      	adds	r1, #1
 800cfba:	6071      	str	r1, [r6, #4]
 800cfbc:	0052      	lsls	r2, r2, #1
 800cfbe:	e7a2      	b.n	800cf06 <_dtoa_r+0x24e>
 800cfc0:	636f4361 	.word	0x636f4361
 800cfc4:	3fd287a7 	.word	0x3fd287a7
 800cfc8:	8b60c8b3 	.word	0x8b60c8b3
 800cfcc:	3fc68a28 	.word	0x3fc68a28
 800cfd0:	509f79fb 	.word	0x509f79fb
 800cfd4:	3fd34413 	.word	0x3fd34413
 800cfd8:	7ff00000 	.word	0x7ff00000
 800cfdc:	0800eb25 	.word	0x0800eb25
 800cfe0:	3ff80000 	.word	0x3ff80000
 800cfe4:	0800ebe0 	.word	0x0800ebe0
 800cfe8:	0800ebb8 	.word	0x0800ebb8
 800cfec:	0800eb51 	.word	0x0800eb51
 800cff0:	07f1      	lsls	r1, r6, #31
 800cff2:	d508      	bpl.n	800d006 <_dtoa_r+0x34e>
 800cff4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cffc:	f7f3 fafc 	bl	80005f8 <__aeabi_dmul>
 800d000:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d004:	3501      	adds	r5, #1
 800d006:	1076      	asrs	r6, r6, #1
 800d008:	3708      	adds	r7, #8
 800d00a:	2e00      	cmp	r6, #0
 800d00c:	d1f0      	bne.n	800cff0 <_dtoa_r+0x338>
 800d00e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d012:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d016:	f7f3 fc19 	bl	800084c <__aeabi_ddiv>
 800d01a:	e9cd 0100 	strd	r0, r1, [sp]
 800d01e:	e01a      	b.n	800d056 <_dtoa_r+0x39e>
 800d020:	2502      	movs	r5, #2
 800d022:	e7a3      	b.n	800cf6c <_dtoa_r+0x2b4>
 800d024:	f000 80a0 	beq.w	800d168 <_dtoa_r+0x4b0>
 800d028:	f1ca 0600 	rsb	r6, sl, #0
 800d02c:	4b9f      	ldr	r3, [pc, #636]	; (800d2ac <_dtoa_r+0x5f4>)
 800d02e:	4fa0      	ldr	r7, [pc, #640]	; (800d2b0 <_dtoa_r+0x5f8>)
 800d030:	f006 020f 	and.w	r2, r6, #15
 800d034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d040:	f7f3 fada 	bl	80005f8 <__aeabi_dmul>
 800d044:	e9cd 0100 	strd	r0, r1, [sp]
 800d048:	1136      	asrs	r6, r6, #4
 800d04a:	2300      	movs	r3, #0
 800d04c:	2502      	movs	r5, #2
 800d04e:	2e00      	cmp	r6, #0
 800d050:	d17f      	bne.n	800d152 <_dtoa_r+0x49a>
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1e1      	bne.n	800d01a <_dtoa_r+0x362>
 800d056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f000 8087 	beq.w	800d16c <_dtoa_r+0x4b4>
 800d05e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d062:	2200      	movs	r2, #0
 800d064:	4b93      	ldr	r3, [pc, #588]	; (800d2b4 <_dtoa_r+0x5fc>)
 800d066:	4630      	mov	r0, r6
 800d068:	4639      	mov	r1, r7
 800d06a:	f7f3 fd37 	bl	8000adc <__aeabi_dcmplt>
 800d06e:	2800      	cmp	r0, #0
 800d070:	d07c      	beq.n	800d16c <_dtoa_r+0x4b4>
 800d072:	f1b9 0f00 	cmp.w	r9, #0
 800d076:	d079      	beq.n	800d16c <_dtoa_r+0x4b4>
 800d078:	9b02      	ldr	r3, [sp, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	dd35      	ble.n	800d0ea <_dtoa_r+0x432>
 800d07e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d082:	9308      	str	r3, [sp, #32]
 800d084:	4639      	mov	r1, r7
 800d086:	2200      	movs	r2, #0
 800d088:	4b8b      	ldr	r3, [pc, #556]	; (800d2b8 <_dtoa_r+0x600>)
 800d08a:	4630      	mov	r0, r6
 800d08c:	f7f3 fab4 	bl	80005f8 <__aeabi_dmul>
 800d090:	e9cd 0100 	strd	r0, r1, [sp]
 800d094:	9f02      	ldr	r7, [sp, #8]
 800d096:	3501      	adds	r5, #1
 800d098:	4628      	mov	r0, r5
 800d09a:	f7f3 fa43 	bl	8000524 <__aeabi_i2d>
 800d09e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0a2:	f7f3 faa9 	bl	80005f8 <__aeabi_dmul>
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	4b84      	ldr	r3, [pc, #528]	; (800d2bc <_dtoa_r+0x604>)
 800d0aa:	f7f3 f8ef 	bl	800028c <__adddf3>
 800d0ae:	4605      	mov	r5, r0
 800d0b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d0b4:	2f00      	cmp	r7, #0
 800d0b6:	d15d      	bne.n	800d174 <_dtoa_r+0x4bc>
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	4b81      	ldr	r3, [pc, #516]	; (800d2c0 <_dtoa_r+0x608>)
 800d0bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0c0:	f7f3 f8e2 	bl	8000288 <__aeabi_dsub>
 800d0c4:	462a      	mov	r2, r5
 800d0c6:	4633      	mov	r3, r6
 800d0c8:	e9cd 0100 	strd	r0, r1, [sp]
 800d0cc:	f7f3 fd24 	bl	8000b18 <__aeabi_dcmpgt>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	f040 8288 	bne.w	800d5e6 <_dtoa_r+0x92e>
 800d0d6:	462a      	mov	r2, r5
 800d0d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d0dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0e0:	f7f3 fcfc 	bl	8000adc <__aeabi_dcmplt>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	f040 827c 	bne.w	800d5e2 <_dtoa_r+0x92a>
 800d0ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d0ee:	e9cd 2300 	strd	r2, r3, [sp]
 800d0f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f2c0 8150 	blt.w	800d39a <_dtoa_r+0x6e2>
 800d0fa:	f1ba 0f0e 	cmp.w	sl, #14
 800d0fe:	f300 814c 	bgt.w	800d39a <_dtoa_r+0x6e2>
 800d102:	4b6a      	ldr	r3, [pc, #424]	; (800d2ac <_dtoa_r+0x5f4>)
 800d104:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d108:	ed93 7b00 	vldr	d7, [r3]
 800d10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d10e:	2b00      	cmp	r3, #0
 800d110:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d114:	f280 80d8 	bge.w	800d2c8 <_dtoa_r+0x610>
 800d118:	f1b9 0f00 	cmp.w	r9, #0
 800d11c:	f300 80d4 	bgt.w	800d2c8 <_dtoa_r+0x610>
 800d120:	f040 825e 	bne.w	800d5e0 <_dtoa_r+0x928>
 800d124:	2200      	movs	r2, #0
 800d126:	4b66      	ldr	r3, [pc, #408]	; (800d2c0 <_dtoa_r+0x608>)
 800d128:	ec51 0b17 	vmov	r0, r1, d7
 800d12c:	f7f3 fa64 	bl	80005f8 <__aeabi_dmul>
 800d130:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d134:	f7f3 fce6 	bl	8000b04 <__aeabi_dcmpge>
 800d138:	464f      	mov	r7, r9
 800d13a:	464e      	mov	r6, r9
 800d13c:	2800      	cmp	r0, #0
 800d13e:	f040 8234 	bne.w	800d5aa <_dtoa_r+0x8f2>
 800d142:	2331      	movs	r3, #49	; 0x31
 800d144:	f10b 0501 	add.w	r5, fp, #1
 800d148:	f88b 3000 	strb.w	r3, [fp]
 800d14c:	f10a 0a01 	add.w	sl, sl, #1
 800d150:	e22f      	b.n	800d5b2 <_dtoa_r+0x8fa>
 800d152:	07f2      	lsls	r2, r6, #31
 800d154:	d505      	bpl.n	800d162 <_dtoa_r+0x4aa>
 800d156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d15a:	f7f3 fa4d 	bl	80005f8 <__aeabi_dmul>
 800d15e:	3501      	adds	r5, #1
 800d160:	2301      	movs	r3, #1
 800d162:	1076      	asrs	r6, r6, #1
 800d164:	3708      	adds	r7, #8
 800d166:	e772      	b.n	800d04e <_dtoa_r+0x396>
 800d168:	2502      	movs	r5, #2
 800d16a:	e774      	b.n	800d056 <_dtoa_r+0x39e>
 800d16c:	f8cd a020 	str.w	sl, [sp, #32]
 800d170:	464f      	mov	r7, r9
 800d172:	e791      	b.n	800d098 <_dtoa_r+0x3e0>
 800d174:	4b4d      	ldr	r3, [pc, #308]	; (800d2ac <_dtoa_r+0x5f4>)
 800d176:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d17a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d180:	2b00      	cmp	r3, #0
 800d182:	d047      	beq.n	800d214 <_dtoa_r+0x55c>
 800d184:	4602      	mov	r2, r0
 800d186:	460b      	mov	r3, r1
 800d188:	2000      	movs	r0, #0
 800d18a:	494e      	ldr	r1, [pc, #312]	; (800d2c4 <_dtoa_r+0x60c>)
 800d18c:	f7f3 fb5e 	bl	800084c <__aeabi_ddiv>
 800d190:	462a      	mov	r2, r5
 800d192:	4633      	mov	r3, r6
 800d194:	f7f3 f878 	bl	8000288 <__aeabi_dsub>
 800d198:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d19c:	465d      	mov	r5, fp
 800d19e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1a2:	f7f3 fcd9 	bl	8000b58 <__aeabi_d2iz>
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	f7f3 f9bc 	bl	8000524 <__aeabi_i2d>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1b4:	f7f3 f868 	bl	8000288 <__aeabi_dsub>
 800d1b8:	3630      	adds	r6, #48	; 0x30
 800d1ba:	f805 6b01 	strb.w	r6, [r5], #1
 800d1be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d1c2:	e9cd 0100 	strd	r0, r1, [sp]
 800d1c6:	f7f3 fc89 	bl	8000adc <__aeabi_dcmplt>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d163      	bne.n	800d296 <_dtoa_r+0x5de>
 800d1ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	4937      	ldr	r1, [pc, #220]	; (800d2b4 <_dtoa_r+0x5fc>)
 800d1d6:	f7f3 f857 	bl	8000288 <__aeabi_dsub>
 800d1da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d1de:	f7f3 fc7d 	bl	8000adc <__aeabi_dcmplt>
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	f040 80b7 	bne.w	800d356 <_dtoa_r+0x69e>
 800d1e8:	eba5 030b 	sub.w	r3, r5, fp
 800d1ec:	429f      	cmp	r7, r3
 800d1ee:	f77f af7c 	ble.w	800d0ea <_dtoa_r+0x432>
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	4b30      	ldr	r3, [pc, #192]	; (800d2b8 <_dtoa_r+0x600>)
 800d1f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d1fa:	f7f3 f9fd 	bl	80005f8 <__aeabi_dmul>
 800d1fe:	2200      	movs	r2, #0
 800d200:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d204:	4b2c      	ldr	r3, [pc, #176]	; (800d2b8 <_dtoa_r+0x600>)
 800d206:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d20a:	f7f3 f9f5 	bl	80005f8 <__aeabi_dmul>
 800d20e:	e9cd 0100 	strd	r0, r1, [sp]
 800d212:	e7c4      	b.n	800d19e <_dtoa_r+0x4e6>
 800d214:	462a      	mov	r2, r5
 800d216:	4633      	mov	r3, r6
 800d218:	f7f3 f9ee 	bl	80005f8 <__aeabi_dmul>
 800d21c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d220:	eb0b 0507 	add.w	r5, fp, r7
 800d224:	465e      	mov	r6, fp
 800d226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d22a:	f7f3 fc95 	bl	8000b58 <__aeabi_d2iz>
 800d22e:	4607      	mov	r7, r0
 800d230:	f7f3 f978 	bl	8000524 <__aeabi_i2d>
 800d234:	3730      	adds	r7, #48	; 0x30
 800d236:	4602      	mov	r2, r0
 800d238:	460b      	mov	r3, r1
 800d23a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d23e:	f7f3 f823 	bl	8000288 <__aeabi_dsub>
 800d242:	f806 7b01 	strb.w	r7, [r6], #1
 800d246:	42ae      	cmp	r6, r5
 800d248:	e9cd 0100 	strd	r0, r1, [sp]
 800d24c:	f04f 0200 	mov.w	r2, #0
 800d250:	d126      	bne.n	800d2a0 <_dtoa_r+0x5e8>
 800d252:	4b1c      	ldr	r3, [pc, #112]	; (800d2c4 <_dtoa_r+0x60c>)
 800d254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d258:	f7f3 f818 	bl	800028c <__adddf3>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d264:	f7f3 fc58 	bl	8000b18 <__aeabi_dcmpgt>
 800d268:	2800      	cmp	r0, #0
 800d26a:	d174      	bne.n	800d356 <_dtoa_r+0x69e>
 800d26c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d270:	2000      	movs	r0, #0
 800d272:	4914      	ldr	r1, [pc, #80]	; (800d2c4 <_dtoa_r+0x60c>)
 800d274:	f7f3 f808 	bl	8000288 <__aeabi_dsub>
 800d278:	4602      	mov	r2, r0
 800d27a:	460b      	mov	r3, r1
 800d27c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d280:	f7f3 fc2c 	bl	8000adc <__aeabi_dcmplt>
 800d284:	2800      	cmp	r0, #0
 800d286:	f43f af30 	beq.w	800d0ea <_dtoa_r+0x432>
 800d28a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d28e:	2b30      	cmp	r3, #48	; 0x30
 800d290:	f105 32ff 	add.w	r2, r5, #4294967295
 800d294:	d002      	beq.n	800d29c <_dtoa_r+0x5e4>
 800d296:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d29a:	e04a      	b.n	800d332 <_dtoa_r+0x67a>
 800d29c:	4615      	mov	r5, r2
 800d29e:	e7f4      	b.n	800d28a <_dtoa_r+0x5d2>
 800d2a0:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <_dtoa_r+0x600>)
 800d2a2:	f7f3 f9a9 	bl	80005f8 <__aeabi_dmul>
 800d2a6:	e9cd 0100 	strd	r0, r1, [sp]
 800d2aa:	e7bc      	b.n	800d226 <_dtoa_r+0x56e>
 800d2ac:	0800ebe0 	.word	0x0800ebe0
 800d2b0:	0800ebb8 	.word	0x0800ebb8
 800d2b4:	3ff00000 	.word	0x3ff00000
 800d2b8:	40240000 	.word	0x40240000
 800d2bc:	401c0000 	.word	0x401c0000
 800d2c0:	40140000 	.word	0x40140000
 800d2c4:	3fe00000 	.word	0x3fe00000
 800d2c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d2cc:	465d      	mov	r5, fp
 800d2ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	4639      	mov	r1, r7
 800d2d6:	f7f3 fab9 	bl	800084c <__aeabi_ddiv>
 800d2da:	f7f3 fc3d 	bl	8000b58 <__aeabi_d2iz>
 800d2de:	4680      	mov	r8, r0
 800d2e0:	f7f3 f920 	bl	8000524 <__aeabi_i2d>
 800d2e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2e8:	f7f3 f986 	bl	80005f8 <__aeabi_dmul>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d2f8:	f7f2 ffc6 	bl	8000288 <__aeabi_dsub>
 800d2fc:	f805 6b01 	strb.w	r6, [r5], #1
 800d300:	eba5 060b 	sub.w	r6, r5, fp
 800d304:	45b1      	cmp	r9, r6
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	d139      	bne.n	800d380 <_dtoa_r+0x6c8>
 800d30c:	f7f2 ffbe 	bl	800028c <__adddf3>
 800d310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d314:	4606      	mov	r6, r0
 800d316:	460f      	mov	r7, r1
 800d318:	f7f3 fbfe 	bl	8000b18 <__aeabi_dcmpgt>
 800d31c:	b9c8      	cbnz	r0, 800d352 <_dtoa_r+0x69a>
 800d31e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d322:	4630      	mov	r0, r6
 800d324:	4639      	mov	r1, r7
 800d326:	f7f3 fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800d32a:	b110      	cbz	r0, 800d332 <_dtoa_r+0x67a>
 800d32c:	f018 0f01 	tst.w	r8, #1
 800d330:	d10f      	bne.n	800d352 <_dtoa_r+0x69a>
 800d332:	9904      	ldr	r1, [sp, #16]
 800d334:	4620      	mov	r0, r4
 800d336:	f000 fc9f 	bl	800dc78 <_Bfree>
 800d33a:	2300      	movs	r3, #0
 800d33c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d33e:	702b      	strb	r3, [r5, #0]
 800d340:	f10a 0301 	add.w	r3, sl, #1
 800d344:	6013      	str	r3, [r2, #0]
 800d346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f000 8241 	beq.w	800d7d0 <_dtoa_r+0xb18>
 800d34e:	601d      	str	r5, [r3, #0]
 800d350:	e23e      	b.n	800d7d0 <_dtoa_r+0xb18>
 800d352:	f8cd a020 	str.w	sl, [sp, #32]
 800d356:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d35a:	2a39      	cmp	r2, #57	; 0x39
 800d35c:	f105 33ff 	add.w	r3, r5, #4294967295
 800d360:	d108      	bne.n	800d374 <_dtoa_r+0x6bc>
 800d362:	459b      	cmp	fp, r3
 800d364:	d10a      	bne.n	800d37c <_dtoa_r+0x6c4>
 800d366:	9b08      	ldr	r3, [sp, #32]
 800d368:	3301      	adds	r3, #1
 800d36a:	9308      	str	r3, [sp, #32]
 800d36c:	2330      	movs	r3, #48	; 0x30
 800d36e:	f88b 3000 	strb.w	r3, [fp]
 800d372:	465b      	mov	r3, fp
 800d374:	781a      	ldrb	r2, [r3, #0]
 800d376:	3201      	adds	r2, #1
 800d378:	701a      	strb	r2, [r3, #0]
 800d37a:	e78c      	b.n	800d296 <_dtoa_r+0x5de>
 800d37c:	461d      	mov	r5, r3
 800d37e:	e7ea      	b.n	800d356 <_dtoa_r+0x69e>
 800d380:	2200      	movs	r2, #0
 800d382:	4b9b      	ldr	r3, [pc, #620]	; (800d5f0 <_dtoa_r+0x938>)
 800d384:	f7f3 f938 	bl	80005f8 <__aeabi_dmul>
 800d388:	2200      	movs	r2, #0
 800d38a:	2300      	movs	r3, #0
 800d38c:	4606      	mov	r6, r0
 800d38e:	460f      	mov	r7, r1
 800d390:	f7f3 fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d394:	2800      	cmp	r0, #0
 800d396:	d09a      	beq.n	800d2ce <_dtoa_r+0x616>
 800d398:	e7cb      	b.n	800d332 <_dtoa_r+0x67a>
 800d39a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d39c:	2a00      	cmp	r2, #0
 800d39e:	f000 808b 	beq.w	800d4b8 <_dtoa_r+0x800>
 800d3a2:	9a06      	ldr	r2, [sp, #24]
 800d3a4:	2a01      	cmp	r2, #1
 800d3a6:	dc6e      	bgt.n	800d486 <_dtoa_r+0x7ce>
 800d3a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d3aa:	2a00      	cmp	r2, #0
 800d3ac:	d067      	beq.n	800d47e <_dtoa_r+0x7c6>
 800d3ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d3b2:	9f07      	ldr	r7, [sp, #28]
 800d3b4:	9d05      	ldr	r5, [sp, #20]
 800d3b6:	9a05      	ldr	r2, [sp, #20]
 800d3b8:	2101      	movs	r1, #1
 800d3ba:	441a      	add	r2, r3
 800d3bc:	4620      	mov	r0, r4
 800d3be:	9205      	str	r2, [sp, #20]
 800d3c0:	4498      	add	r8, r3
 800d3c2:	f000 fcf9 	bl	800ddb8 <__i2b>
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	2d00      	cmp	r5, #0
 800d3ca:	dd0c      	ble.n	800d3e6 <_dtoa_r+0x72e>
 800d3cc:	f1b8 0f00 	cmp.w	r8, #0
 800d3d0:	dd09      	ble.n	800d3e6 <_dtoa_r+0x72e>
 800d3d2:	4545      	cmp	r5, r8
 800d3d4:	9a05      	ldr	r2, [sp, #20]
 800d3d6:	462b      	mov	r3, r5
 800d3d8:	bfa8      	it	ge
 800d3da:	4643      	movge	r3, r8
 800d3dc:	1ad2      	subs	r2, r2, r3
 800d3de:	9205      	str	r2, [sp, #20]
 800d3e0:	1aed      	subs	r5, r5, r3
 800d3e2:	eba8 0803 	sub.w	r8, r8, r3
 800d3e6:	9b07      	ldr	r3, [sp, #28]
 800d3e8:	b1eb      	cbz	r3, 800d426 <_dtoa_r+0x76e>
 800d3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d067      	beq.n	800d4c0 <_dtoa_r+0x808>
 800d3f0:	b18f      	cbz	r7, 800d416 <_dtoa_r+0x75e>
 800d3f2:	4631      	mov	r1, r6
 800d3f4:	463a      	mov	r2, r7
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f000 fd7e 	bl	800def8 <__pow5mult>
 800d3fc:	9a04      	ldr	r2, [sp, #16]
 800d3fe:	4601      	mov	r1, r0
 800d400:	4606      	mov	r6, r0
 800d402:	4620      	mov	r0, r4
 800d404:	f000 fce1 	bl	800ddca <__multiply>
 800d408:	9904      	ldr	r1, [sp, #16]
 800d40a:	9008      	str	r0, [sp, #32]
 800d40c:	4620      	mov	r0, r4
 800d40e:	f000 fc33 	bl	800dc78 <_Bfree>
 800d412:	9b08      	ldr	r3, [sp, #32]
 800d414:	9304      	str	r3, [sp, #16]
 800d416:	9b07      	ldr	r3, [sp, #28]
 800d418:	1bda      	subs	r2, r3, r7
 800d41a:	d004      	beq.n	800d426 <_dtoa_r+0x76e>
 800d41c:	9904      	ldr	r1, [sp, #16]
 800d41e:	4620      	mov	r0, r4
 800d420:	f000 fd6a 	bl	800def8 <__pow5mult>
 800d424:	9004      	str	r0, [sp, #16]
 800d426:	2101      	movs	r1, #1
 800d428:	4620      	mov	r0, r4
 800d42a:	f000 fcc5 	bl	800ddb8 <__i2b>
 800d42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d430:	4607      	mov	r7, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	f000 81d0 	beq.w	800d7d8 <_dtoa_r+0xb20>
 800d438:	461a      	mov	r2, r3
 800d43a:	4601      	mov	r1, r0
 800d43c:	4620      	mov	r0, r4
 800d43e:	f000 fd5b 	bl	800def8 <__pow5mult>
 800d442:	9b06      	ldr	r3, [sp, #24]
 800d444:	2b01      	cmp	r3, #1
 800d446:	4607      	mov	r7, r0
 800d448:	dc40      	bgt.n	800d4cc <_dtoa_r+0x814>
 800d44a:	9b00      	ldr	r3, [sp, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d139      	bne.n	800d4c4 <_dtoa_r+0x80c>
 800d450:	9b01      	ldr	r3, [sp, #4]
 800d452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d456:	2b00      	cmp	r3, #0
 800d458:	d136      	bne.n	800d4c8 <_dtoa_r+0x810>
 800d45a:	9b01      	ldr	r3, [sp, #4]
 800d45c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d460:	0d1b      	lsrs	r3, r3, #20
 800d462:	051b      	lsls	r3, r3, #20
 800d464:	b12b      	cbz	r3, 800d472 <_dtoa_r+0x7ba>
 800d466:	9b05      	ldr	r3, [sp, #20]
 800d468:	3301      	adds	r3, #1
 800d46a:	9305      	str	r3, [sp, #20]
 800d46c:	f108 0801 	add.w	r8, r8, #1
 800d470:	2301      	movs	r3, #1
 800d472:	9307      	str	r3, [sp, #28]
 800d474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d476:	2b00      	cmp	r3, #0
 800d478:	d12a      	bne.n	800d4d0 <_dtoa_r+0x818>
 800d47a:	2001      	movs	r0, #1
 800d47c:	e030      	b.n	800d4e0 <_dtoa_r+0x828>
 800d47e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d480:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d484:	e795      	b.n	800d3b2 <_dtoa_r+0x6fa>
 800d486:	9b07      	ldr	r3, [sp, #28]
 800d488:	f109 37ff 	add.w	r7, r9, #4294967295
 800d48c:	42bb      	cmp	r3, r7
 800d48e:	bfbf      	itttt	lt
 800d490:	9b07      	ldrlt	r3, [sp, #28]
 800d492:	9707      	strlt	r7, [sp, #28]
 800d494:	1afa      	sublt	r2, r7, r3
 800d496:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d498:	bfbb      	ittet	lt
 800d49a:	189b      	addlt	r3, r3, r2
 800d49c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d49e:	1bdf      	subge	r7, r3, r7
 800d4a0:	2700      	movlt	r7, #0
 800d4a2:	f1b9 0f00 	cmp.w	r9, #0
 800d4a6:	bfb5      	itete	lt
 800d4a8:	9b05      	ldrlt	r3, [sp, #20]
 800d4aa:	9d05      	ldrge	r5, [sp, #20]
 800d4ac:	eba3 0509 	sublt.w	r5, r3, r9
 800d4b0:	464b      	movge	r3, r9
 800d4b2:	bfb8      	it	lt
 800d4b4:	2300      	movlt	r3, #0
 800d4b6:	e77e      	b.n	800d3b6 <_dtoa_r+0x6fe>
 800d4b8:	9f07      	ldr	r7, [sp, #28]
 800d4ba:	9d05      	ldr	r5, [sp, #20]
 800d4bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d4be:	e783      	b.n	800d3c8 <_dtoa_r+0x710>
 800d4c0:	9a07      	ldr	r2, [sp, #28]
 800d4c2:	e7ab      	b.n	800d41c <_dtoa_r+0x764>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	e7d4      	b.n	800d472 <_dtoa_r+0x7ba>
 800d4c8:	9b00      	ldr	r3, [sp, #0]
 800d4ca:	e7d2      	b.n	800d472 <_dtoa_r+0x7ba>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	9307      	str	r3, [sp, #28]
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d4d6:	6918      	ldr	r0, [r3, #16]
 800d4d8:	f000 fc20 	bl	800dd1c <__hi0bits>
 800d4dc:	f1c0 0020 	rsb	r0, r0, #32
 800d4e0:	4440      	add	r0, r8
 800d4e2:	f010 001f 	ands.w	r0, r0, #31
 800d4e6:	d047      	beq.n	800d578 <_dtoa_r+0x8c0>
 800d4e8:	f1c0 0320 	rsb	r3, r0, #32
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	dd3b      	ble.n	800d568 <_dtoa_r+0x8b0>
 800d4f0:	9b05      	ldr	r3, [sp, #20]
 800d4f2:	f1c0 001c 	rsb	r0, r0, #28
 800d4f6:	4403      	add	r3, r0
 800d4f8:	9305      	str	r3, [sp, #20]
 800d4fa:	4405      	add	r5, r0
 800d4fc:	4480      	add	r8, r0
 800d4fe:	9b05      	ldr	r3, [sp, #20]
 800d500:	2b00      	cmp	r3, #0
 800d502:	dd05      	ble.n	800d510 <_dtoa_r+0x858>
 800d504:	461a      	mov	r2, r3
 800d506:	9904      	ldr	r1, [sp, #16]
 800d508:	4620      	mov	r0, r4
 800d50a:	f000 fd43 	bl	800df94 <__lshift>
 800d50e:	9004      	str	r0, [sp, #16]
 800d510:	f1b8 0f00 	cmp.w	r8, #0
 800d514:	dd05      	ble.n	800d522 <_dtoa_r+0x86a>
 800d516:	4639      	mov	r1, r7
 800d518:	4642      	mov	r2, r8
 800d51a:	4620      	mov	r0, r4
 800d51c:	f000 fd3a 	bl	800df94 <__lshift>
 800d520:	4607      	mov	r7, r0
 800d522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d524:	b353      	cbz	r3, 800d57c <_dtoa_r+0x8c4>
 800d526:	4639      	mov	r1, r7
 800d528:	9804      	ldr	r0, [sp, #16]
 800d52a:	f000 fd87 	bl	800e03c <__mcmp>
 800d52e:	2800      	cmp	r0, #0
 800d530:	da24      	bge.n	800d57c <_dtoa_r+0x8c4>
 800d532:	2300      	movs	r3, #0
 800d534:	220a      	movs	r2, #10
 800d536:	9904      	ldr	r1, [sp, #16]
 800d538:	4620      	mov	r0, r4
 800d53a:	f000 fbb4 	bl	800dca6 <__multadd>
 800d53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d540:	9004      	str	r0, [sp, #16]
 800d542:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d546:	2b00      	cmp	r3, #0
 800d548:	f000 814d 	beq.w	800d7e6 <_dtoa_r+0xb2e>
 800d54c:	2300      	movs	r3, #0
 800d54e:	4631      	mov	r1, r6
 800d550:	220a      	movs	r2, #10
 800d552:	4620      	mov	r0, r4
 800d554:	f000 fba7 	bl	800dca6 <__multadd>
 800d558:	9b02      	ldr	r3, [sp, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	4606      	mov	r6, r0
 800d55e:	dc4f      	bgt.n	800d600 <_dtoa_r+0x948>
 800d560:	9b06      	ldr	r3, [sp, #24]
 800d562:	2b02      	cmp	r3, #2
 800d564:	dd4c      	ble.n	800d600 <_dtoa_r+0x948>
 800d566:	e011      	b.n	800d58c <_dtoa_r+0x8d4>
 800d568:	d0c9      	beq.n	800d4fe <_dtoa_r+0x846>
 800d56a:	9a05      	ldr	r2, [sp, #20]
 800d56c:	331c      	adds	r3, #28
 800d56e:	441a      	add	r2, r3
 800d570:	9205      	str	r2, [sp, #20]
 800d572:	441d      	add	r5, r3
 800d574:	4498      	add	r8, r3
 800d576:	e7c2      	b.n	800d4fe <_dtoa_r+0x846>
 800d578:	4603      	mov	r3, r0
 800d57a:	e7f6      	b.n	800d56a <_dtoa_r+0x8b2>
 800d57c:	f1b9 0f00 	cmp.w	r9, #0
 800d580:	dc38      	bgt.n	800d5f4 <_dtoa_r+0x93c>
 800d582:	9b06      	ldr	r3, [sp, #24]
 800d584:	2b02      	cmp	r3, #2
 800d586:	dd35      	ble.n	800d5f4 <_dtoa_r+0x93c>
 800d588:	f8cd 9008 	str.w	r9, [sp, #8]
 800d58c:	9b02      	ldr	r3, [sp, #8]
 800d58e:	b963      	cbnz	r3, 800d5aa <_dtoa_r+0x8f2>
 800d590:	4639      	mov	r1, r7
 800d592:	2205      	movs	r2, #5
 800d594:	4620      	mov	r0, r4
 800d596:	f000 fb86 	bl	800dca6 <__multadd>
 800d59a:	4601      	mov	r1, r0
 800d59c:	4607      	mov	r7, r0
 800d59e:	9804      	ldr	r0, [sp, #16]
 800d5a0:	f000 fd4c 	bl	800e03c <__mcmp>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	f73f adcc 	bgt.w	800d142 <_dtoa_r+0x48a>
 800d5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5ac:	465d      	mov	r5, fp
 800d5ae:	ea6f 0a03 	mvn.w	sl, r3
 800d5b2:	f04f 0900 	mov.w	r9, #0
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 fb5d 	bl	800dc78 <_Bfree>
 800d5be:	2e00      	cmp	r6, #0
 800d5c0:	f43f aeb7 	beq.w	800d332 <_dtoa_r+0x67a>
 800d5c4:	f1b9 0f00 	cmp.w	r9, #0
 800d5c8:	d005      	beq.n	800d5d6 <_dtoa_r+0x91e>
 800d5ca:	45b1      	cmp	r9, r6
 800d5cc:	d003      	beq.n	800d5d6 <_dtoa_r+0x91e>
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f000 fb51 	bl	800dc78 <_Bfree>
 800d5d6:	4631      	mov	r1, r6
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f000 fb4d 	bl	800dc78 <_Bfree>
 800d5de:	e6a8      	b.n	800d332 <_dtoa_r+0x67a>
 800d5e0:	2700      	movs	r7, #0
 800d5e2:	463e      	mov	r6, r7
 800d5e4:	e7e1      	b.n	800d5aa <_dtoa_r+0x8f2>
 800d5e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d5ea:	463e      	mov	r6, r7
 800d5ec:	e5a9      	b.n	800d142 <_dtoa_r+0x48a>
 800d5ee:	bf00      	nop
 800d5f0:	40240000 	.word	0x40240000
 800d5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f000 80fa 	beq.w	800d7f4 <_dtoa_r+0xb3c>
 800d600:	2d00      	cmp	r5, #0
 800d602:	dd05      	ble.n	800d610 <_dtoa_r+0x958>
 800d604:	4631      	mov	r1, r6
 800d606:	462a      	mov	r2, r5
 800d608:	4620      	mov	r0, r4
 800d60a:	f000 fcc3 	bl	800df94 <__lshift>
 800d60e:	4606      	mov	r6, r0
 800d610:	9b07      	ldr	r3, [sp, #28]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d04c      	beq.n	800d6b0 <_dtoa_r+0x9f8>
 800d616:	6871      	ldr	r1, [r6, #4]
 800d618:	4620      	mov	r0, r4
 800d61a:	f000 faf9 	bl	800dc10 <_Balloc>
 800d61e:	6932      	ldr	r2, [r6, #16]
 800d620:	3202      	adds	r2, #2
 800d622:	4605      	mov	r5, r0
 800d624:	0092      	lsls	r2, r2, #2
 800d626:	f106 010c 	add.w	r1, r6, #12
 800d62a:	300c      	adds	r0, #12
 800d62c:	f7fe fc44 	bl	800beb8 <memcpy>
 800d630:	2201      	movs	r2, #1
 800d632:	4629      	mov	r1, r5
 800d634:	4620      	mov	r0, r4
 800d636:	f000 fcad 	bl	800df94 <__lshift>
 800d63a:	9b00      	ldr	r3, [sp, #0]
 800d63c:	f8cd b014 	str.w	fp, [sp, #20]
 800d640:	f003 0301 	and.w	r3, r3, #1
 800d644:	46b1      	mov	r9, r6
 800d646:	9307      	str	r3, [sp, #28]
 800d648:	4606      	mov	r6, r0
 800d64a:	4639      	mov	r1, r7
 800d64c:	9804      	ldr	r0, [sp, #16]
 800d64e:	f7ff faa5 	bl	800cb9c <quorem>
 800d652:	4649      	mov	r1, r9
 800d654:	4605      	mov	r5, r0
 800d656:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d65a:	9804      	ldr	r0, [sp, #16]
 800d65c:	f000 fcee 	bl	800e03c <__mcmp>
 800d660:	4632      	mov	r2, r6
 800d662:	9000      	str	r0, [sp, #0]
 800d664:	4639      	mov	r1, r7
 800d666:	4620      	mov	r0, r4
 800d668:	f000 fd02 	bl	800e070 <__mdiff>
 800d66c:	68c3      	ldr	r3, [r0, #12]
 800d66e:	4602      	mov	r2, r0
 800d670:	bb03      	cbnz	r3, 800d6b4 <_dtoa_r+0x9fc>
 800d672:	4601      	mov	r1, r0
 800d674:	9008      	str	r0, [sp, #32]
 800d676:	9804      	ldr	r0, [sp, #16]
 800d678:	f000 fce0 	bl	800e03c <__mcmp>
 800d67c:	9a08      	ldr	r2, [sp, #32]
 800d67e:	4603      	mov	r3, r0
 800d680:	4611      	mov	r1, r2
 800d682:	4620      	mov	r0, r4
 800d684:	9308      	str	r3, [sp, #32]
 800d686:	f000 faf7 	bl	800dc78 <_Bfree>
 800d68a:	9b08      	ldr	r3, [sp, #32]
 800d68c:	b9a3      	cbnz	r3, 800d6b8 <_dtoa_r+0xa00>
 800d68e:	9a06      	ldr	r2, [sp, #24]
 800d690:	b992      	cbnz	r2, 800d6b8 <_dtoa_r+0xa00>
 800d692:	9a07      	ldr	r2, [sp, #28]
 800d694:	b982      	cbnz	r2, 800d6b8 <_dtoa_r+0xa00>
 800d696:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d69a:	d029      	beq.n	800d6f0 <_dtoa_r+0xa38>
 800d69c:	9b00      	ldr	r3, [sp, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	dd01      	ble.n	800d6a6 <_dtoa_r+0x9ee>
 800d6a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d6a6:	9b05      	ldr	r3, [sp, #20]
 800d6a8:	1c5d      	adds	r5, r3, #1
 800d6aa:	f883 8000 	strb.w	r8, [r3]
 800d6ae:	e782      	b.n	800d5b6 <_dtoa_r+0x8fe>
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	e7c2      	b.n	800d63a <_dtoa_r+0x982>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e7e3      	b.n	800d680 <_dtoa_r+0x9c8>
 800d6b8:	9a00      	ldr	r2, [sp, #0]
 800d6ba:	2a00      	cmp	r2, #0
 800d6bc:	db04      	blt.n	800d6c8 <_dtoa_r+0xa10>
 800d6be:	d125      	bne.n	800d70c <_dtoa_r+0xa54>
 800d6c0:	9a06      	ldr	r2, [sp, #24]
 800d6c2:	bb1a      	cbnz	r2, 800d70c <_dtoa_r+0xa54>
 800d6c4:	9a07      	ldr	r2, [sp, #28]
 800d6c6:	bb0a      	cbnz	r2, 800d70c <_dtoa_r+0xa54>
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	ddec      	ble.n	800d6a6 <_dtoa_r+0x9ee>
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	9904      	ldr	r1, [sp, #16]
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 fc5f 	bl	800df94 <__lshift>
 800d6d6:	4639      	mov	r1, r7
 800d6d8:	9004      	str	r0, [sp, #16]
 800d6da:	f000 fcaf 	bl	800e03c <__mcmp>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	dc03      	bgt.n	800d6ea <_dtoa_r+0xa32>
 800d6e2:	d1e0      	bne.n	800d6a6 <_dtoa_r+0x9ee>
 800d6e4:	f018 0f01 	tst.w	r8, #1
 800d6e8:	d0dd      	beq.n	800d6a6 <_dtoa_r+0x9ee>
 800d6ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d6ee:	d1d8      	bne.n	800d6a2 <_dtoa_r+0x9ea>
 800d6f0:	9b05      	ldr	r3, [sp, #20]
 800d6f2:	9a05      	ldr	r2, [sp, #20]
 800d6f4:	1c5d      	adds	r5, r3, #1
 800d6f6:	2339      	movs	r3, #57	; 0x39
 800d6f8:	7013      	strb	r3, [r2, #0]
 800d6fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d6fe:	2b39      	cmp	r3, #57	; 0x39
 800d700:	f105 32ff 	add.w	r2, r5, #4294967295
 800d704:	d04f      	beq.n	800d7a6 <_dtoa_r+0xaee>
 800d706:	3301      	adds	r3, #1
 800d708:	7013      	strb	r3, [r2, #0]
 800d70a:	e754      	b.n	800d5b6 <_dtoa_r+0x8fe>
 800d70c:	9a05      	ldr	r2, [sp, #20]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f102 0501 	add.w	r5, r2, #1
 800d714:	dd06      	ble.n	800d724 <_dtoa_r+0xa6c>
 800d716:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d71a:	d0e9      	beq.n	800d6f0 <_dtoa_r+0xa38>
 800d71c:	f108 0801 	add.w	r8, r8, #1
 800d720:	9b05      	ldr	r3, [sp, #20]
 800d722:	e7c2      	b.n	800d6aa <_dtoa_r+0x9f2>
 800d724:	9a02      	ldr	r2, [sp, #8]
 800d726:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d72a:	eba5 030b 	sub.w	r3, r5, fp
 800d72e:	4293      	cmp	r3, r2
 800d730:	d021      	beq.n	800d776 <_dtoa_r+0xabe>
 800d732:	2300      	movs	r3, #0
 800d734:	220a      	movs	r2, #10
 800d736:	9904      	ldr	r1, [sp, #16]
 800d738:	4620      	mov	r0, r4
 800d73a:	f000 fab4 	bl	800dca6 <__multadd>
 800d73e:	45b1      	cmp	r9, r6
 800d740:	9004      	str	r0, [sp, #16]
 800d742:	f04f 0300 	mov.w	r3, #0
 800d746:	f04f 020a 	mov.w	r2, #10
 800d74a:	4649      	mov	r1, r9
 800d74c:	4620      	mov	r0, r4
 800d74e:	d105      	bne.n	800d75c <_dtoa_r+0xaa4>
 800d750:	f000 faa9 	bl	800dca6 <__multadd>
 800d754:	4681      	mov	r9, r0
 800d756:	4606      	mov	r6, r0
 800d758:	9505      	str	r5, [sp, #20]
 800d75a:	e776      	b.n	800d64a <_dtoa_r+0x992>
 800d75c:	f000 faa3 	bl	800dca6 <__multadd>
 800d760:	4631      	mov	r1, r6
 800d762:	4681      	mov	r9, r0
 800d764:	2300      	movs	r3, #0
 800d766:	220a      	movs	r2, #10
 800d768:	4620      	mov	r0, r4
 800d76a:	f000 fa9c 	bl	800dca6 <__multadd>
 800d76e:	4606      	mov	r6, r0
 800d770:	e7f2      	b.n	800d758 <_dtoa_r+0xaa0>
 800d772:	f04f 0900 	mov.w	r9, #0
 800d776:	2201      	movs	r2, #1
 800d778:	9904      	ldr	r1, [sp, #16]
 800d77a:	4620      	mov	r0, r4
 800d77c:	f000 fc0a 	bl	800df94 <__lshift>
 800d780:	4639      	mov	r1, r7
 800d782:	9004      	str	r0, [sp, #16]
 800d784:	f000 fc5a 	bl	800e03c <__mcmp>
 800d788:	2800      	cmp	r0, #0
 800d78a:	dcb6      	bgt.n	800d6fa <_dtoa_r+0xa42>
 800d78c:	d102      	bne.n	800d794 <_dtoa_r+0xadc>
 800d78e:	f018 0f01 	tst.w	r8, #1
 800d792:	d1b2      	bne.n	800d6fa <_dtoa_r+0xa42>
 800d794:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d798:	2b30      	cmp	r3, #48	; 0x30
 800d79a:	f105 32ff 	add.w	r2, r5, #4294967295
 800d79e:	f47f af0a 	bne.w	800d5b6 <_dtoa_r+0x8fe>
 800d7a2:	4615      	mov	r5, r2
 800d7a4:	e7f6      	b.n	800d794 <_dtoa_r+0xadc>
 800d7a6:	4593      	cmp	fp, r2
 800d7a8:	d105      	bne.n	800d7b6 <_dtoa_r+0xafe>
 800d7aa:	2331      	movs	r3, #49	; 0x31
 800d7ac:	f10a 0a01 	add.w	sl, sl, #1
 800d7b0:	f88b 3000 	strb.w	r3, [fp]
 800d7b4:	e6ff      	b.n	800d5b6 <_dtoa_r+0x8fe>
 800d7b6:	4615      	mov	r5, r2
 800d7b8:	e79f      	b.n	800d6fa <_dtoa_r+0xa42>
 800d7ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d820 <_dtoa_r+0xb68>
 800d7be:	e007      	b.n	800d7d0 <_dtoa_r+0xb18>
 800d7c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d824 <_dtoa_r+0xb6c>
 800d7c6:	b11b      	cbz	r3, 800d7d0 <_dtoa_r+0xb18>
 800d7c8:	f10b 0308 	add.w	r3, fp, #8
 800d7cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	4658      	mov	r0, fp
 800d7d2:	b017      	add	sp, #92	; 0x5c
 800d7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d8:	9b06      	ldr	r3, [sp, #24]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	f77f ae35 	ble.w	800d44a <_dtoa_r+0x792>
 800d7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7e2:	9307      	str	r3, [sp, #28]
 800d7e4:	e649      	b.n	800d47a <_dtoa_r+0x7c2>
 800d7e6:	9b02      	ldr	r3, [sp, #8]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	dc03      	bgt.n	800d7f4 <_dtoa_r+0xb3c>
 800d7ec:	9b06      	ldr	r3, [sp, #24]
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	f73f aecc 	bgt.w	800d58c <_dtoa_r+0x8d4>
 800d7f4:	465d      	mov	r5, fp
 800d7f6:	4639      	mov	r1, r7
 800d7f8:	9804      	ldr	r0, [sp, #16]
 800d7fa:	f7ff f9cf 	bl	800cb9c <quorem>
 800d7fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d802:	f805 8b01 	strb.w	r8, [r5], #1
 800d806:	9a02      	ldr	r2, [sp, #8]
 800d808:	eba5 030b 	sub.w	r3, r5, fp
 800d80c:	429a      	cmp	r2, r3
 800d80e:	ddb0      	ble.n	800d772 <_dtoa_r+0xaba>
 800d810:	2300      	movs	r3, #0
 800d812:	220a      	movs	r2, #10
 800d814:	9904      	ldr	r1, [sp, #16]
 800d816:	4620      	mov	r0, r4
 800d818:	f000 fa45 	bl	800dca6 <__multadd>
 800d81c:	9004      	str	r0, [sp, #16]
 800d81e:	e7ea      	b.n	800d7f6 <_dtoa_r+0xb3e>
 800d820:	0800eb24 	.word	0x0800eb24
 800d824:	0800eb48 	.word	0x0800eb48

0800d828 <__sflush_r>:
 800d828:	898a      	ldrh	r2, [r1, #12]
 800d82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d82e:	4605      	mov	r5, r0
 800d830:	0710      	lsls	r0, r2, #28
 800d832:	460c      	mov	r4, r1
 800d834:	d458      	bmi.n	800d8e8 <__sflush_r+0xc0>
 800d836:	684b      	ldr	r3, [r1, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	dc05      	bgt.n	800d848 <__sflush_r+0x20>
 800d83c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d83e:	2b00      	cmp	r3, #0
 800d840:	dc02      	bgt.n	800d848 <__sflush_r+0x20>
 800d842:	2000      	movs	r0, #0
 800d844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d84a:	2e00      	cmp	r6, #0
 800d84c:	d0f9      	beq.n	800d842 <__sflush_r+0x1a>
 800d84e:	2300      	movs	r3, #0
 800d850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d854:	682f      	ldr	r7, [r5, #0]
 800d856:	6a21      	ldr	r1, [r4, #32]
 800d858:	602b      	str	r3, [r5, #0]
 800d85a:	d032      	beq.n	800d8c2 <__sflush_r+0x9a>
 800d85c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d85e:	89a3      	ldrh	r3, [r4, #12]
 800d860:	075a      	lsls	r2, r3, #29
 800d862:	d505      	bpl.n	800d870 <__sflush_r+0x48>
 800d864:	6863      	ldr	r3, [r4, #4]
 800d866:	1ac0      	subs	r0, r0, r3
 800d868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d86a:	b10b      	cbz	r3, 800d870 <__sflush_r+0x48>
 800d86c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d86e:	1ac0      	subs	r0, r0, r3
 800d870:	2300      	movs	r3, #0
 800d872:	4602      	mov	r2, r0
 800d874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d876:	6a21      	ldr	r1, [r4, #32]
 800d878:	4628      	mov	r0, r5
 800d87a:	47b0      	blx	r6
 800d87c:	1c43      	adds	r3, r0, #1
 800d87e:	89a3      	ldrh	r3, [r4, #12]
 800d880:	d106      	bne.n	800d890 <__sflush_r+0x68>
 800d882:	6829      	ldr	r1, [r5, #0]
 800d884:	291d      	cmp	r1, #29
 800d886:	d848      	bhi.n	800d91a <__sflush_r+0xf2>
 800d888:	4a29      	ldr	r2, [pc, #164]	; (800d930 <__sflush_r+0x108>)
 800d88a:	40ca      	lsrs	r2, r1
 800d88c:	07d6      	lsls	r6, r2, #31
 800d88e:	d544      	bpl.n	800d91a <__sflush_r+0xf2>
 800d890:	2200      	movs	r2, #0
 800d892:	6062      	str	r2, [r4, #4]
 800d894:	04d9      	lsls	r1, r3, #19
 800d896:	6922      	ldr	r2, [r4, #16]
 800d898:	6022      	str	r2, [r4, #0]
 800d89a:	d504      	bpl.n	800d8a6 <__sflush_r+0x7e>
 800d89c:	1c42      	adds	r2, r0, #1
 800d89e:	d101      	bne.n	800d8a4 <__sflush_r+0x7c>
 800d8a0:	682b      	ldr	r3, [r5, #0]
 800d8a2:	b903      	cbnz	r3, 800d8a6 <__sflush_r+0x7e>
 800d8a4:	6560      	str	r0, [r4, #84]	; 0x54
 800d8a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8a8:	602f      	str	r7, [r5, #0]
 800d8aa:	2900      	cmp	r1, #0
 800d8ac:	d0c9      	beq.n	800d842 <__sflush_r+0x1a>
 800d8ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8b2:	4299      	cmp	r1, r3
 800d8b4:	d002      	beq.n	800d8bc <__sflush_r+0x94>
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	f000 fc94 	bl	800e1e4 <_free_r>
 800d8bc:	2000      	movs	r0, #0
 800d8be:	6360      	str	r0, [r4, #52]	; 0x34
 800d8c0:	e7c0      	b.n	800d844 <__sflush_r+0x1c>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	47b0      	blx	r6
 800d8c8:	1c41      	adds	r1, r0, #1
 800d8ca:	d1c8      	bne.n	800d85e <__sflush_r+0x36>
 800d8cc:	682b      	ldr	r3, [r5, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d0c5      	beq.n	800d85e <__sflush_r+0x36>
 800d8d2:	2b1d      	cmp	r3, #29
 800d8d4:	d001      	beq.n	800d8da <__sflush_r+0xb2>
 800d8d6:	2b16      	cmp	r3, #22
 800d8d8:	d101      	bne.n	800d8de <__sflush_r+0xb6>
 800d8da:	602f      	str	r7, [r5, #0]
 800d8dc:	e7b1      	b.n	800d842 <__sflush_r+0x1a>
 800d8de:	89a3      	ldrh	r3, [r4, #12]
 800d8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8e4:	81a3      	strh	r3, [r4, #12]
 800d8e6:	e7ad      	b.n	800d844 <__sflush_r+0x1c>
 800d8e8:	690f      	ldr	r7, [r1, #16]
 800d8ea:	2f00      	cmp	r7, #0
 800d8ec:	d0a9      	beq.n	800d842 <__sflush_r+0x1a>
 800d8ee:	0793      	lsls	r3, r2, #30
 800d8f0:	680e      	ldr	r6, [r1, #0]
 800d8f2:	bf08      	it	eq
 800d8f4:	694b      	ldreq	r3, [r1, #20]
 800d8f6:	600f      	str	r7, [r1, #0]
 800d8f8:	bf18      	it	ne
 800d8fa:	2300      	movne	r3, #0
 800d8fc:	eba6 0807 	sub.w	r8, r6, r7
 800d900:	608b      	str	r3, [r1, #8]
 800d902:	f1b8 0f00 	cmp.w	r8, #0
 800d906:	dd9c      	ble.n	800d842 <__sflush_r+0x1a>
 800d908:	4643      	mov	r3, r8
 800d90a:	463a      	mov	r2, r7
 800d90c:	6a21      	ldr	r1, [r4, #32]
 800d90e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d910:	4628      	mov	r0, r5
 800d912:	47b0      	blx	r6
 800d914:	2800      	cmp	r0, #0
 800d916:	dc06      	bgt.n	800d926 <__sflush_r+0xfe>
 800d918:	89a3      	ldrh	r3, [r4, #12]
 800d91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d91e:	81a3      	strh	r3, [r4, #12]
 800d920:	f04f 30ff 	mov.w	r0, #4294967295
 800d924:	e78e      	b.n	800d844 <__sflush_r+0x1c>
 800d926:	4407      	add	r7, r0
 800d928:	eba8 0800 	sub.w	r8, r8, r0
 800d92c:	e7e9      	b.n	800d902 <__sflush_r+0xda>
 800d92e:	bf00      	nop
 800d930:	20400001 	.word	0x20400001

0800d934 <_fflush_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	690b      	ldr	r3, [r1, #16]
 800d938:	4605      	mov	r5, r0
 800d93a:	460c      	mov	r4, r1
 800d93c:	b1db      	cbz	r3, 800d976 <_fflush_r+0x42>
 800d93e:	b118      	cbz	r0, 800d948 <_fflush_r+0x14>
 800d940:	6983      	ldr	r3, [r0, #24]
 800d942:	b90b      	cbnz	r3, 800d948 <_fflush_r+0x14>
 800d944:	f000 f860 	bl	800da08 <__sinit>
 800d948:	4b0c      	ldr	r3, [pc, #48]	; (800d97c <_fflush_r+0x48>)
 800d94a:	429c      	cmp	r4, r3
 800d94c:	d109      	bne.n	800d962 <_fflush_r+0x2e>
 800d94e:	686c      	ldr	r4, [r5, #4]
 800d950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d954:	b17b      	cbz	r3, 800d976 <_fflush_r+0x42>
 800d956:	4621      	mov	r1, r4
 800d958:	4628      	mov	r0, r5
 800d95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d95e:	f7ff bf63 	b.w	800d828 <__sflush_r>
 800d962:	4b07      	ldr	r3, [pc, #28]	; (800d980 <_fflush_r+0x4c>)
 800d964:	429c      	cmp	r4, r3
 800d966:	d101      	bne.n	800d96c <_fflush_r+0x38>
 800d968:	68ac      	ldr	r4, [r5, #8]
 800d96a:	e7f1      	b.n	800d950 <_fflush_r+0x1c>
 800d96c:	4b05      	ldr	r3, [pc, #20]	; (800d984 <_fflush_r+0x50>)
 800d96e:	429c      	cmp	r4, r3
 800d970:	bf08      	it	eq
 800d972:	68ec      	ldreq	r4, [r5, #12]
 800d974:	e7ec      	b.n	800d950 <_fflush_r+0x1c>
 800d976:	2000      	movs	r0, #0
 800d978:	bd38      	pop	{r3, r4, r5, pc}
 800d97a:	bf00      	nop
 800d97c:	0800eb78 	.word	0x0800eb78
 800d980:	0800eb98 	.word	0x0800eb98
 800d984:	0800eb58 	.word	0x0800eb58

0800d988 <std>:
 800d988:	2300      	movs	r3, #0
 800d98a:	b510      	push	{r4, lr}
 800d98c:	4604      	mov	r4, r0
 800d98e:	e9c0 3300 	strd	r3, r3, [r0]
 800d992:	6083      	str	r3, [r0, #8]
 800d994:	8181      	strh	r1, [r0, #12]
 800d996:	6643      	str	r3, [r0, #100]	; 0x64
 800d998:	81c2      	strh	r2, [r0, #14]
 800d99a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d99e:	6183      	str	r3, [r0, #24]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	2208      	movs	r2, #8
 800d9a4:	305c      	adds	r0, #92	; 0x5c
 800d9a6:	f7fe faab 	bl	800bf00 <memset>
 800d9aa:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <std+0x38>)
 800d9ac:	6263      	str	r3, [r4, #36]	; 0x24
 800d9ae:	4b05      	ldr	r3, [pc, #20]	; (800d9c4 <std+0x3c>)
 800d9b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d9b2:	4b05      	ldr	r3, [pc, #20]	; (800d9c8 <std+0x40>)
 800d9b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d9b6:	4b05      	ldr	r3, [pc, #20]	; (800d9cc <std+0x44>)
 800d9b8:	6224      	str	r4, [r4, #32]
 800d9ba:	6323      	str	r3, [r4, #48]	; 0x30
 800d9bc:	bd10      	pop	{r4, pc}
 800d9be:	bf00      	nop
 800d9c0:	0800e5d5 	.word	0x0800e5d5
 800d9c4:	0800e5f7 	.word	0x0800e5f7
 800d9c8:	0800e62f 	.word	0x0800e62f
 800d9cc:	0800e653 	.word	0x0800e653

0800d9d0 <_cleanup_r>:
 800d9d0:	4901      	ldr	r1, [pc, #4]	; (800d9d8 <_cleanup_r+0x8>)
 800d9d2:	f000 b885 	b.w	800dae0 <_fwalk_reent>
 800d9d6:	bf00      	nop
 800d9d8:	0800d935 	.word	0x0800d935

0800d9dc <__sfmoreglue>:
 800d9dc:	b570      	push	{r4, r5, r6, lr}
 800d9de:	1e4a      	subs	r2, r1, #1
 800d9e0:	2568      	movs	r5, #104	; 0x68
 800d9e2:	4355      	muls	r5, r2
 800d9e4:	460e      	mov	r6, r1
 800d9e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9ea:	f000 fc49 	bl	800e280 <_malloc_r>
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	b140      	cbz	r0, 800da04 <__sfmoreglue+0x28>
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	e9c0 1600 	strd	r1, r6, [r0]
 800d9f8:	300c      	adds	r0, #12
 800d9fa:	60a0      	str	r0, [r4, #8]
 800d9fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da00:	f7fe fa7e 	bl	800bf00 <memset>
 800da04:	4620      	mov	r0, r4
 800da06:	bd70      	pop	{r4, r5, r6, pc}

0800da08 <__sinit>:
 800da08:	6983      	ldr	r3, [r0, #24]
 800da0a:	b510      	push	{r4, lr}
 800da0c:	4604      	mov	r4, r0
 800da0e:	bb33      	cbnz	r3, 800da5e <__sinit+0x56>
 800da10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800da14:	6503      	str	r3, [r0, #80]	; 0x50
 800da16:	4b12      	ldr	r3, [pc, #72]	; (800da60 <__sinit+0x58>)
 800da18:	4a12      	ldr	r2, [pc, #72]	; (800da64 <__sinit+0x5c>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	6282      	str	r2, [r0, #40]	; 0x28
 800da1e:	4298      	cmp	r0, r3
 800da20:	bf04      	itt	eq
 800da22:	2301      	moveq	r3, #1
 800da24:	6183      	streq	r3, [r0, #24]
 800da26:	f000 f81f 	bl	800da68 <__sfp>
 800da2a:	6060      	str	r0, [r4, #4]
 800da2c:	4620      	mov	r0, r4
 800da2e:	f000 f81b 	bl	800da68 <__sfp>
 800da32:	60a0      	str	r0, [r4, #8]
 800da34:	4620      	mov	r0, r4
 800da36:	f000 f817 	bl	800da68 <__sfp>
 800da3a:	2200      	movs	r2, #0
 800da3c:	60e0      	str	r0, [r4, #12]
 800da3e:	2104      	movs	r1, #4
 800da40:	6860      	ldr	r0, [r4, #4]
 800da42:	f7ff ffa1 	bl	800d988 <std>
 800da46:	2201      	movs	r2, #1
 800da48:	2109      	movs	r1, #9
 800da4a:	68a0      	ldr	r0, [r4, #8]
 800da4c:	f7ff ff9c 	bl	800d988 <std>
 800da50:	2202      	movs	r2, #2
 800da52:	2112      	movs	r1, #18
 800da54:	68e0      	ldr	r0, [r4, #12]
 800da56:	f7ff ff97 	bl	800d988 <std>
 800da5a:	2301      	movs	r3, #1
 800da5c:	61a3      	str	r3, [r4, #24]
 800da5e:	bd10      	pop	{r4, pc}
 800da60:	0800eb14 	.word	0x0800eb14
 800da64:	0800d9d1 	.word	0x0800d9d1

0800da68 <__sfp>:
 800da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6a:	4b1b      	ldr	r3, [pc, #108]	; (800dad8 <__sfp+0x70>)
 800da6c:	681e      	ldr	r6, [r3, #0]
 800da6e:	69b3      	ldr	r3, [r6, #24]
 800da70:	4607      	mov	r7, r0
 800da72:	b913      	cbnz	r3, 800da7a <__sfp+0x12>
 800da74:	4630      	mov	r0, r6
 800da76:	f7ff ffc7 	bl	800da08 <__sinit>
 800da7a:	3648      	adds	r6, #72	; 0x48
 800da7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800da80:	3b01      	subs	r3, #1
 800da82:	d503      	bpl.n	800da8c <__sfp+0x24>
 800da84:	6833      	ldr	r3, [r6, #0]
 800da86:	b133      	cbz	r3, 800da96 <__sfp+0x2e>
 800da88:	6836      	ldr	r6, [r6, #0]
 800da8a:	e7f7      	b.n	800da7c <__sfp+0x14>
 800da8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da90:	b16d      	cbz	r5, 800daae <__sfp+0x46>
 800da92:	3468      	adds	r4, #104	; 0x68
 800da94:	e7f4      	b.n	800da80 <__sfp+0x18>
 800da96:	2104      	movs	r1, #4
 800da98:	4638      	mov	r0, r7
 800da9a:	f7ff ff9f 	bl	800d9dc <__sfmoreglue>
 800da9e:	6030      	str	r0, [r6, #0]
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d1f1      	bne.n	800da88 <__sfp+0x20>
 800daa4:	230c      	movs	r3, #12
 800daa6:	603b      	str	r3, [r7, #0]
 800daa8:	4604      	mov	r4, r0
 800daaa:	4620      	mov	r0, r4
 800daac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daae:	4b0b      	ldr	r3, [pc, #44]	; (800dadc <__sfp+0x74>)
 800dab0:	6665      	str	r5, [r4, #100]	; 0x64
 800dab2:	e9c4 5500 	strd	r5, r5, [r4]
 800dab6:	60a5      	str	r5, [r4, #8]
 800dab8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dabc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800dac0:	2208      	movs	r2, #8
 800dac2:	4629      	mov	r1, r5
 800dac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dac8:	f7fe fa1a 	bl	800bf00 <memset>
 800dacc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dad4:	e7e9      	b.n	800daaa <__sfp+0x42>
 800dad6:	bf00      	nop
 800dad8:	0800eb14 	.word	0x0800eb14
 800dadc:	ffff0001 	.word	0xffff0001

0800dae0 <_fwalk_reent>:
 800dae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae4:	4680      	mov	r8, r0
 800dae6:	4689      	mov	r9, r1
 800dae8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800daec:	2600      	movs	r6, #0
 800daee:	b914      	cbnz	r4, 800daf6 <_fwalk_reent+0x16>
 800daf0:	4630      	mov	r0, r6
 800daf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daf6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800dafa:	3f01      	subs	r7, #1
 800dafc:	d501      	bpl.n	800db02 <_fwalk_reent+0x22>
 800dafe:	6824      	ldr	r4, [r4, #0]
 800db00:	e7f5      	b.n	800daee <_fwalk_reent+0xe>
 800db02:	89ab      	ldrh	r3, [r5, #12]
 800db04:	2b01      	cmp	r3, #1
 800db06:	d907      	bls.n	800db18 <_fwalk_reent+0x38>
 800db08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db0c:	3301      	adds	r3, #1
 800db0e:	d003      	beq.n	800db18 <_fwalk_reent+0x38>
 800db10:	4629      	mov	r1, r5
 800db12:	4640      	mov	r0, r8
 800db14:	47c8      	blx	r9
 800db16:	4306      	orrs	r6, r0
 800db18:	3568      	adds	r5, #104	; 0x68
 800db1a:	e7ee      	b.n	800dafa <_fwalk_reent+0x1a>

0800db1c <_localeconv_r>:
 800db1c:	4b04      	ldr	r3, [pc, #16]	; (800db30 <_localeconv_r+0x14>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6a18      	ldr	r0, [r3, #32]
 800db22:	4b04      	ldr	r3, [pc, #16]	; (800db34 <_localeconv_r+0x18>)
 800db24:	2800      	cmp	r0, #0
 800db26:	bf08      	it	eq
 800db28:	4618      	moveq	r0, r3
 800db2a:	30f0      	adds	r0, #240	; 0xf0
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	20001514 	.word	0x20001514
 800db34:	20001578 	.word	0x20001578

0800db38 <__swhatbuf_r>:
 800db38:	b570      	push	{r4, r5, r6, lr}
 800db3a:	460e      	mov	r6, r1
 800db3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db40:	2900      	cmp	r1, #0
 800db42:	b096      	sub	sp, #88	; 0x58
 800db44:	4614      	mov	r4, r2
 800db46:	461d      	mov	r5, r3
 800db48:	da07      	bge.n	800db5a <__swhatbuf_r+0x22>
 800db4a:	2300      	movs	r3, #0
 800db4c:	602b      	str	r3, [r5, #0]
 800db4e:	89b3      	ldrh	r3, [r6, #12]
 800db50:	061a      	lsls	r2, r3, #24
 800db52:	d410      	bmi.n	800db76 <__swhatbuf_r+0x3e>
 800db54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db58:	e00e      	b.n	800db78 <__swhatbuf_r+0x40>
 800db5a:	466a      	mov	r2, sp
 800db5c:	f000 fda0 	bl	800e6a0 <_fstat_r>
 800db60:	2800      	cmp	r0, #0
 800db62:	dbf2      	blt.n	800db4a <__swhatbuf_r+0x12>
 800db64:	9a01      	ldr	r2, [sp, #4]
 800db66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db6e:	425a      	negs	r2, r3
 800db70:	415a      	adcs	r2, r3
 800db72:	602a      	str	r2, [r5, #0]
 800db74:	e7ee      	b.n	800db54 <__swhatbuf_r+0x1c>
 800db76:	2340      	movs	r3, #64	; 0x40
 800db78:	2000      	movs	r0, #0
 800db7a:	6023      	str	r3, [r4, #0]
 800db7c:	b016      	add	sp, #88	; 0x58
 800db7e:	bd70      	pop	{r4, r5, r6, pc}

0800db80 <__smakebuf_r>:
 800db80:	898b      	ldrh	r3, [r1, #12]
 800db82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db84:	079d      	lsls	r5, r3, #30
 800db86:	4606      	mov	r6, r0
 800db88:	460c      	mov	r4, r1
 800db8a:	d507      	bpl.n	800db9c <__smakebuf_r+0x1c>
 800db8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	6123      	str	r3, [r4, #16]
 800db94:	2301      	movs	r3, #1
 800db96:	6163      	str	r3, [r4, #20]
 800db98:	b002      	add	sp, #8
 800db9a:	bd70      	pop	{r4, r5, r6, pc}
 800db9c:	ab01      	add	r3, sp, #4
 800db9e:	466a      	mov	r2, sp
 800dba0:	f7ff ffca 	bl	800db38 <__swhatbuf_r>
 800dba4:	9900      	ldr	r1, [sp, #0]
 800dba6:	4605      	mov	r5, r0
 800dba8:	4630      	mov	r0, r6
 800dbaa:	f000 fb69 	bl	800e280 <_malloc_r>
 800dbae:	b948      	cbnz	r0, 800dbc4 <__smakebuf_r+0x44>
 800dbb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbb4:	059a      	lsls	r2, r3, #22
 800dbb6:	d4ef      	bmi.n	800db98 <__smakebuf_r+0x18>
 800dbb8:	f023 0303 	bic.w	r3, r3, #3
 800dbbc:	f043 0302 	orr.w	r3, r3, #2
 800dbc0:	81a3      	strh	r3, [r4, #12]
 800dbc2:	e7e3      	b.n	800db8c <__smakebuf_r+0xc>
 800dbc4:	4b0d      	ldr	r3, [pc, #52]	; (800dbfc <__smakebuf_r+0x7c>)
 800dbc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800dbc8:	89a3      	ldrh	r3, [r4, #12]
 800dbca:	6020      	str	r0, [r4, #0]
 800dbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbd0:	81a3      	strh	r3, [r4, #12]
 800dbd2:	9b00      	ldr	r3, [sp, #0]
 800dbd4:	6163      	str	r3, [r4, #20]
 800dbd6:	9b01      	ldr	r3, [sp, #4]
 800dbd8:	6120      	str	r0, [r4, #16]
 800dbda:	b15b      	cbz	r3, 800dbf4 <__smakebuf_r+0x74>
 800dbdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	f000 fd6f 	bl	800e6c4 <_isatty_r>
 800dbe6:	b128      	cbz	r0, 800dbf4 <__smakebuf_r+0x74>
 800dbe8:	89a3      	ldrh	r3, [r4, #12]
 800dbea:	f023 0303 	bic.w	r3, r3, #3
 800dbee:	f043 0301 	orr.w	r3, r3, #1
 800dbf2:	81a3      	strh	r3, [r4, #12]
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	431d      	orrs	r5, r3
 800dbf8:	81a5      	strh	r5, [r4, #12]
 800dbfa:	e7cd      	b.n	800db98 <__smakebuf_r+0x18>
 800dbfc:	0800d9d1 	.word	0x0800d9d1

0800dc00 <malloc>:
 800dc00:	4b02      	ldr	r3, [pc, #8]	; (800dc0c <malloc+0xc>)
 800dc02:	4601      	mov	r1, r0
 800dc04:	6818      	ldr	r0, [r3, #0]
 800dc06:	f000 bb3b 	b.w	800e280 <_malloc_r>
 800dc0a:	bf00      	nop
 800dc0c:	20001514 	.word	0x20001514

0800dc10 <_Balloc>:
 800dc10:	b570      	push	{r4, r5, r6, lr}
 800dc12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc14:	4604      	mov	r4, r0
 800dc16:	460e      	mov	r6, r1
 800dc18:	b93d      	cbnz	r5, 800dc2a <_Balloc+0x1a>
 800dc1a:	2010      	movs	r0, #16
 800dc1c:	f7ff fff0 	bl	800dc00 <malloc>
 800dc20:	6260      	str	r0, [r4, #36]	; 0x24
 800dc22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc26:	6005      	str	r5, [r0, #0]
 800dc28:	60c5      	str	r5, [r0, #12]
 800dc2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dc2c:	68eb      	ldr	r3, [r5, #12]
 800dc2e:	b183      	cbz	r3, 800dc52 <_Balloc+0x42>
 800dc30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dc38:	b9b8      	cbnz	r0, 800dc6a <_Balloc+0x5a>
 800dc3a:	2101      	movs	r1, #1
 800dc3c:	fa01 f506 	lsl.w	r5, r1, r6
 800dc40:	1d6a      	adds	r2, r5, #5
 800dc42:	0092      	lsls	r2, r2, #2
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 fabf 	bl	800e1c8 <_calloc_r>
 800dc4a:	b160      	cbz	r0, 800dc66 <_Balloc+0x56>
 800dc4c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dc50:	e00e      	b.n	800dc70 <_Balloc+0x60>
 800dc52:	2221      	movs	r2, #33	; 0x21
 800dc54:	2104      	movs	r1, #4
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 fab6 	bl	800e1c8 <_calloc_r>
 800dc5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc5e:	60e8      	str	r0, [r5, #12]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d1e4      	bne.n	800dc30 <_Balloc+0x20>
 800dc66:	2000      	movs	r0, #0
 800dc68:	bd70      	pop	{r4, r5, r6, pc}
 800dc6a:	6802      	ldr	r2, [r0, #0]
 800dc6c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dc70:	2300      	movs	r3, #0
 800dc72:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc76:	e7f7      	b.n	800dc68 <_Balloc+0x58>

0800dc78 <_Bfree>:
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	460d      	mov	r5, r1
 800dc80:	b93c      	cbnz	r4, 800dc92 <_Bfree+0x1a>
 800dc82:	2010      	movs	r0, #16
 800dc84:	f7ff ffbc 	bl	800dc00 <malloc>
 800dc88:	6270      	str	r0, [r6, #36]	; 0x24
 800dc8a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc8e:	6004      	str	r4, [r0, #0]
 800dc90:	60c4      	str	r4, [r0, #12]
 800dc92:	b13d      	cbz	r5, 800dca4 <_Bfree+0x2c>
 800dc94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dc96:	686a      	ldr	r2, [r5, #4]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc9e:	6029      	str	r1, [r5, #0]
 800dca0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800dca4:	bd70      	pop	{r4, r5, r6, pc}

0800dca6 <__multadd>:
 800dca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcaa:	690d      	ldr	r5, [r1, #16]
 800dcac:	461f      	mov	r7, r3
 800dcae:	4606      	mov	r6, r0
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	f101 0c14 	add.w	ip, r1, #20
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	f8dc 0000 	ldr.w	r0, [ip]
 800dcbc:	b281      	uxth	r1, r0
 800dcbe:	fb02 7101 	mla	r1, r2, r1, r7
 800dcc2:	0c0f      	lsrs	r7, r1, #16
 800dcc4:	0c00      	lsrs	r0, r0, #16
 800dcc6:	fb02 7000 	mla	r0, r2, r0, r7
 800dcca:	b289      	uxth	r1, r1
 800dccc:	3301      	adds	r3, #1
 800dcce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800dcd2:	429d      	cmp	r5, r3
 800dcd4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800dcd8:	f84c 1b04 	str.w	r1, [ip], #4
 800dcdc:	dcec      	bgt.n	800dcb8 <__multadd+0x12>
 800dcde:	b1d7      	cbz	r7, 800dd16 <__multadd+0x70>
 800dce0:	68a3      	ldr	r3, [r4, #8]
 800dce2:	42ab      	cmp	r3, r5
 800dce4:	dc12      	bgt.n	800dd0c <__multadd+0x66>
 800dce6:	6861      	ldr	r1, [r4, #4]
 800dce8:	4630      	mov	r0, r6
 800dcea:	3101      	adds	r1, #1
 800dcec:	f7ff ff90 	bl	800dc10 <_Balloc>
 800dcf0:	6922      	ldr	r2, [r4, #16]
 800dcf2:	3202      	adds	r2, #2
 800dcf4:	f104 010c 	add.w	r1, r4, #12
 800dcf8:	4680      	mov	r8, r0
 800dcfa:	0092      	lsls	r2, r2, #2
 800dcfc:	300c      	adds	r0, #12
 800dcfe:	f7fe f8db 	bl	800beb8 <memcpy>
 800dd02:	4621      	mov	r1, r4
 800dd04:	4630      	mov	r0, r6
 800dd06:	f7ff ffb7 	bl	800dc78 <_Bfree>
 800dd0a:	4644      	mov	r4, r8
 800dd0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd10:	3501      	adds	r5, #1
 800dd12:	615f      	str	r7, [r3, #20]
 800dd14:	6125      	str	r5, [r4, #16]
 800dd16:	4620      	mov	r0, r4
 800dd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd1c <__hi0bits>:
 800dd1c:	0c02      	lsrs	r2, r0, #16
 800dd1e:	0412      	lsls	r2, r2, #16
 800dd20:	4603      	mov	r3, r0
 800dd22:	b9b2      	cbnz	r2, 800dd52 <__hi0bits+0x36>
 800dd24:	0403      	lsls	r3, r0, #16
 800dd26:	2010      	movs	r0, #16
 800dd28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dd2c:	bf04      	itt	eq
 800dd2e:	021b      	lsleq	r3, r3, #8
 800dd30:	3008      	addeq	r0, #8
 800dd32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dd36:	bf04      	itt	eq
 800dd38:	011b      	lsleq	r3, r3, #4
 800dd3a:	3004      	addeq	r0, #4
 800dd3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dd40:	bf04      	itt	eq
 800dd42:	009b      	lsleq	r3, r3, #2
 800dd44:	3002      	addeq	r0, #2
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	db06      	blt.n	800dd58 <__hi0bits+0x3c>
 800dd4a:	005b      	lsls	r3, r3, #1
 800dd4c:	d503      	bpl.n	800dd56 <__hi0bits+0x3a>
 800dd4e:	3001      	adds	r0, #1
 800dd50:	4770      	bx	lr
 800dd52:	2000      	movs	r0, #0
 800dd54:	e7e8      	b.n	800dd28 <__hi0bits+0xc>
 800dd56:	2020      	movs	r0, #32
 800dd58:	4770      	bx	lr

0800dd5a <__lo0bits>:
 800dd5a:	6803      	ldr	r3, [r0, #0]
 800dd5c:	f013 0207 	ands.w	r2, r3, #7
 800dd60:	4601      	mov	r1, r0
 800dd62:	d00b      	beq.n	800dd7c <__lo0bits+0x22>
 800dd64:	07da      	lsls	r2, r3, #31
 800dd66:	d423      	bmi.n	800ddb0 <__lo0bits+0x56>
 800dd68:	0798      	lsls	r0, r3, #30
 800dd6a:	bf49      	itett	mi
 800dd6c:	085b      	lsrmi	r3, r3, #1
 800dd6e:	089b      	lsrpl	r3, r3, #2
 800dd70:	2001      	movmi	r0, #1
 800dd72:	600b      	strmi	r3, [r1, #0]
 800dd74:	bf5c      	itt	pl
 800dd76:	600b      	strpl	r3, [r1, #0]
 800dd78:	2002      	movpl	r0, #2
 800dd7a:	4770      	bx	lr
 800dd7c:	b298      	uxth	r0, r3
 800dd7e:	b9a8      	cbnz	r0, 800ddac <__lo0bits+0x52>
 800dd80:	0c1b      	lsrs	r3, r3, #16
 800dd82:	2010      	movs	r0, #16
 800dd84:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dd88:	bf04      	itt	eq
 800dd8a:	0a1b      	lsreq	r3, r3, #8
 800dd8c:	3008      	addeq	r0, #8
 800dd8e:	071a      	lsls	r2, r3, #28
 800dd90:	bf04      	itt	eq
 800dd92:	091b      	lsreq	r3, r3, #4
 800dd94:	3004      	addeq	r0, #4
 800dd96:	079a      	lsls	r2, r3, #30
 800dd98:	bf04      	itt	eq
 800dd9a:	089b      	lsreq	r3, r3, #2
 800dd9c:	3002      	addeq	r0, #2
 800dd9e:	07da      	lsls	r2, r3, #31
 800dda0:	d402      	bmi.n	800dda8 <__lo0bits+0x4e>
 800dda2:	085b      	lsrs	r3, r3, #1
 800dda4:	d006      	beq.n	800ddb4 <__lo0bits+0x5a>
 800dda6:	3001      	adds	r0, #1
 800dda8:	600b      	str	r3, [r1, #0]
 800ddaa:	4770      	bx	lr
 800ddac:	4610      	mov	r0, r2
 800ddae:	e7e9      	b.n	800dd84 <__lo0bits+0x2a>
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	4770      	bx	lr
 800ddb4:	2020      	movs	r0, #32
 800ddb6:	4770      	bx	lr

0800ddb8 <__i2b>:
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	460c      	mov	r4, r1
 800ddbc:	2101      	movs	r1, #1
 800ddbe:	f7ff ff27 	bl	800dc10 <_Balloc>
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	6144      	str	r4, [r0, #20]
 800ddc6:	6102      	str	r2, [r0, #16]
 800ddc8:	bd10      	pop	{r4, pc}

0800ddca <__multiply>:
 800ddca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddce:	4614      	mov	r4, r2
 800ddd0:	690a      	ldr	r2, [r1, #16]
 800ddd2:	6923      	ldr	r3, [r4, #16]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	bfb8      	it	lt
 800ddd8:	460b      	movlt	r3, r1
 800ddda:	4688      	mov	r8, r1
 800dddc:	bfbc      	itt	lt
 800ddde:	46a0      	movlt	r8, r4
 800dde0:	461c      	movlt	r4, r3
 800dde2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dde6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ddea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ddf2:	eb07 0609 	add.w	r6, r7, r9
 800ddf6:	42b3      	cmp	r3, r6
 800ddf8:	bfb8      	it	lt
 800ddfa:	3101      	addlt	r1, #1
 800ddfc:	f7ff ff08 	bl	800dc10 <_Balloc>
 800de00:	f100 0514 	add.w	r5, r0, #20
 800de04:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800de08:	462b      	mov	r3, r5
 800de0a:	2200      	movs	r2, #0
 800de0c:	4573      	cmp	r3, lr
 800de0e:	d316      	bcc.n	800de3e <__multiply+0x74>
 800de10:	f104 0214 	add.w	r2, r4, #20
 800de14:	f108 0114 	add.w	r1, r8, #20
 800de18:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800de1c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	9b00      	ldr	r3, [sp, #0]
 800de24:	9201      	str	r2, [sp, #4]
 800de26:	4293      	cmp	r3, r2
 800de28:	d80c      	bhi.n	800de44 <__multiply+0x7a>
 800de2a:	2e00      	cmp	r6, #0
 800de2c:	dd03      	ble.n	800de36 <__multiply+0x6c>
 800de2e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800de32:	2b00      	cmp	r3, #0
 800de34:	d05d      	beq.n	800def2 <__multiply+0x128>
 800de36:	6106      	str	r6, [r0, #16]
 800de38:	b003      	add	sp, #12
 800de3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de3e:	f843 2b04 	str.w	r2, [r3], #4
 800de42:	e7e3      	b.n	800de0c <__multiply+0x42>
 800de44:	f8b2 b000 	ldrh.w	fp, [r2]
 800de48:	f1bb 0f00 	cmp.w	fp, #0
 800de4c:	d023      	beq.n	800de96 <__multiply+0xcc>
 800de4e:	4689      	mov	r9, r1
 800de50:	46ac      	mov	ip, r5
 800de52:	f04f 0800 	mov.w	r8, #0
 800de56:	f859 4b04 	ldr.w	r4, [r9], #4
 800de5a:	f8dc a000 	ldr.w	sl, [ip]
 800de5e:	b2a3      	uxth	r3, r4
 800de60:	fa1f fa8a 	uxth.w	sl, sl
 800de64:	fb0b a303 	mla	r3, fp, r3, sl
 800de68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800de6c:	f8dc 4000 	ldr.w	r4, [ip]
 800de70:	4443      	add	r3, r8
 800de72:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800de76:	fb0b 840a 	mla	r4, fp, sl, r8
 800de7a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800de7e:	46e2      	mov	sl, ip
 800de80:	b29b      	uxth	r3, r3
 800de82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800de86:	454f      	cmp	r7, r9
 800de88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800de8c:	f84a 3b04 	str.w	r3, [sl], #4
 800de90:	d82b      	bhi.n	800deea <__multiply+0x120>
 800de92:	f8cc 8004 	str.w	r8, [ip, #4]
 800de96:	9b01      	ldr	r3, [sp, #4]
 800de98:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800de9c:	3204      	adds	r2, #4
 800de9e:	f1ba 0f00 	cmp.w	sl, #0
 800dea2:	d020      	beq.n	800dee6 <__multiply+0x11c>
 800dea4:	682b      	ldr	r3, [r5, #0]
 800dea6:	4689      	mov	r9, r1
 800dea8:	46a8      	mov	r8, r5
 800deaa:	f04f 0b00 	mov.w	fp, #0
 800deae:	f8b9 c000 	ldrh.w	ip, [r9]
 800deb2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800deb6:	fb0a 440c 	mla	r4, sl, ip, r4
 800deba:	445c      	add	r4, fp
 800debc:	46c4      	mov	ip, r8
 800debe:	b29b      	uxth	r3, r3
 800dec0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dec4:	f84c 3b04 	str.w	r3, [ip], #4
 800dec8:	f859 3b04 	ldr.w	r3, [r9], #4
 800decc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ded0:	0c1b      	lsrs	r3, r3, #16
 800ded2:	fb0a b303 	mla	r3, sl, r3, fp
 800ded6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800deda:	454f      	cmp	r7, r9
 800dedc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dee0:	d805      	bhi.n	800deee <__multiply+0x124>
 800dee2:	f8c8 3004 	str.w	r3, [r8, #4]
 800dee6:	3504      	adds	r5, #4
 800dee8:	e79b      	b.n	800de22 <__multiply+0x58>
 800deea:	46d4      	mov	ip, sl
 800deec:	e7b3      	b.n	800de56 <__multiply+0x8c>
 800deee:	46e0      	mov	r8, ip
 800def0:	e7dd      	b.n	800deae <__multiply+0xe4>
 800def2:	3e01      	subs	r6, #1
 800def4:	e799      	b.n	800de2a <__multiply+0x60>
	...

0800def8 <__pow5mult>:
 800def8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800defc:	4615      	mov	r5, r2
 800defe:	f012 0203 	ands.w	r2, r2, #3
 800df02:	4606      	mov	r6, r0
 800df04:	460f      	mov	r7, r1
 800df06:	d007      	beq.n	800df18 <__pow5mult+0x20>
 800df08:	3a01      	subs	r2, #1
 800df0a:	4c21      	ldr	r4, [pc, #132]	; (800df90 <__pow5mult+0x98>)
 800df0c:	2300      	movs	r3, #0
 800df0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df12:	f7ff fec8 	bl	800dca6 <__multadd>
 800df16:	4607      	mov	r7, r0
 800df18:	10ad      	asrs	r5, r5, #2
 800df1a:	d035      	beq.n	800df88 <__pow5mult+0x90>
 800df1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800df1e:	b93c      	cbnz	r4, 800df30 <__pow5mult+0x38>
 800df20:	2010      	movs	r0, #16
 800df22:	f7ff fe6d 	bl	800dc00 <malloc>
 800df26:	6270      	str	r0, [r6, #36]	; 0x24
 800df28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df2c:	6004      	str	r4, [r0, #0]
 800df2e:	60c4      	str	r4, [r0, #12]
 800df30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800df34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df38:	b94c      	cbnz	r4, 800df4e <__pow5mult+0x56>
 800df3a:	f240 2171 	movw	r1, #625	; 0x271
 800df3e:	4630      	mov	r0, r6
 800df40:	f7ff ff3a 	bl	800ddb8 <__i2b>
 800df44:	2300      	movs	r3, #0
 800df46:	f8c8 0008 	str.w	r0, [r8, #8]
 800df4a:	4604      	mov	r4, r0
 800df4c:	6003      	str	r3, [r0, #0]
 800df4e:	f04f 0800 	mov.w	r8, #0
 800df52:	07eb      	lsls	r3, r5, #31
 800df54:	d50a      	bpl.n	800df6c <__pow5mult+0x74>
 800df56:	4639      	mov	r1, r7
 800df58:	4622      	mov	r2, r4
 800df5a:	4630      	mov	r0, r6
 800df5c:	f7ff ff35 	bl	800ddca <__multiply>
 800df60:	4639      	mov	r1, r7
 800df62:	4681      	mov	r9, r0
 800df64:	4630      	mov	r0, r6
 800df66:	f7ff fe87 	bl	800dc78 <_Bfree>
 800df6a:	464f      	mov	r7, r9
 800df6c:	106d      	asrs	r5, r5, #1
 800df6e:	d00b      	beq.n	800df88 <__pow5mult+0x90>
 800df70:	6820      	ldr	r0, [r4, #0]
 800df72:	b938      	cbnz	r0, 800df84 <__pow5mult+0x8c>
 800df74:	4622      	mov	r2, r4
 800df76:	4621      	mov	r1, r4
 800df78:	4630      	mov	r0, r6
 800df7a:	f7ff ff26 	bl	800ddca <__multiply>
 800df7e:	6020      	str	r0, [r4, #0]
 800df80:	f8c0 8000 	str.w	r8, [r0]
 800df84:	4604      	mov	r4, r0
 800df86:	e7e4      	b.n	800df52 <__pow5mult+0x5a>
 800df88:	4638      	mov	r0, r7
 800df8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df8e:	bf00      	nop
 800df90:	0800eca8 	.word	0x0800eca8

0800df94 <__lshift>:
 800df94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df98:	460c      	mov	r4, r1
 800df9a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df9e:	6923      	ldr	r3, [r4, #16]
 800dfa0:	6849      	ldr	r1, [r1, #4]
 800dfa2:	eb0a 0903 	add.w	r9, sl, r3
 800dfa6:	68a3      	ldr	r3, [r4, #8]
 800dfa8:	4607      	mov	r7, r0
 800dfaa:	4616      	mov	r6, r2
 800dfac:	f109 0501 	add.w	r5, r9, #1
 800dfb0:	42ab      	cmp	r3, r5
 800dfb2:	db32      	blt.n	800e01a <__lshift+0x86>
 800dfb4:	4638      	mov	r0, r7
 800dfb6:	f7ff fe2b 	bl	800dc10 <_Balloc>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	4680      	mov	r8, r0
 800dfbe:	f100 0114 	add.w	r1, r0, #20
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	4553      	cmp	r3, sl
 800dfc6:	db2b      	blt.n	800e020 <__lshift+0x8c>
 800dfc8:	6920      	ldr	r0, [r4, #16]
 800dfca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dfce:	f104 0314 	add.w	r3, r4, #20
 800dfd2:	f016 021f 	ands.w	r2, r6, #31
 800dfd6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dfda:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dfde:	d025      	beq.n	800e02c <__lshift+0x98>
 800dfe0:	f1c2 0e20 	rsb	lr, r2, #32
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	681e      	ldr	r6, [r3, #0]
 800dfe8:	468a      	mov	sl, r1
 800dfea:	4096      	lsls	r6, r2
 800dfec:	4330      	orrs	r0, r6
 800dfee:	f84a 0b04 	str.w	r0, [sl], #4
 800dff2:	f853 0b04 	ldr.w	r0, [r3], #4
 800dff6:	459c      	cmp	ip, r3
 800dff8:	fa20 f00e 	lsr.w	r0, r0, lr
 800dffc:	d814      	bhi.n	800e028 <__lshift+0x94>
 800dffe:	6048      	str	r0, [r1, #4]
 800e000:	b108      	cbz	r0, 800e006 <__lshift+0x72>
 800e002:	f109 0502 	add.w	r5, r9, #2
 800e006:	3d01      	subs	r5, #1
 800e008:	4638      	mov	r0, r7
 800e00a:	f8c8 5010 	str.w	r5, [r8, #16]
 800e00e:	4621      	mov	r1, r4
 800e010:	f7ff fe32 	bl	800dc78 <_Bfree>
 800e014:	4640      	mov	r0, r8
 800e016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e01a:	3101      	adds	r1, #1
 800e01c:	005b      	lsls	r3, r3, #1
 800e01e:	e7c7      	b.n	800dfb0 <__lshift+0x1c>
 800e020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e024:	3301      	adds	r3, #1
 800e026:	e7cd      	b.n	800dfc4 <__lshift+0x30>
 800e028:	4651      	mov	r1, sl
 800e02a:	e7dc      	b.n	800dfe6 <__lshift+0x52>
 800e02c:	3904      	subs	r1, #4
 800e02e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e032:	f841 2f04 	str.w	r2, [r1, #4]!
 800e036:	459c      	cmp	ip, r3
 800e038:	d8f9      	bhi.n	800e02e <__lshift+0x9a>
 800e03a:	e7e4      	b.n	800e006 <__lshift+0x72>

0800e03c <__mcmp>:
 800e03c:	6903      	ldr	r3, [r0, #16]
 800e03e:	690a      	ldr	r2, [r1, #16]
 800e040:	1a9b      	subs	r3, r3, r2
 800e042:	b530      	push	{r4, r5, lr}
 800e044:	d10c      	bne.n	800e060 <__mcmp+0x24>
 800e046:	0092      	lsls	r2, r2, #2
 800e048:	3014      	adds	r0, #20
 800e04a:	3114      	adds	r1, #20
 800e04c:	1884      	adds	r4, r0, r2
 800e04e:	4411      	add	r1, r2
 800e050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e058:	4295      	cmp	r5, r2
 800e05a:	d003      	beq.n	800e064 <__mcmp+0x28>
 800e05c:	d305      	bcc.n	800e06a <__mcmp+0x2e>
 800e05e:	2301      	movs	r3, #1
 800e060:	4618      	mov	r0, r3
 800e062:	bd30      	pop	{r4, r5, pc}
 800e064:	42a0      	cmp	r0, r4
 800e066:	d3f3      	bcc.n	800e050 <__mcmp+0x14>
 800e068:	e7fa      	b.n	800e060 <__mcmp+0x24>
 800e06a:	f04f 33ff 	mov.w	r3, #4294967295
 800e06e:	e7f7      	b.n	800e060 <__mcmp+0x24>

0800e070 <__mdiff>:
 800e070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e074:	460d      	mov	r5, r1
 800e076:	4607      	mov	r7, r0
 800e078:	4611      	mov	r1, r2
 800e07a:	4628      	mov	r0, r5
 800e07c:	4614      	mov	r4, r2
 800e07e:	f7ff ffdd 	bl	800e03c <__mcmp>
 800e082:	1e06      	subs	r6, r0, #0
 800e084:	d108      	bne.n	800e098 <__mdiff+0x28>
 800e086:	4631      	mov	r1, r6
 800e088:	4638      	mov	r0, r7
 800e08a:	f7ff fdc1 	bl	800dc10 <_Balloc>
 800e08e:	2301      	movs	r3, #1
 800e090:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e098:	bfa4      	itt	ge
 800e09a:	4623      	movge	r3, r4
 800e09c:	462c      	movge	r4, r5
 800e09e:	4638      	mov	r0, r7
 800e0a0:	6861      	ldr	r1, [r4, #4]
 800e0a2:	bfa6      	itte	ge
 800e0a4:	461d      	movge	r5, r3
 800e0a6:	2600      	movge	r6, #0
 800e0a8:	2601      	movlt	r6, #1
 800e0aa:	f7ff fdb1 	bl	800dc10 <_Balloc>
 800e0ae:	692b      	ldr	r3, [r5, #16]
 800e0b0:	60c6      	str	r6, [r0, #12]
 800e0b2:	6926      	ldr	r6, [r4, #16]
 800e0b4:	f105 0914 	add.w	r9, r5, #20
 800e0b8:	f104 0214 	add.w	r2, r4, #20
 800e0bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e0c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e0c4:	f100 0514 	add.w	r5, r0, #20
 800e0c8:	f04f 0e00 	mov.w	lr, #0
 800e0cc:	f852 ab04 	ldr.w	sl, [r2], #4
 800e0d0:	f859 4b04 	ldr.w	r4, [r9], #4
 800e0d4:	fa1e f18a 	uxtah	r1, lr, sl
 800e0d8:	b2a3      	uxth	r3, r4
 800e0da:	1ac9      	subs	r1, r1, r3
 800e0dc:	0c23      	lsrs	r3, r4, #16
 800e0de:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e0e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e0e6:	b289      	uxth	r1, r1
 800e0e8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e0ec:	45c8      	cmp	r8, r9
 800e0ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e0f2:	4694      	mov	ip, r2
 800e0f4:	f845 3b04 	str.w	r3, [r5], #4
 800e0f8:	d8e8      	bhi.n	800e0cc <__mdiff+0x5c>
 800e0fa:	45bc      	cmp	ip, r7
 800e0fc:	d304      	bcc.n	800e108 <__mdiff+0x98>
 800e0fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e102:	b183      	cbz	r3, 800e126 <__mdiff+0xb6>
 800e104:	6106      	str	r6, [r0, #16]
 800e106:	e7c5      	b.n	800e094 <__mdiff+0x24>
 800e108:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e10c:	fa1e f381 	uxtah	r3, lr, r1
 800e110:	141a      	asrs	r2, r3, #16
 800e112:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e116:	b29b      	uxth	r3, r3
 800e118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e11c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e120:	f845 3b04 	str.w	r3, [r5], #4
 800e124:	e7e9      	b.n	800e0fa <__mdiff+0x8a>
 800e126:	3e01      	subs	r6, #1
 800e128:	e7e9      	b.n	800e0fe <__mdiff+0x8e>

0800e12a <__d2b>:
 800e12a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e12e:	460e      	mov	r6, r1
 800e130:	2101      	movs	r1, #1
 800e132:	ec59 8b10 	vmov	r8, r9, d0
 800e136:	4615      	mov	r5, r2
 800e138:	f7ff fd6a 	bl	800dc10 <_Balloc>
 800e13c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e140:	4607      	mov	r7, r0
 800e142:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e146:	bb34      	cbnz	r4, 800e196 <__d2b+0x6c>
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	f1b8 0300 	subs.w	r3, r8, #0
 800e14e:	d027      	beq.n	800e1a0 <__d2b+0x76>
 800e150:	a802      	add	r0, sp, #8
 800e152:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e156:	f7ff fe00 	bl	800dd5a <__lo0bits>
 800e15a:	9900      	ldr	r1, [sp, #0]
 800e15c:	b1f0      	cbz	r0, 800e19c <__d2b+0x72>
 800e15e:	9a01      	ldr	r2, [sp, #4]
 800e160:	f1c0 0320 	rsb	r3, r0, #32
 800e164:	fa02 f303 	lsl.w	r3, r2, r3
 800e168:	430b      	orrs	r3, r1
 800e16a:	40c2      	lsrs	r2, r0
 800e16c:	617b      	str	r3, [r7, #20]
 800e16e:	9201      	str	r2, [sp, #4]
 800e170:	9b01      	ldr	r3, [sp, #4]
 800e172:	61bb      	str	r3, [r7, #24]
 800e174:	2b00      	cmp	r3, #0
 800e176:	bf14      	ite	ne
 800e178:	2102      	movne	r1, #2
 800e17a:	2101      	moveq	r1, #1
 800e17c:	6139      	str	r1, [r7, #16]
 800e17e:	b1c4      	cbz	r4, 800e1b2 <__d2b+0x88>
 800e180:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e184:	4404      	add	r4, r0
 800e186:	6034      	str	r4, [r6, #0]
 800e188:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e18c:	6028      	str	r0, [r5, #0]
 800e18e:	4638      	mov	r0, r7
 800e190:	b003      	add	sp, #12
 800e192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e19a:	e7d5      	b.n	800e148 <__d2b+0x1e>
 800e19c:	6179      	str	r1, [r7, #20]
 800e19e:	e7e7      	b.n	800e170 <__d2b+0x46>
 800e1a0:	a801      	add	r0, sp, #4
 800e1a2:	f7ff fdda 	bl	800dd5a <__lo0bits>
 800e1a6:	9b01      	ldr	r3, [sp, #4]
 800e1a8:	617b      	str	r3, [r7, #20]
 800e1aa:	2101      	movs	r1, #1
 800e1ac:	6139      	str	r1, [r7, #16]
 800e1ae:	3020      	adds	r0, #32
 800e1b0:	e7e5      	b.n	800e17e <__d2b+0x54>
 800e1b2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e1b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e1ba:	6030      	str	r0, [r6, #0]
 800e1bc:	6918      	ldr	r0, [r3, #16]
 800e1be:	f7ff fdad 	bl	800dd1c <__hi0bits>
 800e1c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e1c6:	e7e1      	b.n	800e18c <__d2b+0x62>

0800e1c8 <_calloc_r>:
 800e1c8:	b538      	push	{r3, r4, r5, lr}
 800e1ca:	fb02 f401 	mul.w	r4, r2, r1
 800e1ce:	4621      	mov	r1, r4
 800e1d0:	f000 f856 	bl	800e280 <_malloc_r>
 800e1d4:	4605      	mov	r5, r0
 800e1d6:	b118      	cbz	r0, 800e1e0 <_calloc_r+0x18>
 800e1d8:	4622      	mov	r2, r4
 800e1da:	2100      	movs	r1, #0
 800e1dc:	f7fd fe90 	bl	800bf00 <memset>
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}

0800e1e4 <_free_r>:
 800e1e4:	b538      	push	{r3, r4, r5, lr}
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	2900      	cmp	r1, #0
 800e1ea:	d045      	beq.n	800e278 <_free_r+0x94>
 800e1ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1f0:	1f0c      	subs	r4, r1, #4
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	bfb8      	it	lt
 800e1f6:	18e4      	addlt	r4, r4, r3
 800e1f8:	f000 fa98 	bl	800e72c <__malloc_lock>
 800e1fc:	4a1f      	ldr	r2, [pc, #124]	; (800e27c <_free_r+0x98>)
 800e1fe:	6813      	ldr	r3, [r2, #0]
 800e200:	4610      	mov	r0, r2
 800e202:	b933      	cbnz	r3, 800e212 <_free_r+0x2e>
 800e204:	6063      	str	r3, [r4, #4]
 800e206:	6014      	str	r4, [r2, #0]
 800e208:	4628      	mov	r0, r5
 800e20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e20e:	f000 ba8e 	b.w	800e72e <__malloc_unlock>
 800e212:	42a3      	cmp	r3, r4
 800e214:	d90c      	bls.n	800e230 <_free_r+0x4c>
 800e216:	6821      	ldr	r1, [r4, #0]
 800e218:	1862      	adds	r2, r4, r1
 800e21a:	4293      	cmp	r3, r2
 800e21c:	bf04      	itt	eq
 800e21e:	681a      	ldreq	r2, [r3, #0]
 800e220:	685b      	ldreq	r3, [r3, #4]
 800e222:	6063      	str	r3, [r4, #4]
 800e224:	bf04      	itt	eq
 800e226:	1852      	addeq	r2, r2, r1
 800e228:	6022      	streq	r2, [r4, #0]
 800e22a:	6004      	str	r4, [r0, #0]
 800e22c:	e7ec      	b.n	800e208 <_free_r+0x24>
 800e22e:	4613      	mov	r3, r2
 800e230:	685a      	ldr	r2, [r3, #4]
 800e232:	b10a      	cbz	r2, 800e238 <_free_r+0x54>
 800e234:	42a2      	cmp	r2, r4
 800e236:	d9fa      	bls.n	800e22e <_free_r+0x4a>
 800e238:	6819      	ldr	r1, [r3, #0]
 800e23a:	1858      	adds	r0, r3, r1
 800e23c:	42a0      	cmp	r0, r4
 800e23e:	d10b      	bne.n	800e258 <_free_r+0x74>
 800e240:	6820      	ldr	r0, [r4, #0]
 800e242:	4401      	add	r1, r0
 800e244:	1858      	adds	r0, r3, r1
 800e246:	4282      	cmp	r2, r0
 800e248:	6019      	str	r1, [r3, #0]
 800e24a:	d1dd      	bne.n	800e208 <_free_r+0x24>
 800e24c:	6810      	ldr	r0, [r2, #0]
 800e24e:	6852      	ldr	r2, [r2, #4]
 800e250:	605a      	str	r2, [r3, #4]
 800e252:	4401      	add	r1, r0
 800e254:	6019      	str	r1, [r3, #0]
 800e256:	e7d7      	b.n	800e208 <_free_r+0x24>
 800e258:	d902      	bls.n	800e260 <_free_r+0x7c>
 800e25a:	230c      	movs	r3, #12
 800e25c:	602b      	str	r3, [r5, #0]
 800e25e:	e7d3      	b.n	800e208 <_free_r+0x24>
 800e260:	6820      	ldr	r0, [r4, #0]
 800e262:	1821      	adds	r1, r4, r0
 800e264:	428a      	cmp	r2, r1
 800e266:	bf04      	itt	eq
 800e268:	6811      	ldreq	r1, [r2, #0]
 800e26a:	6852      	ldreq	r2, [r2, #4]
 800e26c:	6062      	str	r2, [r4, #4]
 800e26e:	bf04      	itt	eq
 800e270:	1809      	addeq	r1, r1, r0
 800e272:	6021      	streq	r1, [r4, #0]
 800e274:	605c      	str	r4, [r3, #4]
 800e276:	e7c7      	b.n	800e208 <_free_r+0x24>
 800e278:	bd38      	pop	{r3, r4, r5, pc}
 800e27a:	bf00      	nop
 800e27c:	200019c4 	.word	0x200019c4

0800e280 <_malloc_r>:
 800e280:	b570      	push	{r4, r5, r6, lr}
 800e282:	1ccd      	adds	r5, r1, #3
 800e284:	f025 0503 	bic.w	r5, r5, #3
 800e288:	3508      	adds	r5, #8
 800e28a:	2d0c      	cmp	r5, #12
 800e28c:	bf38      	it	cc
 800e28e:	250c      	movcc	r5, #12
 800e290:	2d00      	cmp	r5, #0
 800e292:	4606      	mov	r6, r0
 800e294:	db01      	blt.n	800e29a <_malloc_r+0x1a>
 800e296:	42a9      	cmp	r1, r5
 800e298:	d903      	bls.n	800e2a2 <_malloc_r+0x22>
 800e29a:	230c      	movs	r3, #12
 800e29c:	6033      	str	r3, [r6, #0]
 800e29e:	2000      	movs	r0, #0
 800e2a0:	bd70      	pop	{r4, r5, r6, pc}
 800e2a2:	f000 fa43 	bl	800e72c <__malloc_lock>
 800e2a6:	4a21      	ldr	r2, [pc, #132]	; (800e32c <_malloc_r+0xac>)
 800e2a8:	6814      	ldr	r4, [r2, #0]
 800e2aa:	4621      	mov	r1, r4
 800e2ac:	b991      	cbnz	r1, 800e2d4 <_malloc_r+0x54>
 800e2ae:	4c20      	ldr	r4, [pc, #128]	; (800e330 <_malloc_r+0xb0>)
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	b91b      	cbnz	r3, 800e2bc <_malloc_r+0x3c>
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f000 f97d 	bl	800e5b4 <_sbrk_r>
 800e2ba:	6020      	str	r0, [r4, #0]
 800e2bc:	4629      	mov	r1, r5
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f000 f978 	bl	800e5b4 <_sbrk_r>
 800e2c4:	1c43      	adds	r3, r0, #1
 800e2c6:	d124      	bne.n	800e312 <_malloc_r+0x92>
 800e2c8:	230c      	movs	r3, #12
 800e2ca:	6033      	str	r3, [r6, #0]
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f000 fa2e 	bl	800e72e <__malloc_unlock>
 800e2d2:	e7e4      	b.n	800e29e <_malloc_r+0x1e>
 800e2d4:	680b      	ldr	r3, [r1, #0]
 800e2d6:	1b5b      	subs	r3, r3, r5
 800e2d8:	d418      	bmi.n	800e30c <_malloc_r+0x8c>
 800e2da:	2b0b      	cmp	r3, #11
 800e2dc:	d90f      	bls.n	800e2fe <_malloc_r+0x7e>
 800e2de:	600b      	str	r3, [r1, #0]
 800e2e0:	50cd      	str	r5, [r1, r3]
 800e2e2:	18cc      	adds	r4, r1, r3
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	f000 fa22 	bl	800e72e <__malloc_unlock>
 800e2ea:	f104 000b 	add.w	r0, r4, #11
 800e2ee:	1d23      	adds	r3, r4, #4
 800e2f0:	f020 0007 	bic.w	r0, r0, #7
 800e2f4:	1ac3      	subs	r3, r0, r3
 800e2f6:	d0d3      	beq.n	800e2a0 <_malloc_r+0x20>
 800e2f8:	425a      	negs	r2, r3
 800e2fa:	50e2      	str	r2, [r4, r3]
 800e2fc:	e7d0      	b.n	800e2a0 <_malloc_r+0x20>
 800e2fe:	428c      	cmp	r4, r1
 800e300:	684b      	ldr	r3, [r1, #4]
 800e302:	bf16      	itet	ne
 800e304:	6063      	strne	r3, [r4, #4]
 800e306:	6013      	streq	r3, [r2, #0]
 800e308:	460c      	movne	r4, r1
 800e30a:	e7eb      	b.n	800e2e4 <_malloc_r+0x64>
 800e30c:	460c      	mov	r4, r1
 800e30e:	6849      	ldr	r1, [r1, #4]
 800e310:	e7cc      	b.n	800e2ac <_malloc_r+0x2c>
 800e312:	1cc4      	adds	r4, r0, #3
 800e314:	f024 0403 	bic.w	r4, r4, #3
 800e318:	42a0      	cmp	r0, r4
 800e31a:	d005      	beq.n	800e328 <_malloc_r+0xa8>
 800e31c:	1a21      	subs	r1, r4, r0
 800e31e:	4630      	mov	r0, r6
 800e320:	f000 f948 	bl	800e5b4 <_sbrk_r>
 800e324:	3001      	adds	r0, #1
 800e326:	d0cf      	beq.n	800e2c8 <_malloc_r+0x48>
 800e328:	6025      	str	r5, [r4, #0]
 800e32a:	e7db      	b.n	800e2e4 <_malloc_r+0x64>
 800e32c:	200019c4 	.word	0x200019c4
 800e330:	200019c8 	.word	0x200019c8

0800e334 <__sfputc_r>:
 800e334:	6893      	ldr	r3, [r2, #8]
 800e336:	3b01      	subs	r3, #1
 800e338:	2b00      	cmp	r3, #0
 800e33a:	b410      	push	{r4}
 800e33c:	6093      	str	r3, [r2, #8]
 800e33e:	da08      	bge.n	800e352 <__sfputc_r+0x1e>
 800e340:	6994      	ldr	r4, [r2, #24]
 800e342:	42a3      	cmp	r3, r4
 800e344:	db01      	blt.n	800e34a <__sfputc_r+0x16>
 800e346:	290a      	cmp	r1, #10
 800e348:	d103      	bne.n	800e352 <__sfputc_r+0x1e>
 800e34a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e34e:	f7fe bb65 	b.w	800ca1c <__swbuf_r>
 800e352:	6813      	ldr	r3, [r2, #0]
 800e354:	1c58      	adds	r0, r3, #1
 800e356:	6010      	str	r0, [r2, #0]
 800e358:	7019      	strb	r1, [r3, #0]
 800e35a:	4608      	mov	r0, r1
 800e35c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e360:	4770      	bx	lr

0800e362 <__sfputs_r>:
 800e362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e364:	4606      	mov	r6, r0
 800e366:	460f      	mov	r7, r1
 800e368:	4614      	mov	r4, r2
 800e36a:	18d5      	adds	r5, r2, r3
 800e36c:	42ac      	cmp	r4, r5
 800e36e:	d101      	bne.n	800e374 <__sfputs_r+0x12>
 800e370:	2000      	movs	r0, #0
 800e372:	e007      	b.n	800e384 <__sfputs_r+0x22>
 800e374:	463a      	mov	r2, r7
 800e376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e37a:	4630      	mov	r0, r6
 800e37c:	f7ff ffda 	bl	800e334 <__sfputc_r>
 800e380:	1c43      	adds	r3, r0, #1
 800e382:	d1f3      	bne.n	800e36c <__sfputs_r+0xa>
 800e384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e388 <_vfiprintf_r>:
 800e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	460c      	mov	r4, r1
 800e38e:	b09d      	sub	sp, #116	; 0x74
 800e390:	4617      	mov	r7, r2
 800e392:	461d      	mov	r5, r3
 800e394:	4606      	mov	r6, r0
 800e396:	b118      	cbz	r0, 800e3a0 <_vfiprintf_r+0x18>
 800e398:	6983      	ldr	r3, [r0, #24]
 800e39a:	b90b      	cbnz	r3, 800e3a0 <_vfiprintf_r+0x18>
 800e39c:	f7ff fb34 	bl	800da08 <__sinit>
 800e3a0:	4b7c      	ldr	r3, [pc, #496]	; (800e594 <_vfiprintf_r+0x20c>)
 800e3a2:	429c      	cmp	r4, r3
 800e3a4:	d158      	bne.n	800e458 <_vfiprintf_r+0xd0>
 800e3a6:	6874      	ldr	r4, [r6, #4]
 800e3a8:	89a3      	ldrh	r3, [r4, #12]
 800e3aa:	0718      	lsls	r0, r3, #28
 800e3ac:	d55e      	bpl.n	800e46c <_vfiprintf_r+0xe4>
 800e3ae:	6923      	ldr	r3, [r4, #16]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d05b      	beq.n	800e46c <_vfiprintf_r+0xe4>
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b8:	2320      	movs	r3, #32
 800e3ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3be:	2330      	movs	r3, #48	; 0x30
 800e3c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3c4:	9503      	str	r5, [sp, #12]
 800e3c6:	f04f 0b01 	mov.w	fp, #1
 800e3ca:	46b8      	mov	r8, r7
 800e3cc:	4645      	mov	r5, r8
 800e3ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e3d2:	b10b      	cbz	r3, 800e3d8 <_vfiprintf_r+0x50>
 800e3d4:	2b25      	cmp	r3, #37	; 0x25
 800e3d6:	d154      	bne.n	800e482 <_vfiprintf_r+0xfa>
 800e3d8:	ebb8 0a07 	subs.w	sl, r8, r7
 800e3dc:	d00b      	beq.n	800e3f6 <_vfiprintf_r+0x6e>
 800e3de:	4653      	mov	r3, sl
 800e3e0:	463a      	mov	r2, r7
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	f7ff ffbc 	bl	800e362 <__sfputs_r>
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	f000 80c2 	beq.w	800e574 <_vfiprintf_r+0x1ec>
 800e3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f2:	4453      	add	r3, sl
 800e3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f6:	f898 3000 	ldrb.w	r3, [r8]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f000 80ba 	beq.w	800e574 <_vfiprintf_r+0x1ec>
 800e400:	2300      	movs	r3, #0
 800e402:	f04f 32ff 	mov.w	r2, #4294967295
 800e406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e40a:	9304      	str	r3, [sp, #16]
 800e40c:	9307      	str	r3, [sp, #28]
 800e40e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e412:	931a      	str	r3, [sp, #104]	; 0x68
 800e414:	46a8      	mov	r8, r5
 800e416:	2205      	movs	r2, #5
 800e418:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e41c:	485e      	ldr	r0, [pc, #376]	; (800e598 <_vfiprintf_r+0x210>)
 800e41e:	f7f1 fedf 	bl	80001e0 <memchr>
 800e422:	9b04      	ldr	r3, [sp, #16]
 800e424:	bb78      	cbnz	r0, 800e486 <_vfiprintf_r+0xfe>
 800e426:	06d9      	lsls	r1, r3, #27
 800e428:	bf44      	itt	mi
 800e42a:	2220      	movmi	r2, #32
 800e42c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e430:	071a      	lsls	r2, r3, #28
 800e432:	bf44      	itt	mi
 800e434:	222b      	movmi	r2, #43	; 0x2b
 800e436:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e43a:	782a      	ldrb	r2, [r5, #0]
 800e43c:	2a2a      	cmp	r2, #42	; 0x2a
 800e43e:	d02a      	beq.n	800e496 <_vfiprintf_r+0x10e>
 800e440:	9a07      	ldr	r2, [sp, #28]
 800e442:	46a8      	mov	r8, r5
 800e444:	2000      	movs	r0, #0
 800e446:	250a      	movs	r5, #10
 800e448:	4641      	mov	r1, r8
 800e44a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e44e:	3b30      	subs	r3, #48	; 0x30
 800e450:	2b09      	cmp	r3, #9
 800e452:	d969      	bls.n	800e528 <_vfiprintf_r+0x1a0>
 800e454:	b360      	cbz	r0, 800e4b0 <_vfiprintf_r+0x128>
 800e456:	e024      	b.n	800e4a2 <_vfiprintf_r+0x11a>
 800e458:	4b50      	ldr	r3, [pc, #320]	; (800e59c <_vfiprintf_r+0x214>)
 800e45a:	429c      	cmp	r4, r3
 800e45c:	d101      	bne.n	800e462 <_vfiprintf_r+0xda>
 800e45e:	68b4      	ldr	r4, [r6, #8]
 800e460:	e7a2      	b.n	800e3a8 <_vfiprintf_r+0x20>
 800e462:	4b4f      	ldr	r3, [pc, #316]	; (800e5a0 <_vfiprintf_r+0x218>)
 800e464:	429c      	cmp	r4, r3
 800e466:	bf08      	it	eq
 800e468:	68f4      	ldreq	r4, [r6, #12]
 800e46a:	e79d      	b.n	800e3a8 <_vfiprintf_r+0x20>
 800e46c:	4621      	mov	r1, r4
 800e46e:	4630      	mov	r0, r6
 800e470:	f7fe fb26 	bl	800cac0 <__swsetup_r>
 800e474:	2800      	cmp	r0, #0
 800e476:	d09d      	beq.n	800e3b4 <_vfiprintf_r+0x2c>
 800e478:	f04f 30ff 	mov.w	r0, #4294967295
 800e47c:	b01d      	add	sp, #116	; 0x74
 800e47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e482:	46a8      	mov	r8, r5
 800e484:	e7a2      	b.n	800e3cc <_vfiprintf_r+0x44>
 800e486:	4a44      	ldr	r2, [pc, #272]	; (800e598 <_vfiprintf_r+0x210>)
 800e488:	1a80      	subs	r0, r0, r2
 800e48a:	fa0b f000 	lsl.w	r0, fp, r0
 800e48e:	4318      	orrs	r0, r3
 800e490:	9004      	str	r0, [sp, #16]
 800e492:	4645      	mov	r5, r8
 800e494:	e7be      	b.n	800e414 <_vfiprintf_r+0x8c>
 800e496:	9a03      	ldr	r2, [sp, #12]
 800e498:	1d11      	adds	r1, r2, #4
 800e49a:	6812      	ldr	r2, [r2, #0]
 800e49c:	9103      	str	r1, [sp, #12]
 800e49e:	2a00      	cmp	r2, #0
 800e4a0:	db01      	blt.n	800e4a6 <_vfiprintf_r+0x11e>
 800e4a2:	9207      	str	r2, [sp, #28]
 800e4a4:	e004      	b.n	800e4b0 <_vfiprintf_r+0x128>
 800e4a6:	4252      	negs	r2, r2
 800e4a8:	f043 0302 	orr.w	r3, r3, #2
 800e4ac:	9207      	str	r2, [sp, #28]
 800e4ae:	9304      	str	r3, [sp, #16]
 800e4b0:	f898 3000 	ldrb.w	r3, [r8]
 800e4b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e4b6:	d10e      	bne.n	800e4d6 <_vfiprintf_r+0x14e>
 800e4b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800e4be:	d138      	bne.n	800e532 <_vfiprintf_r+0x1aa>
 800e4c0:	9b03      	ldr	r3, [sp, #12]
 800e4c2:	1d1a      	adds	r2, r3, #4
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	9203      	str	r2, [sp, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	bfb8      	it	lt
 800e4cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4d0:	f108 0802 	add.w	r8, r8, #2
 800e4d4:	9305      	str	r3, [sp, #20]
 800e4d6:	4d33      	ldr	r5, [pc, #204]	; (800e5a4 <_vfiprintf_r+0x21c>)
 800e4d8:	f898 1000 	ldrb.w	r1, [r8]
 800e4dc:	2203      	movs	r2, #3
 800e4de:	4628      	mov	r0, r5
 800e4e0:	f7f1 fe7e 	bl	80001e0 <memchr>
 800e4e4:	b140      	cbz	r0, 800e4f8 <_vfiprintf_r+0x170>
 800e4e6:	2340      	movs	r3, #64	; 0x40
 800e4e8:	1b40      	subs	r0, r0, r5
 800e4ea:	fa03 f000 	lsl.w	r0, r3, r0
 800e4ee:	9b04      	ldr	r3, [sp, #16]
 800e4f0:	4303      	orrs	r3, r0
 800e4f2:	f108 0801 	add.w	r8, r8, #1
 800e4f6:	9304      	str	r3, [sp, #16]
 800e4f8:	f898 1000 	ldrb.w	r1, [r8]
 800e4fc:	482a      	ldr	r0, [pc, #168]	; (800e5a8 <_vfiprintf_r+0x220>)
 800e4fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e502:	2206      	movs	r2, #6
 800e504:	f108 0701 	add.w	r7, r8, #1
 800e508:	f7f1 fe6a 	bl	80001e0 <memchr>
 800e50c:	2800      	cmp	r0, #0
 800e50e:	d037      	beq.n	800e580 <_vfiprintf_r+0x1f8>
 800e510:	4b26      	ldr	r3, [pc, #152]	; (800e5ac <_vfiprintf_r+0x224>)
 800e512:	bb1b      	cbnz	r3, 800e55c <_vfiprintf_r+0x1d4>
 800e514:	9b03      	ldr	r3, [sp, #12]
 800e516:	3307      	adds	r3, #7
 800e518:	f023 0307 	bic.w	r3, r3, #7
 800e51c:	3308      	adds	r3, #8
 800e51e:	9303      	str	r3, [sp, #12]
 800e520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e522:	444b      	add	r3, r9
 800e524:	9309      	str	r3, [sp, #36]	; 0x24
 800e526:	e750      	b.n	800e3ca <_vfiprintf_r+0x42>
 800e528:	fb05 3202 	mla	r2, r5, r2, r3
 800e52c:	2001      	movs	r0, #1
 800e52e:	4688      	mov	r8, r1
 800e530:	e78a      	b.n	800e448 <_vfiprintf_r+0xc0>
 800e532:	2300      	movs	r3, #0
 800e534:	f108 0801 	add.w	r8, r8, #1
 800e538:	9305      	str	r3, [sp, #20]
 800e53a:	4619      	mov	r1, r3
 800e53c:	250a      	movs	r5, #10
 800e53e:	4640      	mov	r0, r8
 800e540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e544:	3a30      	subs	r2, #48	; 0x30
 800e546:	2a09      	cmp	r2, #9
 800e548:	d903      	bls.n	800e552 <_vfiprintf_r+0x1ca>
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d0c3      	beq.n	800e4d6 <_vfiprintf_r+0x14e>
 800e54e:	9105      	str	r1, [sp, #20]
 800e550:	e7c1      	b.n	800e4d6 <_vfiprintf_r+0x14e>
 800e552:	fb05 2101 	mla	r1, r5, r1, r2
 800e556:	2301      	movs	r3, #1
 800e558:	4680      	mov	r8, r0
 800e55a:	e7f0      	b.n	800e53e <_vfiprintf_r+0x1b6>
 800e55c:	ab03      	add	r3, sp, #12
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	4622      	mov	r2, r4
 800e562:	4b13      	ldr	r3, [pc, #76]	; (800e5b0 <_vfiprintf_r+0x228>)
 800e564:	a904      	add	r1, sp, #16
 800e566:	4630      	mov	r0, r6
 800e568:	f7fd fd66 	bl	800c038 <_printf_float>
 800e56c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e570:	4681      	mov	r9, r0
 800e572:	d1d5      	bne.n	800e520 <_vfiprintf_r+0x198>
 800e574:	89a3      	ldrh	r3, [r4, #12]
 800e576:	065b      	lsls	r3, r3, #25
 800e578:	f53f af7e 	bmi.w	800e478 <_vfiprintf_r+0xf0>
 800e57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e57e:	e77d      	b.n	800e47c <_vfiprintf_r+0xf4>
 800e580:	ab03      	add	r3, sp, #12
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	4622      	mov	r2, r4
 800e586:	4b0a      	ldr	r3, [pc, #40]	; (800e5b0 <_vfiprintf_r+0x228>)
 800e588:	a904      	add	r1, sp, #16
 800e58a:	4630      	mov	r0, r6
 800e58c:	f7fe f80a 	bl	800c5a4 <_printf_i>
 800e590:	e7ec      	b.n	800e56c <_vfiprintf_r+0x1e4>
 800e592:	bf00      	nop
 800e594:	0800eb78 	.word	0x0800eb78
 800e598:	0800ecb4 	.word	0x0800ecb4
 800e59c:	0800eb98 	.word	0x0800eb98
 800e5a0:	0800eb58 	.word	0x0800eb58
 800e5a4:	0800ecba 	.word	0x0800ecba
 800e5a8:	0800ecbe 	.word	0x0800ecbe
 800e5ac:	0800c039 	.word	0x0800c039
 800e5b0:	0800e363 	.word	0x0800e363

0800e5b4 <_sbrk_r>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4c06      	ldr	r4, [pc, #24]	; (800e5d0 <_sbrk_r+0x1c>)
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	4605      	mov	r5, r0
 800e5bc:	4608      	mov	r0, r1
 800e5be:	6023      	str	r3, [r4, #0]
 800e5c0:	f7f7 faf8 	bl	8005bb4 <_sbrk>
 800e5c4:	1c43      	adds	r3, r0, #1
 800e5c6:	d102      	bne.n	800e5ce <_sbrk_r+0x1a>
 800e5c8:	6823      	ldr	r3, [r4, #0]
 800e5ca:	b103      	cbz	r3, 800e5ce <_sbrk_r+0x1a>
 800e5cc:	602b      	str	r3, [r5, #0]
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	20002bf8 	.word	0x20002bf8

0800e5d4 <__sread>:
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5dc:	f000 f8a8 	bl	800e730 <_read_r>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	bfab      	itete	ge
 800e5e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e5e6:	89a3      	ldrhlt	r3, [r4, #12]
 800e5e8:	181b      	addge	r3, r3, r0
 800e5ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5ee:	bfac      	ite	ge
 800e5f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5f2:	81a3      	strhlt	r3, [r4, #12]
 800e5f4:	bd10      	pop	{r4, pc}

0800e5f6 <__swrite>:
 800e5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5fa:	461f      	mov	r7, r3
 800e5fc:	898b      	ldrh	r3, [r1, #12]
 800e5fe:	05db      	lsls	r3, r3, #23
 800e600:	4605      	mov	r5, r0
 800e602:	460c      	mov	r4, r1
 800e604:	4616      	mov	r6, r2
 800e606:	d505      	bpl.n	800e614 <__swrite+0x1e>
 800e608:	2302      	movs	r3, #2
 800e60a:	2200      	movs	r2, #0
 800e60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e610:	f000 f868 	bl	800e6e4 <_lseek_r>
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e61a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e61e:	81a3      	strh	r3, [r4, #12]
 800e620:	4632      	mov	r2, r6
 800e622:	463b      	mov	r3, r7
 800e624:	4628      	mov	r0, r5
 800e626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e62a:	f000 b817 	b.w	800e65c <_write_r>

0800e62e <__sseek>:
 800e62e:	b510      	push	{r4, lr}
 800e630:	460c      	mov	r4, r1
 800e632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e636:	f000 f855 	bl	800e6e4 <_lseek_r>
 800e63a:	1c43      	adds	r3, r0, #1
 800e63c:	89a3      	ldrh	r3, [r4, #12]
 800e63e:	bf15      	itete	ne
 800e640:	6560      	strne	r0, [r4, #84]	; 0x54
 800e642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e64a:	81a3      	strheq	r3, [r4, #12]
 800e64c:	bf18      	it	ne
 800e64e:	81a3      	strhne	r3, [r4, #12]
 800e650:	bd10      	pop	{r4, pc}

0800e652 <__sclose>:
 800e652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e656:	f000 b813 	b.w	800e680 <_close_r>
	...

0800e65c <_write_r>:
 800e65c:	b538      	push	{r3, r4, r5, lr}
 800e65e:	4c07      	ldr	r4, [pc, #28]	; (800e67c <_write_r+0x20>)
 800e660:	4605      	mov	r5, r0
 800e662:	4608      	mov	r0, r1
 800e664:	4611      	mov	r1, r2
 800e666:	2200      	movs	r2, #0
 800e668:	6022      	str	r2, [r4, #0]
 800e66a:	461a      	mov	r2, r3
 800e66c:	f7f3 ffd6 	bl	800261c <_write>
 800e670:	1c43      	adds	r3, r0, #1
 800e672:	d102      	bne.n	800e67a <_write_r+0x1e>
 800e674:	6823      	ldr	r3, [r4, #0]
 800e676:	b103      	cbz	r3, 800e67a <_write_r+0x1e>
 800e678:	602b      	str	r3, [r5, #0]
 800e67a:	bd38      	pop	{r3, r4, r5, pc}
 800e67c:	20002bf8 	.word	0x20002bf8

0800e680 <_close_r>:
 800e680:	b538      	push	{r3, r4, r5, lr}
 800e682:	4c06      	ldr	r4, [pc, #24]	; (800e69c <_close_r+0x1c>)
 800e684:	2300      	movs	r3, #0
 800e686:	4605      	mov	r5, r0
 800e688:	4608      	mov	r0, r1
 800e68a:	6023      	str	r3, [r4, #0]
 800e68c:	f7f3 fff0 	bl	8002670 <_close>
 800e690:	1c43      	adds	r3, r0, #1
 800e692:	d102      	bne.n	800e69a <_close_r+0x1a>
 800e694:	6823      	ldr	r3, [r4, #0]
 800e696:	b103      	cbz	r3, 800e69a <_close_r+0x1a>
 800e698:	602b      	str	r3, [r5, #0]
 800e69a:	bd38      	pop	{r3, r4, r5, pc}
 800e69c:	20002bf8 	.word	0x20002bf8

0800e6a0 <_fstat_r>:
 800e6a0:	b538      	push	{r3, r4, r5, lr}
 800e6a2:	4c07      	ldr	r4, [pc, #28]	; (800e6c0 <_fstat_r+0x20>)
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	4608      	mov	r0, r1
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	f7f4 f82f 	bl	8002710 <_fstat>
 800e6b2:	1c43      	adds	r3, r0, #1
 800e6b4:	d102      	bne.n	800e6bc <_fstat_r+0x1c>
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	b103      	cbz	r3, 800e6bc <_fstat_r+0x1c>
 800e6ba:	602b      	str	r3, [r5, #0]
 800e6bc:	bd38      	pop	{r3, r4, r5, pc}
 800e6be:	bf00      	nop
 800e6c0:	20002bf8 	.word	0x20002bf8

0800e6c4 <_isatty_r>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	4c06      	ldr	r4, [pc, #24]	; (800e6e0 <_isatty_r+0x1c>)
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	4605      	mov	r5, r0
 800e6cc:	4608      	mov	r0, r1
 800e6ce:	6023      	str	r3, [r4, #0]
 800e6d0:	f7f3 ff8e 	bl	80025f0 <_isatty>
 800e6d4:	1c43      	adds	r3, r0, #1
 800e6d6:	d102      	bne.n	800e6de <_isatty_r+0x1a>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	b103      	cbz	r3, 800e6de <_isatty_r+0x1a>
 800e6dc:	602b      	str	r3, [r5, #0]
 800e6de:	bd38      	pop	{r3, r4, r5, pc}
 800e6e0:	20002bf8 	.word	0x20002bf8

0800e6e4 <_lseek_r>:
 800e6e4:	b538      	push	{r3, r4, r5, lr}
 800e6e6:	4c07      	ldr	r4, [pc, #28]	; (800e704 <_lseek_r+0x20>)
 800e6e8:	4605      	mov	r5, r0
 800e6ea:	4608      	mov	r0, r1
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	6022      	str	r2, [r4, #0]
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	f7f3 ffd3 	bl	800269e <_lseek>
 800e6f8:	1c43      	adds	r3, r0, #1
 800e6fa:	d102      	bne.n	800e702 <_lseek_r+0x1e>
 800e6fc:	6823      	ldr	r3, [r4, #0]
 800e6fe:	b103      	cbz	r3, 800e702 <_lseek_r+0x1e>
 800e700:	602b      	str	r3, [r5, #0]
 800e702:	bd38      	pop	{r3, r4, r5, pc}
 800e704:	20002bf8 	.word	0x20002bf8

0800e708 <__ascii_mbtowc>:
 800e708:	b082      	sub	sp, #8
 800e70a:	b901      	cbnz	r1, 800e70e <__ascii_mbtowc+0x6>
 800e70c:	a901      	add	r1, sp, #4
 800e70e:	b142      	cbz	r2, 800e722 <__ascii_mbtowc+0x1a>
 800e710:	b14b      	cbz	r3, 800e726 <__ascii_mbtowc+0x1e>
 800e712:	7813      	ldrb	r3, [r2, #0]
 800e714:	600b      	str	r3, [r1, #0]
 800e716:	7812      	ldrb	r2, [r2, #0]
 800e718:	1c10      	adds	r0, r2, #0
 800e71a:	bf18      	it	ne
 800e71c:	2001      	movne	r0, #1
 800e71e:	b002      	add	sp, #8
 800e720:	4770      	bx	lr
 800e722:	4610      	mov	r0, r2
 800e724:	e7fb      	b.n	800e71e <__ascii_mbtowc+0x16>
 800e726:	f06f 0001 	mvn.w	r0, #1
 800e72a:	e7f8      	b.n	800e71e <__ascii_mbtowc+0x16>

0800e72c <__malloc_lock>:
 800e72c:	4770      	bx	lr

0800e72e <__malloc_unlock>:
 800e72e:	4770      	bx	lr

0800e730 <_read_r>:
 800e730:	b538      	push	{r3, r4, r5, lr}
 800e732:	4c07      	ldr	r4, [pc, #28]	; (800e750 <_read_r+0x20>)
 800e734:	4605      	mov	r5, r0
 800e736:	4608      	mov	r0, r1
 800e738:	4611      	mov	r1, r2
 800e73a:	2200      	movs	r2, #0
 800e73c:	6022      	str	r2, [r4, #0]
 800e73e:	461a      	mov	r2, r3
 800e740:	f7f3 ffbe 	bl	80026c0 <_read>
 800e744:	1c43      	adds	r3, r0, #1
 800e746:	d102      	bne.n	800e74e <_read_r+0x1e>
 800e748:	6823      	ldr	r3, [r4, #0]
 800e74a:	b103      	cbz	r3, 800e74e <_read_r+0x1e>
 800e74c:	602b      	str	r3, [r5, #0]
 800e74e:	bd38      	pop	{r3, r4, r5, pc}
 800e750:	20002bf8 	.word	0x20002bf8

0800e754 <__ascii_wctomb>:
 800e754:	b149      	cbz	r1, 800e76a <__ascii_wctomb+0x16>
 800e756:	2aff      	cmp	r2, #255	; 0xff
 800e758:	bf85      	ittet	hi
 800e75a:	238a      	movhi	r3, #138	; 0x8a
 800e75c:	6003      	strhi	r3, [r0, #0]
 800e75e:	700a      	strbls	r2, [r1, #0]
 800e760:	f04f 30ff 	movhi.w	r0, #4294967295
 800e764:	bf98      	it	ls
 800e766:	2001      	movls	r0, #1
 800e768:	4770      	bx	lr
 800e76a:	4608      	mov	r0, r1
 800e76c:	4770      	bx	lr
	...

0800e770 <asinf>:
 800e770:	b510      	push	{r4, lr}
 800e772:	ed2d 8b02 	vpush	{d8}
 800e776:	4c27      	ldr	r4, [pc, #156]	; (800e814 <asinf+0xa4>)
 800e778:	b08a      	sub	sp, #40	; 0x28
 800e77a:	eeb0 8a40 	vmov.f32	s16, s0
 800e77e:	f000 f89f 	bl	800e8c0 <__ieee754_asinf>
 800e782:	f994 3000 	ldrsb.w	r3, [r4]
 800e786:	3301      	adds	r3, #1
 800e788:	eef0 8a40 	vmov.f32	s17, s0
 800e78c:	d03c      	beq.n	800e808 <asinf+0x98>
 800e78e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e796:	d637      	bvs.n	800e808 <asinf+0x98>
 800e798:	eeb0 0a48 	vmov.f32	s0, s16
 800e79c:	f000 f988 	bl	800eab0 <fabsf>
 800e7a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e7a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ac:	dd2c      	ble.n	800e808 <asinf+0x98>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	4b19      	ldr	r3, [pc, #100]	; (800e818 <asinf+0xa8>)
 800e7b4:	9301      	str	r3, [sp, #4]
 800e7b6:	ee18 0a10 	vmov	r0, s16
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	9308      	str	r3, [sp, #32]
 800e7be:	f7f1 fec3 	bl	8000548 <__aeabi_f2d>
 800e7c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7ca:	4814      	ldr	r0, [pc, #80]	; (800e81c <asinf+0xac>)
 800e7cc:	f000 f968 	bl	800eaa0 <nan>
 800e7d0:	f994 3000 	ldrsb.w	r3, [r4]
 800e7d4:	2b02      	cmp	r3, #2
 800e7d6:	ed8d 0b06 	vstr	d0, [sp, #24]
 800e7da:	d104      	bne.n	800e7e6 <asinf+0x76>
 800e7dc:	f7fd fb42 	bl	800be64 <__errno>
 800e7e0:	2321      	movs	r3, #33	; 0x21
 800e7e2:	6003      	str	r3, [r0, #0]
 800e7e4:	e004      	b.n	800e7f0 <asinf+0x80>
 800e7e6:	4668      	mov	r0, sp
 800e7e8:	f000 f955 	bl	800ea96 <matherr>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d0f5      	beq.n	800e7dc <asinf+0x6c>
 800e7f0:	9b08      	ldr	r3, [sp, #32]
 800e7f2:	b11b      	cbz	r3, 800e7fc <asinf+0x8c>
 800e7f4:	f7fd fb36 	bl	800be64 <__errno>
 800e7f8:	9b08      	ldr	r3, [sp, #32]
 800e7fa:	6003      	str	r3, [r0, #0]
 800e7fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e800:	f7f2 f9d2 	bl	8000ba8 <__aeabi_d2f>
 800e804:	ee08 0a90 	vmov	s17, r0
 800e808:	eeb0 0a68 	vmov.f32	s0, s17
 800e80c:	b00a      	add	sp, #40	; 0x28
 800e80e:	ecbd 8b02 	vpop	{d8}
 800e812:	bd10      	pop	{r4, pc}
 800e814:	200016e4 	.word	0x200016e4
 800e818:	0800edd0 	.word	0x0800edd0
 800e81c:	0800ecb9 	.word	0x0800ecb9

0800e820 <sqrtf>:
 800e820:	b510      	push	{r4, lr}
 800e822:	ed2d 8b02 	vpush	{d8}
 800e826:	b08a      	sub	sp, #40	; 0x28
 800e828:	eeb0 8a40 	vmov.f32	s16, s0
 800e82c:	f000 f930 	bl	800ea90 <__ieee754_sqrtf>
 800e830:	4b21      	ldr	r3, [pc, #132]	; (800e8b8 <sqrtf+0x98>)
 800e832:	f993 4000 	ldrsb.w	r4, [r3]
 800e836:	1c63      	adds	r3, r4, #1
 800e838:	d02c      	beq.n	800e894 <sqrtf+0x74>
 800e83a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e842:	d627      	bvs.n	800e894 <sqrtf+0x74>
 800e844:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e84c:	d522      	bpl.n	800e894 <sqrtf+0x74>
 800e84e:	2301      	movs	r3, #1
 800e850:	9300      	str	r3, [sp, #0]
 800e852:	4b1a      	ldr	r3, [pc, #104]	; (800e8bc <sqrtf+0x9c>)
 800e854:	9301      	str	r3, [sp, #4]
 800e856:	ee18 0a10 	vmov	r0, s16
 800e85a:	2300      	movs	r3, #0
 800e85c:	9308      	str	r3, [sp, #32]
 800e85e:	f7f1 fe73 	bl	8000548 <__aeabi_f2d>
 800e862:	2200      	movs	r2, #0
 800e864:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e86c:	2300      	movs	r3, #0
 800e86e:	b9ac      	cbnz	r4, 800e89c <sqrtf+0x7c>
 800e870:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e874:	4668      	mov	r0, sp
 800e876:	f000 f90e 	bl	800ea96 <matherr>
 800e87a:	b1b8      	cbz	r0, 800e8ac <sqrtf+0x8c>
 800e87c:	9b08      	ldr	r3, [sp, #32]
 800e87e:	b11b      	cbz	r3, 800e888 <sqrtf+0x68>
 800e880:	f7fd faf0 	bl	800be64 <__errno>
 800e884:	9b08      	ldr	r3, [sp, #32]
 800e886:	6003      	str	r3, [r0, #0]
 800e888:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e88c:	f7f2 f98c 	bl	8000ba8 <__aeabi_d2f>
 800e890:	ee00 0a10 	vmov	s0, r0
 800e894:	b00a      	add	sp, #40	; 0x28
 800e896:	ecbd 8b02 	vpop	{d8}
 800e89a:	bd10      	pop	{r4, pc}
 800e89c:	4610      	mov	r0, r2
 800e89e:	4619      	mov	r1, r3
 800e8a0:	f7f1 ffd4 	bl	800084c <__aeabi_ddiv>
 800e8a4:	2c02      	cmp	r4, #2
 800e8a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e8aa:	d1e3      	bne.n	800e874 <sqrtf+0x54>
 800e8ac:	f7fd fada 	bl	800be64 <__errno>
 800e8b0:	2321      	movs	r3, #33	; 0x21
 800e8b2:	6003      	str	r3, [r0, #0]
 800e8b4:	e7e2      	b.n	800e87c <sqrtf+0x5c>
 800e8b6:	bf00      	nop
 800e8b8:	200016e4 	.word	0x200016e4
 800e8bc:	0800edd6 	.word	0x0800edd6

0800e8c0 <__ieee754_asinf>:
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	ee10 5a10 	vmov	r5, s0
 800e8c6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e8ca:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e8ce:	ed2d 8b04 	vpush	{d8-d9}
 800e8d2:	d10c      	bne.n	800e8ee <__ieee754_asinf+0x2e>
 800e8d4:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800ea50 <__ieee754_asinf+0x190>
 800e8d8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800ea54 <__ieee754_asinf+0x194>
 800e8dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e8e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e8e4:	eeb0 0a67 	vmov.f32	s0, s15
 800e8e8:	ecbd 8b04 	vpop	{d8-d9}
 800e8ec:	bd38      	pop	{r3, r4, r5, pc}
 800e8ee:	dd04      	ble.n	800e8fa <__ieee754_asinf+0x3a>
 800e8f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e8f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e8f8:	e7f6      	b.n	800e8e8 <__ieee754_asinf+0x28>
 800e8fa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e8fe:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e902:	da0b      	bge.n	800e91c <__ieee754_asinf+0x5c>
 800e904:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e908:	da52      	bge.n	800e9b0 <__ieee754_asinf+0xf0>
 800e90a:	eddf 7a53 	vldr	s15, [pc, #332]	; 800ea58 <__ieee754_asinf+0x198>
 800e90e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e912:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91a:	dce5      	bgt.n	800e8e8 <__ieee754_asinf+0x28>
 800e91c:	f000 f8c8 	bl	800eab0 <fabsf>
 800e920:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800e924:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800e928:	ee20 8a08 	vmul.f32	s16, s0, s16
 800e92c:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800ea5c <__ieee754_asinf+0x19c>
 800e930:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ea60 <__ieee754_asinf+0x1a0>
 800e934:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800ea64 <__ieee754_asinf+0x1a4>
 800e938:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e93c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ea68 <__ieee754_asinf+0x1a8>
 800e940:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e944:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ea6c <__ieee754_asinf+0x1ac>
 800e948:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e94c:	eddf 7a48 	vldr	s15, [pc, #288]	; 800ea70 <__ieee754_asinf+0x1b0>
 800e950:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e954:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ea74 <__ieee754_asinf+0x1b4>
 800e958:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e95c:	eddf 7a46 	vldr	s15, [pc, #280]	; 800ea78 <__ieee754_asinf+0x1b8>
 800e960:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e964:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800ea7c <__ieee754_asinf+0x1bc>
 800e968:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e96c:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ea80 <__ieee754_asinf+0x1c0>
 800e970:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e974:	eeb0 0a48 	vmov.f32	s0, s16
 800e978:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e97c:	f000 f888 	bl	800ea90 <__ieee754_sqrtf>
 800e980:	4b40      	ldr	r3, [pc, #256]	; (800ea84 <__ieee754_asinf+0x1c4>)
 800e982:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e986:	429c      	cmp	r4, r3
 800e988:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e98c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e990:	dd3d      	ble.n	800ea0e <__ieee754_asinf+0x14e>
 800e992:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e996:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800ea88 <__ieee754_asinf+0x1c8>
 800e99a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e99e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800ea54 <__ieee754_asinf+0x194>
 800e9a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e9a6:	2d00      	cmp	r5, #0
 800e9a8:	bfd8      	it	le
 800e9aa:	eeb1 0a40 	vnegle.f32	s0, s0
 800e9ae:	e79b      	b.n	800e8e8 <__ieee754_asinf+0x28>
 800e9b0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e9b4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ea5c <__ieee754_asinf+0x19c>
 800e9b8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ea60 <__ieee754_asinf+0x1a0>
 800e9bc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ea74 <__ieee754_asinf+0x1b4>
 800e9c0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e9c4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ea68 <__ieee754_asinf+0x1a8>
 800e9c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e9cc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800ea6c <__ieee754_asinf+0x1ac>
 800e9d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9d4:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ea70 <__ieee754_asinf+0x1b0>
 800e9d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e9dc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800ea64 <__ieee754_asinf+0x1a4>
 800e9e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9e4:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ea78 <__ieee754_asinf+0x1b8>
 800e9e8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e9ec:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800ea7c <__ieee754_asinf+0x1bc>
 800e9f0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e9f4:	eddf 6a22 	vldr	s13, [pc, #136]	; 800ea80 <__ieee754_asinf+0x1c0>
 800e9f8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e9fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea00:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ea04:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ea08:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ea0c:	e76c      	b.n	800e8e8 <__ieee754_asinf+0x28>
 800ea0e:	ee10 3a10 	vmov	r3, s0
 800ea12:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ea16:	f023 030f 	bic.w	r3, r3, #15
 800ea1a:	ee07 3a90 	vmov	s15, r3
 800ea1e:	eef1 6a67 	vneg.f32	s13, s15
 800ea22:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800ea26:	ee70 5a00 	vadd.f32	s11, s0, s0
 800ea2a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ea2e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ea50 <__ieee754_asinf+0x190>
 800ea32:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800ea36:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ea8c <__ieee754_asinf+0x1cc>
 800ea3a:	eee5 7a47 	vfms.f32	s15, s10, s14
 800ea3e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800ea42:	eeb0 6a40 	vmov.f32	s12, s0
 800ea46:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ea4a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ea4e:	e7a8      	b.n	800e9a2 <__ieee754_asinf+0xe2>
 800ea50:	b33bbd2e 	.word	0xb33bbd2e
 800ea54:	3fc90fdb 	.word	0x3fc90fdb
 800ea58:	7149f2ca 	.word	0x7149f2ca
 800ea5c:	3811ef08 	.word	0x3811ef08
 800ea60:	3a4f7f04 	.word	0x3a4f7f04
 800ea64:	3e2aaaab 	.word	0x3e2aaaab
 800ea68:	bd241146 	.word	0xbd241146
 800ea6c:	3e4e0aa8 	.word	0x3e4e0aa8
 800ea70:	bea6b090 	.word	0xbea6b090
 800ea74:	3d9dc62e 	.word	0x3d9dc62e
 800ea78:	bf303361 	.word	0xbf303361
 800ea7c:	4001572d 	.word	0x4001572d
 800ea80:	c019d139 	.word	0xc019d139
 800ea84:	3f799999 	.word	0x3f799999
 800ea88:	333bbd2e 	.word	0x333bbd2e
 800ea8c:	3f490fdb 	.word	0x3f490fdb

0800ea90 <__ieee754_sqrtf>:
 800ea90:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ea94:	4770      	bx	lr

0800ea96 <matherr>:
 800ea96:	2000      	movs	r0, #0
 800ea98:	4770      	bx	lr
 800ea9a:	0000      	movs	r0, r0
 800ea9c:	0000      	movs	r0, r0
	...

0800eaa0 <nan>:
 800eaa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eaa8 <nan+0x8>
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	00000000 	.word	0x00000000
 800eaac:	7ff80000 	.word	0x7ff80000

0800eab0 <fabsf>:
 800eab0:	ee10 3a10 	vmov	r3, s0
 800eab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eab8:	ee00 3a10 	vmov	s0, r3
 800eabc:	4770      	bx	lr
	...

0800eac0 <_init>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	bf00      	nop
 800eac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eac6:	bc08      	pop	{r3}
 800eac8:	469e      	mov	lr, r3
 800eaca:	4770      	bx	lr

0800eacc <_fini>:
 800eacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eace:	bf00      	nop
 800ead0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ead2:	bc08      	pop	{r3}
 800ead4:	469e      	mov	lr, r3
 800ead6:	4770      	bx	lr
