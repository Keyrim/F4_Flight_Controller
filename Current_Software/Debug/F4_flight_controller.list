
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f74c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800f8e0  0800f8e0  0001f8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffc4  0800ffc4  00021844  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffc4  0800ffc4  0001ffc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffcc  0800ffcc  00021844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffcc  0800ffcc  0001ffcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffd0  0800ffd0  0001ffd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001844  20000000  0800ffd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e0  20001844  08011818  00021844  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e24  08011818  00022e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021844  2**0
                  CONTENTS, READONLY
 12 .debug_info   000488b0  00000000  00000000  00021874  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000071eb  00000000  00000000  0006a124  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ad0  00000000  00000000  00071310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  00072de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bcbd  00000000  00000000  00074598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c41d  00000000  00000000  000a0255  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdf9a  00000000  00000000  000cc672  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019a60c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007970  00000000  00000000  0019a688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001844 	.word	0x20001844
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f8c4 	.word	0x0800f8c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001848 	.word	0x20001848
 80001cc:	0800f8c4 	.word	0x0800f8c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DATA_LOGGER_Init>:
static uint8_t name_start_transfer[] = "Start Transfer";
static uint8_t name_stop_transfer[] = "Stop Transfer";

static uint8_t name_flight_mode[] = "Flight Mode";

void DATA_LOGGER_Init(system_t * sys_){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	sys = sys_;
 8000f50:	4ab3      	ldr	r2, [pc, #716]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]

	//	-----------------------------------------------	Définitions des data	-----------------------------------------------------------------
	//Angle
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							TRUE);
 8000f56:	4bb3      	ldr	r3, [pc, #716]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	4bb0      	ldr	r3, [pc, #704]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000f64:	4aaf      	ldr	r2, [pc, #700]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f66:	6053      	str	r3, [r2, #4]
 8000f68:	4bae      	ldr	r3, [pc, #696]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f6a:	2229      	movs	r2, #41	; 0x29
 8000f6c:	725a      	strb	r2, [r3, #9]
 8000f6e:	4bad      	ldr	r3, [pc, #692]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f70:	4aad      	ldr	r2, [pc, #692]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4bab      	ldr	r3, [pc, #684]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f76:	220a      	movs	r2, #10
 8000f78:	741a      	strb	r2, [r3, #16]
 8000f7a:	4baa      	ldr	r3, [pc, #680]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	615a      	str	r2, [r3, #20]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							FALSE);
 8000f80:	4ba8      	ldr	r3, [pc, #672]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
 8000f88:	4ba5      	ldr	r3, [pc, #660]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000f90:	4aa4      	ldr	r2, [pc, #656]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4ba3      	ldr	r3, [pc, #652]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f96:	2229      	movs	r2, #41	; 0x29
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f9c:	4ba1      	ldr	r3, [pc, #644]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f9e:	4aa3      	ldr	r2, [pc, #652]	; (800122c <DATA_LOGGER_Init+0x2e4>)
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	4ba0      	ldr	r3, [pc, #640]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000faa:	4b9e      	ldr	r3, [pc, #632]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c

	//Consignes angles
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_roll,					TRUE);
 8000fb0:	4b9c      	ldr	r3, [pc, #624]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8000fb8:	4b99      	ldr	r3, [pc, #612]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8000fc0:	4a98      	ldr	r2, [pc, #608]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fc2:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 8000fc6:	4b97      	ldr	r3, [pc, #604]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fc8:	2229      	movs	r2, #41	; 0x29
 8000fca:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 8000fce:	4b95      	ldr	r3, [pc, #596]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fd0:	4a97      	ldr	r2, [pc, #604]	; (8001230 <DATA_LOGGER_Init+0x2e8>)
 8000fd2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8000fd6:	4b93      	ldr	r3, [pc, #588]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fd8:	220b      	movs	r2, #11
 8000fda:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8000fde:	4b91      	ldr	r3, [pc, #580]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_pitch,					FALSE);
 8000fe6:	4b8f      	ldr	r3, [pc, #572]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fe8:	2211      	movs	r2, #17
 8000fea:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8000fee:	4b8c      	ldr	r3, [pc, #560]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8000ff6:	4a8b      	ldr	r2, [pc, #556]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000ff8:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 8000ffc:	4b89      	ldr	r3, [pc, #548]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000ffe:	2229      	movs	r2, #41	; 0x29
 8001000:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8001004:	4b87      	ldr	r3, [pc, #540]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001006:	4a8b      	ldr	r2, [pc, #556]	; (8001234 <DATA_LOGGER_Init+0x2ec>)
 8001008:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 800100c:	4b85      	ldr	r3, [pc, #532]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800100e:	220c      	movs	r2, #12
 8001010:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8001014:	4b83      	ldr	r3, [pc, #524]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

	//Pid gyro roll
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].output, 		DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll, 						FALSE);
 800101c:	4b81      	ldr	r3, [pc, #516]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800101e:	220d      	movs	r2, #13
 8001020:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8001024:	4b7e      	ldr	r3, [pc, #504]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 800102c:	4a7d      	ldr	r2, [pc, #500]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800102e:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8001032:	4b7c      	ldr	r3, [pc, #496]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001034:	2229      	movs	r2, #41	; 0x29
 8001036:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 800103a:	4b7a      	ldr	r3, [pc, #488]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800103c:	4a7e      	ldr	r2, [pc, #504]	; (8001238 <DATA_LOGGER_Init+0x2f0>)
 800103e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8001042:	4b78      	ldr	r3, [pc, #480]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001044:	220d      	movs	r2, #13
 8001046:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 800104a:	4b76      	ldr	r3, [pc, #472]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800104c:	2200      	movs	r2, #0
 800104e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_P, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].P, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_p, 						FALSE);
 8001052:	4b74      	ldr	r3, [pc, #464]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001054:	220e      	movs	r2, #14
 8001056:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 800105a:	4b71      	ldr	r3, [pc, #452]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f603 1374 	addw	r3, r3, #2420	; 0x974
 8001062:	4a70      	ldr	r2, [pc, #448]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001064:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001068:	4b6e      	ldr	r3, [pc, #440]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800106a:	2229      	movs	r2, #41	; 0x29
 800106c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8001070:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001072:	4a72      	ldr	r2, [pc, #456]	; (800123c <DATA_LOGGER_Init+0x2f4>)
 8001074:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8001078:	4b6a      	ldr	r3, [pc, #424]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800107a:	220d      	movs	r2, #13
 800107c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001082:	2200      	movs	r2, #0
 8001084:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_D, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].D, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_d, 						FALSE);
 8001088:	4b66      	ldr	r3, [pc, #408]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800108a:	220f      	movs	r2, #15
 800108c:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8001090:	4b63      	ldr	r3, [pc, #396]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8001098:	4a62      	ldr	r2, [pc, #392]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800109a:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800109e:	4b61      	ldr	r3, [pc, #388]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010a0:	2229      	movs	r2, #41	; 0x29
 80010a2:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 80010a6:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010a8:	4a65      	ldr	r2, [pc, #404]	; (8001240 <DATA_LOGGER_Init+0x2f8>)
 80010aa:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010b0:	220d      	movs	r2, #13
 80010b2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 80010b6:	4b5b      	ldr	r3, [pc, #364]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	//Angle rate
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 								TRUE);
 80010be:	4b59      	ldr	r3, [pc, #356]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	333c      	adds	r3, #60	; 0x3c
 80010cc:	4a55      	ldr	r2, [pc, #340]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010ce:	6353      	str	r3, [r2, #52]	; 0x34
 80010d0:	4b54      	ldr	r3, [pc, #336]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010d2:	2229      	movs	r2, #41	; 0x29
 80010d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80010d8:	4b52      	ldr	r3, [pc, #328]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010da:	4a5a      	ldr	r2, [pc, #360]	; (8001244 <DATA_LOGGER_Init+0x2fc>)
 80010dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80010de:	4b51      	ldr	r3, [pc, #324]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010e0:	2209      	movs	r2, #9
 80010e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80010e6:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 								FALSE);
 80010ec:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010ee:	2203      	movs	r2, #3
 80010f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3338      	adds	r3, #56	; 0x38
 80010fa:	4a4a      	ldr	r2, [pc, #296]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001100:	2229      	movs	r2, #41	; 0x29
 8001102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <DATA_LOGGER_Init+0x300>)
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
 800110c:	4b45      	ldr	r3, [pc, #276]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800110e:	220a      	movs	r2, #10
 8001110:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001114:	4b43      	ldr	r3, [pc, #268]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001116:	2200      	movs	r2, #0
 8001118:	65da      	str	r2, [r3, #92]	; 0x5c
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 						FALSE);
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800111c:	2204      	movs	r2, #4
 800111e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001122:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3340      	adds	r3, #64	; 0x40
 8001128:	4a3e      	ldr	r2, [pc, #248]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800112a:	6653      	str	r3, [r2, #100]	; 0x64
 800112c:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800112e:	2229      	movs	r2, #41	; 0x29
 8001130:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001134:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001136:	4a45      	ldr	r2, [pc, #276]	; (800124c <DATA_LOGGER_Init+0x304>)
 8001138:	66da      	str	r2, [r3, #108]	; 0x6c
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800113c:	2208      	movs	r2, #8
 800113e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001144:	2200      	movs	r2, #0
 8001146:	675a      	str	r2, [r3, #116]	; 0x74

	//Consignes angles rates
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_roll_gyro, 							TRUE);
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800114a:	220a      	movs	r2, #10
 800114c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 8001158:	4a32      	ldr	r2, [pc, #200]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800115a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800115e:	4b31      	ldr	r3, [pc, #196]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001160:	2229      	movs	r2, #41	; 0x29
 8001162:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001168:	4a39      	ldr	r2, [pc, #228]	; (8001250 <DATA_LOGGER_Init+0x308>)
 800116a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001170:	220d      	movs	r2, #13
 8001172:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001178:	2201      	movs	r2, #1
 800117a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_pitch_gyro, 						FALSE);
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001180:	220b      	movs	r2, #11
 8001182:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 800118e:	4a25      	ldr	r2, [pc, #148]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001190:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001196:	2229      	movs	r2, #41	; 0x29
 8001198:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800119e:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <DATA_LOGGER_Init+0x30c>)
 80011a0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011a6:	220e      	movs	r2, #14
 80011a8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_YAW, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW], 		DATA_FORMAT_16B_FLOAT_1D, 	name_target_yaw_gyro, 		 					FALSE);
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011c6:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011cc:	2229      	movs	r2, #41	; 0x29
 80011ce:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011d4:	4a20      	ldr	r2, [pc, #128]	; (8001258 <DATA_LOGGER_Init+0x310>)
 80011d6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011dc:	220c      	movs	r2, #12
 80011de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	//Angle Rate raw
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 							FALSE);
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011ec:	2205      	movs	r2, #5
 80011ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f8:	3304      	adds	r3, #4
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011fc:	67d3      	str	r3, [r2, #124]	; 0x7c
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001200:	2229      	movs	r2, #41	; 0x29
 8001202:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001208:	4a14      	ldr	r2, [pc, #80]	; (800125c <DATA_LOGGER_Init+0x314>)
 800120a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001210:	220d      	movs	r2, #13
 8001212:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001216:	4b03      	ldr	r3, [pc, #12]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001218:	2200      	movs	r2, #0
 800121a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800121e:	e01f      	b.n	8001260 <DATA_LOGGER_Init+0x318>
 8001220:	20001860 	.word	0x20001860
 8001224:	20001864 	.word	0x20001864
 8001228:	20000004 	.word	0x20000004
 800122c:	20000010 	.word	0x20000010
 8001230:	2000001c 	.word	0x2000001c
 8001234:	20000028 	.word	0x20000028
 8001238:	200000bc 	.word	0x200000bc
 800123c:	200000cc 	.word	0x200000cc
 8001240:	200000dc 	.word	0x200000dc
 8001244:	20000038 	.word	0x20000038
 8001248:	20000044 	.word	0x20000044
 800124c:	20000050 	.word	0x20000050
 8001250:	2000005c 	.word	0x2000005c
 8001254:	2000006c 	.word	0x2000006c
 8001258:	2000007c 	.word	0x2000007c
 800125c:	2000008c 	.word	0x2000008c
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,							FALSE);
 8001260:	4b74      	ldr	r3, [pc, #464]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001262:	2206      	movs	r2, #6
 8001264:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001268:	4b73      	ldr	r3, [pc, #460]	; (8001438 <DATA_LOGGER_Init+0x4f0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126e:	3304      	adds	r3, #4
 8001270:	4a70      	ldr	r2, [pc, #448]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001276:	4b6f      	ldr	r3, [pc, #444]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001278:	2229      	movs	r2, #41	; 0x29
 800127a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800127e:	4b6d      	ldr	r3, [pc, #436]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001280:	4a6e      	ldr	r2, [pc, #440]	; (800143c <DATA_LOGGER_Init+0x4f4>)
 8001282:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001286:	4b6b      	ldr	r3, [pc, #428]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001288:	220e      	movs	r2, #14
 800128a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800128e:	4b69      	ldr	r3, [pc, #420]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001290:	2200      	movs	r2, #0
 8001292:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 								FALSE);
 8001296:	4b67      	ldr	r3, [pc, #412]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001298:	2207      	movs	r2, #7
 800129a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800129e:	4b66      	ldr	r3, [pc, #408]	; (8001438 <DATA_LOGGER_Init+0x4f0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a4:	3308      	adds	r3, #8
 80012a6:	4a63      	ldr	r2, [pc, #396]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012a8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 80012ac:	4b61      	ldr	r3, [pc, #388]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012ae:	2229      	movs	r2, #41	; 0x29
 80012b0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80012b4:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012b6:	4a62      	ldr	r2, [pc, #392]	; (8001440 <DATA_LOGGER_Init+0x4f8>)
 80012b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80012bc:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012be:	220c      	movs	r2, #12
 80012c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80012c4:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	//Buttons
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_config_request, 							FALSE);
 80012cc:	4b59      	ldr	r3, [pc, #356]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012ce:	2213      	movs	r2, #19
 80012d0:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 80012d4:	4b57      	ldr	r3, [pc, #348]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 80012dc:	4b55      	ldr	r3, [pc, #340]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012e6:	4a57      	ldr	r2, [pc, #348]	; (8001444 <DATA_LOGGER_Init+0x4fc>)
 80012e8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 80012ec:	4b51      	ldr	r3, [pc, #324]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012ee:	220b      	movs	r2, #11
 80012f0:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	DEFINE_DATA(DATA_ID_DISABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_disable_asser_orientation,  	TRUE);
 80012fc:	4b4d      	ldr	r3, [pc, #308]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80012fe:	2214      	movs	r2, #20
 8001300:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8001304:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001306:	2200      	movs	r2, #0
 8001308:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 800130c:	4b49      	ldr	r3, [pc, #292]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800130e:	2200      	movs	r2, #0
 8001310:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8001314:	4b47      	ldr	r3, [pc, #284]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001316:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <DATA_LOGGER_Init+0x500>)
 8001318:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 800131c:	4b45      	ldr	r3, [pc, #276]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800131e:	220d      	movs	r2, #13
 8001320:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8001324:	4b43      	ldr	r3, [pc, #268]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001326:	2201      	movs	r2, #1
 8001328:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	DEFINE_DATA(DATA_ID_ENABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_enable_asser_orientation, 		TRUE);
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800132e:	2215      	movs	r2, #21
 8001330:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8001334:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001336:	2200      	movs	r2, #0
 8001338:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8001344:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001346:	4a41      	ldr	r2, [pc, #260]	; (800144c <DATA_LOGGER_Init+0x504>)
 8001348:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800134c:	4b39      	ldr	r3, [pc, #228]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800134e:	220c      	movs	r2, #12
 8001350:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8001354:	4b37      	ldr	r3, [pc, #220]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001356:	2201      	movs	r2, #1
 8001358:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	DEFINE_DATA(DATA_ID_START_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 					TRUE);
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800135e:	2216      	movs	r2, #22
 8001360:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001366:	2200      	movs	r2, #0
 8001368:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001376:	4a36      	ldr	r2, [pc, #216]	; (8001450 <DATA_LOGGER_Init+0x508>)
 8001378:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800137c:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800137e:	220e      	movs	r2, #14
 8001380:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001386:	2201      	movs	r2, #1
 8001388:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 							TRUE);
 800138c:	4b29      	ldr	r3, [pc, #164]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800138e:	2217      	movs	r2, #23
 8001390:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001396:	2200      	movs	r2, #0
 8001398:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80013a6:	4a2b      	ldr	r2, [pc, #172]	; (8001454 <DATA_LOGGER_Init+0x50c>)
 80013a8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80013ae:	220d      	movs	r2, #13
 80013b0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c

	//Propulsion
	DEFINE_DATA(DATA_ID_PROP_THRUST, (uint8_t*)&sys->propulsion.consigne[PROP_CONSIGNE_THRUST], 								DATA_FORMAT_16B_UINT16,  	name_prop_thrust, 								FALSE);
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80013be:	2212      	movs	r2, #18
 80013c0:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <DATA_LOGGER_Init+0x4f0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f603 1312 	addw	r3, r3, #2322	; 0x912
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80013ce:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80013d4:	222a      	movs	r2, #42	; 0x2a
 80013d6:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80013dc:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <DATA_LOGGER_Init+0x510>)
 80013de:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80013e4:	220b      	movs	r2, #11
 80013e6:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4


	//Others
	DEFINE_DATA(DATA_ID_FLIGHT_MODE, sys->soft.flight_mode, 																	DATA_FORMAT_8B, 			name_flight_mode, 								FALSE);
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 80013f4:	2209      	movs	r2, #9
 80013f6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <DATA_LOGGER_Init+0x4f0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8d3 3b14 	ldr.w	r3, [r3, #2836]	; 0xb14
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001404:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800140a:	2214      	movs	r2, #20
 800140c:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <DATA_LOGGER_Init+0x514>)
 8001414:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 800141a:	220b      	movs	r2, #11
 800141c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <DATA_LOGGER_Init+0x4ec>)
 8001422:	2200      	movs	r2, #0
 8001424:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec


}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	20001864 	.word	0x20001864
 8001438:	20001860 	.word	0x20001860
 800143c:	2000009c 	.word	0x2000009c
 8001440:	200000ac 	.word	0x200000ac
 8001444:	200000f8 	.word	0x200000f8
 8001448:	20000114 	.word	0x20000114
 800144c:	20000104 	.word	0x20000104
 8001450:	20000124 	.word	0x20000124
 8001454:	20000134 	.word	0x20000134
 8001458:	200000ec 	.word	0x200000ec
 800145c:	20000144 	.word	0x20000144

08001460 <DATA_LOGGER_Start>:

void DATA_LOGGER_Start(){
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <DATA_LOGGER_Start+0x14>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20001aa8 	.word	0x20001aa8

08001478 <DATA_LOGGER_Stop>:

void DATA_LOGGER_Stop(){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <DATA_LOGGER_Stop+0x14>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	20001aac 	.word	0x20001aac

08001490 <DATA_LOGGER_Main>:

void DATA_LOGGER_Main(void){
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0

	static data_logger_state_e previous_state 	= LOGGER_TRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8001496:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <DATA_LOGGER_Main+0x1b4>)
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <DATA_LOGGER_Main+0x1b8>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	bf14      	ite	ne
 80014a2:	2301      	movne	r3, #1
 80014a4:	2300      	moveq	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	603b      	str	r3, [r7, #0]
	previous_state = state ;
 80014aa:	4b67      	ldr	r3, [pc, #412]	; (8001648 <DATA_LOGGER_Main+0x1b8>)
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	4b65      	ldr	r3, [pc, #404]	; (8001644 <DATA_LOGGER_Main+0x1b4>)
 80014b0:	701a      	strb	r2, [r3, #0]

	switch(state){
 80014b2:	4b65      	ldr	r3, [pc, #404]	; (8001648 <DATA_LOGGER_Main+0x1b8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d036      	beq.n	8001528 <DATA_LOGGER_Main+0x98>
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d07e      	beq.n	80015bc <DATA_LOGGER_Main+0x12c>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d000      	beq.n	80014c4 <DATA_LOGGER_Main+0x34>
				}
			}
			break;
	}

}
 80014c2:	e0ba      	b.n	800163a <DATA_LOGGER_Main+0x1aa>
			if(entrance){
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <DATA_LOGGER_Main+0x42>
				SCHEDULER_reschedule_task(TASK_LOGGER, 2000000);
 80014ca:	4960      	ldr	r1, [pc, #384]	; (800164c <DATA_LOGGER_Main+0x1bc>)
 80014cc:	200d      	movs	r0, #13
 80014ce:	f002 f84b 	bl	8003568 <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(DATA_ID_CONFIG_REQUEST, tmp);
 80014d2:	495f      	ldr	r1, [pc, #380]	; (8001650 <DATA_LOGGER_Main+0x1c0>)
 80014d4:	2013      	movs	r0, #19
 80014d6:	f000 fa4d 	bl	8001974 <DATA_LOGGER_Get_Data_Config>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b5d      	ldr	r3, [pc, #372]	; (8001654 <DATA_LOGGER_Main+0x1c4>)
 80014e0:	701a      	strb	r2, [r3, #0]
			TELEMETRY_Send_Data(tmp, tmp_len);
 80014e2:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <DATA_LOGGER_Main+0x1c4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4859      	ldr	r0, [pc, #356]	; (8001650 <DATA_LOGGER_Main+0x1c0>)
 80014ea:	f005 fa9d 	bl	8006a28 <TELEMETRY_Send_Data>
			if(start_flag){
 80014ee:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <DATA_LOGGER_Main+0x1c8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80a0 	beq.w	8001638 <DATA_LOGGER_Main+0x1a8>
				start_flag = FALSE;
 80014f8:	4b57      	ldr	r3, [pc, #348]	; (8001658 <DATA_LOGGER_Main+0x1c8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
				stop_flag = FALSE;
 80014fe:	4b57      	ldr	r3, [pc, #348]	; (800165c <DATA_LOGGER_Main+0x1cc>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
				if(config_not_sent){
 8001504:	4b56      	ldr	r3, [pc, #344]	; (8001660 <DATA_LOGGER_Main+0x1d0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d009      	beq.n	8001520 <DATA_LOGGER_Main+0x90>
					id_init_counter = 0;
 800150c:	4b55      	ldr	r3, [pc, #340]	; (8001664 <DATA_LOGGER_Main+0x1d4>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 8001512:	4b55      	ldr	r3, [pc, #340]	; (8001668 <DATA_LOGGER_Main+0x1d8>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 8001518:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <DATA_LOGGER_Main+0x1b8>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
			break;
 800151e:	e08b      	b.n	8001638 <DATA_LOGGER_Main+0x1a8>
					state = LOGGER_LOG;
 8001520:	4b49      	ldr	r3, [pc, #292]	; (8001648 <DATA_LOGGER_Main+0x1b8>)
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
			break;
 8001526:	e087      	b.n	8001638 <DATA_LOGGER_Main+0x1a8>
			if(entrance)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00a      	beq.n	8001544 <DATA_LOGGER_Main+0xb4>
				SCHEDULER_reschedule_task(TASK_LOGGER, 500000);	//On abaisse la fréquence de la tâche pendant l'init
 800152e:	494f      	ldr	r1, [pc, #316]	; (800166c <DATA_LOGGER_Main+0x1dc>)
 8001530:	200d      	movs	r0, #13
 8001532:	f002 f819 	bl	8003568 <SCHEDULER_reschedule_task>
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 8001536:	e005      	b.n	8001544 <DATA_LOGGER_Main+0xb4>
				id_init_counter ++ ;
 8001538:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <DATA_LOGGER_Main+0x1d4>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b48      	ldr	r3, [pc, #288]	; (8001664 <DATA_LOGGER_Main+0x1d4>)
 8001542:	701a      	strb	r2, [r3, #0]
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 8001544:	4b47      	ldr	r3, [pc, #284]	; (8001664 <DATA_LOGGER_Main+0x1d4>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	4a49      	ldr	r2, [pc, #292]	; (8001670 <DATA_LOGGER_Main+0x1e0>)
 800154c:	460b      	mov	r3, r1
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	440b      	add	r3, r1
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	3314      	adds	r3, #20
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d103      	bne.n	8001566 <DATA_LOGGER_Main+0xd6>
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <DATA_LOGGER_Main+0x1d4>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b17      	cmp	r3, #23
 8001564:	d9e8      	bls.n	8001538 <DATA_LOGGER_Main+0xa8>
			if(id_init_counter < DATA_ID_COUNT){
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <DATA_LOGGER_Main+0x1d4>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b17      	cmp	r3, #23
 800156c:	d817      	bhi.n	800159e <DATA_LOGGER_Main+0x10e>
				is_any_data_used = TRUE;
 800156e:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <DATA_LOGGER_Main+0x1d8>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8001574:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <DATA_LOGGER_Main+0x1d4>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	b2d1      	uxtb	r1, r2
 800157c:	4a39      	ldr	r2, [pc, #228]	; (8001664 <DATA_LOGGER_Main+0x1d4>)
 800157e:	7011      	strb	r1, [r2, #0]
 8001580:	4933      	ldr	r1, [pc, #204]	; (8001650 <DATA_LOGGER_Main+0x1c0>)
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f9f6 	bl	8001974 <DATA_LOGGER_Get_Data_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <DATA_LOGGER_Main+0x1c4>)
 800158e:	701a      	strb	r2, [r3, #0]
				TELEMETRY_Send_Data(tmp, tmp_len);
 8001590:	4b30      	ldr	r3, [pc, #192]	; (8001654 <DATA_LOGGER_Main+0x1c4>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	482e      	ldr	r0, [pc, #184]	; (8001650 <DATA_LOGGER_Main+0x1c0>)
 8001598:	f005 fa46 	bl	8006a28 <TELEMETRY_Send_Data>
			break;
 800159c:	e04d      	b.n	800163a <DATA_LOGGER_Main+0x1aa>
				if(is_any_data_used)
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <DATA_LOGGER_Main+0x1d8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <DATA_LOGGER_Main+0x124>
					config_not_sent = FALSE ;
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <DATA_LOGGER_Main+0x1d0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
					state = LOGGER_LOG ;
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <DATA_LOGGER_Main+0x1b8>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	701a      	strb	r2, [r3, #0]
			break;
 80015b2:	e042      	b.n	800163a <DATA_LOGGER_Main+0x1aa>
					state = LOGGER_IDDLE ;
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <DATA_LOGGER_Main+0x1b8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
			break;
 80015ba:	e03e      	b.n	800163a <DATA_LOGGER_Main+0x1aa>
			if(entrance)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d004      	beq.n	80015cc <DATA_LOGGER_Main+0x13c>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);	//On reprend une fréquence plus importante pour l'envoit en flux continu
 80015c2:	f242 7110 	movw	r1, #10000	; 0x2710
 80015c6:	200d      	movs	r0, #13
 80015c8:	f001 ffce 	bl	8003568 <SCHEDULER_reschedule_task>
			if(stop_flag)
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <DATA_LOGGER_Main+0x1cc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <DATA_LOGGER_Main+0x14a>
				state = LOGGER_IDDLE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <DATA_LOGGER_Main+0x1b8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	e027      	b.n	8001630 <DATA_LOGGER_Main+0x1a0>
				if(data_list[d].used && (data_list[d].format != DATA_FORMAT_0B_BUTTON))
 80015e0:	79fa      	ldrb	r2, [r7, #7]
 80015e2:	4923      	ldr	r1, [pc, #140]	; (8001670 <DATA_LOGGER_Main+0x1e0>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	3314      	adds	r3, #20
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d019      	beq.n	800162a <DATA_LOGGER_Main+0x19a>
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	491d      	ldr	r1, [pc, #116]	; (8001670 <DATA_LOGGER_Main+0x1e0>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	3309      	adds	r3, #9
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00e      	beq.n	800162a <DATA_LOGGER_Main+0x19a>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4910      	ldr	r1, [pc, #64]	; (8001650 <DATA_LOGGER_Main+0x1c0>)
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f8c9 	bl	80017a8 <DATA_LOGGER_Get_Data_Value>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <DATA_LOGGER_Main+0x1c4>)
 800161c:	701a      	strb	r2, [r3, #0]
					TELEMETRY_Send_Data(tmp, tmp_len);
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <DATA_LOGGER_Main+0x1c4>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	480a      	ldr	r0, [pc, #40]	; (8001650 <DATA_LOGGER_Main+0x1c0>)
 8001626:	f005 f9ff 	bl	8006a28 <TELEMETRY_Send_Data>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	3301      	adds	r3, #1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b17      	cmp	r3, #23
 8001634:	d9d4      	bls.n	80015e0 <DATA_LOGGER_Main+0x150>
			break;
 8001636:	e000      	b.n	800163a <DATA_LOGGER_Main+0x1aa>
			break;
 8001638:	bf00      	nop
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000150 	.word	0x20000150
 8001648:	20001aa4 	.word	0x20001aa4
 800164c:	001e8480 	.word	0x001e8480
 8001650:	20001ab0 	.word	0x20001ab0
 8001654:	20001ac4 	.word	0x20001ac4
 8001658:	20001aa8 	.word	0x20001aa8
 800165c:	20001aac 	.word	0x20001aac
 8001660:	20000000 	.word	0x20000000
 8001664:	20001ac5 	.word	0x20001ac5
 8001668:	20001ac8 	.word	0x20001ac8
 800166c:	0007a120 	.word	0x0007a120
 8001670:	20001864 	.word	0x20001864

08001674 <DATA_LOGGER_Reception>:

void DATA_LOGGER_Reception(uint8_t * input_buffer){
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	73fb      	strb	r3, [r7, #15]

	switch(data_list[id].format){
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	4946      	ldr	r1, [pc, #280]	; (80017a0 <DATA_LOGGER_Reception+0x12c>)
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3309      	adds	r3, #9
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b29      	cmp	r3, #41	; 0x29
 8001696:	d87d      	bhi.n	8001794 <DATA_LOGGER_Reception+0x120>
 8001698:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <DATA_LOGGER_Reception+0x2c>)
 800169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169e:	bf00      	nop
 80016a0:	08001749 	.word	0x08001749
 80016a4:	08001795 	.word	0x08001795
 80016a8:	08001795 	.word	0x08001795
 80016ac:	08001795 	.word	0x08001795
 80016b0:	08001795 	.word	0x08001795
 80016b4:	08001795 	.word	0x08001795
 80016b8:	08001795 	.word	0x08001795
 80016bc:	08001795 	.word	0x08001795
 80016c0:	08001795 	.word	0x08001795
 80016c4:	08001795 	.word	0x08001795
 80016c8:	08001795 	.word	0x08001795
 80016cc:	08001795 	.word	0x08001795
 80016d0:	08001795 	.word	0x08001795
 80016d4:	08001795 	.word	0x08001795
 80016d8:	08001795 	.word	0x08001795
 80016dc:	08001795 	.word	0x08001795
 80016e0:	08001795 	.word	0x08001795
 80016e4:	08001795 	.word	0x08001795
 80016e8:	08001795 	.word	0x08001795
 80016ec:	08001795 	.word	0x08001795
 80016f0:	08001795 	.word	0x08001795
 80016f4:	08001795 	.word	0x08001795
 80016f8:	08001795 	.word	0x08001795
 80016fc:	08001795 	.word	0x08001795
 8001700:	08001795 	.word	0x08001795
 8001704:	08001795 	.word	0x08001795
 8001708:	08001795 	.word	0x08001795
 800170c:	08001795 	.word	0x08001795
 8001710:	08001795 	.word	0x08001795
 8001714:	08001795 	.word	0x08001795
 8001718:	08001795 	.word	0x08001795
 800171c:	08001795 	.word	0x08001795
 8001720:	08001795 	.word	0x08001795
 8001724:	08001795 	.word	0x08001795
 8001728:	08001795 	.word	0x08001795
 800172c:	08001795 	.word	0x08001795
 8001730:	08001795 	.word	0x08001795
 8001734:	08001795 	.word	0x08001795
 8001738:	08001795 	.word	0x08001795
 800173c:	08001795 	.word	0x08001795
 8001740:	08001795 	.word	0x08001795
 8001744:	08001795 	.word	0x08001795
		case DATA_FORMAT_0B_BUTTON:
			//We can create an action for each id
			switch(id)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	3b13      	subs	r3, #19
 800174c:	2b04      	cmp	r3, #4
 800174e:	d81f      	bhi.n	8001790 <DATA_LOGGER_Reception+0x11c>
 8001750:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <DATA_LOGGER_Reception+0xe4>)
 8001752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001756:	bf00      	nop
 8001758:	0800176d 	.word	0x0800176d
 800175c:	0800177d 	.word	0x0800177d
 8001760:	08001775 	.word	0x08001775
 8001764:	08001785 	.word	0x08001785
 8001768:	0800178b 	.word	0x0800178b
			{
				default:
					break;
				case DATA_ID_CONFIG_REQUEST:
					start_flag = TRUE;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <DATA_LOGGER_Reception+0x130>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]
					break;
 8001772:	e00e      	b.n	8001792 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_ENABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8001774:	2001      	movs	r0, #1
 8001776:	f002 fd4f 	bl	8004218 <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 800177a:	e00a      	b.n	8001792 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_DISABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 800177c:	2000      	movs	r0, #0
 800177e:	f002 fd4b 	bl	8004218 <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 8001782:	e006      	b.n	8001792 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_START_TRANSFER:
					DATA_LOGGER_Start();
 8001784:	f7ff fe6c 	bl	8001460 <DATA_LOGGER_Start>
					break;
 8001788:	e003      	b.n	8001792 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_STOP_TRANSFER:
					DATA_LOGGER_Stop();
 800178a:	f7ff fe75 	bl	8001478 <DATA_LOGGER_Stop>
					break;
 800178e:	e000      	b.n	8001792 <DATA_LOGGER_Reception+0x11e>
					break;
 8001790:	bf00      	nop
			}
			break;
 8001792:	e000      	b.n	8001796 <DATA_LOGGER_Reception+0x122>
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			break;
		default:
			break;
 8001794:	bf00      	nop

	}
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20001864 	.word	0x20001864
 80017a4:	20001aa8 	.word	0x20001aa8

080017a8 <DATA_LOGGER_Get_Data_Value>:

uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer){
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	73fb      	strb	r3, [r7, #15]

//	uint16_t tmp_u16 = 0;
	int16_t tmp_16 = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]

	//Premier octet contient l'id
	buffer[0] = id ;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	701a      	strb	r2, [r3, #0]

	//Formatage de la donnée en fonction du type et du format
	switch(data_list[id].format){
 80017c4:	7bfa      	ldrb	r2, [r7, #15]
 80017c6:	4969      	ldr	r1, [pc, #420]	; (800196c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3309      	adds	r3, #9
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	3b14      	subs	r3, #20
 80017d8:	2b17      	cmp	r3, #23
 80017da:	f200 80af 	bhi.w	800193c <DATA_LOGGER_Get_Data_Value+0x194>
 80017de:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <DATA_LOGGER_Get_Data_Value+0x3c>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	08001845 	.word	0x08001845
 80017e8:	0800193d 	.word	0x0800193d
 80017ec:	0800193d 	.word	0x0800193d
 80017f0:	08001861 	.word	0x08001861
 80017f4:	0800193d 	.word	0x0800193d
 80017f8:	0800193d 	.word	0x0800193d
 80017fc:	0800193d 	.word	0x0800193d
 8001800:	0800193d 	.word	0x0800193d
 8001804:	0800193d 	.word	0x0800193d
 8001808:	0800193d 	.word	0x0800193d
 800180c:	0800193d 	.word	0x0800193d
 8001810:	0800193d 	.word	0x0800193d
 8001814:	0800193d 	.word	0x0800193d
 8001818:	0800193d 	.word	0x0800193d
 800181c:	0800193d 	.word	0x0800193d
 8001820:	0800193d 	.word	0x0800193d
 8001824:	0800193d 	.word	0x0800193d
 8001828:	0800193d 	.word	0x0800193d
 800182c:	0800193d 	.word	0x0800193d
 8001830:	0800193d 	.word	0x0800193d
 8001834:	0800193d 	.word	0x0800193d
 8001838:	08001891 	.word	0x08001891
 800183c:	080018d9 	.word	0x080018d9
 8001840:	0800190b 	.word	0x0800190b
		case DATA_FORMAT_8B:
			buffer[1] = *data_list[id].data ;
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	4949      	ldr	r1, [pc, #292]	; (800196c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	440b      	add	r3, r1
 8001852:	3304      	adds	r3, #4
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3301      	adds	r3, #1
 800185a:	7812      	ldrb	r2, [r2, #0]
 800185c:	701a      	strb	r2, [r3, #0]
			break;
 800185e:	e06e      	b.n	800193e <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_8B_PWM:
			break;
		case DATA_FORMAT_8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	4942      	ldr	r1, [pc, #264]	; (800196c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3304      	adds	r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8001876:	edd7 7a04 	vldr	s15, [r7, #16]
 800187a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800187e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001882:	793b      	ldrb	r3, [r7, #4]
 8001884:	b25a      	sxtb	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3301      	adds	r3, #1
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]
			break;
 800188e:	e056      	b.n	800193e <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_8B_FLOAT_1D:
			break;
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	4936      	ldr	r1, [pc, #216]	; (800196c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	3304      	adds	r3, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 80018a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b6:	ee17 3a90 	vmov	r3, s15
 80018ba:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	121b      	asrs	r3, r3, #8
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	3302      	adds	r3, #2
 80018d0:	8afa      	ldrh	r2, [r7, #22]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]
			break;
 80018d6:	e032      	b.n	800193e <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	4924      	ldr	r1, [pc, #144]	; (800196c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	3304      	adds	r3, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80018ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018f2:	121b      	asrs	r3, r3, #8
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3301      	adds	r3, #1
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	3302      	adds	r3, #2
 8001902:	8afa      	ldrh	r2, [r7, #22]
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	701a      	strb	r2, [r3, #0]
			break;
 8001908:	e019      	b.n	800193e <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	4917      	ldr	r1, [pc, #92]	; (800196c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3304      	adds	r3, #4
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001920:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001924:	121b      	asrs	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	3301      	adds	r3, #1
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3302      	adds	r3, #2
 8001934:	8afa      	ldrh	r2, [r7, #22]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]
			break;
 800193a:	e000      	b.n	800193e <DATA_LOGGER_Get_Data_Value+0x196>
		default:
			break;
 800193c:	bf00      	nop
	}

	//Return the len of data
	return (data_list[id].format / 20) + 1;
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	490a      	ldr	r1, [pc, #40]	; (800196c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	3309      	adds	r3, #9
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <DATA_LOGGER_Get_Data_Value+0x1c8>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3301      	adds	r3, #1
 800195c:	b2db      	uxtb	r3, r3

}
 800195e:	4618      	mov	r0, r3
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20001864 	.word	0x20001864
 8001970:	cccccccd 	.word	0xcccccccd

08001974 <DATA_LOGGER_Get_Data_Config>:

uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer){
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
	//New data so we start with 255
	buffer[0] = 255;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	22ff      	movs	r2, #255	; 0xff
 8001984:	701a      	strb	r2, [r3, #0]
	//Then name len
	buffer[1] = data_list[id].len_name;
 8001986:	79fa      	ldrb	r2, [r7, #7]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	1c59      	adds	r1, r3, #1
 800198c:	481f      	ldr	r0, [pc, #124]	; (8001a0c <DATA_LOGGER_Get_Data_Config+0x98>)
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4403      	add	r3, r0
 8001998:	3310      	adds	r3, #16
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	700b      	strb	r3, [r1, #0]
	//Then format
	buffer[2] = data_list[id].format ;
 800199e:	79fa      	ldrb	r2, [r7, #7]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	1c99      	adds	r1, r3, #2
 80019a4:	4819      	ldr	r0, [pc, #100]	; (8001a0c <DATA_LOGGER_Get_Data_Config+0x98>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4403      	add	r3, r0
 80019b0:	3309      	adds	r3, #9
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	700b      	strb	r3, [r1, #0]
	//Taille du nom
	buffer[3] = id	 ;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3303      	adds	r3, #3
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	701a      	strb	r2, [r3, #0]
	//Copie du nom
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	1d18      	adds	r0, r3, #4
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	4911      	ldr	r1, [pc, #68]	; (8001a0c <DATA_LOGGER_Get_Data_Config+0x98>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	330c      	adds	r3, #12
 80019d2:	681c      	ldr	r4, [r3, #0]
 80019d4:	79fa      	ldrb	r2, [r7, #7]
 80019d6:	490d      	ldr	r1, [pc, #52]	; (8001a0c <DATA_LOGGER_Get_Data_Config+0x98>)
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	3310      	adds	r3, #16
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4621      	mov	r1, r4
 80019ea:	f00a fc25 	bl	800c238 <memcpy>

	//And that s it
	return 4 + data_list[id].len_name ;
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	4906      	ldr	r1, [pc, #24]	; (8001a0c <DATA_LOGGER_Get_Data_Config+0x98>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	3310      	adds	r3, #16
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	3304      	adds	r3, #4
 8001a02:	b2db      	uxtb	r3, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}
 8001a0c:	20001864 	.word	0x20001864

08001a10 <DATA_LOGGER_Get_Data>:

data_t * DATA_LOGGER_Get_Data(data_id_e id){
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8001a1a:	79fa      	ldrb	r2, [r7, #7]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <DATA_LOGGER_Get_Data+0x24>)
 8001a26:	4413      	add	r3, r2
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	20001864 	.word	0x20001864

08001a38 <angle_180>:
static float absolu(float x);
//static float acc_correction(float x);
static float angle_180(float x);


static float angle_180(float x){
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 180)
 8001a42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a46:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001a9c <angle_180+0x64>
 8001a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	dd08      	ble.n	8001a66 <angle_180+0x2e>
		x -= 360;
 8001a54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a58:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001aa0 <angle_180+0x68>
 8001a5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a60:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a64:	e010      	b.n	8001a88 <angle_180+0x50>
	else if( x < -180)
 8001a66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a6a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001aa4 <angle_180+0x6c>
 8001a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a76:	d507      	bpl.n	8001a88 <angle_180+0x50>
		x += 360 ;
 8001a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001aa0 <angle_180+0x68>
 8001a80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a84:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	ee07 3a90 	vmov	s15, r3
}
 8001a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	43340000 	.word	0x43340000
 8001aa0:	43b40000 	.word	0x43b40000
 8001aa4:	c3340000 	.word	0xc3340000

08001aa8 <absolu>:

static float absolu(float x){
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	ed87 0a01 	vstr	s0, [r7, #4]
	if( x > 0)
 8001ab2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	dd02      	ble.n	8001ac6 <absolu+0x1e>
		return x ;
 8001ac0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac4:	e003      	b.n	8001ace <absolu+0x26>
	else
		return -x ;
 8001ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aca:	eef1 7a67 	vneg.f32	s15, s15
}
 8001ace:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <ORIENTATION_Init>:
//static float acc_correction(float x){
//	x = ( x > 0) ? 180 - x : -180 -x ;
//	return x ;
//}

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
	//Link data structures
	orientation->acc = acc ;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
	orientation->gyro = gyro ;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	621a      	str	r2, [r3, #32]
	orientation->angular_velocity = gyro->filtered ;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f103 0208 	add.w	r2, r3, #8
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	60da      	str	r2, [r3, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
	orientation->periode = (float)1 / (float)frequency ;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	orientation->alpha = ORIENTATION_ALPHA ;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <ORIENTATION_Init+0x84>)
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e011      	b.n	8001b4e <ORIENTATION_Init+0x72>
	{
		orientation->angular_position[x] = 0 ;
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
		orientation->angular_velocity[x] = 0 ;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < 3; x++)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	ddea      	ble.n	8001b2a <ORIENTATION_Init+0x4e>
	}

}
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	3f7f7cee 	.word	0x3f7f7cee

08001b64 <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	//Just to make the code lighter
	acc_t * acc = orientation->acc ;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_t * gyro = orientation->gyro ;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	623b      	str	r3, [r7, #32]

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ACC_AXE_X] * acc->filtered[ACC_AXE_X] ;
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b88:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ACC_AXE_Y] * acc->filtered[ACC_AXE_Y] ;
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba4:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ACC_AXE_Z] * acc->filtered[ACC_AXE_Z] ;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc0:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total = sqrtf(acc_total);
 8001bc4:	ed97 0a07 	vldr	s0, [r7, #28]
 8001bc8:	f00d f82c 	bl	800ec24 <sqrtf>
 8001bcc:	ed87 0a07 	vstr	s0, [r7, #28]

	if(acc_total)	//To avoid /0
 8001bd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d049      	beq.n	8001c72 <ORIENTATION_Update+0x10e>
	{
		if(absolu(acc->filtered[ACC_AXE_X]) < acc_total)	//To avoid asin x with x greater than 1
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001be4:	eeb0 0a67 	vmov.f32	s0, s15
 8001be8:	f7ff ff5e 	bl	8001aa8 <absolu>
 8001bec:	eeb0 7a40 	vmov.f32	s14, s0
 8001bf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	dd15      	ble.n	8001c2a <ORIENTATION_Update+0xc6>
			orientation->acc_angles[ACC_AXE_Y] = -asinf(acc->filtered[ACC_AXE_X] / acc_total) * 57.32f;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c0c:	eeb0 0a66 	vmov.f32	s0, s13
 8001c10:	f00c ffb0 	bl	800eb74 <asinf>
 8001c14:	eef0 7a40 	vmov.f32	s15, s0
 8001c18:	eef1 7a67 	vneg.f32	s15, s15
 8001c1c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001e04 <ORIENTATION_Update+0x2a0>
 8001c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	edc3 7a05 	vstr	s15, [r3, #20]
		if(absolu(acc->filtered[ACC_AXE_Y]) < acc_total) 	//To avoid asin x with x greater than 1
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c30:	eeb0 0a67 	vmov.f32	s0, s15
 8001c34:	f7ff ff38 	bl	8001aa8 <absolu>
 8001c38:	eeb0 7a40 	vmov.f32	s14, s0
 8001c3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	dd13      	ble.n	8001c72 <ORIENTATION_Update+0x10e>
			orientation->acc_angles[ACC_AXE_X] = asinf(acc->filtered[ACC_AXE_Y] / acc_total) * 57.32f;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c50:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c58:	eeb0 0a66 	vmov.f32	s0, s13
 8001c5c:	f00c ff8a 	bl	800eb74 <asinf>
 8001c60:	eeb0 7a40 	vmov.f32	s14, s0
 8001c64:	eddf 7a67 	vldr	s15, [pc, #412]	; 8001e04 <ORIENTATION_Update+0x2a0>
 8001c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	edc3 7a04 	vstr	s15, [r3, #16]
//			orientation->acc_angles[ACC_AXE_Y] = acc_correction(orientation->acc_angles[ACC_AXE_Y]);
//		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 8001c72:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <ORIENTATION_Update+0x2a4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00f      	beq.n	8001c9a <ORIENTATION_Update+0x136>
	{
		orientation->angular_position[GYRO_AXE_X] = orientation->acc_angles[ACC_AXE_X] ;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->acc_angles[ACC_AXE_Y] ;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	605a      	str	r2, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] = 0 ;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
		first_use = FALSE ;
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <ORIENTATION_Update+0x2a4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];



	}
}
 8001c98:	e0af      	b.n	8001dfa <ORIENTATION_Update+0x296>
		float dx = gyro->filtered[GYRO_AXE_X] * orientation->periode ;
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	edc7 7a06 	vstr	s15, [r7, #24]
		float dy = gyro->filtered[GYRO_AXE_Y] * orientation->periode ;
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbe:	edc7 7a05 	vstr	s15, [r7, #20]
		float dz = gyro->filtered[GYRO_AXE_Z] * orientation->periode ;
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd2:	edc7 7a04 	vstr	s15, [r7, #16]
		orientation->angular_position[GYRO_AXE_X] += dx ;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	ed93 7a00 	vldr	s14, [r3]
 8001cdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] += dy ;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] += dz ;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d04:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	edc3 7a02 	vstr	s15, [r3, #8]
		float sin_dz = sinf(0.017f * dz);
 8001d12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d16:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001e0c <ORIENTATION_Update+0x2a8>
 8001d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d22:	f00c fee5 	bl	800eaf0 <sinf>
 8001d26:	ed87 0a03 	vstr	s0, [r7, #12]
		orientation->angular_position[GYRO_AXE_X] += sin_dz * orientation->angular_position[GYRO_AXE_Y] ;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	ed93 7a00 	vldr	s14, [r3]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] -= sin_dz * orientation->angular_position[GYRO_AXE_X] ;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	edd3 6a00 	vldr	s13, [r3]
 8001d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_X] = angle_180(orientation->angular_position[GYRO_AXE_X]);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d70:	f7ff fe62 	bl	8001a38 <angle_180>
 8001d74:	eef0 7a40 	vmov.f32	s15, s0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = angle_180(orientation->angular_position[GYRO_AXE_Y]);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d84:	eeb0 0a67 	vmov.f32	s0, s15
 8001d88:	f7ff fe56 	bl	8001a38 <angle_180>
 8001d8c:	eef0 7a40 	vmov.f32	s15, s0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_X] = orientation->alpha * orientation->angular_position[GYRO_AXE_X] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_X];
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001dac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001db0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001de2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	; 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	426547ae 	.word	0x426547ae
 8001e08:	20000154 	.word	0x20000154
 8001e0c:	3c8b4396 	.word	0x3c8b4396

08001e10 <arming_entrance>:
static state_arming_e state = 0;
static uint8_t state_vroum_vroum = 0;
static uint32_t next_change = 0 ;
static float elapsed = 0 ;

void arming_entrance(system_t * sys){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f002 f9fd 	bl	8004218 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f002 fb52 	bl	80044c8 <REGULATION_POSITION_Set_Regulation_Mode>
	sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2228      	movs	r2, #40	; 0x28
 8001e28:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_10, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 fb49 	bl	80024cc <IHM_Set_Sequences>
	state = ARMING_THROTTLE_LOW ;
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <arming_entrance+0x40>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
	state_vroum_vroum= 0 ;
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <arming_entrance+0x44>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20001acc 	.word	0x20001acc
 8001e54:	20001acd 	.word	0x20001acd

08001e58 <arming_main>:

void arming_main(system_t * sys, uint32_t time_us){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]



	switch(state){
 8001e62:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <arming_main+0x1f8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d019      	beq.n	8001e9e <arming_main+0x46>
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d036      	beq.n	8001edc <arming_main+0x84>
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d000      	beq.n	8001e74 <arming_main+0x1c>
				default:
					break;
			}
			break;
	}
}
 8001e72:	e0e8      	b.n	8002046 <arming_main+0x1ee>
			if(sys->radio.controller.channels[2]<1100){
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	f240 424b 	movw	r2, #1099	; 0x44b
 8001e82:	4293      	cmp	r3, r2
 8001e84:	f200 80dc 	bhi.w	8002040 <arming_main+0x1e8>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_11, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 8001e90:	2000      	movs	r0, #0
 8001e92:	f000 fb1b 	bl	80024cc <IHM_Set_Sequences>
				state = ARMING_STICK_ON_THE_RIGHT;
 8001e96:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <arming_main+0x1f8>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
			break;
 8001e9c:	e0d0      	b.n	8002040 <arming_main+0x1e8>
			if(sys->radio.controller.channels[3]>1950 && sys->radio.controller.channels[2]<1100){
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001ea4:	3306      	adds	r3, #6
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	f240 729e 	movw	r2, #1950	; 0x79e
 8001eac:	4293      	cmp	r3, r2
 8001eae:	f240 80c9 	bls.w	8002044 <arming_main+0x1ec>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001eb8:	3304      	adds	r3, #4
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	f240 424b 	movw	r2, #1099	; 0x44b
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	f200 80bf 	bhi.w	8002044 <arming_main+0x1ec>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_ON, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f000 fafc 	bl	80024cc <IHM_Set_Sequences>
				state = ARMING_VROUM_VOUM;
 8001ed4:	4b5e      	ldr	r3, [pc, #376]	; (8002050 <arming_main+0x1f8>)
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	701a      	strb	r2, [r3, #0]
			break;
 8001eda:	e0b3      	b.n	8002044 <arming_main+0x1ec>
			switch(state_vroum_vroum){
 8001edc:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <arming_main+0x1fc>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	f200 80a3 	bhi.w	800202c <arming_main+0x1d4>
 8001ee6:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <arming_main+0x94>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f01 	.word	0x08001f01
 8001ef0:	08001f25 	.word	0x08001f25
 8001ef4:	08001fb3 	.word	0x08001fb3
 8001ef8:	08001fe1 	.word	0x08001fe1
 8001efc:	0800200f 	.word	0x0800200f
					next_change = time_us + PERIODE_1;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 8001f06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f0a:	4a53      	ldr	r2, [pc, #332]	; (8002058 <arming_main+0x200>)
 8001f0c:	6013      	str	r3, [r2, #0]
					sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	22c8      	movs	r2, #200	; 0xc8
 8001f12:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
					state_vroum_vroum++;
 8001f16:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <arming_main+0x1fc>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <arming_main+0x1fc>)
 8001f20:	701a      	strb	r2, [r3, #0]
					break;
 8001f22:	e08c      	b.n	800203e <arming_main+0x1e6>
					elapsed = (float)time_us - (float)(next_change-PERIODE_1);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <arming_main+0x200>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f5a3 23c3 	sub.w	r3, r3, #399360	; 0x61800
 8001f36:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f46:	4b45      	ldr	r3, [pc, #276]	; (800205c <arming_main+0x204>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
					elapsed /= (float)PERIODE_1;
 8001f4c:	4b43      	ldr	r3, [pc, #268]	; (800205c <arming_main+0x204>)
 8001f4e:	ed93 7a00 	vldr	s14, [r3]
 8001f52:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002060 <arming_main+0x208>
 8001f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f5a:	4b40      	ldr	r3, [pc, #256]	; (800205c <arming_main+0x204>)
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
					sys->regulation.position.consigne = MOTORS_LOW_POWER + (uint32_t)((float)(MOTORS_HIGH_POWER - MOTORS_LOW_POWER) * elapsed);
 8001f60:	4b3e      	ldr	r3, [pc, #248]	; (800205c <arming_main+0x204>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002064 <arming_main+0x20c>
 8001f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f72:	ee17 3a90 	vmov	r3, s15
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3328      	adds	r3, #40	; 0x28
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b21a      	sxth	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
					if(time_us > next_change){
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <arming_main+0x200>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d950      	bls.n	8002030 <arming_main+0x1d8>
						next_change = time_us + PERIODE_2;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8001f94:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8001f98:	4a2f      	ldr	r2, [pc, #188]	; (8002058 <arming_main+0x200>)
 8001f9a:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2228      	movs	r2, #40	; 0x28
 8001fa0:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
						state_vroum_vroum++;
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <arming_main+0x1fc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b29      	ldr	r3, [pc, #164]	; (8002054 <arming_main+0x1fc>)
 8001fae:	701a      	strb	r2, [r3, #0]
					break;
 8001fb0:	e03e      	b.n	8002030 <arming_main+0x1d8>
					if(time_us > next_change){
 8001fb2:	4b29      	ldr	r3, [pc, #164]	; (8002058 <arming_main+0x200>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d93b      	bls.n	8002034 <arming_main+0x1dc>
						next_change = time_us + PERIODE_3;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 8001fc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001fc6:	4a24      	ldr	r2, [pc, #144]	; (8002058 <arming_main+0x200>)
 8001fc8:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	22c8      	movs	r2, #200	; 0xc8
 8001fce:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
						state_vroum_vroum++;
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <arming_main+0x1fc>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <arming_main+0x1fc>)
 8001fdc:	701a      	strb	r2, [r3, #0]
					break;
 8001fde:	e029      	b.n	8002034 <arming_main+0x1dc>
					if(time_us > next_change){
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <arming_main+0x200>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d926      	bls.n	8002038 <arming_main+0x1e0>
						next_change = time_us + PERIODE_4;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8001ff0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <arming_main+0x200>)
 8001ff6:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2228      	movs	r2, #40	; 0x28
 8001ffc:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
						state_vroum_vroum++;
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <arming_main+0x1fc>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <arming_main+0x1fc>)
 800200a:	701a      	strb	r2, [r3, #0]
					break;
 800200c:	e014      	b.n	8002038 <arming_main+0x1e0>
					if(time_us > next_change){
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <arming_main+0x200>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d911      	bls.n	800203c <arming_main+0x1e4>
						EVENT_Set_flag(FLAG_ARMED);
 8002018:	2019      	movs	r0, #25
 800201a:	f000 fe51 	bl	8002cc0 <EVENT_Set_flag>
						state_vroum_vroum++;
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <arming_main+0x1fc>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <arming_main+0x1fc>)
 8002028:	701a      	strb	r2, [r3, #0]
					break;
 800202a:	e007      	b.n	800203c <arming_main+0x1e4>
					break;
 800202c:	bf00      	nop
 800202e:	e00a      	b.n	8002046 <arming_main+0x1ee>
					break;
 8002030:	bf00      	nop
 8002032:	e008      	b.n	8002046 <arming_main+0x1ee>
					break;
 8002034:	bf00      	nop
 8002036:	e006      	b.n	8002046 <arming_main+0x1ee>
					break;
 8002038:	bf00      	nop
 800203a:	e004      	b.n	8002046 <arming_main+0x1ee>
					break;
 800203c:	bf00      	nop
			break;
 800203e:	e002      	b.n	8002046 <arming_main+0x1ee>
			break;
 8002040:	bf00      	nop
 8002042:	e000      	b.n	8002046 <arming_main+0x1ee>
			break;
 8002044:	bf00      	nop
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20001acc 	.word	0x20001acc
 8002054:	20001acd 	.word	0x20001acd
 8002058:	20001ad0 	.word	0x20001ad0
 800205c:	20001ad4 	.word	0x20001ad4
 8002060:	48c35000 	.word	0x48c35000
 8002064:	43200000 	.word	0x43200000

08002068 <FLIGHT_MODE_Init>:
		[FLIGHT_MODE_GYRO_ACC_CALIBRATION] = 	DEF_FLIGHT_MODE(FLIGHT_MODE_GYRO_ACC_CALIBRATION, 		gyro_acc_calibration_entrance, 	gyro_acc_calibration_main),

};

//	-------------------------	Public functions	-------------------------
void FLIGHT_MODE_Init(system_t * sys_){
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	sys = sys_;
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <FLIGHT_MODE_Init+0x24>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
	sys->soft.flight_mode = &current_flight_mode;
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <FLIGHT_MODE_Init+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <FLIGHT_MODE_Init+0x28>)
 800207c:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	20001ad8 	.word	0x20001ad8
 8002090:	20001adc 	.word	0x20001adc

08002094 <FLIGHT_MODE_Set_Flight_Mode>:

//Dont call it from an it plz for now ..
void FLIGHT_MODE_Set_Flight_Mode(flight_modes_names_e new){
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
	next_flight_mode = new ;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <FLIGHT_MODE_Set_Flight_Mode+0x1c>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	7013      	strb	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	20001add 	.word	0x20001add

080020b4 <FLIGHT_MODE_Main>:

void FLIGHT_MODE_Main(uint32_t time_us){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	//Check if we have to change the current flight mode
	if(next_flight_mode != current_flight_mode){
 80020bc:	4b25      	ldr	r3, [pc, #148]	; (8002154 <FLIGHT_MODE_Main+0xa0>)
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	4b25      	ldr	r3, [pc, #148]	; (8002158 <FLIGHT_MODE_Main+0xa4>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d02b      	beq.n	8002120 <FLIGHT_MODE_Main+0x6c>

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(flights_modes[current_flight_mode].function_leave != NULL)
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <FLIGHT_MODE_Main+0xa4>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4a23      	ldr	r2, [pc, #140]	; (800215c <FLIGHT_MODE_Main+0xa8>)
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	4413      	add	r3, r2
 80020d2:	330c      	adds	r3, #12
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <FLIGHT_MODE_Main+0x3c>
			flights_modes[current_flight_mode].function_leave(sys);
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <FLIGHT_MODE_Main+0xa4>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	4a1f      	ldr	r2, [pc, #124]	; (800215c <FLIGHT_MODE_Main+0xa8>)
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	330c      	adds	r3, #12
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <FLIGHT_MODE_Main+0xac>)
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	4610      	mov	r0, r2
 80020ee:	4798      	blx	r3

		//Call the entrance function associated to the next flight mode if it exists
		if(flights_modes[next_flight_mode].function_entrance != NULL)
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <FLIGHT_MODE_Main+0xa0>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4a19      	ldr	r2, [pc, #100]	; (800215c <FLIGHT_MODE_Main+0xa8>)
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <FLIGHT_MODE_Main+0x64>
			flights_modes[next_flight_mode].function_entrance(sys);
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <FLIGHT_MODE_Main+0xa0>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <FLIGHT_MODE_Main+0xa8>)
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4413      	add	r3, r2
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <FLIGHT_MODE_Main+0xac>)
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	4610      	mov	r0, r2
 8002116:	4798      	blx	r3

		//Change the current flight mode
		current_flight_mode = next_flight_mode ;
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <FLIGHT_MODE_Main+0xa0>)
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <FLIGHT_MODE_Main+0xa4>)
 800211e:	701a      	strb	r2, [r3, #0]
	}
	//Call the function associated to the current flight mode
	if(flights_modes[next_flight_mode].function_main != NULL)
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <FLIGHT_MODE_Main+0xa0>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <FLIGHT_MODE_Main+0xa8>)
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	3308      	adds	r3, #8
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <FLIGHT_MODE_Main+0x96>
		flights_modes[current_flight_mode].function_main(sys, time_us);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <FLIGHT_MODE_Main+0xa4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <FLIGHT_MODE_Main+0xa8>)
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4413      	add	r3, r2
 800213c:	3308      	adds	r3, #8
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a07      	ldr	r2, [pc, #28]	; (8002160 <FLIGHT_MODE_Main+0xac>)
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4610      	mov	r0, r2
 8002148:	4798      	blx	r3

}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20001add 	.word	0x20001add
 8002158:	20001adc 	.word	0x20001adc
 800215c:	20000158 	.word	0x20000158
 8002160:	20001ad8 	.word	0x20001ad8

08002164 <gyro_acc_calibration_entrance>:

#include "Flight_mode.h"
#include "../OS/events/events.h"
#include "../OS/events/flags.h"

void gyro_acc_calibration_entrance(system_t * sys){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_3);
 800216c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	2001      	movs	r0, #1
 8002176:	f000 f9a9 	bl	80024cc <IHM_Set_Sequences>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <gyro_acc_calibration_main>:
void gyro_acc_calibration_main(system_t * sys, uint32_t time_us){
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]

	if(GYRO_calibrate(&sys->sensors.gyro, 1500)){	//The high lvl runs at 500 HZ so 1500 by 500 => 3 secs of calibration
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3330      	adds	r3, #48	; 0x30
 8002190:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fac7 	bl	8004728 <GYRO_calibrate>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <gyro_acc_calibration_main+0x32>
		EVENT_Set_flag(FLAG_GYRO_CALI_DONE);
 80021a0:	201c      	movs	r0, #28
 80021a2:	f000 fd8d 	bl	8002cc0 <EVENT_Set_flag>
		IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80021a6:	2300      	movs	r3, #0
 80021a8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80021ac:	2100      	movs	r1, #0
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 f98c 	bl	80024cc <IHM_Set_Sequences>
	}

}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <manual_accro_entrance>:
 */


#include "Flight_mode.h"

void manual_accro_entrance(system_t * sys){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 80021c4:	2001      	movs	r0, #1
 80021c6:	f002 f827 	bl	8004218 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f002 f97c 	bl	80044c8 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_1);
 80021d0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80021d4:	2200      	movs	r2, #0
 80021d6:	2100      	movs	r1, #0
 80021d8:	2000      	movs	r0, #0
 80021da:	f000 f977 	bl	80024cc <IHM_Set_Sequences>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <manual_accro_main>:

void manual_accro_main(system_t * sys, uint32_t time_us){
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL] = -((float)sys->radio.controller.channels[0]-1500);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002202:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002294 <manual_accro_main+0xac>
 8002206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800220a:	eef1 7a67 	vneg.f32	s15, s15
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 8002214:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH] = -((float)sys->radio.controller.channels[1]-1500);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800221e:	3302      	adds	r3, #2
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800222a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002294 <manual_accro_main+0xac>
 800222e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002232:	eef1 7a67 	vneg.f32	s15, s15
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 800223c:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002246:	3306      	adds	r3, #6
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002252:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002294 <manual_accro_main+0xac>
 8002256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800225a:	eef1 7a67 	vneg.f32	s15, s15
 800225e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002298 <manual_accro_main+0xb0>
 8002262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226c:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002276:	3304      	adds	r3, #4
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800227e:	b29b      	uxth	r3, r3
 8002280:	b21a      	sxth	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	44bb8000 	.word	0x44bb8000
 8002298:	3f99999a 	.word	0x3f99999a

0800229c <manual_angle_entrance>:
 *      Author: Théo
 */

#include "Flight_mode.h"

void manual_angle_entrance(system_t * sys){
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ANGLE);
 80022a4:	2002      	movs	r0, #2
 80022a6:	f001 ffb7 	bl	8004218 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f002 f90c 	bl	80044c8 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_7);
 80022b0:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2000      	movs	r0, #0
 80022ba:	f000 f907 	bl	80024cc <IHM_Set_Sequences>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <manual_angle_main>:
void manual_angle_main(system_t * sys, uint32_t time_us){
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL] = -((float)sys->radio.controller.channels[0]-1500)*0.14f;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002384 <manual_angle_main+0xbc>
 80022e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022ea:	eef1 7a67 	vneg.f32	s15, s15
 80022ee:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002388 <manual_angle_main+0xc0>
 80022f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 80022fc:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH] = -((float)sys->radio.controller.channels[1]-1500)*0.14f;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002306:	3302      	adds	r3, #2
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002312:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002384 <manual_angle_main+0xbc>
 8002316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800231a:	eef1 7a67 	vneg.f32	s15, s15
 800231e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002388 <manual_angle_main+0xc0>
 8002322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 800232c:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002336:	3306      	adds	r3, #6
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002342:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002384 <manual_angle_main+0xbc>
 8002346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800234a:	eef1 7a67 	vneg.f32	s15, s15
 800234e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800238c <manual_angle_main+0xc4>
 8002352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002366:	3304      	adds	r3, #4
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800236e:	b29b      	uxth	r3, r3
 8002370:	b21a      	sxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	44bb8000 	.word	0x44bb8000
 8002388:	3e0f5c29 	.word	0x3e0f5c29
 800238c:	3f99999a 	.word	0x3f99999a

08002390 <on_the_ground_entrance>:
 *  Created on: 19 déc. 2020
 *      Author: theom
 */
#include "Flight_mode.h"

void on_the_ground_entrance(system_t * sys){
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8002398:	2000      	movs	r0, #0
 800239a:	f001 ff3d 	bl	8004218 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_OFF);
 800239e:	2000      	movs	r0, #0
 80023a0:	f002 f892 	bl	80044c8 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80023a4:	2300      	movs	r3, #0
 80023a6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80023aa:	2100      	movs	r1, #0
 80023ac:	2000      	movs	r0, #0
 80023ae:	f000 f88d 	bl	80024cc <IHM_Set_Sequences>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <on_the_ground_main>:
void on_the_ground_main(system_t * sys, uint32_t time_us){
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <IHM_Init>:





void IHM_Init(Ihm_t * ihm_){
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	ihm = ihm_;
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <IHM_Init+0x1c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20001ae0 	.word	0x20001ae0

080023f0 <IHM_Led_Init>:

void IHM_Led_Init(led_name_e name, uint32_t periode, uint16_t pin, led_output_logic_e output_logic){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6039      	str	r1, [r7, #0]
 80023f8:	4611      	mov	r1, r2
 80023fa:	461a      	mov	r2, r3
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
 8002400:	460b      	mov	r3, r1
 8002402:	80bb      	strh	r3, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	71bb      	strb	r3, [r7, #6]
	ihm->leds[name].periode = periode ;
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <IHM_Led_Init+0x80>)
 800240a:	6819      	ldr	r1, [r3, #0]
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	330c      	adds	r3, #12
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	601a      	str	r2, [r3, #0]
	ihm->leds[name].pin = pin ;
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <IHM_Led_Init+0x80>)
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	79fa      	ldrb	r2, [r7, #7]
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	3310      	adds	r3, #16
 8002430:	88ba      	ldrh	r2, [r7, #4]
 8002432:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].output_logic = output_logic ;
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <IHM_Led_Init+0x80>)
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	79fa      	ldrb	r2, [r7, #7]
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	3314      	adds	r3, #20
 8002446:	79ba      	ldrb	r2, [r7, #6]
 8002448:	701a      	strb	r2, [r3, #0]

	//Set the outputs low
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e008      	b.n	8002462 <IHM_Led_Init+0x72>
		IHM_Set_Sequence(name, c, SEQUENCE_LED_OFF);
 8002450:	7bf9      	ldrb	r1, [r7, #15]
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	2200      	movs	r2, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f80c 	bl	8002474 <IHM_Set_Sequence>
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	3301      	adds	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d9f3      	bls.n	8002450 <IHM_Led_Init+0x60>
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20001ae0 	.word	0x20001ae0

08002474 <IHM_Set_Sequence>:

void IHM_Set_Sequence(led_name_e name, led_color_e color, uint16_t sequence){
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
 800247e:	460b      	mov	r3, r1
 8002480:	71bb      	strb	r3, [r7, #6]
 8002482:	4613      	mov	r3, r2
 8002484:	80bb      	strh	r3, [r7, #4]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE)
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <IHM_Set_Sequence+0x54>)
 8002488:	6819      	ldr	r1, [r3, #0]
 800248a:	79fa      	ldrb	r2, [r7, #7]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	3314      	adds	r3, #20
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <IHM_Set_Sequence+0x30>
		sequence = ~sequence ;
 800249e:	88bb      	ldrh	r3, [r7, #4]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	80bb      	strh	r3, [r7, #4]
	ihm->leds[name].seqs[color] = sequence ;
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <IHM_Set_Sequence+0x54>)
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	79fa      	ldrb	r2, [r7, #7]
 80024aa:	79b8      	ldrb	r0, [r7, #6]
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4403      	add	r3, r0
 80024b6:	88ba      	ldrh	r2, [r7, #4]
 80024b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	20001ae0 	.word	0x20001ae0

080024cc <IHM_Set_Sequences>:

void IHM_Set_Sequences(led_name_e name, uint16_t sequence_red, uint16_t sequence_green, uint16_t sequence_blue){
 80024cc:	b490      	push	{r4, r7}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4604      	mov	r4, r0
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4623      	mov	r3, r4
 80024dc:	71fb      	strb	r3, [r7, #7]
 80024de:	4603      	mov	r3, r0
 80024e0:	80bb      	strh	r3, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	807b      	strh	r3, [r7, #2]
 80024e6:	4613      	mov	r3, r2
 80024e8:	803b      	strh	r3, [r7, #0]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE){
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <IHM_Set_Sequences+0x94>)
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	79fa      	ldrb	r2, [r7, #7]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	3314      	adds	r3, #20
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d108      	bne.n	8002514 <IHM_Set_Sequences+0x48>
		sequence_red = ~sequence_red ;
 8002502:	88bb      	ldrh	r3, [r7, #4]
 8002504:	43db      	mvns	r3, r3
 8002506:	80bb      	strh	r3, [r7, #4]
		sequence_green = ~sequence_green ;
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	43db      	mvns	r3, r3
 800250c:	807b      	strh	r3, [r7, #2]
		sequence_blue = ~sequence_blue ;
 800250e:	883b      	ldrh	r3, [r7, #0]
 8002510:	43db      	mvns	r3, r3
 8002512:	803b      	strh	r3, [r7, #0]
	}
	ihm->leds[name].seqs[LED_COLOR_RED] = sequence_red ;
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <IHM_Set_Sequences+0x94>)
 8002516:	6819      	ldr	r1, [r3, #0]
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	88ba      	ldrh	r2, [r7, #4]
 8002526:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_GREEN] = sequence_green ;
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <IHM_Set_Sequences+0x94>)
 800252a:	6819      	ldr	r1, [r3, #0]
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	3302      	adds	r3, #2
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_BLUE] = sequence_blue ;
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <IHM_Set_Sequences+0x94>)
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	79fa      	ldrb	r2, [r7, #7]
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3304      	adds	r3, #4
 8002550:	883a      	ldrh	r2, [r7, #0]
 8002552:	801a      	strh	r2, [r3, #0]
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bc90      	pop	{r4, r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20001ae0 	.word	0x20001ae0

08002564 <IHM_Update>:

void IHM_Update(void){
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0

	//Increment the counter each time (since we re called at 1kHz
	compteur ++ ;
 800256a:	4b8a      	ldr	r3, [pc, #552]	; (8002794 <IHM_Update+0x230>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	4a88      	ldr	r2, [pc, #544]	; (8002794 <IHM_Update+0x230>)
 8002572:	6013      	str	r3, [r2, #0]
	//Update the current color and the current led
	current_led = compteur % LED_COUNT ;
 8002574:	4b87      	ldr	r3, [pc, #540]	; (8002794 <IHM_Update+0x230>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b85      	ldr	r3, [pc, #532]	; (8002798 <IHM_Update+0x234>)
 8002582:	701a      	strb	r2, [r3, #0]

	//Check if we have to change the current bit
	if(compteur > ihm->leds[current_led].next_time)
 8002584:	4b85      	ldr	r3, [pc, #532]	; (800279c <IHM_Update+0x238>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b83      	ldr	r3, [pc, #524]	; (8002798 <IHM_Update+0x234>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	460b      	mov	r3, r1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	440b      	add	r3, r1
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	3308      	adds	r3, #8
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b7d      	ldr	r3, [pc, #500]	; (8002794 <IHM_Update+0x230>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d259      	bcs.n	8002658 <IHM_Update+0xf4>
	{
		ihm->leds[current_led].current_bit >>= 1;
 80025a4:	4b7d      	ldr	r3, [pc, #500]	; (800279c <IHM_Update+0x238>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b7b      	ldr	r3, [pc, #492]	; (8002798 <IHM_Update+0x234>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	460b      	mov	r3, r1
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	440b      	add	r3, r1
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	3312      	adds	r3, #18
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	4a77      	ldr	r2, [pc, #476]	; (800279c <IHM_Update+0x238>)
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	4975      	ldr	r1, [pc, #468]	; (8002798 <IHM_Update+0x234>)
 80025c2:	7809      	ldrb	r1, [r1, #0]
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	b298      	uxth	r0, r3
 80025c8:	460b      	mov	r3, r1
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	440b      	add	r3, r1
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	3312      	adds	r3, #18
 80025d4:	4602      	mov	r2, r0
 80025d6:	801a      	strh	r2, [r3, #0]
		ihm->leds[current_led].next_time += ihm->leds[current_led].periode ;
 80025d8:	4b70      	ldr	r3, [pc, #448]	; (800279c <IHM_Update+0x238>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b6e      	ldr	r3, [pc, #440]	; (8002798 <IHM_Update+0x234>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	460b      	mov	r3, r1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	440b      	add	r3, r1
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	3308      	adds	r3, #8
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b6a      	ldr	r3, [pc, #424]	; (800279c <IHM_Update+0x238>)
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	4b68      	ldr	r3, [pc, #416]	; (8002798 <IHM_Update+0x234>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4403      	add	r3, r0
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	330c      	adds	r3, #12
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4964      	ldr	r1, [pc, #400]	; (800279c <IHM_Update+0x238>)
 800260a:	6809      	ldr	r1, [r1, #0]
 800260c:	4862      	ldr	r0, [pc, #392]	; (8002798 <IHM_Update+0x234>)
 800260e:	7800      	ldrb	r0, [r0, #0]
 8002610:	441a      	add	r2, r3
 8002612:	4603      	mov	r3, r0
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4403      	add	r3, r0
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	3308      	adds	r3, #8
 800261e:	601a      	str	r2, [r3, #0]

		if(ihm->leds[current_led].current_bit == 0)
 8002620:	4b5e      	ldr	r3, [pc, #376]	; (800279c <IHM_Update+0x238>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b5c      	ldr	r3, [pc, #368]	; (8002798 <IHM_Update+0x234>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	460b      	mov	r3, r1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	440b      	add	r3, r1
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	3312      	adds	r3, #18
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10d      	bne.n	8002658 <IHM_Update+0xf4>
			ihm->leds[current_led].current_bit = 1 << (SEQUENCE_LEN-1);
 800263c:	4b57      	ldr	r3, [pc, #348]	; (800279c <IHM_Update+0x238>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b55      	ldr	r3, [pc, #340]	; (8002798 <IHM_Update+0x234>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	460b      	mov	r3, r1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	440b      	add	r3, r1
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	3312      	adds	r3, #18
 8002652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002656:	801a      	strh	r2, [r3, #0]
	}

	uint16_t pins_high = 0 ;
 8002658:	2300      	movs	r3, #0
 800265a:	80fb      	strh	r3, [r7, #6]
	uint16_t pins_low = 0 ;
 800265c:	2300      	movs	r3, #0
 800265e:	80bb      	strh	r3, [r7, #4]
	uint16_t current_bit =  ihm->leds[current_led].current_bit ;
 8002660:	4b4e      	ldr	r3, [pc, #312]	; (800279c <IHM_Update+0x238>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <IHM_Update+0x234>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	460b      	mov	r3, r1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	440b      	add	r3, r1
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	3312      	adds	r3, #18
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	803b      	strh	r3, [r7, #0]

	//For each color, check if we have to set outputs high or low
	if(ihm->leds[current_led].seqs[LED_COLOR_RED] & current_bit)		//Red pin high ?
 800267a:	4b48      	ldr	r3, [pc, #288]	; (800279c <IHM_Update+0x238>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b46      	ldr	r3, [pc, #280]	; (8002798 <IHM_Update+0x234>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	460b      	mov	r3, r1
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	440b      	add	r3, r1
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	881a      	ldrh	r2, [r3, #0]
 8002690:	883b      	ldrh	r3, [r7, #0]
 8002692:	4013      	ands	r3, r2
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <IHM_Update+0x142>
		pins_high += pin_color[LED_COLOR_RED];
 800269a:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <IHM_Update+0x23c>)
 800269c:	881a      	ldrh	r2, [r3, #0]
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	4413      	add	r3, r2
 80026a2:	80fb      	strh	r3, [r7, #6]
 80026a4:	e004      	b.n	80026b0 <IHM_Update+0x14c>
	else
		pins_low += pin_color[LED_COLOR_RED];
 80026a6:	4b3e      	ldr	r3, [pc, #248]	; (80027a0 <IHM_Update+0x23c>)
 80026a8:	881a      	ldrh	r2, [r3, #0]
 80026aa:	88bb      	ldrh	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_GREEN] & current_bit)		//Green pin High ?
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <IHM_Update+0x238>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <IHM_Update+0x234>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	460b      	mov	r3, r1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	440b      	add	r3, r1
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	3302      	adds	r3, #2
 80026c6:	881a      	ldrh	r2, [r3, #0]
 80026c8:	883b      	ldrh	r3, [r7, #0]
 80026ca:	4013      	ands	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <IHM_Update+0x17a>
		pins_high += pin_color[LED_COLOR_GREEN];
 80026d2:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <IHM_Update+0x23c>)
 80026d4:	885a      	ldrh	r2, [r3, #2]
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	4413      	add	r3, r2
 80026da:	80fb      	strh	r3, [r7, #6]
 80026dc:	e004      	b.n	80026e8 <IHM_Update+0x184>
	else
		pins_low += pin_color[LED_COLOR_GREEN];
 80026de:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <IHM_Update+0x23c>)
 80026e0:	885a      	ldrh	r2, [r3, #2]
 80026e2:	88bb      	ldrh	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_BLUE] & current_bit)		//Blue pin high ?
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <IHM_Update+0x238>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <IHM_Update+0x234>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	460b      	mov	r3, r1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	440b      	add	r3, r1
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	3304      	adds	r3, #4
 80026fe:	881a      	ldrh	r2, [r3, #0]
 8002700:	883b      	ldrh	r3, [r7, #0]
 8002702:	4013      	ands	r3, r2
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <IHM_Update+0x1b2>
		pins_high |= pin_color[LED_COLOR_BLUE];
 800270a:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <IHM_Update+0x23c>)
 800270c:	889a      	ldrh	r2, [r3, #4]
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	4313      	orrs	r3, r2
 8002712:	80fb      	strh	r3, [r7, #6]
 8002714:	e004      	b.n	8002720 <IHM_Update+0x1bc>
	else
		pins_low |= pin_color[LED_COLOR_BLUE];
 8002716:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <IHM_Update+0x23c>)
 8002718:	889a      	ldrh	r2, [r3, #4]
 800271a:	88bb      	ldrh	r3, [r7, #4]
 800271c:	4313      	orrs	r3, r2
 800271e:	80bb      	strh	r3, [r7, #4]

	//Then we activate the current led
	for(uint8_t l = 0; l < LED_COUNT; l++){
 8002720:	2300      	movs	r3, #0
 8002722:	70fb      	strb	r3, [r7, #3]
 8002724:	e022      	b.n	800276c <IHM_Update+0x208>
		if(l == current_led)
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <IHM_Update+0x234>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	429a      	cmp	r2, r3
 800272e:	d10d      	bne.n	800274c <IHM_Update+0x1e8>
			pins_high |= ihm->leds[l].pin ;
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <IHM_Update+0x238>)
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	440b      	add	r3, r1
 8002740:	3310      	adds	r3, #16
 8002742:	881a      	ldrh	r2, [r3, #0]
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	4313      	orrs	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
 800274a:	e00c      	b.n	8002766 <IHM_Update+0x202>
		else
			pins_low |= ihm->leds[l].pin ;
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <IHM_Update+0x238>)
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	3310      	adds	r3, #16
 800275e:	881a      	ldrh	r2, [r3, #0]
 8002760:	88bb      	ldrh	r3, [r7, #4]
 8002762:	4313      	orrs	r3, r2
 8002764:	80bb      	strh	r3, [r7, #4]
	for(uint8_t l = 0; l < LED_COUNT; l++){
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	3301      	adds	r3, #1
 800276a:	70fb      	strb	r3, [r7, #3]
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d9d9      	bls.n	8002726 <IHM_Update+0x1c2>
	}
	HAL_GPIO_WritePin(GPIOC, pins_high, GPIO_PIN_SET);
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	2201      	movs	r2, #1
 8002776:	4619      	mov	r1, r3
 8002778:	480a      	ldr	r0, [pc, #40]	; (80027a4 <IHM_Update+0x240>)
 800277a:	f005 fccb 	bl	8008114 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, pins_low, GPIO_PIN_RESET);
 800277e:	88bb      	ldrh	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	4619      	mov	r1, r3
 8002784:	4807      	ldr	r0, [pc, #28]	; (80027a4 <IHM_Update+0x240>)
 8002786:	f005 fcc5 	bl	8008114 <HAL_GPIO_WritePin>





}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20001ae4 	.word	0x20001ae4
 8002798:	20001ae8 	.word	0x20001ae8
 800279c:	20001ae0 	.word	0x20001ae0
 80027a0:	200001b8 	.word	0x200001b8
 80027a4:	40020800 	.word	0x40020800

080027a8 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 80027ac:	4803      	ldr	r0, [pc, #12]	; (80027bc <DEBUG_init+0x14>)
 80027ae:	f000 f809 	bl	80027c4 <RetargetInit>
	printf("Debuger is init\n");
 80027b2:	4803      	ldr	r0, [pc, #12]	; (80027c0 <DEBUG_init+0x18>)
 80027b4:	f00a fa3c 	bl	800cc30 <puts>
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20002d9c 	.word	0x20002d9c
 80027c0:	0800f8e0 	.word	0x0800f8e0

080027c4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <RetargetInit+0x28>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <RetargetInit+0x2c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6898      	ldr	r0, [r3, #8]
 80027d8:	2300      	movs	r3, #0
 80027da:	2202      	movs	r2, #2
 80027dc:	2100      	movs	r1, #0
 80027de:	f00a fa2f 	bl	800cc40 <setvbuf>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20001bf0 	.word	0x20001bf0
 80027f0:	20001670 	.word	0x20001670

080027f4 <_isatty>:

int _isatty(int fd) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db04      	blt.n	800280c <_isatty+0x18>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b02      	cmp	r3, #2
 8002806:	dc01      	bgt.n	800280c <_isatty+0x18>
    return 1;
 8002808:	2301      	movs	r3, #1
 800280a:	e005      	b.n	8002818 <_isatty+0x24>

  errno = EBADF;
 800280c:	f009 fcea 	bl	800c1e4 <__errno>
 8002810:	4602      	mov	r2, r0
 8002812:	2309      	movs	r3, #9
 8002814:	6013      	str	r3, [r2, #0]
  return 0;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <_write>:

int _write(int fd, char* ptr, int len) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d002      	beq.n	8002838 <_write+0x18>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d110      	bne.n	800285a <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <_write+0x50>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	b29a      	uxth	r2, r3
 8002840:	2364      	movs	r3, #100	; 0x64
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	f007 ffcd 	bl	800a7e2 <HAL_UART_Transmit>
 8002848:	4603      	mov	r3, r0
 800284a:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <_write+0x36>
      return len;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	e008      	b.n	8002868 <_write+0x48>
    else
      return EIO;
 8002856:	2305      	movs	r3, #5
 8002858:	e006      	b.n	8002868 <_write+0x48>
  }
  errno = EBADF;
 800285a:	f009 fcc3 	bl	800c1e4 <__errno>
 800285e:	4602      	mov	r2, r0
 8002860:	2309      	movs	r3, #9
 8002862:	6013      	str	r3, [r2, #0]
  return -1;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20001bf0 	.word	0x20001bf0

08002874 <_close>:

int _close(int fd) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db04      	blt.n	800288c <_close+0x18>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b02      	cmp	r3, #2
 8002886:	dc01      	bgt.n	800288c <_close+0x18>
    return 0;
 8002888:	2300      	movs	r3, #0
 800288a:	e006      	b.n	800289a <_close+0x26>

  errno = EBADF;
 800288c:	f009 fcaa 	bl	800c1e4 <__errno>
 8002890:	4602      	mov	r2, r0
 8002892:	2309      	movs	r3, #9
 8002894:	6013      	str	r3, [r2, #0]
  return -1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80028ae:	f009 fc99 	bl	800c1e4 <__errno>
 80028b2:	4602      	mov	r2, r0
 80028b4:	2309      	movs	r3, #9
 80028b6:	6013      	str	r3, [r2, #0]
  return -1;
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <_read>:

int _read(int fd, char* ptr, int len) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d110      	bne.n	80028f8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <_read+0x4c>)
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	2201      	movs	r2, #1
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	f008 f817 	bl	800a914 <HAL_UART_Receive>
 80028e6:	4603      	mov	r3, r0
 80028e8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <_read+0x30>
      return 1;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e008      	b.n	8002906 <_read+0x42>
    else
      return EIO;
 80028f4:	2305      	movs	r3, #5
 80028f6:	e006      	b.n	8002906 <_read+0x42>
  }
  errno = EBADF;
 80028f8:	f009 fc74 	bl	800c1e4 <__errno>
 80028fc:	4602      	mov	r2, r0
 80028fe:	2309      	movs	r3, #9
 8002900:	6013      	str	r3, [r2, #0]
  return -1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20001bf0 	.word	0x20001bf0

08002914 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db08      	blt.n	8002936 <_fstat+0x22>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b02      	cmp	r3, #2
 8002928:	dc05      	bgt.n	8002936 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002930:	605a      	str	r2, [r3, #4]
    return 0;
 8002932:	2300      	movs	r3, #0
 8002934:	e005      	b.n	8002942 <_fstat+0x2e>
  }

  errno = EBADF;
 8002936:	f009 fc55 	bl	800c1e4 <__errno>
 800293a:	4602      	mov	r2, r0
 800293c:	2309      	movs	r3, #9
 800293e:	6013      	str	r3, [r2, #0]
  return 0;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <gyro_init_ok_func>:
		[EVENT_GYRO_ACC_CALIBRATION] = 	DEFINE_EVENT(gyro_acc_calibration, 	MASK_GYRO_ACC_COUNT, 			EVENT_ENABLED),


};

static void gyro_init_ok_func(mask_def_ids_t mask_id){
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_GYRO_READING);
 8002956:	2001      	movs	r0, #1
 8002958:	f000 f9b2 	bl	8002cc0 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 800295c:	2101      	movs	r1, #1
 800295e:	2004      	movs	r0, #4
 8002960:	f000 fdd6 	bl	8003510 <SCHEDULER_task_set_mode>
	events_main[EVENT_GYRO_INIT_OK].state = EVENT_DISABLED ;
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <gyro_init_ok_func+0x28>)
 8002966:	2201      	movs	r2, #1
 8002968:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	200001c0 	.word	0x200001c0

08002978 <acc_init_ok_func>:

static void acc_init_ok_func(mask_def_ids_t mask_id){
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_ACC_READING);
 8002982:	2005      	movs	r0, #5
 8002984:	f000 f99c 	bl	8002cc0 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 8002988:	2101      	movs	r1, #1
 800298a:	2006      	movs	r0, #6
 800298c:	f000 fdc0 	bl	8003510 <SCHEDULER_task_set_mode>
	events_main[EVENT_ACC_INIT_OK].state = EVENT_DISABLED ;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <acc_init_ok_func+0x28>)
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200001c0 	.word	0x200001c0

080029a4 <ibus_data_rdy>:

static void ibus_data_rdy(mask_def_ids_t mask_id){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029ae:	b672      	cpsid	i
	//On clean le flag ibus_data_rdy
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_IBUS_DATA_RDY);
 80029b0:	2108      	movs	r1, #8
 80029b2:	4806      	ldr	r0, [pc, #24]	; (80029cc <ibus_data_rdy+0x28>)
 80029b4:	f000 fa43 	bl	8002e3e <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80029b8:	b662      	cpsie	i
	__enable_irq();
	//On déclenche la tâche de traitement des octets pour l ibus
	SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_UPDATE, TASK_MODE_EVENT);
 80029ba:	2102      	movs	r1, #2
 80029bc:	2009      	movs	r0, #9
 80029be:	f000 fda7 	bl	8003510 <SCHEDULER_task_set_mode>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20001aec 	.word	0x20001aec

080029d0 <on_the_ground>:

static void on_the_ground(mask_def_ids_t mask_id){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80029da:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_FLYING);
 80029dc:	211d      	movs	r1, #29
 80029de:	480d      	ldr	r0, [pc, #52]	; (8002a14 <on_the_ground+0x44>)
 80029e0:	f000 fa2d 	bl	8002e3e <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMED);
 80029e4:	2119      	movs	r1, #25
 80029e6:	480b      	ldr	r0, [pc, #44]	; (8002a14 <on_the_ground+0x44>)
 80029e8:	f000 fa29 	bl	8002e3e <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_BUSY);
 80029ec:	211a      	movs	r1, #26
 80029ee:	4809      	ldr	r0, [pc, #36]	; (8002a14 <on_the_ground+0x44>)
 80029f0:	f000 fa25 	bl	8002e3e <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMING);
 80029f4:	2118      	movs	r1, #24
 80029f6:	4807      	ldr	r0, [pc, #28]	; (8002a14 <on_the_ground+0x44>)
 80029f8:	f000 fa21 	bl	8002e3e <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 80029fc:	211b      	movs	r1, #27
 80029fe:	4805      	ldr	r0, [pc, #20]	; (8002a14 <on_the_ground+0x44>)
 8002a00:	f000 fa1d 	bl	8002e3e <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a04:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ON_THE_GROUND);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7ff fb44 	bl	8002094 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20001aec 	.word	0x20001aec

08002a18 <manual_accro>:
static void manual_accro(mask_def_ids_t mask_id){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a22:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8002a24:	211d      	movs	r1, #29
 8002a26:	4807      	ldr	r0, [pc, #28]	; (8002a44 <manual_accro+0x2c>)
 8002a28:	f000 f9d9 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8002a2c:	211e      	movs	r1, #30
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <manual_accro+0x2c>)
 8002a30:	f000 f9d5 	bl	8002dde <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a34:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ACCRO);
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7ff fb2c 	bl	8002094 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20001aec 	.word	0x20001aec

08002a48 <manual_angle>:

static void manual_angle(mask_def_ids_t mask_id){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a52:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8002a54:	211d      	movs	r1, #29
 8002a56:	4807      	ldr	r0, [pc, #28]	; (8002a74 <manual_angle+0x2c>)
 8002a58:	f000 f9c1 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8002a5c:	211e      	movs	r1, #30
 8002a5e:	4805      	ldr	r0, [pc, #20]	; (8002a74 <manual_angle+0x2c>)
 8002a60:	f000 f9bd 	bl	8002dde <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a64:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ANGLE);
 8002a66:	2002      	movs	r0, #2
 8002a68:	f7ff fb14 	bl	8002094 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20001aec 	.word	0x20001aec

08002a78 <gyro_data_ready_func>:

static void gyro_data_ready_func(mask_def_ids_t mask_id){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a82:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 8002a84:	2102      	movs	r1, #2
 8002a86:	4806      	ldr	r0, [pc, #24]	; (8002aa0 <gyro_data_ready_func+0x28>)
 8002a88:	f000 f9d9 	bl	8002e3e <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a8c:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 8002a8e:	2102      	movs	r1, #2
 8002a90:	2005      	movs	r0, #5
 8002a92:	f000 fd3d 	bl	8003510 <SCHEDULER_task_set_mode>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20001aec 	.word	0x20001aec

08002aa4 <acc_data_ready_func>:

static void acc_data_ready_func(mask_def_ids_t mask_id){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aae:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 8002ab0:	2106      	movs	r1, #6
 8002ab2:	4806      	ldr	r0, [pc, #24]	; (8002acc <acc_data_ready_func+0x28>)
 8002ab4:	f000 f9c3 	bl	8002e3e <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ab8:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 8002aba:	2102      	movs	r1, #2
 8002abc:	2007      	movs	r0, #7
 8002abe:	f000 fd27 	bl	8003510 <SCHEDULER_task_set_mode>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20001aec 	.word	0x20001aec

08002ad0 <orientation_update>:

static void orientation_update(mask_def_ids_t mask_id){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ada:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 8002adc:	2107      	movs	r1, #7
 8002ade:	4808      	ldr	r0, [pc, #32]	; (8002b00 <orientation_update+0x30>)
 8002ae0:	f000 f9ad 	bl	8002e3e <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 8002ae4:	2103      	movs	r1, #3
 8002ae6:	4806      	ldr	r0, [pc, #24]	; (8002b00 <orientation_update+0x30>)
 8002ae8:	f000 f9a9 	bl	8002e3e <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002aec:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 8002aee:	2102      	movs	r1, #2
 8002af0:	2008      	movs	r0, #8
 8002af2:	f000 fd0d 	bl	8003510 <SCHEDULER_task_set_mode>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20001aec 	.word	0x20001aec

08002b04 <arming>:

static void arming(mask_def_ids_t mask_id){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0e:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_ARMING);
 8002b10:	2118      	movs	r1, #24
 8002b12:	4807      	ldr	r0, [pc, #28]	; (8002b30 <arming+0x2c>)
 8002b14:	f000 f963 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);	//We re now busy => cant go in calibration mode or other "on the ground" modes
 8002b18:	211a      	movs	r1, #26
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <arming+0x2c>)
 8002b1c:	f000 f95f 	bl	8002dde <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b20:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ARMING);
 8002b22:	2003      	movs	r0, #3
 8002b24:	f7ff fab6 	bl	8002094 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20001aec 	.word	0x20001aec

08002b34 <gyro_acc_calibration>:

static void gyro_acc_calibration(mask_def_ids_t mask_id){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b3e:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8002b40:	211b      	movs	r1, #27
 8002b42:	480b      	ldr	r0, [pc, #44]	; (8002b70 <gyro_acc_calibration+0x3c>)
 8002b44:	f000 f94b 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);
 8002b48:	211a      	movs	r1, #26
 8002b4a:	4809      	ldr	r0, [pc, #36]	; (8002b70 <gyro_acc_calibration+0x3c>)
 8002b4c:	f000 f947 	bl	8002dde <MASK_set_flag>
	MASK_clean_flag(&flags, FLAG_CHAN_9_PUSH);
 8002b50:	2113      	movs	r1, #19
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <gyro_acc_calibration+0x3c>)
 8002b54:	f000 f973 	bl	8002e3e <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_DONE);
 8002b58:	211c      	movs	r1, #28
 8002b5a:	4805      	ldr	r0, [pc, #20]	; (8002b70 <gyro_acc_calibration+0x3c>)
 8002b5c:	f000 f96f 	bl	8002e3e <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b60:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_GYRO_ACC_CALIBRATION);
 8002b62:	2004      	movs	r0, #4
 8002b64:	f7ff fa96 	bl	8002094 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20001aec 	.word	0x20001aec

08002b74 <EVENT_init>:


void EVENT_init(system_t * sys_){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	initialized = TRUE ;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <EVENT_init+0x24>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
	sys =sys_;
 8002b82:	4a06      	ldr	r2, [pc, #24]	; (8002b9c <EVENT_init+0x28>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6013      	str	r3, [r2, #0]

	//Configuration des mask associés aux events
	mask_def_events_init(events_main);
 8002b88:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <EVENT_init+0x2c>)
 8002b8a:	f000 f987 	bl	8002e9c <mask_def_events_init>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20001afc 	.word	0x20001afc
 8002b9c:	20001af8 	.word	0x20001af8
 8002ba0:	200001c0 	.word	0x200001c0

08002ba4 <EVENT_process>:

//Déclenchement des events en main
void EVENT_process(bool_e test_all){
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	if(new_flag)
 8002bac:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <EVENT_process+0x110>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d07a      	beq.n	8002caa <EVENT_process+0x106>
	{
		new_flag = FALSE;
 8002bb4:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <EVENT_process+0x110>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

		//Nombre d'event à tester
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 8002bba:	2306      	movs	r3, #6
 8002bbc:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <EVENT_process+0x24>
			max = EVENT_COUNT ;
 8002bc4:	230b      	movs	r3, #11
 8002bc6:	75fb      	strb	r3, [r7, #23]



		//Pout chaque event
		for(uint32_t e = 0; e < max; e ++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e069      	b.n	8002ca2 <EVENT_process+0xfe>
		{

			uint32_t m = 0 ;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]

			//On test chaque paires de masque
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8002bd6:	e049      	b.n	8002c6c <EVENT_process+0xc8>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8002bd8:	4837      	ldr	r0, [pc, #220]	; (8002cb8 <EVENT_process+0x114>)
 8002bda:	4938      	ldr	r1, [pc, #224]	; (8002cbc <EVENT_process+0x118>)
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	00d2      	lsls	r2, r2, #3
 8002be2:	24b4      	movs	r4, #180	; 0xb4
 8002be4:	fb04 f303 	mul.w	r3, r4, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	4419      	add	r1, r3
 8002bec:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002bf0:	c903      	ldmia	r1, {r0, r1}
 8002bf2:	f000 f895 	bl	8002d20 <Mask_test_and>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d034      	beq.n	8002c66 <EVENT_process+0xc2>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 8002bfc:	482e      	ldr	r0, [pc, #184]	; (8002cb8 <EVENT_process+0x114>)
 8002bfe:	492f      	ldr	r1, [pc, #188]	; (8002cbc <EVENT_process+0x118>)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1dda      	adds	r2, r3, #7
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	00d2      	lsls	r2, r2, #3
 8002c08:	24b4      	movs	r4, #180	; 0xb4
 8002c0a:	fb04 f303 	mul.w	r3, r4, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	4419      	add	r1, r3
 8002c12:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002c16:	c903      	ldmia	r1, {r0, r1}
 8002c18:	f000 f8b5 	bl	8002d86 <Mask_test_or>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d021      	beq.n	8002c66 <EVENT_process+0xc2>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	//Mask not test
 8002c22:	4825      	ldr	r0, [pc, #148]	; (8002cb8 <EVENT_process+0x114>)
 8002c24:	4925      	ldr	r1, [pc, #148]	; (8002cbc <EVENT_process+0x118>)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f103 020e 	add.w	r2, r3, #14
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	00d2      	lsls	r2, r2, #3
 8002c30:	24b4      	movs	r4, #180	; 0xb4
 8002c32:	fb04 f303 	mul.w	r3, r4, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	4419      	add	r1, r3
 8002c3a:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002c3e:	c903      	ldmia	r1, {r0, r1}
 8002c40:	f000 f8a1 	bl	8002d86 <Mask_test_or>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <EVENT_process+0xc2>
						{
							events_main[e].function(m);
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <EVENT_process+0x118>)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	21b4      	movs	r1, #180	; 0xb4
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	33b0      	adds	r3, #176	; 0xb0
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8002c62:	2301      	movs	r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
						}
					}
				}
				m++ ;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8002c6c:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <EVENT_process+0x118>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	21b4      	movs	r1, #180	; 0xb4
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	33a8      	adds	r3, #168	; 0xa8
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d20c      	bcs.n	8002c9c <EVENT_process+0xf8>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <EVENT_process+0xf8>
 8002c88:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <EVENT_process+0x118>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	21b4      	movs	r1, #180	; 0xb4
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	33ac      	adds	r3, #172	; 0xac
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d09d      	beq.n	8002bd8 <EVENT_process+0x34>
		for(uint32_t e = 0; e < max; e ++)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d391      	bcc.n	8002bce <EVENT_process+0x2a>
			}

		}
	}
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd90      	pop	{r4, r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20001af4 	.word	0x20001af4
 8002cb8:	20001aec 	.word	0x20001aec
 8002cbc:	200001c0 	.word	0x200001c0

08002cc0 <EVENT_Set_flag>:


//Set a flag
void EVENT_Set_flag(Flags_e flag){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cca:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <EVENT_Set_flag+0x28>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4805      	ldr	r0, [pc, #20]	; (8002cec <EVENT_Set_flag+0x2c>)
 8002cd8:	f000 f881 	bl	8002dde <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002cdc:	b662      	cpsie	i
	__enable_irq();
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20001af4 	.word	0x20001af4
 8002cec:	20001aec 	.word	0x20001aec

08002cf0 <EVENT_Clean_flag>:
//CleaR a flag (i know it should be called cleaR instead of cleaN but i didnt took the time to change it YET)
//Todo : cleaRRRRRRR a flag
void EVENT_Clean_flag(Flags_e flag){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfa:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <EVENT_Clean_flag+0x28>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	4619      	mov	r1, r3
 8002d06:	4805      	ldr	r0, [pc, #20]	; (8002d1c <EVENT_Clean_flag+0x2c>)
 8002d08:	f000 f899 	bl	8002e3e <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002d0c:	b662      	cpsie	i
	__enable_irq();
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20001af4 	.word	0x20001af4
 8002d1c:	20001aec 	.word	0x20001aec

08002d20 <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 8002d20:	b490      	push	{r4, r7}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	f107 0408 	add.w	r4, r7, #8
 8002d2a:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d2e:	4639      	mov	r1, r7
 8002d30:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e01c      	b.n	8002d74 <Mask_test_and+0x54>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	f107 0218 	add.w	r2, r7, #24
 8002d42:	4413      	add	r3, r2
 8002d44:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	f107 0118 	add.w	r1, r7, #24
 8002d50:	440b      	add	r3, r1
 8002d52:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002d56:	401a      	ands	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	f107 0118 	add.w	r1, r7, #24
 8002d60:	440b      	add	r3, r1
 8002d62:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d001      	beq.n	8002d6e <Mask_test_and+0x4e>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e006      	b.n	8002d7c <Mask_test_and+0x5c>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3301      	adds	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	dddf      	ble.n	8002d3a <Mask_test_and+0x1a>
		}
	return TRUE ;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc90      	pop	{r4, r7}
 8002d84:	4770      	bx	lr

08002d86 <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8002d86:	b490      	push	{r4, r7}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	f107 0408 	add.w	r4, r7, #8
 8002d90:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d94:	4639      	mov	r1, r7
 8002d96:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e015      	b.n	8002dcc <Mask_test_or+0x46>
		if(mask_test.array[m] & mask_ref.array[m])
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	f107 0218 	add.w	r2, r7, #24
 8002da8:	4413      	add	r3, r2
 8002daa:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	f107 0118 	add.w	r1, r7, #24
 8002db6:	440b      	add	r3, r1
 8002db8:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <Mask_test_or+0x40>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e006      	b.n	8002dd4 <Mask_test_or+0x4e>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	dde6      	ble.n	8002da0 <Mask_test_or+0x1a>
	return FALSE ;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc90      	pop	{r4, r7}
 8002ddc:	4770      	bx	lr

08002dde <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	60fb      	str	r3, [r7, #12]
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d101      	bne.n	8002e1a <MASK_set_flag+0x3c>
		return FALSE ;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e00b      	b.n	8002e32 <MASK_set_flag+0x54>
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return TRUE ;
 8002e30:	2301      	movs	r3, #1
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	60fb      	str	r3, [r7, #12]
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d10b      	bne.n	8002e8e <MASK_clean_flag+0x50>
		mask->array[array_nb] -= flag_mask ;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad1      	subs	r1, r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return TRUE ;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <MASK_clean_flag+0x52>
	}
	return FALSE ;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <mask_def_events_init>:
static void mask_def_gyro_acc_calibration(Event_t * event);
static void mask_def_manual_angle(Event_t * event);



void mask_def_events_init(Event_t * event){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_init_ok(&event[EVENT_GYRO_INIT_OK]);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f83c 	bl	8002f28 <mask_def_gyro_init_ok>
	mask_def_gyro_data_ready(&event[EVENT_GYRO_DATA_READY]);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f852 	bl	8002f5a <mask_def_gyro_data_ready>
	//Acc mask def
	mask_def_acc_init_ok(&event[EVENT_ACC_INIT_OK]);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f85f 	bl	8002f80 <mask_def_acc_init_ok>
	mask_def_acc_data_ready(&event[EVENT_ACC_DATA_READY]);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	33b4      	adds	r3, #180	; 0xb4
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f873 	bl	8002fb2 <mask_def_acc_data_ready>
	//Ibus
	mask_def_ibus_data_rdy(&event[EVENT_IBUS_DATA_RDY]);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f89d 	bl	8003012 <mask_def_ibus_data_rdy>
	//Orientation
	mask_def_orientation_update(&event[EVENT_ORIENTATION_UPDATE]);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f87a 	bl	8002fd8 <mask_def_orientation_update>
	//Flight_modes
	mask_def_on_the_ground(&event[EVENT_ON_THE_GROUND]);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f8a4 	bl	8003038 <mask_def_on_the_ground>
	mask_def_manual_accro(&event[EVENT_MANUAL_ACCRO]);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f8c9 	bl	800308e <mask_def_manual_accro>
	mask_def_arming(&event[EVENT_ARMING]);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f8e9 	bl	80030da <mask_def_arming>
	mask_def_gyro_acc_calibration(&event[EVENT_GYRO_ACC_CALIBRATION]);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f902 	bl	8003118 <mask_def_gyro_acc_calibration>
	mask_def_manual_angle(&event[EVENT_MANUAL_ANGLE]);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f8ca 	bl	80030b4 <mask_def_manual_angle>

}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <mask_def_gyro_init_ok>:

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff52 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3338      	adds	r3, #56	; 0x38
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff4c 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3370      	adds	r3, #112	; 0x70
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff46 	bl	8002dde <MASK_set_flag>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ff39 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3338      	adds	r3, #56	; 0x38
 8002f70:	2102      	movs	r1, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ff33 	bl	8002dde <MASK_set_flag>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2104      	movs	r1, #4
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff26 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3338      	adds	r3, #56	; 0x38
 8002f96:	2104      	movs	r1, #4
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff20 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3370      	adds	r3, #112	; 0x70
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff1a 	bl	8002dde <MASK_set_flag>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff ff0d 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3338      	adds	r3, #56	; 0x38
 8002fc8:	2106      	movs	r1, #6
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff07 	bl	8002dde <MASK_set_flag>
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fefa 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fef5 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2103      	movs	r1, #3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fef0 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3338      	adds	r3, #56	; 0x38
 8003002:	2107      	movs	r1, #7
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff feea 	bl	8002dde <MASK_set_flag>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <mask_def_ibus_data_rdy>:

// ----------------	Radio ------------------------

static void mask_def_ibus_data_rdy(Event_t * event){
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
	//Si flag data rdy on y go
	MASK_set_flag(&event->mask_and[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2108      	movs	r1, #8
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fedd 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3338      	adds	r3, #56	; 0x38
 8003028:	2108      	movs	r1, #8
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fed7 	bl	8002dde <MASK_set_flag>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <mask_def_on_the_ground>:

// ----------------	Flight Modes ------------------------
static void mask_def_on_the_ground(Event_t * event){
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_FLYING], FLAG_FLYING);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	211d      	movs	r1, #29
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff feca 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_FLYING], FLAG_CHAN_5_POS_1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3338      	adds	r3, #56	; 0x38
 800304e:	2109      	movs	r1, #9
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fec4 	bl	8002dde <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_ARMING], FLAG_ARMING);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3308      	adds	r3, #8
 800305a:	2118      	movs	r1, #24
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff febe 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_ARMING], FLAG_CHAN_5_POS_1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3340      	adds	r3, #64	; 0x40
 8003066:	2109      	movs	r1, #9
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff feb8 	bl	8002dde <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_IN_PROGRESS);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3310      	adds	r3, #16
 8003072:	211b      	movs	r1, #27
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff feb2 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_DONE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3348      	adds	r3, #72	; 0x48
 800307e:	211c      	movs	r1, #28
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff feac 	bl	8002dde <MASK_set_flag>


}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <mask_def_manual_accro>:

static void mask_def_manual_accro(Event_t * event){
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_CHAN_6_POS_1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	210b      	movs	r1, #11
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fe9f 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_ARMED);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3338      	adds	r3, #56	; 0x38
 80030a4:	2119      	movs	r1, #25
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fe99 	bl	8002dde <MASK_set_flag>
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <mask_def_manual_angle>:

static void mask_def_manual_angle(Event_t * event){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_CHAN_6_POS_2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	210c      	movs	r1, #12
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fe8c 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_ARMED);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3338      	adds	r3, #56	; 0x38
 80030ca:	2119      	movs	r1, #25
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fe86 	bl	8002dde <MASK_set_flag>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <mask_def_arming>:

static void mask_def_arming(Event_t * event){
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ARMING_ON_THE_GROUND], FLAG_GYRO_OK);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fe79 	bl	8002dde <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_ARMING_ON_THE_GROUND], FLAG_CHAN_5_POS_3);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3338      	adds	r3, #56	; 0x38
 80030f0:	210a      	movs	r1, #10
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fe73 	bl	8002dde <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_FLYING);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3370      	adds	r3, #112	; 0x70
 80030fc:	211d      	movs	r1, #29
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fe6d 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_BUSY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3370      	adds	r3, #112	; 0x70
 8003108:	211a      	movs	r1, #26
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fe67 	bl	8002dde <MASK_set_flag>


}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <mask_def_gyro_acc_calibration>:

static void mask_def_gyro_acc_calibration(Event_t * event){
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_GYRO_ACC_CALIBRATION], FLAG_GYRO_OK);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fe5a 	bl	8002dde <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_GYRO_ACC_CALIBRATION], FLAG_CHAN_9_PUSH);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3338      	adds	r3, #56	; 0x38
 800312e:	2113      	movs	r1, #19
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fe54 	bl	8002dde <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_BUSY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3370      	adds	r3, #112	; 0x70
 800313a:	211a      	movs	r1, #26
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fe4e 	bl	8002dde <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_FLYING);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3370      	adds	r3, #112	; 0x70
 8003146:	211d      	movs	r1, #29
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fe48 	bl	8002dde <MASK_set_flag>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 8003160:	4a05      	ldr	r2, [pc, #20]	; (8003178 <SCHEDULER_init+0x20>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 8003166:	f7ff fb1f 	bl	80027a8 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fad6 	bl	800371c <tasks_init>
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20001b44 	.word	0x20001b44

0800317c <SCHEDULER_run>:

void SCHEDULER_run(void){
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8003182:	f000 fc29 	bl	80039d8 <TIME_us>
 8003186:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 8003188:	f000 f8ce 	bl	8003328 <get_first_task>
 800318c:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
	while(task_queu_position < task_queu_size && task != NULL){
 8003192:	e046      	b.n	8003222 <SCHEDULER_run+0xa6>

		switch(task->mode){
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	7a1b      	ldrb	r3, [r3, #8]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d020      	beq.n	80031de <SCHEDULER_run+0x62>
 800319c:	2b03      	cmp	r3, #3
 800319e:	d002      	beq.n	80031a6 <SCHEDULER_run+0x2a>
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d008      	beq.n	80031b6 <SCHEDULER_run+0x3a>
				task->mode = TASK_MODE_WAIT ;
				break;
			case TASK_MODE_TIMMER :
			case TASK_MODE_WAIT:
			default:
				break;
 80031a4:	e027      	b.n	80031f6 <SCHEDULER_run+0x7a>
				current_time_us = task_process(task, current_time_us);
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	68b8      	ldr	r0, [r7, #8]
 80031aa:	f000 f8e3 	bl	8003374 <task_process>
 80031ae:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 80031b0:	2301      	movs	r3, #1
 80031b2:	607b      	str	r3, [r7, #4]
				break;
 80031b4:	e01f      	b.n	80031f6 <SCHEDULER_run+0x7a>
				if(current_time_us >= task->desired_next_start_us){
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d319      	bcc.n	80031f4 <SCHEDULER_run+0x78>
					current_time_us = task_process(task, current_time_us);
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	68b8      	ldr	r0, [r7, #8]
 80031c4:	f000 f8d6 	bl	8003374 <task_process>
 80031c8:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us += task->desired_period_us ;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6a1a      	ldr	r2, [r3, #32]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	441a      	add	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 80031d8:	2301      	movs	r3, #1
 80031da:	607b      	str	r3, [r7, #4]
				break;
 80031dc:	e00a      	b.n	80031f4 <SCHEDULER_run+0x78>
				current_time_us = task_process(task, current_time_us);
 80031de:	68f9      	ldr	r1, [r7, #12]
 80031e0:	68b8      	ldr	r0, [r7, #8]
 80031e2:	f000 f8c7 	bl	8003374 <task_process>
 80031e6:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 80031e8:	2301      	movs	r3, #1
 80031ea:	607b      	str	r3, [r7, #4]
				task->mode = TASK_MODE_WAIT ;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	721a      	strb	r2, [r3, #8]
				break;
 80031f2:	e000      	b.n	80031f6 <SCHEDULER_run+0x7a>
				break;
 80031f4:	bf00      	nop
		}
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <SCHEDULER_run+0x9c>
 80031fc:	2000      	movs	r0, #0
 80031fe:	f000 fbd7 	bl	80039b0 <TASK_get_task>
 8003202:	4602      	mov	r2, r0
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4293      	cmp	r3, r2
 8003208:	d006      	beq.n	8003218 <SCHEDULER_run+0x9c>
 800320a:	2001      	movs	r0, #1
 800320c:	f000 fbd0 	bl	80039b0 <TASK_get_task>
 8003210:	4602      	mov	r2, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4293      	cmp	r3, r2
 8003216:	d10e      	bne.n	8003236 <SCHEDULER_run+0xba>
			//Stop the while loop if we executed a task
			break;
		task_executed = FALSE ;
 8003218:	2300      	movs	r3, #0
 800321a:	607b      	str	r3, [r7, #4]
		task = get_next_task();
 800321c:	f000 f894 	bl	8003348 <get_next_task>
 8003220:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL){
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <SCHEDULER_run+0xc4>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <SCHEDULER_run+0xc8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d204      	bcs.n	8003238 <SCHEDULER_run+0xbc>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1af      	bne.n	8003194 <SCHEDULER_run+0x18>
	}
}
 8003234:	e000      	b.n	8003238 <SCHEDULER_run+0xbc>
			break;
 8003236:	bf00      	nop
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20001b40 	.word	0x20001b40
 8003244:	20001b3c 	.word	0x20001b3c

08003248 <SCHEDULER_task>:

void SCHEDULER_task(void){
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
	//Changement de mode pour les tâches
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 800324e:	2300      	movs	r3, #0
 8003250:	71fb      	strb	r3, [r7, #7]
 8003252:	e00b      	b.n	800326c <SCHEDULER_task+0x24>
	{
		task_to_change[t]->mode = change_mode[t] ;
 8003254:	79fa      	ldrb	r2, [r7, #7]
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	490c      	ldr	r1, [pc, #48]	; (800328c <SCHEDULER_task+0x44>)
 800325a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800325e:	490c      	ldr	r1, [pc, #48]	; (8003290 <SCHEDULER_task+0x48>)
 8003260:	5c8a      	ldrb	r2, [r1, r2]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	721a      	strb	r2, [r3, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	3301      	adds	r3, #1
 800326a:	71fb      	strb	r3, [r7, #7]
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <SCHEDULER_task+0x4c>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	79fa      	ldrb	r2, [r7, #7]
 8003274:	429a      	cmp	r2, r3
 8003276:	d3ed      	bcc.n	8003254 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <SCHEDULER_task+0x4c>)
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20001b48 	.word	0x20001b48
 8003290:	20001b84 	.word	0x20001b84
 8003294:	20001b93 	.word	0x20001b93

08003298 <SCHEDULER_get_cpu_load>:

float SCHEDULER_get_cpu_load(void){
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
	float load_pourcentage = 0 ;
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	607b      	str	r3, [r7, #4]
	for(uint32_t t = 2; t < task_queu_size; t++)
 80032a4:	2302      	movs	r3, #2
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	e023      	b.n	80032f2 <SCHEDULER_get_cpu_load+0x5a>
		if(task_queu[t]->real_period_us)
 80032aa:	4a1c      	ldr	r2, [pc, #112]	; (800331c <SCHEDULER_get_cpu_load+0x84>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d019      	beq.n	80032ec <SCHEDULER_get_cpu_load+0x54>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 80032b8:	4a18      	ldr	r2, [pc, #96]	; (800331c <SCHEDULER_get_cpu_load+0x84>)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 80032c6:	fb02 f203 	mul.w	r2, r2, r3
 80032ca:	4914      	ldr	r1, [pc, #80]	; (800331c <SCHEDULER_get_cpu_load+0x84>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	ee07 3a90 	vmov	s15, r3
 80032dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80032e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e8:	edc7 7a01 	vstr	s15, [r7, #4]
	for(uint32_t t = 2; t < task_queu_size; t++)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <SCHEDULER_get_cpu_load+0x88>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d3d6      	bcc.n	80032aa <SCHEDULER_get_cpu_load+0x12>

	return load_pourcentage / 512.0f ;
 80032fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003300:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003324 <SCHEDULER_get_cpu_load+0x8c>
 8003304:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003308:	eef0 7a66 	vmov.f32	s15, s13
}
 800330c:	eeb0 0a67 	vmov.f32	s0, s15
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20001b00 	.word	0x20001b00
 8003320:	20001b3c 	.word	0x20001b3c
 8003324:	44000000 	.word	0x44000000

08003328 <get_first_task>:

static task_t * get_first_task(void){
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <get_first_task+0x18>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 8003332:	4b04      	ldr	r3, [pc, #16]	; (8003344 <get_first_task+0x1c>)
 8003334:	681b      	ldr	r3, [r3, #0]
}
 8003336:	4618      	mov	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	20001b40 	.word	0x20001b40
 8003344:	20001b00 	.word	0x20001b00

08003348 <get_next_task>:

static task_t * get_next_task(void){
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <get_next_task+0x24>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <get_next_task+0x24>)
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <get_next_task+0x24>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a05      	ldr	r2, [pc, #20]	; (8003370 <get_next_task+0x28>)
 800335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20001b40 	.word	0x20001b40
 8003370:	20001b00 	.word	0x20001b00

08003374 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <task_process+0x16>
		return current_time_us ;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	e09d      	b.n	80034c6 <task_process+0x152>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	3308      	adds	r3, #8
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80033ae:	6839      	ldr	r1, [r7, #0]
 80033b0:	1a8a      	subs	r2, r1, r2
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	3308      	adds	r3, #8
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	3308      	adds	r3, #8
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	441a      	add	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	4a3d      	ldr	r2, [pc, #244]	; (80034d0 <task_process+0x15c>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	091a      	lsrs	r2, r3, #4
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	619a      	str	r2, [r3, #24]

	task->last_execution_us = current_time_us ;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	6838      	ldr	r0, [r7, #0]
 80033f2:	4798      	blx	r3
	current_time_us = TIME_us();
 80033f4:	f000 faf0 	bl	80039d8 <TIME_us>
 80033f8:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	311e      	adds	r1, #30
 800340a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800340e:	1ad2      	subs	r2, r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	1ac9      	subs	r1, r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	321e      	adds	r2, #30
 8003428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	311e      	adds	r1, #30
 800343a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800343e:	429a      	cmp	r2, r3
 8003440:	bf38      	it	cc
 8003442:	461a      	movcc	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	311e      	adds	r1, #30
 8003458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800346a:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <task_process+0x15c>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	091a      	lsrs	r2, r3, #4
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	321e      	adds	r2, #30
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003488:	d90c      	bls.n	80034a4 <task_process+0x130>
		task->duration_us_average_array[task->average_index] ++ ;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	f103 011e 	add.w	r1, r3, #30
 8003496:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800349a:	1c51      	adds	r1, r2, #1
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	331e      	adds	r3, #30
 80034a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80034b8:	2b14      	cmp	r3, #20
 80034ba:	d103      	bne.n	80034c4 <task_process+0x150>
		task->average_index = 0 ;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 80034c4:	683b      	ldr	r3, [r7, #0]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	cccccccd 	.word	0xcccccccd

080034d4 <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
	if(enable)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <SCHEDULER_enable_task+0x24>
		queu_add(TASK_get_task(id));
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fa61 	bl	80039b0 <TASK_get_task>
 80034ee:	4603      	mov	r3, r0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 f873 	bl	80035dc <queu_add>
	else
		queu_remove(TASK_get_task(id));
}
 80034f6:	e007      	b.n	8003508 <SCHEDULER_enable_task+0x34>
		queu_remove(TASK_get_task(id));
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fa58 	bl	80039b0 <TASK_get_task>
 8003500:	4603      	mov	r3, r0
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f8c8 	bl	8003698 <queu_remove>
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <SCHEDULER_task_set_mode>:

void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	460a      	mov	r2, r1
 800351a:	71fb      	strb	r3, [r7, #7]
 800351c:	4613      	mov	r3, r2
 800351e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8003520:	b672      	cpsid	i
	__disable_irq();
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <SCHEDULER_task_set_mode+0x4c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461c      	mov	r4, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fa3f 	bl	80039b0 <TASK_get_task>
 8003532:	4602      	mov	r2, r0
 8003534:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <SCHEDULER_task_set_mode+0x50>)
 8003536:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <SCHEDULER_task_set_mode+0x4c>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	b2d1      	uxtb	r1, r2
 8003544:	4a05      	ldr	r2, [pc, #20]	; (800355c <SCHEDULER_task_set_mode+0x4c>)
 8003546:	7011      	strb	r1, [r2, #0]
 8003548:	4619      	mov	r1, r3
 800354a:	4a06      	ldr	r2, [pc, #24]	; (8003564 <SCHEDULER_task_set_mode+0x54>)
 800354c:	79bb      	ldrb	r3, [r7, #6]
 800354e:	5453      	strb	r3, [r2, r1]
  __ASM volatile ("cpsie i" : : : "memory");
 8003550:	b662      	cpsie	i
	__enable_irq();
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}
 800355a:	bf00      	nop
 800355c:	20001b93 	.word	0x20001b93
 8003560:	20001b48 	.word	0x20001b48
 8003564:	20001b84 	.word	0x20001b84

08003568 <SCHEDULER_reschedule_task>:

void SCHEDULER_reschedule_task(task_ids_t id, uint32_t new_period_us){
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	6039      	str	r1, [r7, #0]
 8003572:	71fb      	strb	r3, [r7, #7]
	TASK_get_task(id)->desired_period_us = new_period_us ;
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fa1a 	bl	80039b0 <TASK_get_task>
 800357c:	4602      	mov	r2, r0
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6153      	str	r3, [r2, #20]
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <queu_contains+0x12>
		return FALSE ;
 800359a:	2300      	movs	r3, #0
 800359c:	e014      	b.n	80035c8 <queu_contains+0x3c>

	for(uint32_t t = 0; t < task_queu_size; t++)
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e00b      	b.n	80035bc <queu_contains+0x30>
		if(task_queu[t] == task)
 80035a4:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <queu_contains+0x48>)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d101      	bne.n	80035b6 <queu_contains+0x2a>
			return TRUE ;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e008      	b.n	80035c8 <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3301      	adds	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <queu_contains+0x4c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d3ee      	bcc.n	80035a4 <queu_contains+0x18>
	return FALSE ;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	20001b00 	.word	0x20001b00
 80035d8:	20001b3c 	.word	0x20001b3c

080035dc <queu_add>:

static bool_e queu_add(task_t * task){
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ffd1 	bl	800358c <queu_contains>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <queu_add+0x22>
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <queu_add+0xb4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b0e      	cmp	r3, #14
 80035f6:	d802      	bhi.n	80035fe <queu_add+0x22>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <queu_add+0x26>
		return FALSE ;
 80035fe:	2300      	movs	r3, #0
 8003600:	e041      	b.n	8003686 <queu_add+0xaa>


	uint32_t t = 0 ;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 8003606:	e03a      	b.n	800367e <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 8003608:	4a22      	ldr	r2, [pc, #136]	; (8003694 <queu_add+0xb8>)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <queu_add+0x50>
		{
			task_queu[t] = task ;
 8003614:	491f      	ldr	r1, [pc, #124]	; (8003694 <queu_add+0xb8>)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 800361e:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <queu_add+0xb4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3301      	adds	r3, #1
 8003624:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <queu_add+0xb4>)
 8003626:	6013      	str	r3, [r2, #0]
			return TRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	e02c      	b.n	8003686 <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	781a      	ldrb	r2, [r3, #0]
 8003630:	4918      	ldr	r1, [pc, #96]	; (8003694 <queu_add+0xb8>)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d91c      	bls.n	8003678 <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3301      	adds	r3, #1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4a13      	ldr	r2, [pc, #76]	; (8003694 <queu_add+0xb8>)
 8003646:	1898      	adds	r0, r3, r2
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4a11      	ldr	r2, [pc, #68]	; (8003694 <queu_add+0xb8>)
 800364e:	1899      	adds	r1, r3, r2
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <queu_add+0xb4>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	461a      	mov	r2, r3
 800365c:	f008 fdf7 	bl	800c24e <memmove>
			task_queu[t] = task ;
 8003660:	490c      	ldr	r1, [pc, #48]	; (8003694 <queu_add+0xb8>)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <queu_add+0xb4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3301      	adds	r3, #1
 8003670:	4a07      	ldr	r2, [pc, #28]	; (8003690 <queu_add+0xb4>)
 8003672:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8003674:	2301      	movs	r3, #1
 8003676:	e006      	b.n	8003686 <queu_add+0xaa>
		}
		t++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3301      	adds	r3, #1
 800367c:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b0e      	cmp	r3, #14
 8003682:	d9c1      	bls.n	8003608 <queu_add+0x2c>
	}
	return FALSE ;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20001b3c 	.word	0x20001b3c
 8003694:	20001b00 	.word	0x20001b00

08003698 <queu_remove>:

static bool_e queu_remove(task_t * task){
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff73 	bl	800358c <queu_contains>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <queu_remove+0x1a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <queu_remove+0x1e>
		return FALSE ;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e02a      	b.n	800370c <queu_remove+0x74>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e021      	b.n	8003700 <queu_remove+0x68>
		if(task == task_queu[t]){
 80036bc:	4a15      	ldr	r2, [pc, #84]	; (8003714 <queu_remove+0x7c>)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d117      	bne.n	80036fa <queu_remove+0x62>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <queu_remove+0x7c>)
 80036d0:	1898      	adds	r0, r3, r2
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3301      	adds	r3, #1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4a0e      	ldr	r2, [pc, #56]	; (8003714 <queu_remove+0x7c>)
 80036da:	1899      	adds	r1, r3, r2
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <queu_remove+0x80>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	461a      	mov	r2, r3
 80036e8:	f008 fdb1 	bl	800c24e <memmove>
			task_queu_size -- ;
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <queu_remove+0x80>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <queu_remove+0x80>)
 80036f4:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e008      	b.n	800370c <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <queu_remove+0x80>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	429a      	cmp	r2, r3
 8003708:	d3d8      	bcc.n	80036bc <queu_remove+0x24>
		}
	}
	return FALSE ;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20001b00 	.word	0x20001b00
 8003718:	20001b3c 	.word	0x20001b3c

0800371c <tasks_init>:

static uint32_t start_time_gyro = 0;
static uint32_t end_time_filtering_gyro= 0;


void tasks_init(system_t * sys_){
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <tasks_init+0x80>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 800372a:	2101      	movs	r1, #1
 800372c:	2000      	movs	r0, #0
 800372e:	f7ff fed1 	bl	80034d4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 8003732:	2101      	movs	r1, #1
 8003734:	2001      	movs	r0, #1
 8003736:	f7ff fecd 	bl	80034d4 <SCHEDULER_enable_task>

	SCHEDULER_enable_task(TASK_LED, TRUE);
 800373a:	2101      	movs	r1, #1
 800373c:	2003      	movs	r0, #3
 800373e:	f7ff fec9 	bl	80034d4 <SCHEDULER_enable_task>
	//SCHEDULER_enable_task(TASK_PRINTF, TRUE);
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 8003742:	2101      	movs	r1, #1
 8003744:	2008      	movs	r0, #8
 8003746:	f7ff fec5 	bl	80034d4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 800374a:	2101      	movs	r1, #1
 800374c:	2005      	movs	r0, #5
 800374e:	f7ff fec1 	bl	80034d4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 8003752:	2101      	movs	r1, #1
 8003754:	2004      	movs	r0, #4
 8003756:	f7ff febd 	bl	80034d4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 800375a:	2101      	movs	r1, #1
 800375c:	2007      	movs	r0, #7
 800375e:	f7ff feb9 	bl	80034d4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_UPDATE, TRUE);
 8003762:	2101      	movs	r1, #1
 8003764:	2009      	movs	r0, #9
 8003766:	f7ff feb5 	bl	80034d4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_ANALYSIS, TRUE);
 800376a:	2101      	movs	r1, #1
 800376c:	200a      	movs	r0, #10
 800376e:	f7ff feb1 	bl	80034d4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_HIGH_LVL, TRUE);
 8003772:	2101      	movs	r1, #1
 8003774:	200b      	movs	r0, #11
 8003776:	f7ff fead 	bl	80034d4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_TELEMETRIE, TRUE);
 800377a:	2101      	movs	r1, #1
 800377c:	200c      	movs	r0, #12
 800377e:	f7ff fea9 	bl	80034d4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_LOGGER, TRUE);
 8003782:	2101      	movs	r1, #1
 8003784:	200d      	movs	r0, #13
 8003786:	f7ff fea5 	bl	80034d4 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_SELF_TEST, TRUE);
 800378a:	2101      	movs	r1, #1
 800378c:	200e      	movs	r0, #14
 800378e:	f7ff fea1 	bl	80034d4 <SCHEDULER_enable_task>

}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20001b94 	.word	0x20001b94

080037a0 <process_print_f>:

void process_print_f(uint32_t current_time_us){
 80037a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037a4:	b088      	sub	sp, #32
 80037a6:	af04      	add	r7, sp, #16
 80037a8:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);
//	gyro_t * gyro = &sys->sensors.gyro ;
//	acc_t * acc = &sys->sensors.acc ;
	orientation_t * ori = &sys->orientation ;
 80037aa:	4b14      	ldr	r3, [pc, #80]	; (80037fc <process_print_f+0x5c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80037b2:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	//printf("%f\t%f\t%f\t%f\t%f\t%f\t%lu\n",acc->raw[0], acc->raw[1], acc->raw[2],gyro->raw[0], gyro->raw[1], gyro->raw[2], TASK_get_task(TASK_GYRO_UPDATE)->duration_us);
	//printf("%f\t%f\t%lu\n", acc->filtered[ACC_AXE_Z], gyro->filtered[ACC_AXE_X], delta_1);
	//printf("%f\n", acc->filtered[GYRO_AXE_X]);
	//printf("%lu\n", delta_1);
	printf("%f\t%f\t%f\n", ori->angular_position[0], ori->angular_velocity[0], ori->acc_angles[0]);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc fec5 	bl	8000548 <__aeabi_f2d>
 80037be:	4680      	mov	r8, r0
 80037c0:	4689      	mov	r9, r1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fc febd 	bl	8000548 <__aeabi_f2d>
 80037ce:	4604      	mov	r4, r0
 80037d0:	460d      	mov	r5, r1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc feb6 	bl	8000548 <__aeabi_f2d>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80037e4:	e9cd 4500 	strd	r4, r5, [sp]
 80037e8:	4642      	mov	r2, r8
 80037ea:	464b      	mov	r3, r9
 80037ec:	4804      	ldr	r0, [pc, #16]	; (8003800 <process_print_f+0x60>)
 80037ee:	f009 f9ab 	bl	800cb48 <iprintf>
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037fc:	20001b94 	.word	0x20001b94
 8003800:	0800f8f0 	.word	0x0800f8f0

08003804 <process_led>:


void process_led(uint32_t current_time_us){
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
//	uint8_t data[2];
//	uint8_t len = DATA_LOGGER_Get_Data(DATA_ID_ROLL_GYRO, data);
//	TELEMETRY_Send_Data(&sys->radio.telemetry, data, len);
	IHM_Update();
 800380c:	f7fe feaa 	bl	8002564 <IHM_Update>
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <process_gyro_update>:

void process_gyro_update(uint32_t current_time_us){
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	start_time_gyro = current_time_us ;
 8003820:	4a06      	ldr	r2, [pc, #24]	; (800383c <process_gyro_update+0x24>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6013      	str	r3, [r2, #0]
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <process_gyro_update+0x28>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3330      	adds	r3, #48	; 0x30
 800382c:	4618      	mov	r0, r3
 800382e:	f001 f809 	bl	8004844 <GYRO_ACC_update_dma>

}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20001b98 	.word	0x20001b98
 8003840:	20001b94 	.word	0x20001b94

08003844 <process_gyro_filter>:

void process_gyro_filter(uint32_t current_time_us){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	end_time_filtering_gyro = current_time_us ;
 800384c:	4a06      	ldr	r2, [pc, #24]	; (8003868 <process_gyro_filter+0x24>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6013      	str	r3, [r2, #0]

	GYRO_process_lpf(&sys->sensors.gyro);
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <process_gyro_filter+0x28>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3330      	adds	r3, #48	; 0x30
 8003858:	4618      	mov	r0, r3
 800385a:	f001 f80f 	bl	800487c <GYRO_process_lpf>

}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20001b9c 	.word	0x20001b9c
 800386c:	20001b94 	.word	0x20001b94

08003870 <process_acc_update>:

void process_acc_update(uint32_t current_time_us){
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <process_acc_update+0x1c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	33a4      	adds	r3, #164	; 0xa4
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fe98 	bl	80045b4 <ACC_update>
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20001b94 	.word	0x20001b94

08003890 <process_acc_filter>:

void process_acc_filter(uint32_t current_time_us){
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	ACC_process_lpf(&sys->sensors.acc);
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <process_acc_filter+0x1c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	33a4      	adds	r3, #164	; 0xa4
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fea6 	bl	80045f0 <ACC_process_lpf>
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20001b94 	.word	0x20001b94

080038b0 <process_event_main>:

void process_event_main(uint32_t current_time_us){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 80038b8:	2000      	movs	r0, #0
 80038ba:	f7ff f973 	bl	8002ba4 <EVENT_process>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <process_orientation_update>:

void process_orientation_update(uint32_t current_time_us){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

	ORIENTATION_Update(&sys->orientation);
 80038d0:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <process_orientation_update+0x2c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe f943 	bl	8001b64 <ORIENTATION_Update>

	REGULATION_POSITION_Process();
 80038de:	f000 fe05 	bl	80044ec <REGULATION_POSITION_Process>
	REGULATION_ORIENTATION_Process();
 80038e2:	f000 fcab 	bl	800423c <REGULATION_ORIENTATION_Process>
	PROPULSION_Update_Motors();
 80038e6:	f000 f8d5 	bl	8003a94 <PROPULSION_Update_Motors>
	//delta_1 = (TIME_us() - start_time_gyro) ;
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20001b94 	.word	0x20001b94

080038f8 <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 8003900:	f7ff fca2 	bl	8003248 <SCHEDULER_task>
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <process_controller_channel_update>:

void process_controller_channel_update(uint32_t current_time_us){
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	if(CONTROLLER_Update_Channels_Array())
 8003914:	f000 fc18 	bl	8004148 <CONTROLLER_Update_Channels_Array>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <process_controller_channel_update+0x1a>
		SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_ANALYSIS, TASK_MODE_EVENT);
 800391e:	2102      	movs	r1, #2
 8003920:	200a      	movs	r0, #10
 8003922:	f7ff fdf5 	bl	8003510 <SCHEDULER_task_set_mode>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <process_controller_channel_analysis>:

void process_controller_channel_analysis(uint32_t current_time_us){
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
	CONTROLLER_Update_Channels_Analysis();
 8003936:	f000 f989 	bl	8003c4c <CONTROLLER_Update_Channels_Analysis>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <process_high_lvl>:

void process_high_lvl(uint32_t current_time_us){
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
	EVENT_process(TRUE);
 800394a:	2001      	movs	r0, #1
 800394c:	f7ff f92a 	bl	8002ba4 <EVENT_process>
	FLIGHT_MODE_Main(current_time_us);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7fe fbaf 	bl	80020b4 <FLIGHT_MODE_Main>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <process_telemetry>:

void process_telemetry(uint32_t current_time_us){
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
	TELEMETRY_Process(current_time_us);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f002 ff74 	bl	8006854 <TELEMETRY_Process>
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <process_logger>:

void process_logger(uint32_t current_time_us){
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	DATA_LOGGER_Main();
 800397c:	f7fd fd88 	bl	8001490 <DATA_LOGGER_Main>
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <process_self_test>:

void process_self_test(uint32_t current_time_us){
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	sys->soft.cpu_load = SCHEDULER_get_cpu_load();
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <process_self_test+0x24>)
 8003992:	681c      	ldr	r4, [r3, #0]
 8003994:	f7ff fc80 	bl	8003298 <SCHEDULER_get_cpu_load>
 8003998:	eef0 7a40 	vmov.f32	s15, s0
 800399c:	f604 3318 	addw	r3, r4, #2840	; 0xb18
 80039a0:	edc3 7a00 	vstr	s15, [r3]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd90      	pop	{r4, r7, pc}
 80039ac:	20001b94 	.word	0x20001b94

080039b0 <TASK_get_task>:
	[TASK_SELF_TEST] = 						DEFINE_TASK(TASK_SELF_TEST, 					PRIORITY_MEDIUM,	process_self_test, 						PERIOD_US_FROM_HERTZ(50), 	TASK_MODE_TIME),

};


task_t * TASK_get_task(task_ids_t id){
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	22d0      	movs	r2, #208	; 0xd0
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <TASK_get_task+0x24>)
 80039c4:	4413      	add	r3, r2
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	2000097c 	.word	0x2000097c

080039d8 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80039de:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 80039e0:	f003 f93a 	bl	8006c58 <HAL_GetTick>
 80039e4:	4603      	mov	r3, r0
 80039e6:	3301      	adds	r3, #1
 80039e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039ec:	fb02 f203 	mul.w	r2, r2, r3
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <TIME_us+0x50>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	08db      	lsrs	r3, r3, #3
 80039f6:	490d      	ldr	r1, [pc, #52]	; (8003a2c <TIME_us+0x54>)
 80039f8:	fba1 1303 	umull	r1, r3, r1, r3
 80039fc:	085b      	lsrs	r3, r3, #1
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a02:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s est pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us > t_us)
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <TIME_us+0x58>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d203      	bcs.n	8003a16 <TIME_us+0x3e>
		t_us += 1000;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003a14:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 8003a16:	4a06      	ldr	r2, [pc, #24]	; (8003a30 <TIME_us+0x58>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6013      	str	r3, [r2, #0]

	return t_us;
 8003a1c:	687b      	ldr	r3, [r7, #4]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	e000e010 	.word	0xe000e010
 8003a2c:	18618619 	.word	0x18618619
 8003a30:	20001ba0 	.word	0x20001ba0

08003a34 <TIME_delay_us_blocking>:

void TIME_delay_us_blocking(uint32_t duration_us){
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	uint32_t end_time = TIME_us() + duration_us;
 8003a3c:	f7ff ffcc 	bl	80039d8 <TIME_us>
 8003a40:	4602      	mov	r2, r0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
	while(TIME_us() < end_time);
 8003a48:	bf00      	nop
 8003a4a:	f7ff ffc5 	bl	80039d8 <TIME_us>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d8f9      	bhi.n	8003a4a <TIME_delay_us_blocking+0x16>
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <PROPULSION_Init>:
#define ROLL prop->consigne[PROP_CONSIGNE_ROLL]
#define PITCH prop->consigne[PROP_CONSIGNE_PITCH]
#define YAW prop->consigne[PROP_CONSIGNE_YAW]
#define THRUST prop->consigne[PROP_CONSIGNE_THRUST]

void PROPULSION_Init(propulsion_t * prop_, TIM_HandleTypeDef * htim){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
	prop = prop_;
 8003a6a:	4a09      	ldr	r2, [pc, #36]	; (8003a90 <PROPULSION_Init+0x30>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6013      	str	r3, [r2, #0]

	MOTORS_Init(&prop->motors, htim, prop->motors_outputs, TRUE);
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <PROPULSION_Init+0x30>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <PROPULSION_Init+0x30>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f103 0218 	add.w	r2, r3, #24
 8003a7e:	2301      	movs	r3, #1
 8003a80:	6839      	ldr	r1, [r7, #0]
 8003a82:	f008 fa41 	bl	800bf08 <MOTORS_Init>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20001ba4 	.word	0x20001ba4

08003a94 <PROPULSION_Update_Motors>:

void PROPULSION_Update_Motors(void){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0

	//Mixage des sorties
	int16_t m1 = THRUST - PITCH - ROLL + YAW;
 8003a9a:	4b4c      	ldr	r3, [pc, #304]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	4b49      	ldr	r3, [pc, #292]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	4b42      	ldr	r3, [pc, #264]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	80fb      	strh	r3, [r7, #6]
	int16_t m2 = THRUST - PITCH + ROLL - YAW ;
 8003ad0:	4b3e      	ldr	r3, [pc, #248]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	4b3c      	ldr	r3, [pc, #240]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	80bb      	strh	r3, [r7, #4]
	int16_t m3 = THRUST + PITCH + ROLL + YAW ;
 8003b06:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	807b      	strh	r3, [r7, #2]
	int16_t m4 = THRUST + PITCH - ROLL - YAW ;
 8003b3c:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	803b      	strh	r3, [r7, #0]
	prop->motors_outputs[MOTOR_FL] = (uint16_t)((m1 > 0) ? m1 : 0);
 8003b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003b7a:	b21a      	sxth	r2, r3
 8003b7c:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	b292      	uxth	r2, r2
 8003b82:	83da      	strh	r2, [r3, #30]
	prop->motors_outputs[MOTOR_FR] = (uint16_t)((m2 > 0) ? m2 : 0);
 8003b84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003b8c:	b21a      	sxth	r2, r3
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	b292      	uxth	r2, r2
 8003b94:	839a      	strh	r2, [r3, #28]
	prop->motors_outputs[MOTOR_BR] = (uint16_t)((m3 > 0) ? m3 : 0);
 8003b96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003b9e:	b21a      	sxth	r2, r3
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	b292      	uxth	r2, r2
 8003ba6:	831a      	strh	r2, [r3, #24]
	prop->motors_outputs[MOTOR_BL] = (uint16_t)((m4 > 0) ? m4 : 0);
 8003ba8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003bac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003bb0:	b21a      	sxth	r2, r3
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	835a      	strh	r2, [r3, #26]
	MOTORS_Change_output(&prop->motors);
 8003bba:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <PROPULSION_Update_Motors+0x138>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f008 f9d9 	bl	800bf76 <MOTORS_Change_output>

}
 8003bc4:	bf00      	nop
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20001ba4 	.word	0x20001ba4

08003bd0 <CONTROLLER_Init>:
//Controller used
static controller_t * controller ;
//Private functions prototypes
static void flag_process();

void CONTROLLER_Init(controller_t * controller_, ibus_t * ibus){
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
	//Sauvegarde la structure utilsié
	controller = controller_ ;
 8003bda:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6013      	str	r3, [r2, #0]
	controller->channels = ibus->channels ;
 8003be0:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	321a      	adds	r2, #26
 8003be8:	601a      	str	r2, [r3, #0]

	//Configuration du mode d'analyse pour les channels
	controller->analysis_mode[0] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003bea:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	711a      	strb	r2, [r3, #4]
	controller->analysis_mode[1] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	715a      	strb	r2, [r3, #5]
	controller->analysis_mode[2] = ANALYSIS_MODE_STICK_LVL ;
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	719a      	strb	r2, [r3, #6]
	controller->analysis_mode[3] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2201      	movs	r2, #1
 8003c08:	71da      	strb	r2, [r3, #7]
	controller->analysis_mode[4] = ANALYSIS_MODE_SWITCH_MODE ;
 8003c0a:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2204      	movs	r2, #4
 8003c10:	721a      	strb	r2, [r3, #8]
	controller->analysis_mode[5] = ANALYSIS_MODE_SWITCH_MODE ;
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2204      	movs	r2, #4
 8003c18:	725a      	strb	r2, [r3, #9]
	controller->analysis_mode[6] = ANALYSIS_MODE_SWITCH_MODE ;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	729a      	strb	r2, [r3, #10]
	controller->analysis_mode[7] = ANALYSIS_MODE_SWITCH_MODE ;
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2204      	movs	r2, #4
 8003c28:	72da      	strb	r2, [r3, #11]
	controller->analysis_mode[8] = ANALYSIS_MODE_BUTTON_PUSH ;
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2206      	movs	r2, #6
 8003c30:	731a      	strb	r2, [r3, #12]
	controller->analysis_mode[9] = ANALYSIS_MODE_BUTTON_ON_OFF ;
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <CONTROLLER_Init+0x78>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2205      	movs	r2, #5
 8003c38:	735a      	strb	r2, [r3, #13]

}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20001ba8 	.word	0x20001ba8

08003c4c <CONTROLLER_Update_Channels_Analysis>:

void CONTROLLER_Update_Channels_Analysis(void){
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
	//Analyse des channels
		bool_e button_state ;
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8003c52:	2300      	movs	r3, #0
 8003c54:	71fb      	strb	r3, [r7, #7]
 8003c56:	e1a0      	b.n	8003f9a <CONTROLLER_Update_Channels_Analysis+0x34e>
			switch (controller->analysis_mode[ch]) {
 8003c58:	4bac      	ldr	r3, [pc, #688]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c60:	4413      	add	r3, r2
 8003c62:	791b      	ldrb	r3, [r3, #4]
 8003c64:	2b06      	cmp	r3, #6
 8003c66:	f200 818d 	bhi.w	8003f84 <CONTROLLER_Update_Channels_Analysis+0x338>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <CONTROLLER_Update_Channels_Analysis+0x24>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003f85 	.word	0x08003f85
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003cd9 	.word	0x08003cd9
 8003c7c:	08003f85 	.word	0x08003f85
 8003c80:	08003ee5 	.word	0x08003ee5
 8003c84:	08003da1 	.word	0x08003da1
 8003c88:	08003e55 	.word	0x08003e55
				case ANALYSIS_MODE_NONE:
					//On fait R
					break;

				case ANALYSIS_MODE_STICK_DEAD_BAND :
					if(abs(controller->channels[ch] - 1500) < JOYCTICK_DEAD_BAND)
 8003c8c:	4b9f      	ldr	r3, [pc, #636]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003ca0:	f113 0f1d 	cmn.w	r3, #29
 8003ca4:	f2c0 8170 	blt.w	8003f88 <CONTROLLER_Update_Channels_Analysis+0x33c>
 8003ca8:	4b98      	ldr	r3, [pc, #608]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003cbc:	2b1d      	cmp	r3, #29
 8003cbe:	f300 8163 	bgt.w	8003f88 <CONTROLLER_Update_Channels_Analysis+0x33c>
						controller->channels[ch] = 1500 ;
 8003cc2:	4b92      	ldr	r3, [pc, #584]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	4413      	add	r3, r2
 8003cd0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003cd4:	801a      	strh	r2, [r3, #0]
					break;
 8003cd6:	e157      	b.n	8003f88 <CONTROLLER_Update_Channels_Analysis+0x33c>

				case ANALYSIS_MODE_STICK_LVL :
					if(controller->channels[ch] > 1000 && controller->channels[ch] <= 1050)
 8003cd8:	4b8c      	ldr	r3, [pc, #560]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cec:	d914      	bls.n	8003d18 <CONTROLLER_Update_Channels_Analysis+0xcc>
 8003cee:	4b87      	ldr	r3, [pc, #540]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	f240 421a 	movw	r2, #1050	; 0x41a
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d808      	bhi.n	8003d18 <CONTROLLER_Update_Channels_Analysis+0xcc>
						controller->throttle_lvl[ch] = THROTTLE_LVL_NULL ;
 8003d06:	4b81      	ldr	r3, [pc, #516]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	4413      	add	r3, r2
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2020 	strb.w	r2, [r3, #32]
 8003d16:	e042      	b.n	8003d9e <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1050 && controller->channels[ch] <= 1150)
 8003d18:	4b7c      	ldr	r3, [pc, #496]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	f240 421a 	movw	r2, #1050	; 0x41a
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d914      	bls.n	8003d5a <CONTROLLER_Update_Channels_Analysis+0x10e>
 8003d30:	4b76      	ldr	r3, [pc, #472]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	f240 427e 	movw	r2, #1150	; 0x47e
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d808      	bhi.n	8003d5a <CONTROLLER_Update_Channels_Analysis+0x10e>
						controller->throttle_lvl[ch] = THROTTLE_LVL_LOW ;
 8003d48:	4b70      	ldr	r3, [pc, #448]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d50:	4413      	add	r3, r2
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2020 	strb.w	r2, [r3, #32]
 8003d58:	e021      	b.n	8003d9e <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1150 && controller->channels[ch] < 2000)
 8003d5a:	4b6c      	ldr	r3, [pc, #432]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	f240 427e 	movw	r2, #1150	; 0x47e
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	f240 810c 	bls.w	8003f8c <CONTROLLER_Update_Channels_Analysis+0x340>
 8003d74:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d88:	f080 8100 	bcs.w	8003f8c <CONTROLLER_Update_Channels_Analysis+0x340>
						controller->throttle_lvl[ch] = THROTTLE_LVL_HIGH ;
 8003d8c:	4b5f      	ldr	r3, [pc, #380]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d94:	4413      	add	r3, r2
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2020 	strb.w	r2, [r3, #32]


					break;
 8003d9c:	e0f6      	b.n	8003f8c <CONTROLLER_Update_Channels_Analysis+0x340>
 8003d9e:	e0f5      	b.n	8003f8c <CONTROLLER_Update_Channels_Analysis+0x340>

				case ANALYSIS_MODE_BUTTON_ON_OFF :
					//Active le boutton dans le code
					if(!controller->button_on_off[ch])
 8003da0:	4b5a      	ldr	r3, [pc, #360]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da8:	4413      	add	r3, r2
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d107      	bne.n	8003dc2 <CONTROLLER_Update_Channels_Analysis+0x176>
						controller->button_on_off[ch] = BUTTON_OFF ;
 8003db2:	4b56      	ldr	r3, [pc, #344]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	4413      	add	r3, r2
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8003dc2:	4b52      	ldr	r3, [pc, #328]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	bf8c      	ite	hi
 8003dda:	2301      	movhi	r3, #1
 8003ddc:	2300      	movls	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8003de2:	4b4a      	ldr	r3, [pc, #296]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	4413      	add	r3, r2
 8003dec:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003df0:	461a      	mov	r2, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d022      	beq.n	8003e3e <CONTROLLER_Update_Channels_Analysis+0x1f2>
 8003df8:	4b44      	ldr	r3, [pc, #272]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e00:	4413      	add	r3, r2
 8003e02:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d119      	bne.n	8003e3e <CONTROLLER_Update_Channels_Analysis+0x1f2>
						if(controller->button_on_off[ch] == BUTTON_ON)
 8003e0a:	4b40      	ldr	r3, [pc, #256]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	4413      	add	r3, r2
 8003e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d108      	bne.n	8003e2e <CONTROLLER_Update_Channels_Analysis+0x1e2>
							controller->button_on_off[ch] = BUTTON_OFF ;
 8003e1c:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	4413      	add	r3, r2
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e2c:	e007      	b.n	8003e3e <CONTROLLER_Update_Channels_Analysis+0x1f2>
						else
							controller->button_on_off[ch] = BUTTON_ON ;
 8003e2e:	4b37      	ldr	r3, [pc, #220]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	4413      	add	r3, r2
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}

					controller->button_state[ch] = button_state ;
 8003e3e:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	b2c9      	uxtb	r1, r1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	460a      	mov	r2, r1
 8003e4e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8003e52:	e09c      	b.n	8003f8e <CONTROLLER_Update_Channels_Analysis+0x342>

				case ANALYSIS_MODE_BUTTON_PUSH :
					//Active le boutton dans le code
					if(!controller->button_pushed[ch])
 8003e54:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d107      	bne.n	8003e76 <CONTROLLER_Update_Channels_Analysis+0x22a>
						controller->button_pushed[ch] = BUTTON_PUSHED_NO_REQUEST ;
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	4413      	add	r3, r2
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8003e76:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	bf8c      	ite	hi
 8003e8e:	2301      	movhi	r3, #1
 8003e90:	2300      	movls	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d010      	beq.n	8003ece <CONTROLLER_Update_Channels_Analysis+0x282>
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <CONTROLLER_Update_Channels_Analysis+0x282>
						controller->button_pushed[ch] = BUTTON_PUSHED_REQUEST ;
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					}

					controller->button_state[ch] = button_state ;
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	6839      	ldr	r1, [r7, #0]
 8003ed8:	b2c9      	uxtb	r1, r1
 8003eda:	4413      	add	r3, r2
 8003edc:	460a      	mov	r2, r1
 8003ede:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8003ee2:	e054      	b.n	8003f8e <CONTROLLER_Update_Channels_Analysis+0x342>
				case ANALYSIS_MODE_SEQUENCE:
					//todo analyse de séquences sur les switchs
					break;

				case ANALYSIS_MODE_SWITCH_MODE:
					if(controller->channels[ch] < 1300)
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	f240 5213 	movw	r2, #1299	; 0x513
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d809      	bhi.n	8003f10 <CONTROLLER_Update_Channels_Analysis+0x2c4>
						controller->switch_pos[ch] = SWITCH_POS_1 ;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f04:	4413      	add	r3, r2
 8003f06:	2200      	movs	r2, #0
 8003f08:	749a      	strb	r2, [r3, #18]
						controller->switch_pos[ch] = SWITCH_POS_2 ;
					else if(controller->channels[ch] > 1600)
						controller->switch_pos[ch] = SWITCH_POS_3 ;
					else
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
					break;
 8003f0a:	e040      	b.n	8003f8e <CONTROLLER_Update_Channels_Analysis+0x342>
 8003f0c:	20001ba8 	.word	0x20001ba8
					else if(controller->channels[ch] > 1300 && controller->channels[ch] < 1600)
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	f240 5214 	movw	r2, #1300	; 0x514
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d912      	bls.n	8003f4e <CONTROLLER_Update_Channels_Analysis+0x302>
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	4413      	add	r3, r2
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f3c:	d207      	bcs.n	8003f4e <CONTROLLER_Update_Channels_Analysis+0x302>
						controller->switch_pos[ch] = SWITCH_POS_2 ;
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	; (8003fb0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	4413      	add	r3, r2
 8003f48:	2201      	movs	r2, #1
 8003f4a:	749a      	strb	r2, [r3, #18]
					break;
 8003f4c:	e01f      	b.n	8003f8e <CONTROLLER_Update_Channels_Analysis+0x342>
					else if(controller->channels[ch] > 1600)
 8003f4e:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f62:	d907      	bls.n	8003f74 <CONTROLLER_Update_Channels_Analysis+0x328>
						controller->switch_pos[ch] = SWITCH_POS_3 ;
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	2202      	movs	r2, #2
 8003f70:	749a      	strb	r2, [r3, #18]
					break;
 8003f72:	e00c      	b.n	8003f8e <CONTROLLER_Update_Channels_Analysis+0x342>
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	2203      	movs	r2, #3
 8003f80:	749a      	strb	r2, [r3, #18]
					break;
 8003f82:	e004      	b.n	8003f8e <CONTROLLER_Update_Channels_Analysis+0x342>
				default:
					break;
 8003f84:	bf00      	nop
 8003f86:	e002      	b.n	8003f8e <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8003f8c:	bf00      	nop
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	3301      	adds	r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	71fb      	strb	r3, [r7, #7]
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	2b09      	cmp	r3, #9
 8003fa0:	f77f ae5a 	ble.w	8003c58 <CONTROLLER_Update_Channels_Analysis+0xc>
			}
		}

		flag_process();
 8003fa4:	f000 f806 	bl	8003fb4 <flag_process>
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20001ba8 	.word	0x20001ba8

08003fb4 <flag_process>:

static void flag_process()
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
	//Throttle lvl
	switch(controller->throttle_lvl[2]){
 8003fb8:	4b62      	ldr	r3, [pc, #392]	; (8004144 <flag_process+0x190>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d00d      	beq.n	8003fe0 <flag_process+0x2c>
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d015      	beq.n	8003ff4 <flag_process+0x40>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11d      	bne.n	8004008 <flag_process+0x54>
		case THROTTLE_LVL_NULL :
			EVENT_Set_flag(FLAG_THROTTLE_NULL);
 8003fcc:	2017      	movs	r0, #23
 8003fce:	f7fe fe77 	bl	8002cc0 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8003fd2:	2016      	movs	r0, #22
 8003fd4:	f7fe fe8c 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8003fd8:	2015      	movs	r0, #21
 8003fda:	f7fe fe89 	bl	8002cf0 <EVENT_Clean_flag>
			break;
 8003fde:	e013      	b.n	8004008 <flag_process+0x54>
		case THROTTLE_LVL_LOW :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8003fe0:	2017      	movs	r0, #23
 8003fe2:	f7fe fe85 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_LOW);
 8003fe6:	2016      	movs	r0, #22
 8003fe8:	f7fe fe6a 	bl	8002cc0 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8003fec:	2015      	movs	r0, #21
 8003fee:	f7fe fe7f 	bl	8002cf0 <EVENT_Clean_flag>
			break;
 8003ff2:	e009      	b.n	8004008 <flag_process+0x54>
		case THROTTLE_LVL_HIGH :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8003ff4:	2017      	movs	r0, #23
 8003ff6:	f7fe fe7b 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8003ffa:	2016      	movs	r0, #22
 8003ffc:	f7fe fe78 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_HIGH);
 8004000:	2015      	movs	r0, #21
 8004002:	f7fe fe5d 	bl	8002cc0 <EVENT_Set_flag>
			break;
 8004006:	bf00      	nop
	}

	//Switch 1 (ch5 soit ch[4])
	if(controller->switch_pos[4] == SWITCH_POS_1){
 8004008:	4b4e      	ldr	r3, [pc, #312]	; (8004144 <flag_process+0x190>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	7d9b      	ldrb	r3, [r3, #22]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <flag_process+0x6c>
		EVENT_Set_flag(FLAG_CHAN_5_POS_1);
 8004012:	2009      	movs	r0, #9
 8004014:	f7fe fe54 	bl	8002cc0 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_5_POS_3);
 8004018:	200a      	movs	r0, #10
 800401a:	f7fe fe69 	bl	8002cf0 <EVENT_Clean_flag>
 800401e:	e005      	b.n	800402c <flag_process+0x78>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_5_POS_1);
 8004020:	2009      	movs	r0, #9
 8004022:	f7fe fe65 	bl	8002cf0 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_5_POS_3);
 8004026:	200a      	movs	r0, #10
 8004028:	f7fe fe4a 	bl	8002cc0 <EVENT_Set_flag>
	}
	//Switch 2(ch6 soit ch[5])
	switch(controller->switch_pos[5]){
 800402c:	4b45      	ldr	r3, [pc, #276]	; (8004144 <flag_process+0x190>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	7ddb      	ldrb	r3, [r3, #23]
 8004032:	2b03      	cmp	r3, #3
 8004034:	d828      	bhi.n	8004088 <flag_process+0xd4>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <flag_process+0x88>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	0800404d 	.word	0x0800404d
 8004040:	08004061 	.word	0x08004061
 8004044:	08004075 	.word	0x08004075
 8004048:	08004089 	.word	0x08004089
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_6_POS_1);
 800404c:	200b      	movs	r0, #11
 800404e:	f7fe fe37 	bl	8002cc0 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8004052:	200c      	movs	r0, #12
 8004054:	f7fe fe4c 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8004058:	200d      	movs	r0, #13
 800405a:	f7fe fe49 	bl	8002cf0 <EVENT_Clean_flag>
			break;
 800405e:	e013      	b.n	8004088 <flag_process+0xd4>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8004060:	200b      	movs	r0, #11
 8004062:	f7fe fe45 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_2);
 8004066:	200c      	movs	r0, #12
 8004068:	f7fe fe2a 	bl	8002cc0 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 800406c:	200d      	movs	r0, #13
 800406e:	f7fe fe3f 	bl	8002cf0 <EVENT_Clean_flag>
			break;
 8004072:	e009      	b.n	8004088 <flag_process+0xd4>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8004074:	200b      	movs	r0, #11
 8004076:	f7fe fe3b 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 800407a:	200c      	movs	r0, #12
 800407c:	f7fe fe38 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_3);
 8004080:	200d      	movs	r0, #13
 8004082:	f7fe fe1d 	bl	8002cc0 <EVENT_Set_flag>
			break;
 8004086:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 3(ch7 soit ch[6])
	switch(controller->switch_pos[6]){
 8004088:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <flag_process+0x190>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	7e1b      	ldrb	r3, [r3, #24]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d828      	bhi.n	80040e4 <flag_process+0x130>
 8004092:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <flag_process+0xe4>)
 8004094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004098:	080040a9 	.word	0x080040a9
 800409c:	080040bd 	.word	0x080040bd
 80040a0:	080040d1 	.word	0x080040d1
 80040a4:	080040e5 	.word	0x080040e5
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_7_POS_1);
 80040a8:	200e      	movs	r0, #14
 80040aa:	f7fe fe09 	bl	8002cc0 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 80040ae:	200f      	movs	r0, #15
 80040b0:	f7fe fe1e 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 80040b4:	2010      	movs	r0, #16
 80040b6:	f7fe fe1b 	bl	8002cf0 <EVENT_Clean_flag>
			break;
 80040ba:	e013      	b.n	80040e4 <flag_process+0x130>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 80040bc:	200e      	movs	r0, #14
 80040be:	f7fe fe17 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_2);
 80040c2:	200f      	movs	r0, #15
 80040c4:	f7fe fdfc 	bl	8002cc0 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 80040c8:	2010      	movs	r0, #16
 80040ca:	f7fe fe11 	bl	8002cf0 <EVENT_Clean_flag>
			break;
 80040ce:	e009      	b.n	80040e4 <flag_process+0x130>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 80040d0:	200e      	movs	r0, #14
 80040d2:	f7fe fe0d 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 80040d6:	200f      	movs	r0, #15
 80040d8:	f7fe fe0a 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_3);
 80040dc:	2010      	movs	r0, #16
 80040de:	f7fe fdef 	bl	8002cc0 <EVENT_Set_flag>
			break;
 80040e2:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 4 (ch8 soit ch[7])
	if(controller->switch_pos[7] == SWITCH_POS_1){
 80040e4:	4b17      	ldr	r3, [pc, #92]	; (8004144 <flag_process+0x190>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	7e5b      	ldrb	r3, [r3, #25]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <flag_process+0x148>
		EVENT_Set_flag(FLAG_CHAN_8_POS_1);
 80040ee:	2011      	movs	r0, #17
 80040f0:	f7fe fde6 	bl	8002cc0 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_8_POS_3);
 80040f4:	2012      	movs	r0, #18
 80040f6:	f7fe fdfb 	bl	8002cf0 <EVENT_Clean_flag>
 80040fa:	e005      	b.n	8004108 <flag_process+0x154>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_8_POS_1);
 80040fc:	2011      	movs	r0, #17
 80040fe:	f7fe fdf7 	bl	8002cf0 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_8_POS_3);
 8004102:	2012      	movs	r0, #18
 8004104:	f7fe fddc 	bl	8002cc0 <EVENT_Set_flag>
	}

	//Button 1 (ch9 soit ch[8]) en mode push
	if(controller->button_pushed[8] == BUTTON_PUSHED_REQUEST){
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <flag_process+0x190>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004110:	2b02      	cmp	r3, #2
 8004112:	d107      	bne.n	8004124 <flag_process+0x170>
		EVENT_Set_flag(FLAG_CHAN_9_PUSH);
 8004114:	2013      	movs	r0, #19
 8004116:	f7fe fdd3 	bl	8002cc0 <EVENT_Set_flag>
		controller->button_pushed[8] = BUTTON_PUSHED_NO_REQUEST ;
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <flag_process+0x190>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	//Button 2 (ch10 soit ch[9]) en mode on/off
	if(controller->button_on_off[9] == BUTTON_ON)
 8004124:	4b07      	ldr	r3, [pc, #28]	; (8004144 <flag_process+0x190>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800412c:	2b02      	cmp	r3, #2
 800412e:	d103      	bne.n	8004138 <flag_process+0x184>
		EVENT_Set_flag(FLAG_CHAN_10_ON);
 8004130:	2014      	movs	r0, #20
 8004132:	f7fe fdc5 	bl	8002cc0 <EVENT_Set_flag>
	else
		EVENT_Clean_flag(FLAG_CHAN_10_ON);



}
 8004136:	e002      	b.n	800413e <flag_process+0x18a>
		EVENT_Clean_flag(FLAG_CHAN_10_ON);
 8004138:	2014      	movs	r0, #20
 800413a:	f7fe fdd9 	bl	8002cf0 <EVENT_Clean_flag>
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20001ba8 	.word	0x20001ba8

08004148 <CONTROLLER_Update_Channels_Array>:

bool_e CONTROLLER_Update_Channels_Array(void){
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
	//Utilisation de l'ibus atm
	return IBUS_Channel_Update();
 800414c:	f007 fd54 	bl	800bbf8 <IBUS_Channel_Update>
 8004150:	4603      	mov	r3, r0
}
 8004152:	4618      	mov	r0, r3
 8004154:	bd80      	pop	{r7, pc}

08004156 <CONTROLLER_Rx_Data_Rdy>:

void CONTROLLER_Rx_Data_Rdy(void){
 8004156:	b580      	push	{r7, lr}
 8004158:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_IBUS_DATA_RDY);
 800415a:	2008      	movs	r0, #8
 800415c:	f7fe fdb0 	bl	8002cc0 <EVENT_Set_flag>
}
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}

08004164 <REGULATION_ORIENTATION_Init>:

float pid_angle_settings_roll[PID_NB_SETTINGS] = {6.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};
float pid_angle_settings_pitch[PID_NB_SETTINGS] = {7.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};


void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
	orientation = orientation_ ;
 8004170:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <REGULATION_ORIENTATION_Init+0x8c>)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_ ;
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <REGULATION_ORIENTATION_Init+0x90>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6013      	str	r3, [r2, #0]
	regu_orientation->mode = REGULATION_ORIENTATION_MODE_OFF ;
 800417c:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <REGULATION_ORIENTATION_Init+0x90>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	711a      	strb	r2, [r3, #4]
	regu_orientation->outputs = output ;
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <REGULATION_ORIENTATION_Init+0x90>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8


	//Init PIDs angular speed
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], pid_velocity_settings_roll, FILTER_SECOND_ORDER, filter_pid_velocity_roll_pitch);
 800418e:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <REGULATION_ORIENTATION_Init+0x90>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <REGULATION_ORIENTATION_Init+0x94>)
 8004198:	2201      	movs	r2, #1
 800419a:	4918      	ldr	r1, [pc, #96]	; (80041fc <REGULATION_ORIENTATION_Init+0x98>)
 800419c:	f007 ffee 	bl	800c17c <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], pid_velocity_settings_pitch, FILTER_SECOND_ORDER, filter_pid_velocity_roll_pitch);
 80041a0:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <REGULATION_ORIENTATION_Init+0x90>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f103 0008 	add.w	r0, r3, #8
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <REGULATION_ORIENTATION_Init+0x94>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	4914      	ldr	r1, [pc, #80]	; (8004200 <REGULATION_ORIENTATION_Init+0x9c>)
 80041ae:	f007 ffe5 	bl	800c17c <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], pid_velocity_settings_yaw, FILTER_FIRST_ORDER, filter_pid_velocity_yaw);
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <REGULATION_ORIENTATION_Init+0x90>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 80041ba:	4b12      	ldr	r3, [pc, #72]	; (8004204 <REGULATION_ORIENTATION_Init+0xa0>)
 80041bc:	2200      	movs	r2, #0
 80041be:	4912      	ldr	r1, [pc, #72]	; (8004208 <REGULATION_ORIENTATION_Init+0xa4>)
 80041c0:	f007 ffdc 	bl	800c17c <PID_init>


	//Init PIDs angular position
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], pid_angle_settings_roll, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <REGULATION_ORIENTATION_Init+0x90>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f503 709c 	add.w	r0, r3, #312	; 0x138
 80041cc:	4b0f      	ldr	r3, [pc, #60]	; (800420c <REGULATION_ORIENTATION_Init+0xa8>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	490f      	ldr	r1, [pc, #60]	; (8004210 <REGULATION_ORIENTATION_Init+0xac>)
 80041d2:	f007 ffd3 	bl	800c17c <PID_init>
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], pid_angle_settings_pitch, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <REGULATION_ORIENTATION_Init+0x90>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <REGULATION_ORIENTATION_Init+0xa8>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	490c      	ldr	r1, [pc, #48]	; (8004214 <REGULATION_ORIENTATION_Init+0xb0>)
 80041e4:	f007 ffca 	bl	800c17c <PID_init>


}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20001bb0 	.word	0x20001bb0
 80041f4:	20001bac 	.word	0x20001bac
 80041f8:	200015ac 	.word	0x200015ac
 80041fc:	200015c4 	.word	0x200015c4
 8004200:	200015d8 	.word	0x200015d8
 8004204:	200015b8 	.word	0x200015b8
 8004208:	200015ec 	.word	0x200015ec
 800420c:	20001600 	.word	0x20001600
 8004210:	2000160c 	.word	0x2000160c
 8004214:	20001620 	.word	0x20001620

08004218 <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_orientation_mode_e regu_mode){
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	71fb      	strb	r3, [r7, #7]
	regu_orientation->mode = regu_mode;
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <REGULATION_ORIENTATION_Set_Regulation_Mode+0x20>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	79fa      	ldrb	r2, [r7, #7]
 8004228:	711a      	strb	r2, [r3, #4]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20001bac 	.word	0x20001bac

0800423c <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0

	switch(regu_orientation->mode){
 8004240:	4b90      	ldr	r3, [pc, #576]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	791b      	ldrb	r3, [r3, #4]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d019      	beq.n	800427e <REGULATION_ORIENTATION_Process+0x42>
 800424a:	2b02      	cmp	r3, #2
 800424c:	d07c      	beq.n	8004348 <REGULATION_ORIENTATION_Process+0x10c>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d000      	beq.n	8004254 <REGULATION_ORIENTATION_Process+0x18>
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
			break;
	}

}
 8004252:	e114      	b.n	800447e <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = 0;
 8004254:	4b8b      	ldr	r3, [pc, #556]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800425c:	2200      	movs	r2, #0
 800425e:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = 0;
 8004260:	4b88      	ldr	r3, [pc, #544]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004268:	3302      	adds	r3, #2
 800426a:	2200      	movs	r2, #0
 800426c:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = 0;
 800426e:	4b85      	ldr	r3, [pc, #532]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004276:	3304      	adds	r3, #4
 8004278:	2200      	movs	r2, #0
 800427a:	801a      	strh	r2, [r3, #0]
			break;
 800427c:	e0ff      	b.n	800447e <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 800427e:	4b81      	ldr	r3, [pc, #516]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8004286:	4b7f      	ldr	r3, [pc, #508]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800428e:	4b7e      	ldr	r3, [pc, #504]	; (8004488 <REGULATION_ORIENTATION_Process+0x24c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	3304      	adds	r3, #4
 8004296:	ed93 7a00 	vldr	s14, [r3]
 800429a:	eef0 0a47 	vmov.f32	s1, s14
 800429e:	eeb0 0a67 	vmov.f32	s0, s15
 80042a2:	4610      	mov	r0, r2
 80042a4:	f007 fece 	bl	800c044 <PID_compute>
 80042a8:	eef0 7a40 	vmov.f32	s15, s0
 80042ac:	4b75      	ldr	r3, [pc, #468]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80042b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042b8:	ee17 2a90 	vmov	r2, s15
 80042bc:	b212      	sxth	r2, r2
 80042be:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 80042c0:	4b70      	ldr	r3, [pc, #448]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f103 0208 	add.w	r2, r3, #8
 80042c8:	4b6e      	ldr	r3, [pc, #440]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80042d0:	4b6d      	ldr	r3, [pc, #436]	; (8004488 <REGULATION_ORIENTATION_Process+0x24c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	ed93 7a00 	vldr	s14, [r3]
 80042da:	eef0 0a47 	vmov.f32	s1, s14
 80042de:	eeb0 0a67 	vmov.f32	s0, s15
 80042e2:	4610      	mov	r0, r2
 80042e4:	f007 feae 	bl	800c044 <PID_compute>
 80042e8:	eef0 7a40 	vmov.f32	s15, s0
 80042ec:	4b65      	ldr	r3, [pc, #404]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80042f4:	3302      	adds	r3, #2
 80042f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042fa:	ee17 2a90 	vmov	r2, s15
 80042fe:	b212      	sxth	r2, r2
 8004300:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 8004302:	4b60      	ldr	r3, [pc, #384]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800430a:	4b5e      	ldr	r3, [pc, #376]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8004312:	4b5d      	ldr	r3, [pc, #372]	; (8004488 <REGULATION_ORIENTATION_Process+0x24c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	3308      	adds	r3, #8
 800431a:	ed93 7a00 	vldr	s14, [r3]
 800431e:	eef0 0a47 	vmov.f32	s1, s14
 8004322:	eeb0 0a67 	vmov.f32	s0, s15
 8004326:	4610      	mov	r0, r2
 8004328:	f007 fe8c 	bl	800c044 <PID_compute>
 800432c:	eef0 7a40 	vmov.f32	s15, s0
 8004330:	4b54      	ldr	r3, [pc, #336]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004338:	3304      	adds	r3, #4
 800433a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800433e:	ee17 2a90 	vmov	r2, s15
 8004342:	b212      	sxth	r2, r2
 8004344:	801a      	strh	r2, [r3, #0]
			break;
 8004346:	e09a      	b.n	800447e <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->consigne_angular_speed[ORIENTATION_ROLL] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], regu_orientation->consigne_angular_pos[ORIENTATION_ROLL], orientation->angular_position[ORIENTATION_ROLL]);
 8004348:	4b4e      	ldr	r3, [pc, #312]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8004350:	4b4c      	ldr	r3, [pc, #304]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8004358:	4b4b      	ldr	r3, [pc, #300]	; (8004488 <REGULATION_ORIENTATION_Process+0x24c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004360:	eef0 0a47 	vmov.f32	s1, s14
 8004364:	eeb0 0a67 	vmov.f32	s0, s15
 8004368:	4610      	mov	r0, r2
 800436a:	f007 fe6b 	bl	800c044 <PID_compute>
 800436e:	eef0 7a40 	vmov.f32	s15, s0
 8004372:	4b44      	ldr	r3, [pc, #272]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	eef1 7a67 	vneg.f32	s15, s15
 800437a:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0
			regu_orientation->consigne_angular_speed[ORIENTATION_PITCH] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], regu_orientation->consigne_angular_pos[ORIENTATION_PITCH], orientation->angular_position[ORIENTATION_PITCH]);
 800437e:	4b41      	ldr	r3, [pc, #260]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8004386:	4b3f      	ldr	r3, [pc, #252]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 800438e:	4b3e      	ldr	r3, [pc, #248]	; (8004488 <REGULATION_ORIENTATION_Process+0x24c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	ed93 7a00 	vldr	s14, [r3]
 8004396:	eef0 0a47 	vmov.f32	s1, s14
 800439a:	eeb0 0a67 	vmov.f32	s0, s15
 800439e:	4610      	mov	r0, r2
 80043a0:	f007 fe50 	bl	800c044 <PID_compute>
 80043a4:	eef0 7a40 	vmov.f32	s15, s0
 80043a8:	4b36      	ldr	r3, [pc, #216]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	eef1 7a67 	vneg.f32	s15, s15
 80043b0:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 80043b4:	4b33      	ldr	r3, [pc, #204]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80043c4:	4b30      	ldr	r3, [pc, #192]	; (8004488 <REGULATION_ORIENTATION_Process+0x24c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	3304      	adds	r3, #4
 80043cc:	ed93 7a00 	vldr	s14, [r3]
 80043d0:	eef0 0a47 	vmov.f32	s1, s14
 80043d4:	eeb0 0a67 	vmov.f32	s0, s15
 80043d8:	4610      	mov	r0, r2
 80043da:	f007 fe33 	bl	800c044 <PID_compute>
 80043de:	eef0 7a40 	vmov.f32	s15, s0
 80043e2:	4b28      	ldr	r3, [pc, #160]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80043ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043ee:	ee17 2a90 	vmov	r2, s15
 80043f2:	b212      	sxth	r2, r2
 80043f4:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 80043f6:	4b23      	ldr	r3, [pc, #140]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f103 0208 	add.w	r2, r3, #8
 80043fe:	4b21      	ldr	r3, [pc, #132]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <REGULATION_ORIENTATION_Process+0x24c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	ed93 7a00 	vldr	s14, [r3]
 8004410:	eef0 0a47 	vmov.f32	s1, s14
 8004414:	eeb0 0a67 	vmov.f32	s0, s15
 8004418:	4610      	mov	r0, r2
 800441a:	f007 fe13 	bl	800c044 <PID_compute>
 800441e:	eef0 7a40 	vmov.f32	s15, s0
 8004422:	4b18      	ldr	r3, [pc, #96]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800442a:	3302      	adds	r3, #2
 800442c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004430:	ee17 2a90 	vmov	r2, s15
 8004434:	b212      	sxth	r2, r2
 8004436:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 8004438:	4b12      	ldr	r3, [pc, #72]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <REGULATION_ORIENTATION_Process+0x24c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	3308      	adds	r3, #8
 8004450:	ed93 7a00 	vldr	s14, [r3]
 8004454:	eef0 0a47 	vmov.f32	s1, s14
 8004458:	eeb0 0a67 	vmov.f32	s0, s15
 800445c:	4610      	mov	r0, r2
 800445e:	f007 fdf1 	bl	800c044 <PID_compute>
 8004462:	eef0 7a40 	vmov.f32	s15, s0
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <REGULATION_ORIENTATION_Process+0x248>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800446e:	3304      	adds	r3, #4
 8004470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004474:	ee17 2a90 	vmov	r2, s15
 8004478:	b212      	sxth	r2, r2
 800447a:	801a      	strh	r2, [r3, #0]
			break;
 800447c:	bf00      	nop
}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20001bac 	.word	0x20001bac
 8004488:	20001bb0 	.word	0x20001bb0

0800448c <REGULATION_POSITION_Init>:





void REGULATION_POSITION_Init(regu_position_t * regu_position_, regu_orientation_t * regu_orientation_, int16_t * outputs){
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
	regu_position = regu_position_;
 8004498:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <REGULATION_POSITION_Init+0x34>)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_;
 800449e:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <REGULATION_POSITION_Init+0x38>)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	6013      	str	r3, [r2, #0]
	regu_position->mode = REGULATION_POSITION_MODE_OFF ;
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <REGULATION_POSITION_Init+0x34>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2200      	movs	r2, #0
 80044aa:	721a      	strb	r2, [r3, #8]
	regu_position->outputs = outputs ;
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <REGULATION_POSITION_Init+0x34>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	605a      	str	r2, [r3, #4]


}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	20001bb4 	.word	0x20001bb4
 80044c4:	20001bb8 	.word	0x20001bb8

080044c8 <REGULATION_POSITION_Set_Regulation_Mode>:

void REGULATION_POSITION_Set_Regulation_Mode(regu_position_mode_e regu_mode){
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	71fb      	strb	r3, [r7, #7]
	regu_position->mode = regu_mode ;
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <REGULATION_POSITION_Set_Regulation_Mode+0x20>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	79fa      	ldrb	r2, [r7, #7]
 80044d8:	721a      	strb	r2, [r3, #8]
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20001bb4 	.word	0x20001bb4

080044ec <REGULATION_POSITION_Process>:

void REGULATION_POSITION_Process(void){
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
	switch(regu_position->mode){
 80044f0:	4b0e      	ldr	r3, [pc, #56]	; (800452c <REGULATION_POSITION_Process+0x40>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	7a1b      	ldrb	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <REGULATION_POSITION_Process+0x14>
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d007      	beq.n	800450e <REGULATION_POSITION_Process+0x22>
			break;
		case REGULATION_POSITION_MODE_ON:
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
			break;
	}
}
 80044fe:	e010      	b.n	8004522 <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = 0;
 8004500:	4b0a      	ldr	r3, [pc, #40]	; (800452c <REGULATION_POSITION_Process+0x40>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	3306      	adds	r3, #6
 8004508:	2200      	movs	r2, #0
 800450a:	801a      	strh	r2, [r3, #0]
			break;
 800450c:	e009      	b.n	8004522 <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
 800450e:	4b07      	ldr	r3, [pc, #28]	; (800452c <REGULATION_POSITION_Process+0x40>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <REGULATION_POSITION_Process+0x40>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	3306      	adds	r3, #6
 800451a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800451e:	801a      	strh	r2, [r3, #0]
			break;
 8004520:	bf00      	nop
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	20001bb4 	.word	0x20001bb4

08004530 <ACC_init>:
static void acc_data_callback(void);

float filter_config [3] = {0.1f, 0.9f, 0};


void ACC_init(acc_t * acc, mpu_t * mpu){
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]

	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_FIRST_ORDER);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3314      	adds	r3, #20
 800453e:	2200      	movs	r2, #0
 8004540:	491a      	ldr	r1, [pc, #104]	; (80045ac <ACC_init+0x7c>)
 8004542:	4618      	mov	r0, r3
 8004544:	f007 fa56 	bl	800b9f4 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_FIRST_ORDER);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3330      	adds	r3, #48	; 0x30
 800454c:	2200      	movs	r2, #0
 800454e:	4917      	ldr	r1, [pc, #92]	; (80045ac <ACC_init+0x7c>)
 8004550:	4618      	mov	r0, r3
 8004552:	f007 fa4f 	bl	800b9f4 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_FIRST_ORDER);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	334c      	adds	r3, #76	; 0x4c
 800455a:	2200      	movs	r2, #0
 800455c:	4913      	ldr	r1, [pc, #76]	; (80045ac <ACC_init+0x7c>)
 800455e:	4618      	mov	r0, r3
 8004560:	f007 fa48 	bl	800b9f4 <FILTER_init>


	acc->mpu = mpu ;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	601a      	str	r2, [r3, #0]
	acc->raw = acc->mpu->acc ;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	605a      	str	r2, [r3, #4]

	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <ACC_init+0x80>)
 800457c:	2101      	movs	r1, #1
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fc76 	bl	8004e70 <MPU_init_acc>
 8004584:	4603      	mov	r3, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	d008      	beq.n	800459c <ACC_init+0x6c>
 800458a:	2b02      	cmp	r3, #2
 800458c:	d008      	beq.n	80045a0 <ACC_init+0x70>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d000      	beq.n	8004594 <ACC_init+0x64>
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}

}
 8004592:	e006      	b.n	80045a2 <ACC_init+0x72>
			EVENT_Set_flag(FLAG_ACC_OK);
 8004594:	2004      	movs	r0, #4
 8004596:	f7fe fb93 	bl	8002cc0 <EVENT_Set_flag>
			break;
 800459a:	e002      	b.n	80045a2 <ACC_init+0x72>
			break;
 800459c:	bf00      	nop
 800459e:	e000      	b.n	80045a2 <ACC_init+0x72>
			break;
 80045a0:	bf00      	nop
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20001634 	.word	0x20001634
 80045b0:	08004671 	.word	0x08004671

080045b4 <ACC_update>:

void ACC_update(acc_t * acc){
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	switch(MPU_update_acc(acc->mpu)){
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fd03 	bl	8004fcc <MPU_update_acc>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d00c      	beq.n	80045e6 <ACC_update+0x32>
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d006      	beq.n	80045de <ACC_update+0x2a>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d000      	beq.n	80045d6 <ACC_update+0x22>
			EVENT_Clean_flag(FLAG_ACC_OK);
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 80045d4:	e008      	b.n	80045e8 <ACC_update+0x34>
			EVENT_Set_flag(FLAG_ACC_DATA_READY);
 80045d6:	2006      	movs	r0, #6
 80045d8:	f7fe fb72 	bl	8002cc0 <EVENT_Set_flag>
			break;
 80045dc:	e004      	b.n	80045e8 <ACC_update+0x34>
			EVENT_Clean_flag(FLAG_ACC_OK);
 80045de:	2004      	movs	r0, #4
 80045e0:	f7fe fb86 	bl	8002cf0 <EVENT_Clean_flag>
			break;
 80045e4:	e000      	b.n	80045e8 <ACC_update+0x34>
			break;
 80045e6:	bf00      	nop
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <ACC_process_lpf>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void ACC_process_lpf(acc_t * acc){
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f103 0214 	add.w	r2, r3, #20
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	edd3 7a00 	vldr	s15, [r3]
 8004606:	eeb0 0a67 	vmov.f32	s0, s15
 800460a:	4610      	mov	r0, r2
 800460c:	f007 fa15 	bl	800ba3a <FILTER_process>
 8004610:	eef0 7a40 	vmov.f32	s15, s0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	eeb0 0a67 	vmov.f32	s0, s15
 800462e:	4610      	mov	r0, r2
 8004630:	f007 fa03 	bl	800ba3a <FILTER_process>
 8004634:	eef0 7a40 	vmov.f32	s15, s0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	edc3 7a03 	vstr	s15, [r3, #12]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	3308      	adds	r3, #8
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	eeb0 0a67 	vmov.f32	s0, s15
 8004652:	4610      	mov	r0, r2
 8004654:	f007 f9f1 	bl	800ba3a <FILTER_process>
 8004658:	eef0 7a40 	vmov.f32	s15, s0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	edc3 7a04 	vstr	s15, [r3, #16]
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 8004662:	2007      	movs	r0, #7
 8004664:	f7fe fb2c 	bl	8002cc0 <EVENT_Set_flag>
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <acc_data_callback>:

static void acc_data_callback(void){
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8004674:	2006      	movs	r0, #6
 8004676:	f7fe fb23 	bl	8002cc0 <EVENT_Set_flag>
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}

0800467e <BATTERIE_Init>:


#include "batterie.h"


void BATTERIE_Init(batterie_t * batterie, ADC_HandleTypeDef * hadc){
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
	batterie->hadc = hadc ;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(hadc, batterie->reading, 16);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	2210      	movs	r2, #16
 8004694:	4619      	mov	r1, r3
 8004696:	6838      	ldr	r0, [r7, #0]
 8004698:	f002 fb50 	bl	8006d3c <HAL_ADC_Start_DMA>
}
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <GYRO_init>:

//float filter[3] = {0.01234567901f, 1.777777778f, -0.7901234568f};
float filter[3] = {0.04f, 1.6f, -0.64f};
static void gyro_data_callback(void);

void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]

	//Filters init
	FILTER_init(&gyro->filters[GYRO_AXE_X], filter, FILTER_SECOND_ORDER);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3320      	adds	r3, #32
 80046b2:	2201      	movs	r2, #1
 80046b4:	491a      	ldr	r1, [pc, #104]	; (8004720 <GYRO_init+0x7c>)
 80046b6:	4618      	mov	r0, r3
 80046b8:	f007 f99c 	bl	800b9f4 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Y], filter, FILTER_SECOND_ORDER);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	333c      	adds	r3, #60	; 0x3c
 80046c0:	2201      	movs	r2, #1
 80046c2:	4917      	ldr	r1, [pc, #92]	; (8004720 <GYRO_init+0x7c>)
 80046c4:	4618      	mov	r0, r3
 80046c6:	f007 f995 	bl	800b9f4 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Z], filter, FILTER_SECOND_ORDER);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3358      	adds	r3, #88	; 0x58
 80046ce:	2201      	movs	r2, #1
 80046d0:	4913      	ldr	r1, [pc, #76]	; (8004720 <GYRO_init+0x7c>)
 80046d2:	4618      	mov	r0, r3
 80046d4:	f007 f98e 	bl	800b9f4 <FILTER_init>

	gyro->mpu = mpu ;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	601a      	str	r2, [r3, #0]
	gyro->raw = gyro->mpu->gyro ;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	605a      	str	r2, [r3, #4]

	//Raise the flag "ok" if the gyro get succesfully initiated
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a0d      	ldr	r2, [pc, #52]	; (8004724 <GYRO_init+0x80>)
 80046f0:	2103      	movs	r1, #3
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fb04 	bl	8004d00 <MPU_init_gyro>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d008      	beq.n	8004710 <GYRO_init+0x6c>
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d008      	beq.n	8004714 <GYRO_init+0x70>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d000      	beq.n	8004708 <GYRO_init+0x64>
		case SENSOR_REQUEST_FAIL:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8004706:	e006      	b.n	8004716 <GYRO_init+0x72>
			EVENT_Set_flag(FLAG_GYRO_OK);
 8004708:	2000      	movs	r0, #0
 800470a:	f7fe fad9 	bl	8002cc0 <EVENT_Set_flag>
			break;
 800470e:	e002      	b.n	8004716 <GYRO_init+0x72>
			break;
 8004710:	bf00      	nop
 8004712:	e000      	b.n	8004716 <GYRO_init+0x72>
			break;
 8004714:	bf00      	nop
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20001640 	.word	0x20001640
 8004724:	08004953 	.word	0x08004953

08004728 <GYRO_calibrate>:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
bool_e GYRO_calibrate(gyro_t * gyro, uint16_t iteration){
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
	static uint16_t compteur = 0;

	static float sum[3] = {0};

	if(!compteur){
 8004734:	4b41      	ldr	r3, [pc, #260]	; (800483c <GYRO_calibrate+0x114>)
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <GYRO_calibrate+0x2c>
		sum[0] = 0 ;
 800473c:	4b40      	ldr	r3, [pc, #256]	; (8004840 <GYRO_calibrate+0x118>)
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
		sum[1] = 0 ;
 8004744:	4b3e      	ldr	r3, [pc, #248]	; (8004840 <GYRO_calibrate+0x118>)
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	605a      	str	r2, [r3, #4]
		sum[2] = 0 ;
 800474c:	4b3c      	ldr	r3, [pc, #240]	; (8004840 <GYRO_calibrate+0x118>)
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	609a      	str	r2, [r3, #8]
	}

	sum[0] += gyro->raw[0] + gyro->offsets[0];
 8004754:	4b3a      	ldr	r3, [pc, #232]	; (8004840 <GYRO_calibrate+0x118>)
 8004756:	ed93 7a00 	vldr	s14, [r3]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	edd3 6a00 	vldr	s13, [r3]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	edd3 7a05 	vldr	s15, [r3, #20]
 8004768:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004770:	4b33      	ldr	r3, [pc, #204]	; (8004840 <GYRO_calibrate+0x118>)
 8004772:	edc3 7a00 	vstr	s15, [r3]
	sum[1] += gyro->raw[1] + gyro->offsets[1];
 8004776:	4b32      	ldr	r3, [pc, #200]	; (8004840 <GYRO_calibrate+0x118>)
 8004778:	ed93 7a01 	vldr	s14, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	3304      	adds	r3, #4
 8004782:	edd3 6a00 	vldr	s13, [r3]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	edd3 7a06 	vldr	s15, [r3, #24]
 800478c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004794:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <GYRO_calibrate+0x118>)
 8004796:	edc3 7a01 	vstr	s15, [r3, #4]
	sum[2] += gyro->raw[2] + gyro->offsets[2];
 800479a:	4b29      	ldr	r3, [pc, #164]	; (8004840 <GYRO_calibrate+0x118>)
 800479c:	ed93 7a02 	vldr	s14, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	3308      	adds	r3, #8
 80047a6:	edd3 6a00 	vldr	s13, [r3]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80047b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <GYRO_calibrate+0x118>)
 80047ba:	edc3 7a02 	vstr	s15, [r3, #8]

	compteur ++;
 80047be:	4b1f      	ldr	r3, [pc, #124]	; (800483c <GYRO_calibrate+0x114>)
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	3301      	adds	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	4b1d      	ldr	r3, [pc, #116]	; (800483c <GYRO_calibrate+0x114>)
 80047c8:	801a      	strh	r2, [r3, #0]

	if(compteur == iteration){
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <GYRO_calibrate+0x114>)
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	887a      	ldrh	r2, [r7, #2]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d12b      	bne.n	800482c <GYRO_calibrate+0x104>
		gyro->offsets[0] = sum[0] / (float)iteration;
 80047d4:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <GYRO_calibrate+0x118>)
 80047d6:	edd3 6a00 	vldr	s13, [r3]
 80047da:	887b      	ldrh	r3, [r7, #2]
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	edc3 7a05 	vstr	s15, [r3, #20]
		gyro->offsets[1] = sum[1] / (float)iteration;
 80047ee:	4b14      	ldr	r3, [pc, #80]	; (8004840 <GYRO_calibrate+0x118>)
 80047f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80047f4:	887b      	ldrh	r3, [r7, #2]
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	edc3 7a06 	vstr	s15, [r3, #24]
		gyro->offsets[2] = sum[2] / (float)iteration;
 8004808:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <GYRO_calibrate+0x118>)
 800480a:	edd3 6a02 	vldr	s13, [r3, #8]
 800480e:	887b      	ldrh	r3, [r7, #2]
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	edc3 7a07 	vstr	s15, [r3, #28]
		compteur = 0;
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <GYRO_calibrate+0x114>)
 8004824:	2200      	movs	r2, #0
 8004826:	801a      	strh	r2, [r3, #0]
		return TRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <GYRO_calibrate+0x106>
	}

	return FALSE;
 800482c:	2300      	movs	r3, #0

}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20001bbc 	.word	0x20001bbc
 8004840:	20001bc0 	.word	0x20001bc0

08004844 <GYRO_ACC_update_dma>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void GYRO_ACC_update_dma(gyro_t * gyro){
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	switch(MPU_update_all_dma(gyro->mpu)){
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fbfa 	bl	800504a <MPU_update_all_dma>
 8004856:	4603      	mov	r3, r0
 8004858:	2b01      	cmp	r3, #1
 800485a:	d00a      	beq.n	8004872 <GYRO_ACC_update_dma+0x2e>
 800485c:	2b02      	cmp	r3, #2
 800485e:	d001      	beq.n	8004864 <GYRO_ACC_update_dma+0x20>
 8004860:	2b00      	cmp	r3, #0
		case SENSOR_REQUEST_OK:
			break;
 8004862:	e007      	b.n	8004874 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_FAIL:
			EVENT_Clean_flag(FLAG_GYRO_OK);
 8004864:	2000      	movs	r0, #0
 8004866:	f7fe fa43 	bl	8002cf0 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 800486a:	2004      	movs	r0, #4
 800486c:	f7fe fa40 	bl	8002cf0 <EVENT_Clean_flag>
			break;
 8004870:	e000      	b.n	8004874 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_BUSY:
			break;
 8004872:	bf00      	nop
	}
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <GYRO_process_lpf>:

void GYRO_process_lpf(gyro_t * gyro){
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	//Offset correction first
	gyro->raw[GYRO_AXE_X] -= gyro->offsets[GYRO_AXE_X];
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	ed93 7a00 	vldr	s14, [r3]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800489a:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[GYRO_AXE_Y] -= gyro->offsets[GYRO_AXE_Y];
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	ed93 7a00 	vldr	s14, [r3]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048b8:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[GYRO_AXE_Z] -= gyro->offsets[GYRO_AXE_Z];
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	3308      	adds	r3, #8
 80048c2:	ed93 7a00 	vldr	s14, [r3]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	3308      	adds	r3, #8
 80048d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048d6:	edc3 7a00 	vstr	s15, [r3]
	//Then the actual low pass filter
	gyro->filtered[GYRO_AXE_X] =  FILTER_process(&gyro->filters[GYRO_AXE_X], gyro->raw[GYRO_AXE_X]);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f103 0220 	add.w	r2, r3, #32
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	eeb0 0a67 	vmov.f32	s0, s15
 80048ec:	4610      	mov	r0, r2
 80048ee:	f007 f8a4 	bl	800ba3a <FILTER_process>
 80048f2:	eef0 7a40 	vmov.f32	s15, s0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[GYRO_AXE_Y] =  FILTER_process(&gyro->filters[GYRO_AXE_Y], gyro->raw[GYRO_AXE_Y]);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	edd3 7a00 	vldr	s15, [r3]
 800490c:	eeb0 0a67 	vmov.f32	s0, s15
 8004910:	4610      	mov	r0, r2
 8004912:	f007 f892 	bl	800ba3a <FILTER_process>
 8004916:	eef0 7a40 	vmov.f32	s15, s0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro->filtered[GYRO_AXE_Z] =  FILTER_process(&gyro->filters[GYRO_AXE_Z], gyro->raw[GYRO_AXE_Z]);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	3308      	adds	r3, #8
 800492c:	edd3 7a00 	vldr	s15, [r3]
 8004930:	eeb0 0a67 	vmov.f32	s0, s15
 8004934:	4610      	mov	r0, r2
 8004936:	f007 f880 	bl	800ba3a <FILTER_process>
 800493a:	eef0 7a40 	vmov.f32	s15, s0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	edc3 7a04 	vstr	s15, [r3, #16]
	//We warn the system that we ve got new data ready to be used :)
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 8004944:	2003      	movs	r0, #3
 8004946:	f7fe f9bb 	bl	8002cc0 <EVENT_Set_flag>
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <gyro_data_callback>:

static void gyro_data_callback(void){
 8004952:	b580      	push	{r7, lr}
 8004954:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 8004956:	2002      	movs	r0, #2
 8004958:	f7fe f9b2 	bl	8002cc0 <EVENT_Set_flag>
}
 800495c:	bf00      	nop
 800495e:	bd80      	pop	{r7, pc}

08004960 <convert_gyro>:

static void MPU_spi_slow(mpu_t * mpu);
static void MPU_spi_fast(mpu_t * mpu);

//Private functions def
static void convert_gyro(mpu_t * mpu){
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	3301      	adds	r3, #1
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	b21a      	sxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	b21b      	sxth	r3, r3
 800497c:	4313      	orrs	r3, r2
 800497e:	b21a      	sxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	3303      	adds	r3, #3
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	b21a      	sxth	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	3302      	adds	r3, #2
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b21b      	sxth	r3, r3
 800499a:	4313      	orrs	r3, r2
 800499c:	b21a      	sxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	3305      	adds	r3, #5
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	b21a      	sxth	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	3304      	adds	r3, #4
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	b21b      	sxth	r3, r3
 80049b8:	4313      	orrs	r3, r2
 80049ba:	b21a      	sxth	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	851a      	strh	r2, [r3, #40]	; 0x28

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80049d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <convert_acc>:
static void convert_acc(mpu_t * mpu){
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a32:	3301      	adds	r3, #1
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	b21a      	sxth	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	b21b      	sxth	r3, r3
 8004a42:	4313      	orrs	r3, r2
 8004a44:	b21a      	sxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	3303      	adds	r3, #3
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	b21a      	sxth	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5c:	3302      	adds	r3, #2
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	b21b      	sxth	r3, r3
 8004a62:	4313      	orrs	r3, r2
 8004a64:	b21a      	sxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	3305      	adds	r3, #5
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	b21a      	sxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	b21b      	sxth	r3, r3
 8004a82:	4313      	orrs	r3, r2
 8004a84:	b21a      	sxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8004ab0:	ee07 3a90 	vmov	s15, r3
 8004ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <MPU_cs_lock>:

static void MPU_cs_lock(mpu_t * mpu){
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6898      	ldr	r0, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	899b      	ldrh	r3, [r3, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	4619      	mov	r1, r3
 8004b06:	f003 fb05 	bl	8008114 <HAL_GPIO_WritePin>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <MPU_cs_unlock>:
static void MPU_cs_unlock(mpu_t * mpu){
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6898      	ldr	r0, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	899b      	ldrh	r3, [r3, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	4619      	mov	r1, r3
 8004b26:	f003 faf5 	bl	8008114 <HAL_GPIO_WritePin>
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <MPU_spi_slow>:

static void MPU_spi_slow(mpu_t * mpu){
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_SLOW;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 64 ;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2240      	movs	r2, #64	; 0x40
 8004b48:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f004 f86e 	bl	8008c30 <HAL_SPI_Init>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 8004b5c:	200a      	movs	r0, #10
 8004b5e:	f002 f887 	bl	8006c70 <HAL_Delay>
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <MPU_spi_fast>:
static void MPU_spi_fast(mpu_t * mpu){
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_FAST;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 4 ;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2204      	movs	r2, #4
 8004b80:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f004 f852 	bl	8008c30 <HAL_SPI_Init>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 8004b94:	200a      	movs	r0, #10
 8004b96:	f002 f86b 	bl	8006c70 <HAL_Delay>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <MPU_init>:


/*
 *
 */
sensor_request_e MPU_init(mpu_t * mpu, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	807b      	strh	r3, [r7, #2]


	//Requiert un SPI pour fonctionner
	if(hspi == NULL)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <MPU_init+0x18>
		return SENSOR_REQUEST_FAIL ;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e090      	b.n	8004cde <MPU_init+0x13a>


	//CS pin must be high by default
	MPU_cs_unlock(mpu);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff ffa8 	bl	8004b12 <MPU_cs_unlock>
	HAL_Delay(1);
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	f002 f854 	bl	8006c70 <HAL_Delay>
	TIME_delay_us_blocking(1);
 8004bc8:	2001      	movs	r0, #1
 8004bca:	f7fe ff33 	bl	8003a34 <TIME_delay_us_blocking>

	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	73da      	strb	r2, [r3, #15]

	//SPI slow pdt l'init, max si 1Mhz for the mpu
	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d102      	bne.n	8004be4 <MPU_init+0x40>
		MPU_spi_slow(mpu);
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff ffa7 	bl	8004b32 <MPU_spi_slow>


	//Définit d'après la doc pour les registres du mpu
	mpu->gyro_data = &mpu->data[8] ;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f103 021a 	add.w	r2, r3, #26
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	621a      	str	r2, [r3, #32]
	mpu->acc_data = &mpu->data[0] ;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f103 0212 	add.w	r2, r3, #18
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	645a      	str	r2, [r3, #68]	; 0x44


	//Application des paramètres de connexion
	mpu->hspi = hspi ;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	887a      	ldrh	r2, [r7, #2]
 8004c02:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	22d0      	movs	r2, #208	; 0xd0
 8004c0e:	745a      	strb	r2, [r3, #17]

	mpu_handlers[mpu_init_compteur] = mpu ;
 8004c10:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <MPU_init+0x144>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	4619      	mov	r1, r3
 8004c16:	4a35      	ldr	r2, [pc, #212]	; (8004cec <MPU_init+0x148>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	SPI_handlers[mpu_init_compteur++] = hspi ;
 8004c1e:	4b32      	ldr	r3, [pc, #200]	; (8004ce8 <MPU_init+0x144>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	b2d1      	uxtb	r1, r2
 8004c26:	4a30      	ldr	r2, [pc, #192]	; (8004ce8 <MPU_init+0x144>)
 8004c28:	7011      	strb	r1, [r2, #0]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4a30      	ldr	r2, [pc, #192]	; (8004cf0 <MPU_init+0x14c>)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Wakeup mpu
	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x80} ;
 8004c34:	4b2f      	ldr	r3, [pc, #188]	; (8004cf4 <MPU_init+0x150>)
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	83bb      	strh	r3, [r7, #28]
	MPU_cs_lock(mpu);
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff ff59 	bl	8004af2 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6858      	ldr	r0, [r3, #4]
 8004c44:	f107 011c 	add.w	r1, r7, #28
 8004c48:	2302      	movs	r3, #2
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f004 f854 	bl	8008cf8 <HAL_SPI_Transmit>
 8004c50:	4603      	mov	r3, r0
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff ff5a 	bl	8004b12 <MPU_cs_unlock>

	HAL_Delay(150);
 8004c5e:	2096      	movs	r0, #150	; 0x96
 8004c60:	f002 f806 	bl	8006c70 <HAL_Delay>

	//Clock select
	uint8_t mpu_clock_sel_pll_gyroz[] = {MPU6050_PWR_MGMT_1, 0x03};
 8004c64:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <MPU_init+0x154>)
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	833b      	strh	r3, [r7, #24]
	MPU_cs_lock(mpu);
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff ff41 	bl	8004af2 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_clock_sel_pll_gyroz, 2, 2);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6858      	ldr	r0, [r3, #4]
 8004c74:	f107 0118 	add.w	r1, r7, #24
 8004c78:	2302      	movs	r3, #2
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f004 f83c 	bl	8008cf8 <HAL_SPI_Transmit>
 8004c80:	4603      	mov	r3, r0
 8004c82:	461a      	mov	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff ff42 	bl	8004b12 <MPU_cs_unlock>

	HAL_Delay(15);
 8004c8e:	200f      	movs	r0, #15
 8004c90:	f001 ffee 	bl	8006c70 <HAL_Delay>

	//Disable I2C
	uint8_t mpu_disable_i2c[] = {MPU6050_USER_CTRL, 0x10};
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <MPU_init+0x158>)
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	82bb      	strh	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7ff ff29 	bl	8004af2 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_disable_i2c, 2, 2);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6858      	ldr	r0, [r3, #4]
 8004ca4:	f107 0114 	add.w	r1, r7, #20
 8004ca8:	2302      	movs	r3, #2
 8004caa:	2202      	movs	r2, #2
 8004cac:	f004 f824 	bl	8008cf8 <HAL_SPI_Transmit>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff ff2a 	bl	8004b12 <MPU_cs_unlock>

	TIME_delay_us_blocking(2);
 8004cbe:	2002      	movs	r0, #2
 8004cc0:	f7fe feb8 	bl	8003a34 <TIME_delay_us_blocking>
//	MPU_cs_lock(mpu);
//	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, set_dlpf, 2, 2);
//	MPU_cs_unlock(mpu);

	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	7b9b      	ldrb	r3, [r3, #14]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <MPU_init+0x132>
		mpu->state = SENSOR_ERROR ;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e003      	b.n	8004cde <MPU_init+0x13a>
	}

	mpu->state = SENSOR_IDDLE ;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	73da      	strb	r2, [r3, #15]
	return SENSOR_REQUEST_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20001bd4 	.word	0x20001bd4
 8004cec:	20001bd0 	.word	0x20001bd0
 8004cf0:	20001bcc 	.word	0x20001bcc
 8004cf4:	0800f8fc 	.word	0x0800f8fc
 8004cf8:	0800f900 	.word	0x0800f900
 8004cfc:	0800f904 	.word	0x0800f904

08004d00 <MPU_init_gyro>:

/*
 *
 */
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	72fb      	strb	r3, [r7, #11]

	mpu->gyro_range = gyro_range ;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	7afa      	ldrb	r2, [r7, #11]
 8004d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mpu->gyro_data_callback = gyro_data_callback ;
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	7bdb      	ldrb	r3, [r3, #15]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <MPU_init_gyro+0x28>
		return SENSOR_REQUEST_FAIL ;
 8004d24:	2302      	movs	r3, #2
 8004d26:	e096      	b.n	8004e56 <MPU_init_gyro+0x156>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d102      	bne.n	8004d38 <MPU_init_gyro+0x38>
		MPU_spi_slow(mpu);
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff fefd 	bl	8004b32 <MPU_spi_slow>

	//Configuration de la sensi du gyro dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8004d38:	239b      	movs	r3, #155	; 0x9b
 8004d3a:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff fed8 	bl	8004af2 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6858      	ldr	r0, [r3, #4]
 8004d46:	f107 0214 	add.w	r2, r7, #20
 8004d4a:	f107 0114 	add.w	r1, r7, #20
 8004d4e:	2302      	movs	r3, #2
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	2302      	movs	r3, #2
 8004d54:	f004 f904 	bl	8008f60 <HAL_SPI_TransmitReceive>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff fed6 	bl	8004b12 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	7b9b      	ldrb	r3, [r3, #14]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d122      	bne.n	8004db4 <MPU_init_gyro+0xb4>
		HAL_Delay(1);
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f001 ff7e 	bl	8006c70 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff febc 	bl	8004af2 <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 8004d7a:	231b      	movs	r3, #27
 8004d7c:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 8004d7e:	7d7b      	ldrb	r3, [r7, #21]
 8004d80:	b25b      	sxtb	r3, r3
 8004d82:	f023 0318 	bic.w	r3, r3, #24
 8004d86:	b25a      	sxtb	r2, r3
 8004d88:	7afb      	ldrb	r3, [r7, #11]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	b25b      	sxtb	r3, r3
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	b25b      	sxtb	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6858      	ldr	r0, [r3, #4]
 8004d9a:	f107 0114 	add.w	r1, r7, #20
 8004d9e:	2302      	movs	r3, #2
 8004da0:	2202      	movs	r2, #2
 8004da2:	f003 ffa9 	bl	8008cf8 <HAL_SPI_Transmit>
 8004da6:	4603      	mov	r3, r0
 8004da8:	461a      	mov	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff feaf 	bl	8004b12 <MPU_cs_unlock>
	}

	//ON vérifi si on a bien écris ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	7b9b      	ldrb	r3, [r3, #14]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d124      	bne.n	8004e06 <MPU_init_gyro+0x106>
		uint8_t temp2 = temp[1];
 8004dbc:	7d7b      	ldrb	r3, [r7, #21]
 8004dbe:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8004dc0:	239b      	movs	r3, #155	; 0x9b
 8004dc2:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f001 ff53 	bl	8006c70 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff fe91 	bl	8004af2 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6858      	ldr	r0, [r3, #4]
 8004dd4:	f107 0214 	add.w	r2, r7, #20
 8004dd8:	f107 0114 	add.w	r1, r7, #20
 8004ddc:	2302      	movs	r3, #2
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	2302      	movs	r3, #2
 8004de2:	f004 f8bd 	bl	8008f60 <HAL_SPI_TransmitReceive>
 8004de6:	4603      	mov	r3, r0
 8004de8:	461a      	mov	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff fe8f 	bl	8004b12 <MPU_cs_unlock>

		if(temp[1] != temp2)
 8004df4:	7d7b      	ldrb	r3, [r7, #21]
 8004df6:	7dfa      	ldrb	r2, [r7, #23]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d004      	beq.n	8004e06 <MPU_init_gyro+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2204      	movs	r2, #4
 8004e00:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8004e02:	2302      	movs	r3, #2
 8004e04:	e027      	b.n	8004e56 <MPU_init_gyro+0x156>

	}



	if(mpu->hal_state != HAL_OK)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	7b9b      	ldrb	r3, [r3, #14]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <MPU_init_gyro+0x118>
	{
		mpu->state = SENSOR_ERROR ;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2204      	movs	r2, #4
 8004e12:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8004e14:	2302      	movs	r3, #2
 8004e16:	e01e      	b.n	8004e56 <MPU_init_gyro+0x156>
	}

	switch(gyro_range){
 8004e18:	7afb      	ldrb	r3, [r7, #11]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d81a      	bhi.n	8004e54 <MPU_init_gyro+0x154>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <MPU_init_gyro+0x124>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e35 	.word	0x08004e35
 8004e28:	08004e3d 	.word	0x08004e3d
 8004e2c:	08004e45 	.word	0x08004e45
 8004e30:	08004e4d 	.word	0x08004e4d
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <MPU_init_gyro+0x160>)
 8004e38:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004e3a:	e00b      	b.n	8004e54 <MPU_init_gyro+0x154>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <MPU_init_gyro+0x164>)
 8004e40:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004e42:	e007      	b.n	8004e54 <MPU_init_gyro+0x154>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <MPU_init_gyro+0x168>)
 8004e48:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004e4a:	e003      	b.n	8004e54 <MPU_init_gyro+0x154>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a07      	ldr	r2, [pc, #28]	; (8004e6c <MPU_init_gyro+0x16c>)
 8004e50:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004e52:	bf00      	nop
	}

	return SENSOR_REQUEST_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	3bfa232d 	.word	0x3bfa232d
 8004e64:	3c7a232d 	.word	0x3c7a232d
 8004e68:	3cf9c190 	.word	0x3cf9c190
 8004e6c:	3d79c190 	.word	0x3d79c190

08004e70 <MPU_init_acc>:

/*
 *
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	72fb      	strb	r3, [r7, #11]
	mpu->acc_range = acc_range ;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	7afa      	ldrb	r2, [r7, #11]
 8004e82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	mpu->acc_data_callback = acc_data_callback ;
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	665a      	str	r2, [r3, #100]	; 0x64
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	7bdb      	ldrb	r3, [r3, #15]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <MPU_init_acc+0x28>
		return SENSOR_REQUEST_FAIL ;
 8004e94:	2302      	movs	r3, #2
 8004e96:	e095      	b.n	8004fc4 <MPU_init_acc+0x154>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d102      	bne.n	8004ea8 <MPU_init_acc+0x38>
			MPU_spi_slow(mpu);
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff fe45 	bl	8004b32 <MPU_spi_slow>

	//Configuration de la sensi de l'acc dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8004ea8:	239c      	movs	r3, #156	; 0x9c
 8004eaa:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff fe20 	bl	8004af2 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6858      	ldr	r0, [r3, #4]
 8004eb6:	f107 0214 	add.w	r2, r7, #20
 8004eba:	f107 0114 	add.w	r1, r7, #20
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	f004 f84c 	bl	8008f60 <HAL_SPI_TransmitReceive>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff fe1e 	bl	8004b12 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){	//Si mpu ok on écrit en spi dans le registre de config du mpu dédié au gyro
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	7b9b      	ldrb	r3, [r3, #14]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d122      	bne.n	8004f24 <MPU_init_acc+0xb4>
		HAL_Delay(1);
 8004ede:	2001      	movs	r0, #1
 8004ee0:	f001 fec6 	bl	8006c70 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7ff fe04 	bl	8004af2 <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 8004eea:	231c      	movs	r3, #28
 8004eec:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 8004eee:	7d7b      	ldrb	r3, [r7, #21]
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	f023 0318 	bic.w	r3, r3, #24
 8004ef6:	b25a      	sxtb	r2, r3
 8004ef8:	7afb      	ldrb	r3, [r7, #11]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	b25b      	sxtb	r3, r3
 8004efe:	4313      	orrs	r3, r2
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6858      	ldr	r0, [r3, #4]
 8004f0a:	f107 0114 	add.w	r1, r7, #20
 8004f0e:	2302      	movs	r3, #2
 8004f10:	2202      	movs	r2, #2
 8004f12:	f003 fef1 	bl	8008cf8 <HAL_SPI_Transmit>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f7ff fdf7 	bl	8004b12 <MPU_cs_unlock>
	}

	//On test si on a bien écrit ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	7b9b      	ldrb	r3, [r3, #14]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d124      	bne.n	8004f76 <MPU_init_acc+0x106>
		uint8_t temp2 = temp[1];
 8004f2c:	7d7b      	ldrb	r3, [r7, #21]
 8004f2e:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8004f30:	239c      	movs	r3, #156	; 0x9c
 8004f32:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8004f34:	2001      	movs	r0, #1
 8004f36:	f001 fe9b 	bl	8006c70 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7ff fdd9 	bl	8004af2 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6858      	ldr	r0, [r3, #4]
 8004f44:	f107 0214 	add.w	r2, r7, #20
 8004f48:	f107 0114 	add.w	r1, r7, #20
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2302      	movs	r3, #2
 8004f52:	f004 f805 	bl	8008f60 <HAL_SPI_TransmitReceive>
 8004f56:	4603      	mov	r3, r0
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fdd7 	bl	8004b12 <MPU_cs_unlock>

		if(temp[1] != temp2)
 8004f64:	7d7b      	ldrb	r3, [r7, #21]
 8004f66:	7dfa      	ldrb	r2, [r7, #23]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d004      	beq.n	8004f76 <MPU_init_acc+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8004f72:	2302      	movs	r3, #2
 8004f74:	e026      	b.n	8004fc4 <MPU_init_acc+0x154>
		}
	}



	switch(acc_range){
 8004f76:	7afb      	ldrb	r3, [r7, #11]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d81f      	bhi.n	8004fbc <MPU_init_acc+0x14c>
 8004f7c:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <MPU_init_acc+0x114>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004f9f 	.word	0x08004f9f
 8004f8c:	08004fa9 	.word	0x08004fa9
 8004f90:	08004fb3 	.word	0x08004fb3
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8004f9a:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004f9c:	e00e      	b.n	8004fbc <MPU_init_acc+0x14c>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8004fa4:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004fa6:	e009      	b.n	8004fbc <MPU_init_acc+0x14c>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8004fae:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004fb0:	e004      	b.n	8004fbc <MPU_init_acc+0x14c>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8004fb8:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004fba:	bf00      	nop
	}
	MPU_spi_fast(mpu);
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7ff fdd4 	bl	8004b6a <MPU_spi_fast>
	return SENSOR_REQUEST_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_REQUEST_OK ;

}

sensor_request_e MPU_update_acc(mpu_t * mpu){
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	6078      	str	r0, [r7, #4]

	if(mpu->state != SENSOR_IDDLE){
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	7bdb      	ldrb	r3, [r3, #15]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <MPU_update_acc+0x14>
		return SENSOR_REQUEST_FAIL ;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e030      	b.n	8005042 <MPU_update_acc+0x76>
	}

	//Update des valeurs
	uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 8004fe0:	23bb      	movs	r3, #187	; 0xbb
 8004fe2:	723b      	strb	r3, [r7, #8]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	727b      	strb	r3, [r7, #9]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	72bb      	strb	r3, [r7, #10]
 8004fec:	2300      	movs	r3, #0
 8004fee:	72fb      	strb	r3, [r7, #11]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	733b      	strb	r3, [r7, #12]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	737b      	strb	r3, [r7, #13]
	MPU_cs_lock(mpu);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff fd7a 	bl	8004af2 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6858      	ldr	r0, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005006:	f107 0108 	add.w	r1, r7, #8
 800500a:	2302      	movs	r3, #2
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2306      	movs	r3, #6
 8005010:	f003 ffa6 	bl	8008f60 <HAL_SPI_TransmitReceive>
 8005014:	4603      	mov	r3, r0
 8005016:	461a      	mov	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff fd78 	bl	8004b12 <MPU_cs_unlock>


	if(mpu->hal_state == HAL_BUSY)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	7b9b      	ldrb	r3, [r3, #14]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d101      	bne.n	800502e <MPU_update_acc+0x62>
		return SENSOR_REQUEST_BUSY ;
 800502a:	2301      	movs	r3, #1
 800502c:	e009      	b.n	8005042 <MPU_update_acc+0x76>
	if(mpu->hal_state != HAL_OK){
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	7b9b      	ldrb	r3, [r3, #14]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <MPU_update_acc+0x6e>
		return SENSOR_REQUEST_FAIL ;
 8005036:	2302      	movs	r3, #2
 8005038:	e003      	b.n	8005042 <MPU_update_acc+0x76>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fcf3 	bl	8004a26 <convert_acc>
	return SENSOR_REQUEST_OK ;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <MPU_update_all_dma>:
	}

	return SENSOR_REQUEST_OK;
}

sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]

	uint8_t registers [14] = {0};
 8005052:	f107 0308 	add.w	r3, r7, #8
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	605a      	str	r2, [r3, #4]
 800505c:	609a      	str	r2, [r3, #8]
 800505e:	819a      	strh	r2, [r3, #12]
	registers[0] = MPU6050_ACCEL_XOUT_H | MPU6050_READ ;
 8005060:	23bb      	movs	r3, #187	; 0xbb
 8005062:	723b      	strb	r3, [r7, #8]
	MPU_cs_lock(mpu);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff fd44 	bl	8004af2 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive_DMA(mpu->hspi, registers, mpu->data, 14);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6858      	ldr	r0, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f103 0212 	add.w	r2, r3, #18
 8005074:	f107 0108 	add.w	r1, r7, #8
 8005078:	230e      	movs	r3, #14
 800507a:	f004 f913 	bl	80092a4 <HAL_SPI_TransmitReceive_DMA>
 800507e:	4603      	mov	r3, r0
 8005080:	461a      	mov	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	7b9b      	ldrb	r3, [r3, #14]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d107      	bne.n	800509e <MPU_update_all_dma+0x54>
	{
		mpu->state = SENSOR_BUSY ;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2203      	movs	r2, #3
 8005092:	73da      	strb	r2, [r3, #15]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2203      	movs	r2, #3
 8005098:	741a      	strb	r2, [r3, #16]
	{
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	return SENSOR_REQUEST_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e009      	b.n	80050b2 <MPU_update_all_dma+0x68>
	else if(mpu->hal_state == HAL_BUSY)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	7b9b      	ldrb	r3, [r3, #14]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d101      	bne.n	80050aa <MPU_update_all_dma+0x60>
		return SENSOR_REQUEST_BUSY;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e003      	b.n	80050b2 <MPU_update_all_dma+0x68>
		mpu->state = SENSOR_ERROR ;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2204      	movs	r2, #4
 80050ae:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 80050b0:	2302      	movs	r3, #2
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <MPU_dma_transmit_complete>:



static void MPU_dma_transmit_complete(mpu_t * mpu){
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]

	//On relâche le pin CS du mpu
	MPU_cs_unlock(mpu);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff fd25 	bl	8004b12 <MPU_cs_unlock>


	switch(mpu->dma_state){
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	7c1b      	ldrb	r3, [r3, #16]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d00b      	beq.n	80050e8 <MPU_dma_transmit_complete+0x2e>
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d010      	beq.n	80050f6 <MPU_dma_transmit_complete+0x3c>
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d000      	beq.n	80050da <MPU_dma_transmit_complete+0x20>
			mpu->gyro_data_callback();

			break;
		case MPU_DMA_IDDLE:
		default:
			break;
 80050d8:	e014      	b.n	8005104 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff fc40 	bl	8004960 <convert_gyro>
			mpu->gyro_data_callback();
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	4798      	blx	r3
			break;
 80050e6:	e00d      	b.n	8005104 <MPU_dma_transmit_complete+0x4a>
			convert_acc(mpu);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fc9c 	bl	8004a26 <convert_acc>
			mpu->acc_data_callback();
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f2:	4798      	blx	r3
			break;
 80050f4:	e006      	b.n	8005104 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fc32 	bl	8004960 <convert_gyro>
			mpu->gyro_data_callback();
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	4798      	blx	r3
			break;
 8005102:	bf00      	nop

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	741a      	strb	r2, [r3, #16]
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <MPU_dma_transmit_half_complete>:
static void MPU_dma_transmit_half_complete(mpu_t * mpu){
 8005112:	b580      	push	{r7, lr}
 8005114:	b082      	sub	sp, #8
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]

	if(mpu->dma_state == MPU_DMA_ACC_AND_GYRO_IN_PROGRESS)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	7c1b      	ldrb	r3, [r3, #16]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d105      	bne.n	800512e <MPU_dma_transmit_half_complete+0x1c>
	{
		//A la moitié donc les données de l'acc sont arrivées
		convert_acc(mpu);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff fc7f 	bl	8004a26 <convert_acc>
		mpu->acc_data_callback();
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800512c:	4798      	blx	r3
	}
}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
	if(hspi == SPI_handlers[0])
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_SPI_TxRxCpltCallback+0x24>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	429a      	cmp	r2, r3
 8005148:	d104      	bne.n	8005154 <HAL_SPI_TxRxCpltCallback+0x1c>
		MPU_dma_transmit_complete(mpu_handlers[0]);
 800514a:	4b05      	ldr	r3, [pc, #20]	; (8005160 <HAL_SPI_TxRxCpltCallback+0x28>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff ffb3 	bl	80050ba <MPU_dma_transmit_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20001bcc 	.word	0x20001bcc
 8005160:	20001bd0 	.word	0x20001bd0

08005164 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
if(hspi == SPI_handlers[0])
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	429a      	cmp	r2, r3
 8005174:	d104      	bne.n	8005180 <HAL_SPI_TxRxHalfCpltCallback+0x1c>
	MPU_dma_transmit_half_complete(mpu_handlers[0]);
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ffc9 	bl	8005112 <MPU_dma_transmit_half_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif

}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20001bcc 	.word	0x20001bcc
 800518c:	20001bd0 	.word	0x20001bd0

08005190 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005196:	463b      	mov	r3, r7
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	609a      	str	r2, [r3, #8]
 80051a0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80051a2:	4b21      	ldr	r3, [pc, #132]	; (8005228 <MX_ADC2_Init+0x98>)
 80051a4:	4a21      	ldr	r2, [pc, #132]	; (800522c <MX_ADC2_Init+0x9c>)
 80051a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80051a8:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <MX_ADC2_Init+0x98>)
 80051aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <MX_ADC2_Init+0x98>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80051b6:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <MX_ADC2_Init+0x98>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80051bc:	4b1a      	ldr	r3, [pc, #104]	; (8005228 <MX_ADC2_Init+0x98>)
 80051be:	2201      	movs	r2, #1
 80051c0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80051c2:	4b19      	ldr	r3, [pc, #100]	; (8005228 <MX_ADC2_Init+0x98>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80051ca:	4b17      	ldr	r3, [pc, #92]	; (8005228 <MX_ADC2_Init+0x98>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80051d0:	4b15      	ldr	r3, [pc, #84]	; (8005228 <MX_ADC2_Init+0x98>)
 80051d2:	4a17      	ldr	r2, [pc, #92]	; (8005230 <MX_ADC2_Init+0xa0>)
 80051d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <MX_ADC2_Init+0x98>)
 80051d8:	2200      	movs	r2, #0
 80051da:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80051dc:	4b12      	ldr	r3, [pc, #72]	; (8005228 <MX_ADC2_Init+0x98>)
 80051de:	2201      	movs	r2, #1
 80051e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <MX_ADC2_Init+0x98>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80051ea:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <MX_ADC2_Init+0x98>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80051f0:	480d      	ldr	r0, [pc, #52]	; (8005228 <MX_ADC2_Init+0x98>)
 80051f2:	f001 fd5f 	bl	8006cb4 <HAL_ADC_Init>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80051fc:	f000 fbc8 	bl	8005990 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005200:	2309      	movs	r3, #9
 8005202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005204:	2301      	movs	r3, #1
 8005206:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005208:	2300      	movs	r3, #0
 800520a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800520c:	463b      	mov	r3, r7
 800520e:	4619      	mov	r1, r3
 8005210:	4805      	ldr	r0, [pc, #20]	; (8005228 <MX_ADC2_Init+0x98>)
 8005212:	f001 fea3 	bl	8006f5c <HAL_ADC_ConfigChannel>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800521c:	f000 fbb8 	bl	8005990 <Error_Handler>
  }

}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20001bf4 	.word	0x20001bf4
 800522c:	40012100 	.word	0x40012100
 8005230:	0f000001 	.word	0x0f000001

08005234 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08a      	sub	sp, #40	; 0x28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800523c:	f107 0314 	add.w	r3, r7, #20
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	609a      	str	r2, [r3, #8]
 8005248:	60da      	str	r2, [r3, #12]
 800524a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a3c      	ldr	r2, [pc, #240]	; (8005344 <HAL_ADC_MspInit+0x110>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d172      	bne.n	800533c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005256:	2300      	movs	r3, #0
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	4b3b      	ldr	r3, [pc, #236]	; (8005348 <HAL_ADC_MspInit+0x114>)
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	4a3a      	ldr	r2, [pc, #232]	; (8005348 <HAL_ADC_MspInit+0x114>)
 8005260:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005264:	6453      	str	r3, [r2, #68]	; 0x44
 8005266:	4b38      	ldr	r3, [pc, #224]	; (8005348 <HAL_ADC_MspInit+0x114>)
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	4b34      	ldr	r3, [pc, #208]	; (8005348 <HAL_ADC_MspInit+0x114>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	4a33      	ldr	r2, [pc, #204]	; (8005348 <HAL_ADC_MspInit+0x114>)
 800527c:	f043 0304 	orr.w	r3, r3, #4
 8005280:	6313      	str	r3, [r2, #48]	; 0x30
 8005282:	4b31      	ldr	r3, [pc, #196]	; (8005348 <HAL_ADC_MspInit+0x114>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	4b2d      	ldr	r3, [pc, #180]	; (8005348 <HAL_ADC_MspInit+0x114>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	4a2c      	ldr	r2, [pc, #176]	; (8005348 <HAL_ADC_MspInit+0x114>)
 8005298:	f043 0302 	orr.w	r3, r3, #2
 800529c:	6313      	str	r3, [r2, #48]	; 0x30
 800529e:	4b2a      	ldr	r3, [pc, #168]	; (8005348 <HAL_ADC_MspInit+0x114>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 80052aa:	2302      	movs	r3, #2
 80052ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052ae:	2303      	movs	r3, #3
 80052b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 80052b6:	f107 0314 	add.w	r3, r7, #20
 80052ba:	4619      	mov	r1, r3
 80052bc:	4823      	ldr	r0, [pc, #140]	; (800534c <HAL_ADC_MspInit+0x118>)
 80052be:	f002 fd8f 	bl	8007de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 80052c2:	2302      	movs	r3, #2
 80052c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052c6:	2303      	movs	r3, #3
 80052c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 80052ce:	f107 0314 	add.w	r3, r7, #20
 80052d2:	4619      	mov	r1, r3
 80052d4:	481e      	ldr	r0, [pc, #120]	; (8005350 <HAL_ADC_MspInit+0x11c>)
 80052d6:	f002 fd83 	bl	8007de0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80052da:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <HAL_ADC_MspInit+0x120>)
 80052dc:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <HAL_ADC_MspInit+0x124>)
 80052de:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80052e0:	4b1c      	ldr	r3, [pc, #112]	; (8005354 <HAL_ADC_MspInit+0x120>)
 80052e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052e6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052e8:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <HAL_ADC_MspInit+0x120>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80052ee:	4b19      	ldr	r3, [pc, #100]	; (8005354 <HAL_ADC_MspInit+0x120>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80052f4:	4b17      	ldr	r3, [pc, #92]	; (8005354 <HAL_ADC_MspInit+0x120>)
 80052f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052fa:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80052fc:	4b15      	ldr	r3, [pc, #84]	; (8005354 <HAL_ADC_MspInit+0x120>)
 80052fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005302:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005304:	4b13      	ldr	r3, [pc, #76]	; (8005354 <HAL_ADC_MspInit+0x120>)
 8005306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800530a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800530c:	4b11      	ldr	r3, [pc, #68]	; (8005354 <HAL_ADC_MspInit+0x120>)
 800530e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005312:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005314:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <HAL_ADC_MspInit+0x120>)
 8005316:	2200      	movs	r2, #0
 8005318:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <HAL_ADC_MspInit+0x120>)
 800531c:	2200      	movs	r2, #0
 800531e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005320:	480c      	ldr	r0, [pc, #48]	; (8005354 <HAL_ADC_MspInit+0x120>)
 8005322:	f002 f9cd 	bl	80076c0 <HAL_DMA_Init>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800532c:	f000 fb30 	bl	8005990 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a08      	ldr	r2, [pc, #32]	; (8005354 <HAL_ADC_MspInit+0x120>)
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
 8005336:	4a07      	ldr	r2, [pc, #28]	; (8005354 <HAL_ADC_MspInit+0x120>)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800533c:	bf00      	nop
 800533e:	3728      	adds	r7, #40	; 0x28
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40012100 	.word	0x40012100
 8005348:	40023800 	.word	0x40023800
 800534c:	40020800 	.word	0x40020800
 8005350:	40020400 	.word	0x40020400
 8005354:	20001c3c 	.word	0x20001c3c
 8005358:	40026440 	.word	0x40026440

0800535c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	4b3f      	ldr	r3, [pc, #252]	; (8005464 <MX_DMA_Init+0x108>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	4a3e      	ldr	r2, [pc, #248]	; (8005464 <MX_DMA_Init+0x108>)
 800536c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005370:	6313      	str	r3, [r2, #48]	; 0x30
 8005372:	4b3c      	ldr	r3, [pc, #240]	; (8005464 <MX_DMA_Init+0x108>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800537e:	2300      	movs	r3, #0
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	4b38      	ldr	r3, [pc, #224]	; (8005464 <MX_DMA_Init+0x108>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	4a37      	ldr	r2, [pc, #220]	; (8005464 <MX_DMA_Init+0x108>)
 8005388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800538c:	6313      	str	r3, [r2, #48]	; 0x30
 800538e:	4b35      	ldr	r3, [pc, #212]	; (8005464 <MX_DMA_Init+0x108>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800539a:	2200      	movs	r2, #0
 800539c:	2100      	movs	r1, #0
 800539e:	200b      	movs	r0, #11
 80053a0:	f002 f957 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80053a4:	200b      	movs	r0, #11
 80053a6:	f002 f970 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80053aa:	2200      	movs	r2, #0
 80053ac:	2100      	movs	r1, #0
 80053ae:	200c      	movs	r0, #12
 80053b0:	f002 f94f 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80053b4:	200c      	movs	r0, #12
 80053b6:	f002 f968 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80053ba:	2200      	movs	r2, #0
 80053bc:	2100      	movs	r1, #0
 80053be:	200e      	movs	r0, #14
 80053c0:	f002 f947 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80053c4:	200e      	movs	r0, #14
 80053c6:	f002 f960 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80053ca:	2200      	movs	r2, #0
 80053cc:	2100      	movs	r1, #0
 80053ce:	200f      	movs	r0, #15
 80053d0:	f002 f93f 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80053d4:	200f      	movs	r0, #15
 80053d6:	f002 f958 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80053da:	2200      	movs	r2, #0
 80053dc:	2100      	movs	r1, #0
 80053de:	2010      	movs	r0, #16
 80053e0:	f002 f937 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80053e4:	2010      	movs	r0, #16
 80053e6:	f002 f950 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80053ea:	2200      	movs	r2, #0
 80053ec:	2100      	movs	r1, #0
 80053ee:	2011      	movs	r0, #17
 80053f0:	f002 f92f 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80053f4:	2011      	movs	r0, #17
 80053f6:	f002 f948 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80053fa:	2200      	movs	r2, #0
 80053fc:	2100      	movs	r1, #0
 80053fe:	202f      	movs	r0, #47	; 0x2f
 8005400:	f002 f927 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8005404:	202f      	movs	r0, #47	; 0x2f
 8005406:	f002 f940 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800540a:	2200      	movs	r2, #0
 800540c:	2100      	movs	r1, #0
 800540e:	2038      	movs	r0, #56	; 0x38
 8005410:	f002 f91f 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005414:	2038      	movs	r0, #56	; 0x38
 8005416:	f002 f938 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800541a:	2200      	movs	r2, #0
 800541c:	2100      	movs	r1, #0
 800541e:	2039      	movs	r0, #57	; 0x39
 8005420:	f002 f917 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005424:	2039      	movs	r0, #57	; 0x39
 8005426:	f002 f930 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800542a:	2200      	movs	r2, #0
 800542c:	2100      	movs	r1, #0
 800542e:	203a      	movs	r0, #58	; 0x3a
 8005430:	f002 f90f 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005434:	203a      	movs	r0, #58	; 0x3a
 8005436:	f002 f928 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800543a:	2200      	movs	r2, #0
 800543c:	2100      	movs	r1, #0
 800543e:	203b      	movs	r0, #59	; 0x3b
 8005440:	f002 f907 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005444:	203b      	movs	r0, #59	; 0x3b
 8005446:	f002 f920 	bl	800768a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800544a:	2200      	movs	r2, #0
 800544c:	2100      	movs	r1, #0
 800544e:	2045      	movs	r0, #69	; 0x45
 8005450:	f002 f8ff 	bl	8007652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005454:	2045      	movs	r0, #69	; 0x45
 8005456:	f002 f918 	bl	800768a <HAL_NVIC_EnableIRQ>

}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800

08005468 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
 800546c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800546e:	f107 0314 	add.w	r3, r7, #20
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	605a      	str	r2, [r3, #4]
 8005478:	609a      	str	r2, [r3, #8]
 800547a:	60da      	str	r2, [r3, #12]
 800547c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	4b44      	ldr	r3, [pc, #272]	; (8005594 <MX_GPIO_Init+0x12c>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	4a43      	ldr	r2, [pc, #268]	; (8005594 <MX_GPIO_Init+0x12c>)
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	6313      	str	r3, [r2, #48]	; 0x30
 800548e:	4b41      	ldr	r3, [pc, #260]	; (8005594 <MX_GPIO_Init+0x12c>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	4b3d      	ldr	r3, [pc, #244]	; (8005594 <MX_GPIO_Init+0x12c>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	4a3c      	ldr	r2, [pc, #240]	; (8005594 <MX_GPIO_Init+0x12c>)
 80054a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a8:	6313      	str	r3, [r2, #48]	; 0x30
 80054aa:	4b3a      	ldr	r3, [pc, #232]	; (8005594 <MX_GPIO_Init+0x12c>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	4b36      	ldr	r3, [pc, #216]	; (8005594 <MX_GPIO_Init+0x12c>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	4a35      	ldr	r2, [pc, #212]	; (8005594 <MX_GPIO_Init+0x12c>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	6313      	str	r3, [r2, #48]	; 0x30
 80054c6:	4b33      	ldr	r3, [pc, #204]	; (8005594 <MX_GPIO_Init+0x12c>)
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	60bb      	str	r3, [r7, #8]
 80054d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	607b      	str	r3, [r7, #4]
 80054d6:	4b2f      	ldr	r3, [pc, #188]	; (8005594 <MX_GPIO_Init+0x12c>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	4a2e      	ldr	r2, [pc, #184]	; (8005594 <MX_GPIO_Init+0x12c>)
 80054dc:	f043 0302 	orr.w	r3, r3, #2
 80054e0:	6313      	str	r3, [r2, #48]	; 0x30
 80054e2:	4b2c      	ldr	r3, [pc, #176]	; (8005594 <MX_GPIO_Init+0x12c>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	607b      	str	r3, [r7, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 80054ee:	2200      	movs	r2, #0
 80054f0:	f24e 211c 	movw	r1, #57884	; 0xe21c
 80054f4:	4828      	ldr	r0, [pc, #160]	; (8005598 <MX_GPIO_Init+0x130>)
 80054f6:	f002 fe0d 	bl	8008114 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 80054fa:	2201      	movs	r2, #1
 80054fc:	2101      	movs	r1, #1
 80054fe:	4826      	ldr	r0, [pc, #152]	; (8005598 <MX_GPIO_Init+0x130>)
 8005500:	f002 fe08 	bl	8008114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8005504:	2200      	movs	r2, #0
 8005506:	2101      	movs	r1, #1
 8005508:	4824      	ldr	r0, [pc, #144]	; (800559c <MX_GPIO_Init+0x134>)
 800550a:	f002 fe03 	bl	8008114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 800550e:	2200      	movs	r2, #0
 8005510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005514:	4822      	ldr	r0, [pc, #136]	; (80055a0 <MX_GPIO_Init+0x138>)
 8005516:	f002 fdfd 	bl	8008114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 800551a:	f24e 231d 	movw	r3, #57885	; 0xe21d
 800551e:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005520:	2301      	movs	r3, #1
 8005522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005528:	2300      	movs	r3, #0
 800552a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800552c:	f107 0314 	add.w	r3, r7, #20
 8005530:	4619      	mov	r1, r3
 8005532:	4819      	ldr	r0, [pc, #100]	; (8005598 <MX_GPIO_Init+0x130>)
 8005534:	f002 fc54 	bl	8007de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 8005538:	2301      	movs	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800553c:	2301      	movs	r3, #1
 800553e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005544:	2300      	movs	r3, #0
 8005546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 8005548:	f107 0314 	add.w	r3, r7, #20
 800554c:	4619      	mov	r1, r3
 800554e:	4813      	ldr	r0, [pc, #76]	; (800559c <MX_GPIO_Init+0x134>)
 8005550:	f002 fc46 	bl	8007de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 8005554:	2302      	movs	r3, #2
 8005556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005558:	2300      	movs	r3, #0
 800555a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555c:	2300      	movs	r3, #0
 800555e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 8005560:	f107 0314 	add.w	r3, r7, #20
 8005564:	4619      	mov	r1, r3
 8005566:	480d      	ldr	r0, [pc, #52]	; (800559c <MX_GPIO_Init+0x134>)
 8005568:	f002 fc3a 	bl	8007de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 800556c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005572:	2301      	movs	r3, #1
 8005574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800557a:	2300      	movs	r3, #0
 800557c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 800557e:	f107 0314 	add.w	r3, r7, #20
 8005582:	4619      	mov	r1, r3
 8005584:	4806      	ldr	r0, [pc, #24]	; (80055a0 <MX_GPIO_Init+0x138>)
 8005586:	f002 fc2b 	bl	8007de0 <HAL_GPIO_Init>

}
 800558a:	bf00      	nop
 800558c:	3728      	adds	r7, #40	; 0x28
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40023800 	.word	0x40023800
 8005598:	40020800 	.word	0x40020800
 800559c:	40020000 	.word	0x40020000
 80055a0:	40020400 	.word	0x40020400

080055a4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80055a8:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <MX_I2C1_Init+0x50>)
 80055aa:	4a13      	ldr	r2, [pc, #76]	; (80055f8 <MX_I2C1_Init+0x54>)
 80055ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80055ae:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <MX_I2C1_Init+0x50>)
 80055b0:	4a12      	ldr	r2, [pc, #72]	; (80055fc <MX_I2C1_Init+0x58>)
 80055b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055b4:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <MX_I2C1_Init+0x50>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80055ba:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <MX_I2C1_Init+0x50>)
 80055bc:	2200      	movs	r2, #0
 80055be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <MX_I2C1_Init+0x50>)
 80055c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <MX_I2C1_Init+0x50>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <MX_I2C1_Init+0x50>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055d4:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <MX_I2C1_Init+0x50>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <MX_I2C1_Init+0x50>)
 80055dc:	2200      	movs	r2, #0
 80055de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80055e0:	4804      	ldr	r0, [pc, #16]	; (80055f4 <MX_I2C1_Init+0x50>)
 80055e2:	f002 fdb1 	bl	8008148 <HAL_I2C_Init>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80055ec:	f000 f9d0 	bl	8005990 <Error_Handler>
  }

}
 80055f0:	bf00      	nop
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20001cfc 	.word	0x20001cfc
 80055f8:	40005400 	.word	0x40005400
 80055fc:	00061a80 	.word	0x00061a80

08005600 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	; 0x28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005608:	f107 0314 	add.w	r3, r7, #20
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a47      	ldr	r2, [pc, #284]	; (800573c <HAL_I2C_MspInit+0x13c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	f040 8088 	bne.w	8005734 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	4b45      	ldr	r3, [pc, #276]	; (8005740 <HAL_I2C_MspInit+0x140>)
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	4a44      	ldr	r2, [pc, #272]	; (8005740 <HAL_I2C_MspInit+0x140>)
 800562e:	f043 0302 	orr.w	r3, r3, #2
 8005632:	6313      	str	r3, [r2, #48]	; 0x30
 8005634:	4b42      	ldr	r3, [pc, #264]	; (8005740 <HAL_I2C_MspInit+0x140>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005640:	23c0      	movs	r3, #192	; 0xc0
 8005642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005644:	2312      	movs	r3, #18
 8005646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005648:	2301      	movs	r3, #1
 800564a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800564c:	2303      	movs	r3, #3
 800564e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005650:	2304      	movs	r3, #4
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005654:	f107 0314 	add.w	r3, r7, #20
 8005658:	4619      	mov	r1, r3
 800565a:	483a      	ldr	r0, [pc, #232]	; (8005744 <HAL_I2C_MspInit+0x144>)
 800565c:	f002 fbc0 	bl	8007de0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	4b36      	ldr	r3, [pc, #216]	; (8005740 <HAL_I2C_MspInit+0x140>)
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	4a35      	ldr	r2, [pc, #212]	; (8005740 <HAL_I2C_MspInit+0x140>)
 800566a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800566e:	6413      	str	r3, [r2, #64]	; 0x40
 8005670:	4b33      	ldr	r3, [pc, #204]	; (8005740 <HAL_I2C_MspInit+0x140>)
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800567c:	4b32      	ldr	r3, [pc, #200]	; (8005748 <HAL_I2C_MspInit+0x148>)
 800567e:	4a33      	ldr	r2, [pc, #204]	; (800574c <HAL_I2C_MspInit+0x14c>)
 8005680:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005682:	4b31      	ldr	r3, [pc, #196]	; (8005748 <HAL_I2C_MspInit+0x148>)
 8005684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005688:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800568a:	4b2f      	ldr	r3, [pc, #188]	; (8005748 <HAL_I2C_MspInit+0x148>)
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <HAL_I2C_MspInit+0x148>)
 8005692:	2200      	movs	r2, #0
 8005694:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005696:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <HAL_I2C_MspInit+0x148>)
 8005698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800569c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800569e:	4b2a      	ldr	r3, [pc, #168]	; (8005748 <HAL_I2C_MspInit+0x148>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056a4:	4b28      	ldr	r3, [pc, #160]	; (8005748 <HAL_I2C_MspInit+0x148>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80056aa:	4b27      	ldr	r3, [pc, #156]	; (8005748 <HAL_I2C_MspInit+0x148>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056b0:	4b25      	ldr	r3, [pc, #148]	; (8005748 <HAL_I2C_MspInit+0x148>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056b6:	4b24      	ldr	r3, [pc, #144]	; (8005748 <HAL_I2C_MspInit+0x148>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80056bc:	4822      	ldr	r0, [pc, #136]	; (8005748 <HAL_I2C_MspInit+0x148>)
 80056be:	f001 ffff 	bl	80076c0 <HAL_DMA_Init>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80056c8:	f000 f962 	bl	8005990 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <HAL_I2C_MspInit+0x148>)
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
 80056d2:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <HAL_I2C_MspInit+0x148>)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80056d8:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <HAL_I2C_MspInit+0x150>)
 80056da:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <HAL_I2C_MspInit+0x154>)
 80056dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80056de:	4b1c      	ldr	r3, [pc, #112]	; (8005750 <HAL_I2C_MspInit+0x150>)
 80056e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056e4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056e6:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <HAL_I2C_MspInit+0x150>)
 80056e8:	2240      	movs	r2, #64	; 0x40
 80056ea:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056ec:	4b18      	ldr	r3, [pc, #96]	; (8005750 <HAL_I2C_MspInit+0x150>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056f2:	4b17      	ldr	r3, [pc, #92]	; (8005750 <HAL_I2C_MspInit+0x150>)
 80056f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056fa:	4b15      	ldr	r3, [pc, #84]	; (8005750 <HAL_I2C_MspInit+0x150>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005700:	4b13      	ldr	r3, [pc, #76]	; (8005750 <HAL_I2C_MspInit+0x150>)
 8005702:	2200      	movs	r2, #0
 8005704:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <HAL_I2C_MspInit+0x150>)
 8005708:	2200      	movs	r2, #0
 800570a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800570c:	4b10      	ldr	r3, [pc, #64]	; (8005750 <HAL_I2C_MspInit+0x150>)
 800570e:	2200      	movs	r2, #0
 8005710:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005712:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <HAL_I2C_MspInit+0x150>)
 8005714:	2200      	movs	r2, #0
 8005716:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005718:	480d      	ldr	r0, [pc, #52]	; (8005750 <HAL_I2C_MspInit+0x150>)
 800571a:	f001 ffd1 	bl	80076c0 <HAL_DMA_Init>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005724:	f000 f934 	bl	8005990 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a09      	ldr	r2, [pc, #36]	; (8005750 <HAL_I2C_MspInit+0x150>)
 800572c:	635a      	str	r2, [r3, #52]	; 0x34
 800572e:	4a08      	ldr	r2, [pc, #32]	; (8005750 <HAL_I2C_MspInit+0x150>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005734:	bf00      	nop
 8005736:	3728      	adds	r7, #40	; 0x28
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40005400 	.word	0x40005400
 8005740:	40023800 	.word	0x40023800
 8005744:	40020400 	.word	0x40020400
 8005748:	20001d50 	.word	0x20001d50
 800574c:	40026010 	.word	0x40026010
 8005750:	20001c9c 	.word	0x20001c9c
 8005754:	400260b8 	.word	0x400260b8

08005758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800575c:	f001 fa16 	bl	8006b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005760:	f000 f8ac 	bl	80058bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);	//Let the time to the components to start
 8005764:	20c8      	movs	r0, #200	; 0xc8
 8005766:	f001 fa83 	bl	8006c70 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800576a:	f7ff fe7d 	bl	8005468 <MX_GPIO_Init>
  MX_DMA_Init();
 800576e:	f7ff fdf5 	bl	800535c <MX_DMA_Init>
  MX_I2C1_Init();
 8005772:	f7ff ff17 	bl	80055a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8005776:	f000 f913 	bl	80059a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800577a:	f000 f947 	bl	8005a0c <MX_SPI2_Init>
  MX_TIM1_Init();
 800577e:	f000 fc25 	bl	8005fcc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8005782:	f000 fdab 	bl	80062dc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005786:	f000 fdd3 	bl	8006330 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800578a:	f000 fdfb 	bl	8006384 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 800578e:	f7ff fcff 	bl	8005190 <MX_ADC2_Init>
  MX_TIM2_Init();
 8005792:	f000 fce1 	bl	8006158 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);	//Let the time for the components to start
 8005796:	20c8      	movs	r0, #200	; 0xc8
 8005798:	f001 fa6a 	bl	8006c70 <HAL_Delay>

  //Init du baromètre
  //MS5611_init(&sys.sensors.ms5611, &hi2c1);

  //Init du GYRO et de l ACC en utilisant un MPU6000
  MPU_init(&sys.sensors.mpu, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 800579c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057a0:	4a32      	ldr	r2, [pc, #200]	; (800586c <main+0x114>)
 80057a2:	4933      	ldr	r1, [pc, #204]	; (8005870 <main+0x118>)
 80057a4:	4833      	ldr	r0, [pc, #204]	; (8005874 <main+0x11c>)
 80057a6:	f7ff f9fd 	bl	8004ba4 <MPU_init>
  HAL_Delay(200);	//Let the time for the components to start
 80057aa:	20c8      	movs	r0, #200	; 0xc8
 80057ac:	f001 fa60 	bl	8006c70 <HAL_Delay>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 80057b0:	4930      	ldr	r1, [pc, #192]	; (8005874 <main+0x11c>)
 80057b2:	4831      	ldr	r0, [pc, #196]	; (8005878 <main+0x120>)
 80057b4:	f7fe ff76 	bl	80046a4 <GYRO_init>
  HAL_Delay(200);	//Let the time for the components to start
 80057b8:	20c8      	movs	r0, #200	; 0xc8
 80057ba:	f001 fa59 	bl	8006c70 <HAL_Delay>
  ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 80057be:	492d      	ldr	r1, [pc, #180]	; (8005874 <main+0x11c>)
 80057c0:	482e      	ldr	r0, [pc, #184]	; (800587c <main+0x124>)
 80057c2:	f7fe feb5 	bl	8004530 <ACC_init>



  IHM_Init(&sys.ihm);
 80057c6:	482e      	ldr	r0, [pc, #184]	; (8005880 <main+0x128>)
 80057c8:	f7fc fe02 	bl	80023d0 <IHM_Init>
  IHM_Led_Init(LED_HIGH_LVL, 30, PIN_LED_RGB_1_Pin, LED_OUTPUT_NEGATIVE);
 80057cc:	2301      	movs	r3, #1
 80057ce:	2201      	movs	r2, #1
 80057d0:	211e      	movs	r1, #30
 80057d2:	2000      	movs	r0, #0
 80057d4:	f7fc fe0c 	bl	80023f0 <IHM_Led_Init>
  IHM_Led_Init(LED_SENSORS, 30, PIN_LED_RGB_2_Pin, LED_OUTPUT_NEGATIVE);
 80057d8:	2301      	movs	r3, #1
 80057da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057de:	211e      	movs	r1, #30
 80057e0:	2001      	movs	r0, #1
 80057e2:	f7fc fe05 	bl	80023f0 <IHM_Led_Init>

  IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80057e6:	2300      	movs	r3, #0
 80057e8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80057ec:	2100      	movs	r1, #0
 80057ee:	2000      	movs	r0, #0
 80057f0:	f7fc fe6c 	bl	80024cc <IHM_Set_Sequences>
  IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80057f4:	2300      	movs	r3, #0
 80057f6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80057fa:	2100      	movs	r1, #0
 80057fc:	2001      	movs	r0, #1
 80057fe:	f7fc fe65 	bl	80024cc <IHM_Set_Sequences>

  BATTERIE_Init(&sys.sensors.batterie, &hadc2);
 8005802:	4920      	ldr	r1, [pc, #128]	; (8005884 <main+0x12c>)
 8005804:	4820      	ldr	r0, [pc, #128]	; (8005888 <main+0x130>)
 8005806:	f7fe ff3a 	bl	800467e <BATTERIE_Init>

  CONTROLLER_Init(&sys.radio.controller, &sys.radio.ibus);
 800580a:	4920      	ldr	r1, [pc, #128]	; (800588c <main+0x134>)
 800580c:	4820      	ldr	r0, [pc, #128]	; (8005890 <main+0x138>)
 800580e:	f7fe f9df 	bl	8003bd0 <CONTROLLER_Init>
  IBUS_init(&sys.radio.ibus, &huart3, CONTROLLER_Rx_Data_Rdy);
 8005812:	4a20      	ldr	r2, [pc, #128]	; (8005894 <main+0x13c>)
 8005814:	4920      	ldr	r1, [pc, #128]	; (8005898 <main+0x140>)
 8005816:	481d      	ldr	r0, [pc, #116]	; (800588c <main+0x134>)
 8005818:	f006 f994 	bl	800bb44 <IBUS_init>

  ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_FREQUENCY);
 800581c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005820:	4a16      	ldr	r2, [pc, #88]	; (800587c <main+0x124>)
 8005822:	4915      	ldr	r1, [pc, #84]	; (8005878 <main+0x120>)
 8005824:	481d      	ldr	r0, [pc, #116]	; (800589c <main+0x144>)
 8005826:	f7fc f959 	bl	8001adc <ORIENTATION_Init>
  REGULATION_ORIENTATION_Init(&sys.regulation.orientation, &sys.orientation, sys.propulsion.consigne);
 800582a:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <main+0x148>)
 800582c:	491b      	ldr	r1, [pc, #108]	; (800589c <main+0x144>)
 800582e:	481d      	ldr	r0, [pc, #116]	; (80058a4 <main+0x14c>)
 8005830:	f7fe fc98 	bl	8004164 <REGULATION_ORIENTATION_Init>
  REGULATION_POSITION_Init(&sys.regulation.position, &sys.regulation.orientation, sys.propulsion.consigne);
 8005834:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <main+0x148>)
 8005836:	491b      	ldr	r1, [pc, #108]	; (80058a4 <main+0x14c>)
 8005838:	481b      	ldr	r0, [pc, #108]	; (80058a8 <main+0x150>)
 800583a:	f7fe fe27 	bl	800448c <REGULATION_POSITION_Init>
  PROPULSION_Init(&sys.propulsion, &htim1);
 800583e:	491b      	ldr	r1, [pc, #108]	; (80058ac <main+0x154>)
 8005840:	481b      	ldr	r0, [pc, #108]	; (80058b0 <main+0x158>)
 8005842:	f7fe f90d 	bl	8003a60 <PROPULSION_Init>

  TELEMETRY_Init(&sys.radio.telemetry, &huart2);
 8005846:	491b      	ldr	r1, [pc, #108]	; (80058b4 <main+0x15c>)
 8005848:	481b      	ldr	r0, [pc, #108]	; (80058b8 <main+0x160>)
 800584a:	f000 ffcf 	bl	80067ec <TELEMETRY_Init>

  FLIGHT_MODE_Init(&sys);
 800584e:	480c      	ldr	r0, [pc, #48]	; (8005880 <main+0x128>)
 8005850:	f7fc fc0a 	bl	8002068 <FLIGHT_MODE_Init>

  SCHEDULER_init(&sys);
 8005854:	480a      	ldr	r0, [pc, #40]	; (8005880 <main+0x128>)
 8005856:	f7fd fc7f 	bl	8003158 <SCHEDULER_init>
  EVENT_init(&sys);
 800585a:	4809      	ldr	r0, [pc, #36]	; (8005880 <main+0x128>)
 800585c:	f7fd f98a 	bl	8002b74 <EVENT_init>

  DATA_LOGGER_Init(&sys);
 8005860:	4807      	ldr	r0, [pc, #28]	; (8005880 <main+0x128>)
 8005862:	f7fb fb71 	bl	8000f48 <DATA_LOGGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 8005866:	f7fd fc89 	bl	800317c <SCHEDULER_run>
 800586a:	e7fc      	b.n	8005866 <main+0x10e>
 800586c:	40020400 	.word	0x40020400
 8005870:	200028cc 	.word	0x200028cc
 8005874:	20001f00 	.word	0x20001f00
 8005878:	20001de0 	.word	0x20001de0
 800587c:	20001e54 	.word	0x20001e54
 8005880:	20001db0 	.word	0x20001db0
 8005884:	20001bf4 	.word	0x20001bf4
 8005888:	20001ebc 	.word	0x20001ebc
 800588c:	20001fc8 	.word	0x20001fc8
 8005890:	20002028 	.word	0x20002028
 8005894:	08004157 	.word	0x08004157
 8005898:	20002c9c 	.word	0x20002c9c
 800589c:	20001f94 	.word	0x20001f94
 80058a0:	200026bc 	.word	0x200026bc
 80058a4:	200026cc 	.word	0x200026cc
 80058a8:	200028b8 	.word	0x200028b8
 80058ac:	20002afc 	.word	0x20002afc
 80058b0:	200026ac 	.word	0x200026ac
 80058b4:	20002ddc 	.word	0x20002ddc
 80058b8:	20002080 	.word	0x20002080

080058bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b094      	sub	sp, #80	; 0x50
 80058c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058c2:	f107 0320 	add.w	r3, r7, #32
 80058c6:	2230      	movs	r2, #48	; 0x30
 80058c8:	2100      	movs	r1, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f006 fcd8 	bl	800c280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058d0:	f107 030c 	add.w	r3, r7, #12
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	609a      	str	r2, [r3, #8]
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058e0:	2300      	movs	r3, #0
 80058e2:	60bb      	str	r3, [r7, #8]
 80058e4:	4b28      	ldr	r3, [pc, #160]	; (8005988 <SystemClock_Config+0xcc>)
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	4a27      	ldr	r2, [pc, #156]	; (8005988 <SystemClock_Config+0xcc>)
 80058ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ee:	6413      	str	r3, [r2, #64]	; 0x40
 80058f0:	4b25      	ldr	r3, [pc, #148]	; (8005988 <SystemClock_Config+0xcc>)
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058fc:	2300      	movs	r3, #0
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	4b22      	ldr	r3, [pc, #136]	; (800598c <SystemClock_Config+0xd0>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a21      	ldr	r2, [pc, #132]	; (800598c <SystemClock_Config+0xd0>)
 8005906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	4b1f      	ldr	r3, [pc, #124]	; (800598c <SystemClock_Config+0xd0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005914:	607b      	str	r3, [r7, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005918:	2302      	movs	r3, #2
 800591a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800591c:	2301      	movs	r3, #1
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005920:	2310      	movs	r3, #16
 8005922:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005924:	2302      	movs	r3, #2
 8005926:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005928:	2300      	movs	r3, #0
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800592c:	2308      	movs	r3, #8
 800592e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005930:	23a8      	movs	r3, #168	; 0xa8
 8005932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005934:	2302      	movs	r3, #2
 8005936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005938:	2304      	movs	r3, #4
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800593c:	f107 0320 	add.w	r3, r7, #32
 8005940:	4618      	mov	r0, r3
 8005942:	f002 fd39 	bl	80083b8 <HAL_RCC_OscConfig>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800594c:	f000 f820 	bl	8005990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005950:	230f      	movs	r3, #15
 8005952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005954:	2302      	movs	r3, #2
 8005956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800595c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005968:	f107 030c 	add.w	r3, r7, #12
 800596c:	2105      	movs	r1, #5
 800596e:	4618      	mov	r0, r3
 8005970:	f002 ff92 	bl	8008898 <HAL_RCC_ClockConfig>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800597a:	f000 f809 	bl	8005990 <Error_Handler>
  }
}
 800597e:	bf00      	nop
 8005980:	3750      	adds	r7, #80	; 0x50
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40023800 	.word	0x40023800
 800598c:	40007000 	.word	0x40007000

08005990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005994:	bf00      	nop
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80059a4:	4b17      	ldr	r3, [pc, #92]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059a6:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <MX_SPI1_Init+0x68>)
 80059a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80059b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80059b2:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80059b8:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80059ca:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80059d2:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059d4:	2238      	movs	r2, #56	; 0x38
 80059d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059da:	2200      	movs	r2, #0
 80059dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80059de:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e4:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059ec:	220a      	movs	r2, #10
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80059f0:	4804      	ldr	r0, [pc, #16]	; (8005a04 <MX_SPI1_Init+0x64>)
 80059f2:	f003 f91d 	bl	8008c30 <HAL_SPI_Init>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80059fc:	f7ff ffc8 	bl	8005990 <Error_Handler>
  }

}
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20002984 	.word	0x20002984
 8005a08:	40013000 	.word	0x40013000

08005a0c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a12:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <MX_SPI2_Init+0x68>)
 8005a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005a16:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005a1e:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a24:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a2a:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a40:	2228      	movs	r2, #40	; 0x28
 8005a42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a44:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a50:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a58:	220a      	movs	r2, #10
 8005a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005a5c:	4804      	ldr	r0, [pc, #16]	; (8005a70 <MX_SPI2_Init+0x64>)
 8005a5e:	f003 f8e7 	bl	8008c30 <HAL_SPI_Init>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005a68:	f7ff ff92 	bl	8005990 <Error_Handler>
  }

}
 8005a6c:	bf00      	nop
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	200028cc 	.word	0x200028cc
 8005a74:	40003800 	.word	0x40003800

08005a78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08c      	sub	sp, #48	; 0x30
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a80:	f107 031c 	add.w	r3, r7, #28
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a8e      	ldr	r2, [pc, #568]	; (8005cd0 <HAL_SPI_MspInit+0x258>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	f040 8089 	bne.w	8005bae <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61bb      	str	r3, [r7, #24]
 8005aa0:	4b8c      	ldr	r3, [pc, #560]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa4:	4a8b      	ldr	r2, [pc, #556]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8005aac:	4b89      	ldr	r3, [pc, #548]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	4b85      	ldr	r3, [pc, #532]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	4a84      	ldr	r2, [pc, #528]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005ac2:	f043 0301 	orr.w	r3, r3, #1
 8005ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ac8:	4b82      	ldr	r3, [pc, #520]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005ad4:	23e0      	movs	r3, #224	; 0xe0
 8005ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005ae4:	2305      	movs	r3, #5
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae8:	f107 031c 	add.w	r3, r7, #28
 8005aec:	4619      	mov	r1, r3
 8005aee:	487a      	ldr	r0, [pc, #488]	; (8005cd8 <HAL_SPI_MspInit+0x260>)
 8005af0:	f002 f976 	bl	8007de0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8005af4:	4b79      	ldr	r3, [pc, #484]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005af6:	4a7a      	ldr	r2, [pc, #488]	; (8005ce0 <HAL_SPI_MspInit+0x268>)
 8005af8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8005afa:	4b78      	ldr	r3, [pc, #480]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005afc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005b00:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b02:	4b76      	ldr	r3, [pc, #472]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b08:	4b74      	ldr	r3, [pc, #464]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b0e:	4b73      	ldr	r3, [pc, #460]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b14:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b16:	4b71      	ldr	r3, [pc, #452]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b1c:	4b6f      	ldr	r3, [pc, #444]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8005b22:	4b6e      	ldr	r3, [pc, #440]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b28:	4b6c      	ldr	r3, [pc, #432]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b2e:	4b6b      	ldr	r3, [pc, #428]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005b34:	4869      	ldr	r0, [pc, #420]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b36:	f001 fdc3 	bl	80076c0 <HAL_DMA_Init>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8005b40:	f7ff ff26 	bl	8005990 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a65      	ldr	r2, [pc, #404]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8005b4a:	4a64      	ldr	r2, [pc, #400]	; (8005cdc <HAL_SPI_MspInit+0x264>)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8005b50:	4b64      	ldr	r3, [pc, #400]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b52:	4a65      	ldr	r2, [pc, #404]	; (8005ce8 <HAL_SPI_MspInit+0x270>)
 8005b54:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8005b56:	4b63      	ldr	r3, [pc, #396]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b58:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005b5c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b5e:	4b61      	ldr	r3, [pc, #388]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b60:	2240      	movs	r2, #64	; 0x40
 8005b62:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b64:	4b5f      	ldr	r3, [pc, #380]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b6a:	4b5e      	ldr	r3, [pc, #376]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b70:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b72:	4b5c      	ldr	r3, [pc, #368]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b78:	4b5a      	ldr	r3, [pc, #360]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005b7e:	4b59      	ldr	r3, [pc, #356]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b84:	4b57      	ldr	r3, [pc, #348]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b8a:	4b56      	ldr	r3, [pc, #344]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005b90:	4854      	ldr	r0, [pc, #336]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005b92:	f001 fd95 	bl	80076c0 <HAL_DMA_Init>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8005b9c:	f7ff fef8 	bl	8005990 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a50      	ldr	r2, [pc, #320]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005ba4:	649a      	str	r2, [r3, #72]	; 0x48
 8005ba6:	4a4f      	ldr	r2, [pc, #316]	; (8005ce4 <HAL_SPI_MspInit+0x26c>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005bac:	e08c      	b.n	8005cc8 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4e      	ldr	r2, [pc, #312]	; (8005cec <HAL_SPI_MspInit+0x274>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	f040 8087 	bne.w	8005cc8 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	4b45      	ldr	r3, [pc, #276]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	4a44      	ldr	r2, [pc, #272]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bca:	4b42      	ldr	r3, [pc, #264]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	4b3e      	ldr	r3, [pc, #248]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	4a3d      	ldr	r2, [pc, #244]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005be0:	f043 0302 	orr.w	r3, r3, #2
 8005be4:	6313      	str	r3, [r2, #48]	; 0x30
 8005be6:	4b3b      	ldr	r3, [pc, #236]	; (8005cd4 <HAL_SPI_MspInit+0x25c>)
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005bf2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c00:	2303      	movs	r3, #3
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005c04:	2305      	movs	r3, #5
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c08:	f107 031c 	add.w	r3, r7, #28
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4838      	ldr	r0, [pc, #224]	; (8005cf0 <HAL_SPI_MspInit+0x278>)
 8005c10:	f002 f8e6 	bl	8007de0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005c14:	4b37      	ldr	r3, [pc, #220]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c16:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <HAL_SPI_MspInit+0x280>)
 8005c18:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8005c1a:	4b36      	ldr	r3, [pc, #216]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c20:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c26:	4b33      	ldr	r3, [pc, #204]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c2c:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c32:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c34:	4b2f      	ldr	r3, [pc, #188]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c3a:	4b2e      	ldr	r3, [pc, #184]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005c40:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005c46:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c4c:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005c52:	4828      	ldr	r0, [pc, #160]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c54:	f001 fd34 	bl	80076c0 <HAL_DMA_Init>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 8005c5e:	f7ff fe97 	bl	8005990 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a23      	ldr	r2, [pc, #140]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c66:	64da      	str	r2, [r3, #76]	; 0x4c
 8005c68:	4a22      	ldr	r2, [pc, #136]	; (8005cf4 <HAL_SPI_MspInit+0x27c>)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005c6e:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005c70:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <HAL_SPI_MspInit+0x288>)
 8005c72:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005c74:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c7a:	4b20      	ldr	r3, [pc, #128]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005c7c:	2240      	movs	r2, #64	; 0x40
 8005c7e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c80:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c86:	4b1d      	ldr	r3, [pc, #116]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c8c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c8e:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005c9a:	4b18      	ldr	r3, [pc, #96]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005ca0:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ca6:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005cac:	4813      	ldr	r0, [pc, #76]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005cae:	f001 fd07 	bl	80076c0 <HAL_DMA_Init>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <HAL_SPI_MspInit+0x244>
      Error_Handler();
 8005cb8:	f7ff fe6a 	bl	8005990 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a0f      	ldr	r2, [pc, #60]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005cc0:	649a      	str	r2, [r3, #72]	; 0x48
 8005cc2:	4a0e      	ldr	r2, [pc, #56]	; (8005cfc <HAL_SPI_MspInit+0x284>)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005cc8:	bf00      	nop
 8005cca:	3730      	adds	r7, #48	; 0x30
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40013000 	.word	0x40013000
 8005cd4:	40023800 	.word	0x40023800
 8005cd8:	40020000 	.word	0x40020000
 8005cdc:	200029dc 	.word	0x200029dc
 8005ce0:	40026410 	.word	0x40026410
 8005ce4:	20002a9c 	.word	0x20002a9c
 8005ce8:	40026458 	.word	0x40026458
 8005cec:	40003800 	.word	0x40003800
 8005cf0:	40020400 	.word	0x40020400
 8005cf4:	20002924 	.word	0x20002924
 8005cf8:	40026058 	.word	0x40026058
 8005cfc:	20002a3c 	.word	0x20002a3c
 8005d00:	40026070 	.word	0x40026070

08005d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	607b      	str	r3, [r7, #4]
 8005d0e:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	4a0f      	ldr	r2, [pc, #60]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d18:	6453      	str	r3, [r2, #68]	; 0x44
 8005d1a:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d22:	607b      	str	r3, [r7, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d26:	2300      	movs	r3, #0
 8005d28:	603b      	str	r3, [r7, #0]
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d34:	6413      	str	r3, [r2, #64]	; 0x40
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40023800 	.word	0x40023800

08005d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d62:	b480      	push	{r7}
 8005d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d66:	e7fe      	b.n	8005d66 <HardFault_Handler+0x4>

08005d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d6c:	e7fe      	b.n	8005d6c <MemManage_Handler+0x4>

08005d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d72:	e7fe      	b.n	8005d72 <BusFault_Handler+0x4>

08005d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d78:	e7fe      	b.n	8005d78 <UsageFault_Handler+0x4>

08005d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d8c:	bf00      	nop
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d96:	b480      	push	{r7}
 8005d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d9a:	bf00      	nop
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005da8:	f000 ff42 	bl	8006c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005dac:	bf00      	nop
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005db4:	4802      	ldr	r0, [pc, #8]	; (8005dc0 <DMA1_Stream0_IRQHandler+0x10>)
 8005db6:	f001 fdab 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20001d50 	.word	0x20001d50

08005dc4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005dc8:	4802      	ldr	r0, [pc, #8]	; (8005dd4 <DMA1_Stream1_IRQHandler+0x10>)
 8005dca:	f001 fda1 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20002c3c 	.word	0x20002c3c

08005dd8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005ddc:	4802      	ldr	r0, [pc, #8]	; (8005de8 <DMA1_Stream3_IRQHandler+0x10>)
 8005dde:	f001 fd97 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005de2:	bf00      	nop
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20002924 	.word	0x20002924

08005dec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005df0:	4802      	ldr	r0, [pc, #8]	; (8005dfc <DMA1_Stream4_IRQHandler+0x10>)
 8005df2:	f001 fd8d 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005df6:	bf00      	nop
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20002a3c 	.word	0x20002a3c

08005e00 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005e04:	4802      	ldr	r0, [pc, #8]	; (8005e10 <DMA1_Stream5_IRQHandler+0x10>)
 8005e06:	f001 fd83 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20002b7c 	.word	0x20002b7c

08005e14 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005e18:	4802      	ldr	r0, [pc, #8]	; (8005e24 <DMA1_Stream6_IRQHandler+0x10>)
 8005e1a:	f001 fd79 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20002d3c 	.word	0x20002d3c

08005e28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005e2c:	4802      	ldr	r0, [pc, #8]	; (8005e38 <TIM2_IRQHandler+0x10>)
 8005e2e:	f003 fde1 	bl	80099f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20002b3c 	.word	0x20002b3c

08005e3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005e42:	480d      	ldr	r0, [pc, #52]	; (8005e78 <USART2_IRQHandler+0x3c>)
 8005e44:	f004 fef8 	bl	800ac38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)){
 8005e48:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <USART2_IRQHandler+0x3c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0310 	and.w	r3, r3, #16
 8005e52:	2b10      	cmp	r3, #16
 8005e54:	d10c      	bne.n	8005e70 <USART2_IRQHandler+0x34>
	  TELEMETRY_Idle_Line_Detection();
 8005e56:	f000 fe81 	bl	8006b5c <TELEMETRY_Idle_Line_Detection>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <USART2_IRQHandler+0x3c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <USART2_IRQHandler+0x3c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	607b      	str	r3, [r7, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
	}
  /* USER CODE END USART2_IRQn 1 */
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20002ddc 	.word	0x20002ddc

08005e7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005e80:	4802      	ldr	r0, [pc, #8]	; (8005e8c <USART3_IRQHandler+0x10>)
 8005e82:	f004 fed9 	bl	800ac38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005e86:	bf00      	nop
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20002c9c 	.word	0x20002c9c

08005e90 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005e94:	4802      	ldr	r0, [pc, #8]	; (8005ea0 <DMA1_Stream7_IRQHandler+0x10>)
 8005e96:	f001 fd3b 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005e9a:	bf00      	nop
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20001c9c 	.word	0x20001c9c

08005ea4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005ea8:	4802      	ldr	r0, [pc, #8]	; (8005eb4 <DMA2_Stream0_IRQHandler+0x10>)
 8005eaa:	f001 fd31 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005eae:	bf00      	nop
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	200029dc 	.word	0x200029dc

08005eb8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005ebc:	4802      	ldr	r0, [pc, #8]	; (8005ec8 <DMA2_Stream1_IRQHandler+0x10>)
 8005ebe:	f001 fd27 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005ec2:	bf00      	nop
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20002bdc 	.word	0x20002bdc

08005ecc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005ed0:	4802      	ldr	r0, [pc, #8]	; (8005edc <DMA2_Stream2_IRQHandler+0x10>)
 8005ed2:	f001 fd1d 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005ed6:	bf00      	nop
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20001c3c 	.word	0x20001c3c

08005ee0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005ee4:	4802      	ldr	r0, [pc, #8]	; (8005ef0 <DMA2_Stream3_IRQHandler+0x10>)
 8005ee6:	f001 fd13 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005eea:	bf00      	nop
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20002a9c 	.word	0x20002a9c

08005ef4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005ef8:	4802      	ldr	r0, [pc, #8]	; (8005f04 <DMA2_Stream6_IRQHandler+0x10>)
 8005efa:	f001 fd09 	bl	8007910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005efe:	bf00      	nop
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20002cdc 	.word	0x20002cdc

08005f08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	IBUS_RxCplt(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f005 fe3d 	bl	800bb90 <IBUS_RxCplt>
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
	IBUS_RxHalfCplt(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f005 fe4c 	bl	800bbc4 <IBUS_RxHalfCplt>
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f3c:	4a14      	ldr	r2, [pc, #80]	; (8005f90 <_sbrk+0x5c>)
 8005f3e:	4b15      	ldr	r3, [pc, #84]	; (8005f94 <_sbrk+0x60>)
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <_sbrk+0x64>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f50:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <_sbrk+0x64>)
 8005f52:	4a12      	ldr	r2, [pc, #72]	; (8005f9c <_sbrk+0x68>)
 8005f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f56:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <_sbrk+0x64>)
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d207      	bcs.n	8005f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f64:	f006 f93e 	bl	800c1e4 <__errno>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f72:	e009      	b.n	8005f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f74:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <_sbrk+0x64>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f7a:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <_sbrk+0x64>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4413      	add	r3, r2
 8005f82:	4a05      	ldr	r2, [pc, #20]	; (8005f98 <_sbrk+0x64>)
 8005f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f86:	68fb      	ldr	r3, [r7, #12]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20020000 	.word	0x20020000
 8005f94:	00000400 	.word	0x00000400
 8005f98:	20001bd8 	.word	0x20001bd8
 8005f9c:	20002e28 	.word	0x20002e28

08005fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005fa4:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <SystemInit+0x28>)
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005faa:	4a07      	ldr	r2, [pc, #28]	; (8005fc8 <SystemInit+0x28>)
 8005fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005fb4:	4b04      	ldr	r3, [pc, #16]	; (8005fc8 <SystemInit+0x28>)
 8005fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005fba:	609a      	str	r2, [r3, #8]
#endif
}
 8005fbc:	bf00      	nop
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	e000ed00 	.word	0xe000ed00

08005fcc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b096      	sub	sp, #88	; 0x58
 8005fd0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005fd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	605a      	str	r2, [r3, #4]
 8005fdc:	609a      	str	r2, [r3, #8]
 8005fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	605a      	str	r2, [r3, #4]
 8005ff4:	609a      	str	r2, [r3, #8]
 8005ff6:	60da      	str	r2, [r3, #12]
 8005ff8:	611a      	str	r2, [r3, #16]
 8005ffa:	615a      	str	r2, [r3, #20]
 8005ffc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005ffe:	1d3b      	adds	r3, r7, #4
 8006000:	2220      	movs	r2, #32
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f006 f93b 	bl	800c280 <memset>

  htim1.Instance = TIM1;
 800600a:	4b51      	ldr	r3, [pc, #324]	; (8006150 <MX_TIM1_Init+0x184>)
 800600c:	4a51      	ldr	r2, [pc, #324]	; (8006154 <MX_TIM1_Init+0x188>)
 800600e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8006010:	4b4f      	ldr	r3, [pc, #316]	; (8006150 <MX_TIM1_Init+0x184>)
 8006012:	2214      	movs	r2, #20
 8006014:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006016:	4b4e      	ldr	r3, [pc, #312]	; (8006150 <MX_TIM1_Init+0x184>)
 8006018:	2200      	movs	r2, #0
 800601a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 800601c:	4b4c      	ldr	r3, [pc, #304]	; (8006150 <MX_TIM1_Init+0x184>)
 800601e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006022:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006024:	4b4a      	ldr	r3, [pc, #296]	; (8006150 <MX_TIM1_Init+0x184>)
 8006026:	2200      	movs	r2, #0
 8006028:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800602a:	4b49      	ldr	r3, [pc, #292]	; (8006150 <MX_TIM1_Init+0x184>)
 800602c:	2200      	movs	r2, #0
 800602e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006030:	4b47      	ldr	r3, [pc, #284]	; (8006150 <MX_TIM1_Init+0x184>)
 8006032:	2280      	movs	r2, #128	; 0x80
 8006034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006036:	4846      	ldr	r0, [pc, #280]	; (8006150 <MX_TIM1_Init+0x184>)
 8006038:	f003 fc3e 	bl	80098b8 <HAL_TIM_Base_Init>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006042:	f7ff fca5 	bl	8005990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800604a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800604c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006050:	4619      	mov	r1, r3
 8006052:	483f      	ldr	r0, [pc, #252]	; (8006150 <MX_TIM1_Init+0x184>)
 8006054:	f003 fe9c 	bl	8009d90 <HAL_TIM_ConfigClockSource>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800605e:	f7ff fc97 	bl	8005990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006062:	483b      	ldr	r0, [pc, #236]	; (8006150 <MX_TIM1_Init+0x184>)
 8006064:	f003 fc53 	bl	800990e <HAL_TIM_PWM_Init>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800606e:	f7ff fc8f 	bl	8005990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006072:	2300      	movs	r3, #0
 8006074:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006076:	2300      	movs	r3, #0
 8006078:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800607a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800607e:	4619      	mov	r1, r3
 8006080:	4833      	ldr	r0, [pc, #204]	; (8006150 <MX_TIM1_Init+0x184>)
 8006082:	f004 fa7f 	bl	800a584 <HAL_TIMEx_MasterConfigSynchronization>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800608c:	f7ff fc80 	bl	8005990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006090:	2360      	movs	r3, #96	; 0x60
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 8006094:	f240 33e7 	movw	r3, #999	; 0x3e7
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800609a:	2300      	movs	r3, #0
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800609e:	2300      	movs	r3, #0
 80060a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80060a6:	2300      	movs	r3, #0
 80060a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80060aa:	2300      	movs	r3, #0
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80060ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060b2:	2200      	movs	r2, #0
 80060b4:	4619      	mov	r1, r3
 80060b6:	4826      	ldr	r0, [pc, #152]	; (8006150 <MX_TIM1_Init+0x184>)
 80060b8:	f003 fda4 	bl	8009c04 <HAL_TIM_PWM_ConfigChannel>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80060c2:	f7ff fc65 	bl	8005990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80060c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ca:	2204      	movs	r2, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4820      	ldr	r0, [pc, #128]	; (8006150 <MX_TIM1_Init+0x184>)
 80060d0:	f003 fd98 	bl	8009c04 <HAL_TIM_PWM_ConfigChannel>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80060da:	f7ff fc59 	bl	8005990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80060de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060e2:	2208      	movs	r2, #8
 80060e4:	4619      	mov	r1, r3
 80060e6:	481a      	ldr	r0, [pc, #104]	; (8006150 <MX_TIM1_Init+0x184>)
 80060e8:	f003 fd8c 	bl	8009c04 <HAL_TIM_PWM_ConfigChannel>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80060f2:	f7ff fc4d 	bl	8005990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80060f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060fa:	220c      	movs	r2, #12
 80060fc:	4619      	mov	r1, r3
 80060fe:	4814      	ldr	r0, [pc, #80]	; (8006150 <MX_TIM1_Init+0x184>)
 8006100:	f003 fd80 	bl	8009c04 <HAL_TIM_PWM_ConfigChannel>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800610a:	f7ff fc41 	bl	8005990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800610e:	2300      	movs	r3, #0
 8006110:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006112:	2300      	movs	r3, #0
 8006114:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006122:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006126:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006128:	2300      	movs	r3, #0
 800612a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800612c:	1d3b      	adds	r3, r7, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4807      	ldr	r0, [pc, #28]	; (8006150 <MX_TIM1_Init+0x184>)
 8006132:	f004 faa3 	bl	800a67c <HAL_TIMEx_ConfigBreakDeadTime>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 800613c:	f7ff fc28 	bl	8005990 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8006140:	4803      	ldr	r0, [pc, #12]	; (8006150 <MX_TIM1_Init+0x184>)
 8006142:	f000 f891 	bl	8006268 <HAL_TIM_MspPostInit>

}
 8006146:	bf00      	nop
 8006148:	3758      	adds	r7, #88	; 0x58
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20002afc 	.word	0x20002afc
 8006154:	40010000 	.word	0x40010000

08006158 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800615e:	f107 0308 	add.w	r3, r7, #8
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	605a      	str	r2, [r3, #4]
 8006168:	609a      	str	r2, [r3, #8]
 800616a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800616c:	463b      	mov	r3, r7
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8006174:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <MX_TIM2_Init+0x94>)
 8006176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800617a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 800617c:	4b1b      	ldr	r3, [pc, #108]	; (80061ec <MX_TIM2_Init+0x94>)
 800617e:	22a7      	movs	r2, #167	; 0xa7
 8006180:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006182:	4b1a      	ldr	r3, [pc, #104]	; (80061ec <MX_TIM2_Init+0x94>)
 8006184:	2200      	movs	r2, #0
 8006186:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8006188:	4b18      	ldr	r3, [pc, #96]	; (80061ec <MX_TIM2_Init+0x94>)
 800618a:	2203      	movs	r2, #3
 800618c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800618e:	4b17      	ldr	r3, [pc, #92]	; (80061ec <MX_TIM2_Init+0x94>)
 8006190:	2200      	movs	r2, #0
 8006192:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006194:	4b15      	ldr	r3, [pc, #84]	; (80061ec <MX_TIM2_Init+0x94>)
 8006196:	2200      	movs	r2, #0
 8006198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800619a:	4814      	ldr	r0, [pc, #80]	; (80061ec <MX_TIM2_Init+0x94>)
 800619c:	f003 fb8c 	bl	80098b8 <HAL_TIM_Base_Init>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80061a6:	f7ff fbf3 	bl	8005990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80061b0:	f107 0308 	add.w	r3, r7, #8
 80061b4:	4619      	mov	r1, r3
 80061b6:	480d      	ldr	r0, [pc, #52]	; (80061ec <MX_TIM2_Init+0x94>)
 80061b8:	f003 fdea 	bl	8009d90 <HAL_TIM_ConfigClockSource>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80061c2:	f7ff fbe5 	bl	8005990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061c6:	2300      	movs	r3, #0
 80061c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80061ce:	463b      	mov	r3, r7
 80061d0:	4619      	mov	r1, r3
 80061d2:	4806      	ldr	r0, [pc, #24]	; (80061ec <MX_TIM2_Init+0x94>)
 80061d4:	f004 f9d6 	bl	800a584 <HAL_TIMEx_MasterConfigSynchronization>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80061de:	f7ff fbd7 	bl	8005990 <Error_Handler>
  }

}
 80061e2:	bf00      	nop
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20002b3c 	.word	0x20002b3c

080061f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a18      	ldr	r2, [pc, #96]	; (8006260 <HAL_TIM_Base_MspInit+0x70>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d10e      	bne.n	8006220 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	4b17      	ldr	r3, [pc, #92]	; (8006264 <HAL_TIM_Base_MspInit+0x74>)
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	4a16      	ldr	r2, [pc, #88]	; (8006264 <HAL_TIM_Base_MspInit+0x74>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	6453      	str	r3, [r2, #68]	; 0x44
 8006212:	4b14      	ldr	r3, [pc, #80]	; (8006264 <HAL_TIM_Base_MspInit+0x74>)
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800621e:	e01a      	b.n	8006256 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006228:	d115      	bne.n	8006256 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <HAL_TIM_Base_MspInit+0x74>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	4a0c      	ldr	r2, [pc, #48]	; (8006264 <HAL_TIM_Base_MspInit+0x74>)
 8006234:	f043 0301 	orr.w	r3, r3, #1
 8006238:	6413      	str	r3, [r2, #64]	; 0x40
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <HAL_TIM_Base_MspInit+0x74>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	60bb      	str	r3, [r7, #8]
 8006244:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006246:	2200      	movs	r2, #0
 8006248:	2100      	movs	r1, #0
 800624a:	201c      	movs	r0, #28
 800624c:	f001 fa01 	bl	8007652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006250:	201c      	movs	r0, #28
 8006252:	f001 fa1a 	bl	800768a <HAL_NVIC_EnableIRQ>
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40010000 	.word	0x40010000
 8006264:	40023800 	.word	0x40023800

08006268 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006270:	f107 030c 	add.w	r3, r7, #12
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	609a      	str	r2, [r3, #8]
 800627c:	60da      	str	r2, [r3, #12]
 800627e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a12      	ldr	r2, [pc, #72]	; (80062d0 <HAL_TIM_MspPostInit+0x68>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d11e      	bne.n	80062c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800628a:	2300      	movs	r3, #0
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <HAL_TIM_MspPostInit+0x6c>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	4a10      	ldr	r2, [pc, #64]	; (80062d4 <HAL_TIM_MspPostInit+0x6c>)
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	6313      	str	r3, [r2, #48]	; 0x30
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <HAL_TIM_MspPostInit+0x6c>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	60bb      	str	r3, [r7, #8]
 80062a4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80062a6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80062aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ac:	2302      	movs	r3, #2
 80062ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80062b8:	2301      	movs	r3, #1
 80062ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062bc:	f107 030c 	add.w	r3, r7, #12
 80062c0:	4619      	mov	r1, r3
 80062c2:	4805      	ldr	r0, [pc, #20]	; (80062d8 <HAL_TIM_MspPostInit+0x70>)
 80062c4:	f001 fd8c 	bl	8007de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80062c8:	bf00      	nop
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40010000 	.word	0x40010000
 80062d4:	40023800 	.word	0x40023800
 80062d8:	40020000 	.word	0x40020000

080062dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80062e0:	4b11      	ldr	r3, [pc, #68]	; (8006328 <MX_USART2_UART_Init+0x4c>)
 80062e2:	4a12      	ldr	r2, [pc, #72]	; (800632c <MX_USART2_UART_Init+0x50>)
 80062e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80062e6:	4b10      	ldr	r3, [pc, #64]	; (8006328 <MX_USART2_UART_Init+0x4c>)
 80062e8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80062ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062ee:	4b0e      	ldr	r3, [pc, #56]	; (8006328 <MX_USART2_UART_Init+0x4c>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062f4:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <MX_USART2_UART_Init+0x4c>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80062fa:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <MX_USART2_UART_Init+0x4c>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <MX_USART2_UART_Init+0x4c>)
 8006302:	220c      	movs	r2, #12
 8006304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006306:	4b08      	ldr	r3, [pc, #32]	; (8006328 <MX_USART2_UART_Init+0x4c>)
 8006308:	2200      	movs	r2, #0
 800630a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <MX_USART2_UART_Init+0x4c>)
 800630e:	2200      	movs	r2, #0
 8006310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006312:	4805      	ldr	r0, [pc, #20]	; (8006328 <MX_USART2_UART_Init+0x4c>)
 8006314:	f004 fa18 	bl	800a748 <HAL_UART_Init>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800631e:	f7ff fb37 	bl	8005990 <Error_Handler>
  }

}
 8006322:	bf00      	nop
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20002ddc 	.word	0x20002ddc
 800632c:	40004400 	.word	0x40004400

08006330 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006334:	4b11      	ldr	r3, [pc, #68]	; (800637c <MX_USART3_UART_Init+0x4c>)
 8006336:	4a12      	ldr	r2, [pc, #72]	; (8006380 <MX_USART3_UART_Init+0x50>)
 8006338:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800633a:	4b10      	ldr	r3, [pc, #64]	; (800637c <MX_USART3_UART_Init+0x4c>)
 800633c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006340:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006342:	4b0e      	ldr	r3, [pc, #56]	; (800637c <MX_USART3_UART_Init+0x4c>)
 8006344:	2200      	movs	r2, #0
 8006346:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006348:	4b0c      	ldr	r3, [pc, #48]	; (800637c <MX_USART3_UART_Init+0x4c>)
 800634a:	2200      	movs	r2, #0
 800634c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800634e:	4b0b      	ldr	r3, [pc, #44]	; (800637c <MX_USART3_UART_Init+0x4c>)
 8006350:	2200      	movs	r2, #0
 8006352:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006354:	4b09      	ldr	r3, [pc, #36]	; (800637c <MX_USART3_UART_Init+0x4c>)
 8006356:	220c      	movs	r2, #12
 8006358:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800635a:	4b08      	ldr	r3, [pc, #32]	; (800637c <MX_USART3_UART_Init+0x4c>)
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006360:	4b06      	ldr	r3, [pc, #24]	; (800637c <MX_USART3_UART_Init+0x4c>)
 8006362:	2200      	movs	r2, #0
 8006364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006366:	4805      	ldr	r0, [pc, #20]	; (800637c <MX_USART3_UART_Init+0x4c>)
 8006368:	f004 f9ee 	bl	800a748 <HAL_UART_Init>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006372:	f7ff fb0d 	bl	8005990 <Error_Handler>
  }

}
 8006376:	bf00      	nop
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20002c9c 	.word	0x20002c9c
 8006380:	40004800 	.word	0x40004800

08006384 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8006388:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <MX_USART6_UART_Init+0x4c>)
 800638a:	4a12      	ldr	r2, [pc, #72]	; (80063d4 <MX_USART6_UART_Init+0x50>)
 800638c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 800638e:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <MX_USART6_UART_Init+0x4c>)
 8006390:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8006394:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006396:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <MX_USART6_UART_Init+0x4c>)
 8006398:	2200      	movs	r2, #0
 800639a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800639c:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <MX_USART6_UART_Init+0x4c>)
 800639e:	2200      	movs	r2, #0
 80063a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <MX_USART6_UART_Init+0x4c>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <MX_USART6_UART_Init+0x4c>)
 80063aa:	220c      	movs	r2, #12
 80063ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063ae:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <MX_USART6_UART_Init+0x4c>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <MX_USART6_UART_Init+0x4c>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80063ba:	4805      	ldr	r0, [pc, #20]	; (80063d0 <MX_USART6_UART_Init+0x4c>)
 80063bc:	f004 f9c4 	bl	800a748 <HAL_UART_Init>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80063c6:	f7ff fae3 	bl	8005990 <Error_Handler>
  }

}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20002d9c 	.word	0x20002d9c
 80063d4:	40011400 	.word	0x40011400

080063d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08e      	sub	sp, #56	; 0x38
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a7f      	ldr	r2, [pc, #508]	; (80065f4 <HAL_UART_MspInit+0x21c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	f040 8091 	bne.w	800651e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80063fc:	2300      	movs	r3, #0
 80063fe:	623b      	str	r3, [r7, #32]
 8006400:	4b7d      	ldr	r3, [pc, #500]	; (80065f8 <HAL_UART_MspInit+0x220>)
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	4a7c      	ldr	r2, [pc, #496]	; (80065f8 <HAL_UART_MspInit+0x220>)
 8006406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800640a:	6413      	str	r3, [r2, #64]	; 0x40
 800640c:	4b7a      	ldr	r3, [pc, #488]	; (80065f8 <HAL_UART_MspInit+0x220>)
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006418:	2300      	movs	r3, #0
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	4b76      	ldr	r3, [pc, #472]	; (80065f8 <HAL_UART_MspInit+0x220>)
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	4a75      	ldr	r2, [pc, #468]	; (80065f8 <HAL_UART_MspInit+0x220>)
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	6313      	str	r3, [r2, #48]	; 0x30
 8006428:	4b73      	ldr	r3, [pc, #460]	; (80065f8 <HAL_UART_MspInit+0x220>)
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006434:	230c      	movs	r3, #12
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006438:	2302      	movs	r3, #2
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800643c:	2300      	movs	r3, #0
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006440:	2303      	movs	r3, #3
 8006442:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006444:	2307      	movs	r3, #7
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800644c:	4619      	mov	r1, r3
 800644e:	486b      	ldr	r0, [pc, #428]	; (80065fc <HAL_UART_MspInit+0x224>)
 8006450:	f001 fcc6 	bl	8007de0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006454:	4b6a      	ldr	r3, [pc, #424]	; (8006600 <HAL_UART_MspInit+0x228>)
 8006456:	4a6b      	ldr	r2, [pc, #428]	; (8006604 <HAL_UART_MspInit+0x22c>)
 8006458:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800645a:	4b69      	ldr	r3, [pc, #420]	; (8006600 <HAL_UART_MspInit+0x228>)
 800645c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006460:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006462:	4b67      	ldr	r3, [pc, #412]	; (8006600 <HAL_UART_MspInit+0x228>)
 8006464:	2200      	movs	r2, #0
 8006466:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006468:	4b65      	ldr	r3, [pc, #404]	; (8006600 <HAL_UART_MspInit+0x228>)
 800646a:	2200      	movs	r2, #0
 800646c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800646e:	4b64      	ldr	r3, [pc, #400]	; (8006600 <HAL_UART_MspInit+0x228>)
 8006470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006474:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006476:	4b62      	ldr	r3, [pc, #392]	; (8006600 <HAL_UART_MspInit+0x228>)
 8006478:	2200      	movs	r2, #0
 800647a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800647c:	4b60      	ldr	r3, [pc, #384]	; (8006600 <HAL_UART_MspInit+0x228>)
 800647e:	2200      	movs	r2, #0
 8006480:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006482:	4b5f      	ldr	r3, [pc, #380]	; (8006600 <HAL_UART_MspInit+0x228>)
 8006484:	2200      	movs	r2, #0
 8006486:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006488:	4b5d      	ldr	r3, [pc, #372]	; (8006600 <HAL_UART_MspInit+0x228>)
 800648a:	2200      	movs	r2, #0
 800648c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800648e:	4b5c      	ldr	r3, [pc, #368]	; (8006600 <HAL_UART_MspInit+0x228>)
 8006490:	2200      	movs	r2, #0
 8006492:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006494:	485a      	ldr	r0, [pc, #360]	; (8006600 <HAL_UART_MspInit+0x228>)
 8006496:	f001 f913 	bl	80076c0 <HAL_DMA_Init>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80064a0:	f7ff fa76 	bl	8005990 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a56      	ldr	r2, [pc, #344]	; (8006600 <HAL_UART_MspInit+0x228>)
 80064a8:	635a      	str	r2, [r3, #52]	; 0x34
 80064aa:	4a55      	ldr	r2, [pc, #340]	; (8006600 <HAL_UART_MspInit+0x228>)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80064b0:	4b55      	ldr	r3, [pc, #340]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064b2:	4a56      	ldr	r2, [pc, #344]	; (800660c <HAL_UART_MspInit+0x234>)
 80064b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80064b6:	4b54      	ldr	r3, [pc, #336]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064be:	4b52      	ldr	r3, [pc, #328]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064c0:	2240      	movs	r2, #64	; 0x40
 80064c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064c4:	4b50      	ldr	r3, [pc, #320]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064ca:	4b4f      	ldr	r3, [pc, #316]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064d2:	4b4d      	ldr	r3, [pc, #308]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064d8:	4b4b      	ldr	r3, [pc, #300]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064da:	2200      	movs	r2, #0
 80064dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80064de:	4b4a      	ldr	r3, [pc, #296]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80064e4:	4b48      	ldr	r3, [pc, #288]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064ea:	4b47      	ldr	r3, [pc, #284]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80064f0:	4845      	ldr	r0, [pc, #276]	; (8006608 <HAL_UART_MspInit+0x230>)
 80064f2:	f001 f8e5 	bl	80076c0 <HAL_DMA_Init>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80064fc:	f7ff fa48 	bl	8005990 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a41      	ldr	r2, [pc, #260]	; (8006608 <HAL_UART_MspInit+0x230>)
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
 8006506:	4a40      	ldr	r2, [pc, #256]	; (8006608 <HAL_UART_MspInit+0x230>)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800650c:	2200      	movs	r2, #0
 800650e:	2100      	movs	r1, #0
 8006510:	2026      	movs	r0, #38	; 0x26
 8006512:	f001 f89e 	bl	8007652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006516:	2026      	movs	r0, #38	; 0x26
 8006518:	f001 f8b7 	bl	800768a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800651c:	e10e      	b.n	800673c <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART3)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a3b      	ldr	r2, [pc, #236]	; (8006610 <HAL_UART_MspInit+0x238>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d17b      	bne.n	8006620 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	4b32      	ldr	r3, [pc, #200]	; (80065f8 <HAL_UART_MspInit+0x220>)
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	4a31      	ldr	r2, [pc, #196]	; (80065f8 <HAL_UART_MspInit+0x220>)
 8006532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006536:	6413      	str	r3, [r2, #64]	; 0x40
 8006538:	4b2f      	ldr	r3, [pc, #188]	; (80065f8 <HAL_UART_MspInit+0x220>)
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <HAL_UART_MspInit+0x220>)
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	4a2a      	ldr	r2, [pc, #168]	; (80065f8 <HAL_UART_MspInit+0x220>)
 800654e:	f043 0302 	orr.w	r3, r3, #2
 8006552:	6313      	str	r3, [r2, #48]	; 0x30
 8006554:	4b28      	ldr	r3, [pc, #160]	; (80065f8 <HAL_UART_MspInit+0x220>)
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006560:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006566:	2302      	movs	r3, #2
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800656a:	2300      	movs	r3, #0
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800656e:	2303      	movs	r3, #3
 8006570:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006572:	2307      	movs	r3, #7
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800657a:	4619      	mov	r1, r3
 800657c:	4825      	ldr	r0, [pc, #148]	; (8006614 <HAL_UART_MspInit+0x23c>)
 800657e:	f001 fc2f 	bl	8007de0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006582:	4b25      	ldr	r3, [pc, #148]	; (8006618 <HAL_UART_MspInit+0x240>)
 8006584:	4a25      	ldr	r2, [pc, #148]	; (800661c <HAL_UART_MspInit+0x244>)
 8006586:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006588:	4b23      	ldr	r3, [pc, #140]	; (8006618 <HAL_UART_MspInit+0x240>)
 800658a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800658e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006590:	4b21      	ldr	r3, [pc, #132]	; (8006618 <HAL_UART_MspInit+0x240>)
 8006592:	2200      	movs	r2, #0
 8006594:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006596:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_UART_MspInit+0x240>)
 8006598:	2200      	movs	r2, #0
 800659a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800659c:	4b1e      	ldr	r3, [pc, #120]	; (8006618 <HAL_UART_MspInit+0x240>)
 800659e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065a4:	4b1c      	ldr	r3, [pc, #112]	; (8006618 <HAL_UART_MspInit+0x240>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <HAL_UART_MspInit+0x240>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80065b0:	4b19      	ldr	r3, [pc, #100]	; (8006618 <HAL_UART_MspInit+0x240>)
 80065b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065b6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065b8:	4b17      	ldr	r3, [pc, #92]	; (8006618 <HAL_UART_MspInit+0x240>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065be:	4b16      	ldr	r3, [pc, #88]	; (8006618 <HAL_UART_MspInit+0x240>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80065c4:	4814      	ldr	r0, [pc, #80]	; (8006618 <HAL_UART_MspInit+0x240>)
 80065c6:	f001 f87b 	bl	80076c0 <HAL_DMA_Init>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80065d0:	f7ff f9de 	bl	8005990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a10      	ldr	r2, [pc, #64]	; (8006618 <HAL_UART_MspInit+0x240>)
 80065d8:	635a      	str	r2, [r3, #52]	; 0x34
 80065da:	4a0f      	ldr	r2, [pc, #60]	; (8006618 <HAL_UART_MspInit+0x240>)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80065e0:	2200      	movs	r2, #0
 80065e2:	2100      	movs	r1, #0
 80065e4:	2027      	movs	r0, #39	; 0x27
 80065e6:	f001 f834 	bl	8007652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80065ea:	2027      	movs	r0, #39	; 0x27
 80065ec:	f001 f84d 	bl	800768a <HAL_NVIC_EnableIRQ>
}
 80065f0:	e0a4      	b.n	800673c <HAL_UART_MspInit+0x364>
 80065f2:	bf00      	nop
 80065f4:	40004400 	.word	0x40004400
 80065f8:	40023800 	.word	0x40023800
 80065fc:	40020000 	.word	0x40020000
 8006600:	20002b7c 	.word	0x20002b7c
 8006604:	40026088 	.word	0x40026088
 8006608:	20002d3c 	.word	0x20002d3c
 800660c:	400260a0 	.word	0x400260a0
 8006610:	40004800 	.word	0x40004800
 8006614:	40020400 	.word	0x40020400
 8006618:	20002c3c 	.word	0x20002c3c
 800661c:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a47      	ldr	r2, [pc, #284]	; (8006744 <HAL_UART_MspInit+0x36c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	f040 8088 	bne.w	800673c <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	4b45      	ldr	r3, [pc, #276]	; (8006748 <HAL_UART_MspInit+0x370>)
 8006632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006634:	4a44      	ldr	r2, [pc, #272]	; (8006748 <HAL_UART_MspInit+0x370>)
 8006636:	f043 0320 	orr.w	r3, r3, #32
 800663a:	6453      	str	r3, [r2, #68]	; 0x44
 800663c:	4b42      	ldr	r3, [pc, #264]	; (8006748 <HAL_UART_MspInit+0x370>)
 800663e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	4b3e      	ldr	r3, [pc, #248]	; (8006748 <HAL_UART_MspInit+0x370>)
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	4a3d      	ldr	r2, [pc, #244]	; (8006748 <HAL_UART_MspInit+0x370>)
 8006652:	f043 0304 	orr.w	r3, r3, #4
 8006656:	6313      	str	r3, [r2, #48]	; 0x30
 8006658:	4b3b      	ldr	r3, [pc, #236]	; (8006748 <HAL_UART_MspInit+0x370>)
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006664:	23c0      	movs	r3, #192	; 0xc0
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006668:	2302      	movs	r3, #2
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800666c:	2300      	movs	r3, #0
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006670:	2303      	movs	r3, #3
 8006672:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006674:	2308      	movs	r3, #8
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800667c:	4619      	mov	r1, r3
 800667e:	4833      	ldr	r0, [pc, #204]	; (800674c <HAL_UART_MspInit+0x374>)
 8006680:	f001 fbae 	bl	8007de0 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006684:	4b32      	ldr	r3, [pc, #200]	; (8006750 <HAL_UART_MspInit+0x378>)
 8006686:	4a33      	ldr	r2, [pc, #204]	; (8006754 <HAL_UART_MspInit+0x37c>)
 8006688:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800668a:	4b31      	ldr	r3, [pc, #196]	; (8006750 <HAL_UART_MspInit+0x378>)
 800668c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006690:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006692:	4b2f      	ldr	r3, [pc, #188]	; (8006750 <HAL_UART_MspInit+0x378>)
 8006694:	2240      	movs	r2, #64	; 0x40
 8006696:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006698:	4b2d      	ldr	r3, [pc, #180]	; (8006750 <HAL_UART_MspInit+0x378>)
 800669a:	2200      	movs	r2, #0
 800669c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800669e:	4b2c      	ldr	r3, [pc, #176]	; (8006750 <HAL_UART_MspInit+0x378>)
 80066a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066a4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066a6:	4b2a      	ldr	r3, [pc, #168]	; (8006750 <HAL_UART_MspInit+0x378>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066ac:	4b28      	ldr	r3, [pc, #160]	; (8006750 <HAL_UART_MspInit+0x378>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80066b2:	4b27      	ldr	r3, [pc, #156]	; (8006750 <HAL_UART_MspInit+0x378>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80066b8:	4b25      	ldr	r3, [pc, #148]	; (8006750 <HAL_UART_MspInit+0x378>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <HAL_UART_MspInit+0x378>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80066c4:	4822      	ldr	r0, [pc, #136]	; (8006750 <HAL_UART_MspInit+0x378>)
 80066c6:	f000 fffb 	bl	80076c0 <HAL_DMA_Init>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 80066d0:	f7ff f95e 	bl	8005990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a1e      	ldr	r2, [pc, #120]	; (8006750 <HAL_UART_MspInit+0x378>)
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
 80066da:	4a1d      	ldr	r2, [pc, #116]	; (8006750 <HAL_UART_MspInit+0x378>)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80066e0:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <HAL_UART_MspInit+0x380>)
 80066e2:	4a1e      	ldr	r2, [pc, #120]	; (800675c <HAL_UART_MspInit+0x384>)
 80066e4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80066e6:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <HAL_UART_MspInit+0x380>)
 80066e8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80066ec:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066ee:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <HAL_UART_MspInit+0x380>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066f4:	4b18      	ldr	r3, [pc, #96]	; (8006758 <HAL_UART_MspInit+0x380>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066fa:	4b17      	ldr	r3, [pc, #92]	; (8006758 <HAL_UART_MspInit+0x380>)
 80066fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006700:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <HAL_UART_MspInit+0x380>)
 8006704:	2200      	movs	r2, #0
 8006706:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006708:	4b13      	ldr	r3, [pc, #76]	; (8006758 <HAL_UART_MspInit+0x380>)
 800670a:	2200      	movs	r2, #0
 800670c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <HAL_UART_MspInit+0x380>)
 8006710:	2200      	movs	r2, #0
 8006712:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006714:	4b10      	ldr	r3, [pc, #64]	; (8006758 <HAL_UART_MspInit+0x380>)
 8006716:	2200      	movs	r2, #0
 8006718:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800671a:	4b0f      	ldr	r3, [pc, #60]	; (8006758 <HAL_UART_MspInit+0x380>)
 800671c:	2200      	movs	r2, #0
 800671e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006720:	480d      	ldr	r0, [pc, #52]	; (8006758 <HAL_UART_MspInit+0x380>)
 8006722:	f000 ffcd 	bl	80076c0 <HAL_DMA_Init>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_UART_MspInit+0x358>
      Error_Handler();
 800672c:	f7ff f930 	bl	8005990 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a09      	ldr	r2, [pc, #36]	; (8006758 <HAL_UART_MspInit+0x380>)
 8006734:	635a      	str	r2, [r3, #52]	; 0x34
 8006736:	4a08      	ldr	r2, [pc, #32]	; (8006758 <HAL_UART_MspInit+0x380>)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800673c:	bf00      	nop
 800673e:	3738      	adds	r7, #56	; 0x38
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40011400 	.word	0x40011400
 8006748:	40023800 	.word	0x40023800
 800674c:	40020800 	.word	0x40020800
 8006750:	20002cdc 	.word	0x20002cdc
 8006754:	400264a0 	.word	0x400264a0
 8006758:	20002bdc 	.word	0x20002bdc
 800675c:	40026428 	.word	0x40026428

08006760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006798 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006764:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006766:	e003      	b.n	8006770 <LoopCopyDataInit>

08006768 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006768:	4b0c      	ldr	r3, [pc, #48]	; (800679c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800676a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800676c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800676e:	3104      	adds	r1, #4

08006770 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006770:	480b      	ldr	r0, [pc, #44]	; (80067a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006772:	4b0c      	ldr	r3, [pc, #48]	; (80067a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006774:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006776:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006778:	d3f6      	bcc.n	8006768 <CopyDataInit>
  ldr  r2, =_sbss
 800677a:	4a0b      	ldr	r2, [pc, #44]	; (80067a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800677c:	e002      	b.n	8006784 <LoopFillZerobss>

0800677e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800677e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006780:	f842 3b04 	str.w	r3, [r2], #4

08006784 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006786:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006788:	d3f9      	bcc.n	800677e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800678a:	f7ff fc09 	bl	8005fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800678e:	f005 fd2f 	bl	800c1f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006792:	f7fe ffe1 	bl	8005758 <main>
  bx  lr    
 8006796:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006798:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800679c:	0800ffd4 	.word	0x0800ffd4
  ldr  r0, =_sdata
 80067a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80067a4:	20001844 	.word	0x20001844
  ldr  r2, =_sbss
 80067a8:	20001844 	.word	0x20001844
  ldr  r3, = _ebss
 80067ac:	20002e24 	.word	0x20002e24

080067b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80067b0:	e7fe      	b.n	80067b0 <ADC_IRQHandler>

080067b2 <get_nb_bytes_available>:

static telemetry_t * telem ;	//We dont use multiples telemetry anyways

//Private function to know the number of bytes available
uint16_t get_nb_bytes_available(telemetry_t * telem);
uint16_t get_nb_bytes_available(telemetry_t * telem){
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
	uint16_t nb = 0 ;
 80067ba:	2300      	movs	r3, #0
 80067bc:	81fb      	strh	r3, [r7, #14]
	if(telem->index_write_rx > telem->index_read_rx){
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d907      	bls.n	80067de <get_nb_bytes_available+0x2c>
		nb = telem->index_write_rx - telem->index_read_rx ;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 80067de:	89fb      	ldrh	r3, [r7, #14]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TELEMETRY_Init>:

void TELEMETRY_Init(telemetry_t * telem_, UART_HandleTypeDef * huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
	telem = telem_ ;
 80067f6:	4a15      	ldr	r2, [pc, #84]	; (800684c <TELEMETRY_Init+0x60>)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6013      	str	r3, [r2, #0]
	telem->huart = huart ;
 80067fc:	4b13      	ldr	r3, [pc, #76]	; (800684c <TELEMETRY_Init+0x60>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	601a      	str	r2, [r3, #0]

	//On envoit un premier message qui sert sutout à éviter que les premiers octet utiles soient perdu
	static uint8_t hey_msg[] = "Hey it s me Theo...\n";
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <TELEMETRY_Init+0x60>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2214      	movs	r2, #20
 800680c:	4910      	ldr	r1, [pc, #64]	; (8006850 <TELEMETRY_Init+0x64>)
 800680e:	4618      	mov	r0, r3
 8006810:	f004 f926 	bl	800aa60 <HAL_UART_Transmit_DMA>

	//Activation de l'it "idle" qui préviendra de la fin de la récéption d'un message
	__HAL_UART_ENABLE_IT(telem->huart, UART_IT_IDLE);
 8006814:	4b0d      	ldr	r3, [pc, #52]	; (800684c <TELEMETRY_Init+0x60>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <TELEMETRY_Init+0x60>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0210 	orr.w	r2, r2, #16
 800682a:	60da      	str	r2, [r3, #12]
	//On lance la récéption en DMA
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 800682c:	4b07      	ldr	r3, [pc, #28]	; (800684c <TELEMETRY_Init+0x60>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	4b06      	ldr	r3, [pc, #24]	; (800684c <TELEMETRY_Init+0x60>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800683a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800683e:	4619      	mov	r1, r3
 8006840:	f004 f97a 	bl	800ab38 <HAL_UART_Receive_DMA>
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20001bdc 	.word	0x20001bdc
 8006850:	20001650 	.word	0x20001650

08006854 <TELEMETRY_Process>:


void TELEMETRY_Process(uint32_t time_us){
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

	//	--------------------	Transmission	------------------------
	//Ce qui suit vide le buffer en transmettant on contenu en respectant la limite
	//de vitesse maximum
	if(telem->index_write_tx != telem->index_read_tx && time_us > telem->next_send)
 800685c:	4b6f      	ldr	r3, [pc, #444]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 8006864:	4b6d      	ldr	r3, [pc, #436]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 800686c:	429a      	cmp	r2, r3
 800686e:	d051      	beq.n	8006914 <TELEMETRY_Process+0xc0>
 8006870:	4b6a      	ldr	r3, [pc, #424]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	d94a      	bls.n	8006914 <TELEMETRY_Process+0xc0>
	{
		telem->next_send = time_us + telem->len_portion_tx[telem->index_read_tx] * PERIODE_1_OCTET ;
 800687e:	4b67      	ldr	r3, [pc, #412]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a66      	ldr	r2, [pc, #408]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006884:	6812      	ldr	r2, [r2, #0]
 8006886:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 800688a:	4413      	add	r3, r2
 800688c:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 8006890:	461a      	mov	r2, r3
 8006892:	f240 134d 	movw	r3, #333	; 0x14d
 8006896:	fb03 f302 	mul.w	r3, r3, r2
 800689a:	4619      	mov	r1, r3
 800689c:	4b5f      	ldr	r3, [pc, #380]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	440a      	add	r2, r1
 80068a4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

		//On transmet les données
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 80068a8:	4b5c      	ldr	r3, [pc, #368]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	4b5b      	ldr	r3, [pc, #364]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b5a      	ldr	r3, [pc, #360]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 80068ba:	4619      	mov	r1, r3
 80068bc:	460b      	mov	r3, r1
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	1d59      	adds	r1, r3, #5
 80068c8:	4b54      	ldr	r3, [pc, #336]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a53      	ldr	r2, [pc, #332]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 80068d4:	4413      	add	r3, r2
 80068d6:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 80068da:	b29b      	uxth	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	f004 f8bf 	bl	800aa60 <HAL_UART_Transmit_DMA>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
 80068e2:	4b4e      	ldr	r3, [pc, #312]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f8b3 2426 	ldrh.w	r2, [r3, #1062]	; 0x426
 80068ea:	3201      	adds	r2, #1
 80068ec:	b292      	uxth	r2, r2
 80068ee:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 80068f2:	4b4a      	ldr	r3, [pc, #296]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 80068fa:	4a48      	ldr	r2, [pc, #288]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	4948      	ldr	r1, [pc, #288]	; (8006a20 <TELEMETRY_Process+0x1cc>)
 8006900:	fba1 0103 	umull	r0, r1, r1, r3
 8006904:	0909      	lsrs	r1, r1, #4
 8006906:	2032      	movs	r0, #50	; 0x32
 8006908:	fb00 f101 	mul.w	r1, r0, r1
 800690c:	1a5b      	subs	r3, r3, r1
 800690e:	b29b      	uxth	r3, r3
 8006910:	f8a2 3426 	strh.w	r3, [r2, #1062]	; 0x426
	}

	//	---------------------	Reception	-------------------------------

	uint16_t bytes_avaibles = get_nb_bytes_available(telem);
 8006914:	4b41      	ldr	r3, [pc, #260]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff ff4a 	bl	80067b2 <get_nb_bytes_available>
 800691e:	4603      	mov	r3, r0
 8006920:	823b      	strh	r3, [r7, #16]
	if(bytes_avaibles > 2)	//Minimum trois octets pour faire quoi que ce soit
 8006922:	8a3b      	ldrh	r3, [r7, #16]
 8006924:	2b02      	cmp	r3, #2
 8006926:	d976      	bls.n	8006a16 <TELEMETRY_Process+0x1c2>
	{
		uint16_t bytes_used = 1 ;
 8006928:	2301      	movs	r3, #1
 800692a:	82fb      	strh	r3, [r7, #22]
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 800692c:	4b3b      	ldr	r3, [pc, #236]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a3a      	ldr	r2, [pc, #232]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	f8b2 262a 	ldrh.w	r2, [r2, #1578]	; 0x62a
 8006938:	4413      	add	r3, r2
 800693a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800693e:	2b24      	cmp	r3, #36	; 0x24
 8006940:	d15c      	bne.n	80069fc <TELEMETRY_Process+0x1a8>
		{
			//Number of byte recquiered including the '$' and the checksum to use the current frame we are on
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[telem->index_read_rx+1]);
 8006942:	4b36      	ldr	r3, [pc, #216]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b35      	ldr	r3, [pc, #212]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800694e:	3301      	adds	r3, #1
 8006950:	4413      	add	r3, r2
 8006952:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8006956:	4618      	mov	r0, r3
 8006958:	f7fb f85a 	bl	8001a10 <DATA_LOGGER_Get_Data>
 800695c:	60f8      	str	r0, [r7, #12]
			uint16_t bytes_recquired = (current_data->format / 20) + 3 ;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	7a5b      	ldrb	r3, [r3, #9]
 8006962:	4a30      	ldr	r2, [pc, #192]	; (8006a24 <TELEMETRY_Process+0x1d0>)
 8006964:	fba2 2303 	umull	r2, r3, r2, r3
 8006968:	091b      	lsrs	r3, r3, #4
 800696a:	b2db      	uxtb	r3, r3
 800696c:	b29b      	uxth	r3, r3
 800696e:	3303      	adds	r3, #3
 8006970:	817b      	strh	r3, [r7, #10]

			if(bytes_recquired > bytes_avaibles)
 8006972:	897a      	ldrh	r2, [r7, #10]
 8006974:	8a3b      	ldrh	r3, [r7, #16]
 8006976:	429a      	cmp	r2, r3
 8006978:	d84c      	bhi.n	8006a14 <TELEMETRY_Process+0x1c0>
				return ;	//We just wait for then next call with hopefully more data available
			bytes_used = bytes_recquired;
 800697a:	897b      	ldrh	r3, [r7, #10]
 800697c:	82fb      	strh	r3, [r7, #22]

			//Len is id(1 byte) + data(x bytes)
			uint16_t len_frame = bytes_recquired - 2 ;
 800697e:	897b      	ldrh	r3, [r7, #10]
 8006980:	3b02      	subs	r3, #2
 8006982:	813b      	strh	r3, [r7, #8]

			//Checksum
			uint16_t checksum = 0 ;
 8006984:	2300      	movs	r3, #0
 8006986:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 8006988:	2300      	movs	r3, #0
 800698a:	827b      	strh	r3, [r7, #18]
 800698c:	e012      	b.n	80069b4 <TELEMETRY_Process+0x160>
			{
				checksum += telem->buffer_rx[telem->index_read_rx+1+b];
 800698e:	4b23      	ldr	r3, [pc, #140]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800699a:	1c59      	adds	r1, r3, #1
 800699c:	8a7b      	ldrh	r3, [r7, #18]
 800699e:	440b      	add	r3, r1
 80069a0:	4413      	add	r3, r2
 80069a2:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	8abb      	ldrh	r3, [r7, #20]
 80069aa:	4413      	add	r3, r2
 80069ac:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 80069ae:	8a7b      	ldrh	r3, [r7, #18]
 80069b0:	3301      	adds	r3, #1
 80069b2:	827b      	strh	r3, [r7, #18]
 80069b4:	8a7a      	ldrh	r2, [r7, #18]
 80069b6:	893b      	ldrh	r3, [r7, #8]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d3e8      	bcc.n	800698e <TELEMETRY_Process+0x13a>
			}
			if(checksum % 256 == telem->buffer_rx[telem->index_read_rx + bytes_recquired-1])
 80069bc:	8abb      	ldrh	r3, [r7, #20]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	4b16      	ldr	r3, [pc, #88]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80069c4:	6819      	ldr	r1, [r3, #0]
 80069c6:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80069ce:	4618      	mov	r0, r3
 80069d0:	897b      	ldrh	r3, [r7, #10]
 80069d2:	4403      	add	r3, r0
 80069d4:	3b01      	subs	r3, #1
 80069d6:	440b      	add	r3, r1
 80069d8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80069dc:	b29b      	uxth	r3, r3
 80069de:	429a      	cmp	r2, r3
 80069e0:	d10c      	bne.n	80069fc <TELEMETRY_Process+0x1a8>
			{
				DATA_LOGGER_Reception(&telem->buffer_rx[telem->index_read_rx+1]);
 80069e2:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80069ee:	3301      	adds	r3, #1
 80069f0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80069f4:	4413      	add	r3, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fa fe3c 	bl	8001674 <DATA_LOGGER_Reception>
			}
		}
		telem->index_read_rx += bytes_used ;
 80069fc:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f8b3 162a 	ldrh.w	r1, [r3, #1578]	; 0x62a
 8006a04:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <TELEMETRY_Process+0x1c8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	8afa      	ldrh	r2, [r7, #22]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	b292      	uxth	r2, r2
 8006a0e:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
 8006a12:	e000      	b.n	8006a16 <TELEMETRY_Process+0x1c2>
				return ;	//We just wait for then next call with hopefully more data available
 8006a14:	bf00      	nop
	}

}
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20001bdc 	.word	0x20001bdc
 8006a20:	51eb851f 	.word	0x51eb851f
 8006a24:	cccccccd 	.word	0xcccccccd

08006a28 <TELEMETRY_Send_Data>:


void TELEMETRY_Send_Data(uint8_t * data, uint8_t len){
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	; 0x28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
	uint8_t to_send[SIZE_PORTION_BUFFER];
	uint32_t checksum = 0 ;
 8006a34:	2300      	movs	r3, #0
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24


	to_send[0] = '$';
 8006a38:	2324      	movs	r3, #36	; 0x24
 8006a3a:	733b      	strb	r3, [r7, #12]

	for(uint8_t b = 0; b < len; b++){
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a42:	e01d      	b.n	8006a80 <TELEMETRY_Send_Data+0x58>
		to_send[1 + b] = data[b];
 8006a44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	441a      	add	r2, r3
 8006a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a50:	3301      	adds	r3, #1
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006a58:	440b      	add	r3, r1
 8006a5a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		checksum += (uint32_t)to_send[1 + b];
 8006a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a62:	3301      	adds	r3, #1
 8006a64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a68:	4413      	add	r3, r2
 8006a6a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	4413      	add	r3, r2
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint8_t b = 0; b < len; b++){
 8006a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a80:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d3dc      	bcc.n	8006a44 <TELEMETRY_Send_Data+0x1c>
	}

	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006a96:	440b      	add	r3, r1
 8006a98:	f803 2c1c 	strb.w	r2, [r3, #-28]
	TELEMETRY_Send_Data_Raw(to_send, len+2);
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	f107 030c 	add.w	r3, r7, #12
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 f805 	bl	8006ab8 <TELEMETRY_Send_Data_Raw>
}
 8006aae:	bf00      	nop
 8006ab0:	3728      	adds	r7, #40	; 0x28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <TELEMETRY_Send_Data_Raw>:

void TELEMETRY_Send_Data_Raw(uint8_t * data, uint8_t len){
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]

	//Copie du tableau dans le buffer
	for(uint8_t c = 0; c < len; c++)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73fb      	strb	r3, [r7, #15]
 8006ac8:	e017      	b.n	8006afa <TELEMETRY_Send_Data_Raw+0x42>
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	18d1      	adds	r1, r2, r3
 8006ad0:	4b20      	ldr	r3, [pc, #128]	; (8006b54 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	4b1f      	ldr	r3, [pc, #124]	; (8006b54 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8006adc:	4618      	mov	r0, r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4403      	add	r3, r0
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	4403      	add	r3, r0
 8006aec:	7809      	ldrb	r1, [r1, #0]
 8006aee:	4413      	add	r3, r2
 8006af0:	460a      	mov	r2, r1
 8006af2:	715a      	strb	r2, [r3, #5]
	for(uint8_t c = 0; c < len; c++)
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	3301      	adds	r3, #1
 8006af8:	73fb      	strb	r3, [r7, #15]
 8006afa:	7bfa      	ldrb	r2, [r7, #15]
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d3e3      	bcc.n	8006aca <TELEMETRY_Send_Data_Raw+0x12>
	//On enregistre la taille de la donnée
	telem->len_portion_tx[telem->index_write_tx] = len ;
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006b08:	6812      	ldr	r2, [r2, #0]
 8006b0a:	f8b2 2424 	ldrh.w	r2, [r2, #1060]	; 0x424
 8006b0e:	4413      	add	r3, r2
 8006b10:	78fa      	ldrb	r2, [r7, #3]
 8006b12:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed

	//Incrémentation de l'index
	telem->index_write_tx ++ ;
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 8006b1e:	3201      	adds	r2, #1
 8006b20:	b292      	uxth	r2, r2
 8006b22:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 8006b26:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8006b2e:	4a09      	ldr	r2, [pc, #36]	; (8006b54 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006b30:	6812      	ldr	r2, [r2, #0]
 8006b32:	4909      	ldr	r1, [pc, #36]	; (8006b58 <TELEMETRY_Send_Data_Raw+0xa0>)
 8006b34:	fba1 0103 	umull	r0, r1, r1, r3
 8006b38:	0909      	lsrs	r1, r1, #4
 8006b3a:	2032      	movs	r0, #50	; 0x32
 8006b3c:	fb00 f101 	mul.w	r1, r0, r1
 8006b40:	1a5b      	subs	r3, r3, r1
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f8a2 3424 	strh.w	r3, [r2, #1060]	; 0x424
}
 8006b48:	bf00      	nop
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	20001bdc 	.word	0x20001bdc
 8006b58:	51eb851f 	.word	0x51eb851f

08006b5c <TELEMETRY_Idle_Line_Detection>:

void TELEMETRY_Idle_Line_Detection(void){
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
	//On met à jour l'index d'écriture du buffer rx
	telem->index_write_rx = LEN_RX_BUFFER - telem->huart->hdmarx->Instance->NDTR ;
 8006b60:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <TELEMETRY_Idle_Line_Detection+0x2c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <TELEMETRY_Idle_Line_Detection+0x2c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8006b76:	b292      	uxth	r2, r2
 8006b78:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
}
 8006b7c:	bf00      	nop
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	20001bdc 	.word	0x20001bdc

08006b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b90:	4b0e      	ldr	r3, [pc, #56]	; (8006bcc <HAL_Init+0x40>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a0d      	ldr	r2, [pc, #52]	; (8006bcc <HAL_Init+0x40>)
 8006b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <HAL_Init+0x40>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a0a      	ldr	r2, [pc, #40]	; (8006bcc <HAL_Init+0x40>)
 8006ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ba8:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <HAL_Init+0x40>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a07      	ldr	r2, [pc, #28]	; (8006bcc <HAL_Init+0x40>)
 8006bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bb4:	2003      	movs	r0, #3
 8006bb6:	f000 fd41 	bl	800763c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bba:	2000      	movs	r0, #0
 8006bbc:	f000 f808 	bl	8006bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bc0:	f7ff f8a0 	bl	8005d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40023c00 	.word	0x40023c00

08006bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006bd8:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <HAL_InitTick+0x54>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	4b12      	ldr	r3, [pc, #72]	; (8006c28 <HAL_InitTick+0x58>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	4619      	mov	r1, r3
 8006be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fd59 	bl	80076a6 <HAL_SYSTICK_Config>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e00e      	b.n	8006c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b0f      	cmp	r3, #15
 8006c02:	d80a      	bhi.n	8006c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c04:	2200      	movs	r2, #0
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	f000 fd21 	bl	8007652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c10:	4a06      	ldr	r2, [pc, #24]	; (8006c2c <HAL_InitTick+0x5c>)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e000      	b.n	8006c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	2000164c 	.word	0x2000164c
 8006c28:	2000166c 	.word	0x2000166c
 8006c2c:	20001668 	.word	0x20001668

08006c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c30:	b480      	push	{r7}
 8006c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <HAL_IncTick+0x20>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <HAL_IncTick+0x24>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4413      	add	r3, r2
 8006c40:	4a04      	ldr	r2, [pc, #16]	; (8006c54 <HAL_IncTick+0x24>)
 8006c42:	6013      	str	r3, [r2, #0]
}
 8006c44:	bf00      	nop
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	2000166c 	.word	0x2000166c
 8006c54:	20002e1c 	.word	0x20002e1c

08006c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c5c:	4b03      	ldr	r3, [pc, #12]	; (8006c6c <HAL_GetTick+0x14>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	20002e1c 	.word	0x20002e1c

08006c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c78:	f7ff ffee 	bl	8006c58 <HAL_GetTick>
 8006c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c88:	d005      	beq.n	8006c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c8a:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <HAL_Delay+0x40>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c96:	bf00      	nop
 8006c98:	f7ff ffde 	bl	8006c58 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d8f7      	bhi.n	8006c98 <HAL_Delay+0x28>
  {
  }
}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	2000166c 	.word	0x2000166c

08006cb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e033      	b.n	8006d32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fe faae 	bl	8005234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d118      	bne.n	8006d24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006cfa:	f023 0302 	bic.w	r3, r3, #2
 8006cfe:	f043 0202 	orr.w	r2, r3, #2
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa4a 	bl	80071a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	f043 0201 	orr.w	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40
 8006d22:	e001      	b.n	8006d28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d101      	bne.n	8006d5a <HAL_ADC_Start_DMA+0x1e>
 8006d56:	2302      	movs	r3, #2
 8006d58:	e0cc      	b.n	8006ef4 <HAL_ADC_Start_DMA+0x1b8>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d018      	beq.n	8006da2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0201 	orr.w	r2, r2, #1
 8006d7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006d80:	4b5e      	ldr	r3, [pc, #376]	; (8006efc <HAL_ADC_Start_DMA+0x1c0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a5e      	ldr	r2, [pc, #376]	; (8006f00 <HAL_ADC_Start_DMA+0x1c4>)
 8006d86:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8a:	0c9a      	lsrs	r2, r3, #18
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	4413      	add	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006d94:	e002      	b.n	8006d9c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1f9      	bne.n	8006d96 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	f040 80a0 	bne.w	8006ef2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006dba:	f023 0301 	bic.w	r3, r3, #1
 8006dbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d007      	beq.n	8006de4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ddc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df0:	d106      	bne.n	8006e00 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df6:	f023 0206 	bic.w	r2, r3, #6
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	645a      	str	r2, [r3, #68]	; 0x44
 8006dfe:	e002      	b.n	8006e06 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e0e:	4b3d      	ldr	r3, [pc, #244]	; (8006f04 <HAL_ADC_Start_DMA+0x1c8>)
 8006e10:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	4a3c      	ldr	r2, [pc, #240]	; (8006f08 <HAL_ADC_Start_DMA+0x1cc>)
 8006e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	4a3b      	ldr	r2, [pc, #236]	; (8006f0c <HAL_ADC_Start_DMA+0x1d0>)
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	4a3a      	ldr	r2, [pc, #232]	; (8006f10 <HAL_ADC_Start_DMA+0x1d4>)
 8006e28:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006e32:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006e42:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e52:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	334c      	adds	r3, #76	; 0x4c
 8006e5e:	4619      	mov	r1, r3
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f000 fcda 	bl	800781c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d12a      	bne.n	8006eca <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a26      	ldr	r2, [pc, #152]	; (8006f14 <HAL_ADC_Start_DMA+0x1d8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d015      	beq.n	8006eaa <HAL_ADC_Start_DMA+0x16e>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a25      	ldr	r2, [pc, #148]	; (8006f18 <HAL_ADC_Start_DMA+0x1dc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d105      	bne.n	8006e94 <HAL_ADC_Start_DMA+0x158>
 8006e88:	4b1e      	ldr	r3, [pc, #120]	; (8006f04 <HAL_ADC_Start_DMA+0x1c8>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a20      	ldr	r2, [pc, #128]	; (8006f1c <HAL_ADC_Start_DMA+0x1e0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d129      	bne.n	8006ef2 <HAL_ADC_Start_DMA+0x1b6>
 8006e9e:	4b19      	ldr	r3, [pc, #100]	; (8006f04 <HAL_ADC_Start_DMA+0x1c8>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f003 031f 	and.w	r3, r3, #31
 8006ea6:	2b0f      	cmp	r3, #15
 8006ea8:	d823      	bhi.n	8006ef2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d11c      	bne.n	8006ef2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ec6:	609a      	str	r2, [r3, #8]
 8006ec8:	e013      	b.n	8006ef2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a11      	ldr	r2, [pc, #68]	; (8006f14 <HAL_ADC_Start_DMA+0x1d8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d10e      	bne.n	8006ef2 <HAL_ADC_Start_DMA+0x1b6>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d107      	bne.n	8006ef2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ef0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	2000164c 	.word	0x2000164c
 8006f00:	431bde83 	.word	0x431bde83
 8006f04:	40012300 	.word	0x40012300
 8006f08:	08007399 	.word	0x08007399
 8006f0c:	08007453 	.word	0x08007453
 8006f10:	0800746f 	.word	0x0800746f
 8006f14:	40012000 	.word	0x40012000
 8006f18:	40012100 	.word	0x40012100
 8006f1c:	40012200 	.word	0x40012200

08006f20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_ADC_ConfigChannel+0x1c>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e105      	b.n	8007184 <HAL_ADC_ConfigChannel+0x228>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b09      	cmp	r3, #9
 8006f86:	d925      	bls.n	8006fd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68d9      	ldr	r1, [r3, #12]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	4613      	mov	r3, r2
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	4413      	add	r3, r2
 8006f9c:	3b1e      	subs	r3, #30
 8006f9e:	2207      	movs	r2, #7
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	43da      	mvns	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	400a      	ands	r2, r1
 8006fac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68d9      	ldr	r1, [r3, #12]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	4403      	add	r3, r0
 8006fc6:	3b1e      	subs	r3, #30
 8006fc8:	409a      	lsls	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	60da      	str	r2, [r3, #12]
 8006fd2:	e022      	b.n	800701a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6919      	ldr	r1, [r3, #16]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	4413      	add	r3, r2
 8006fe8:	2207      	movs	r2, #7
 8006fea:	fa02 f303 	lsl.w	r3, r2, r3
 8006fee:	43da      	mvns	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	400a      	ands	r2, r1
 8006ff6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6919      	ldr	r1, [r3, #16]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	4618      	mov	r0, r3
 800700a:	4603      	mov	r3, r0
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	4403      	add	r3, r0
 8007010:	409a      	lsls	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2b06      	cmp	r3, #6
 8007020:	d824      	bhi.n	800706c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	3b05      	subs	r3, #5
 8007034:	221f      	movs	r2, #31
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	43da      	mvns	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	400a      	ands	r2, r1
 8007042:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	4618      	mov	r0, r3
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	3b05      	subs	r3, #5
 800705e:	fa00 f203 	lsl.w	r2, r0, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	635a      	str	r2, [r3, #52]	; 0x34
 800706a:	e04c      	b.n	8007106 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b0c      	cmp	r3, #12
 8007072:	d824      	bhi.n	80070be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	3b23      	subs	r3, #35	; 0x23
 8007086:	221f      	movs	r2, #31
 8007088:	fa02 f303 	lsl.w	r3, r2, r3
 800708c:	43da      	mvns	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	400a      	ands	r2, r1
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	4618      	mov	r0, r3
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	3b23      	subs	r3, #35	; 0x23
 80070b0:	fa00 f203 	lsl.w	r2, r0, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
 80070bc:	e023      	b.n	8007106 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	3b41      	subs	r3, #65	; 0x41
 80070d0:	221f      	movs	r2, #31
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	43da      	mvns	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	400a      	ands	r2, r1
 80070de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	4618      	mov	r0, r3
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	3b41      	subs	r3, #65	; 0x41
 80070fa:	fa00 f203 	lsl.w	r2, r0, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007106:	4b22      	ldr	r3, [pc, #136]	; (8007190 <HAL_ADC_ConfigChannel+0x234>)
 8007108:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a21      	ldr	r2, [pc, #132]	; (8007194 <HAL_ADC_ConfigChannel+0x238>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d109      	bne.n	8007128 <HAL_ADC_ConfigChannel+0x1cc>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b12      	cmp	r3, #18
 800711a:	d105      	bne.n	8007128 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a19      	ldr	r2, [pc, #100]	; (8007194 <HAL_ADC_ConfigChannel+0x238>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d123      	bne.n	800717a <HAL_ADC_ConfigChannel+0x21e>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b10      	cmp	r3, #16
 8007138:	d003      	beq.n	8007142 <HAL_ADC_ConfigChannel+0x1e6>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b11      	cmp	r3, #17
 8007140:	d11b      	bne.n	800717a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b10      	cmp	r3, #16
 8007154:	d111      	bne.n	800717a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007156:	4b10      	ldr	r3, [pc, #64]	; (8007198 <HAL_ADC_ConfigChannel+0x23c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a10      	ldr	r2, [pc, #64]	; (800719c <HAL_ADC_ConfigChannel+0x240>)
 800715c:	fba2 2303 	umull	r2, r3, r2, r3
 8007160:	0c9a      	lsrs	r2, r3, #18
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800716c:	e002      	b.n	8007174 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	3b01      	subs	r3, #1
 8007172:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f9      	bne.n	800716e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	40012300 	.word	0x40012300
 8007194:	40012000 	.word	0x40012000
 8007198:	2000164c 	.word	0x2000164c
 800719c:	431bde83 	.word	0x431bde83

080071a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071a8:	4b79      	ldr	r3, [pc, #484]	; (8007390 <ADC_Init+0x1f0>)
 80071aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	431a      	orrs	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6859      	ldr	r1, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	021a      	lsls	r2, r3, #8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80071f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6859      	ldr	r1, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800721a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6899      	ldr	r1, [r3, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	4a58      	ldr	r2, [pc, #352]	; (8007394 <ADC_Init+0x1f4>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d022      	beq.n	800727e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007246:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6899      	ldr	r1, [r3, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6899      	ldr	r1, [r3, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	e00f      	b.n	800729e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800728c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800729c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0202 	bic.w	r2, r2, #2
 80072ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6899      	ldr	r1, [r3, #8]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7e1b      	ldrb	r3, [r3, #24]
 80072b8:	005a      	lsls	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01b      	beq.n	8007304 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80072ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6859      	ldr	r1, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	3b01      	subs	r3, #1
 80072f8:	035a      	lsls	r2, r3, #13
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	605a      	str	r2, [r3, #4]
 8007302:	e007      	b.n	8007314 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007312:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007322:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	3b01      	subs	r3, #1
 8007330:	051a      	lsls	r2, r3, #20
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007348:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6899      	ldr	r1, [r3, #8]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007356:	025a      	lsls	r2, r3, #9
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800736e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6899      	ldr	r1, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	029a      	lsls	r2, r3, #10
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	609a      	str	r2, [r3, #8]
}
 8007384:	bf00      	nop
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	40012300 	.word	0x40012300
 8007394:	0f000001 	.word	0x0f000001

08007398 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d13c      	bne.n	800742c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d12b      	bne.n	8007424 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d127      	bne.n	8007424 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d006      	beq.n	80073f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d119      	bne.n	8007424 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0220 	bic.w	r2, r2, #32
 80073fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007404:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d105      	bne.n	8007424 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	f043 0201 	orr.w	r2, r3, #1
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff fd7b 	bl	8006f20 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800742a:	e00e      	b.n	800744a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fd85 	bl	8006f48 <HAL_ADC_ErrorCallback>
}
 800743e:	e004      	b.n	800744a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
}
 800744a:	bf00      	nop
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7ff fd67 	bl	8006f34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2240      	movs	r2, #64	; 0x40
 8007480:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007486:	f043 0204 	orr.w	r2, r3, #4
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fd5a 	bl	8006f48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074ac:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <__NVIC_SetPriorityGrouping+0x44>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80074b8:	4013      	ands	r3, r2
 80074ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80074c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074ce:	4a04      	ldr	r2, [pc, #16]	; (80074e0 <__NVIC_SetPriorityGrouping+0x44>)
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	60d3      	str	r3, [r2, #12]
}
 80074d4:	bf00      	nop
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	e000ed00 	.word	0xe000ed00

080074e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074e8:	4b04      	ldr	r3, [pc, #16]	; (80074fc <__NVIC_GetPriorityGrouping+0x18>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	0a1b      	lsrs	r3, r3, #8
 80074ee:	f003 0307 	and.w	r3, r3, #7
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	e000ed00 	.word	0xe000ed00

08007500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800750a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800750e:	2b00      	cmp	r3, #0
 8007510:	db0b      	blt.n	800752a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	f003 021f 	and.w	r2, r3, #31
 8007518:	4907      	ldr	r1, [pc, #28]	; (8007538 <__NVIC_EnableIRQ+0x38>)
 800751a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	2001      	movs	r0, #1
 8007522:	fa00 f202 	lsl.w	r2, r0, r2
 8007526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	e000e100 	.word	0xe000e100

0800753c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800754c:	2b00      	cmp	r3, #0
 800754e:	db0a      	blt.n	8007566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	b2da      	uxtb	r2, r3
 8007554:	490c      	ldr	r1, [pc, #48]	; (8007588 <__NVIC_SetPriority+0x4c>)
 8007556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800755a:	0112      	lsls	r2, r2, #4
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	440b      	add	r3, r1
 8007560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007564:	e00a      	b.n	800757c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	b2da      	uxtb	r2, r3
 800756a:	4908      	ldr	r1, [pc, #32]	; (800758c <__NVIC_SetPriority+0x50>)
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	3b04      	subs	r3, #4
 8007574:	0112      	lsls	r2, r2, #4
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	440b      	add	r3, r1
 800757a:	761a      	strb	r2, [r3, #24]
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	e000e100 	.word	0xe000e100
 800758c:	e000ed00 	.word	0xe000ed00

08007590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007590:	b480      	push	{r7}
 8007592:	b089      	sub	sp, #36	; 0x24
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f003 0307 	and.w	r3, r3, #7
 80075a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f1c3 0307 	rsb	r3, r3, #7
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	bf28      	it	cs
 80075ae:	2304      	movcs	r3, #4
 80075b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	3304      	adds	r3, #4
 80075b6:	2b06      	cmp	r3, #6
 80075b8:	d902      	bls.n	80075c0 <NVIC_EncodePriority+0x30>
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	3b03      	subs	r3, #3
 80075be:	e000      	b.n	80075c2 <NVIC_EncodePriority+0x32>
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075c4:	f04f 32ff 	mov.w	r2, #4294967295
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	fa02 f303 	lsl.w	r3, r2, r3
 80075ce:	43da      	mvns	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	401a      	ands	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075d8:	f04f 31ff 	mov.w	r1, #4294967295
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	fa01 f303 	lsl.w	r3, r1, r3
 80075e2:	43d9      	mvns	r1, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075e8:	4313      	orrs	r3, r2
         );
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3724      	adds	r7, #36	; 0x24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3b01      	subs	r3, #1
 8007604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007608:	d301      	bcc.n	800760e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800760a:	2301      	movs	r3, #1
 800760c:	e00f      	b.n	800762e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800760e:	4a0a      	ldr	r2, [pc, #40]	; (8007638 <SysTick_Config+0x40>)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3b01      	subs	r3, #1
 8007614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007616:	210f      	movs	r1, #15
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	f7ff ff8e 	bl	800753c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007620:	4b05      	ldr	r3, [pc, #20]	; (8007638 <SysTick_Config+0x40>)
 8007622:	2200      	movs	r2, #0
 8007624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007626:	4b04      	ldr	r3, [pc, #16]	; (8007638 <SysTick_Config+0x40>)
 8007628:	2207      	movs	r2, #7
 800762a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	e000e010 	.word	0xe000e010

0800763c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff ff29 	bl	800749c <__NVIC_SetPriorityGrouping>
}
 800764a:	bf00      	nop
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007652:	b580      	push	{r7, lr}
 8007654:	b086      	sub	sp, #24
 8007656:	af00      	add	r7, sp, #0
 8007658:	4603      	mov	r3, r0
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007660:	2300      	movs	r3, #0
 8007662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007664:	f7ff ff3e 	bl	80074e4 <__NVIC_GetPriorityGrouping>
 8007668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	68b9      	ldr	r1, [r7, #8]
 800766e:	6978      	ldr	r0, [r7, #20]
 8007670:	f7ff ff8e 	bl	8007590 <NVIC_EncodePriority>
 8007674:	4602      	mov	r2, r0
 8007676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800767a:	4611      	mov	r1, r2
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff ff5d 	bl	800753c <__NVIC_SetPriority>
}
 8007682:	bf00      	nop
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	4603      	mov	r3, r0
 8007692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff ff31 	bl	8007500 <__NVIC_EnableIRQ>
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff ffa2 	bl	80075f8 <SysTick_Config>
 80076b4:	4603      	mov	r3, r0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80076cc:	f7ff fac4 	bl	8006c58 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e099      	b.n	8007810 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0201 	bic.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076fc:	e00f      	b.n	800771e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076fe:	f7ff faab 	bl	8006c58 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b05      	cmp	r3, #5
 800770a:	d908      	bls.n	800771e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2203      	movs	r2, #3
 8007716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e078      	b.n	8007810 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e8      	bne.n	80076fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	4b38      	ldr	r3, [pc, #224]	; (8007818 <HAL_DMA_Init+0x158>)
 8007738:	4013      	ands	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800774a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	2b04      	cmp	r3, #4
 8007776:	d107      	bne.n	8007788 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	4313      	orrs	r3, r2
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f023 0307 	bic.w	r3, r3, #7
 800779e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d117      	bne.n	80077e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00e      	beq.n	80077e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fa91 	bl	8007cec <DMA_CheckFifoParam>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d008      	beq.n	80077e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2240      	movs	r2, #64	; 0x40
 80077d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80077de:	2301      	movs	r3, #1
 80077e0:	e016      	b.n	8007810 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa48 	bl	8007c80 <DMA_CalcBaseAndBitshift>
 80077f0:	4603      	mov	r3, r0
 80077f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f8:	223f      	movs	r2, #63	; 0x3f
 80077fa:	409a      	lsls	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3718      	adds	r7, #24
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	f010803f 	.word	0xf010803f

0800781c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007832:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_DMA_Start_IT+0x26>
 800783e:	2302      	movs	r3, #2
 8007840:	e040      	b.n	80078c4 <HAL_DMA_Start_IT+0xa8>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b01      	cmp	r3, #1
 8007854:	d12f      	bne.n	80078b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2202      	movs	r2, #2
 800785a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f9da 	bl	8007c24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007874:	223f      	movs	r2, #63	; 0x3f
 8007876:	409a      	lsls	r2, r3
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0216 	orr.w	r2, r2, #22
 800788a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	2b00      	cmp	r3, #0
 8007892:	d007      	beq.n	80078a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0208 	orr.w	r2, r2, #8
 80078a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0201 	orr.w	r2, r2, #1
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e005      	b.n	80078c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80078be:	2302      	movs	r3, #2
 80078c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d004      	beq.n	80078ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2280      	movs	r2, #128	; 0x80
 80078e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e00c      	b.n	8007904 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2205      	movs	r2, #5
 80078ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0201 	bic.w	r2, r2, #1
 8007900:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800791c:	4b92      	ldr	r3, [pc, #584]	; (8007b68 <HAL_DMA_IRQHandler+0x258>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a92      	ldr	r2, [pc, #584]	; (8007b6c <HAL_DMA_IRQHandler+0x25c>)
 8007922:	fba2 2303 	umull	r2, r3, r2, r3
 8007926:	0a9b      	lsrs	r3, r3, #10
 8007928:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800793a:	2208      	movs	r2, #8
 800793c:	409a      	lsls	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4013      	ands	r3, r2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01a      	beq.n	800797c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	2b00      	cmp	r3, #0
 8007952:	d013      	beq.n	800797c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0204 	bic.w	r2, r2, #4
 8007962:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007968:	2208      	movs	r2, #8
 800796a:	409a      	lsls	r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007974:	f043 0201 	orr.w	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007980:	2201      	movs	r2, #1
 8007982:	409a      	lsls	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4013      	ands	r3, r2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d012      	beq.n	80079b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00b      	beq.n	80079b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800799e:	2201      	movs	r2, #1
 80079a0:	409a      	lsls	r2, r3
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079aa:	f043 0202 	orr.w	r2, r3, #2
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b6:	2204      	movs	r2, #4
 80079b8:	409a      	lsls	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4013      	ands	r3, r2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d012      	beq.n	80079e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d4:	2204      	movs	r2, #4
 80079d6:	409a      	lsls	r2, r3
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e0:	f043 0204 	orr.w	r2, r3, #4
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ec:	2210      	movs	r2, #16
 80079ee:	409a      	lsls	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4013      	ands	r3, r2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d043      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0308 	and.w	r3, r3, #8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d03c      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0a:	2210      	movs	r2, #16
 8007a0c:	409a      	lsls	r2, r3
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d018      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d108      	bne.n	8007a40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d024      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
 8007a3e:	e01f      	b.n	8007a80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01b      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	4798      	blx	r3
 8007a50:	e016      	b.n	8007a80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d107      	bne.n	8007a70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0208 	bic.w	r2, r2, #8
 8007a6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a84:	2220      	movs	r2, #32
 8007a86:	409a      	lsls	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 808e 	beq.w	8007bae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0310 	and.w	r3, r3, #16
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8086 	beq.w	8007bae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	409a      	lsls	r2, r3
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d136      	bne.n	8007b28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0216 	bic.w	r2, r2, #22
 8007ac8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	695a      	ldr	r2, [r3, #20]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ad8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d103      	bne.n	8007aea <HAL_DMA_IRQHandler+0x1da>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d007      	beq.n	8007afa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0208 	bic.w	r2, r2, #8
 8007af8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007afe:	223f      	movs	r2, #63	; 0x3f
 8007b00:	409a      	lsls	r2, r3
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d07d      	beq.n	8007c1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
        }
        return;
 8007b26:	e078      	b.n	8007c1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01c      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d108      	bne.n	8007b56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d030      	beq.n	8007bae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
 8007b54:	e02b      	b.n	8007bae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d027      	beq.n	8007bae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
 8007b66:	e022      	b.n	8007bae <HAL_DMA_IRQHandler+0x29e>
 8007b68:	2000164c 	.word	0x2000164c
 8007b6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10f      	bne.n	8007b9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0210 	bic.w	r2, r2, #16
 8007b8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d032      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d022      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2205      	movs	r2, #5
 8007bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0201 	bic.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	60bb      	str	r3, [r7, #8]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d307      	bcc.n	8007bf6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1f2      	bne.n	8007bda <HAL_DMA_IRQHandler+0x2ca>
 8007bf4:	e000      	b.n	8007bf8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007bf6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d005      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
 8007c18:	e000      	b.n	8007c1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8007c1a:	bf00      	nop
    }
  }
}
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop

08007c24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	2b40      	cmp	r3, #64	; 0x40
 8007c50:	d108      	bne.n	8007c64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007c62:	e007      	b.n	8007c74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	60da      	str	r2, [r3, #12]
}
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	3b10      	subs	r3, #16
 8007c90:	4a14      	ldr	r2, [pc, #80]	; (8007ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8007c92:	fba2 2303 	umull	r2, r3, r2, r3
 8007c96:	091b      	lsrs	r3, r3, #4
 8007c98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007c9a:	4a13      	ldr	r2, [pc, #76]	; (8007ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d909      	bls.n	8007cc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007cb6:	f023 0303 	bic.w	r3, r3, #3
 8007cba:	1d1a      	adds	r2, r3, #4
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8007cc0:	e007      	b.n	8007cd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007cca:	f023 0303 	bic.w	r3, r3, #3
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	aaaaaaab 	.word	0xaaaaaaab
 8007ce8:	0800f920 	.word	0x0800f920

08007cec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d11f      	bne.n	8007d46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d855      	bhi.n	8007db8 <DMA_CheckFifoParam+0xcc>
 8007d0c:	a201      	add	r2, pc, #4	; (adr r2, 8007d14 <DMA_CheckFifoParam+0x28>)
 8007d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d12:	bf00      	nop
 8007d14:	08007d25 	.word	0x08007d25
 8007d18:	08007d37 	.word	0x08007d37
 8007d1c:	08007d25 	.word	0x08007d25
 8007d20:	08007db9 	.word	0x08007db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d045      	beq.n	8007dbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d34:	e042      	b.n	8007dbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d3e:	d13f      	bne.n	8007dc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d44:	e03c      	b.n	8007dc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d4e:	d121      	bne.n	8007d94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d836      	bhi.n	8007dc4 <DMA_CheckFifoParam+0xd8>
 8007d56:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <DMA_CheckFifoParam+0x70>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007d6d 	.word	0x08007d6d
 8007d60:	08007d73 	.word	0x08007d73
 8007d64:	08007d6d 	.word	0x08007d6d
 8007d68:	08007d85 	.word	0x08007d85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d70:	e02f      	b.n	8007dd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d024      	beq.n	8007dc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d82:	e021      	b.n	8007dc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d8c:	d11e      	bne.n	8007dcc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007d92:	e01b      	b.n	8007dcc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d902      	bls.n	8007da0 <DMA_CheckFifoParam+0xb4>
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d003      	beq.n	8007da6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007d9e:	e018      	b.n	8007dd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	73fb      	strb	r3, [r7, #15]
      break;
 8007da4:	e015      	b.n	8007dd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00e      	beq.n	8007dd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	73fb      	strb	r3, [r7, #15]
      break;
 8007db6:	e00b      	b.n	8007dd0 <DMA_CheckFifoParam+0xe4>
      break;
 8007db8:	bf00      	nop
 8007dba:	e00a      	b.n	8007dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8007dbc:	bf00      	nop
 8007dbe:	e008      	b.n	8007dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8007dc0:	bf00      	nop
 8007dc2:	e006      	b.n	8007dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8007dc4:	bf00      	nop
 8007dc6:	e004      	b.n	8007dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8007dc8:	bf00      	nop
 8007dca:	e002      	b.n	8007dd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8007dcc:	bf00      	nop
 8007dce:	e000      	b.n	8007dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8007dd0:	bf00      	nop
    }
  } 
  
  return status; 
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b089      	sub	sp, #36	; 0x24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007df6:	2300      	movs	r3, #0
 8007df8:	61fb      	str	r3, [r7, #28]
 8007dfa:	e16b      	b.n	80080d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	fa02 f303 	lsl.w	r3, r2, r3
 8007e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	f040 815a 	bne.w	80080ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d00b      	beq.n	8007e3a <HAL_GPIO_Init+0x5a>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d007      	beq.n	8007e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e2e:	2b11      	cmp	r3, #17
 8007e30:	d003      	beq.n	8007e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	2b12      	cmp	r3, #18
 8007e38:	d130      	bne.n	8007e9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	2203      	movs	r2, #3
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e70:	2201      	movs	r2, #1
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	091b      	lsrs	r3, r3, #4
 8007e86:	f003 0201 	and.w	r2, r3, #1
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eac:	43db      	mvns	r3, r3
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d003      	beq.n	8007edc <HAL_GPIO_Init+0xfc>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2b12      	cmp	r3, #18
 8007eda:	d123      	bne.n	8007f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	08da      	lsrs	r2, r3, #3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3208      	adds	r2, #8
 8007ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	220f      	movs	r2, #15
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	4013      	ands	r3, r2
 8007efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	08da      	lsrs	r2, r3, #3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3208      	adds	r2, #8
 8007f1e:	69b9      	ldr	r1, [r7, #24]
 8007f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	2203      	movs	r2, #3
 8007f30:	fa02 f303 	lsl.w	r3, r2, r3
 8007f34:	43db      	mvns	r3, r3
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f003 0203 	and.w	r2, r3, #3
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 80b4 	beq.w	80080ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	4b5f      	ldr	r3, [pc, #380]	; (80080e8 <HAL_GPIO_Init+0x308>)
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6e:	4a5e      	ldr	r2, [pc, #376]	; (80080e8 <HAL_GPIO_Init+0x308>)
 8007f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f74:	6453      	str	r3, [r2, #68]	; 0x44
 8007f76:	4b5c      	ldr	r3, [pc, #368]	; (80080e8 <HAL_GPIO_Init+0x308>)
 8007f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f82:	4a5a      	ldr	r2, [pc, #360]	; (80080ec <HAL_GPIO_Init+0x30c>)
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	089b      	lsrs	r3, r3, #2
 8007f88:	3302      	adds	r3, #2
 8007f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	220f      	movs	r2, #15
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	43db      	mvns	r3, r3
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a51      	ldr	r2, [pc, #324]	; (80080f0 <HAL_GPIO_Init+0x310>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d02b      	beq.n	8008006 <HAL_GPIO_Init+0x226>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a50      	ldr	r2, [pc, #320]	; (80080f4 <HAL_GPIO_Init+0x314>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d025      	beq.n	8008002 <HAL_GPIO_Init+0x222>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a4f      	ldr	r2, [pc, #316]	; (80080f8 <HAL_GPIO_Init+0x318>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d01f      	beq.n	8007ffe <HAL_GPIO_Init+0x21e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a4e      	ldr	r2, [pc, #312]	; (80080fc <HAL_GPIO_Init+0x31c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d019      	beq.n	8007ffa <HAL_GPIO_Init+0x21a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a4d      	ldr	r2, [pc, #308]	; (8008100 <HAL_GPIO_Init+0x320>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <HAL_GPIO_Init+0x216>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a4c      	ldr	r2, [pc, #304]	; (8008104 <HAL_GPIO_Init+0x324>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00d      	beq.n	8007ff2 <HAL_GPIO_Init+0x212>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a4b      	ldr	r2, [pc, #300]	; (8008108 <HAL_GPIO_Init+0x328>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d007      	beq.n	8007fee <HAL_GPIO_Init+0x20e>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a4a      	ldr	r2, [pc, #296]	; (800810c <HAL_GPIO_Init+0x32c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d101      	bne.n	8007fea <HAL_GPIO_Init+0x20a>
 8007fe6:	2307      	movs	r3, #7
 8007fe8:	e00e      	b.n	8008008 <HAL_GPIO_Init+0x228>
 8007fea:	2308      	movs	r3, #8
 8007fec:	e00c      	b.n	8008008 <HAL_GPIO_Init+0x228>
 8007fee:	2306      	movs	r3, #6
 8007ff0:	e00a      	b.n	8008008 <HAL_GPIO_Init+0x228>
 8007ff2:	2305      	movs	r3, #5
 8007ff4:	e008      	b.n	8008008 <HAL_GPIO_Init+0x228>
 8007ff6:	2304      	movs	r3, #4
 8007ff8:	e006      	b.n	8008008 <HAL_GPIO_Init+0x228>
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e004      	b.n	8008008 <HAL_GPIO_Init+0x228>
 8007ffe:	2302      	movs	r3, #2
 8008000:	e002      	b.n	8008008 <HAL_GPIO_Init+0x228>
 8008002:	2301      	movs	r3, #1
 8008004:	e000      	b.n	8008008 <HAL_GPIO_Init+0x228>
 8008006:	2300      	movs	r3, #0
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	f002 0203 	and.w	r2, r2, #3
 800800e:	0092      	lsls	r2, r2, #2
 8008010:	4093      	lsls	r3, r2
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	4313      	orrs	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008018:	4934      	ldr	r1, [pc, #208]	; (80080ec <HAL_GPIO_Init+0x30c>)
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	089b      	lsrs	r3, r3, #2
 800801e:	3302      	adds	r3, #2
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008026:	4b3a      	ldr	r3, [pc, #232]	; (8008110 <HAL_GPIO_Init+0x330>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	43db      	mvns	r3, r3
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	4013      	ands	r3, r2
 8008034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4313      	orrs	r3, r2
 8008048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800804a:	4a31      	ldr	r2, [pc, #196]	; (8008110 <HAL_GPIO_Init+0x330>)
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008050:	4b2f      	ldr	r3, [pc, #188]	; (8008110 <HAL_GPIO_Init+0x330>)
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	43db      	mvns	r3, r3
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	4013      	ands	r3, r2
 800805e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008074:	4a26      	ldr	r2, [pc, #152]	; (8008110 <HAL_GPIO_Init+0x330>)
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800807a:	4b25      	ldr	r3, [pc, #148]	; (8008110 <HAL_GPIO_Init+0x330>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	43db      	mvns	r3, r3
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	4013      	ands	r3, r2
 8008088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800809e:	4a1c      	ldr	r2, [pc, #112]	; (8008110 <HAL_GPIO_Init+0x330>)
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80080a4:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <HAL_GPIO_Init+0x330>)
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	43db      	mvns	r3, r3
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	4013      	ands	r3, r2
 80080b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080c8:	4a11      	ldr	r2, [pc, #68]	; (8008110 <HAL_GPIO_Init+0x330>)
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	3301      	adds	r3, #1
 80080d2:	61fb      	str	r3, [r7, #28]
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	2b0f      	cmp	r3, #15
 80080d8:	f67f ae90 	bls.w	8007dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80080dc:	bf00      	nop
 80080de:	3724      	adds	r7, #36	; 0x24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	40023800 	.word	0x40023800
 80080ec:	40013800 	.word	0x40013800
 80080f0:	40020000 	.word	0x40020000
 80080f4:	40020400 	.word	0x40020400
 80080f8:	40020800 	.word	0x40020800
 80080fc:	40020c00 	.word	0x40020c00
 8008100:	40021000 	.word	0x40021000
 8008104:	40021400 	.word	0x40021400
 8008108:	40021800 	.word	0x40021800
 800810c:	40021c00 	.word	0x40021c00
 8008110:	40013c00 	.word	0x40013c00

08008114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	807b      	strh	r3, [r7, #2]
 8008120:	4613      	mov	r3, r2
 8008122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008124:	787b      	ldrb	r3, [r7, #1]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800812a:	887a      	ldrh	r2, [r7, #2]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008130:	e003      	b.n	800813a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008132:	887b      	ldrh	r3, [r7, #2]
 8008134:	041a      	lsls	r2, r3, #16
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	619a      	str	r2, [r3, #24]
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
	...

08008148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e11f      	b.n	800839a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fd fa46 	bl	8005600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2224      	movs	r2, #36	; 0x24
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0201 	bic.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800819a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80081ac:	f000 fd18 	bl	8008be0 <HAL_RCC_GetPCLK1Freq>
 80081b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	4a7b      	ldr	r2, [pc, #492]	; (80083a4 <HAL_I2C_Init+0x25c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d807      	bhi.n	80081cc <HAL_I2C_Init+0x84>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4a7a      	ldr	r2, [pc, #488]	; (80083a8 <HAL_I2C_Init+0x260>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	bf94      	ite	ls
 80081c4:	2301      	movls	r3, #1
 80081c6:	2300      	movhi	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	e006      	b.n	80081da <HAL_I2C_Init+0x92>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4a77      	ldr	r2, [pc, #476]	; (80083ac <HAL_I2C_Init+0x264>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	bf94      	ite	ls
 80081d4:	2301      	movls	r3, #1
 80081d6:	2300      	movhi	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e0db      	b.n	800839a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4a72      	ldr	r2, [pc, #456]	; (80083b0 <HAL_I2C_Init+0x268>)
 80081e6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ea:	0c9b      	lsrs	r3, r3, #18
 80081ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	430a      	orrs	r2, r1
 8008200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	4a64      	ldr	r2, [pc, #400]	; (80083a4 <HAL_I2C_Init+0x25c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d802      	bhi.n	800821c <HAL_I2C_Init+0xd4>
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	3301      	adds	r3, #1
 800821a:	e009      	b.n	8008230 <HAL_I2C_Init+0xe8>
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008222:	fb02 f303 	mul.w	r3, r2, r3
 8008226:	4a63      	ldr	r2, [pc, #396]	; (80083b4 <HAL_I2C_Init+0x26c>)
 8008228:	fba2 2303 	umull	r2, r3, r2, r3
 800822c:	099b      	lsrs	r3, r3, #6
 800822e:	3301      	adds	r3, #1
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	430b      	orrs	r3, r1
 8008236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008242:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	4956      	ldr	r1, [pc, #344]	; (80083a4 <HAL_I2C_Init+0x25c>)
 800824c:	428b      	cmp	r3, r1
 800824e:	d80d      	bhi.n	800826c <HAL_I2C_Init+0x124>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	1e59      	subs	r1, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	fbb1 f3f3 	udiv	r3, r1, r3
 800825e:	3301      	adds	r3, #1
 8008260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008264:	2b04      	cmp	r3, #4
 8008266:	bf38      	it	cc
 8008268:	2304      	movcc	r3, #4
 800826a:	e04f      	b.n	800830c <HAL_I2C_Init+0x1c4>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d111      	bne.n	8008298 <HAL_I2C_Init+0x150>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	1e58      	subs	r0, r3, #1
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6859      	ldr	r1, [r3, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	440b      	add	r3, r1
 8008282:	fbb0 f3f3 	udiv	r3, r0, r3
 8008286:	3301      	adds	r3, #1
 8008288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800828c:	2b00      	cmp	r3, #0
 800828e:	bf0c      	ite	eq
 8008290:	2301      	moveq	r3, #1
 8008292:	2300      	movne	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	e012      	b.n	80082be <HAL_I2C_Init+0x176>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	1e58      	subs	r0, r3, #1
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6859      	ldr	r1, [r3, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	440b      	add	r3, r1
 80082a6:	0099      	lsls	r1, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80082ae:	3301      	adds	r3, #1
 80082b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bf0c      	ite	eq
 80082b8:	2301      	moveq	r3, #1
 80082ba:	2300      	movne	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <HAL_I2C_Init+0x17e>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e022      	b.n	800830c <HAL_I2C_Init+0x1c4>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10e      	bne.n	80082ec <HAL_I2C_Init+0x1a4>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	1e58      	subs	r0, r3, #1
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6859      	ldr	r1, [r3, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	440b      	add	r3, r1
 80082dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80082e0:	3301      	adds	r3, #1
 80082e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ea:	e00f      	b.n	800830c <HAL_I2C_Init+0x1c4>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	1e58      	subs	r0, r3, #1
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6859      	ldr	r1, [r3, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	0099      	lsls	r1, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008302:	3301      	adds	r3, #1
 8008304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	6809      	ldr	r1, [r1, #0]
 8008310:	4313      	orrs	r3, r2
 8008312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69da      	ldr	r2, [r3, #28]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800833a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6911      	ldr	r1, [r2, #16]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	68d2      	ldr	r2, [r2, #12]
 8008346:	4311      	orrs	r1, r2
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6812      	ldr	r2, [r2, #0]
 800834c:	430b      	orrs	r3, r1
 800834e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	695a      	ldr	r2, [r3, #20]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	431a      	orrs	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	430a      	orrs	r2, r1
 800836a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	000186a0 	.word	0x000186a0
 80083a8:	001e847f 	.word	0x001e847f
 80083ac:	003d08ff 	.word	0x003d08ff
 80083b0:	431bde83 	.word	0x431bde83
 80083b4:	10624dd3 	.word	0x10624dd3

080083b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e25b      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d075      	beq.n	80084c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083d6:	4ba3      	ldr	r3, [pc, #652]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f003 030c 	and.w	r3, r3, #12
 80083de:	2b04      	cmp	r3, #4
 80083e0:	d00c      	beq.n	80083fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083e2:	4ba0      	ldr	r3, [pc, #640]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083ea:	2b08      	cmp	r3, #8
 80083ec:	d112      	bne.n	8008414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083ee:	4b9d      	ldr	r3, [pc, #628]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083fa:	d10b      	bne.n	8008414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083fc:	4b99      	ldr	r3, [pc, #612]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d05b      	beq.n	80084c0 <HAL_RCC_OscConfig+0x108>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d157      	bne.n	80084c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e236      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800841c:	d106      	bne.n	800842c <HAL_RCC_OscConfig+0x74>
 800841e:	4b91      	ldr	r3, [pc, #580]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a90      	ldr	r2, [pc, #576]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	e01d      	b.n	8008468 <HAL_RCC_OscConfig+0xb0>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008434:	d10c      	bne.n	8008450 <HAL_RCC_OscConfig+0x98>
 8008436:	4b8b      	ldr	r3, [pc, #556]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a8a      	ldr	r2, [pc, #552]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 800843c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	4b88      	ldr	r3, [pc, #544]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a87      	ldr	r2, [pc, #540]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	e00b      	b.n	8008468 <HAL_RCC_OscConfig+0xb0>
 8008450:	4b84      	ldr	r3, [pc, #528]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a83      	ldr	r2, [pc, #524]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	4b81      	ldr	r3, [pc, #516]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a80      	ldr	r2, [pc, #512]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d013      	beq.n	8008498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008470:	f7fe fbf2 	bl	8006c58 <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008478:	f7fe fbee 	bl	8006c58 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b64      	cmp	r3, #100	; 0x64
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e1fb      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800848a:	4b76      	ldr	r3, [pc, #472]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0f0      	beq.n	8008478 <HAL_RCC_OscConfig+0xc0>
 8008496:	e014      	b.n	80084c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008498:	f7fe fbde 	bl	8006c58 <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084a0:	f7fe fbda 	bl	8006c58 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b64      	cmp	r3, #100	; 0x64
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e1e7      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084b2:	4b6c      	ldr	r3, [pc, #432]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f0      	bne.n	80084a0 <HAL_RCC_OscConfig+0xe8>
 80084be:	e000      	b.n	80084c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d063      	beq.n	8008596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084ce:	4b65      	ldr	r3, [pc, #404]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 030c 	and.w	r3, r3, #12
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00b      	beq.n	80084f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084da:	4b62      	ldr	r3, [pc, #392]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084e2:	2b08      	cmp	r3, #8
 80084e4:	d11c      	bne.n	8008520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084e6:	4b5f      	ldr	r3, [pc, #380]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d116      	bne.n	8008520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084f2:	4b5c      	ldr	r3, [pc, #368]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <HAL_RCC_OscConfig+0x152>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d001      	beq.n	800850a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e1bb      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800850a:	4b56      	ldr	r3, [pc, #344]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	4952      	ldr	r1, [pc, #328]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 800851a:	4313      	orrs	r3, r2
 800851c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800851e:	e03a      	b.n	8008596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d020      	beq.n	800856a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008528:	4b4f      	ldr	r3, [pc, #316]	; (8008668 <HAL_RCC_OscConfig+0x2b0>)
 800852a:	2201      	movs	r2, #1
 800852c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800852e:	f7fe fb93 	bl	8006c58 <HAL_GetTick>
 8008532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008534:	e008      	b.n	8008548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008536:	f7fe fb8f 	bl	8006c58 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d901      	bls.n	8008548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e19c      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008548:	4b46      	ldr	r3, [pc, #280]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0f0      	beq.n	8008536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008554:	4b43      	ldr	r3, [pc, #268]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	4940      	ldr	r1, [pc, #256]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008564:	4313      	orrs	r3, r2
 8008566:	600b      	str	r3, [r1, #0]
 8008568:	e015      	b.n	8008596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800856a:	4b3f      	ldr	r3, [pc, #252]	; (8008668 <HAL_RCC_OscConfig+0x2b0>)
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008570:	f7fe fb72 	bl	8006c58 <HAL_GetTick>
 8008574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008576:	e008      	b.n	800858a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008578:	f7fe fb6e 	bl	8006c58 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	2b02      	cmp	r3, #2
 8008584:	d901      	bls.n	800858a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e17b      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800858a:	4b36      	ldr	r3, [pc, #216]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1f0      	bne.n	8008578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0308 	and.w	r3, r3, #8
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d030      	beq.n	8008604 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d016      	beq.n	80085d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085aa:	4b30      	ldr	r3, [pc, #192]	; (800866c <HAL_RCC_OscConfig+0x2b4>)
 80085ac:	2201      	movs	r2, #1
 80085ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085b0:	f7fe fb52 	bl	8006c58 <HAL_GetTick>
 80085b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085b8:	f7fe fb4e 	bl	8006c58 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e15b      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085ca:	4b26      	ldr	r3, [pc, #152]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80085cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0f0      	beq.n	80085b8 <HAL_RCC_OscConfig+0x200>
 80085d6:	e015      	b.n	8008604 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085d8:	4b24      	ldr	r3, [pc, #144]	; (800866c <HAL_RCC_OscConfig+0x2b4>)
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085de:	f7fe fb3b 	bl	8006c58 <HAL_GetTick>
 80085e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085e4:	e008      	b.n	80085f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085e6:	f7fe fb37 	bl	8006c58 <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d901      	bls.n	80085f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e144      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085f8:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 80085fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1f0      	bne.n	80085e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80a0 	beq.w	8008752 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10f      	bne.n	8008642 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008622:	2300      	movs	r3, #0
 8008624:	60bb      	str	r3, [r7, #8]
 8008626:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	4a0e      	ldr	r2, [pc, #56]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 800862c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008630:	6413      	str	r3, [r2, #64]	; 0x40
 8008632:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <HAL_RCC_OscConfig+0x2ac>)
 8008634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800863a:	60bb      	str	r3, [r7, #8]
 800863c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800863e:	2301      	movs	r3, #1
 8008640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008642:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <HAL_RCC_OscConfig+0x2b8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864a:	2b00      	cmp	r3, #0
 800864c:	d121      	bne.n	8008692 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800864e:	4b08      	ldr	r3, [pc, #32]	; (8008670 <HAL_RCC_OscConfig+0x2b8>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a07      	ldr	r2, [pc, #28]	; (8008670 <HAL_RCC_OscConfig+0x2b8>)
 8008654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800865a:	f7fe fafd 	bl	8006c58 <HAL_GetTick>
 800865e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008660:	e011      	b.n	8008686 <HAL_RCC_OscConfig+0x2ce>
 8008662:	bf00      	nop
 8008664:	40023800 	.word	0x40023800
 8008668:	42470000 	.word	0x42470000
 800866c:	42470e80 	.word	0x42470e80
 8008670:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008674:	f7fe faf0 	bl	8006c58 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e0fd      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008686:	4b81      	ldr	r3, [pc, #516]	; (800888c <HAL_RCC_OscConfig+0x4d4>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0f0      	beq.n	8008674 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d106      	bne.n	80086a8 <HAL_RCC_OscConfig+0x2f0>
 800869a:	4b7d      	ldr	r3, [pc, #500]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 800869c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869e:	4a7c      	ldr	r2, [pc, #496]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80086a0:	f043 0301 	orr.w	r3, r3, #1
 80086a4:	6713      	str	r3, [r2, #112]	; 0x70
 80086a6:	e01c      	b.n	80086e2 <HAL_RCC_OscConfig+0x32a>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	2b05      	cmp	r3, #5
 80086ae:	d10c      	bne.n	80086ca <HAL_RCC_OscConfig+0x312>
 80086b0:	4b77      	ldr	r3, [pc, #476]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80086b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b4:	4a76      	ldr	r2, [pc, #472]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80086b6:	f043 0304 	orr.w	r3, r3, #4
 80086ba:	6713      	str	r3, [r2, #112]	; 0x70
 80086bc:	4b74      	ldr	r3, [pc, #464]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80086be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c0:	4a73      	ldr	r2, [pc, #460]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	6713      	str	r3, [r2, #112]	; 0x70
 80086c8:	e00b      	b.n	80086e2 <HAL_RCC_OscConfig+0x32a>
 80086ca:	4b71      	ldr	r3, [pc, #452]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80086cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ce:	4a70      	ldr	r2, [pc, #448]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80086d0:	f023 0301 	bic.w	r3, r3, #1
 80086d4:	6713      	str	r3, [r2, #112]	; 0x70
 80086d6:	4b6e      	ldr	r3, [pc, #440]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086da:	4a6d      	ldr	r2, [pc, #436]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80086dc:	f023 0304 	bic.w	r3, r3, #4
 80086e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d015      	beq.n	8008716 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ea:	f7fe fab5 	bl	8006c58 <HAL_GetTick>
 80086ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086f0:	e00a      	b.n	8008708 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086f2:	f7fe fab1 	bl	8006c58 <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008700:	4293      	cmp	r3, r2
 8008702:	d901      	bls.n	8008708 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e0bc      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008708:	4b61      	ldr	r3, [pc, #388]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 800870a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870c:	f003 0302 	and.w	r3, r3, #2
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0ee      	beq.n	80086f2 <HAL_RCC_OscConfig+0x33a>
 8008714:	e014      	b.n	8008740 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008716:	f7fe fa9f 	bl	8006c58 <HAL_GetTick>
 800871a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800871c:	e00a      	b.n	8008734 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800871e:	f7fe fa9b 	bl	8006c58 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	f241 3288 	movw	r2, #5000	; 0x1388
 800872c:	4293      	cmp	r3, r2
 800872e:	d901      	bls.n	8008734 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e0a6      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008734:	4b56      	ldr	r3, [pc, #344]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 8008736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1ee      	bne.n	800871e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d105      	bne.n	8008752 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008746:	4b52      	ldr	r3, [pc, #328]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	4a51      	ldr	r2, [pc, #324]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 800874c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008750:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 8092 	beq.w	8008880 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800875c:	4b4c      	ldr	r3, [pc, #304]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 030c 	and.w	r3, r3, #12
 8008764:	2b08      	cmp	r3, #8
 8008766:	d05c      	beq.n	8008822 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d141      	bne.n	80087f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008770:	4b48      	ldr	r3, [pc, #288]	; (8008894 <HAL_RCC_OscConfig+0x4dc>)
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008776:	f7fe fa6f 	bl	8006c58 <HAL_GetTick>
 800877a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800877c:	e008      	b.n	8008790 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800877e:	f7fe fa6b 	bl	8006c58 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d901      	bls.n	8008790 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e078      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008790:	4b3f      	ldr	r3, [pc, #252]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f0      	bne.n	800877e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69da      	ldr	r2, [r3, #28]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	431a      	orrs	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087aa:	019b      	lsls	r3, r3, #6
 80087ac:	431a      	orrs	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	3b01      	subs	r3, #1
 80087b6:	041b      	lsls	r3, r3, #16
 80087b8:	431a      	orrs	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	061b      	lsls	r3, r3, #24
 80087c0:	4933      	ldr	r1, [pc, #204]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087c6:	4b33      	ldr	r3, [pc, #204]	; (8008894 <HAL_RCC_OscConfig+0x4dc>)
 80087c8:	2201      	movs	r2, #1
 80087ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087cc:	f7fe fa44 	bl	8006c58 <HAL_GetTick>
 80087d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087d2:	e008      	b.n	80087e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087d4:	f7fe fa40 	bl	8006c58 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e04d      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087e6:	4b2a      	ldr	r3, [pc, #168]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0f0      	beq.n	80087d4 <HAL_RCC_OscConfig+0x41c>
 80087f2:	e045      	b.n	8008880 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087f4:	4b27      	ldr	r3, [pc, #156]	; (8008894 <HAL_RCC_OscConfig+0x4dc>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087fa:	f7fe fa2d 	bl	8006c58 <HAL_GetTick>
 80087fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008800:	e008      	b.n	8008814 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008802:	f7fe fa29 	bl	8006c58 <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e036      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008814:	4b1e      	ldr	r3, [pc, #120]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1f0      	bne.n	8008802 <HAL_RCC_OscConfig+0x44a>
 8008820:	e02e      	b.n	8008880 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d101      	bne.n	800882e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e029      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800882e:	4b18      	ldr	r3, [pc, #96]	; (8008890 <HAL_RCC_OscConfig+0x4d8>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	429a      	cmp	r2, r3
 8008840:	d11c      	bne.n	800887c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800884c:	429a      	cmp	r2, r3
 800884e:	d115      	bne.n	800887c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008856:	4013      	ands	r3, r2
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800885c:	4293      	cmp	r3, r2
 800885e:	d10d      	bne.n	800887c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800886a:	429a      	cmp	r2, r3
 800886c:	d106      	bne.n	800887c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008878:	429a      	cmp	r2, r3
 800887a:	d001      	beq.n	8008880 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e000      	b.n	8008882 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	40007000 	.word	0x40007000
 8008890:	40023800 	.word	0x40023800
 8008894:	42470060 	.word	0x42470060

08008898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e0cc      	b.n	8008a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088ac:	4b68      	ldr	r3, [pc, #416]	; (8008a50 <HAL_RCC_ClockConfig+0x1b8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 030f 	and.w	r3, r3, #15
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d90c      	bls.n	80088d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ba:	4b65      	ldr	r3, [pc, #404]	; (8008a50 <HAL_RCC_ClockConfig+0x1b8>)
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088c2:	4b63      	ldr	r3, [pc, #396]	; (8008a50 <HAL_RCC_ClockConfig+0x1b8>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 030f 	and.w	r3, r3, #15
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d001      	beq.n	80088d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e0b8      	b.n	8008a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d020      	beq.n	8008922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088ec:	4b59      	ldr	r3, [pc, #356]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	4a58      	ldr	r2, [pc, #352]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 80088f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0308 	and.w	r3, r3, #8
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008904:	4b53      	ldr	r3, [pc, #332]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	4a52      	ldr	r2, [pc, #328]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 800890a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800890e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008910:	4b50      	ldr	r3, [pc, #320]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	494d      	ldr	r1, [pc, #308]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 800891e:	4313      	orrs	r3, r2
 8008920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d044      	beq.n	80089b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d107      	bne.n	8008946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008936:	4b47      	ldr	r3, [pc, #284]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d119      	bne.n	8008976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e07f      	b.n	8008a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	2b02      	cmp	r3, #2
 800894c:	d003      	beq.n	8008956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008952:	2b03      	cmp	r3, #3
 8008954:	d107      	bne.n	8008966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008956:	4b3f      	ldr	r3, [pc, #252]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d109      	bne.n	8008976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e06f      	b.n	8008a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008966:	4b3b      	ldr	r3, [pc, #236]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e067      	b.n	8008a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008976:	4b37      	ldr	r3, [pc, #220]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f023 0203 	bic.w	r2, r3, #3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	4934      	ldr	r1, [pc, #208]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 8008984:	4313      	orrs	r3, r2
 8008986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008988:	f7fe f966 	bl	8006c58 <HAL_GetTick>
 800898c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800898e:	e00a      	b.n	80089a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008990:	f7fe f962 	bl	8006c58 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	f241 3288 	movw	r2, #5000	; 0x1388
 800899e:	4293      	cmp	r3, r2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e04f      	b.n	8008a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089a6:	4b2b      	ldr	r3, [pc, #172]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f003 020c 	and.w	r2, r3, #12
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d1eb      	bne.n	8008990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089b8:	4b25      	ldr	r3, [pc, #148]	; (8008a50 <HAL_RCC_ClockConfig+0x1b8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 030f 	and.w	r3, r3, #15
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d20c      	bcs.n	80089e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c6:	4b22      	ldr	r3, [pc, #136]	; (8008a50 <HAL_RCC_ClockConfig+0x1b8>)
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ce:	4b20      	ldr	r3, [pc, #128]	; (8008a50 <HAL_RCC_ClockConfig+0x1b8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d001      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e032      	b.n	8008a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0304 	and.w	r3, r3, #4
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d008      	beq.n	80089fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089ec:	4b19      	ldr	r3, [pc, #100]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	4916      	ldr	r1, [pc, #88]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d009      	beq.n	8008a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a0a:	4b12      	ldr	r3, [pc, #72]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	490e      	ldr	r1, [pc, #56]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a1e:	f000 f821 	bl	8008a64 <HAL_RCC_GetSysClockFreq>
 8008a22:	4601      	mov	r1, r0
 8008a24:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <HAL_RCC_ClockConfig+0x1bc>)
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	091b      	lsrs	r3, r3, #4
 8008a2a:	f003 030f 	and.w	r3, r3, #15
 8008a2e:	4a0a      	ldr	r2, [pc, #40]	; (8008a58 <HAL_RCC_ClockConfig+0x1c0>)
 8008a30:	5cd3      	ldrb	r3, [r2, r3]
 8008a32:	fa21 f303 	lsr.w	r3, r1, r3
 8008a36:	4a09      	ldr	r2, [pc, #36]	; (8008a5c <HAL_RCC_ClockConfig+0x1c4>)
 8008a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a3a:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <HAL_RCC_ClockConfig+0x1c8>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fe f8c6 	bl	8006bd0 <HAL_InitTick>

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	40023c00 	.word	0x40023c00
 8008a54:	40023800 	.word	0x40023800
 8008a58:	0800f908 	.word	0x0800f908
 8008a5c:	2000164c 	.word	0x2000164c
 8008a60:	20001668 	.word	0x20001668

08008a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	607b      	str	r3, [r7, #4]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	2300      	movs	r3, #0
 8008a74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a7a:	4b50      	ldr	r3, [pc, #320]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x158>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 030c 	and.w	r3, r3, #12
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d007      	beq.n	8008a96 <HAL_RCC_GetSysClockFreq+0x32>
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d008      	beq.n	8008a9c <HAL_RCC_GetSysClockFreq+0x38>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f040 808d 	bne.w	8008baa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a90:	4b4b      	ldr	r3, [pc, #300]	; (8008bc0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008a92:	60bb      	str	r3, [r7, #8]
       break;
 8008a94:	e08c      	b.n	8008bb0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a96:	4b4b      	ldr	r3, [pc, #300]	; (8008bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a98:	60bb      	str	r3, [r7, #8]
      break;
 8008a9a:	e089      	b.n	8008bb0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a9c:	4b47      	ldr	r3, [pc, #284]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x158>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aa4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008aa6:	4b45      	ldr	r3, [pc, #276]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x158>)
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d023      	beq.n	8008afa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ab2:	4b42      	ldr	r3, [pc, #264]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x158>)
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	099b      	lsrs	r3, r3, #6
 8008ab8:	f04f 0400 	mov.w	r4, #0
 8008abc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	ea03 0501 	and.w	r5, r3, r1
 8008ac8:	ea04 0602 	and.w	r6, r4, r2
 8008acc:	4a3d      	ldr	r2, [pc, #244]	; (8008bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ace:	fb02 f106 	mul.w	r1, r2, r6
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	fb02 f205 	mul.w	r2, r2, r5
 8008ad8:	440a      	add	r2, r1
 8008ada:	493a      	ldr	r1, [pc, #232]	; (8008bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008adc:	fba5 0101 	umull	r0, r1, r5, r1
 8008ae0:	1853      	adds	r3, r2, r1
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f04f 0400 	mov.w	r4, #0
 8008aea:	461a      	mov	r2, r3
 8008aec:	4623      	mov	r3, r4
 8008aee:	f7f8 f8ab 	bl	8000c48 <__aeabi_uldivmod>
 8008af2:	4603      	mov	r3, r0
 8008af4:	460c      	mov	r4, r1
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	e049      	b.n	8008b8e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008afa:	4b30      	ldr	r3, [pc, #192]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x158>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	099b      	lsrs	r3, r3, #6
 8008b00:	f04f 0400 	mov.w	r4, #0
 8008b04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008b08:	f04f 0200 	mov.w	r2, #0
 8008b0c:	ea03 0501 	and.w	r5, r3, r1
 8008b10:	ea04 0602 	and.w	r6, r4, r2
 8008b14:	4629      	mov	r1, r5
 8008b16:	4632      	mov	r2, r6
 8008b18:	f04f 0300 	mov.w	r3, #0
 8008b1c:	f04f 0400 	mov.w	r4, #0
 8008b20:	0154      	lsls	r4, r2, #5
 8008b22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008b26:	014b      	lsls	r3, r1, #5
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	1b49      	subs	r1, r1, r5
 8008b2e:	eb62 0206 	sbc.w	r2, r2, r6
 8008b32:	f04f 0300 	mov.w	r3, #0
 8008b36:	f04f 0400 	mov.w	r4, #0
 8008b3a:	0194      	lsls	r4, r2, #6
 8008b3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b40:	018b      	lsls	r3, r1, #6
 8008b42:	1a5b      	subs	r3, r3, r1
 8008b44:	eb64 0402 	sbc.w	r4, r4, r2
 8008b48:	f04f 0100 	mov.w	r1, #0
 8008b4c:	f04f 0200 	mov.w	r2, #0
 8008b50:	00e2      	lsls	r2, r4, #3
 8008b52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008b56:	00d9      	lsls	r1, r3, #3
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4614      	mov	r4, r2
 8008b5c:	195b      	adds	r3, r3, r5
 8008b5e:	eb44 0406 	adc.w	r4, r4, r6
 8008b62:	f04f 0100 	mov.w	r1, #0
 8008b66:	f04f 0200 	mov.w	r2, #0
 8008b6a:	02a2      	lsls	r2, r4, #10
 8008b6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008b70:	0299      	lsls	r1, r3, #10
 8008b72:	460b      	mov	r3, r1
 8008b74:	4614      	mov	r4, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	4621      	mov	r1, r4
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f04f 0400 	mov.w	r4, #0
 8008b80:	461a      	mov	r2, r3
 8008b82:	4623      	mov	r3, r4
 8008b84:	f7f8 f860 	bl	8000c48 <__aeabi_uldivmod>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b8e:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x158>)
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	0c1b      	lsrs	r3, r3, #16
 8008b94:	f003 0303 	and.w	r3, r3, #3
 8008b98:	3301      	adds	r3, #1
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba6:	60bb      	str	r3, [r7, #8]
      break;
 8008ba8:	e002      	b.n	8008bb0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008bac:	60bb      	str	r3, [r7, #8]
      break;
 8008bae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	40023800 	.word	0x40023800
 8008bc0:	00f42400 	.word	0x00f42400
 8008bc4:	017d7840 	.word	0x017d7840

08008bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bcc:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8008bce:	681b      	ldr	r3, [r3, #0]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	2000164c 	.word	0x2000164c

08008be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008be4:	f7ff fff0 	bl	8008bc8 <HAL_RCC_GetHCLKFreq>
 8008be8:	4601      	mov	r1, r0
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	0a9b      	lsrs	r3, r3, #10
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	4a03      	ldr	r2, [pc, #12]	; (8008c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bf6:	5cd3      	ldrb	r3, [r2, r3]
 8008bf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	40023800 	.word	0x40023800
 8008c04:	0800f918 	.word	0x0800f918

08008c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c0c:	f7ff ffdc 	bl	8008bc8 <HAL_RCC_GetHCLKFreq>
 8008c10:	4601      	mov	r1, r0
 8008c12:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	0b5b      	lsrs	r3, r3, #13
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	4a03      	ldr	r2, [pc, #12]	; (8008c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c1e:	5cd3      	ldrb	r3, [r2, r3]
 8008c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	40023800 	.word	0x40023800
 8008c2c:	0800f918 	.word	0x0800f918

08008c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e056      	b.n	8008cf0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d106      	bne.n	8008c62 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7fc ff0b 	bl	8005a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2202      	movs	r2, #2
 8008c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	431a      	orrs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	ea42 0103 	orr.w	r1, r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	0c1b      	lsrs	r3, r3, #16
 8008cc0:	f003 0104 	and.w	r1, r3, #4
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	69da      	ldr	r2, [r3, #28]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	4613      	mov	r3, r2
 8008d06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <HAL_SPI_Transmit+0x22>
 8008d16:	2302      	movs	r3, #2
 8008d18:	e11e      	b.n	8008f58 <HAL_SPI_Transmit+0x260>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d22:	f7fd ff99 	bl	8006c58 <HAL_GetTick>
 8008d26:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008d28:	88fb      	ldrh	r3, [r7, #6]
 8008d2a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d002      	beq.n	8008d3e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008d38:	2302      	movs	r3, #2
 8008d3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d3c:	e103      	b.n	8008f46 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <HAL_SPI_Transmit+0x52>
 8008d44:	88fb      	ldrh	r3, [r7, #6]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d102      	bne.n	8008d50 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d4e:	e0fa      	b.n	8008f46 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2203      	movs	r2, #3
 8008d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	88fa      	ldrh	r2, [r7, #6]
 8008d68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	88fa      	ldrh	r2, [r7, #6]
 8008d6e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d96:	d107      	bne.n	8008da8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008da6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db2:	2b40      	cmp	r3, #64	; 0x40
 8008db4:	d007      	beq.n	8008dc6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dce:	d14b      	bne.n	8008e68 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <HAL_SPI_Transmit+0xe6>
 8008dd8:	8afb      	ldrh	r3, [r7, #22]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d13e      	bne.n	8008e5c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de2:	881a      	ldrh	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	1c9a      	adds	r2, r3, #2
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008e02:	e02b      	b.n	8008e5c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d112      	bne.n	8008e38 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e16:	881a      	ldrh	r2, [r3, #0]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e22:	1c9a      	adds	r2, r3, #2
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e36:	e011      	b.n	8008e5c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e38:	f7fd ff0e 	bl	8006c58 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d803      	bhi.n	8008e50 <HAL_SPI_Transmit+0x158>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4e:	d102      	bne.n	8008e56 <HAL_SPI_Transmit+0x15e>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d102      	bne.n	8008e5c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e5a:	e074      	b.n	8008f46 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1ce      	bne.n	8008e04 <HAL_SPI_Transmit+0x10c>
 8008e66:	e04c      	b.n	8008f02 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <HAL_SPI_Transmit+0x17e>
 8008e70:	8afb      	ldrh	r3, [r7, #22]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d140      	bne.n	8008ef8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	330c      	adds	r3, #12
 8008e80:	7812      	ldrb	r2, [r2, #0]
 8008e82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008e9c:	e02c      	b.n	8008ef8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d113      	bne.n	8008ed4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	330c      	adds	r3, #12
 8008eb6:	7812      	ldrb	r2, [r2, #0]
 8008eb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ed2:	e011      	b.n	8008ef8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ed4:	f7fd fec0 	bl	8006c58 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d803      	bhi.n	8008eec <HAL_SPI_Transmit+0x1f4>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eea:	d102      	bne.n	8008ef2 <HAL_SPI_Transmit+0x1fa>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d102      	bne.n	8008ef8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ef6:	e026      	b.n	8008f46 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1cd      	bne.n	8008e9e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 fc94 	bl	8009834 <SPI_EndRxTxTransaction>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2220      	movs	r2, #32
 8008f16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f20:	2300      	movs	r3, #0
 8008f22:	613b      	str	r3, [r7, #16]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	77fb      	strb	r3, [r7, #31]
 8008f42:	e000      	b.n	8008f46 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008f44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3720      	adds	r7, #32
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08c      	sub	sp, #48	; 0x30
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
 8008f6c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d101      	bne.n	8008f86 <HAL_SPI_TransmitReceive+0x26>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e18a      	b.n	800929c <HAL_SPI_TransmitReceive+0x33c>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f8e:	f7fd fe63 	bl	8006c58 <HAL_GetTick>
 8008f92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008fa4:	887b      	ldrh	r3, [r7, #2]
 8008fa6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d00f      	beq.n	8008fd0 <HAL_SPI_TransmitReceive+0x70>
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fb6:	d107      	bne.n	8008fc8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d103      	bne.n	8008fc8 <HAL_SPI_TransmitReceive+0x68>
 8008fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	d003      	beq.n	8008fd0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008fc8:	2302      	movs	r3, #2
 8008fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008fce:	e15b      	b.n	8009288 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <HAL_SPI_TransmitReceive+0x82>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <HAL_SPI_TransmitReceive+0x82>
 8008fdc:	887b      	ldrh	r3, [r7, #2]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d103      	bne.n	8008fea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008fe8:	e14e      	b.n	8009288 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d003      	beq.n	8008ffe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2205      	movs	r2, #5
 8008ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	887a      	ldrh	r2, [r7, #2]
 800900e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	887a      	ldrh	r2, [r7, #2]
 8009014:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	887a      	ldrh	r2, [r7, #2]
 8009020:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	887a      	ldrh	r2, [r7, #2]
 8009026:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903e:	2b40      	cmp	r3, #64	; 0x40
 8009040:	d007      	beq.n	8009052 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009050:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800905a:	d178      	bne.n	800914e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <HAL_SPI_TransmitReceive+0x10a>
 8009064:	8b7b      	ldrh	r3, [r7, #26]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d166      	bne.n	8009138 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906e:	881a      	ldrh	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	1c9a      	adds	r2, r3, #2
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	b29a      	uxth	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800908e:	e053      	b.n	8009138 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b02      	cmp	r3, #2
 800909c:	d11b      	bne.n	80090d6 <HAL_SPI_TransmitReceive+0x176>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d016      	beq.n	80090d6 <HAL_SPI_TransmitReceive+0x176>
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d113      	bne.n	80090d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b2:	881a      	ldrh	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090be:	1c9a      	adds	r2, r3, #2
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	3b01      	subs	r3, #1
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090d2:	2300      	movs	r3, #0
 80090d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d119      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x1b8>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d014      	beq.n	8009118 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	b292      	uxth	r2, r2
 80090fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009100:	1c9a      	adds	r2, r3, #2
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800910a:	b29b      	uxth	r3, r3
 800910c:	3b01      	subs	r3, #1
 800910e:	b29a      	uxth	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009114:	2301      	movs	r3, #1
 8009116:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009118:	f7fd fd9e 	bl	8006c58 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009124:	429a      	cmp	r2, r3
 8009126:	d807      	bhi.n	8009138 <HAL_SPI_TransmitReceive+0x1d8>
 8009128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912e:	d003      	beq.n	8009138 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009136:	e0a7      	b.n	8009288 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800913c:	b29b      	uxth	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1a6      	bne.n	8009090 <HAL_SPI_TransmitReceive+0x130>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009146:	b29b      	uxth	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1a1      	bne.n	8009090 <HAL_SPI_TransmitReceive+0x130>
 800914c:	e07c      	b.n	8009248 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_SPI_TransmitReceive+0x1fc>
 8009156:	8b7b      	ldrh	r3, [r7, #26]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d16b      	bne.n	8009234 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	330c      	adds	r3, #12
 8009166:	7812      	ldrb	r2, [r2, #0]
 8009168:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009182:	e057      	b.n	8009234 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b02      	cmp	r3, #2
 8009190:	d11c      	bne.n	80091cc <HAL_SPI_TransmitReceive+0x26c>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009196:	b29b      	uxth	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d017      	beq.n	80091cc <HAL_SPI_TransmitReceive+0x26c>
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d114      	bne.n	80091cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	330c      	adds	r3, #12
 80091ac:	7812      	ldrb	r2, [r2, #0]
 80091ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b4:	1c5a      	adds	r2, r3, #1
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091be:	b29b      	uxth	r3, r3
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d119      	bne.n	800920e <HAL_SPI_TransmitReceive+0x2ae>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091de:	b29b      	uxth	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d014      	beq.n	800920e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009200:	b29b      	uxth	r3, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	b29a      	uxth	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800920a:	2301      	movs	r3, #1
 800920c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800920e:	f7fd fd23 	bl	8006c58 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800921a:	429a      	cmp	r2, r3
 800921c:	d803      	bhi.n	8009226 <HAL_SPI_TransmitReceive+0x2c6>
 800921e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d102      	bne.n	800922c <HAL_SPI_TransmitReceive+0x2cc>
 8009226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009228:	2b00      	cmp	r3, #0
 800922a:	d103      	bne.n	8009234 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009232:	e029      	b.n	8009288 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009238:	b29b      	uxth	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1a2      	bne.n	8009184 <HAL_SPI_TransmitReceive+0x224>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009242:	b29b      	uxth	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d19d      	bne.n	8009184 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800924a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 faf1 	bl	8009834 <SPI_EndRxTxTransaction>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d006      	beq.n	8009266 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2220      	movs	r2, #32
 8009262:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009264:	e010      	b.n	8009288 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10b      	bne.n	8009286 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	e000      	b.n	8009288 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009298:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800929c:	4618      	mov	r0, r3
 800929e:	3730      	adds	r7, #48	; 0x30
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e0e3      	b.n	800948c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80092da:	7dbb      	ldrb	r3, [r7, #22]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d00d      	beq.n	80092fc <HAL_SPI_TransmitReceive_DMA+0x58>
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092e6:	d106      	bne.n	80092f6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d102      	bne.n	80092f6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80092f0:	7dbb      	ldrb	r3, [r7, #22]
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d002      	beq.n	80092fc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80092f6:	2302      	movs	r3, #2
 80092f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092fa:	e0c2      	b.n	8009482 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009308:	887b      	ldrh	r3, [r7, #2]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d102      	bne.n	8009314 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009312:	e0b6      	b.n	8009482 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b04      	cmp	r3, #4
 800931e:	d003      	beq.n	8009328 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2205      	movs	r2, #5
 8009324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	887a      	ldrh	r2, [r7, #2]
 8009338:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	887a      	ldrh	r2, [r7, #2]
 800933e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	887a      	ldrh	r2, [r7, #2]
 800934a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	887a      	ldrh	r2, [r7, #2]
 8009350:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b04      	cmp	r3, #4
 8009368:	d108      	bne.n	800937c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800936e:	4a49      	ldr	r2, [pc, #292]	; (8009494 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8009370:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009376:	4a48      	ldr	r2, [pc, #288]	; (8009498 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8009378:	63da      	str	r2, [r3, #60]	; 0x3c
 800937a:	e007      	b.n	800938c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009380:	4a46      	ldr	r2, [pc, #280]	; (800949c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8009382:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009388:	4a45      	ldr	r2, [pc, #276]	; (80094a0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800938a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009390:	4a44      	ldr	r2, [pc, #272]	; (80094a4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8009392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009398:	2200      	movs	r2, #0
 800939a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	330c      	adds	r3, #12
 80093a6:	4619      	mov	r1, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80093b4:	f7fe fa32 	bl	800781c <HAL_DMA_Start_IT>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00c      	beq.n	80093d8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c2:	f043 0210 	orr.w	r2, r3, #16
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80093d6:	e054      	b.n	8009482 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 0201 	orr.w	r2, r2, #1
 80093e6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093ec:	2200      	movs	r2, #0
 80093ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093f4:	2200      	movs	r2, #0
 80093f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093fc:	2200      	movs	r2, #0
 80093fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009404:	2200      	movs	r2, #0
 8009406:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	4619      	mov	r1, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	330c      	adds	r3, #12
 8009418:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800941e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009420:	f7fe f9fc 	bl	800781c <HAL_DMA_Start_IT>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00c      	beq.n	8009444 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	f043 0210 	orr.w	r2, r3, #16
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8009442:	e01e      	b.n	8009482 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944e:	2b40      	cmp	r3, #64	; 0x40
 8009450:	d007      	beq.n	8009462 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009460:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f042 0220 	orr.w	r2, r2, #32
 8009470:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f042 0202 	orr.w	r2, r2, #2
 8009480:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	0800961d 	.word	0x0800961d
 8009498:	080094e5 	.word	0x080094e5
 800949c:	08009639 	.word	0x08009639
 80094a0:	0800958d 	.word	0x0800958d
 80094a4:	08009655 	.word	0x08009655

080094a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094f2:	f7fd fbb1 	bl	8006c58 <HAL_GetTick>
 80094f6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009506:	d03b      	beq.n	8009580 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f022 0220 	bic.w	r2, r2, #32
 8009516:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10d      	bne.n	800953c <SPI_DMAReceiveCplt+0x58>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009528:	d108      	bne.n	800953c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0203 	bic.w	r2, r2, #3
 8009538:	605a      	str	r2, [r3, #4]
 800953a:	e007      	b.n	800954c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0201 	bic.w	r2, r2, #1
 800954a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	2164      	movs	r1, #100	; 0x64
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 f909 	bl	8009768 <SPI_EndRxTransaction>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2220      	movs	r2, #32
 8009560:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff ffa9 	bl	80094d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800957e:	e002      	b.n	8009586 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7ff ff91 	bl	80094a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009598:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800959a:	f7fd fb5d 	bl	8006c58 <HAL_GetTick>
 800959e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ae:	d02f      	beq.n	8009610 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 0220 	bic.w	r2, r2, #32
 80095be:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	2164      	movs	r1, #100	; 0x64
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 f935 	bl	8009834 <SPI_EndRxTxTransaction>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d005      	beq.n	80095dc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d4:	f043 0220 	orr.w	r2, r3, #32
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0203 	bic.w	r2, r2, #3
 80095ea:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff ff61 	bl	80094d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800960e:	e002      	b.n	8009616 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f7fb fd91 	bl	8005138 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009628:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7ff ff46 	bl	80094bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009630:	bf00      	nop
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7fb fd8c 	bl	8005164 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009660:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0203 	bic.w	r2, r2, #3
 8009670:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009676:	f043 0210 	orr.w	r2, r3, #16
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff ff22 	bl	80094d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	4613      	mov	r3, r2
 80096a2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096a4:	e04c      	b.n	8009740 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ac:	d048      	beq.n	8009740 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80096ae:	f7fd fad3 	bl	8006c58 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d902      	bls.n	80096c4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d13d      	bne.n	8009740 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096dc:	d111      	bne.n	8009702 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e6:	d004      	beq.n	80096f2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096f0:	d107      	bne.n	8009702 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009700:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970a:	d10f      	bne.n	800972c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800972a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e00f      	b.n	8009760 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	4013      	ands	r3, r2
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	429a      	cmp	r2, r3
 800974e:	bf0c      	ite	eq
 8009750:	2301      	moveq	r3, #1
 8009752:	2300      	movne	r3, #0
 8009754:	b2db      	uxtb	r3, r3
 8009756:	461a      	mov	r2, r3
 8009758:	79fb      	ldrb	r3, [r7, #7]
 800975a:	429a      	cmp	r2, r3
 800975c:	d1a3      	bne.n	80096a6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af02      	add	r7, sp, #8
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800977c:	d111      	bne.n	80097a2 <SPI_EndRxTransaction+0x3a>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009786:	d004      	beq.n	8009792 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009790:	d107      	bne.n	80097a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097aa:	d12a      	bne.n	8009802 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097b4:	d012      	beq.n	80097dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2200      	movs	r2, #0
 80097be:	2180      	movs	r1, #128	; 0x80
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f7ff ff67 	bl	8009694 <SPI_WaitFlagStateUntilTimeout>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d02d      	beq.n	8009828 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d0:	f043 0220 	orr.w	r2, r3, #32
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e026      	b.n	800982a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2200      	movs	r2, #0
 80097e4:	2101      	movs	r1, #1
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f7ff ff54 	bl	8009694 <SPI_WaitFlagStateUntilTimeout>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d01a      	beq.n	8009828 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f6:	f043 0220 	orr.w	r2, r3, #32
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	e013      	b.n	800982a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2200      	movs	r2, #0
 800980a:	2101      	movs	r1, #1
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f7ff ff41 	bl	8009694 <SPI_WaitFlagStateUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d007      	beq.n	8009828 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800981c:	f043 0220 	orr.w	r2, r3, #32
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e000      	b.n	800982a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af02      	add	r7, sp, #8
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009840:	4b1b      	ldr	r3, [pc, #108]	; (80098b0 <SPI_EndRxTxTransaction+0x7c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a1b      	ldr	r2, [pc, #108]	; (80098b4 <SPI_EndRxTxTransaction+0x80>)
 8009846:	fba2 2303 	umull	r2, r3, r2, r3
 800984a:	0d5b      	lsrs	r3, r3, #21
 800984c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009850:	fb02 f303 	mul.w	r3, r2, r3
 8009854:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800985e:	d112      	bne.n	8009886 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2200      	movs	r2, #0
 8009868:	2180      	movs	r1, #128	; 0x80
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f7ff ff12 	bl	8009694 <SPI_WaitFlagStateUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d016      	beq.n	80098a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800987a:	f043 0220 	orr.w	r2, r3, #32
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e00f      	b.n	80098a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00a      	beq.n	80098a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	3b01      	subs	r3, #1
 8009890:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989c:	2b80      	cmp	r3, #128	; 0x80
 800989e:	d0f2      	beq.n	8009886 <SPI_EndRxTxTransaction+0x52>
 80098a0:	e000      	b.n	80098a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80098a2:	bf00      	nop
  }

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	2000164c 	.word	0x2000164c
 80098b4:	165e9f81 	.word	0x165e9f81

080098b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e01d      	b.n	8009906 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7fc fc86 	bl	80061f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2202      	movs	r2, #2
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f000 fb34 	bl	8009f64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e01d      	b.n	800995c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d106      	bne.n	800993a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f815 	bl	8009964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2202      	movs	r2, #2
 800993e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3304      	adds	r3, #4
 800994a:	4619      	mov	r1, r3
 800994c:	4610      	mov	r0, r2
 800994e:	f000 fb09 	bl	8009f64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2201      	movs	r2, #1
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fdd4 	bl	800a538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a15      	ldr	r2, [pc, #84]	; (80099ec <HAL_TIM_PWM_Start+0x74>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d004      	beq.n	80099a4 <HAL_TIM_PWM_Start+0x2c>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a14      	ldr	r2, [pc, #80]	; (80099f0 <HAL_TIM_PWM_Start+0x78>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d101      	bne.n	80099a8 <HAL_TIM_PWM_Start+0x30>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e000      	b.n	80099aa <HAL_TIM_PWM_Start+0x32>
 80099a8:	2300      	movs	r3, #0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d007      	beq.n	80099be <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f003 0307 	and.w	r3, r3, #7
 80099c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2b06      	cmp	r3, #6
 80099ce:	d007      	beq.n	80099e0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0201 	orr.w	r2, r2, #1
 80099de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	40010000 	.word	0x40010000
 80099f0:	40010400 	.word	0x40010400

080099f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d122      	bne.n	8009a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f003 0302 	and.w	r3, r3, #2
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d11b      	bne.n	8009a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f06f 0202 	mvn.w	r2, #2
 8009a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fa75 	bl	8009f26 <HAL_TIM_IC_CaptureCallback>
 8009a3c:	e005      	b.n	8009a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fa67 	bl	8009f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fa78 	bl	8009f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f003 0304 	and.w	r3, r3, #4
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d122      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d11b      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f06f 0204 	mvn.w	r2, #4
 8009a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa4b 	bl	8009f26 <HAL_TIM_IC_CaptureCallback>
 8009a90:	e005      	b.n	8009a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fa3d 	bl	8009f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fa4e 	bl	8009f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f003 0308 	and.w	r3, r3, #8
 8009aae:	2b08      	cmp	r3, #8
 8009ab0:	d122      	bne.n	8009af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f003 0308 	and.w	r3, r3, #8
 8009abc:	2b08      	cmp	r3, #8
 8009abe:	d11b      	bne.n	8009af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f06f 0208 	mvn.w	r2, #8
 8009ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2204      	movs	r2, #4
 8009ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa21 	bl	8009f26 <HAL_TIM_IC_CaptureCallback>
 8009ae4:	e005      	b.n	8009af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa13 	bl	8009f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fa24 	bl	8009f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	f003 0310 	and.w	r3, r3, #16
 8009b02:	2b10      	cmp	r3, #16
 8009b04:	d122      	bne.n	8009b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f003 0310 	and.w	r3, r3, #16
 8009b10:	2b10      	cmp	r3, #16
 8009b12:	d11b      	bne.n	8009b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f06f 0210 	mvn.w	r2, #16
 8009b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2208      	movs	r2, #8
 8009b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f9f7 	bl	8009f26 <HAL_TIM_IC_CaptureCallback>
 8009b38:	e005      	b.n	8009b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f9e9 	bl	8009f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f9fa 	bl	8009f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d10e      	bne.n	8009b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d107      	bne.n	8009b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0201 	mvn.w	r2, #1
 8009b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f9c3 	bl	8009efe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b82:	2b80      	cmp	r3, #128	; 0x80
 8009b84:	d10e      	bne.n	8009ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b90:	2b80      	cmp	r3, #128	; 0x80
 8009b92:	d107      	bne.n	8009ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fdc8 	bl	800a734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bae:	2b40      	cmp	r3, #64	; 0x40
 8009bb0:	d10e      	bne.n	8009bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bbc:	2b40      	cmp	r3, #64	; 0x40
 8009bbe:	d107      	bne.n	8009bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f9bf 	bl	8009f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	f003 0320 	and.w	r3, r3, #32
 8009bda:	2b20      	cmp	r3, #32
 8009bdc:	d10e      	bne.n	8009bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f003 0320 	and.w	r3, r3, #32
 8009be8:	2b20      	cmp	r3, #32
 8009bea:	d107      	bne.n	8009bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f06f 0220 	mvn.w	r2, #32
 8009bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fd92 	bl	800a720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d101      	bne.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	e0b4      	b.n	8009d88 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2202      	movs	r2, #2
 8009c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b0c      	cmp	r3, #12
 8009c32:	f200 809f 	bhi.w	8009d74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009c36:	a201      	add	r2, pc, #4	; (adr r2, 8009c3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009c71 	.word	0x08009c71
 8009c40:	08009d75 	.word	0x08009d75
 8009c44:	08009d75 	.word	0x08009d75
 8009c48:	08009d75 	.word	0x08009d75
 8009c4c:	08009cb1 	.word	0x08009cb1
 8009c50:	08009d75 	.word	0x08009d75
 8009c54:	08009d75 	.word	0x08009d75
 8009c58:	08009d75 	.word	0x08009d75
 8009c5c:	08009cf3 	.word	0x08009cf3
 8009c60:	08009d75 	.word	0x08009d75
 8009c64:	08009d75 	.word	0x08009d75
 8009c68:	08009d75 	.word	0x08009d75
 8009c6c:	08009d33 	.word	0x08009d33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68b9      	ldr	r1, [r7, #8]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 fa14 	bl	800a0a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	699a      	ldr	r2, [r3, #24]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f042 0208 	orr.w	r2, r2, #8
 8009c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	699a      	ldr	r2, [r3, #24]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f022 0204 	bic.w	r2, r2, #4
 8009c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6999      	ldr	r1, [r3, #24]
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	691a      	ldr	r2, [r3, #16]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	619a      	str	r2, [r3, #24]
      break;
 8009cae:	e062      	b.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68b9      	ldr	r1, [r7, #8]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fa64 	bl	800a184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	699a      	ldr	r2, [r3, #24]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	699a      	ldr	r2, [r3, #24]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6999      	ldr	r1, [r3, #24]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	021a      	lsls	r2, r3, #8
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	430a      	orrs	r2, r1
 8009cee:	619a      	str	r2, [r3, #24]
      break;
 8009cf0:	e041      	b.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68b9      	ldr	r1, [r7, #8]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 fab9 	bl	800a270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	69da      	ldr	r2, [r3, #28]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f042 0208 	orr.w	r2, r2, #8
 8009d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	69da      	ldr	r2, [r3, #28]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0204 	bic.w	r2, r2, #4
 8009d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	69d9      	ldr	r1, [r3, #28]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	691a      	ldr	r2, [r3, #16]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	430a      	orrs	r2, r1
 8009d2e:	61da      	str	r2, [r3, #28]
      break;
 8009d30:	e021      	b.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68b9      	ldr	r1, [r7, #8]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fb0d 	bl	800a358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69da      	ldr	r2, [r3, #28]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69da      	ldr	r2, [r3, #28]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69d9      	ldr	r1, [r3, #28]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	021a      	lsls	r2, r3, #8
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	61da      	str	r2, [r3, #28]
      break;
 8009d72:	e000      	b.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009d74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d101      	bne.n	8009da8 <HAL_TIM_ConfigClockSource+0x18>
 8009da4:	2302      	movs	r3, #2
 8009da6:	e0a6      	b.n	8009ef6 <HAL_TIM_ConfigClockSource+0x166>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b40      	cmp	r3, #64	; 0x40
 8009dde:	d067      	beq.n	8009eb0 <HAL_TIM_ConfigClockSource+0x120>
 8009de0:	2b40      	cmp	r3, #64	; 0x40
 8009de2:	d80b      	bhi.n	8009dfc <HAL_TIM_ConfigClockSource+0x6c>
 8009de4:	2b10      	cmp	r3, #16
 8009de6:	d073      	beq.n	8009ed0 <HAL_TIM_ConfigClockSource+0x140>
 8009de8:	2b10      	cmp	r3, #16
 8009dea:	d802      	bhi.n	8009df2 <HAL_TIM_ConfigClockSource+0x62>
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d06f      	beq.n	8009ed0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009df0:	e078      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d06c      	beq.n	8009ed0 <HAL_TIM_ConfigClockSource+0x140>
 8009df6:	2b30      	cmp	r3, #48	; 0x30
 8009df8:	d06a      	beq.n	8009ed0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009dfa:	e073      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009dfc:	2b70      	cmp	r3, #112	; 0x70
 8009dfe:	d00d      	beq.n	8009e1c <HAL_TIM_ConfigClockSource+0x8c>
 8009e00:	2b70      	cmp	r3, #112	; 0x70
 8009e02:	d804      	bhi.n	8009e0e <HAL_TIM_ConfigClockSource+0x7e>
 8009e04:	2b50      	cmp	r3, #80	; 0x50
 8009e06:	d033      	beq.n	8009e70 <HAL_TIM_ConfigClockSource+0xe0>
 8009e08:	2b60      	cmp	r3, #96	; 0x60
 8009e0a:	d041      	beq.n	8009e90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009e0c:	e06a      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e12:	d066      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x152>
 8009e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e18:	d017      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009e1a:	e063      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6818      	ldr	r0, [r3, #0]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	6899      	ldr	r1, [r3, #8]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f000 fb64 	bl	800a4f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	609a      	str	r2, [r3, #8]
      break;
 8009e48:	e04c      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6818      	ldr	r0, [r3, #0]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	6899      	ldr	r1, [r3, #8]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f000 fb4d 	bl	800a4f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	689a      	ldr	r2, [r3, #8]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e6c:	609a      	str	r2, [r3, #8]
      break;
 8009e6e:	e039      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	6859      	ldr	r1, [r3, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	f000 fac1 	bl	800a404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2150      	movs	r1, #80	; 0x50
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 fb1a 	bl	800a4c2 <TIM_ITRx_SetConfig>
      break;
 8009e8e:	e029      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	6859      	ldr	r1, [r3, #4]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	f000 fae0 	bl	800a462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2160      	movs	r1, #96	; 0x60
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 fb0a 	bl	800a4c2 <TIM_ITRx_SetConfig>
      break;
 8009eae:	e019      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6818      	ldr	r0, [r3, #0]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	6859      	ldr	r1, [r3, #4]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	f000 faa1 	bl	800a404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2140      	movs	r1, #64	; 0x40
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 fafa 	bl	800a4c2 <TIM_ITRx_SetConfig>
      break;
 8009ece:	e009      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4610      	mov	r0, r2
 8009edc:	f000 faf1 	bl	800a4c2 <TIM_ITRx_SetConfig>
      break;
 8009ee0:	e000      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f1a:	bf00      	nop
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
	...

08009f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a40      	ldr	r2, [pc, #256]	; (800a078 <TIM_Base_SetConfig+0x114>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d013      	beq.n	8009fa4 <TIM_Base_SetConfig+0x40>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f82:	d00f      	beq.n	8009fa4 <TIM_Base_SetConfig+0x40>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a3d      	ldr	r2, [pc, #244]	; (800a07c <TIM_Base_SetConfig+0x118>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d00b      	beq.n	8009fa4 <TIM_Base_SetConfig+0x40>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a3c      	ldr	r2, [pc, #240]	; (800a080 <TIM_Base_SetConfig+0x11c>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d007      	beq.n	8009fa4 <TIM_Base_SetConfig+0x40>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a3b      	ldr	r2, [pc, #236]	; (800a084 <TIM_Base_SetConfig+0x120>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d003      	beq.n	8009fa4 <TIM_Base_SetConfig+0x40>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a3a      	ldr	r2, [pc, #232]	; (800a088 <TIM_Base_SetConfig+0x124>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d108      	bne.n	8009fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a2f      	ldr	r2, [pc, #188]	; (800a078 <TIM_Base_SetConfig+0x114>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d02b      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc4:	d027      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a2c      	ldr	r2, [pc, #176]	; (800a07c <TIM_Base_SetConfig+0x118>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d023      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a2b      	ldr	r2, [pc, #172]	; (800a080 <TIM_Base_SetConfig+0x11c>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d01f      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a2a      	ldr	r2, [pc, #168]	; (800a084 <TIM_Base_SetConfig+0x120>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d01b      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a29      	ldr	r2, [pc, #164]	; (800a088 <TIM_Base_SetConfig+0x124>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d017      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a28      	ldr	r2, [pc, #160]	; (800a08c <TIM_Base_SetConfig+0x128>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d013      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a27      	ldr	r2, [pc, #156]	; (800a090 <TIM_Base_SetConfig+0x12c>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d00f      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a26      	ldr	r2, [pc, #152]	; (800a094 <TIM_Base_SetConfig+0x130>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d00b      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a25      	ldr	r2, [pc, #148]	; (800a098 <TIM_Base_SetConfig+0x134>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d007      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a24      	ldr	r2, [pc, #144]	; (800a09c <TIM_Base_SetConfig+0x138>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d003      	beq.n	800a016 <TIM_Base_SetConfig+0xb2>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a23      	ldr	r2, [pc, #140]	; (800a0a0 <TIM_Base_SetConfig+0x13c>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d108      	bne.n	800a028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a01c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	4313      	orrs	r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	4313      	orrs	r3, r2
 800a034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a0a      	ldr	r2, [pc, #40]	; (800a078 <TIM_Base_SetConfig+0x114>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d003      	beq.n	800a05c <TIM_Base_SetConfig+0xf8>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a0c      	ldr	r2, [pc, #48]	; (800a088 <TIM_Base_SetConfig+0x124>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d103      	bne.n	800a064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	691a      	ldr	r2, [r3, #16]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	615a      	str	r2, [r3, #20]
}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	40010000 	.word	0x40010000
 800a07c:	40000400 	.word	0x40000400
 800a080:	40000800 	.word	0x40000800
 800a084:	40000c00 	.word	0x40000c00
 800a088:	40010400 	.word	0x40010400
 800a08c:	40014000 	.word	0x40014000
 800a090:	40014400 	.word	0x40014400
 800a094:	40014800 	.word	0x40014800
 800a098:	40001800 	.word	0x40001800
 800a09c:	40001c00 	.word	0x40001c00
 800a0a0:	40002000 	.word	0x40002000

0800a0a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	f023 0201 	bic.w	r2, r3, #1
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f023 0303 	bic.w	r3, r3, #3
 800a0da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f023 0302 	bic.w	r3, r3, #2
 800a0ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a20      	ldr	r2, [pc, #128]	; (800a17c <TIM_OC1_SetConfig+0xd8>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d003      	beq.n	800a108 <TIM_OC1_SetConfig+0x64>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a1f      	ldr	r2, [pc, #124]	; (800a180 <TIM_OC1_SetConfig+0xdc>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d10c      	bne.n	800a122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f023 0308 	bic.w	r3, r3, #8
 800a10e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	4313      	orrs	r3, r2
 800a118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f023 0304 	bic.w	r3, r3, #4
 800a120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a15      	ldr	r2, [pc, #84]	; (800a17c <TIM_OC1_SetConfig+0xd8>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d003      	beq.n	800a132 <TIM_OC1_SetConfig+0x8e>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a14      	ldr	r2, [pc, #80]	; (800a180 <TIM_OC1_SetConfig+0xdc>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d111      	bne.n	800a156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4313      	orrs	r3, r2
 800a154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	621a      	str	r2, [r3, #32]
}
 800a170:	bf00      	nop
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	40010000 	.word	0x40010000
 800a180:	40010400 	.word	0x40010400

0800a184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	f023 0210 	bic.w	r2, r3, #16
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	021b      	lsls	r3, r3, #8
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f023 0320 	bic.w	r3, r3, #32
 800a1ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	697a      	ldr	r2, [r7, #20]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a22      	ldr	r2, [pc, #136]	; (800a268 <TIM_OC2_SetConfig+0xe4>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d003      	beq.n	800a1ec <TIM_OC2_SetConfig+0x68>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a21      	ldr	r2, [pc, #132]	; (800a26c <TIM_OC2_SetConfig+0xe8>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d10d      	bne.n	800a208 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	011b      	lsls	r3, r3, #4
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a17      	ldr	r2, [pc, #92]	; (800a268 <TIM_OC2_SetConfig+0xe4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d003      	beq.n	800a218 <TIM_OC2_SetConfig+0x94>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a16      	ldr	r2, [pc, #88]	; (800a26c <TIM_OC2_SetConfig+0xe8>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d113      	bne.n	800a240 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a21e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	693a      	ldr	r2, [r7, #16]
 800a230:	4313      	orrs	r3, r2
 800a232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	685a      	ldr	r2, [r3, #4]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	621a      	str	r2, [r3, #32]
}
 800a25a:	bf00      	nop
 800a25c:	371c      	adds	r7, #28
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	40010000 	.word	0x40010000
 800a26c:	40010400 	.word	0x40010400

0800a270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f023 0303 	bic.w	r3, r3, #3
 800a2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	021b      	lsls	r3, r3, #8
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a21      	ldr	r2, [pc, #132]	; (800a350 <TIM_OC3_SetConfig+0xe0>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d003      	beq.n	800a2d6 <TIM_OC3_SetConfig+0x66>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a20      	ldr	r2, [pc, #128]	; (800a354 <TIM_OC3_SetConfig+0xe4>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d10d      	bne.n	800a2f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	021b      	lsls	r3, r3, #8
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a16      	ldr	r2, [pc, #88]	; (800a350 <TIM_OC3_SetConfig+0xe0>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d003      	beq.n	800a302 <TIM_OC3_SetConfig+0x92>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a15      	ldr	r2, [pc, #84]	; (800a354 <TIM_OC3_SetConfig+0xe4>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d113      	bne.n	800a32a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	011b      	lsls	r3, r3, #4
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	011b      	lsls	r3, r3, #4
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	4313      	orrs	r3, r2
 800a328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685a      	ldr	r2, [r3, #4]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	621a      	str	r2, [r3, #32]
}
 800a344:	bf00      	nop
 800a346:	371c      	adds	r7, #28
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	40010000 	.word	0x40010000
 800a354:	40010400 	.word	0x40010400

0800a358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a358:	b480      	push	{r7}
 800a35a:	b087      	sub	sp, #28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a38e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	021b      	lsls	r3, r3, #8
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	4313      	orrs	r3, r2
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	031b      	lsls	r3, r3, #12
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a12      	ldr	r2, [pc, #72]	; (800a3fc <TIM_OC4_SetConfig+0xa4>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d003      	beq.n	800a3c0 <TIM_OC4_SetConfig+0x68>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a11      	ldr	r2, [pc, #68]	; (800a400 <TIM_OC4_SetConfig+0xa8>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d109      	bne.n	800a3d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	019b      	lsls	r3, r3, #6
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	621a      	str	r2, [r3, #32]
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	40010000 	.word	0x40010000
 800a400:	40010400 	.word	0x40010400

0800a404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a404:	b480      	push	{r7}
 800a406:	b087      	sub	sp, #28
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	f023 0201 	bic.w	r2, r3, #1
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a42e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	011b      	lsls	r3, r3, #4
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	4313      	orrs	r3, r2
 800a438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f023 030a 	bic.w	r3, r3, #10
 800a440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	4313      	orrs	r3, r2
 800a448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	693a      	ldr	r2, [r7, #16]
 800a44e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	697a      	ldr	r2, [r7, #20]
 800a454:	621a      	str	r2, [r3, #32]
}
 800a456:	bf00      	nop
 800a458:	371c      	adds	r7, #28
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a462:	b480      	push	{r7}
 800a464:	b087      	sub	sp, #28
 800a466:	af00      	add	r7, sp, #0
 800a468:	60f8      	str	r0, [r7, #12]
 800a46a:	60b9      	str	r1, [r7, #8]
 800a46c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	f023 0210 	bic.w	r2, r3, #16
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6a1b      	ldr	r3, [r3, #32]
 800a484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a48c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	031b      	lsls	r3, r3, #12
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	4313      	orrs	r3, r2
 800a496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a49e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	011b      	lsls	r3, r3, #4
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	621a      	str	r2, [r3, #32]
}
 800a4b6:	bf00      	nop
 800a4b8:	371c      	adds	r7, #28
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	f043 0307 	orr.w	r3, r3, #7
 800a4e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	609a      	str	r2, [r3, #8]
}
 800a4ec:	bf00      	nop
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	021a      	lsls	r2, r3, #8
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	431a      	orrs	r2, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	4313      	orrs	r3, r2
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	4313      	orrs	r3, r2
 800a524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	609a      	str	r2, [r3, #8]
}
 800a52c:	bf00      	nop
 800a52e:	371c      	adds	r7, #28
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	f003 031f 	and.w	r3, r3, #31
 800a54a:	2201      	movs	r2, #1
 800a54c:	fa02 f303 	lsl.w	r3, r2, r3
 800a550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6a1a      	ldr	r2, [r3, #32]
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	43db      	mvns	r3, r3
 800a55a:	401a      	ands	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6a1a      	ldr	r2, [r3, #32]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	f003 031f 	and.w	r3, r3, #31
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	fa01 f303 	lsl.w	r3, r1, r3
 800a570:	431a      	orrs	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	621a      	str	r2, [r3, #32]
}
 800a576:	bf00      	nop
 800a578:	371c      	adds	r7, #28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
	...

0800a584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a594:	2b01      	cmp	r3, #1
 800a596:	d101      	bne.n	800a59c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a598:	2302      	movs	r3, #2
 800a59a:	e05a      	b.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a21      	ldr	r2, [pc, #132]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d022      	beq.n	800a626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e8:	d01d      	beq.n	800a626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a1d      	ldr	r2, [pc, #116]	; (800a664 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d018      	beq.n	800a626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a1b      	ldr	r2, [pc, #108]	; (800a668 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d013      	beq.n	800a626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a1a      	ldr	r2, [pc, #104]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d00e      	beq.n	800a626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a18      	ldr	r2, [pc, #96]	; (800a670 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d009      	beq.n	800a626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a17      	ldr	r2, [pc, #92]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d004      	beq.n	800a626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a15      	ldr	r2, [pc, #84]	; (800a678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d10c      	bne.n	800a640 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a62c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	4313      	orrs	r3, r2
 800a636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	40010000 	.word	0x40010000
 800a664:	40000400 	.word	0x40000400
 800a668:	40000800 	.word	0x40000800
 800a66c:	40000c00 	.word	0x40000c00
 800a670:	40010400 	.word	0x40010400
 800a674:	40014000 	.word	0x40014000
 800a678:	40001800 	.word	0x40001800

0800a67c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a686:	2300      	movs	r3, #0
 800a688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a690:	2b01      	cmp	r3, #1
 800a692:	d101      	bne.n	800a698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a694:	2302      	movs	r3, #2
 800a696:	e03d      	b.n	800a714 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e03f      	b.n	800a7da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d106      	bne.n	800a774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7fb fe32 	bl	80063d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2224      	movs	r2, #36	; 0x24
 800a778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68da      	ldr	r2, [r3, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a78a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fdb5 	bl	800b2fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	691a      	ldr	r2, [r3, #16]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	695a      	ldr	r2, [r3, #20]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b088      	sub	sp, #32
 800a7e6:	af02      	add	r7, sp, #8
 800a7e8:	60f8      	str	r0, [r7, #12]
 800a7ea:	60b9      	str	r1, [r7, #8]
 800a7ec:	603b      	str	r3, [r7, #0]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b20      	cmp	r3, #32
 800a800:	f040 8083 	bne.w	800a90a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <HAL_UART_Transmit+0x2e>
 800a80a:	88fb      	ldrh	r3, [r7, #6]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e07b      	b.n	800a90c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d101      	bne.n	800a822 <HAL_UART_Transmit+0x40>
 800a81e:	2302      	movs	r3, #2
 800a820:	e074      	b.n	800a90c <HAL_UART_Transmit+0x12a>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2221      	movs	r2, #33	; 0x21
 800a834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a838:	f7fc fa0e 	bl	8006c58 <HAL_GetTick>
 800a83c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	88fa      	ldrh	r2, [r7, #6]
 800a842:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	88fa      	ldrh	r2, [r7, #6]
 800a848:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a852:	e042      	b.n	800a8da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a858:	b29b      	uxth	r3, r3
 800a85a:	3b01      	subs	r3, #1
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a86a:	d122      	bne.n	800a8b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2200      	movs	r2, #0
 800a874:	2180      	movs	r1, #128	; 0x80
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f000 fbbf 	bl	800affa <UART_WaitOnFlagUntilTimeout>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e042      	b.n	800a90c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	461a      	mov	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a898:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d103      	bne.n	800a8aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	3302      	adds	r3, #2
 800a8a6:	60bb      	str	r3, [r7, #8]
 800a8a8:	e017      	b.n	800a8da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	60bb      	str	r3, [r7, #8]
 800a8b0:	e013      	b.n	800a8da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2180      	movs	r1, #128	; 0x80
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f000 fb9c 	bl	800affa <UART_WaitOnFlagUntilTimeout>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d001      	beq.n	800a8cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e01f      	b.n	800a90c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	60ba      	str	r2, [r7, #8]
 800a8d2:	781a      	ldrb	r2, [r3, #0]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1b7      	bne.n	800a854 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2140      	movs	r1, #64	; 0x40
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f000 fb83 	bl	800affa <UART_WaitOnFlagUntilTimeout>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	e006      	b.n	800a90c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2220      	movs	r2, #32
 800a902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	e000      	b.n	800a90c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a90a:	2302      	movs	r3, #2
  }
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b088      	sub	sp, #32
 800a918:	af02      	add	r7, sp, #8
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	603b      	str	r3, [r7, #0]
 800a920:	4613      	mov	r3, r2
 800a922:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b20      	cmp	r3, #32
 800a932:	f040 8090 	bne.w	800aa56 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <HAL_UART_Receive+0x2e>
 800a93c:	88fb      	ldrh	r3, [r7, #6]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e088      	b.n	800aa58 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d101      	bne.n	800a954 <HAL_UART_Receive+0x40>
 800a950:	2302      	movs	r3, #2
 800a952:	e081      	b.n	800aa58 <HAL_UART_Receive+0x144>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2222      	movs	r2, #34	; 0x22
 800a966:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a96a:	f7fc f975 	bl	8006c58 <HAL_GetTick>
 800a96e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	88fa      	ldrh	r2, [r7, #6]
 800a974:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	88fa      	ldrh	r2, [r7, #6]
 800a97a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a984:	e05c      	b.n	800aa40 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	3b01      	subs	r3, #1
 800a98e:	b29a      	uxth	r2, r3
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a99c:	d12b      	bne.n	800a9f6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2120      	movs	r1, #32
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 fb26 	bl	800affa <UART_WaitOnFlagUntilTimeout>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e04f      	b.n	800aa58 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10c      	bne.n	800a9de <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	3302      	adds	r3, #2
 800a9da:	60bb      	str	r3, [r7, #8]
 800a9dc:	e030      	b.n	800aa40 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	60bb      	str	r3, [r7, #8]
 800a9f4:	e024      	b.n	800aa40 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2120      	movs	r1, #32
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f000 fafa 	bl	800affa <UART_WaitOnFlagUntilTimeout>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e023      	b.n	800aa58 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d108      	bne.n	800aa2a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6859      	ldr	r1, [r3, #4]
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	60ba      	str	r2, [r7, #8]
 800aa24:	b2ca      	uxtb	r2, r1
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	e00a      	b.n	800aa40 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	1c59      	adds	r1, r3, #1
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aa3c:	b2d2      	uxtb	r2, r2
 800aa3e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d19d      	bne.n	800a986 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2220      	movs	r2, #32
 800aa4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	e000      	b.n	800aa58 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800aa56:	2302      	movs	r3, #2
  }
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3718      	adds	r7, #24
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b20      	cmp	r3, #32
 800aa78:	d153      	bne.n	800ab22 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <HAL_UART_Transmit_DMA+0x26>
 800aa80:	88fb      	ldrh	r3, [r7, #6]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e04c      	b.n	800ab24 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_UART_Transmit_DMA+0x38>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e045      	b.n	800ab24 <HAL_UART_Transmit_DMA+0xc4>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	88fa      	ldrh	r2, [r7, #6]
 800aaaa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	88fa      	ldrh	r2, [r7, #6]
 800aab0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2221      	movs	r2, #33	; 0x21
 800aabc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac4:	4a19      	ldr	r2, [pc, #100]	; (800ab2c <HAL_UART_Transmit_DMA+0xcc>)
 800aac6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aacc:	4a18      	ldr	r2, [pc, #96]	; (800ab30 <HAL_UART_Transmit_DMA+0xd0>)
 800aace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad4:	4a17      	ldr	r2, [pc, #92]	; (800ab34 <HAL_UART_Transmit_DMA+0xd4>)
 800aad6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aadc:	2200      	movs	r2, #0
 800aade:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800aae0:	f107 0308 	add.w	r3, r7, #8
 800aae4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	6819      	ldr	r1, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	88fb      	ldrh	r3, [r7, #6]
 800aaf8:	f7fc fe90 	bl	800781c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab04:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	695a      	ldr	r2, [r3, #20]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ab1c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	e000      	b.n	800ab24 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800ab22:	2302      	movs	r3, #2
  }
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	0800ae75 	.word	0x0800ae75
 800ab30:	0800aec7 	.word	0x0800aec7
 800ab34:	0800af67 	.word	0x0800af67

0800ab38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	4613      	mov	r3, r2
 800ab44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b20      	cmp	r3, #32
 800ab50:	d166      	bne.n	800ac20 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d002      	beq.n	800ab5e <HAL_UART_Receive_DMA+0x26>
 800ab58:	88fb      	ldrh	r3, [r7, #6]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e05f      	b.n	800ac22 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d101      	bne.n	800ab70 <HAL_UART_Receive_DMA+0x38>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	e058      	b.n	800ac22 <HAL_UART_Receive_DMA+0xea>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	88fa      	ldrh	r2, [r7, #6]
 800ab82:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2222      	movs	r2, #34	; 0x22
 800ab8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab96:	4a25      	ldr	r2, [pc, #148]	; (800ac2c <HAL_UART_Receive_DMA+0xf4>)
 800ab98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9e:	4a24      	ldr	r2, [pc, #144]	; (800ac30 <HAL_UART_Receive_DMA+0xf8>)
 800aba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba6:	4a23      	ldr	r2, [pc, #140]	; (800ac34 <HAL_UART_Receive_DMA+0xfc>)
 800aba8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abae:	2200      	movs	r2, #0
 800abb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800abb2:	f107 0308 	add.w	r3, r7, #8
 800abb6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	3304      	adds	r3, #4
 800abc2:	4619      	mov	r1, r3
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	88fb      	ldrh	r3, [r7, #6]
 800abca:	f7fc fe27 	bl	800781c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800abce:	2300      	movs	r3, #0
 800abd0:	613b      	str	r3, [r7, #16]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	613b      	str	r3, [r7, #16]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	613b      	str	r3, [r7, #16]
 800abe2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68da      	ldr	r2, [r3, #12]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abfa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	695a      	ldr	r2, [r3, #20]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f042 0201 	orr.w	r2, r2, #1
 800ac0a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	695a      	ldr	r2, [r3, #20]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac1a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	e000      	b.n	800ac22 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ac20:	2302      	movs	r3, #2
  }
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	0800aee3 	.word	0x0800aee3
 800ac30:	0800af4b 	.word	0x0800af4b
 800ac34:	0800af67 	.word	0x0800af67

0800ac38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	f003 030f 	and.w	r3, r3, #15
 800ac66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10d      	bne.n	800ac8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	f003 0320 	and.w	r3, r3, #32
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d008      	beq.n	800ac8a <HAL_UART_IRQHandler+0x52>
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	f003 0320 	and.w	r3, r3, #32
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d003      	beq.n	800ac8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fab9 	bl	800b1fa <UART_Receive_IT>
      return;
 800ac88:	e0d1      	b.n	800ae2e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 80b0 	beq.w	800adf2 <HAL_UART_IRQHandler+0x1ba>
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d105      	bne.n	800aca8 <HAL_UART_IRQHandler+0x70>
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 80a5 	beq.w	800adf2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	f003 0301 	and.w	r3, r3, #1
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00a      	beq.n	800acc8 <HAL_UART_IRQHandler+0x90>
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc0:	f043 0201 	orr.w	r2, r3, #1
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	f003 0304 	and.w	r3, r3, #4
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00a      	beq.n	800ace8 <HAL_UART_IRQHandler+0xb0>
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d005      	beq.n	800ace8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace0:	f043 0202 	orr.w	r2, r3, #2
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	f003 0302 	and.w	r3, r3, #2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00a      	beq.n	800ad08 <HAL_UART_IRQHandler+0xd0>
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d005      	beq.n	800ad08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad00:	f043 0204 	orr.w	r2, r3, #4
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	f003 0308 	and.w	r3, r3, #8
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00f      	beq.n	800ad32 <HAL_UART_IRQHandler+0xfa>
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	f003 0320 	and.w	r3, r3, #32
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d104      	bne.n	800ad26 <HAL_UART_IRQHandler+0xee>
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d005      	beq.n	800ad32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad2a:	f043 0208 	orr.w	r2, r3, #8
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d078      	beq.n	800ae2c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	f003 0320 	and.w	r3, r3, #32
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d007      	beq.n	800ad54 <HAL_UART_IRQHandler+0x11c>
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	f003 0320 	and.w	r3, r3, #32
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fa53 	bl	800b1fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad5e:	2b40      	cmp	r3, #64	; 0x40
 800ad60:	bf0c      	ite	eq
 800ad62:	2301      	moveq	r3, #1
 800ad64:	2300      	movne	r3, #0
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6e:	f003 0308 	and.w	r3, r3, #8
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d102      	bne.n	800ad7c <HAL_UART_IRQHandler+0x144>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d031      	beq.n	800ade0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f99c 	bl	800b0ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	695b      	ldr	r3, [r3, #20]
 800ad88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8c:	2b40      	cmp	r3, #64	; 0x40
 800ad8e:	d123      	bne.n	800add8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	695a      	ldr	r2, [r3, #20]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d013      	beq.n	800add0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adac:	4a21      	ldr	r2, [pc, #132]	; (800ae34 <HAL_UART_IRQHandler+0x1fc>)
 800adae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fc fd89 	bl	80078cc <HAL_DMA_Abort_IT>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d016      	beq.n	800adee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800adca:	4610      	mov	r0, r2
 800adcc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adce:	e00e      	b.n	800adee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f845 	bl	800ae60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add6:	e00a      	b.n	800adee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f841 	bl	800ae60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adde:	e006      	b.n	800adee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f83d 	bl	800ae60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800adec:	e01e      	b.n	800ae2c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adee:	bf00      	nop
    return;
 800adf0:	e01c      	b.n	800ae2c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d008      	beq.n	800ae0e <HAL_UART_IRQHandler+0x1d6>
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f989 	bl	800b11e <UART_Transmit_IT>
    return;
 800ae0c:	e00f      	b.n	800ae2e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00a      	beq.n	800ae2e <HAL_UART_IRQHandler+0x1f6>
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d005      	beq.n	800ae2e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f9d1 	bl	800b1ca <UART_EndTransmit_IT>
    return;
 800ae28:	bf00      	nop
 800ae2a:	e000      	b.n	800ae2e <HAL_UART_IRQHandler+0x1f6>
    return;
 800ae2c:	bf00      	nop
  }
}
 800ae2e:	3720      	adds	r7, #32
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	0800b0f7 	.word	0x0800b0f7

0800ae38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae80:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d113      	bne.n	800aeb8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	695a      	ldr	r2, [r3, #20]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aea4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68da      	ldr	r2, [r3, #12]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aeb4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aeb6:	e002      	b.n	800aebe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f7ff ffbd 	bl	800ae38 <HAL_UART_TxCpltCallback>
}
 800aebe:	bf00      	nop
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f7ff ffb9 	bl	800ae4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeee:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d11e      	bne.n	800af3c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68da      	ldr	r2, [r3, #12]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af12:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	695a      	ldr	r2, [r3, #20]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f022 0201 	bic.w	r2, r2, #1
 800af22:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	695a      	ldr	r2, [r3, #20]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af32:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2220      	movs	r2, #32
 800af38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f7fa ffe3 	bl	8005f08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af42:	bf00      	nop
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f7fa ffe0 	bl	8005f1e <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af5e:	bf00      	nop
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	695b      	ldr	r3, [r3, #20]
 800af7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af82:	2b80      	cmp	r3, #128	; 0x80
 800af84:	bf0c      	ite	eq
 800af86:	2301      	moveq	r3, #1
 800af88:	2300      	movne	r3, #0
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b21      	cmp	r3, #33	; 0x21
 800af98:	d108      	bne.n	800afac <UART_DMAError+0x46>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d005      	beq.n	800afac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2200      	movs	r2, #0
 800afa4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800afa6:	68b8      	ldr	r0, [r7, #8]
 800afa8:	f000 f871 	bl	800b08e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb6:	2b40      	cmp	r3, #64	; 0x40
 800afb8:	bf0c      	ite	eq
 800afba:	2301      	moveq	r3, #1
 800afbc:	2300      	movne	r3, #0
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b22      	cmp	r3, #34	; 0x22
 800afcc:	d108      	bne.n	800afe0 <UART_DMAError+0x7a>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d005      	beq.n	800afe0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2200      	movs	r2, #0
 800afd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800afda:	68b8      	ldr	r0, [r7, #8]
 800afdc:	f000 f86d 	bl	800b0ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe4:	f043 0210 	orr.w	r2, r3, #16
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afec:	68b8      	ldr	r0, [r7, #8]
 800afee:	f7ff ff37 	bl	800ae60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aff2:	bf00      	nop
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	60b9      	str	r1, [r7, #8]
 800b004:	603b      	str	r3, [r7, #0]
 800b006:	4613      	mov	r3, r2
 800b008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b00a:	e02c      	b.n	800b066 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b012:	d028      	beq.n	800b066 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d007      	beq.n	800b02a <UART_WaitOnFlagUntilTimeout+0x30>
 800b01a:	f7fb fe1d 	bl	8006c58 <HAL_GetTick>
 800b01e:	4602      	mov	r2, r0
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	429a      	cmp	r2, r3
 800b028:	d21d      	bcs.n	800b066 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68da      	ldr	r2, [r3, #12]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b038:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	695a      	ldr	r2, [r3, #20]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f022 0201 	bic.w	r2, r2, #1
 800b048:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2220      	movs	r2, #32
 800b04e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2220      	movs	r2, #32
 800b056:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e00f      	b.n	800b086 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	4013      	ands	r3, r2
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	429a      	cmp	r2, r3
 800b074:	bf0c      	ite	eq
 800b076:	2301      	moveq	r3, #1
 800b078:	2300      	movne	r3, #0
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	461a      	mov	r2, r3
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	429a      	cmp	r2, r3
 800b082:	d0c3      	beq.n	800b00c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b08e:	b480      	push	{r7}
 800b090:	b083      	sub	sp, #12
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68da      	ldr	r2, [r3, #12]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b0a4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2220      	movs	r2, #32
 800b0aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b0ae:	bf00      	nop
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b083      	sub	sp, #12
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68da      	ldr	r2, [r3, #12]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	695a      	ldr	r2, [r3, #20]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f022 0201 	bic.w	r2, r2, #1
 800b0e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2220      	movs	r2, #32
 800b0e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b0ea:	bf00      	nop
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f7ff fea5 	bl	800ae60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b116:	bf00      	nop
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b11e:	b480      	push	{r7}
 800b120:	b085      	sub	sp, #20
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b21      	cmp	r3, #33	; 0x21
 800b130:	d144      	bne.n	800b1bc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b13a:	d11a      	bne.n	800b172 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a1b      	ldr	r3, [r3, #32]
 800b140:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b150:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d105      	bne.n	800b166 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	1c9a      	adds	r2, r3, #2
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	621a      	str	r2, [r3, #32]
 800b164:	e00e      	b.n	800b184 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	621a      	str	r2, [r3, #32]
 800b170:	e008      	b.n	800b184 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	1c59      	adds	r1, r3, #1
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	6211      	str	r1, [r2, #32]
 800b17c:	781a      	ldrb	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b188:	b29b      	uxth	r3, r3
 800b18a:	3b01      	subs	r3, #1
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	4619      	mov	r1, r3
 800b192:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10f      	bne.n	800b1b8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68da      	ldr	r2, [r3, #12]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68da      	ldr	r2, [r3, #12]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e000      	b.n	800b1be <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b1bc:	2302      	movs	r3, #2
  }
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b082      	sub	sp, #8
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68da      	ldr	r2, [r3, #12]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fe24 	bl	800ae38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b22      	cmp	r3, #34	; 0x22
 800b20c:	d171      	bne.n	800b2f2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b216:	d123      	bne.n	800b260 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10e      	bne.n	800b244 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b232:	b29a      	uxth	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23c:	1c9a      	adds	r2, r3, #2
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	629a      	str	r2, [r3, #40]	; 0x28
 800b242:	e029      	b.n	800b298 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	b29a      	uxth	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	629a      	str	r2, [r3, #40]	; 0x28
 800b25e:	e01b      	b.n	800b298 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10a      	bne.n	800b27e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6858      	ldr	r0, [r3, #4]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b272:	1c59      	adds	r1, r3, #1
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	6291      	str	r1, [r2, #40]	; 0x28
 800b278:	b2c2      	uxtb	r2, r0
 800b27a:	701a      	strb	r2, [r3, #0]
 800b27c:	e00c      	b.n	800b298 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	b2da      	uxtb	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28a:	1c58      	adds	r0, r3, #1
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	6288      	str	r0, [r1, #40]	; 0x28
 800b290:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b294:	b2d2      	uxtb	r2, r2
 800b296:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d120      	bne.n	800b2ee <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f022 0220 	bic.w	r2, r2, #32
 800b2ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	695a      	ldr	r2, [r3, #20]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f022 0201 	bic.w	r2, r2, #1
 800b2da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7fa fe0f 	bl	8005f08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e002      	b.n	800b2f4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e000      	b.n	800b2f4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b2f2:	2302      	movs	r3, #2
  }
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b300:	b085      	sub	sp, #20
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	430a      	orrs	r2, r1
 800b31a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	431a      	orrs	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	431a      	orrs	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	69db      	ldr	r3, [r3, #28]
 800b330:	4313      	orrs	r3, r2
 800b332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b33e:	f023 030c 	bic.w	r3, r3, #12
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	6812      	ldr	r2, [r2, #0]
 800b346:	68f9      	ldr	r1, [r7, #12]
 800b348:	430b      	orrs	r3, r1
 800b34a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	699a      	ldr	r2, [r3, #24]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b36a:	f040 818b 	bne.w	800b684 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4ac1      	ldr	r2, [pc, #772]	; (800b678 <UART_SetConfig+0x37c>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d005      	beq.n	800b384 <UART_SetConfig+0x88>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4abf      	ldr	r2, [pc, #764]	; (800b67c <UART_SetConfig+0x380>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	f040 80bd 	bne.w	800b4fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b384:	f7fd fc40 	bl	8008c08 <HAL_RCC_GetPCLK2Freq>
 800b388:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	461d      	mov	r5, r3
 800b38e:	f04f 0600 	mov.w	r6, #0
 800b392:	46a8      	mov	r8, r5
 800b394:	46b1      	mov	r9, r6
 800b396:	eb18 0308 	adds.w	r3, r8, r8
 800b39a:	eb49 0409 	adc.w	r4, r9, r9
 800b39e:	4698      	mov	r8, r3
 800b3a0:	46a1      	mov	r9, r4
 800b3a2:	eb18 0805 	adds.w	r8, r8, r5
 800b3a6:	eb49 0906 	adc.w	r9, r9, r6
 800b3aa:	f04f 0100 	mov.w	r1, #0
 800b3ae:	f04f 0200 	mov.w	r2, #0
 800b3b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b3b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b3ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b3be:	4688      	mov	r8, r1
 800b3c0:	4691      	mov	r9, r2
 800b3c2:	eb18 0005 	adds.w	r0, r8, r5
 800b3c6:	eb49 0106 	adc.w	r1, r9, r6
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	461d      	mov	r5, r3
 800b3d0:	f04f 0600 	mov.w	r6, #0
 800b3d4:	196b      	adds	r3, r5, r5
 800b3d6:	eb46 0406 	adc.w	r4, r6, r6
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4623      	mov	r3, r4
 800b3de:	f7f5 fc33 	bl	8000c48 <__aeabi_uldivmod>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	4ba5      	ldr	r3, [pc, #660]	; (800b680 <UART_SetConfig+0x384>)
 800b3ea:	fba3 2302 	umull	r2, r3, r3, r2
 800b3ee:	095b      	lsrs	r3, r3, #5
 800b3f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	461d      	mov	r5, r3
 800b3f8:	f04f 0600 	mov.w	r6, #0
 800b3fc:	46a9      	mov	r9, r5
 800b3fe:	46b2      	mov	sl, r6
 800b400:	eb19 0309 	adds.w	r3, r9, r9
 800b404:	eb4a 040a 	adc.w	r4, sl, sl
 800b408:	4699      	mov	r9, r3
 800b40a:	46a2      	mov	sl, r4
 800b40c:	eb19 0905 	adds.w	r9, r9, r5
 800b410:	eb4a 0a06 	adc.w	sl, sl, r6
 800b414:	f04f 0100 	mov.w	r1, #0
 800b418:	f04f 0200 	mov.w	r2, #0
 800b41c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b420:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b424:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b428:	4689      	mov	r9, r1
 800b42a:	4692      	mov	sl, r2
 800b42c:	eb19 0005 	adds.w	r0, r9, r5
 800b430:	eb4a 0106 	adc.w	r1, sl, r6
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	461d      	mov	r5, r3
 800b43a:	f04f 0600 	mov.w	r6, #0
 800b43e:	196b      	adds	r3, r5, r5
 800b440:	eb46 0406 	adc.w	r4, r6, r6
 800b444:	461a      	mov	r2, r3
 800b446:	4623      	mov	r3, r4
 800b448:	f7f5 fbfe 	bl	8000c48 <__aeabi_uldivmod>
 800b44c:	4603      	mov	r3, r0
 800b44e:	460c      	mov	r4, r1
 800b450:	461a      	mov	r2, r3
 800b452:	4b8b      	ldr	r3, [pc, #556]	; (800b680 <UART_SetConfig+0x384>)
 800b454:	fba3 1302 	umull	r1, r3, r3, r2
 800b458:	095b      	lsrs	r3, r3, #5
 800b45a:	2164      	movs	r1, #100	; 0x64
 800b45c:	fb01 f303 	mul.w	r3, r1, r3
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	3332      	adds	r3, #50	; 0x32
 800b466:	4a86      	ldr	r2, [pc, #536]	; (800b680 <UART_SetConfig+0x384>)
 800b468:	fba2 2303 	umull	r2, r3, r2, r3
 800b46c:	095b      	lsrs	r3, r3, #5
 800b46e:	005b      	lsls	r3, r3, #1
 800b470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b474:	4498      	add	r8, r3
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	461d      	mov	r5, r3
 800b47a:	f04f 0600 	mov.w	r6, #0
 800b47e:	46a9      	mov	r9, r5
 800b480:	46b2      	mov	sl, r6
 800b482:	eb19 0309 	adds.w	r3, r9, r9
 800b486:	eb4a 040a 	adc.w	r4, sl, sl
 800b48a:	4699      	mov	r9, r3
 800b48c:	46a2      	mov	sl, r4
 800b48e:	eb19 0905 	adds.w	r9, r9, r5
 800b492:	eb4a 0a06 	adc.w	sl, sl, r6
 800b496:	f04f 0100 	mov.w	r1, #0
 800b49a:	f04f 0200 	mov.w	r2, #0
 800b49e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b4a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b4aa:	4689      	mov	r9, r1
 800b4ac:	4692      	mov	sl, r2
 800b4ae:	eb19 0005 	adds.w	r0, r9, r5
 800b4b2:	eb4a 0106 	adc.w	r1, sl, r6
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	461d      	mov	r5, r3
 800b4bc:	f04f 0600 	mov.w	r6, #0
 800b4c0:	196b      	adds	r3, r5, r5
 800b4c2:	eb46 0406 	adc.w	r4, r6, r6
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	4623      	mov	r3, r4
 800b4ca:	f7f5 fbbd 	bl	8000c48 <__aeabi_uldivmod>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	4b6a      	ldr	r3, [pc, #424]	; (800b680 <UART_SetConfig+0x384>)
 800b4d6:	fba3 1302 	umull	r1, r3, r3, r2
 800b4da:	095b      	lsrs	r3, r3, #5
 800b4dc:	2164      	movs	r1, #100	; 0x64
 800b4de:	fb01 f303 	mul.w	r3, r1, r3
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	3332      	adds	r3, #50	; 0x32
 800b4e8:	4a65      	ldr	r2, [pc, #404]	; (800b680 <UART_SetConfig+0x384>)
 800b4ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ee:	095b      	lsrs	r3, r3, #5
 800b4f0:	f003 0207 	and.w	r2, r3, #7
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4442      	add	r2, r8
 800b4fa:	609a      	str	r2, [r3, #8]
 800b4fc:	e26f      	b.n	800b9de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4fe:	f7fd fb6f 	bl	8008be0 <HAL_RCC_GetPCLK1Freq>
 800b502:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	461d      	mov	r5, r3
 800b508:	f04f 0600 	mov.w	r6, #0
 800b50c:	46a8      	mov	r8, r5
 800b50e:	46b1      	mov	r9, r6
 800b510:	eb18 0308 	adds.w	r3, r8, r8
 800b514:	eb49 0409 	adc.w	r4, r9, r9
 800b518:	4698      	mov	r8, r3
 800b51a:	46a1      	mov	r9, r4
 800b51c:	eb18 0805 	adds.w	r8, r8, r5
 800b520:	eb49 0906 	adc.w	r9, r9, r6
 800b524:	f04f 0100 	mov.w	r1, #0
 800b528:	f04f 0200 	mov.w	r2, #0
 800b52c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b530:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b534:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b538:	4688      	mov	r8, r1
 800b53a:	4691      	mov	r9, r2
 800b53c:	eb18 0005 	adds.w	r0, r8, r5
 800b540:	eb49 0106 	adc.w	r1, r9, r6
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	461d      	mov	r5, r3
 800b54a:	f04f 0600 	mov.w	r6, #0
 800b54e:	196b      	adds	r3, r5, r5
 800b550:	eb46 0406 	adc.w	r4, r6, r6
 800b554:	461a      	mov	r2, r3
 800b556:	4623      	mov	r3, r4
 800b558:	f7f5 fb76 	bl	8000c48 <__aeabi_uldivmod>
 800b55c:	4603      	mov	r3, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	461a      	mov	r2, r3
 800b562:	4b47      	ldr	r3, [pc, #284]	; (800b680 <UART_SetConfig+0x384>)
 800b564:	fba3 2302 	umull	r2, r3, r3, r2
 800b568:	095b      	lsrs	r3, r3, #5
 800b56a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	461d      	mov	r5, r3
 800b572:	f04f 0600 	mov.w	r6, #0
 800b576:	46a9      	mov	r9, r5
 800b578:	46b2      	mov	sl, r6
 800b57a:	eb19 0309 	adds.w	r3, r9, r9
 800b57e:	eb4a 040a 	adc.w	r4, sl, sl
 800b582:	4699      	mov	r9, r3
 800b584:	46a2      	mov	sl, r4
 800b586:	eb19 0905 	adds.w	r9, r9, r5
 800b58a:	eb4a 0a06 	adc.w	sl, sl, r6
 800b58e:	f04f 0100 	mov.w	r1, #0
 800b592:	f04f 0200 	mov.w	r2, #0
 800b596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b59a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b59e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b5a2:	4689      	mov	r9, r1
 800b5a4:	4692      	mov	sl, r2
 800b5a6:	eb19 0005 	adds.w	r0, r9, r5
 800b5aa:	eb4a 0106 	adc.w	r1, sl, r6
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	461d      	mov	r5, r3
 800b5b4:	f04f 0600 	mov.w	r6, #0
 800b5b8:	196b      	adds	r3, r5, r5
 800b5ba:	eb46 0406 	adc.w	r4, r6, r6
 800b5be:	461a      	mov	r2, r3
 800b5c0:	4623      	mov	r3, r4
 800b5c2:	f7f5 fb41 	bl	8000c48 <__aeabi_uldivmod>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	460c      	mov	r4, r1
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	4b2c      	ldr	r3, [pc, #176]	; (800b680 <UART_SetConfig+0x384>)
 800b5ce:	fba3 1302 	umull	r1, r3, r3, r2
 800b5d2:	095b      	lsrs	r3, r3, #5
 800b5d4:	2164      	movs	r1, #100	; 0x64
 800b5d6:	fb01 f303 	mul.w	r3, r1, r3
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	00db      	lsls	r3, r3, #3
 800b5de:	3332      	adds	r3, #50	; 0x32
 800b5e0:	4a27      	ldr	r2, [pc, #156]	; (800b680 <UART_SetConfig+0x384>)
 800b5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e6:	095b      	lsrs	r3, r3, #5
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b5ee:	4498      	add	r8, r3
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	461d      	mov	r5, r3
 800b5f4:	f04f 0600 	mov.w	r6, #0
 800b5f8:	46a9      	mov	r9, r5
 800b5fa:	46b2      	mov	sl, r6
 800b5fc:	eb19 0309 	adds.w	r3, r9, r9
 800b600:	eb4a 040a 	adc.w	r4, sl, sl
 800b604:	4699      	mov	r9, r3
 800b606:	46a2      	mov	sl, r4
 800b608:	eb19 0905 	adds.w	r9, r9, r5
 800b60c:	eb4a 0a06 	adc.w	sl, sl, r6
 800b610:	f04f 0100 	mov.w	r1, #0
 800b614:	f04f 0200 	mov.w	r2, #0
 800b618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b61c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b620:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b624:	4689      	mov	r9, r1
 800b626:	4692      	mov	sl, r2
 800b628:	eb19 0005 	adds.w	r0, r9, r5
 800b62c:	eb4a 0106 	adc.w	r1, sl, r6
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	461d      	mov	r5, r3
 800b636:	f04f 0600 	mov.w	r6, #0
 800b63a:	196b      	adds	r3, r5, r5
 800b63c:	eb46 0406 	adc.w	r4, r6, r6
 800b640:	461a      	mov	r2, r3
 800b642:	4623      	mov	r3, r4
 800b644:	f7f5 fb00 	bl	8000c48 <__aeabi_uldivmod>
 800b648:	4603      	mov	r3, r0
 800b64a:	460c      	mov	r4, r1
 800b64c:	461a      	mov	r2, r3
 800b64e:	4b0c      	ldr	r3, [pc, #48]	; (800b680 <UART_SetConfig+0x384>)
 800b650:	fba3 1302 	umull	r1, r3, r3, r2
 800b654:	095b      	lsrs	r3, r3, #5
 800b656:	2164      	movs	r1, #100	; 0x64
 800b658:	fb01 f303 	mul.w	r3, r1, r3
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	00db      	lsls	r3, r3, #3
 800b660:	3332      	adds	r3, #50	; 0x32
 800b662:	4a07      	ldr	r2, [pc, #28]	; (800b680 <UART_SetConfig+0x384>)
 800b664:	fba2 2303 	umull	r2, r3, r2, r3
 800b668:	095b      	lsrs	r3, r3, #5
 800b66a:	f003 0207 	and.w	r2, r3, #7
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4442      	add	r2, r8
 800b674:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b676:	e1b2      	b.n	800b9de <UART_SetConfig+0x6e2>
 800b678:	40011000 	.word	0x40011000
 800b67c:	40011400 	.word	0x40011400
 800b680:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4ad7      	ldr	r2, [pc, #860]	; (800b9e8 <UART_SetConfig+0x6ec>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d005      	beq.n	800b69a <UART_SetConfig+0x39e>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4ad6      	ldr	r2, [pc, #856]	; (800b9ec <UART_SetConfig+0x6f0>)
 800b694:	4293      	cmp	r3, r2
 800b696:	f040 80d1 	bne.w	800b83c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b69a:	f7fd fab5 	bl	8008c08 <HAL_RCC_GetPCLK2Freq>
 800b69e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	469a      	mov	sl, r3
 800b6a4:	f04f 0b00 	mov.w	fp, #0
 800b6a8:	46d0      	mov	r8, sl
 800b6aa:	46d9      	mov	r9, fp
 800b6ac:	eb18 0308 	adds.w	r3, r8, r8
 800b6b0:	eb49 0409 	adc.w	r4, r9, r9
 800b6b4:	4698      	mov	r8, r3
 800b6b6:	46a1      	mov	r9, r4
 800b6b8:	eb18 080a 	adds.w	r8, r8, sl
 800b6bc:	eb49 090b 	adc.w	r9, r9, fp
 800b6c0:	f04f 0100 	mov.w	r1, #0
 800b6c4:	f04f 0200 	mov.w	r2, #0
 800b6c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b6cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b6d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b6d4:	4688      	mov	r8, r1
 800b6d6:	4691      	mov	r9, r2
 800b6d8:	eb1a 0508 	adds.w	r5, sl, r8
 800b6dc:	eb4b 0609 	adc.w	r6, fp, r9
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	f04f 0200 	mov.w	r2, #0
 800b6ea:	f04f 0300 	mov.w	r3, #0
 800b6ee:	f04f 0400 	mov.w	r4, #0
 800b6f2:	0094      	lsls	r4, r2, #2
 800b6f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b6f8:	008b      	lsls	r3, r1, #2
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	4623      	mov	r3, r4
 800b6fe:	4628      	mov	r0, r5
 800b700:	4631      	mov	r1, r6
 800b702:	f7f5 faa1 	bl	8000c48 <__aeabi_uldivmod>
 800b706:	4603      	mov	r3, r0
 800b708:	460c      	mov	r4, r1
 800b70a:	461a      	mov	r2, r3
 800b70c:	4bb8      	ldr	r3, [pc, #736]	; (800b9f0 <UART_SetConfig+0x6f4>)
 800b70e:	fba3 2302 	umull	r2, r3, r3, r2
 800b712:	095b      	lsrs	r3, r3, #5
 800b714:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	469b      	mov	fp, r3
 800b71c:	f04f 0c00 	mov.w	ip, #0
 800b720:	46d9      	mov	r9, fp
 800b722:	46e2      	mov	sl, ip
 800b724:	eb19 0309 	adds.w	r3, r9, r9
 800b728:	eb4a 040a 	adc.w	r4, sl, sl
 800b72c:	4699      	mov	r9, r3
 800b72e:	46a2      	mov	sl, r4
 800b730:	eb19 090b 	adds.w	r9, r9, fp
 800b734:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b738:	f04f 0100 	mov.w	r1, #0
 800b73c:	f04f 0200 	mov.w	r2, #0
 800b740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b744:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b748:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b74c:	4689      	mov	r9, r1
 800b74e:	4692      	mov	sl, r2
 800b750:	eb1b 0509 	adds.w	r5, fp, r9
 800b754:	eb4c 060a 	adc.w	r6, ip, sl
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	4619      	mov	r1, r3
 800b75e:	f04f 0200 	mov.w	r2, #0
 800b762:	f04f 0300 	mov.w	r3, #0
 800b766:	f04f 0400 	mov.w	r4, #0
 800b76a:	0094      	lsls	r4, r2, #2
 800b76c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b770:	008b      	lsls	r3, r1, #2
 800b772:	461a      	mov	r2, r3
 800b774:	4623      	mov	r3, r4
 800b776:	4628      	mov	r0, r5
 800b778:	4631      	mov	r1, r6
 800b77a:	f7f5 fa65 	bl	8000c48 <__aeabi_uldivmod>
 800b77e:	4603      	mov	r3, r0
 800b780:	460c      	mov	r4, r1
 800b782:	461a      	mov	r2, r3
 800b784:	4b9a      	ldr	r3, [pc, #616]	; (800b9f0 <UART_SetConfig+0x6f4>)
 800b786:	fba3 1302 	umull	r1, r3, r3, r2
 800b78a:	095b      	lsrs	r3, r3, #5
 800b78c:	2164      	movs	r1, #100	; 0x64
 800b78e:	fb01 f303 	mul.w	r3, r1, r3
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	011b      	lsls	r3, r3, #4
 800b796:	3332      	adds	r3, #50	; 0x32
 800b798:	4a95      	ldr	r2, [pc, #596]	; (800b9f0 <UART_SetConfig+0x6f4>)
 800b79a:	fba2 2303 	umull	r2, r3, r2, r3
 800b79e:	095b      	lsrs	r3, r3, #5
 800b7a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7a4:	4498      	add	r8, r3
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	469b      	mov	fp, r3
 800b7aa:	f04f 0c00 	mov.w	ip, #0
 800b7ae:	46d9      	mov	r9, fp
 800b7b0:	46e2      	mov	sl, ip
 800b7b2:	eb19 0309 	adds.w	r3, r9, r9
 800b7b6:	eb4a 040a 	adc.w	r4, sl, sl
 800b7ba:	4699      	mov	r9, r3
 800b7bc:	46a2      	mov	sl, r4
 800b7be:	eb19 090b 	adds.w	r9, r9, fp
 800b7c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b7c6:	f04f 0100 	mov.w	r1, #0
 800b7ca:	f04f 0200 	mov.w	r2, #0
 800b7ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b7d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b7da:	4689      	mov	r9, r1
 800b7dc:	4692      	mov	sl, r2
 800b7de:	eb1b 0509 	adds.w	r5, fp, r9
 800b7e2:	eb4c 060a 	adc.w	r6, ip, sl
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	f04f 0200 	mov.w	r2, #0
 800b7f0:	f04f 0300 	mov.w	r3, #0
 800b7f4:	f04f 0400 	mov.w	r4, #0
 800b7f8:	0094      	lsls	r4, r2, #2
 800b7fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b7fe:	008b      	lsls	r3, r1, #2
 800b800:	461a      	mov	r2, r3
 800b802:	4623      	mov	r3, r4
 800b804:	4628      	mov	r0, r5
 800b806:	4631      	mov	r1, r6
 800b808:	f7f5 fa1e 	bl	8000c48 <__aeabi_uldivmod>
 800b80c:	4603      	mov	r3, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	461a      	mov	r2, r3
 800b812:	4b77      	ldr	r3, [pc, #476]	; (800b9f0 <UART_SetConfig+0x6f4>)
 800b814:	fba3 1302 	umull	r1, r3, r3, r2
 800b818:	095b      	lsrs	r3, r3, #5
 800b81a:	2164      	movs	r1, #100	; 0x64
 800b81c:	fb01 f303 	mul.w	r3, r1, r3
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	011b      	lsls	r3, r3, #4
 800b824:	3332      	adds	r3, #50	; 0x32
 800b826:	4a72      	ldr	r2, [pc, #456]	; (800b9f0 <UART_SetConfig+0x6f4>)
 800b828:	fba2 2303 	umull	r2, r3, r2, r3
 800b82c:	095b      	lsrs	r3, r3, #5
 800b82e:	f003 020f 	and.w	r2, r3, #15
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4442      	add	r2, r8
 800b838:	609a      	str	r2, [r3, #8]
 800b83a:	e0d0      	b.n	800b9de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b83c:	f7fd f9d0 	bl	8008be0 <HAL_RCC_GetPCLK1Freq>
 800b840:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	469a      	mov	sl, r3
 800b846:	f04f 0b00 	mov.w	fp, #0
 800b84a:	46d0      	mov	r8, sl
 800b84c:	46d9      	mov	r9, fp
 800b84e:	eb18 0308 	adds.w	r3, r8, r8
 800b852:	eb49 0409 	adc.w	r4, r9, r9
 800b856:	4698      	mov	r8, r3
 800b858:	46a1      	mov	r9, r4
 800b85a:	eb18 080a 	adds.w	r8, r8, sl
 800b85e:	eb49 090b 	adc.w	r9, r9, fp
 800b862:	f04f 0100 	mov.w	r1, #0
 800b866:	f04f 0200 	mov.w	r2, #0
 800b86a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b86e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b872:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b876:	4688      	mov	r8, r1
 800b878:	4691      	mov	r9, r2
 800b87a:	eb1a 0508 	adds.w	r5, sl, r8
 800b87e:	eb4b 0609 	adc.w	r6, fp, r9
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	4619      	mov	r1, r3
 800b888:	f04f 0200 	mov.w	r2, #0
 800b88c:	f04f 0300 	mov.w	r3, #0
 800b890:	f04f 0400 	mov.w	r4, #0
 800b894:	0094      	lsls	r4, r2, #2
 800b896:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b89a:	008b      	lsls	r3, r1, #2
 800b89c:	461a      	mov	r2, r3
 800b89e:	4623      	mov	r3, r4
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	4631      	mov	r1, r6
 800b8a4:	f7f5 f9d0 	bl	8000c48 <__aeabi_uldivmod>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	4b50      	ldr	r3, [pc, #320]	; (800b9f0 <UART_SetConfig+0x6f4>)
 800b8b0:	fba3 2302 	umull	r2, r3, r3, r2
 800b8b4:	095b      	lsrs	r3, r3, #5
 800b8b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	469b      	mov	fp, r3
 800b8be:	f04f 0c00 	mov.w	ip, #0
 800b8c2:	46d9      	mov	r9, fp
 800b8c4:	46e2      	mov	sl, ip
 800b8c6:	eb19 0309 	adds.w	r3, r9, r9
 800b8ca:	eb4a 040a 	adc.w	r4, sl, sl
 800b8ce:	4699      	mov	r9, r3
 800b8d0:	46a2      	mov	sl, r4
 800b8d2:	eb19 090b 	adds.w	r9, r9, fp
 800b8d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b8da:	f04f 0100 	mov.w	r1, #0
 800b8de:	f04f 0200 	mov.w	r2, #0
 800b8e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b8e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b8ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b8ee:	4689      	mov	r9, r1
 800b8f0:	4692      	mov	sl, r2
 800b8f2:	eb1b 0509 	adds.w	r5, fp, r9
 800b8f6:	eb4c 060a 	adc.w	r6, ip, sl
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	4619      	mov	r1, r3
 800b900:	f04f 0200 	mov.w	r2, #0
 800b904:	f04f 0300 	mov.w	r3, #0
 800b908:	f04f 0400 	mov.w	r4, #0
 800b90c:	0094      	lsls	r4, r2, #2
 800b90e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b912:	008b      	lsls	r3, r1, #2
 800b914:	461a      	mov	r2, r3
 800b916:	4623      	mov	r3, r4
 800b918:	4628      	mov	r0, r5
 800b91a:	4631      	mov	r1, r6
 800b91c:	f7f5 f994 	bl	8000c48 <__aeabi_uldivmod>
 800b920:	4603      	mov	r3, r0
 800b922:	460c      	mov	r4, r1
 800b924:	461a      	mov	r2, r3
 800b926:	4b32      	ldr	r3, [pc, #200]	; (800b9f0 <UART_SetConfig+0x6f4>)
 800b928:	fba3 1302 	umull	r1, r3, r3, r2
 800b92c:	095b      	lsrs	r3, r3, #5
 800b92e:	2164      	movs	r1, #100	; 0x64
 800b930:	fb01 f303 	mul.w	r3, r1, r3
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	011b      	lsls	r3, r3, #4
 800b938:	3332      	adds	r3, #50	; 0x32
 800b93a:	4a2d      	ldr	r2, [pc, #180]	; (800b9f0 <UART_SetConfig+0x6f4>)
 800b93c:	fba2 2303 	umull	r2, r3, r2, r3
 800b940:	095b      	lsrs	r3, r3, #5
 800b942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b946:	4498      	add	r8, r3
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	469b      	mov	fp, r3
 800b94c:	f04f 0c00 	mov.w	ip, #0
 800b950:	46d9      	mov	r9, fp
 800b952:	46e2      	mov	sl, ip
 800b954:	eb19 0309 	adds.w	r3, r9, r9
 800b958:	eb4a 040a 	adc.w	r4, sl, sl
 800b95c:	4699      	mov	r9, r3
 800b95e:	46a2      	mov	sl, r4
 800b960:	eb19 090b 	adds.w	r9, r9, fp
 800b964:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b968:	f04f 0100 	mov.w	r1, #0
 800b96c:	f04f 0200 	mov.w	r2, #0
 800b970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b97c:	4689      	mov	r9, r1
 800b97e:	4692      	mov	sl, r2
 800b980:	eb1b 0509 	adds.w	r5, fp, r9
 800b984:	eb4c 060a 	adc.w	r6, ip, sl
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	4619      	mov	r1, r3
 800b98e:	f04f 0200 	mov.w	r2, #0
 800b992:	f04f 0300 	mov.w	r3, #0
 800b996:	f04f 0400 	mov.w	r4, #0
 800b99a:	0094      	lsls	r4, r2, #2
 800b99c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b9a0:	008b      	lsls	r3, r1, #2
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	4623      	mov	r3, r4
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	4631      	mov	r1, r6
 800b9aa:	f7f5 f94d 	bl	8000c48 <__aeabi_uldivmod>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	4b0e      	ldr	r3, [pc, #56]	; (800b9f0 <UART_SetConfig+0x6f4>)
 800b9b6:	fba3 1302 	umull	r1, r3, r3, r2
 800b9ba:	095b      	lsrs	r3, r3, #5
 800b9bc:	2164      	movs	r1, #100	; 0x64
 800b9be:	fb01 f303 	mul.w	r3, r1, r3
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	011b      	lsls	r3, r3, #4
 800b9c6:	3332      	adds	r3, #50	; 0x32
 800b9c8:	4a09      	ldr	r2, [pc, #36]	; (800b9f0 <UART_SetConfig+0x6f4>)
 800b9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ce:	095b      	lsrs	r3, r3, #5
 800b9d0:	f003 020f 	and.w	r2, r3, #15
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4442      	add	r2, r8
 800b9da:	609a      	str	r2, [r3, #8]
}
 800b9dc:	e7ff      	b.n	800b9de <UART_SetConfig+0x6e2>
 800b9de:	bf00      	nop
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e8:	40011000 	.word	0x40011000
 800b9ec:	40011400 	.word	0x40011400
 800b9f0:	51eb851f 	.word	0x51eb851f

0800b9f4 <FILTER_init>:
 *  Created on: 20 ao�t 2020
 *      Author: Th�o
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 800b9f4:	b480      	push	{r7}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	71fb      	strb	r3, [r7, #7]
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 800ba02:	2300      	movs	r3, #0
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	e00c      	b.n	800ba22 <FILTER_init+0x2e>
		filter->settings[s] = settings[s] ;
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	4413      	add	r3, r2
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	68f9      	ldr	r1, [r7, #12]
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	440b      	add	r3, r1
 800ba1a:	601a      	str	r2, [r3, #0]
	for(int32_t s = 0; s < 3; s++)
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	617b      	str	r3, [r7, #20]
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	ddef      	ble.n	800ba08 <FILTER_init+0x14>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	79fa      	ldrb	r2, [r7, #7]
 800ba2c:	761a      	strb	r2, [r3, #24]
}
 800ba2e:	bf00      	nop
 800ba30:	371c      	adds	r7, #28
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
 800ba3a:	b480      	push	{r7}
 800ba3c:	b085      	sub	sp, #20
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	ed87 0a00 	vstr	s0, [r7]
	float to_return = 0 ;
 800ba46:	f04f 0300 	mov.w	r3, #0
 800ba4a:	60fb      	str	r3, [r7, #12]
	switch(filter->order){
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	7e1b      	ldrb	r3, [r3, #24]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d01f      	beq.n	800ba94 <FILTER_process+0x5a>
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d047      	beq.n	800bae8 <FILTER_process+0xae>
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d148      	bne.n	800baee <FILTER_process+0xb4>
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	ed93 7a00 	vldr	s14, [r3]
 800ba62:	edd7 7a00 	vldr	s15, [r7]
 800ba66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	edd3 6a04 	vldr	s13, [r3, #16]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[1] = filter->values[0];
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68da      	ldr	r2, [r3, #12]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	611a      	str	r2, [r3, #16]
			to_return =  filter->values[0];
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	60fb      	str	r3, [r7, #12]
			break ;
 800ba92:	e02f      	b.n	800baf4 <FILTER_process+0xba>

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	ed93 7a00 	vldr	s14, [r3]
 800ba9a:	edd7 7a00 	vldr	s15, [r7]
 800ba9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	edd3 6a04 	vldr	s13, [r3, #16]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	edd3 7a01 	vldr	s15, [r3, #4]
 800baae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bab2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	edd3 6a05 	vldr	s13, [r3, #20]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	edd3 7a02 	vldr	s15, [r3, #8]
 800bac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[2] = filter->values[1];
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	691a      	ldr	r2, [r3, #16]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	615a      	str	r2, [r3, #20]
			filter->values[1] = filter->values[0];
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	68da      	ldr	r2, [r3, #12]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	611a      	str	r2, [r3, #16]
			to_return = filter->values[0];
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	60fb      	str	r3, [r7, #12]
			break;
 800bae6:	e005      	b.n	800baf4 <FILTER_process+0xba>

		case FILTER_NO_FILTERING :
			to_return = new_value ;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	60fb      	str	r3, [r7, #12]
			break;
 800baec:	e002      	b.n	800baf4 <FILTER_process+0xba>
		default:
			to_return = new_value ;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	60fb      	str	r3, [r7, #12]
			break;
 800baf2:	bf00      	nop
	}

	return to_return ;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	ee07 3a90 	vmov	s15, r3
};
 800bafa:	eeb0 0a67 	vmov.f32	s0, s15
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <check_sum_f>:
static rx_cplt_mode_e rx_cplt_mode ;
static ibus_t * ibus ;	//On ne peut utilsier qu'une radio en ibus à la fois

//Fonction privé qui test si le checsum est bon sur un buffer
uint32_t check_sum_f(uint8_t * buffer);
uint32_t check_sum_f(uint8_t * buffer){
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 800bb10:	2300      	movs	r3, #0
 800bb12:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800bb14:	2300      	movs	r3, #0
 800bb16:	72fb      	strb	r3, [r7, #11]
 800bb18:	e00a      	b.n	800bb30 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 800bb1a:	7afb      	ldrb	r3, [r7, #11]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	4413      	add	r3, r2
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	4413      	add	r3, r2
 800bb28:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800bb2a:	7afb      	ldrb	r3, [r7, #11]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	72fb      	strb	r3, [r7, #11]
 800bb30:	7afb      	ldrb	r3, [r7, #11]
 800bb32:	2b1d      	cmp	r3, #29
 800bb34:	d9f1      	bls.n	800bb1a <check_sum_f+0x12>
	return sum ;
 800bb36:	68fb      	ldr	r3, [r7, #12]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <IBUS_init>:

void IBUS_init(ibus_t * ibus_, UART_HandleTypeDef * huart, void(*data_rdy_callback)){
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
	ibus = ibus_;
 800bb50:	4a0e      	ldr	r2, [pc, #56]	; (800bb8c <IBUS_init+0x48>)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6013      	str	r3, [r2, #0]
	ibus->huart = huart ;
 800bb56:	4b0d      	ldr	r3, [pc, #52]	; (800bb8c <IBUS_init+0x48>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	601a      	str	r2, [r3, #0]
	ibus->data_rdy_callback = data_rdy_callback ;
 800bb5e:	4b0b      	ldr	r3, [pc, #44]	; (800bb8c <IBUS_init+0x48>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38
	//On lance la lecture
	HAL_UART_Receive_DMA(ibus->huart, ibus->dma_buffer, SIZE_DMA_BUFFER);
 800bb66:	4b09      	ldr	r3, [pc, #36]	; (800bb8c <IBUS_init+0x48>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6818      	ldr	r0, [r3, #0]
 800bb6c:	4b07      	ldr	r3, [pc, #28]	; (800bb8c <IBUS_init+0x48>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3304      	adds	r3, #4
 800bb72:	2214      	movs	r2, #20
 800bb74:	4619      	mov	r1, r3
 800bb76:	f7fe ffdf 	bl	800ab38 <HAL_UART_Receive_DMA>
	ibus->index_write = 1 ;
 800bb7a:	4b04      	ldr	r3, [pc, #16]	; (800bb8c <IBUS_init+0x48>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	761a      	strb	r2, [r3, #24]
}
 800bb82:	bf00      	nop
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20001be4 	.word	0x20001be4

0800bb90 <IBUS_RxCplt>:

void IBUS_RxCplt(UART_HandleTypeDef * huart){
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800bb98:	4b08      	ldr	r3, [pc, #32]	; (800bbbc <IBUS_RxCplt+0x2c>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d106      	bne.n	800bbb2 <IBUS_RxCplt+0x22>
		rx_cplt_mode = MODE_CPLT_FULL;
 800bba4:	4b06      	ldr	r3, [pc, #24]	; (800bbc0 <IBUS_RxCplt+0x30>)
 800bba6:	2201      	movs	r2, #1
 800bba8:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800bbaa:	4b04      	ldr	r3, [pc, #16]	; (800bbbc <IBUS_RxCplt+0x2c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb0:	4798      	blx	r3
	}
}
 800bbb2:	bf00      	nop
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20001be4 	.word	0x20001be4
 800bbc0:	20001be0 	.word	0x20001be0

0800bbc4 <IBUS_RxHalfCplt>:
void IBUS_RxHalfCplt(UART_HandleTypeDef * huart){
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800bbcc:	4b08      	ldr	r3, [pc, #32]	; (800bbf0 <IBUS_RxHalfCplt+0x2c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d106      	bne.n	800bbe6 <IBUS_RxHalfCplt+0x22>
		rx_cplt_mode = MODE_CPLT_HALF ;
 800bbd8:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <IBUS_RxHalfCplt+0x30>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800bbde:	4b04      	ldr	r3, [pc, #16]	; (800bbf0 <IBUS_RxHalfCplt+0x2c>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe4:	4798      	blx	r3
	}
}
 800bbe6:	bf00      	nop
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20001be4 	.word	0x20001be4
 800bbf4:	20001be0 	.word	0x20001be0

0800bbf8 <IBUS_Channel_Update>:

bool_e IBUS_Channel_Update(void){
 800bbf8:	b5b0      	push	{r4, r5, r7, lr}
 800bbfa:	b088      	sub	sp, #32
 800bbfc:	af00      	add	r7, sp, #0

	bool_e to_return = FALSE ;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	61fb      	str	r3, [r7, #28]

	if(rx_cplt_mode == MODE_CPLT_HALF)
 800bc02:	4ba0      	ldr	r3, [pc, #640]	; (800be84 <IBUS_Channel_Update+0x28c>)
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f040 80ba 	bne.w	800bd80 <IBUS_Channel_Update+0x188>
	{
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	76fb      	strb	r3, [r7, #27]
 800bc10:	e0b1      	b.n	800bd76 <IBUS_Channel_Update+0x17e>
			switch(ibus->state){
 800bc12:	4b9d      	ldr	r3, [pc, #628]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d01b      	beq.n	800bc56 <IBUS_Channel_Update+0x5e>
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d041      	beq.n	800bca6 <IBUS_Channel_Update+0xae>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f040 80a4 	bne.w	800bd70 <IBUS_Channel_Update+0x178>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800bc28:	4b97      	ldr	r3, [pc, #604]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	7efb      	ldrb	r3, [r7, #27]
 800bc2e:	4413      	add	r3, r2
 800bc30:	791b      	ldrb	r3, [r3, #4]
 800bc32:	2b20      	cmp	r3, #32
 800bc34:	f040 8097 	bne.w	800bd66 <IBUS_Channel_Update+0x16e>
						ibus->state = STATE_IBUS_COMMAND ;
 800bc38:	4b93      	ldr	r3, [pc, #588]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800bc42:	4b91      	ldr	r3, [pc, #580]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc44:	6819      	ldr	r1, [r3, #0]
 800bc46:	7efa      	ldrb	r2, [r7, #27]
 800bc48:	4b8f      	ldr	r3, [pc, #572]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	440a      	add	r2, r1
 800bc4e:	7912      	ldrb	r2, [r2, #4]
 800bc50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800bc54:	e087      	b.n	800bd66 <IBUS_Channel_Update+0x16e>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800bc56:	4b8c      	ldr	r3, [pc, #560]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	7efb      	ldrb	r3, [r7, #27]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	791b      	ldrb	r3, [r3, #4]
 800bc60:	2b40      	cmp	r3, #64	; 0x40
 800bc62:	d113      	bne.n	800bc8c <IBUS_Channel_Update+0x94>
						ibus->state = STATE_IBUS_CHANNELS ;
 800bc64:	4b88      	ldr	r3, [pc, #544]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2202      	movs	r2, #2
 800bc6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800bc6e:	4b86      	ldr	r3, [pc, #536]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc70:	6819      	ldr	r1, [r3, #0]
 800bc72:	7efa      	ldrb	r2, [r7, #27]
 800bc74:	4b84      	ldr	r3, [pc, #528]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	440a      	add	r2, r1
 800bc7a:	7912      	ldrb	r2, [r2, #4]
 800bc7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800bc80:	4b81      	ldr	r3, [pc, #516]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2202      	movs	r2, #2
 800bc86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800bc8a:	e06e      	b.n	800bd6a <IBUS_Channel_Update+0x172>
					else if(ibus->dma_buffer[c] != 0x20)
 800bc8c:	4b7e      	ldr	r3, [pc, #504]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	7efb      	ldrb	r3, [r7, #27]
 800bc92:	4413      	add	r3, r2
 800bc94:	791b      	ldrb	r3, [r3, #4]
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	d067      	beq.n	800bd6a <IBUS_Channel_Update+0x172>
						ibus->state = STATE_IBUS_LENGTH ;
 800bc9a:	4b7b      	ldr	r3, [pc, #492]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800bca4:	e061      	b.n	800bd6a <IBUS_Channel_Update+0x172>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800bca6:	4b78      	ldr	r3, [pc, #480]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bca8:	681c      	ldr	r4, [r3, #0]
 800bcaa:	7ef8      	ldrb	r0, [r7, #27]
 800bcac:	4b76      	ldr	r3, [pc, #472]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bcae:	6819      	ldr	r1, [r3, #0]
 800bcb0:	4b75      	ldr	r3, [pc, #468]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800bcb8:	1c55      	adds	r5, r2, #1
 800bcba:	b2ad      	uxth	r5, r5
 800bcbc:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800bcc0:	4615      	mov	r5, r2
 800bcc2:	1823      	adds	r3, r4, r0
 800bcc4:	791a      	ldrb	r2, [r3, #4]
 800bcc6:	194b      	adds	r3, r1, r5
 800bcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800bccc:	4b6e      	ldr	r3, [pc, #440]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcd4:	2b20      	cmp	r3, #32
 800bcd6:	d14a      	bne.n	800bd6e <IBUS_Channel_Update+0x176>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800bcd8:	4b6b      	ldr	r3, [pc, #428]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800bce0:	461a      	mov	r2, r3
 800bce2:	4b69      	ldr	r3, [pc, #420]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bcea:	021b      	lsls	r3, r3, #8
 800bcec:	4313      	orrs	r3, r2
 800bcee:	607b      	str	r3, [r7, #4]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800bcf0:	4b65      	ldr	r3, [pc, #404]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	333d      	adds	r3, #61	; 0x3d
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff ff06 	bl	800bb08 <check_sum_f>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800bd02:	33ff      	adds	r3, #255	; 0xff
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d127      	bne.n	800bd5a <IBUS_Channel_Update+0x162>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	617b      	str	r3, [r7, #20]
 800bd0e:	e01f      	b.n	800bd50 <IBUS_Channel_Update+0x158>
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800bd10:	4b5d      	ldr	r3, [pc, #372]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	3302      	adds	r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd1e:	b21a      	sxth	r2, r3
 800bd20:	4b59      	ldr	r3, [pc, #356]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bd22:	6819      	ldr	r1, [r3, #0]
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	3303      	adds	r3, #3
 800bd28:	440b      	add	r3, r1
 800bd2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd2e:	021b      	lsls	r3, r3, #8
 800bd30:	b21b      	sxth	r3, r3
 800bd32:	4313      	orrs	r3, r2
 800bd34:	b219      	sxth	r1, r3
 800bd36:	4b54      	ldr	r3, [pc, #336]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	085b      	lsrs	r3, r3, #1
 800bd3e:	b289      	uxth	r1, r1
 800bd40:	330c      	adds	r3, #12
 800bd42:	005b      	lsls	r3, r3, #1
 800bd44:	4413      	add	r3, r2
 800bd46:	460a      	mov	r2, r1
 800bd48:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	3302      	adds	r3, #2
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	2b1b      	cmp	r3, #27
 800bd54:	d9dc      	bls.n	800bd10 <IBUS_Channel_Update+0x118>
							to_return = TRUE;
 800bd56:	2301      	movs	r3, #1
 800bd58:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800bd5a:	4b4b      	ldr	r3, [pc, #300]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800bd64:	e003      	b.n	800bd6e <IBUS_Channel_Update+0x176>
					break;
 800bd66:	bf00      	nop
 800bd68:	e002      	b.n	800bd70 <IBUS_Channel_Update+0x178>
					break ;
 800bd6a:	bf00      	nop
 800bd6c:	e000      	b.n	800bd70 <IBUS_Channel_Update+0x178>
					break;
 800bd6e:	bf00      	nop
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800bd70:	7efb      	ldrb	r3, [r7, #27]
 800bd72:	3301      	adds	r3, #1
 800bd74:	76fb      	strb	r3, [r7, #27]
 800bd76:	7efb      	ldrb	r3, [r7, #27]
 800bd78:	2b09      	cmp	r3, #9
 800bd7a:	f67f af4a 	bls.w	800bc12 <IBUS_Channel_Update+0x1a>
 800bd7e:	e0bc      	b.n	800befa <IBUS_Channel_Update+0x302>
			}
		}
	}
	else
	{
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800bd80:	230a      	movs	r3, #10
 800bd82:	74fb      	strb	r3, [r7, #19]
 800bd84:	e0b5      	b.n	800bef2 <IBUS_Channel_Update+0x2fa>
			switch(ibus->state){
 800bd86:	4b40      	ldr	r3, [pc, #256]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d01b      	beq.n	800bdca <IBUS_Channel_Update+0x1d2>
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d041      	beq.n	800be1a <IBUS_Channel_Update+0x222>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f040 80a8 	bne.w	800beec <IBUS_Channel_Update+0x2f4>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800bd9c:	4b3a      	ldr	r3, [pc, #232]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	7cfb      	ldrb	r3, [r7, #19]
 800bda2:	4413      	add	r3, r2
 800bda4:	791b      	ldrb	r3, [r3, #4]
 800bda6:	2b20      	cmp	r3, #32
 800bda8:	f040 809b 	bne.w	800bee2 <IBUS_Channel_Update+0x2ea>
						ibus->state = STATE_IBUS_COMMAND ;
 800bdac:	4b36      	ldr	r3, [pc, #216]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800bdb6:	4b34      	ldr	r3, [pc, #208]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bdb8:	6819      	ldr	r1, [r3, #0]
 800bdba:	7cfa      	ldrb	r2, [r7, #19]
 800bdbc:	4b32      	ldr	r3, [pc, #200]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	440a      	add	r2, r1
 800bdc2:	7912      	ldrb	r2, [r2, #4]
 800bdc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800bdc8:	e08b      	b.n	800bee2 <IBUS_Channel_Update+0x2ea>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800bdca:	4b2f      	ldr	r3, [pc, #188]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	7cfb      	ldrb	r3, [r7, #19]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	791b      	ldrb	r3, [r3, #4]
 800bdd4:	2b40      	cmp	r3, #64	; 0x40
 800bdd6:	d113      	bne.n	800be00 <IBUS_Channel_Update+0x208>
						ibus->state = STATE_IBUS_CHANNELS ;
 800bdd8:	4b2b      	ldr	r3, [pc, #172]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2202      	movs	r2, #2
 800bdde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800bde2:	4b29      	ldr	r3, [pc, #164]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bde4:	6819      	ldr	r1, [r3, #0]
 800bde6:	7cfa      	ldrb	r2, [r7, #19]
 800bde8:	4b27      	ldr	r3, [pc, #156]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	440a      	add	r2, r1
 800bdee:	7912      	ldrb	r2, [r2, #4]
 800bdf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800bdf4:	4b24      	ldr	r3, [pc, #144]	; (800be88 <IBUS_Channel_Update+0x290>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800bdfe:	e072      	b.n	800bee6 <IBUS_Channel_Update+0x2ee>
					else if(ibus->dma_buffer[c] != 0x20)
 800be00:	4b21      	ldr	r3, [pc, #132]	; (800be88 <IBUS_Channel_Update+0x290>)
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	7cfb      	ldrb	r3, [r7, #19]
 800be06:	4413      	add	r3, r2
 800be08:	791b      	ldrb	r3, [r3, #4]
 800be0a:	2b20      	cmp	r3, #32
 800be0c:	d06b      	beq.n	800bee6 <IBUS_Channel_Update+0x2ee>
						ibus->state = STATE_IBUS_LENGTH ;
 800be0e:	4b1e      	ldr	r3, [pc, #120]	; (800be88 <IBUS_Channel_Update+0x290>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800be18:	e065      	b.n	800bee6 <IBUS_Channel_Update+0x2ee>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800be1a:	4b1b      	ldr	r3, [pc, #108]	; (800be88 <IBUS_Channel_Update+0x290>)
 800be1c:	681c      	ldr	r4, [r3, #0]
 800be1e:	7cf8      	ldrb	r0, [r7, #19]
 800be20:	4b19      	ldr	r3, [pc, #100]	; (800be88 <IBUS_Channel_Update+0x290>)
 800be22:	6819      	ldr	r1, [r3, #0]
 800be24:	4b18      	ldr	r3, [pc, #96]	; (800be88 <IBUS_Channel_Update+0x290>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800be2c:	1c55      	adds	r5, r2, #1
 800be2e:	b2ad      	uxth	r5, r5
 800be30:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800be34:	4615      	mov	r5, r2
 800be36:	1823      	adds	r3, r4, r0
 800be38:	791a      	ldrb	r2, [r3, #4]
 800be3a:	194b      	adds	r3, r1, r5
 800be3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800be40:	4b11      	ldr	r3, [pc, #68]	; (800be88 <IBUS_Channel_Update+0x290>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be48:	2b20      	cmp	r3, #32
 800be4a:	d14e      	bne.n	800beea <IBUS_Channel_Update+0x2f2>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800be4c:	4b0e      	ldr	r3, [pc, #56]	; (800be88 <IBUS_Channel_Update+0x290>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800be54:	461a      	mov	r2, r3
 800be56:	4b0c      	ldr	r3, [pc, #48]	; (800be88 <IBUS_Channel_Update+0x290>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be5e:	021b      	lsls	r3, r3, #8
 800be60:	4313      	orrs	r3, r2
 800be62:	60bb      	str	r3, [r7, #8]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800be64:	4b08      	ldr	r3, [pc, #32]	; (800be88 <IBUS_Channel_Update+0x290>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	333d      	adds	r3, #61	; 0x3d
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff fe4c 	bl	800bb08 <check_sum_f>
 800be70:	4603      	mov	r3, r0
 800be72:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800be76:	33ff      	adds	r3, #255	; 0xff
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d12b      	bne.n	800bed6 <IBUS_Channel_Update+0x2de>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800be7e:	2300      	movs	r3, #0
 800be80:	60fb      	str	r3, [r7, #12]
 800be82:	e023      	b.n	800becc <IBUS_Channel_Update+0x2d4>
 800be84:	20001be0 	.word	0x20001be0
 800be88:	20001be4 	.word	0x20001be4
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800be8c:	4b1d      	ldr	r3, [pc, #116]	; (800bf04 <IBUS_Channel_Update+0x30c>)
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3302      	adds	r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be9a:	b21a      	sxth	r2, r3
 800be9c:	4b19      	ldr	r3, [pc, #100]	; (800bf04 <IBUS_Channel_Update+0x30c>)
 800be9e:	6819      	ldr	r1, [r3, #0]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3303      	adds	r3, #3
 800bea4:	440b      	add	r3, r1
 800bea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800beaa:	021b      	lsls	r3, r3, #8
 800beac:	b21b      	sxth	r3, r3
 800beae:	4313      	orrs	r3, r2
 800beb0:	b219      	sxth	r1, r3
 800beb2:	4b14      	ldr	r3, [pc, #80]	; (800bf04 <IBUS_Channel_Update+0x30c>)
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	085b      	lsrs	r3, r3, #1
 800beba:	b289      	uxth	r1, r1
 800bebc:	330c      	adds	r3, #12
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	4413      	add	r3, r2
 800bec2:	460a      	mov	r2, r1
 800bec4:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	3302      	adds	r3, #2
 800beca:	60fb      	str	r3, [r7, #12]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b1b      	cmp	r3, #27
 800bed0:	d9dc      	bls.n	800be8c <IBUS_Channel_Update+0x294>
							to_return = TRUE;
 800bed2:	2301      	movs	r3, #1
 800bed4:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800bed6:	4b0b      	ldr	r3, [pc, #44]	; (800bf04 <IBUS_Channel_Update+0x30c>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800bee0:	e003      	b.n	800beea <IBUS_Channel_Update+0x2f2>
					break;
 800bee2:	bf00      	nop
 800bee4:	e002      	b.n	800beec <IBUS_Channel_Update+0x2f4>
					break ;
 800bee6:	bf00      	nop
 800bee8:	e000      	b.n	800beec <IBUS_Channel_Update+0x2f4>
					break;
 800beea:	bf00      	nop
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800beec:	7cfb      	ldrb	r3, [r7, #19]
 800beee:	3301      	adds	r3, #1
 800bef0:	74fb      	strb	r3, [r7, #19]
 800bef2:	7cfb      	ldrb	r3, [r7, #19]
 800bef4:	2b13      	cmp	r3, #19
 800bef6:	f67f af46 	bls.w	800bd86 <IBUS_Channel_Update+0x18e>
		}
	}



	return to_return ;
 800befa:	69fb      	ldr	r3, [r7, #28]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3720      	adds	r7, #32
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bdb0      	pop	{r4, r5, r7, pc}
 800bf04:	20001be4 	.word	0x20001be4

0800bf08 <MOTORS_Init>:
 */

#include "../Inc/Motors.h"


void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, uint16_t * duty, bool_e start){
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
 800bf14:	603b      	str	r3, [r7, #0]
	motors->htim = htim ;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	601a      	str	r2, [r3, #0]
	motors->duty = duty;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	609a      	str	r2, [r3, #8]
	if(start){
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d022      	beq.n	800bf6e <MOTORS_Init+0x66>
		motors->state = MOTORS_STATE_RUNNING ;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	711a      	strb	r2, [r3, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 800bf2e:	2100      	movs	r1, #0
 800bf30:	68b8      	ldr	r0, [r7, #8]
 800bf32:	f7fd fd21 	bl	8009978 <HAL_TIM_PWM_Start>
 800bf36:	4603      	mov	r3, r0
 800bf38:	461a      	mov	r2, r3
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 800bf3e:	2104      	movs	r1, #4
 800bf40:	68b8      	ldr	r0, [r7, #8]
 800bf42:	f7fd fd19 	bl	8009978 <HAL_TIM_PWM_Start>
 800bf46:	4603      	mov	r3, r0
 800bf48:	461a      	mov	r2, r3
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 800bf4e:	2108      	movs	r1, #8
 800bf50:	68b8      	ldr	r0, [r7, #8]
 800bf52:	f7fd fd11 	bl	8009978 <HAL_TIM_PWM_Start>
 800bf56:	4603      	mov	r3, r0
 800bf58:	461a      	mov	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 800bf5e:	210c      	movs	r1, #12
 800bf60:	68b8      	ldr	r0, [r7, #8]
 800bf62:	f7fd fd09 	bl	8009978 <HAL_TIM_PWM_Start>
 800bf66:	4603      	mov	r3, r0
 800bf68:	461a      	mov	r2, r3
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	731a      	strb	r2, [r3, #12]
	}
}
 800bf6e:	bf00      	nop
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_2);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_3);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]

	motors->duty[0] = MIN(1000, motors->duty[0]);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	881a      	ldrh	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800bf8c:	bf28      	it	cs
 800bf8e:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800bf92:	b292      	uxth	r2, r2
 800bf94:	801a      	strh	r2, [r3, #0]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	3302      	adds	r3, #2
 800bf9c:	881a      	ldrh	r2, [r3, #0]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	3302      	adds	r3, #2
 800bfa4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800bfa8:	bf28      	it	cs
 800bfaa:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800bfae:	b292      	uxth	r2, r2
 800bfb0:	801a      	strh	r2, [r3, #0]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	881a      	ldrh	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800bfc4:	bf28      	it	cs
 800bfc6:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800bfca:	b292      	uxth	r2, r2
 800bfcc:	801a      	strh	r2, [r3, #0]
	motors->duty[3] = MIN(1000, motors->duty[3]);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	3306      	adds	r3, #6
 800bfd4:	881a      	ldrh	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	3306      	adds	r3, #6
 800bfdc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800bfe0:	bf28      	it	cs
 800bfe2:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800bfe6:	b292      	uxth	r2, r2
 800bfe8:	801a      	strh	r2, [r3, #0]


	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	881b      	ldrh	r3, [r3, #0]
 800bff0:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	635a      	str	r2, [r3, #52]	; 0x34
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	3302      	adds	r3, #2
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	639a      	str	r2, [r3, #56]	; 0x38
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	3304      	adds	r3, #4
 800c016:	881b      	ldrh	r3, [r3, #0]
 800c018:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	63da      	str	r2, [r3, #60]	; 0x3c
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	3306      	adds	r3, #6
 800c02a:	881b      	ldrh	r3, [r3, #0]
 800c02c:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c038:	bf00      	nop
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <PID_compute>:
 */

#include "../Inc/Pid.h"

//renvoit la sortie du pid
float PID_compute(PID_t * pid, float consigne, float measurement){
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	ed87 0a02 	vstr	s0, [r7, #8]
 800c050:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calcul de l'erreur
	pid->error = measurement - consigne ;
 800c054:	ed97 7a01 	vldr	s14, [r7, #4]
 800c058:	edd7 7a02 	vldr	s15, [r7, #8]
 800c05c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Calcul des P I D
	pid->P = pid->settings[PID_KP] * pid->error ;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	ed93 7a04 	vldr	s14, [r3, #16]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->I += pid->settings[PID_KI] * pid->error / pid->settings[PID_FREQUENCY];
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	ed93 7a02 	vldr	s14, [r3, #8]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	edd3 6a05 	vldr	s13, [r3, #20]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c08e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	edd3 6a07 	vldr	s13, [r3, #28]
 800c098:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800c09c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	edc3 7a02 	vstr	s15, [r3, #8]
	pid->D = pid->settings[PID_KD] * (measurement - pid->previous_measurement) * pid->settings[PID_FREQUENCY] ;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c0b2:	edd7 6a01 	vldr	s13, [r7, #4]
 800c0b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c0ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	edd3 7a07 	vldr	s15, [r3, #28]
 800c0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	edc3 7a03 	vstr	s15, [r3, #12]

	//Filtrage
	pid->D = FILTER_process(&pid->d_filter, pid->D);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	edd3 7a03 	vldr	s15, [r3, #12]
 800c0da:	eeb0 0a67 	vmov.f32	s0, s15
 800c0de:	4610      	mov	r0, r2
 800c0e0:	f7ff fcab 	bl	800ba3a <FILTER_process>
 800c0e4:	eef0 7a40 	vmov.f32	s15, s0
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	edc3 7a03 	vstr	s15, [r3, #12]

	//On somme le tout
	pid->output = pid->P + pid->I + pid->D ;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	ed93 7a01 	vldr	s14, [r3, #4]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	edd3 7a02 	vldr	s15, [r3, #8]
 800c0fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	edd3 7a03 	vldr	s15, [r3, #12]
 800c104:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	edc3 7a00 	vstr	s15, [r3]

	//Check mid and max
	pid->output = MIN(pid->settings[PID_MAX_OUTPUT], pid->output);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	ed93 7a08 	vldr	s14, [r3, #32]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	edd3 7a00 	vldr	s15, [r3]
 800c11a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c122:	dd02      	ble.n	800c12a <PID_compute+0xe6>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	e001      	b.n	800c12e <PID_compute+0xea>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	6013      	str	r3, [r2, #0]
	pid->output = MAX(-pid->settings[PID_MAX_OUTPUT], pid->output);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	edd3 7a08 	vldr	s15, [r3, #32]
 800c138:	eeb1 7a67 	vneg.f32	s14, s15
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	edd3 7a00 	vldr	s15, [r3]
 800c142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c14a:	dd05      	ble.n	800c158 <PID_compute+0x114>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c152:	eef1 7a67 	vneg.f32	s15, s15
 800c156:	e002      	b.n	800c15e <PID_compute+0x11a>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	edd3 7a00 	vldr	s15, [r3]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	edc3 7a00 	vstr	s15, [r3]

	//Mise � jour des valeurs ant�rieures
	pid->previous_measurement = measurement ;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	629a      	str	r2, [r3, #40]	; 0x28
	return pid->output ;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	ee07 3a90 	vmov	s15, r3
}
 800c172:	eeb0 0a67 	vmov.f32	s0, s15
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <PID_init>:



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	603b      	str	r3, [r7, #0]
 800c188:	4613      	mov	r3, r2
 800c18a:	71fb      	strb	r3, [r7, #7]
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800c18c:	2300      	movs	r3, #0
 800c18e:	75fb      	strb	r3, [r7, #23]
 800c190:	e00d      	b.n	800c1ae <PID_init+0x32>
		pid->settings[s] = settings[s] ;
 800c192:	7dfb      	ldrb	r3, [r7, #23]
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	68ba      	ldr	r2, [r7, #8]
 800c198:	441a      	add	r2, r3
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	6812      	ldr	r2, [r2, #0]
 800c19e:	68f9      	ldr	r1, [r7, #12]
 800c1a0:	3304      	adds	r3, #4
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	440b      	add	r3, r1
 800c1a6:	601a      	str	r2, [r3, #0]
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800c1a8:	7dfb      	ldrb	r3, [r7, #23]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	75fb      	strb	r3, [r7, #23]
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
 800c1b0:	2b04      	cmp	r3, #4
 800c1b2:	d9ee      	bls.n	800c192 <PID_init+0x16>

	//Init values
	pid->P = 0 ;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f04f 0200 	mov.w	r2, #0
 800c1ba:	605a      	str	r2, [r3, #4]
	pid->I = 0 ;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f04f 0200 	mov.w	r2, #0
 800c1c2:	609a      	str	r2, [r3, #8]
	pid->D = 0 ;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f04f 0200 	mov.w	r2, #0
 800c1ca:	60da      	str	r2, [r3, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	332c      	adds	r3, #44	; 0x2c
 800c1d0:	79fa      	ldrb	r2, [r7, #7]
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7ff fc0d 	bl	800b9f4 <FILTER_init>
}
 800c1da:	bf00      	nop
 800c1dc:	3718      	adds	r7, #24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
	...

0800c1e4 <__errno>:
 800c1e4:	4b01      	ldr	r3, [pc, #4]	; (800c1ec <__errno+0x8>)
 800c1e6:	6818      	ldr	r0, [r3, #0]
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	20001670 	.word	0x20001670

0800c1f0 <__libc_init_array>:
 800c1f0:	b570      	push	{r4, r5, r6, lr}
 800c1f2:	4e0d      	ldr	r6, [pc, #52]	; (800c228 <__libc_init_array+0x38>)
 800c1f4:	4c0d      	ldr	r4, [pc, #52]	; (800c22c <__libc_init_array+0x3c>)
 800c1f6:	1ba4      	subs	r4, r4, r6
 800c1f8:	10a4      	asrs	r4, r4, #2
 800c1fa:	2500      	movs	r5, #0
 800c1fc:	42a5      	cmp	r5, r4
 800c1fe:	d109      	bne.n	800c214 <__libc_init_array+0x24>
 800c200:	4e0b      	ldr	r6, [pc, #44]	; (800c230 <__libc_init_array+0x40>)
 800c202:	4c0c      	ldr	r4, [pc, #48]	; (800c234 <__libc_init_array+0x44>)
 800c204:	f003 fb5e 	bl	800f8c4 <_init>
 800c208:	1ba4      	subs	r4, r4, r6
 800c20a:	10a4      	asrs	r4, r4, #2
 800c20c:	2500      	movs	r5, #0
 800c20e:	42a5      	cmp	r5, r4
 800c210:	d105      	bne.n	800c21e <__libc_init_array+0x2e>
 800c212:	bd70      	pop	{r4, r5, r6, pc}
 800c214:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c218:	4798      	blx	r3
 800c21a:	3501      	adds	r5, #1
 800c21c:	e7ee      	b.n	800c1fc <__libc_init_array+0xc>
 800c21e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c222:	4798      	blx	r3
 800c224:	3501      	adds	r5, #1
 800c226:	e7f2      	b.n	800c20e <__libc_init_array+0x1e>
 800c228:	0800ffcc 	.word	0x0800ffcc
 800c22c:	0800ffcc 	.word	0x0800ffcc
 800c230:	0800ffcc 	.word	0x0800ffcc
 800c234:	0800ffd0 	.word	0x0800ffd0

0800c238 <memcpy>:
 800c238:	b510      	push	{r4, lr}
 800c23a:	1e43      	subs	r3, r0, #1
 800c23c:	440a      	add	r2, r1
 800c23e:	4291      	cmp	r1, r2
 800c240:	d100      	bne.n	800c244 <memcpy+0xc>
 800c242:	bd10      	pop	{r4, pc}
 800c244:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c24c:	e7f7      	b.n	800c23e <memcpy+0x6>

0800c24e <memmove>:
 800c24e:	4288      	cmp	r0, r1
 800c250:	b510      	push	{r4, lr}
 800c252:	eb01 0302 	add.w	r3, r1, r2
 800c256:	d807      	bhi.n	800c268 <memmove+0x1a>
 800c258:	1e42      	subs	r2, r0, #1
 800c25a:	4299      	cmp	r1, r3
 800c25c:	d00a      	beq.n	800c274 <memmove+0x26>
 800c25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c262:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c266:	e7f8      	b.n	800c25a <memmove+0xc>
 800c268:	4283      	cmp	r3, r0
 800c26a:	d9f5      	bls.n	800c258 <memmove+0xa>
 800c26c:	1881      	adds	r1, r0, r2
 800c26e:	1ad2      	subs	r2, r2, r3
 800c270:	42d3      	cmn	r3, r2
 800c272:	d100      	bne.n	800c276 <memmove+0x28>
 800c274:	bd10      	pop	{r4, pc}
 800c276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c27a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c27e:	e7f7      	b.n	800c270 <memmove+0x22>

0800c280 <memset>:
 800c280:	4402      	add	r2, r0
 800c282:	4603      	mov	r3, r0
 800c284:	4293      	cmp	r3, r2
 800c286:	d100      	bne.n	800c28a <memset+0xa>
 800c288:	4770      	bx	lr
 800c28a:	f803 1b01 	strb.w	r1, [r3], #1
 800c28e:	e7f9      	b.n	800c284 <memset+0x4>

0800c290 <__cvt>:
 800c290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c294:	ec55 4b10 	vmov	r4, r5, d0
 800c298:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c29a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c29e:	2d00      	cmp	r5, #0
 800c2a0:	460e      	mov	r6, r1
 800c2a2:	4691      	mov	r9, r2
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	bfb8      	it	lt
 800c2a8:	4622      	movlt	r2, r4
 800c2aa:	462b      	mov	r3, r5
 800c2ac:	f027 0720 	bic.w	r7, r7, #32
 800c2b0:	bfbb      	ittet	lt
 800c2b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c2b6:	461d      	movlt	r5, r3
 800c2b8:	2300      	movge	r3, #0
 800c2ba:	232d      	movlt	r3, #45	; 0x2d
 800c2bc:	bfb8      	it	lt
 800c2be:	4614      	movlt	r4, r2
 800c2c0:	2f46      	cmp	r7, #70	; 0x46
 800c2c2:	700b      	strb	r3, [r1, #0]
 800c2c4:	d004      	beq.n	800c2d0 <__cvt+0x40>
 800c2c6:	2f45      	cmp	r7, #69	; 0x45
 800c2c8:	d100      	bne.n	800c2cc <__cvt+0x3c>
 800c2ca:	3601      	adds	r6, #1
 800c2cc:	2102      	movs	r1, #2
 800c2ce:	e000      	b.n	800c2d2 <__cvt+0x42>
 800c2d0:	2103      	movs	r1, #3
 800c2d2:	ab03      	add	r3, sp, #12
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	ab02      	add	r3, sp, #8
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	4632      	mov	r2, r6
 800c2dc:	4653      	mov	r3, sl
 800c2de:	ec45 4b10 	vmov	d0, r4, r5
 800c2e2:	f000 fea9 	bl	800d038 <_dtoa_r>
 800c2e6:	2f47      	cmp	r7, #71	; 0x47
 800c2e8:	4680      	mov	r8, r0
 800c2ea:	d102      	bne.n	800c2f2 <__cvt+0x62>
 800c2ec:	f019 0f01 	tst.w	r9, #1
 800c2f0:	d026      	beq.n	800c340 <__cvt+0xb0>
 800c2f2:	2f46      	cmp	r7, #70	; 0x46
 800c2f4:	eb08 0906 	add.w	r9, r8, r6
 800c2f8:	d111      	bne.n	800c31e <__cvt+0x8e>
 800c2fa:	f898 3000 	ldrb.w	r3, [r8]
 800c2fe:	2b30      	cmp	r3, #48	; 0x30
 800c300:	d10a      	bne.n	800c318 <__cvt+0x88>
 800c302:	2200      	movs	r2, #0
 800c304:	2300      	movs	r3, #0
 800c306:	4620      	mov	r0, r4
 800c308:	4629      	mov	r1, r5
 800c30a:	f7f4 fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c30e:	b918      	cbnz	r0, 800c318 <__cvt+0x88>
 800c310:	f1c6 0601 	rsb	r6, r6, #1
 800c314:	f8ca 6000 	str.w	r6, [sl]
 800c318:	f8da 3000 	ldr.w	r3, [sl]
 800c31c:	4499      	add	r9, r3
 800c31e:	2200      	movs	r2, #0
 800c320:	2300      	movs	r3, #0
 800c322:	4620      	mov	r0, r4
 800c324:	4629      	mov	r1, r5
 800c326:	f7f4 fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800c32a:	b938      	cbnz	r0, 800c33c <__cvt+0xac>
 800c32c:	2230      	movs	r2, #48	; 0x30
 800c32e:	9b03      	ldr	r3, [sp, #12]
 800c330:	454b      	cmp	r3, r9
 800c332:	d205      	bcs.n	800c340 <__cvt+0xb0>
 800c334:	1c59      	adds	r1, r3, #1
 800c336:	9103      	str	r1, [sp, #12]
 800c338:	701a      	strb	r2, [r3, #0]
 800c33a:	e7f8      	b.n	800c32e <__cvt+0x9e>
 800c33c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c340:	9b03      	ldr	r3, [sp, #12]
 800c342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c344:	eba3 0308 	sub.w	r3, r3, r8
 800c348:	4640      	mov	r0, r8
 800c34a:	6013      	str	r3, [r2, #0]
 800c34c:	b004      	add	sp, #16
 800c34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c352 <__exponent>:
 800c352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c354:	2900      	cmp	r1, #0
 800c356:	4604      	mov	r4, r0
 800c358:	bfba      	itte	lt
 800c35a:	4249      	neglt	r1, r1
 800c35c:	232d      	movlt	r3, #45	; 0x2d
 800c35e:	232b      	movge	r3, #43	; 0x2b
 800c360:	2909      	cmp	r1, #9
 800c362:	f804 2b02 	strb.w	r2, [r4], #2
 800c366:	7043      	strb	r3, [r0, #1]
 800c368:	dd20      	ble.n	800c3ac <__exponent+0x5a>
 800c36a:	f10d 0307 	add.w	r3, sp, #7
 800c36e:	461f      	mov	r7, r3
 800c370:	260a      	movs	r6, #10
 800c372:	fb91 f5f6 	sdiv	r5, r1, r6
 800c376:	fb06 1115 	mls	r1, r6, r5, r1
 800c37a:	3130      	adds	r1, #48	; 0x30
 800c37c:	2d09      	cmp	r5, #9
 800c37e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c382:	f103 32ff 	add.w	r2, r3, #4294967295
 800c386:	4629      	mov	r1, r5
 800c388:	dc09      	bgt.n	800c39e <__exponent+0x4c>
 800c38a:	3130      	adds	r1, #48	; 0x30
 800c38c:	3b02      	subs	r3, #2
 800c38e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c392:	42bb      	cmp	r3, r7
 800c394:	4622      	mov	r2, r4
 800c396:	d304      	bcc.n	800c3a2 <__exponent+0x50>
 800c398:	1a10      	subs	r0, r2, r0
 800c39a:	b003      	add	sp, #12
 800c39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c39e:	4613      	mov	r3, r2
 800c3a0:	e7e7      	b.n	800c372 <__exponent+0x20>
 800c3a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3a6:	f804 2b01 	strb.w	r2, [r4], #1
 800c3aa:	e7f2      	b.n	800c392 <__exponent+0x40>
 800c3ac:	2330      	movs	r3, #48	; 0x30
 800c3ae:	4419      	add	r1, r3
 800c3b0:	7083      	strb	r3, [r0, #2]
 800c3b2:	1d02      	adds	r2, r0, #4
 800c3b4:	70c1      	strb	r1, [r0, #3]
 800c3b6:	e7ef      	b.n	800c398 <__exponent+0x46>

0800c3b8 <_printf_float>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	b08d      	sub	sp, #52	; 0x34
 800c3be:	460c      	mov	r4, r1
 800c3c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c3c4:	4616      	mov	r6, r2
 800c3c6:	461f      	mov	r7, r3
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	f001 fd67 	bl	800de9c <_localeconv_r>
 800c3ce:	6803      	ldr	r3, [r0, #0]
 800c3d0:	9304      	str	r3, [sp, #16]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7f3 fefc 	bl	80001d0 <strlen>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	930a      	str	r3, [sp, #40]	; 0x28
 800c3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c3e0:	9005      	str	r0, [sp, #20]
 800c3e2:	3307      	adds	r3, #7
 800c3e4:	f023 0307 	bic.w	r3, r3, #7
 800c3e8:	f103 0208 	add.w	r2, r3, #8
 800c3ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3f0:	f8d4 b000 	ldr.w	fp, [r4]
 800c3f4:	f8c8 2000 	str.w	r2, [r8]
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c400:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c404:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c408:	9307      	str	r3, [sp, #28]
 800c40a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c40e:	f04f 32ff 	mov.w	r2, #4294967295
 800c412:	4ba7      	ldr	r3, [pc, #668]	; (800c6b0 <_printf_float+0x2f8>)
 800c414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c418:	f7f4 fb88 	bl	8000b2c <__aeabi_dcmpun>
 800c41c:	bb70      	cbnz	r0, 800c47c <_printf_float+0xc4>
 800c41e:	f04f 32ff 	mov.w	r2, #4294967295
 800c422:	4ba3      	ldr	r3, [pc, #652]	; (800c6b0 <_printf_float+0x2f8>)
 800c424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c428:	f7f4 fb62 	bl	8000af0 <__aeabi_dcmple>
 800c42c:	bb30      	cbnz	r0, 800c47c <_printf_float+0xc4>
 800c42e:	2200      	movs	r2, #0
 800c430:	2300      	movs	r3, #0
 800c432:	4640      	mov	r0, r8
 800c434:	4649      	mov	r1, r9
 800c436:	f7f4 fb51 	bl	8000adc <__aeabi_dcmplt>
 800c43a:	b110      	cbz	r0, 800c442 <_printf_float+0x8a>
 800c43c:	232d      	movs	r3, #45	; 0x2d
 800c43e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c442:	4a9c      	ldr	r2, [pc, #624]	; (800c6b4 <_printf_float+0x2fc>)
 800c444:	4b9c      	ldr	r3, [pc, #624]	; (800c6b8 <_printf_float+0x300>)
 800c446:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c44a:	bf8c      	ite	hi
 800c44c:	4690      	movhi	r8, r2
 800c44e:	4698      	movls	r8, r3
 800c450:	2303      	movs	r3, #3
 800c452:	f02b 0204 	bic.w	r2, fp, #4
 800c456:	6123      	str	r3, [r4, #16]
 800c458:	6022      	str	r2, [r4, #0]
 800c45a:	f04f 0900 	mov.w	r9, #0
 800c45e:	9700      	str	r7, [sp, #0]
 800c460:	4633      	mov	r3, r6
 800c462:	aa0b      	add	r2, sp, #44	; 0x2c
 800c464:	4621      	mov	r1, r4
 800c466:	4628      	mov	r0, r5
 800c468:	f000 f9e6 	bl	800c838 <_printf_common>
 800c46c:	3001      	adds	r0, #1
 800c46e:	f040 808d 	bne.w	800c58c <_printf_float+0x1d4>
 800c472:	f04f 30ff 	mov.w	r0, #4294967295
 800c476:	b00d      	add	sp, #52	; 0x34
 800c478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47c:	4642      	mov	r2, r8
 800c47e:	464b      	mov	r3, r9
 800c480:	4640      	mov	r0, r8
 800c482:	4649      	mov	r1, r9
 800c484:	f7f4 fb52 	bl	8000b2c <__aeabi_dcmpun>
 800c488:	b110      	cbz	r0, 800c490 <_printf_float+0xd8>
 800c48a:	4a8c      	ldr	r2, [pc, #560]	; (800c6bc <_printf_float+0x304>)
 800c48c:	4b8c      	ldr	r3, [pc, #560]	; (800c6c0 <_printf_float+0x308>)
 800c48e:	e7da      	b.n	800c446 <_printf_float+0x8e>
 800c490:	6861      	ldr	r1, [r4, #4]
 800c492:	1c4b      	adds	r3, r1, #1
 800c494:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c498:	a80a      	add	r0, sp, #40	; 0x28
 800c49a:	d13e      	bne.n	800c51a <_printf_float+0x162>
 800c49c:	2306      	movs	r3, #6
 800c49e:	6063      	str	r3, [r4, #4]
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c4a6:	ab09      	add	r3, sp, #36	; 0x24
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	ec49 8b10 	vmov	d0, r8, r9
 800c4ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c4b2:	6022      	str	r2, [r4, #0]
 800c4b4:	f8cd a004 	str.w	sl, [sp, #4]
 800c4b8:	6861      	ldr	r1, [r4, #4]
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f7ff fee8 	bl	800c290 <__cvt>
 800c4c0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c4c4:	2b47      	cmp	r3, #71	; 0x47
 800c4c6:	4680      	mov	r8, r0
 800c4c8:	d109      	bne.n	800c4de <_printf_float+0x126>
 800c4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4cc:	1cd8      	adds	r0, r3, #3
 800c4ce:	db02      	blt.n	800c4d6 <_printf_float+0x11e>
 800c4d0:	6862      	ldr	r2, [r4, #4]
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	dd47      	ble.n	800c566 <_printf_float+0x1ae>
 800c4d6:	f1aa 0a02 	sub.w	sl, sl, #2
 800c4da:	fa5f fa8a 	uxtb.w	sl, sl
 800c4de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c4e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4e4:	d824      	bhi.n	800c530 <_printf_float+0x178>
 800c4e6:	3901      	subs	r1, #1
 800c4e8:	4652      	mov	r2, sl
 800c4ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4ee:	9109      	str	r1, [sp, #36]	; 0x24
 800c4f0:	f7ff ff2f 	bl	800c352 <__exponent>
 800c4f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4f6:	1813      	adds	r3, r2, r0
 800c4f8:	2a01      	cmp	r2, #1
 800c4fa:	4681      	mov	r9, r0
 800c4fc:	6123      	str	r3, [r4, #16]
 800c4fe:	dc02      	bgt.n	800c506 <_printf_float+0x14e>
 800c500:	6822      	ldr	r2, [r4, #0]
 800c502:	07d1      	lsls	r1, r2, #31
 800c504:	d501      	bpl.n	800c50a <_printf_float+0x152>
 800c506:	3301      	adds	r3, #1
 800c508:	6123      	str	r3, [r4, #16]
 800c50a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d0a5      	beq.n	800c45e <_printf_float+0xa6>
 800c512:	232d      	movs	r3, #45	; 0x2d
 800c514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c518:	e7a1      	b.n	800c45e <_printf_float+0xa6>
 800c51a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c51e:	f000 8177 	beq.w	800c810 <_printf_float+0x458>
 800c522:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c526:	d1bb      	bne.n	800c4a0 <_printf_float+0xe8>
 800c528:	2900      	cmp	r1, #0
 800c52a:	d1b9      	bne.n	800c4a0 <_printf_float+0xe8>
 800c52c:	2301      	movs	r3, #1
 800c52e:	e7b6      	b.n	800c49e <_printf_float+0xe6>
 800c530:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c534:	d119      	bne.n	800c56a <_printf_float+0x1b2>
 800c536:	2900      	cmp	r1, #0
 800c538:	6863      	ldr	r3, [r4, #4]
 800c53a:	dd0c      	ble.n	800c556 <_printf_float+0x19e>
 800c53c:	6121      	str	r1, [r4, #16]
 800c53e:	b913      	cbnz	r3, 800c546 <_printf_float+0x18e>
 800c540:	6822      	ldr	r2, [r4, #0]
 800c542:	07d2      	lsls	r2, r2, #31
 800c544:	d502      	bpl.n	800c54c <_printf_float+0x194>
 800c546:	3301      	adds	r3, #1
 800c548:	440b      	add	r3, r1
 800c54a:	6123      	str	r3, [r4, #16]
 800c54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c54e:	65a3      	str	r3, [r4, #88]	; 0x58
 800c550:	f04f 0900 	mov.w	r9, #0
 800c554:	e7d9      	b.n	800c50a <_printf_float+0x152>
 800c556:	b913      	cbnz	r3, 800c55e <_printf_float+0x1a6>
 800c558:	6822      	ldr	r2, [r4, #0]
 800c55a:	07d0      	lsls	r0, r2, #31
 800c55c:	d501      	bpl.n	800c562 <_printf_float+0x1aa>
 800c55e:	3302      	adds	r3, #2
 800c560:	e7f3      	b.n	800c54a <_printf_float+0x192>
 800c562:	2301      	movs	r3, #1
 800c564:	e7f1      	b.n	800c54a <_printf_float+0x192>
 800c566:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c56a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c56e:	4293      	cmp	r3, r2
 800c570:	db05      	blt.n	800c57e <_printf_float+0x1c6>
 800c572:	6822      	ldr	r2, [r4, #0]
 800c574:	6123      	str	r3, [r4, #16]
 800c576:	07d1      	lsls	r1, r2, #31
 800c578:	d5e8      	bpl.n	800c54c <_printf_float+0x194>
 800c57a:	3301      	adds	r3, #1
 800c57c:	e7e5      	b.n	800c54a <_printf_float+0x192>
 800c57e:	2b00      	cmp	r3, #0
 800c580:	bfd4      	ite	le
 800c582:	f1c3 0302 	rsble	r3, r3, #2
 800c586:	2301      	movgt	r3, #1
 800c588:	4413      	add	r3, r2
 800c58a:	e7de      	b.n	800c54a <_printf_float+0x192>
 800c58c:	6823      	ldr	r3, [r4, #0]
 800c58e:	055a      	lsls	r2, r3, #21
 800c590:	d407      	bmi.n	800c5a2 <_printf_float+0x1ea>
 800c592:	6923      	ldr	r3, [r4, #16]
 800c594:	4642      	mov	r2, r8
 800c596:	4631      	mov	r1, r6
 800c598:	4628      	mov	r0, r5
 800c59a:	47b8      	blx	r7
 800c59c:	3001      	adds	r0, #1
 800c59e:	d12b      	bne.n	800c5f8 <_printf_float+0x240>
 800c5a0:	e767      	b.n	800c472 <_printf_float+0xba>
 800c5a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c5a6:	f240 80dc 	bls.w	800c762 <_printf_float+0x3aa>
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5b2:	f7f4 fa89 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d033      	beq.n	800c622 <_printf_float+0x26a>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	4a41      	ldr	r2, [pc, #260]	; (800c6c4 <_printf_float+0x30c>)
 800c5be:	4631      	mov	r1, r6
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	47b8      	blx	r7
 800c5c4:	3001      	adds	r0, #1
 800c5c6:	f43f af54 	beq.w	800c472 <_printf_float+0xba>
 800c5ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	db02      	blt.n	800c5d8 <_printf_float+0x220>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	07d8      	lsls	r0, r3, #31
 800c5d6:	d50f      	bpl.n	800c5f8 <_printf_float+0x240>
 800c5d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5dc:	4631      	mov	r1, r6
 800c5de:	4628      	mov	r0, r5
 800c5e0:	47b8      	blx	r7
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	f43f af45 	beq.w	800c472 <_printf_float+0xba>
 800c5e8:	f04f 0800 	mov.w	r8, #0
 800c5ec:	f104 091a 	add.w	r9, r4, #26
 800c5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	4543      	cmp	r3, r8
 800c5f6:	dc09      	bgt.n	800c60c <_printf_float+0x254>
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	079b      	lsls	r3, r3, #30
 800c5fc:	f100 8103 	bmi.w	800c806 <_printf_float+0x44e>
 800c600:	68e0      	ldr	r0, [r4, #12]
 800c602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c604:	4298      	cmp	r0, r3
 800c606:	bfb8      	it	lt
 800c608:	4618      	movlt	r0, r3
 800c60a:	e734      	b.n	800c476 <_printf_float+0xbe>
 800c60c:	2301      	movs	r3, #1
 800c60e:	464a      	mov	r2, r9
 800c610:	4631      	mov	r1, r6
 800c612:	4628      	mov	r0, r5
 800c614:	47b8      	blx	r7
 800c616:	3001      	adds	r0, #1
 800c618:	f43f af2b 	beq.w	800c472 <_printf_float+0xba>
 800c61c:	f108 0801 	add.w	r8, r8, #1
 800c620:	e7e6      	b.n	800c5f0 <_printf_float+0x238>
 800c622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c624:	2b00      	cmp	r3, #0
 800c626:	dc2b      	bgt.n	800c680 <_printf_float+0x2c8>
 800c628:	2301      	movs	r3, #1
 800c62a:	4a26      	ldr	r2, [pc, #152]	; (800c6c4 <_printf_float+0x30c>)
 800c62c:	4631      	mov	r1, r6
 800c62e:	4628      	mov	r0, r5
 800c630:	47b8      	blx	r7
 800c632:	3001      	adds	r0, #1
 800c634:	f43f af1d 	beq.w	800c472 <_printf_float+0xba>
 800c638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c63a:	b923      	cbnz	r3, 800c646 <_printf_float+0x28e>
 800c63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c63e:	b913      	cbnz	r3, 800c646 <_printf_float+0x28e>
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	07d9      	lsls	r1, r3, #31
 800c644:	d5d8      	bpl.n	800c5f8 <_printf_float+0x240>
 800c646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c64a:	4631      	mov	r1, r6
 800c64c:	4628      	mov	r0, r5
 800c64e:	47b8      	blx	r7
 800c650:	3001      	adds	r0, #1
 800c652:	f43f af0e 	beq.w	800c472 <_printf_float+0xba>
 800c656:	f04f 0900 	mov.w	r9, #0
 800c65a:	f104 0a1a 	add.w	sl, r4, #26
 800c65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c660:	425b      	negs	r3, r3
 800c662:	454b      	cmp	r3, r9
 800c664:	dc01      	bgt.n	800c66a <_printf_float+0x2b2>
 800c666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c668:	e794      	b.n	800c594 <_printf_float+0x1dc>
 800c66a:	2301      	movs	r3, #1
 800c66c:	4652      	mov	r2, sl
 800c66e:	4631      	mov	r1, r6
 800c670:	4628      	mov	r0, r5
 800c672:	47b8      	blx	r7
 800c674:	3001      	adds	r0, #1
 800c676:	f43f aefc 	beq.w	800c472 <_printf_float+0xba>
 800c67a:	f109 0901 	add.w	r9, r9, #1
 800c67e:	e7ee      	b.n	800c65e <_printf_float+0x2a6>
 800c680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c684:	429a      	cmp	r2, r3
 800c686:	bfa8      	it	ge
 800c688:	461a      	movge	r2, r3
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	4691      	mov	r9, r2
 800c68e:	dd07      	ble.n	800c6a0 <_printf_float+0x2e8>
 800c690:	4613      	mov	r3, r2
 800c692:	4631      	mov	r1, r6
 800c694:	4642      	mov	r2, r8
 800c696:	4628      	mov	r0, r5
 800c698:	47b8      	blx	r7
 800c69a:	3001      	adds	r0, #1
 800c69c:	f43f aee9 	beq.w	800c472 <_printf_float+0xba>
 800c6a0:	f104 031a 	add.w	r3, r4, #26
 800c6a4:	f04f 0b00 	mov.w	fp, #0
 800c6a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6ac:	9306      	str	r3, [sp, #24]
 800c6ae:	e015      	b.n	800c6dc <_printf_float+0x324>
 800c6b0:	7fefffff 	.word	0x7fefffff
 800c6b4:	0800fbea 	.word	0x0800fbea
 800c6b8:	0800f92c 	.word	0x0800f92c
 800c6bc:	0800f934 	.word	0x0800f934
 800c6c0:	0800f930 	.word	0x0800f930
 800c6c4:	0800f938 	.word	0x0800f938
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	9a06      	ldr	r2, [sp, #24]
 800c6cc:	4631      	mov	r1, r6
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	47b8      	blx	r7
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	f43f aecd 	beq.w	800c472 <_printf_float+0xba>
 800c6d8:	f10b 0b01 	add.w	fp, fp, #1
 800c6dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c6e0:	ebaa 0309 	sub.w	r3, sl, r9
 800c6e4:	455b      	cmp	r3, fp
 800c6e6:	dcef      	bgt.n	800c6c8 <_printf_float+0x310>
 800c6e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	44d0      	add	r8, sl
 800c6f0:	db15      	blt.n	800c71e <_printf_float+0x366>
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	07da      	lsls	r2, r3, #31
 800c6f6:	d412      	bmi.n	800c71e <_printf_float+0x366>
 800c6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6fc:	eba3 020a 	sub.w	r2, r3, sl
 800c700:	eba3 0a01 	sub.w	sl, r3, r1
 800c704:	4592      	cmp	sl, r2
 800c706:	bfa8      	it	ge
 800c708:	4692      	movge	sl, r2
 800c70a:	f1ba 0f00 	cmp.w	sl, #0
 800c70e:	dc0e      	bgt.n	800c72e <_printf_float+0x376>
 800c710:	f04f 0800 	mov.w	r8, #0
 800c714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c718:	f104 091a 	add.w	r9, r4, #26
 800c71c:	e019      	b.n	800c752 <_printf_float+0x39a>
 800c71e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c722:	4631      	mov	r1, r6
 800c724:	4628      	mov	r0, r5
 800c726:	47b8      	blx	r7
 800c728:	3001      	adds	r0, #1
 800c72a:	d1e5      	bne.n	800c6f8 <_printf_float+0x340>
 800c72c:	e6a1      	b.n	800c472 <_printf_float+0xba>
 800c72e:	4653      	mov	r3, sl
 800c730:	4642      	mov	r2, r8
 800c732:	4631      	mov	r1, r6
 800c734:	4628      	mov	r0, r5
 800c736:	47b8      	blx	r7
 800c738:	3001      	adds	r0, #1
 800c73a:	d1e9      	bne.n	800c710 <_printf_float+0x358>
 800c73c:	e699      	b.n	800c472 <_printf_float+0xba>
 800c73e:	2301      	movs	r3, #1
 800c740:	464a      	mov	r2, r9
 800c742:	4631      	mov	r1, r6
 800c744:	4628      	mov	r0, r5
 800c746:	47b8      	blx	r7
 800c748:	3001      	adds	r0, #1
 800c74a:	f43f ae92 	beq.w	800c472 <_printf_float+0xba>
 800c74e:	f108 0801 	add.w	r8, r8, #1
 800c752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c756:	1a9b      	subs	r3, r3, r2
 800c758:	eba3 030a 	sub.w	r3, r3, sl
 800c75c:	4543      	cmp	r3, r8
 800c75e:	dcee      	bgt.n	800c73e <_printf_float+0x386>
 800c760:	e74a      	b.n	800c5f8 <_printf_float+0x240>
 800c762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c764:	2a01      	cmp	r2, #1
 800c766:	dc01      	bgt.n	800c76c <_printf_float+0x3b4>
 800c768:	07db      	lsls	r3, r3, #31
 800c76a:	d53a      	bpl.n	800c7e2 <_printf_float+0x42a>
 800c76c:	2301      	movs	r3, #1
 800c76e:	4642      	mov	r2, r8
 800c770:	4631      	mov	r1, r6
 800c772:	4628      	mov	r0, r5
 800c774:	47b8      	blx	r7
 800c776:	3001      	adds	r0, #1
 800c778:	f43f ae7b 	beq.w	800c472 <_printf_float+0xba>
 800c77c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c780:	4631      	mov	r1, r6
 800c782:	4628      	mov	r0, r5
 800c784:	47b8      	blx	r7
 800c786:	3001      	adds	r0, #1
 800c788:	f108 0801 	add.w	r8, r8, #1
 800c78c:	f43f ae71 	beq.w	800c472 <_printf_float+0xba>
 800c790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c792:	2200      	movs	r2, #0
 800c794:	f103 3aff 	add.w	sl, r3, #4294967295
 800c798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c79c:	2300      	movs	r3, #0
 800c79e:	f7f4 f993 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7a2:	b9c8      	cbnz	r0, 800c7d8 <_printf_float+0x420>
 800c7a4:	4653      	mov	r3, sl
 800c7a6:	4642      	mov	r2, r8
 800c7a8:	4631      	mov	r1, r6
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	47b8      	blx	r7
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	d10e      	bne.n	800c7d0 <_printf_float+0x418>
 800c7b2:	e65e      	b.n	800c472 <_printf_float+0xba>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	4652      	mov	r2, sl
 800c7b8:	4631      	mov	r1, r6
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	47b8      	blx	r7
 800c7be:	3001      	adds	r0, #1
 800c7c0:	f43f ae57 	beq.w	800c472 <_printf_float+0xba>
 800c7c4:	f108 0801 	add.w	r8, r8, #1
 800c7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	4543      	cmp	r3, r8
 800c7ce:	dcf1      	bgt.n	800c7b4 <_printf_float+0x3fc>
 800c7d0:	464b      	mov	r3, r9
 800c7d2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7d6:	e6de      	b.n	800c596 <_printf_float+0x1de>
 800c7d8:	f04f 0800 	mov.w	r8, #0
 800c7dc:	f104 0a1a 	add.w	sl, r4, #26
 800c7e0:	e7f2      	b.n	800c7c8 <_printf_float+0x410>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e7df      	b.n	800c7a6 <_printf_float+0x3ee>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	464a      	mov	r2, r9
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	47b8      	blx	r7
 800c7f0:	3001      	adds	r0, #1
 800c7f2:	f43f ae3e 	beq.w	800c472 <_printf_float+0xba>
 800c7f6:	f108 0801 	add.w	r8, r8, #1
 800c7fa:	68e3      	ldr	r3, [r4, #12]
 800c7fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7fe:	1a9b      	subs	r3, r3, r2
 800c800:	4543      	cmp	r3, r8
 800c802:	dcf0      	bgt.n	800c7e6 <_printf_float+0x42e>
 800c804:	e6fc      	b.n	800c600 <_printf_float+0x248>
 800c806:	f04f 0800 	mov.w	r8, #0
 800c80a:	f104 0919 	add.w	r9, r4, #25
 800c80e:	e7f4      	b.n	800c7fa <_printf_float+0x442>
 800c810:	2900      	cmp	r1, #0
 800c812:	f43f ae8b 	beq.w	800c52c <_printf_float+0x174>
 800c816:	2300      	movs	r3, #0
 800c818:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c81c:	ab09      	add	r3, sp, #36	; 0x24
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	ec49 8b10 	vmov	d0, r8, r9
 800c824:	6022      	str	r2, [r4, #0]
 800c826:	f8cd a004 	str.w	sl, [sp, #4]
 800c82a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c82e:	4628      	mov	r0, r5
 800c830:	f7ff fd2e 	bl	800c290 <__cvt>
 800c834:	4680      	mov	r8, r0
 800c836:	e648      	b.n	800c4ca <_printf_float+0x112>

0800c838 <_printf_common>:
 800c838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c83c:	4691      	mov	r9, r2
 800c83e:	461f      	mov	r7, r3
 800c840:	688a      	ldr	r2, [r1, #8]
 800c842:	690b      	ldr	r3, [r1, #16]
 800c844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c848:	4293      	cmp	r3, r2
 800c84a:	bfb8      	it	lt
 800c84c:	4613      	movlt	r3, r2
 800c84e:	f8c9 3000 	str.w	r3, [r9]
 800c852:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c856:	4606      	mov	r6, r0
 800c858:	460c      	mov	r4, r1
 800c85a:	b112      	cbz	r2, 800c862 <_printf_common+0x2a>
 800c85c:	3301      	adds	r3, #1
 800c85e:	f8c9 3000 	str.w	r3, [r9]
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	0699      	lsls	r1, r3, #26
 800c866:	bf42      	ittt	mi
 800c868:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c86c:	3302      	addmi	r3, #2
 800c86e:	f8c9 3000 	strmi.w	r3, [r9]
 800c872:	6825      	ldr	r5, [r4, #0]
 800c874:	f015 0506 	ands.w	r5, r5, #6
 800c878:	d107      	bne.n	800c88a <_printf_common+0x52>
 800c87a:	f104 0a19 	add.w	sl, r4, #25
 800c87e:	68e3      	ldr	r3, [r4, #12]
 800c880:	f8d9 2000 	ldr.w	r2, [r9]
 800c884:	1a9b      	subs	r3, r3, r2
 800c886:	42ab      	cmp	r3, r5
 800c888:	dc28      	bgt.n	800c8dc <_printf_common+0xa4>
 800c88a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c88e:	6822      	ldr	r2, [r4, #0]
 800c890:	3300      	adds	r3, #0
 800c892:	bf18      	it	ne
 800c894:	2301      	movne	r3, #1
 800c896:	0692      	lsls	r2, r2, #26
 800c898:	d42d      	bmi.n	800c8f6 <_printf_common+0xbe>
 800c89a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c89e:	4639      	mov	r1, r7
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	47c0      	blx	r8
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	d020      	beq.n	800c8ea <_printf_common+0xb2>
 800c8a8:	6823      	ldr	r3, [r4, #0]
 800c8aa:	68e5      	ldr	r5, [r4, #12]
 800c8ac:	f8d9 2000 	ldr.w	r2, [r9]
 800c8b0:	f003 0306 	and.w	r3, r3, #6
 800c8b4:	2b04      	cmp	r3, #4
 800c8b6:	bf08      	it	eq
 800c8b8:	1aad      	subeq	r5, r5, r2
 800c8ba:	68a3      	ldr	r3, [r4, #8]
 800c8bc:	6922      	ldr	r2, [r4, #16]
 800c8be:	bf0c      	ite	eq
 800c8c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8c4:	2500      	movne	r5, #0
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	bfc4      	itt	gt
 800c8ca:	1a9b      	subgt	r3, r3, r2
 800c8cc:	18ed      	addgt	r5, r5, r3
 800c8ce:	f04f 0900 	mov.w	r9, #0
 800c8d2:	341a      	adds	r4, #26
 800c8d4:	454d      	cmp	r5, r9
 800c8d6:	d11a      	bne.n	800c90e <_printf_common+0xd6>
 800c8d8:	2000      	movs	r0, #0
 800c8da:	e008      	b.n	800c8ee <_printf_common+0xb6>
 800c8dc:	2301      	movs	r3, #1
 800c8de:	4652      	mov	r2, sl
 800c8e0:	4639      	mov	r1, r7
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	47c0      	blx	r8
 800c8e6:	3001      	adds	r0, #1
 800c8e8:	d103      	bne.n	800c8f2 <_printf_common+0xba>
 800c8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8f2:	3501      	adds	r5, #1
 800c8f4:	e7c3      	b.n	800c87e <_printf_common+0x46>
 800c8f6:	18e1      	adds	r1, r4, r3
 800c8f8:	1c5a      	adds	r2, r3, #1
 800c8fa:	2030      	movs	r0, #48	; 0x30
 800c8fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c900:	4422      	add	r2, r4
 800c902:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c906:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c90a:	3302      	adds	r3, #2
 800c90c:	e7c5      	b.n	800c89a <_printf_common+0x62>
 800c90e:	2301      	movs	r3, #1
 800c910:	4622      	mov	r2, r4
 800c912:	4639      	mov	r1, r7
 800c914:	4630      	mov	r0, r6
 800c916:	47c0      	blx	r8
 800c918:	3001      	adds	r0, #1
 800c91a:	d0e6      	beq.n	800c8ea <_printf_common+0xb2>
 800c91c:	f109 0901 	add.w	r9, r9, #1
 800c920:	e7d8      	b.n	800c8d4 <_printf_common+0x9c>
	...

0800c924 <_printf_i>:
 800c924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c928:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c92c:	460c      	mov	r4, r1
 800c92e:	7e09      	ldrb	r1, [r1, #24]
 800c930:	b085      	sub	sp, #20
 800c932:	296e      	cmp	r1, #110	; 0x6e
 800c934:	4617      	mov	r7, r2
 800c936:	4606      	mov	r6, r0
 800c938:	4698      	mov	r8, r3
 800c93a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c93c:	f000 80b3 	beq.w	800caa6 <_printf_i+0x182>
 800c940:	d822      	bhi.n	800c988 <_printf_i+0x64>
 800c942:	2963      	cmp	r1, #99	; 0x63
 800c944:	d036      	beq.n	800c9b4 <_printf_i+0x90>
 800c946:	d80a      	bhi.n	800c95e <_printf_i+0x3a>
 800c948:	2900      	cmp	r1, #0
 800c94a:	f000 80b9 	beq.w	800cac0 <_printf_i+0x19c>
 800c94e:	2958      	cmp	r1, #88	; 0x58
 800c950:	f000 8083 	beq.w	800ca5a <_printf_i+0x136>
 800c954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c958:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c95c:	e032      	b.n	800c9c4 <_printf_i+0xa0>
 800c95e:	2964      	cmp	r1, #100	; 0x64
 800c960:	d001      	beq.n	800c966 <_printf_i+0x42>
 800c962:	2969      	cmp	r1, #105	; 0x69
 800c964:	d1f6      	bne.n	800c954 <_printf_i+0x30>
 800c966:	6820      	ldr	r0, [r4, #0]
 800c968:	6813      	ldr	r3, [r2, #0]
 800c96a:	0605      	lsls	r5, r0, #24
 800c96c:	f103 0104 	add.w	r1, r3, #4
 800c970:	d52a      	bpl.n	800c9c8 <_printf_i+0xa4>
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	6011      	str	r1, [r2, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	da03      	bge.n	800c982 <_printf_i+0x5e>
 800c97a:	222d      	movs	r2, #45	; 0x2d
 800c97c:	425b      	negs	r3, r3
 800c97e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c982:	486f      	ldr	r0, [pc, #444]	; (800cb40 <_printf_i+0x21c>)
 800c984:	220a      	movs	r2, #10
 800c986:	e039      	b.n	800c9fc <_printf_i+0xd8>
 800c988:	2973      	cmp	r1, #115	; 0x73
 800c98a:	f000 809d 	beq.w	800cac8 <_printf_i+0x1a4>
 800c98e:	d808      	bhi.n	800c9a2 <_printf_i+0x7e>
 800c990:	296f      	cmp	r1, #111	; 0x6f
 800c992:	d020      	beq.n	800c9d6 <_printf_i+0xb2>
 800c994:	2970      	cmp	r1, #112	; 0x70
 800c996:	d1dd      	bne.n	800c954 <_printf_i+0x30>
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	f043 0320 	orr.w	r3, r3, #32
 800c99e:	6023      	str	r3, [r4, #0]
 800c9a0:	e003      	b.n	800c9aa <_printf_i+0x86>
 800c9a2:	2975      	cmp	r1, #117	; 0x75
 800c9a4:	d017      	beq.n	800c9d6 <_printf_i+0xb2>
 800c9a6:	2978      	cmp	r1, #120	; 0x78
 800c9a8:	d1d4      	bne.n	800c954 <_printf_i+0x30>
 800c9aa:	2378      	movs	r3, #120	; 0x78
 800c9ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9b0:	4864      	ldr	r0, [pc, #400]	; (800cb44 <_printf_i+0x220>)
 800c9b2:	e055      	b.n	800ca60 <_printf_i+0x13c>
 800c9b4:	6813      	ldr	r3, [r2, #0]
 800c9b6:	1d19      	adds	r1, r3, #4
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6011      	str	r1, [r2, #0]
 800c9bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e08c      	b.n	800cae2 <_printf_i+0x1be>
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	6011      	str	r1, [r2, #0]
 800c9cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9d0:	bf18      	it	ne
 800c9d2:	b21b      	sxthne	r3, r3
 800c9d4:	e7cf      	b.n	800c976 <_printf_i+0x52>
 800c9d6:	6813      	ldr	r3, [r2, #0]
 800c9d8:	6825      	ldr	r5, [r4, #0]
 800c9da:	1d18      	adds	r0, r3, #4
 800c9dc:	6010      	str	r0, [r2, #0]
 800c9de:	0628      	lsls	r0, r5, #24
 800c9e0:	d501      	bpl.n	800c9e6 <_printf_i+0xc2>
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	e002      	b.n	800c9ec <_printf_i+0xc8>
 800c9e6:	0668      	lsls	r0, r5, #25
 800c9e8:	d5fb      	bpl.n	800c9e2 <_printf_i+0xbe>
 800c9ea:	881b      	ldrh	r3, [r3, #0]
 800c9ec:	4854      	ldr	r0, [pc, #336]	; (800cb40 <_printf_i+0x21c>)
 800c9ee:	296f      	cmp	r1, #111	; 0x6f
 800c9f0:	bf14      	ite	ne
 800c9f2:	220a      	movne	r2, #10
 800c9f4:	2208      	moveq	r2, #8
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9fc:	6865      	ldr	r5, [r4, #4]
 800c9fe:	60a5      	str	r5, [r4, #8]
 800ca00:	2d00      	cmp	r5, #0
 800ca02:	f2c0 8095 	blt.w	800cb30 <_printf_i+0x20c>
 800ca06:	6821      	ldr	r1, [r4, #0]
 800ca08:	f021 0104 	bic.w	r1, r1, #4
 800ca0c:	6021      	str	r1, [r4, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d13d      	bne.n	800ca8e <_printf_i+0x16a>
 800ca12:	2d00      	cmp	r5, #0
 800ca14:	f040 808e 	bne.w	800cb34 <_printf_i+0x210>
 800ca18:	4665      	mov	r5, ip
 800ca1a:	2a08      	cmp	r2, #8
 800ca1c:	d10b      	bne.n	800ca36 <_printf_i+0x112>
 800ca1e:	6823      	ldr	r3, [r4, #0]
 800ca20:	07db      	lsls	r3, r3, #31
 800ca22:	d508      	bpl.n	800ca36 <_printf_i+0x112>
 800ca24:	6923      	ldr	r3, [r4, #16]
 800ca26:	6862      	ldr	r2, [r4, #4]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	bfde      	ittt	le
 800ca2c:	2330      	movle	r3, #48	; 0x30
 800ca2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca32:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca36:	ebac 0305 	sub.w	r3, ip, r5
 800ca3a:	6123      	str	r3, [r4, #16]
 800ca3c:	f8cd 8000 	str.w	r8, [sp]
 800ca40:	463b      	mov	r3, r7
 800ca42:	aa03      	add	r2, sp, #12
 800ca44:	4621      	mov	r1, r4
 800ca46:	4630      	mov	r0, r6
 800ca48:	f7ff fef6 	bl	800c838 <_printf_common>
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d14d      	bne.n	800caec <_printf_i+0x1c8>
 800ca50:	f04f 30ff 	mov.w	r0, #4294967295
 800ca54:	b005      	add	sp, #20
 800ca56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca5a:	4839      	ldr	r0, [pc, #228]	; (800cb40 <_printf_i+0x21c>)
 800ca5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ca60:	6813      	ldr	r3, [r2, #0]
 800ca62:	6821      	ldr	r1, [r4, #0]
 800ca64:	1d1d      	adds	r5, r3, #4
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	6015      	str	r5, [r2, #0]
 800ca6a:	060a      	lsls	r2, r1, #24
 800ca6c:	d50b      	bpl.n	800ca86 <_printf_i+0x162>
 800ca6e:	07ca      	lsls	r2, r1, #31
 800ca70:	bf44      	itt	mi
 800ca72:	f041 0120 	orrmi.w	r1, r1, #32
 800ca76:	6021      	strmi	r1, [r4, #0]
 800ca78:	b91b      	cbnz	r3, 800ca82 <_printf_i+0x15e>
 800ca7a:	6822      	ldr	r2, [r4, #0]
 800ca7c:	f022 0220 	bic.w	r2, r2, #32
 800ca80:	6022      	str	r2, [r4, #0]
 800ca82:	2210      	movs	r2, #16
 800ca84:	e7b7      	b.n	800c9f6 <_printf_i+0xd2>
 800ca86:	064d      	lsls	r5, r1, #25
 800ca88:	bf48      	it	mi
 800ca8a:	b29b      	uxthmi	r3, r3
 800ca8c:	e7ef      	b.n	800ca6e <_printf_i+0x14a>
 800ca8e:	4665      	mov	r5, ip
 800ca90:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca94:	fb02 3311 	mls	r3, r2, r1, r3
 800ca98:	5cc3      	ldrb	r3, [r0, r3]
 800ca9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ca9e:	460b      	mov	r3, r1
 800caa0:	2900      	cmp	r1, #0
 800caa2:	d1f5      	bne.n	800ca90 <_printf_i+0x16c>
 800caa4:	e7b9      	b.n	800ca1a <_printf_i+0xf6>
 800caa6:	6813      	ldr	r3, [r2, #0]
 800caa8:	6825      	ldr	r5, [r4, #0]
 800caaa:	6961      	ldr	r1, [r4, #20]
 800caac:	1d18      	adds	r0, r3, #4
 800caae:	6010      	str	r0, [r2, #0]
 800cab0:	0628      	lsls	r0, r5, #24
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	d501      	bpl.n	800caba <_printf_i+0x196>
 800cab6:	6019      	str	r1, [r3, #0]
 800cab8:	e002      	b.n	800cac0 <_printf_i+0x19c>
 800caba:	066a      	lsls	r2, r5, #25
 800cabc:	d5fb      	bpl.n	800cab6 <_printf_i+0x192>
 800cabe:	8019      	strh	r1, [r3, #0]
 800cac0:	2300      	movs	r3, #0
 800cac2:	6123      	str	r3, [r4, #16]
 800cac4:	4665      	mov	r5, ip
 800cac6:	e7b9      	b.n	800ca3c <_printf_i+0x118>
 800cac8:	6813      	ldr	r3, [r2, #0]
 800caca:	1d19      	adds	r1, r3, #4
 800cacc:	6011      	str	r1, [r2, #0]
 800cace:	681d      	ldr	r5, [r3, #0]
 800cad0:	6862      	ldr	r2, [r4, #4]
 800cad2:	2100      	movs	r1, #0
 800cad4:	4628      	mov	r0, r5
 800cad6:	f7f3 fb83 	bl	80001e0 <memchr>
 800cada:	b108      	cbz	r0, 800cae0 <_printf_i+0x1bc>
 800cadc:	1b40      	subs	r0, r0, r5
 800cade:	6060      	str	r0, [r4, #4]
 800cae0:	6863      	ldr	r3, [r4, #4]
 800cae2:	6123      	str	r3, [r4, #16]
 800cae4:	2300      	movs	r3, #0
 800cae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caea:	e7a7      	b.n	800ca3c <_printf_i+0x118>
 800caec:	6923      	ldr	r3, [r4, #16]
 800caee:	462a      	mov	r2, r5
 800caf0:	4639      	mov	r1, r7
 800caf2:	4630      	mov	r0, r6
 800caf4:	47c0      	blx	r8
 800caf6:	3001      	adds	r0, #1
 800caf8:	d0aa      	beq.n	800ca50 <_printf_i+0x12c>
 800cafa:	6823      	ldr	r3, [r4, #0]
 800cafc:	079b      	lsls	r3, r3, #30
 800cafe:	d413      	bmi.n	800cb28 <_printf_i+0x204>
 800cb00:	68e0      	ldr	r0, [r4, #12]
 800cb02:	9b03      	ldr	r3, [sp, #12]
 800cb04:	4298      	cmp	r0, r3
 800cb06:	bfb8      	it	lt
 800cb08:	4618      	movlt	r0, r3
 800cb0a:	e7a3      	b.n	800ca54 <_printf_i+0x130>
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	464a      	mov	r2, r9
 800cb10:	4639      	mov	r1, r7
 800cb12:	4630      	mov	r0, r6
 800cb14:	47c0      	blx	r8
 800cb16:	3001      	adds	r0, #1
 800cb18:	d09a      	beq.n	800ca50 <_printf_i+0x12c>
 800cb1a:	3501      	adds	r5, #1
 800cb1c:	68e3      	ldr	r3, [r4, #12]
 800cb1e:	9a03      	ldr	r2, [sp, #12]
 800cb20:	1a9b      	subs	r3, r3, r2
 800cb22:	42ab      	cmp	r3, r5
 800cb24:	dcf2      	bgt.n	800cb0c <_printf_i+0x1e8>
 800cb26:	e7eb      	b.n	800cb00 <_printf_i+0x1dc>
 800cb28:	2500      	movs	r5, #0
 800cb2a:	f104 0919 	add.w	r9, r4, #25
 800cb2e:	e7f5      	b.n	800cb1c <_printf_i+0x1f8>
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1ac      	bne.n	800ca8e <_printf_i+0x16a>
 800cb34:	7803      	ldrb	r3, [r0, #0]
 800cb36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb3e:	e76c      	b.n	800ca1a <_printf_i+0xf6>
 800cb40:	0800f93a 	.word	0x0800f93a
 800cb44:	0800f94b 	.word	0x0800f94b

0800cb48 <iprintf>:
 800cb48:	b40f      	push	{r0, r1, r2, r3}
 800cb4a:	4b0a      	ldr	r3, [pc, #40]	; (800cb74 <iprintf+0x2c>)
 800cb4c:	b513      	push	{r0, r1, r4, lr}
 800cb4e:	681c      	ldr	r4, [r3, #0]
 800cb50:	b124      	cbz	r4, 800cb5c <iprintf+0x14>
 800cb52:	69a3      	ldr	r3, [r4, #24]
 800cb54:	b913      	cbnz	r3, 800cb5c <iprintf+0x14>
 800cb56:	4620      	mov	r0, r4
 800cb58:	f001 f916 	bl	800dd88 <__sinit>
 800cb5c:	ab05      	add	r3, sp, #20
 800cb5e:	9a04      	ldr	r2, [sp, #16]
 800cb60:	68a1      	ldr	r1, [r4, #8]
 800cb62:	9301      	str	r3, [sp, #4]
 800cb64:	4620      	mov	r0, r4
 800cb66:	f001 fdcf 	bl	800e708 <_vfiprintf_r>
 800cb6a:	b002      	add	sp, #8
 800cb6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb70:	b004      	add	sp, #16
 800cb72:	4770      	bx	lr
 800cb74:	20001670 	.word	0x20001670

0800cb78 <_puts_r>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	460e      	mov	r6, r1
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	b118      	cbz	r0, 800cb88 <_puts_r+0x10>
 800cb80:	6983      	ldr	r3, [r0, #24]
 800cb82:	b90b      	cbnz	r3, 800cb88 <_puts_r+0x10>
 800cb84:	f001 f900 	bl	800dd88 <__sinit>
 800cb88:	69ab      	ldr	r3, [r5, #24]
 800cb8a:	68ac      	ldr	r4, [r5, #8]
 800cb8c:	b913      	cbnz	r3, 800cb94 <_puts_r+0x1c>
 800cb8e:	4628      	mov	r0, r5
 800cb90:	f001 f8fa 	bl	800dd88 <__sinit>
 800cb94:	4b23      	ldr	r3, [pc, #140]	; (800cc24 <_puts_r+0xac>)
 800cb96:	429c      	cmp	r4, r3
 800cb98:	d117      	bne.n	800cbca <_puts_r+0x52>
 800cb9a:	686c      	ldr	r4, [r5, #4]
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	071b      	lsls	r3, r3, #28
 800cba0:	d51d      	bpl.n	800cbde <_puts_r+0x66>
 800cba2:	6923      	ldr	r3, [r4, #16]
 800cba4:	b1db      	cbz	r3, 800cbde <_puts_r+0x66>
 800cba6:	3e01      	subs	r6, #1
 800cba8:	68a3      	ldr	r3, [r4, #8]
 800cbaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	60a3      	str	r3, [r4, #8]
 800cbb2:	b9e9      	cbnz	r1, 800cbf0 <_puts_r+0x78>
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	da2e      	bge.n	800cc16 <_puts_r+0x9e>
 800cbb8:	4622      	mov	r2, r4
 800cbba:	210a      	movs	r1, #10
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	f000 f8ed 	bl	800cd9c <__swbuf_r>
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	d011      	beq.n	800cbea <_puts_r+0x72>
 800cbc6:	200a      	movs	r0, #10
 800cbc8:	e011      	b.n	800cbee <_puts_r+0x76>
 800cbca:	4b17      	ldr	r3, [pc, #92]	; (800cc28 <_puts_r+0xb0>)
 800cbcc:	429c      	cmp	r4, r3
 800cbce:	d101      	bne.n	800cbd4 <_puts_r+0x5c>
 800cbd0:	68ac      	ldr	r4, [r5, #8]
 800cbd2:	e7e3      	b.n	800cb9c <_puts_r+0x24>
 800cbd4:	4b15      	ldr	r3, [pc, #84]	; (800cc2c <_puts_r+0xb4>)
 800cbd6:	429c      	cmp	r4, r3
 800cbd8:	bf08      	it	eq
 800cbda:	68ec      	ldreq	r4, [r5, #12]
 800cbdc:	e7de      	b.n	800cb9c <_puts_r+0x24>
 800cbde:	4621      	mov	r1, r4
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	f000 f92d 	bl	800ce40 <__swsetup_r>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d0dd      	beq.n	800cba6 <_puts_r+0x2e>
 800cbea:	f04f 30ff 	mov.w	r0, #4294967295
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	da04      	bge.n	800cbfe <_puts_r+0x86>
 800cbf4:	69a2      	ldr	r2, [r4, #24]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	dc06      	bgt.n	800cc08 <_puts_r+0x90>
 800cbfa:	290a      	cmp	r1, #10
 800cbfc:	d004      	beq.n	800cc08 <_puts_r+0x90>
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	1c5a      	adds	r2, r3, #1
 800cc02:	6022      	str	r2, [r4, #0]
 800cc04:	7019      	strb	r1, [r3, #0]
 800cc06:	e7cf      	b.n	800cba8 <_puts_r+0x30>
 800cc08:	4622      	mov	r2, r4
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f000 f8c6 	bl	800cd9c <__swbuf_r>
 800cc10:	3001      	adds	r0, #1
 800cc12:	d1c9      	bne.n	800cba8 <_puts_r+0x30>
 800cc14:	e7e9      	b.n	800cbea <_puts_r+0x72>
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	200a      	movs	r0, #10
 800cc1a:	1c5a      	adds	r2, r3, #1
 800cc1c:	6022      	str	r2, [r4, #0]
 800cc1e:	7018      	strb	r0, [r3, #0]
 800cc20:	e7e5      	b.n	800cbee <_puts_r+0x76>
 800cc22:	bf00      	nop
 800cc24:	0800f98c 	.word	0x0800f98c
 800cc28:	0800f9ac 	.word	0x0800f9ac
 800cc2c:	0800f96c 	.word	0x0800f96c

0800cc30 <puts>:
 800cc30:	4b02      	ldr	r3, [pc, #8]	; (800cc3c <puts+0xc>)
 800cc32:	4601      	mov	r1, r0
 800cc34:	6818      	ldr	r0, [r3, #0]
 800cc36:	f7ff bf9f 	b.w	800cb78 <_puts_r>
 800cc3a:	bf00      	nop
 800cc3c:	20001670 	.word	0x20001670

0800cc40 <setvbuf>:
 800cc40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc44:	461d      	mov	r5, r3
 800cc46:	4b51      	ldr	r3, [pc, #324]	; (800cd8c <setvbuf+0x14c>)
 800cc48:	681e      	ldr	r6, [r3, #0]
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	460f      	mov	r7, r1
 800cc4e:	4690      	mov	r8, r2
 800cc50:	b126      	cbz	r6, 800cc5c <setvbuf+0x1c>
 800cc52:	69b3      	ldr	r3, [r6, #24]
 800cc54:	b913      	cbnz	r3, 800cc5c <setvbuf+0x1c>
 800cc56:	4630      	mov	r0, r6
 800cc58:	f001 f896 	bl	800dd88 <__sinit>
 800cc5c:	4b4c      	ldr	r3, [pc, #304]	; (800cd90 <setvbuf+0x150>)
 800cc5e:	429c      	cmp	r4, r3
 800cc60:	d152      	bne.n	800cd08 <setvbuf+0xc8>
 800cc62:	6874      	ldr	r4, [r6, #4]
 800cc64:	f1b8 0f02 	cmp.w	r8, #2
 800cc68:	d006      	beq.n	800cc78 <setvbuf+0x38>
 800cc6a:	f1b8 0f01 	cmp.w	r8, #1
 800cc6e:	f200 8089 	bhi.w	800cd84 <setvbuf+0x144>
 800cc72:	2d00      	cmp	r5, #0
 800cc74:	f2c0 8086 	blt.w	800cd84 <setvbuf+0x144>
 800cc78:	4621      	mov	r1, r4
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	f001 f81a 	bl	800dcb4 <_fflush_r>
 800cc80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc82:	b141      	cbz	r1, 800cc96 <setvbuf+0x56>
 800cc84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc88:	4299      	cmp	r1, r3
 800cc8a:	d002      	beq.n	800cc92 <setvbuf+0x52>
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f001 fc69 	bl	800e564 <_free_r>
 800cc92:	2300      	movs	r3, #0
 800cc94:	6363      	str	r3, [r4, #52]	; 0x34
 800cc96:	2300      	movs	r3, #0
 800cc98:	61a3      	str	r3, [r4, #24]
 800cc9a:	6063      	str	r3, [r4, #4]
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	061b      	lsls	r3, r3, #24
 800cca0:	d503      	bpl.n	800ccaa <setvbuf+0x6a>
 800cca2:	6921      	ldr	r1, [r4, #16]
 800cca4:	4630      	mov	r0, r6
 800cca6:	f001 fc5d 	bl	800e564 <_free_r>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ccb0:	f023 0303 	bic.w	r3, r3, #3
 800ccb4:	f1b8 0f02 	cmp.w	r8, #2
 800ccb8:	81a3      	strh	r3, [r4, #12]
 800ccba:	d05d      	beq.n	800cd78 <setvbuf+0x138>
 800ccbc:	ab01      	add	r3, sp, #4
 800ccbe:	466a      	mov	r2, sp
 800ccc0:	4621      	mov	r1, r4
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f001 f8f8 	bl	800deb8 <__swhatbuf_r>
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	4318      	orrs	r0, r3
 800cccc:	81a0      	strh	r0, [r4, #12]
 800ccce:	bb2d      	cbnz	r5, 800cd1c <setvbuf+0xdc>
 800ccd0:	9d00      	ldr	r5, [sp, #0]
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f001 f954 	bl	800df80 <malloc>
 800ccd8:	4607      	mov	r7, r0
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d14e      	bne.n	800cd7c <setvbuf+0x13c>
 800ccde:	f8dd 9000 	ldr.w	r9, [sp]
 800cce2:	45a9      	cmp	r9, r5
 800cce4:	d13c      	bne.n	800cd60 <setvbuf+0x120>
 800cce6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	f043 0302 	orr.w	r3, r3, #2
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	60a3      	str	r3, [r4, #8]
 800ccf6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccfa:	6023      	str	r3, [r4, #0]
 800ccfc:	6123      	str	r3, [r4, #16]
 800ccfe:	2301      	movs	r3, #1
 800cd00:	6163      	str	r3, [r4, #20]
 800cd02:	b003      	add	sp, #12
 800cd04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd08:	4b22      	ldr	r3, [pc, #136]	; (800cd94 <setvbuf+0x154>)
 800cd0a:	429c      	cmp	r4, r3
 800cd0c:	d101      	bne.n	800cd12 <setvbuf+0xd2>
 800cd0e:	68b4      	ldr	r4, [r6, #8]
 800cd10:	e7a8      	b.n	800cc64 <setvbuf+0x24>
 800cd12:	4b21      	ldr	r3, [pc, #132]	; (800cd98 <setvbuf+0x158>)
 800cd14:	429c      	cmp	r4, r3
 800cd16:	bf08      	it	eq
 800cd18:	68f4      	ldreq	r4, [r6, #12]
 800cd1a:	e7a3      	b.n	800cc64 <setvbuf+0x24>
 800cd1c:	2f00      	cmp	r7, #0
 800cd1e:	d0d8      	beq.n	800ccd2 <setvbuf+0x92>
 800cd20:	69b3      	ldr	r3, [r6, #24]
 800cd22:	b913      	cbnz	r3, 800cd2a <setvbuf+0xea>
 800cd24:	4630      	mov	r0, r6
 800cd26:	f001 f82f 	bl	800dd88 <__sinit>
 800cd2a:	f1b8 0f01 	cmp.w	r8, #1
 800cd2e:	bf08      	it	eq
 800cd30:	89a3      	ldrheq	r3, [r4, #12]
 800cd32:	6027      	str	r7, [r4, #0]
 800cd34:	bf04      	itt	eq
 800cd36:	f043 0301 	orreq.w	r3, r3, #1
 800cd3a:	81a3      	strheq	r3, [r4, #12]
 800cd3c:	89a3      	ldrh	r3, [r4, #12]
 800cd3e:	f013 0008 	ands.w	r0, r3, #8
 800cd42:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800cd46:	d01b      	beq.n	800cd80 <setvbuf+0x140>
 800cd48:	f013 0001 	ands.w	r0, r3, #1
 800cd4c:	bf18      	it	ne
 800cd4e:	426d      	negne	r5, r5
 800cd50:	f04f 0300 	mov.w	r3, #0
 800cd54:	bf1d      	ittte	ne
 800cd56:	60a3      	strne	r3, [r4, #8]
 800cd58:	61a5      	strne	r5, [r4, #24]
 800cd5a:	4618      	movne	r0, r3
 800cd5c:	60a5      	streq	r5, [r4, #8]
 800cd5e:	e7d0      	b.n	800cd02 <setvbuf+0xc2>
 800cd60:	4648      	mov	r0, r9
 800cd62:	f001 f90d 	bl	800df80 <malloc>
 800cd66:	4607      	mov	r7, r0
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d0bc      	beq.n	800cce6 <setvbuf+0xa6>
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd72:	81a3      	strh	r3, [r4, #12]
 800cd74:	464d      	mov	r5, r9
 800cd76:	e7d3      	b.n	800cd20 <setvbuf+0xe0>
 800cd78:	2000      	movs	r0, #0
 800cd7a:	e7b6      	b.n	800ccea <setvbuf+0xaa>
 800cd7c:	46a9      	mov	r9, r5
 800cd7e:	e7f5      	b.n	800cd6c <setvbuf+0x12c>
 800cd80:	60a0      	str	r0, [r4, #8]
 800cd82:	e7be      	b.n	800cd02 <setvbuf+0xc2>
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	e7bb      	b.n	800cd02 <setvbuf+0xc2>
 800cd8a:	bf00      	nop
 800cd8c:	20001670 	.word	0x20001670
 800cd90:	0800f98c 	.word	0x0800f98c
 800cd94:	0800f9ac 	.word	0x0800f9ac
 800cd98:	0800f96c 	.word	0x0800f96c

0800cd9c <__swbuf_r>:
 800cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9e:	460e      	mov	r6, r1
 800cda0:	4614      	mov	r4, r2
 800cda2:	4605      	mov	r5, r0
 800cda4:	b118      	cbz	r0, 800cdae <__swbuf_r+0x12>
 800cda6:	6983      	ldr	r3, [r0, #24]
 800cda8:	b90b      	cbnz	r3, 800cdae <__swbuf_r+0x12>
 800cdaa:	f000 ffed 	bl	800dd88 <__sinit>
 800cdae:	4b21      	ldr	r3, [pc, #132]	; (800ce34 <__swbuf_r+0x98>)
 800cdb0:	429c      	cmp	r4, r3
 800cdb2:	d12a      	bne.n	800ce0a <__swbuf_r+0x6e>
 800cdb4:	686c      	ldr	r4, [r5, #4]
 800cdb6:	69a3      	ldr	r3, [r4, #24]
 800cdb8:	60a3      	str	r3, [r4, #8]
 800cdba:	89a3      	ldrh	r3, [r4, #12]
 800cdbc:	071a      	lsls	r2, r3, #28
 800cdbe:	d52e      	bpl.n	800ce1e <__swbuf_r+0x82>
 800cdc0:	6923      	ldr	r3, [r4, #16]
 800cdc2:	b363      	cbz	r3, 800ce1e <__swbuf_r+0x82>
 800cdc4:	6923      	ldr	r3, [r4, #16]
 800cdc6:	6820      	ldr	r0, [r4, #0]
 800cdc8:	1ac0      	subs	r0, r0, r3
 800cdca:	6963      	ldr	r3, [r4, #20]
 800cdcc:	b2f6      	uxtb	r6, r6
 800cdce:	4283      	cmp	r3, r0
 800cdd0:	4637      	mov	r7, r6
 800cdd2:	dc04      	bgt.n	800cdde <__swbuf_r+0x42>
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f000 ff6c 	bl	800dcb4 <_fflush_r>
 800cddc:	bb28      	cbnz	r0, 800ce2a <__swbuf_r+0x8e>
 800cdde:	68a3      	ldr	r3, [r4, #8]
 800cde0:	3b01      	subs	r3, #1
 800cde2:	60a3      	str	r3, [r4, #8]
 800cde4:	6823      	ldr	r3, [r4, #0]
 800cde6:	1c5a      	adds	r2, r3, #1
 800cde8:	6022      	str	r2, [r4, #0]
 800cdea:	701e      	strb	r6, [r3, #0]
 800cdec:	6963      	ldr	r3, [r4, #20]
 800cdee:	3001      	adds	r0, #1
 800cdf0:	4283      	cmp	r3, r0
 800cdf2:	d004      	beq.n	800cdfe <__swbuf_r+0x62>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	07db      	lsls	r3, r3, #31
 800cdf8:	d519      	bpl.n	800ce2e <__swbuf_r+0x92>
 800cdfa:	2e0a      	cmp	r6, #10
 800cdfc:	d117      	bne.n	800ce2e <__swbuf_r+0x92>
 800cdfe:	4621      	mov	r1, r4
 800ce00:	4628      	mov	r0, r5
 800ce02:	f000 ff57 	bl	800dcb4 <_fflush_r>
 800ce06:	b190      	cbz	r0, 800ce2e <__swbuf_r+0x92>
 800ce08:	e00f      	b.n	800ce2a <__swbuf_r+0x8e>
 800ce0a:	4b0b      	ldr	r3, [pc, #44]	; (800ce38 <__swbuf_r+0x9c>)
 800ce0c:	429c      	cmp	r4, r3
 800ce0e:	d101      	bne.n	800ce14 <__swbuf_r+0x78>
 800ce10:	68ac      	ldr	r4, [r5, #8]
 800ce12:	e7d0      	b.n	800cdb6 <__swbuf_r+0x1a>
 800ce14:	4b09      	ldr	r3, [pc, #36]	; (800ce3c <__swbuf_r+0xa0>)
 800ce16:	429c      	cmp	r4, r3
 800ce18:	bf08      	it	eq
 800ce1a:	68ec      	ldreq	r4, [r5, #12]
 800ce1c:	e7cb      	b.n	800cdb6 <__swbuf_r+0x1a>
 800ce1e:	4621      	mov	r1, r4
 800ce20:	4628      	mov	r0, r5
 800ce22:	f000 f80d 	bl	800ce40 <__swsetup_r>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d0cc      	beq.n	800cdc4 <__swbuf_r+0x28>
 800ce2a:	f04f 37ff 	mov.w	r7, #4294967295
 800ce2e:	4638      	mov	r0, r7
 800ce30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce32:	bf00      	nop
 800ce34:	0800f98c 	.word	0x0800f98c
 800ce38:	0800f9ac 	.word	0x0800f9ac
 800ce3c:	0800f96c 	.word	0x0800f96c

0800ce40 <__swsetup_r>:
 800ce40:	4b32      	ldr	r3, [pc, #200]	; (800cf0c <__swsetup_r+0xcc>)
 800ce42:	b570      	push	{r4, r5, r6, lr}
 800ce44:	681d      	ldr	r5, [r3, #0]
 800ce46:	4606      	mov	r6, r0
 800ce48:	460c      	mov	r4, r1
 800ce4a:	b125      	cbz	r5, 800ce56 <__swsetup_r+0x16>
 800ce4c:	69ab      	ldr	r3, [r5, #24]
 800ce4e:	b913      	cbnz	r3, 800ce56 <__swsetup_r+0x16>
 800ce50:	4628      	mov	r0, r5
 800ce52:	f000 ff99 	bl	800dd88 <__sinit>
 800ce56:	4b2e      	ldr	r3, [pc, #184]	; (800cf10 <__swsetup_r+0xd0>)
 800ce58:	429c      	cmp	r4, r3
 800ce5a:	d10f      	bne.n	800ce7c <__swsetup_r+0x3c>
 800ce5c:	686c      	ldr	r4, [r5, #4]
 800ce5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce62:	b29a      	uxth	r2, r3
 800ce64:	0715      	lsls	r5, r2, #28
 800ce66:	d42c      	bmi.n	800cec2 <__swsetup_r+0x82>
 800ce68:	06d0      	lsls	r0, r2, #27
 800ce6a:	d411      	bmi.n	800ce90 <__swsetup_r+0x50>
 800ce6c:	2209      	movs	r2, #9
 800ce6e:	6032      	str	r2, [r6, #0]
 800ce70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce74:	81a3      	strh	r3, [r4, #12]
 800ce76:	f04f 30ff 	mov.w	r0, #4294967295
 800ce7a:	e03e      	b.n	800cefa <__swsetup_r+0xba>
 800ce7c:	4b25      	ldr	r3, [pc, #148]	; (800cf14 <__swsetup_r+0xd4>)
 800ce7e:	429c      	cmp	r4, r3
 800ce80:	d101      	bne.n	800ce86 <__swsetup_r+0x46>
 800ce82:	68ac      	ldr	r4, [r5, #8]
 800ce84:	e7eb      	b.n	800ce5e <__swsetup_r+0x1e>
 800ce86:	4b24      	ldr	r3, [pc, #144]	; (800cf18 <__swsetup_r+0xd8>)
 800ce88:	429c      	cmp	r4, r3
 800ce8a:	bf08      	it	eq
 800ce8c:	68ec      	ldreq	r4, [r5, #12]
 800ce8e:	e7e6      	b.n	800ce5e <__swsetup_r+0x1e>
 800ce90:	0751      	lsls	r1, r2, #29
 800ce92:	d512      	bpl.n	800ceba <__swsetup_r+0x7a>
 800ce94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce96:	b141      	cbz	r1, 800ceaa <__swsetup_r+0x6a>
 800ce98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce9c:	4299      	cmp	r1, r3
 800ce9e:	d002      	beq.n	800cea6 <__swsetup_r+0x66>
 800cea0:	4630      	mov	r0, r6
 800cea2:	f001 fb5f 	bl	800e564 <_free_r>
 800cea6:	2300      	movs	r3, #0
 800cea8:	6363      	str	r3, [r4, #52]	; 0x34
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ceb0:	81a3      	strh	r3, [r4, #12]
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	6063      	str	r3, [r4, #4]
 800ceb6:	6923      	ldr	r3, [r4, #16]
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	89a3      	ldrh	r3, [r4, #12]
 800cebc:	f043 0308 	orr.w	r3, r3, #8
 800cec0:	81a3      	strh	r3, [r4, #12]
 800cec2:	6923      	ldr	r3, [r4, #16]
 800cec4:	b94b      	cbnz	r3, 800ceda <__swsetup_r+0x9a>
 800cec6:	89a3      	ldrh	r3, [r4, #12]
 800cec8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ced0:	d003      	beq.n	800ceda <__swsetup_r+0x9a>
 800ced2:	4621      	mov	r1, r4
 800ced4:	4630      	mov	r0, r6
 800ced6:	f001 f813 	bl	800df00 <__smakebuf_r>
 800ceda:	89a2      	ldrh	r2, [r4, #12]
 800cedc:	f012 0301 	ands.w	r3, r2, #1
 800cee0:	d00c      	beq.n	800cefc <__swsetup_r+0xbc>
 800cee2:	2300      	movs	r3, #0
 800cee4:	60a3      	str	r3, [r4, #8]
 800cee6:	6963      	ldr	r3, [r4, #20]
 800cee8:	425b      	negs	r3, r3
 800ceea:	61a3      	str	r3, [r4, #24]
 800ceec:	6923      	ldr	r3, [r4, #16]
 800ceee:	b953      	cbnz	r3, 800cf06 <__swsetup_r+0xc6>
 800cef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cef4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cef8:	d1ba      	bne.n	800ce70 <__swsetup_r+0x30>
 800cefa:	bd70      	pop	{r4, r5, r6, pc}
 800cefc:	0792      	lsls	r2, r2, #30
 800cefe:	bf58      	it	pl
 800cf00:	6963      	ldrpl	r3, [r4, #20]
 800cf02:	60a3      	str	r3, [r4, #8]
 800cf04:	e7f2      	b.n	800ceec <__swsetup_r+0xac>
 800cf06:	2000      	movs	r0, #0
 800cf08:	e7f7      	b.n	800cefa <__swsetup_r+0xba>
 800cf0a:	bf00      	nop
 800cf0c:	20001670 	.word	0x20001670
 800cf10:	0800f98c 	.word	0x0800f98c
 800cf14:	0800f9ac 	.word	0x0800f9ac
 800cf18:	0800f96c 	.word	0x0800f96c

0800cf1c <quorem>:
 800cf1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf20:	6903      	ldr	r3, [r0, #16]
 800cf22:	690c      	ldr	r4, [r1, #16]
 800cf24:	42a3      	cmp	r3, r4
 800cf26:	4680      	mov	r8, r0
 800cf28:	f2c0 8082 	blt.w	800d030 <quorem+0x114>
 800cf2c:	3c01      	subs	r4, #1
 800cf2e:	f101 0714 	add.w	r7, r1, #20
 800cf32:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cf36:	f100 0614 	add.w	r6, r0, #20
 800cf3a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cf3e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cf42:	eb06 030c 	add.w	r3, r6, ip
 800cf46:	3501      	adds	r5, #1
 800cf48:	eb07 090c 	add.w	r9, r7, ip
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	fbb0 f5f5 	udiv	r5, r0, r5
 800cf52:	b395      	cbz	r5, 800cfba <quorem+0x9e>
 800cf54:	f04f 0a00 	mov.w	sl, #0
 800cf58:	4638      	mov	r0, r7
 800cf5a:	46b6      	mov	lr, r6
 800cf5c:	46d3      	mov	fp, sl
 800cf5e:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf62:	b293      	uxth	r3, r2
 800cf64:	fb05 a303 	mla	r3, r5, r3, sl
 800cf68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	ebab 0303 	sub.w	r3, fp, r3
 800cf72:	0c12      	lsrs	r2, r2, #16
 800cf74:	f8de b000 	ldr.w	fp, [lr]
 800cf78:	fb05 a202 	mla	r2, r5, r2, sl
 800cf7c:	fa13 f38b 	uxtah	r3, r3, fp
 800cf80:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cf84:	fa1f fb82 	uxth.w	fp, r2
 800cf88:	f8de 2000 	ldr.w	r2, [lr]
 800cf8c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cf90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf9a:	4581      	cmp	r9, r0
 800cf9c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cfa0:	f84e 3b04 	str.w	r3, [lr], #4
 800cfa4:	d2db      	bcs.n	800cf5e <quorem+0x42>
 800cfa6:	f856 300c 	ldr.w	r3, [r6, ip]
 800cfaa:	b933      	cbnz	r3, 800cfba <quorem+0x9e>
 800cfac:	9b01      	ldr	r3, [sp, #4]
 800cfae:	3b04      	subs	r3, #4
 800cfb0:	429e      	cmp	r6, r3
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	d330      	bcc.n	800d018 <quorem+0xfc>
 800cfb6:	f8c8 4010 	str.w	r4, [r8, #16]
 800cfba:	4640      	mov	r0, r8
 800cfbc:	f001 f9fe 	bl	800e3bc <__mcmp>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	db25      	blt.n	800d010 <quorem+0xf4>
 800cfc4:	3501      	adds	r5, #1
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f04f 0c00 	mov.w	ip, #0
 800cfcc:	f857 2b04 	ldr.w	r2, [r7], #4
 800cfd0:	f8d0 e000 	ldr.w	lr, [r0]
 800cfd4:	b293      	uxth	r3, r2
 800cfd6:	ebac 0303 	sub.w	r3, ip, r3
 800cfda:	0c12      	lsrs	r2, r2, #16
 800cfdc:	fa13 f38e 	uxtah	r3, r3, lr
 800cfe0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cfe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfee:	45b9      	cmp	r9, r7
 800cff0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cff4:	f840 3b04 	str.w	r3, [r0], #4
 800cff8:	d2e8      	bcs.n	800cfcc <quorem+0xb0>
 800cffa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cffe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d002:	b92a      	cbnz	r2, 800d010 <quorem+0xf4>
 800d004:	3b04      	subs	r3, #4
 800d006:	429e      	cmp	r6, r3
 800d008:	461a      	mov	r2, r3
 800d00a:	d30b      	bcc.n	800d024 <quorem+0x108>
 800d00c:	f8c8 4010 	str.w	r4, [r8, #16]
 800d010:	4628      	mov	r0, r5
 800d012:	b003      	add	sp, #12
 800d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d018:	6812      	ldr	r2, [r2, #0]
 800d01a:	3b04      	subs	r3, #4
 800d01c:	2a00      	cmp	r2, #0
 800d01e:	d1ca      	bne.n	800cfb6 <quorem+0x9a>
 800d020:	3c01      	subs	r4, #1
 800d022:	e7c5      	b.n	800cfb0 <quorem+0x94>
 800d024:	6812      	ldr	r2, [r2, #0]
 800d026:	3b04      	subs	r3, #4
 800d028:	2a00      	cmp	r2, #0
 800d02a:	d1ef      	bne.n	800d00c <quorem+0xf0>
 800d02c:	3c01      	subs	r4, #1
 800d02e:	e7ea      	b.n	800d006 <quorem+0xea>
 800d030:	2000      	movs	r0, #0
 800d032:	e7ee      	b.n	800d012 <quorem+0xf6>
 800d034:	0000      	movs	r0, r0
	...

0800d038 <_dtoa_r>:
 800d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03c:	ec57 6b10 	vmov	r6, r7, d0
 800d040:	b097      	sub	sp, #92	; 0x5c
 800d042:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d044:	9106      	str	r1, [sp, #24]
 800d046:	4604      	mov	r4, r0
 800d048:	920b      	str	r2, [sp, #44]	; 0x2c
 800d04a:	9312      	str	r3, [sp, #72]	; 0x48
 800d04c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d050:	e9cd 6700 	strd	r6, r7, [sp]
 800d054:	b93d      	cbnz	r5, 800d066 <_dtoa_r+0x2e>
 800d056:	2010      	movs	r0, #16
 800d058:	f000 ff92 	bl	800df80 <malloc>
 800d05c:	6260      	str	r0, [r4, #36]	; 0x24
 800d05e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d062:	6005      	str	r5, [r0, #0]
 800d064:	60c5      	str	r5, [r0, #12]
 800d066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d068:	6819      	ldr	r1, [r3, #0]
 800d06a:	b151      	cbz	r1, 800d082 <_dtoa_r+0x4a>
 800d06c:	685a      	ldr	r2, [r3, #4]
 800d06e:	604a      	str	r2, [r1, #4]
 800d070:	2301      	movs	r3, #1
 800d072:	4093      	lsls	r3, r2
 800d074:	608b      	str	r3, [r1, #8]
 800d076:	4620      	mov	r0, r4
 800d078:	f000 ffbe 	bl	800dff8 <_Bfree>
 800d07c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d07e:	2200      	movs	r2, #0
 800d080:	601a      	str	r2, [r3, #0]
 800d082:	1e3b      	subs	r3, r7, #0
 800d084:	bfbb      	ittet	lt
 800d086:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d08a:	9301      	strlt	r3, [sp, #4]
 800d08c:	2300      	movge	r3, #0
 800d08e:	2201      	movlt	r2, #1
 800d090:	bfac      	ite	ge
 800d092:	f8c8 3000 	strge.w	r3, [r8]
 800d096:	f8c8 2000 	strlt.w	r2, [r8]
 800d09a:	4baf      	ldr	r3, [pc, #700]	; (800d358 <_dtoa_r+0x320>)
 800d09c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d0a0:	ea33 0308 	bics.w	r3, r3, r8
 800d0a4:	d114      	bne.n	800d0d0 <_dtoa_r+0x98>
 800d0a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d0a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0ac:	6013      	str	r3, [r2, #0]
 800d0ae:	9b00      	ldr	r3, [sp, #0]
 800d0b0:	b923      	cbnz	r3, 800d0bc <_dtoa_r+0x84>
 800d0b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	f000 8542 	beq.w	800db40 <_dtoa_r+0xb08>
 800d0bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d36c <_dtoa_r+0x334>
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 8544 	beq.w	800db50 <_dtoa_r+0xb18>
 800d0c8:	f10b 0303 	add.w	r3, fp, #3
 800d0cc:	f000 bd3e 	b.w	800db4c <_dtoa_r+0xb14>
 800d0d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4630      	mov	r0, r6
 800d0da:	4639      	mov	r1, r7
 800d0dc:	f7f3 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0e0:	4681      	mov	r9, r0
 800d0e2:	b168      	cbz	r0, 800d100 <_dtoa_r+0xc8>
 800d0e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	6013      	str	r3, [r2, #0]
 800d0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f000 8524 	beq.w	800db3a <_dtoa_r+0xb02>
 800d0f2:	4b9a      	ldr	r3, [pc, #616]	; (800d35c <_dtoa_r+0x324>)
 800d0f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d0f6:	f103 3bff 	add.w	fp, r3, #4294967295
 800d0fa:	6013      	str	r3, [r2, #0]
 800d0fc:	f000 bd28 	b.w	800db50 <_dtoa_r+0xb18>
 800d100:	aa14      	add	r2, sp, #80	; 0x50
 800d102:	a915      	add	r1, sp, #84	; 0x54
 800d104:	ec47 6b10 	vmov	d0, r6, r7
 800d108:	4620      	mov	r0, r4
 800d10a:	f001 f9ce 	bl	800e4aa <__d2b>
 800d10e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d112:	9004      	str	r0, [sp, #16]
 800d114:	2d00      	cmp	r5, #0
 800d116:	d07c      	beq.n	800d212 <_dtoa_r+0x1da>
 800d118:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d11c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d120:	46b2      	mov	sl, r6
 800d122:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d126:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d12a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d12e:	2200      	movs	r2, #0
 800d130:	4b8b      	ldr	r3, [pc, #556]	; (800d360 <_dtoa_r+0x328>)
 800d132:	4650      	mov	r0, sl
 800d134:	4659      	mov	r1, fp
 800d136:	f7f3 f8a7 	bl	8000288 <__aeabi_dsub>
 800d13a:	a381      	add	r3, pc, #516	; (adr r3, 800d340 <_dtoa_r+0x308>)
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	f7f3 fa5a 	bl	80005f8 <__aeabi_dmul>
 800d144:	a380      	add	r3, pc, #512	; (adr r3, 800d348 <_dtoa_r+0x310>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	f7f3 f89f 	bl	800028c <__adddf3>
 800d14e:	4606      	mov	r6, r0
 800d150:	4628      	mov	r0, r5
 800d152:	460f      	mov	r7, r1
 800d154:	f7f3 f9e6 	bl	8000524 <__aeabi_i2d>
 800d158:	a37d      	add	r3, pc, #500	; (adr r3, 800d350 <_dtoa_r+0x318>)
 800d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15e:	f7f3 fa4b 	bl	80005f8 <__aeabi_dmul>
 800d162:	4602      	mov	r2, r0
 800d164:	460b      	mov	r3, r1
 800d166:	4630      	mov	r0, r6
 800d168:	4639      	mov	r1, r7
 800d16a:	f7f3 f88f 	bl	800028c <__adddf3>
 800d16e:	4606      	mov	r6, r0
 800d170:	460f      	mov	r7, r1
 800d172:	f7f3 fcf1 	bl	8000b58 <__aeabi_d2iz>
 800d176:	2200      	movs	r2, #0
 800d178:	4682      	mov	sl, r0
 800d17a:	2300      	movs	r3, #0
 800d17c:	4630      	mov	r0, r6
 800d17e:	4639      	mov	r1, r7
 800d180:	f7f3 fcac 	bl	8000adc <__aeabi_dcmplt>
 800d184:	b148      	cbz	r0, 800d19a <_dtoa_r+0x162>
 800d186:	4650      	mov	r0, sl
 800d188:	f7f3 f9cc 	bl	8000524 <__aeabi_i2d>
 800d18c:	4632      	mov	r2, r6
 800d18e:	463b      	mov	r3, r7
 800d190:	f7f3 fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d194:	b908      	cbnz	r0, 800d19a <_dtoa_r+0x162>
 800d196:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d19a:	f1ba 0f16 	cmp.w	sl, #22
 800d19e:	d859      	bhi.n	800d254 <_dtoa_r+0x21c>
 800d1a0:	4970      	ldr	r1, [pc, #448]	; (800d364 <_dtoa_r+0x32c>)
 800d1a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d1a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1ae:	f7f3 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	d050      	beq.n	800d258 <_dtoa_r+0x220>
 800d1b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1c0:	1b5d      	subs	r5, r3, r5
 800d1c2:	f1b5 0801 	subs.w	r8, r5, #1
 800d1c6:	bf49      	itett	mi
 800d1c8:	f1c5 0301 	rsbmi	r3, r5, #1
 800d1cc:	2300      	movpl	r3, #0
 800d1ce:	9305      	strmi	r3, [sp, #20]
 800d1d0:	f04f 0800 	movmi.w	r8, #0
 800d1d4:	bf58      	it	pl
 800d1d6:	9305      	strpl	r3, [sp, #20]
 800d1d8:	f1ba 0f00 	cmp.w	sl, #0
 800d1dc:	db3e      	blt.n	800d25c <_dtoa_r+0x224>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	44d0      	add	r8, sl
 800d1e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d1e6:	9307      	str	r3, [sp, #28]
 800d1e8:	9b06      	ldr	r3, [sp, #24]
 800d1ea:	2b09      	cmp	r3, #9
 800d1ec:	f200 8090 	bhi.w	800d310 <_dtoa_r+0x2d8>
 800d1f0:	2b05      	cmp	r3, #5
 800d1f2:	bfc4      	itt	gt
 800d1f4:	3b04      	subgt	r3, #4
 800d1f6:	9306      	strgt	r3, [sp, #24]
 800d1f8:	9b06      	ldr	r3, [sp, #24]
 800d1fa:	f1a3 0302 	sub.w	r3, r3, #2
 800d1fe:	bfcc      	ite	gt
 800d200:	2500      	movgt	r5, #0
 800d202:	2501      	movle	r5, #1
 800d204:	2b03      	cmp	r3, #3
 800d206:	f200 808f 	bhi.w	800d328 <_dtoa_r+0x2f0>
 800d20a:	e8df f003 	tbb	[pc, r3]
 800d20e:	7f7d      	.short	0x7f7d
 800d210:	7131      	.short	0x7131
 800d212:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d216:	441d      	add	r5, r3
 800d218:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d21c:	2820      	cmp	r0, #32
 800d21e:	dd13      	ble.n	800d248 <_dtoa_r+0x210>
 800d220:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d224:	9b00      	ldr	r3, [sp, #0]
 800d226:	fa08 f800 	lsl.w	r8, r8, r0
 800d22a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d22e:	fa23 f000 	lsr.w	r0, r3, r0
 800d232:	ea48 0000 	orr.w	r0, r8, r0
 800d236:	f7f3 f965 	bl	8000504 <__aeabi_ui2d>
 800d23a:	2301      	movs	r3, #1
 800d23c:	4682      	mov	sl, r0
 800d23e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d242:	3d01      	subs	r5, #1
 800d244:	9313      	str	r3, [sp, #76]	; 0x4c
 800d246:	e772      	b.n	800d12e <_dtoa_r+0xf6>
 800d248:	9b00      	ldr	r3, [sp, #0]
 800d24a:	f1c0 0020 	rsb	r0, r0, #32
 800d24e:	fa03 f000 	lsl.w	r0, r3, r0
 800d252:	e7f0      	b.n	800d236 <_dtoa_r+0x1fe>
 800d254:	2301      	movs	r3, #1
 800d256:	e7b1      	b.n	800d1bc <_dtoa_r+0x184>
 800d258:	900f      	str	r0, [sp, #60]	; 0x3c
 800d25a:	e7b0      	b.n	800d1be <_dtoa_r+0x186>
 800d25c:	9b05      	ldr	r3, [sp, #20]
 800d25e:	eba3 030a 	sub.w	r3, r3, sl
 800d262:	9305      	str	r3, [sp, #20]
 800d264:	f1ca 0300 	rsb	r3, sl, #0
 800d268:	9307      	str	r3, [sp, #28]
 800d26a:	2300      	movs	r3, #0
 800d26c:	930e      	str	r3, [sp, #56]	; 0x38
 800d26e:	e7bb      	b.n	800d1e8 <_dtoa_r+0x1b0>
 800d270:	2301      	movs	r3, #1
 800d272:	930a      	str	r3, [sp, #40]	; 0x28
 800d274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d276:	2b00      	cmp	r3, #0
 800d278:	dd59      	ble.n	800d32e <_dtoa_r+0x2f6>
 800d27a:	9302      	str	r3, [sp, #8]
 800d27c:	4699      	mov	r9, r3
 800d27e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d280:	2200      	movs	r2, #0
 800d282:	6072      	str	r2, [r6, #4]
 800d284:	2204      	movs	r2, #4
 800d286:	f102 0014 	add.w	r0, r2, #20
 800d28a:	4298      	cmp	r0, r3
 800d28c:	6871      	ldr	r1, [r6, #4]
 800d28e:	d953      	bls.n	800d338 <_dtoa_r+0x300>
 800d290:	4620      	mov	r0, r4
 800d292:	f000 fe7d 	bl	800df90 <_Balloc>
 800d296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d298:	6030      	str	r0, [r6, #0]
 800d29a:	f1b9 0f0e 	cmp.w	r9, #14
 800d29e:	f8d3 b000 	ldr.w	fp, [r3]
 800d2a2:	f200 80e6 	bhi.w	800d472 <_dtoa_r+0x43a>
 800d2a6:	2d00      	cmp	r5, #0
 800d2a8:	f000 80e3 	beq.w	800d472 <_dtoa_r+0x43a>
 800d2ac:	ed9d 7b00 	vldr	d7, [sp]
 800d2b0:	f1ba 0f00 	cmp.w	sl, #0
 800d2b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d2b8:	dd74      	ble.n	800d3a4 <_dtoa_r+0x36c>
 800d2ba:	4a2a      	ldr	r2, [pc, #168]	; (800d364 <_dtoa_r+0x32c>)
 800d2bc:	f00a 030f 	and.w	r3, sl, #15
 800d2c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d2c4:	ed93 7b00 	vldr	d7, [r3]
 800d2c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d2cc:	06f0      	lsls	r0, r6, #27
 800d2ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d2d2:	d565      	bpl.n	800d3a0 <_dtoa_r+0x368>
 800d2d4:	4b24      	ldr	r3, [pc, #144]	; (800d368 <_dtoa_r+0x330>)
 800d2d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d2da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d2de:	f7f3 fab5 	bl	800084c <__aeabi_ddiv>
 800d2e2:	e9cd 0100 	strd	r0, r1, [sp]
 800d2e6:	f006 060f 	and.w	r6, r6, #15
 800d2ea:	2503      	movs	r5, #3
 800d2ec:	4f1e      	ldr	r7, [pc, #120]	; (800d368 <_dtoa_r+0x330>)
 800d2ee:	e04c      	b.n	800d38a <_dtoa_r+0x352>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	930a      	str	r3, [sp, #40]	; 0x28
 800d2f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2f6:	4453      	add	r3, sl
 800d2f8:	f103 0901 	add.w	r9, r3, #1
 800d2fc:	9302      	str	r3, [sp, #8]
 800d2fe:	464b      	mov	r3, r9
 800d300:	2b01      	cmp	r3, #1
 800d302:	bfb8      	it	lt
 800d304:	2301      	movlt	r3, #1
 800d306:	e7ba      	b.n	800d27e <_dtoa_r+0x246>
 800d308:	2300      	movs	r3, #0
 800d30a:	e7b2      	b.n	800d272 <_dtoa_r+0x23a>
 800d30c:	2300      	movs	r3, #0
 800d30e:	e7f0      	b.n	800d2f2 <_dtoa_r+0x2ba>
 800d310:	2501      	movs	r5, #1
 800d312:	2300      	movs	r3, #0
 800d314:	9306      	str	r3, [sp, #24]
 800d316:	950a      	str	r5, [sp, #40]	; 0x28
 800d318:	f04f 33ff 	mov.w	r3, #4294967295
 800d31c:	9302      	str	r3, [sp, #8]
 800d31e:	4699      	mov	r9, r3
 800d320:	2200      	movs	r2, #0
 800d322:	2312      	movs	r3, #18
 800d324:	920b      	str	r2, [sp, #44]	; 0x2c
 800d326:	e7aa      	b.n	800d27e <_dtoa_r+0x246>
 800d328:	2301      	movs	r3, #1
 800d32a:	930a      	str	r3, [sp, #40]	; 0x28
 800d32c:	e7f4      	b.n	800d318 <_dtoa_r+0x2e0>
 800d32e:	2301      	movs	r3, #1
 800d330:	9302      	str	r3, [sp, #8]
 800d332:	4699      	mov	r9, r3
 800d334:	461a      	mov	r2, r3
 800d336:	e7f5      	b.n	800d324 <_dtoa_r+0x2ec>
 800d338:	3101      	adds	r1, #1
 800d33a:	6071      	str	r1, [r6, #4]
 800d33c:	0052      	lsls	r2, r2, #1
 800d33e:	e7a2      	b.n	800d286 <_dtoa_r+0x24e>
 800d340:	636f4361 	.word	0x636f4361
 800d344:	3fd287a7 	.word	0x3fd287a7
 800d348:	8b60c8b3 	.word	0x8b60c8b3
 800d34c:	3fc68a28 	.word	0x3fc68a28
 800d350:	509f79fb 	.word	0x509f79fb
 800d354:	3fd34413 	.word	0x3fd34413
 800d358:	7ff00000 	.word	0x7ff00000
 800d35c:	0800f939 	.word	0x0800f939
 800d360:	3ff80000 	.word	0x3ff80000
 800d364:	0800f9f8 	.word	0x0800f9f8
 800d368:	0800f9d0 	.word	0x0800f9d0
 800d36c:	0800f965 	.word	0x0800f965
 800d370:	07f1      	lsls	r1, r6, #31
 800d372:	d508      	bpl.n	800d386 <_dtoa_r+0x34e>
 800d374:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d37c:	f7f3 f93c 	bl	80005f8 <__aeabi_dmul>
 800d380:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d384:	3501      	adds	r5, #1
 800d386:	1076      	asrs	r6, r6, #1
 800d388:	3708      	adds	r7, #8
 800d38a:	2e00      	cmp	r6, #0
 800d38c:	d1f0      	bne.n	800d370 <_dtoa_r+0x338>
 800d38e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d392:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d396:	f7f3 fa59 	bl	800084c <__aeabi_ddiv>
 800d39a:	e9cd 0100 	strd	r0, r1, [sp]
 800d39e:	e01a      	b.n	800d3d6 <_dtoa_r+0x39e>
 800d3a0:	2502      	movs	r5, #2
 800d3a2:	e7a3      	b.n	800d2ec <_dtoa_r+0x2b4>
 800d3a4:	f000 80a0 	beq.w	800d4e8 <_dtoa_r+0x4b0>
 800d3a8:	f1ca 0600 	rsb	r6, sl, #0
 800d3ac:	4b9f      	ldr	r3, [pc, #636]	; (800d62c <_dtoa_r+0x5f4>)
 800d3ae:	4fa0      	ldr	r7, [pc, #640]	; (800d630 <_dtoa_r+0x5f8>)
 800d3b0:	f006 020f 	and.w	r2, r6, #15
 800d3b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d3c0:	f7f3 f91a 	bl	80005f8 <__aeabi_dmul>
 800d3c4:	e9cd 0100 	strd	r0, r1, [sp]
 800d3c8:	1136      	asrs	r6, r6, #4
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	2502      	movs	r5, #2
 800d3ce:	2e00      	cmp	r6, #0
 800d3d0:	d17f      	bne.n	800d4d2 <_dtoa_r+0x49a>
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d1e1      	bne.n	800d39a <_dtoa_r+0x362>
 800d3d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f000 8087 	beq.w	800d4ec <_dtoa_r+0x4b4>
 800d3de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	4b93      	ldr	r3, [pc, #588]	; (800d634 <_dtoa_r+0x5fc>)
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	4639      	mov	r1, r7
 800d3ea:	f7f3 fb77 	bl	8000adc <__aeabi_dcmplt>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d07c      	beq.n	800d4ec <_dtoa_r+0x4b4>
 800d3f2:	f1b9 0f00 	cmp.w	r9, #0
 800d3f6:	d079      	beq.n	800d4ec <_dtoa_r+0x4b4>
 800d3f8:	9b02      	ldr	r3, [sp, #8]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	dd35      	ble.n	800d46a <_dtoa_r+0x432>
 800d3fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d402:	9308      	str	r3, [sp, #32]
 800d404:	4639      	mov	r1, r7
 800d406:	2200      	movs	r2, #0
 800d408:	4b8b      	ldr	r3, [pc, #556]	; (800d638 <_dtoa_r+0x600>)
 800d40a:	4630      	mov	r0, r6
 800d40c:	f7f3 f8f4 	bl	80005f8 <__aeabi_dmul>
 800d410:	e9cd 0100 	strd	r0, r1, [sp]
 800d414:	9f02      	ldr	r7, [sp, #8]
 800d416:	3501      	adds	r5, #1
 800d418:	4628      	mov	r0, r5
 800d41a:	f7f3 f883 	bl	8000524 <__aeabi_i2d>
 800d41e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d422:	f7f3 f8e9 	bl	80005f8 <__aeabi_dmul>
 800d426:	2200      	movs	r2, #0
 800d428:	4b84      	ldr	r3, [pc, #528]	; (800d63c <_dtoa_r+0x604>)
 800d42a:	f7f2 ff2f 	bl	800028c <__adddf3>
 800d42e:	4605      	mov	r5, r0
 800d430:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d434:	2f00      	cmp	r7, #0
 800d436:	d15d      	bne.n	800d4f4 <_dtoa_r+0x4bc>
 800d438:	2200      	movs	r2, #0
 800d43a:	4b81      	ldr	r3, [pc, #516]	; (800d640 <_dtoa_r+0x608>)
 800d43c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d440:	f7f2 ff22 	bl	8000288 <__aeabi_dsub>
 800d444:	462a      	mov	r2, r5
 800d446:	4633      	mov	r3, r6
 800d448:	e9cd 0100 	strd	r0, r1, [sp]
 800d44c:	f7f3 fb64 	bl	8000b18 <__aeabi_dcmpgt>
 800d450:	2800      	cmp	r0, #0
 800d452:	f040 8288 	bne.w	800d966 <_dtoa_r+0x92e>
 800d456:	462a      	mov	r2, r5
 800d458:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d45c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d460:	f7f3 fb3c 	bl	8000adc <__aeabi_dcmplt>
 800d464:	2800      	cmp	r0, #0
 800d466:	f040 827c 	bne.w	800d962 <_dtoa_r+0x92a>
 800d46a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d46e:	e9cd 2300 	strd	r2, r3, [sp]
 800d472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d474:	2b00      	cmp	r3, #0
 800d476:	f2c0 8150 	blt.w	800d71a <_dtoa_r+0x6e2>
 800d47a:	f1ba 0f0e 	cmp.w	sl, #14
 800d47e:	f300 814c 	bgt.w	800d71a <_dtoa_r+0x6e2>
 800d482:	4b6a      	ldr	r3, [pc, #424]	; (800d62c <_dtoa_r+0x5f4>)
 800d484:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d488:	ed93 7b00 	vldr	d7, [r3]
 800d48c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d48e:	2b00      	cmp	r3, #0
 800d490:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d494:	f280 80d8 	bge.w	800d648 <_dtoa_r+0x610>
 800d498:	f1b9 0f00 	cmp.w	r9, #0
 800d49c:	f300 80d4 	bgt.w	800d648 <_dtoa_r+0x610>
 800d4a0:	f040 825e 	bne.w	800d960 <_dtoa_r+0x928>
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	4b66      	ldr	r3, [pc, #408]	; (800d640 <_dtoa_r+0x608>)
 800d4a8:	ec51 0b17 	vmov	r0, r1, d7
 800d4ac:	f7f3 f8a4 	bl	80005f8 <__aeabi_dmul>
 800d4b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4b4:	f7f3 fb26 	bl	8000b04 <__aeabi_dcmpge>
 800d4b8:	464f      	mov	r7, r9
 800d4ba:	464e      	mov	r6, r9
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	f040 8234 	bne.w	800d92a <_dtoa_r+0x8f2>
 800d4c2:	2331      	movs	r3, #49	; 0x31
 800d4c4:	f10b 0501 	add.w	r5, fp, #1
 800d4c8:	f88b 3000 	strb.w	r3, [fp]
 800d4cc:	f10a 0a01 	add.w	sl, sl, #1
 800d4d0:	e22f      	b.n	800d932 <_dtoa_r+0x8fa>
 800d4d2:	07f2      	lsls	r2, r6, #31
 800d4d4:	d505      	bpl.n	800d4e2 <_dtoa_r+0x4aa>
 800d4d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4da:	f7f3 f88d 	bl	80005f8 <__aeabi_dmul>
 800d4de:	3501      	adds	r5, #1
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	1076      	asrs	r6, r6, #1
 800d4e4:	3708      	adds	r7, #8
 800d4e6:	e772      	b.n	800d3ce <_dtoa_r+0x396>
 800d4e8:	2502      	movs	r5, #2
 800d4ea:	e774      	b.n	800d3d6 <_dtoa_r+0x39e>
 800d4ec:	f8cd a020 	str.w	sl, [sp, #32]
 800d4f0:	464f      	mov	r7, r9
 800d4f2:	e791      	b.n	800d418 <_dtoa_r+0x3e0>
 800d4f4:	4b4d      	ldr	r3, [pc, #308]	; (800d62c <_dtoa_r+0x5f4>)
 800d4f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d500:	2b00      	cmp	r3, #0
 800d502:	d047      	beq.n	800d594 <_dtoa_r+0x55c>
 800d504:	4602      	mov	r2, r0
 800d506:	460b      	mov	r3, r1
 800d508:	2000      	movs	r0, #0
 800d50a:	494e      	ldr	r1, [pc, #312]	; (800d644 <_dtoa_r+0x60c>)
 800d50c:	f7f3 f99e 	bl	800084c <__aeabi_ddiv>
 800d510:	462a      	mov	r2, r5
 800d512:	4633      	mov	r3, r6
 800d514:	f7f2 feb8 	bl	8000288 <__aeabi_dsub>
 800d518:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d51c:	465d      	mov	r5, fp
 800d51e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d522:	f7f3 fb19 	bl	8000b58 <__aeabi_d2iz>
 800d526:	4606      	mov	r6, r0
 800d528:	f7f2 fffc 	bl	8000524 <__aeabi_i2d>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d534:	f7f2 fea8 	bl	8000288 <__aeabi_dsub>
 800d538:	3630      	adds	r6, #48	; 0x30
 800d53a:	f805 6b01 	strb.w	r6, [r5], #1
 800d53e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d542:	e9cd 0100 	strd	r0, r1, [sp]
 800d546:	f7f3 fac9 	bl	8000adc <__aeabi_dcmplt>
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d163      	bne.n	800d616 <_dtoa_r+0x5de>
 800d54e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d552:	2000      	movs	r0, #0
 800d554:	4937      	ldr	r1, [pc, #220]	; (800d634 <_dtoa_r+0x5fc>)
 800d556:	f7f2 fe97 	bl	8000288 <__aeabi_dsub>
 800d55a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d55e:	f7f3 fabd 	bl	8000adc <__aeabi_dcmplt>
 800d562:	2800      	cmp	r0, #0
 800d564:	f040 80b7 	bne.w	800d6d6 <_dtoa_r+0x69e>
 800d568:	eba5 030b 	sub.w	r3, r5, fp
 800d56c:	429f      	cmp	r7, r3
 800d56e:	f77f af7c 	ble.w	800d46a <_dtoa_r+0x432>
 800d572:	2200      	movs	r2, #0
 800d574:	4b30      	ldr	r3, [pc, #192]	; (800d638 <_dtoa_r+0x600>)
 800d576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d57a:	f7f3 f83d 	bl	80005f8 <__aeabi_dmul>
 800d57e:	2200      	movs	r2, #0
 800d580:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d584:	4b2c      	ldr	r3, [pc, #176]	; (800d638 <_dtoa_r+0x600>)
 800d586:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d58a:	f7f3 f835 	bl	80005f8 <__aeabi_dmul>
 800d58e:	e9cd 0100 	strd	r0, r1, [sp]
 800d592:	e7c4      	b.n	800d51e <_dtoa_r+0x4e6>
 800d594:	462a      	mov	r2, r5
 800d596:	4633      	mov	r3, r6
 800d598:	f7f3 f82e 	bl	80005f8 <__aeabi_dmul>
 800d59c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d5a0:	eb0b 0507 	add.w	r5, fp, r7
 800d5a4:	465e      	mov	r6, fp
 800d5a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5aa:	f7f3 fad5 	bl	8000b58 <__aeabi_d2iz>
 800d5ae:	4607      	mov	r7, r0
 800d5b0:	f7f2 ffb8 	bl	8000524 <__aeabi_i2d>
 800d5b4:	3730      	adds	r7, #48	; 0x30
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5be:	f7f2 fe63 	bl	8000288 <__aeabi_dsub>
 800d5c2:	f806 7b01 	strb.w	r7, [r6], #1
 800d5c6:	42ae      	cmp	r6, r5
 800d5c8:	e9cd 0100 	strd	r0, r1, [sp]
 800d5cc:	f04f 0200 	mov.w	r2, #0
 800d5d0:	d126      	bne.n	800d620 <_dtoa_r+0x5e8>
 800d5d2:	4b1c      	ldr	r3, [pc, #112]	; (800d644 <_dtoa_r+0x60c>)
 800d5d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d5d8:	f7f2 fe58 	bl	800028c <__adddf3>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5e4:	f7f3 fa98 	bl	8000b18 <__aeabi_dcmpgt>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d174      	bne.n	800d6d6 <_dtoa_r+0x69e>
 800d5ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	4914      	ldr	r1, [pc, #80]	; (800d644 <_dtoa_r+0x60c>)
 800d5f4:	f7f2 fe48 	bl	8000288 <__aeabi_dsub>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d600:	f7f3 fa6c 	bl	8000adc <__aeabi_dcmplt>
 800d604:	2800      	cmp	r0, #0
 800d606:	f43f af30 	beq.w	800d46a <_dtoa_r+0x432>
 800d60a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d60e:	2b30      	cmp	r3, #48	; 0x30
 800d610:	f105 32ff 	add.w	r2, r5, #4294967295
 800d614:	d002      	beq.n	800d61c <_dtoa_r+0x5e4>
 800d616:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d61a:	e04a      	b.n	800d6b2 <_dtoa_r+0x67a>
 800d61c:	4615      	mov	r5, r2
 800d61e:	e7f4      	b.n	800d60a <_dtoa_r+0x5d2>
 800d620:	4b05      	ldr	r3, [pc, #20]	; (800d638 <_dtoa_r+0x600>)
 800d622:	f7f2 ffe9 	bl	80005f8 <__aeabi_dmul>
 800d626:	e9cd 0100 	strd	r0, r1, [sp]
 800d62a:	e7bc      	b.n	800d5a6 <_dtoa_r+0x56e>
 800d62c:	0800f9f8 	.word	0x0800f9f8
 800d630:	0800f9d0 	.word	0x0800f9d0
 800d634:	3ff00000 	.word	0x3ff00000
 800d638:	40240000 	.word	0x40240000
 800d63c:	401c0000 	.word	0x401c0000
 800d640:	40140000 	.word	0x40140000
 800d644:	3fe00000 	.word	0x3fe00000
 800d648:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d64c:	465d      	mov	r5, fp
 800d64e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d652:	4630      	mov	r0, r6
 800d654:	4639      	mov	r1, r7
 800d656:	f7f3 f8f9 	bl	800084c <__aeabi_ddiv>
 800d65a:	f7f3 fa7d 	bl	8000b58 <__aeabi_d2iz>
 800d65e:	4680      	mov	r8, r0
 800d660:	f7f2 ff60 	bl	8000524 <__aeabi_i2d>
 800d664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d668:	f7f2 ffc6 	bl	80005f8 <__aeabi_dmul>
 800d66c:	4602      	mov	r2, r0
 800d66e:	460b      	mov	r3, r1
 800d670:	4630      	mov	r0, r6
 800d672:	4639      	mov	r1, r7
 800d674:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d678:	f7f2 fe06 	bl	8000288 <__aeabi_dsub>
 800d67c:	f805 6b01 	strb.w	r6, [r5], #1
 800d680:	eba5 060b 	sub.w	r6, r5, fp
 800d684:	45b1      	cmp	r9, r6
 800d686:	4602      	mov	r2, r0
 800d688:	460b      	mov	r3, r1
 800d68a:	d139      	bne.n	800d700 <_dtoa_r+0x6c8>
 800d68c:	f7f2 fdfe 	bl	800028c <__adddf3>
 800d690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d694:	4606      	mov	r6, r0
 800d696:	460f      	mov	r7, r1
 800d698:	f7f3 fa3e 	bl	8000b18 <__aeabi_dcmpgt>
 800d69c:	b9c8      	cbnz	r0, 800d6d2 <_dtoa_r+0x69a>
 800d69e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	4639      	mov	r1, r7
 800d6a6:	f7f3 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6aa:	b110      	cbz	r0, 800d6b2 <_dtoa_r+0x67a>
 800d6ac:	f018 0f01 	tst.w	r8, #1
 800d6b0:	d10f      	bne.n	800d6d2 <_dtoa_r+0x69a>
 800d6b2:	9904      	ldr	r1, [sp, #16]
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f000 fc9f 	bl	800dff8 <_Bfree>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d6be:	702b      	strb	r3, [r5, #0]
 800d6c0:	f10a 0301 	add.w	r3, sl, #1
 800d6c4:	6013      	str	r3, [r2, #0]
 800d6c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f000 8241 	beq.w	800db50 <_dtoa_r+0xb18>
 800d6ce:	601d      	str	r5, [r3, #0]
 800d6d0:	e23e      	b.n	800db50 <_dtoa_r+0xb18>
 800d6d2:	f8cd a020 	str.w	sl, [sp, #32]
 800d6d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d6da:	2a39      	cmp	r2, #57	; 0x39
 800d6dc:	f105 33ff 	add.w	r3, r5, #4294967295
 800d6e0:	d108      	bne.n	800d6f4 <_dtoa_r+0x6bc>
 800d6e2:	459b      	cmp	fp, r3
 800d6e4:	d10a      	bne.n	800d6fc <_dtoa_r+0x6c4>
 800d6e6:	9b08      	ldr	r3, [sp, #32]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	9308      	str	r3, [sp, #32]
 800d6ec:	2330      	movs	r3, #48	; 0x30
 800d6ee:	f88b 3000 	strb.w	r3, [fp]
 800d6f2:	465b      	mov	r3, fp
 800d6f4:	781a      	ldrb	r2, [r3, #0]
 800d6f6:	3201      	adds	r2, #1
 800d6f8:	701a      	strb	r2, [r3, #0]
 800d6fa:	e78c      	b.n	800d616 <_dtoa_r+0x5de>
 800d6fc:	461d      	mov	r5, r3
 800d6fe:	e7ea      	b.n	800d6d6 <_dtoa_r+0x69e>
 800d700:	2200      	movs	r2, #0
 800d702:	4b9b      	ldr	r3, [pc, #620]	; (800d970 <_dtoa_r+0x938>)
 800d704:	f7f2 ff78 	bl	80005f8 <__aeabi_dmul>
 800d708:	2200      	movs	r2, #0
 800d70a:	2300      	movs	r3, #0
 800d70c:	4606      	mov	r6, r0
 800d70e:	460f      	mov	r7, r1
 800d710:	f7f3 f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 800d714:	2800      	cmp	r0, #0
 800d716:	d09a      	beq.n	800d64e <_dtoa_r+0x616>
 800d718:	e7cb      	b.n	800d6b2 <_dtoa_r+0x67a>
 800d71a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d71c:	2a00      	cmp	r2, #0
 800d71e:	f000 808b 	beq.w	800d838 <_dtoa_r+0x800>
 800d722:	9a06      	ldr	r2, [sp, #24]
 800d724:	2a01      	cmp	r2, #1
 800d726:	dc6e      	bgt.n	800d806 <_dtoa_r+0x7ce>
 800d728:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d72a:	2a00      	cmp	r2, #0
 800d72c:	d067      	beq.n	800d7fe <_dtoa_r+0x7c6>
 800d72e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d732:	9f07      	ldr	r7, [sp, #28]
 800d734:	9d05      	ldr	r5, [sp, #20]
 800d736:	9a05      	ldr	r2, [sp, #20]
 800d738:	2101      	movs	r1, #1
 800d73a:	441a      	add	r2, r3
 800d73c:	4620      	mov	r0, r4
 800d73e:	9205      	str	r2, [sp, #20]
 800d740:	4498      	add	r8, r3
 800d742:	f000 fcf9 	bl	800e138 <__i2b>
 800d746:	4606      	mov	r6, r0
 800d748:	2d00      	cmp	r5, #0
 800d74a:	dd0c      	ble.n	800d766 <_dtoa_r+0x72e>
 800d74c:	f1b8 0f00 	cmp.w	r8, #0
 800d750:	dd09      	ble.n	800d766 <_dtoa_r+0x72e>
 800d752:	4545      	cmp	r5, r8
 800d754:	9a05      	ldr	r2, [sp, #20]
 800d756:	462b      	mov	r3, r5
 800d758:	bfa8      	it	ge
 800d75a:	4643      	movge	r3, r8
 800d75c:	1ad2      	subs	r2, r2, r3
 800d75e:	9205      	str	r2, [sp, #20]
 800d760:	1aed      	subs	r5, r5, r3
 800d762:	eba8 0803 	sub.w	r8, r8, r3
 800d766:	9b07      	ldr	r3, [sp, #28]
 800d768:	b1eb      	cbz	r3, 800d7a6 <_dtoa_r+0x76e>
 800d76a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d067      	beq.n	800d840 <_dtoa_r+0x808>
 800d770:	b18f      	cbz	r7, 800d796 <_dtoa_r+0x75e>
 800d772:	4631      	mov	r1, r6
 800d774:	463a      	mov	r2, r7
 800d776:	4620      	mov	r0, r4
 800d778:	f000 fd7e 	bl	800e278 <__pow5mult>
 800d77c:	9a04      	ldr	r2, [sp, #16]
 800d77e:	4601      	mov	r1, r0
 800d780:	4606      	mov	r6, r0
 800d782:	4620      	mov	r0, r4
 800d784:	f000 fce1 	bl	800e14a <__multiply>
 800d788:	9904      	ldr	r1, [sp, #16]
 800d78a:	9008      	str	r0, [sp, #32]
 800d78c:	4620      	mov	r0, r4
 800d78e:	f000 fc33 	bl	800dff8 <_Bfree>
 800d792:	9b08      	ldr	r3, [sp, #32]
 800d794:	9304      	str	r3, [sp, #16]
 800d796:	9b07      	ldr	r3, [sp, #28]
 800d798:	1bda      	subs	r2, r3, r7
 800d79a:	d004      	beq.n	800d7a6 <_dtoa_r+0x76e>
 800d79c:	9904      	ldr	r1, [sp, #16]
 800d79e:	4620      	mov	r0, r4
 800d7a0:	f000 fd6a 	bl	800e278 <__pow5mult>
 800d7a4:	9004      	str	r0, [sp, #16]
 800d7a6:	2101      	movs	r1, #1
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f000 fcc5 	bl	800e138 <__i2b>
 800d7ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7b0:	4607      	mov	r7, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f000 81d0 	beq.w	800db58 <_dtoa_r+0xb20>
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	4601      	mov	r1, r0
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f000 fd5b 	bl	800e278 <__pow5mult>
 800d7c2:	9b06      	ldr	r3, [sp, #24]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	4607      	mov	r7, r0
 800d7c8:	dc40      	bgt.n	800d84c <_dtoa_r+0x814>
 800d7ca:	9b00      	ldr	r3, [sp, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d139      	bne.n	800d844 <_dtoa_r+0x80c>
 800d7d0:	9b01      	ldr	r3, [sp, #4]
 800d7d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d136      	bne.n	800d848 <_dtoa_r+0x810>
 800d7da:	9b01      	ldr	r3, [sp, #4]
 800d7dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7e0:	0d1b      	lsrs	r3, r3, #20
 800d7e2:	051b      	lsls	r3, r3, #20
 800d7e4:	b12b      	cbz	r3, 800d7f2 <_dtoa_r+0x7ba>
 800d7e6:	9b05      	ldr	r3, [sp, #20]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	9305      	str	r3, [sp, #20]
 800d7ec:	f108 0801 	add.w	r8, r8, #1
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	9307      	str	r3, [sp, #28]
 800d7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d12a      	bne.n	800d850 <_dtoa_r+0x818>
 800d7fa:	2001      	movs	r0, #1
 800d7fc:	e030      	b.n	800d860 <_dtoa_r+0x828>
 800d7fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d800:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d804:	e795      	b.n	800d732 <_dtoa_r+0x6fa>
 800d806:	9b07      	ldr	r3, [sp, #28]
 800d808:	f109 37ff 	add.w	r7, r9, #4294967295
 800d80c:	42bb      	cmp	r3, r7
 800d80e:	bfbf      	itttt	lt
 800d810:	9b07      	ldrlt	r3, [sp, #28]
 800d812:	9707      	strlt	r7, [sp, #28]
 800d814:	1afa      	sublt	r2, r7, r3
 800d816:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d818:	bfbb      	ittet	lt
 800d81a:	189b      	addlt	r3, r3, r2
 800d81c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d81e:	1bdf      	subge	r7, r3, r7
 800d820:	2700      	movlt	r7, #0
 800d822:	f1b9 0f00 	cmp.w	r9, #0
 800d826:	bfb5      	itete	lt
 800d828:	9b05      	ldrlt	r3, [sp, #20]
 800d82a:	9d05      	ldrge	r5, [sp, #20]
 800d82c:	eba3 0509 	sublt.w	r5, r3, r9
 800d830:	464b      	movge	r3, r9
 800d832:	bfb8      	it	lt
 800d834:	2300      	movlt	r3, #0
 800d836:	e77e      	b.n	800d736 <_dtoa_r+0x6fe>
 800d838:	9f07      	ldr	r7, [sp, #28]
 800d83a:	9d05      	ldr	r5, [sp, #20]
 800d83c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d83e:	e783      	b.n	800d748 <_dtoa_r+0x710>
 800d840:	9a07      	ldr	r2, [sp, #28]
 800d842:	e7ab      	b.n	800d79c <_dtoa_r+0x764>
 800d844:	2300      	movs	r3, #0
 800d846:	e7d4      	b.n	800d7f2 <_dtoa_r+0x7ba>
 800d848:	9b00      	ldr	r3, [sp, #0]
 800d84a:	e7d2      	b.n	800d7f2 <_dtoa_r+0x7ba>
 800d84c:	2300      	movs	r3, #0
 800d84e:	9307      	str	r3, [sp, #28]
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d856:	6918      	ldr	r0, [r3, #16]
 800d858:	f000 fc20 	bl	800e09c <__hi0bits>
 800d85c:	f1c0 0020 	rsb	r0, r0, #32
 800d860:	4440      	add	r0, r8
 800d862:	f010 001f 	ands.w	r0, r0, #31
 800d866:	d047      	beq.n	800d8f8 <_dtoa_r+0x8c0>
 800d868:	f1c0 0320 	rsb	r3, r0, #32
 800d86c:	2b04      	cmp	r3, #4
 800d86e:	dd3b      	ble.n	800d8e8 <_dtoa_r+0x8b0>
 800d870:	9b05      	ldr	r3, [sp, #20]
 800d872:	f1c0 001c 	rsb	r0, r0, #28
 800d876:	4403      	add	r3, r0
 800d878:	9305      	str	r3, [sp, #20]
 800d87a:	4405      	add	r5, r0
 800d87c:	4480      	add	r8, r0
 800d87e:	9b05      	ldr	r3, [sp, #20]
 800d880:	2b00      	cmp	r3, #0
 800d882:	dd05      	ble.n	800d890 <_dtoa_r+0x858>
 800d884:	461a      	mov	r2, r3
 800d886:	9904      	ldr	r1, [sp, #16]
 800d888:	4620      	mov	r0, r4
 800d88a:	f000 fd43 	bl	800e314 <__lshift>
 800d88e:	9004      	str	r0, [sp, #16]
 800d890:	f1b8 0f00 	cmp.w	r8, #0
 800d894:	dd05      	ble.n	800d8a2 <_dtoa_r+0x86a>
 800d896:	4639      	mov	r1, r7
 800d898:	4642      	mov	r2, r8
 800d89a:	4620      	mov	r0, r4
 800d89c:	f000 fd3a 	bl	800e314 <__lshift>
 800d8a0:	4607      	mov	r7, r0
 800d8a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8a4:	b353      	cbz	r3, 800d8fc <_dtoa_r+0x8c4>
 800d8a6:	4639      	mov	r1, r7
 800d8a8:	9804      	ldr	r0, [sp, #16]
 800d8aa:	f000 fd87 	bl	800e3bc <__mcmp>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	da24      	bge.n	800d8fc <_dtoa_r+0x8c4>
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	220a      	movs	r2, #10
 800d8b6:	9904      	ldr	r1, [sp, #16]
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f000 fbb4 	bl	800e026 <__multadd>
 800d8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c0:	9004      	str	r0, [sp, #16]
 800d8c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f000 814d 	beq.w	800db66 <_dtoa_r+0xb2e>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	220a      	movs	r2, #10
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f000 fba7 	bl	800e026 <__multadd>
 800d8d8:	9b02      	ldr	r3, [sp, #8]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	4606      	mov	r6, r0
 800d8de:	dc4f      	bgt.n	800d980 <_dtoa_r+0x948>
 800d8e0:	9b06      	ldr	r3, [sp, #24]
 800d8e2:	2b02      	cmp	r3, #2
 800d8e4:	dd4c      	ble.n	800d980 <_dtoa_r+0x948>
 800d8e6:	e011      	b.n	800d90c <_dtoa_r+0x8d4>
 800d8e8:	d0c9      	beq.n	800d87e <_dtoa_r+0x846>
 800d8ea:	9a05      	ldr	r2, [sp, #20]
 800d8ec:	331c      	adds	r3, #28
 800d8ee:	441a      	add	r2, r3
 800d8f0:	9205      	str	r2, [sp, #20]
 800d8f2:	441d      	add	r5, r3
 800d8f4:	4498      	add	r8, r3
 800d8f6:	e7c2      	b.n	800d87e <_dtoa_r+0x846>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	e7f6      	b.n	800d8ea <_dtoa_r+0x8b2>
 800d8fc:	f1b9 0f00 	cmp.w	r9, #0
 800d900:	dc38      	bgt.n	800d974 <_dtoa_r+0x93c>
 800d902:	9b06      	ldr	r3, [sp, #24]
 800d904:	2b02      	cmp	r3, #2
 800d906:	dd35      	ble.n	800d974 <_dtoa_r+0x93c>
 800d908:	f8cd 9008 	str.w	r9, [sp, #8]
 800d90c:	9b02      	ldr	r3, [sp, #8]
 800d90e:	b963      	cbnz	r3, 800d92a <_dtoa_r+0x8f2>
 800d910:	4639      	mov	r1, r7
 800d912:	2205      	movs	r2, #5
 800d914:	4620      	mov	r0, r4
 800d916:	f000 fb86 	bl	800e026 <__multadd>
 800d91a:	4601      	mov	r1, r0
 800d91c:	4607      	mov	r7, r0
 800d91e:	9804      	ldr	r0, [sp, #16]
 800d920:	f000 fd4c 	bl	800e3bc <__mcmp>
 800d924:	2800      	cmp	r0, #0
 800d926:	f73f adcc 	bgt.w	800d4c2 <_dtoa_r+0x48a>
 800d92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d92c:	465d      	mov	r5, fp
 800d92e:	ea6f 0a03 	mvn.w	sl, r3
 800d932:	f04f 0900 	mov.w	r9, #0
 800d936:	4639      	mov	r1, r7
 800d938:	4620      	mov	r0, r4
 800d93a:	f000 fb5d 	bl	800dff8 <_Bfree>
 800d93e:	2e00      	cmp	r6, #0
 800d940:	f43f aeb7 	beq.w	800d6b2 <_dtoa_r+0x67a>
 800d944:	f1b9 0f00 	cmp.w	r9, #0
 800d948:	d005      	beq.n	800d956 <_dtoa_r+0x91e>
 800d94a:	45b1      	cmp	r9, r6
 800d94c:	d003      	beq.n	800d956 <_dtoa_r+0x91e>
 800d94e:	4649      	mov	r1, r9
 800d950:	4620      	mov	r0, r4
 800d952:	f000 fb51 	bl	800dff8 <_Bfree>
 800d956:	4631      	mov	r1, r6
 800d958:	4620      	mov	r0, r4
 800d95a:	f000 fb4d 	bl	800dff8 <_Bfree>
 800d95e:	e6a8      	b.n	800d6b2 <_dtoa_r+0x67a>
 800d960:	2700      	movs	r7, #0
 800d962:	463e      	mov	r6, r7
 800d964:	e7e1      	b.n	800d92a <_dtoa_r+0x8f2>
 800d966:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d96a:	463e      	mov	r6, r7
 800d96c:	e5a9      	b.n	800d4c2 <_dtoa_r+0x48a>
 800d96e:	bf00      	nop
 800d970:	40240000 	.word	0x40240000
 800d974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d976:	f8cd 9008 	str.w	r9, [sp, #8]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f000 80fa 	beq.w	800db74 <_dtoa_r+0xb3c>
 800d980:	2d00      	cmp	r5, #0
 800d982:	dd05      	ble.n	800d990 <_dtoa_r+0x958>
 800d984:	4631      	mov	r1, r6
 800d986:	462a      	mov	r2, r5
 800d988:	4620      	mov	r0, r4
 800d98a:	f000 fcc3 	bl	800e314 <__lshift>
 800d98e:	4606      	mov	r6, r0
 800d990:	9b07      	ldr	r3, [sp, #28]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d04c      	beq.n	800da30 <_dtoa_r+0x9f8>
 800d996:	6871      	ldr	r1, [r6, #4]
 800d998:	4620      	mov	r0, r4
 800d99a:	f000 faf9 	bl	800df90 <_Balloc>
 800d99e:	6932      	ldr	r2, [r6, #16]
 800d9a0:	3202      	adds	r2, #2
 800d9a2:	4605      	mov	r5, r0
 800d9a4:	0092      	lsls	r2, r2, #2
 800d9a6:	f106 010c 	add.w	r1, r6, #12
 800d9aa:	300c      	adds	r0, #12
 800d9ac:	f7fe fc44 	bl	800c238 <memcpy>
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	4629      	mov	r1, r5
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f000 fcad 	bl	800e314 <__lshift>
 800d9ba:	9b00      	ldr	r3, [sp, #0]
 800d9bc:	f8cd b014 	str.w	fp, [sp, #20]
 800d9c0:	f003 0301 	and.w	r3, r3, #1
 800d9c4:	46b1      	mov	r9, r6
 800d9c6:	9307      	str	r3, [sp, #28]
 800d9c8:	4606      	mov	r6, r0
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	9804      	ldr	r0, [sp, #16]
 800d9ce:	f7ff faa5 	bl	800cf1c <quorem>
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	4605      	mov	r5, r0
 800d9d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d9da:	9804      	ldr	r0, [sp, #16]
 800d9dc:	f000 fcee 	bl	800e3bc <__mcmp>
 800d9e0:	4632      	mov	r2, r6
 800d9e2:	9000      	str	r0, [sp, #0]
 800d9e4:	4639      	mov	r1, r7
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f000 fd02 	bl	800e3f0 <__mdiff>
 800d9ec:	68c3      	ldr	r3, [r0, #12]
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	bb03      	cbnz	r3, 800da34 <_dtoa_r+0x9fc>
 800d9f2:	4601      	mov	r1, r0
 800d9f4:	9008      	str	r0, [sp, #32]
 800d9f6:	9804      	ldr	r0, [sp, #16]
 800d9f8:	f000 fce0 	bl	800e3bc <__mcmp>
 800d9fc:	9a08      	ldr	r2, [sp, #32]
 800d9fe:	4603      	mov	r3, r0
 800da00:	4611      	mov	r1, r2
 800da02:	4620      	mov	r0, r4
 800da04:	9308      	str	r3, [sp, #32]
 800da06:	f000 faf7 	bl	800dff8 <_Bfree>
 800da0a:	9b08      	ldr	r3, [sp, #32]
 800da0c:	b9a3      	cbnz	r3, 800da38 <_dtoa_r+0xa00>
 800da0e:	9a06      	ldr	r2, [sp, #24]
 800da10:	b992      	cbnz	r2, 800da38 <_dtoa_r+0xa00>
 800da12:	9a07      	ldr	r2, [sp, #28]
 800da14:	b982      	cbnz	r2, 800da38 <_dtoa_r+0xa00>
 800da16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800da1a:	d029      	beq.n	800da70 <_dtoa_r+0xa38>
 800da1c:	9b00      	ldr	r3, [sp, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	dd01      	ble.n	800da26 <_dtoa_r+0x9ee>
 800da22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800da26:	9b05      	ldr	r3, [sp, #20]
 800da28:	1c5d      	adds	r5, r3, #1
 800da2a:	f883 8000 	strb.w	r8, [r3]
 800da2e:	e782      	b.n	800d936 <_dtoa_r+0x8fe>
 800da30:	4630      	mov	r0, r6
 800da32:	e7c2      	b.n	800d9ba <_dtoa_r+0x982>
 800da34:	2301      	movs	r3, #1
 800da36:	e7e3      	b.n	800da00 <_dtoa_r+0x9c8>
 800da38:	9a00      	ldr	r2, [sp, #0]
 800da3a:	2a00      	cmp	r2, #0
 800da3c:	db04      	blt.n	800da48 <_dtoa_r+0xa10>
 800da3e:	d125      	bne.n	800da8c <_dtoa_r+0xa54>
 800da40:	9a06      	ldr	r2, [sp, #24]
 800da42:	bb1a      	cbnz	r2, 800da8c <_dtoa_r+0xa54>
 800da44:	9a07      	ldr	r2, [sp, #28]
 800da46:	bb0a      	cbnz	r2, 800da8c <_dtoa_r+0xa54>
 800da48:	2b00      	cmp	r3, #0
 800da4a:	ddec      	ble.n	800da26 <_dtoa_r+0x9ee>
 800da4c:	2201      	movs	r2, #1
 800da4e:	9904      	ldr	r1, [sp, #16]
 800da50:	4620      	mov	r0, r4
 800da52:	f000 fc5f 	bl	800e314 <__lshift>
 800da56:	4639      	mov	r1, r7
 800da58:	9004      	str	r0, [sp, #16]
 800da5a:	f000 fcaf 	bl	800e3bc <__mcmp>
 800da5e:	2800      	cmp	r0, #0
 800da60:	dc03      	bgt.n	800da6a <_dtoa_r+0xa32>
 800da62:	d1e0      	bne.n	800da26 <_dtoa_r+0x9ee>
 800da64:	f018 0f01 	tst.w	r8, #1
 800da68:	d0dd      	beq.n	800da26 <_dtoa_r+0x9ee>
 800da6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800da6e:	d1d8      	bne.n	800da22 <_dtoa_r+0x9ea>
 800da70:	9b05      	ldr	r3, [sp, #20]
 800da72:	9a05      	ldr	r2, [sp, #20]
 800da74:	1c5d      	adds	r5, r3, #1
 800da76:	2339      	movs	r3, #57	; 0x39
 800da78:	7013      	strb	r3, [r2, #0]
 800da7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da7e:	2b39      	cmp	r3, #57	; 0x39
 800da80:	f105 32ff 	add.w	r2, r5, #4294967295
 800da84:	d04f      	beq.n	800db26 <_dtoa_r+0xaee>
 800da86:	3301      	adds	r3, #1
 800da88:	7013      	strb	r3, [r2, #0]
 800da8a:	e754      	b.n	800d936 <_dtoa_r+0x8fe>
 800da8c:	9a05      	ldr	r2, [sp, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f102 0501 	add.w	r5, r2, #1
 800da94:	dd06      	ble.n	800daa4 <_dtoa_r+0xa6c>
 800da96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800da9a:	d0e9      	beq.n	800da70 <_dtoa_r+0xa38>
 800da9c:	f108 0801 	add.w	r8, r8, #1
 800daa0:	9b05      	ldr	r3, [sp, #20]
 800daa2:	e7c2      	b.n	800da2a <_dtoa_r+0x9f2>
 800daa4:	9a02      	ldr	r2, [sp, #8]
 800daa6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800daaa:	eba5 030b 	sub.w	r3, r5, fp
 800daae:	4293      	cmp	r3, r2
 800dab0:	d021      	beq.n	800daf6 <_dtoa_r+0xabe>
 800dab2:	2300      	movs	r3, #0
 800dab4:	220a      	movs	r2, #10
 800dab6:	9904      	ldr	r1, [sp, #16]
 800dab8:	4620      	mov	r0, r4
 800daba:	f000 fab4 	bl	800e026 <__multadd>
 800dabe:	45b1      	cmp	r9, r6
 800dac0:	9004      	str	r0, [sp, #16]
 800dac2:	f04f 0300 	mov.w	r3, #0
 800dac6:	f04f 020a 	mov.w	r2, #10
 800daca:	4649      	mov	r1, r9
 800dacc:	4620      	mov	r0, r4
 800dace:	d105      	bne.n	800dadc <_dtoa_r+0xaa4>
 800dad0:	f000 faa9 	bl	800e026 <__multadd>
 800dad4:	4681      	mov	r9, r0
 800dad6:	4606      	mov	r6, r0
 800dad8:	9505      	str	r5, [sp, #20]
 800dada:	e776      	b.n	800d9ca <_dtoa_r+0x992>
 800dadc:	f000 faa3 	bl	800e026 <__multadd>
 800dae0:	4631      	mov	r1, r6
 800dae2:	4681      	mov	r9, r0
 800dae4:	2300      	movs	r3, #0
 800dae6:	220a      	movs	r2, #10
 800dae8:	4620      	mov	r0, r4
 800daea:	f000 fa9c 	bl	800e026 <__multadd>
 800daee:	4606      	mov	r6, r0
 800daf0:	e7f2      	b.n	800dad8 <_dtoa_r+0xaa0>
 800daf2:	f04f 0900 	mov.w	r9, #0
 800daf6:	2201      	movs	r2, #1
 800daf8:	9904      	ldr	r1, [sp, #16]
 800dafa:	4620      	mov	r0, r4
 800dafc:	f000 fc0a 	bl	800e314 <__lshift>
 800db00:	4639      	mov	r1, r7
 800db02:	9004      	str	r0, [sp, #16]
 800db04:	f000 fc5a 	bl	800e3bc <__mcmp>
 800db08:	2800      	cmp	r0, #0
 800db0a:	dcb6      	bgt.n	800da7a <_dtoa_r+0xa42>
 800db0c:	d102      	bne.n	800db14 <_dtoa_r+0xadc>
 800db0e:	f018 0f01 	tst.w	r8, #1
 800db12:	d1b2      	bne.n	800da7a <_dtoa_r+0xa42>
 800db14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800db18:	2b30      	cmp	r3, #48	; 0x30
 800db1a:	f105 32ff 	add.w	r2, r5, #4294967295
 800db1e:	f47f af0a 	bne.w	800d936 <_dtoa_r+0x8fe>
 800db22:	4615      	mov	r5, r2
 800db24:	e7f6      	b.n	800db14 <_dtoa_r+0xadc>
 800db26:	4593      	cmp	fp, r2
 800db28:	d105      	bne.n	800db36 <_dtoa_r+0xafe>
 800db2a:	2331      	movs	r3, #49	; 0x31
 800db2c:	f10a 0a01 	add.w	sl, sl, #1
 800db30:	f88b 3000 	strb.w	r3, [fp]
 800db34:	e6ff      	b.n	800d936 <_dtoa_r+0x8fe>
 800db36:	4615      	mov	r5, r2
 800db38:	e79f      	b.n	800da7a <_dtoa_r+0xa42>
 800db3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dba0 <_dtoa_r+0xb68>
 800db3e:	e007      	b.n	800db50 <_dtoa_r+0xb18>
 800db40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db42:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dba4 <_dtoa_r+0xb6c>
 800db46:	b11b      	cbz	r3, 800db50 <_dtoa_r+0xb18>
 800db48:	f10b 0308 	add.w	r3, fp, #8
 800db4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db4e:	6013      	str	r3, [r2, #0]
 800db50:	4658      	mov	r0, fp
 800db52:	b017      	add	sp, #92	; 0x5c
 800db54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db58:	9b06      	ldr	r3, [sp, #24]
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	f77f ae35 	ble.w	800d7ca <_dtoa_r+0x792>
 800db60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db62:	9307      	str	r3, [sp, #28]
 800db64:	e649      	b.n	800d7fa <_dtoa_r+0x7c2>
 800db66:	9b02      	ldr	r3, [sp, #8]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	dc03      	bgt.n	800db74 <_dtoa_r+0xb3c>
 800db6c:	9b06      	ldr	r3, [sp, #24]
 800db6e:	2b02      	cmp	r3, #2
 800db70:	f73f aecc 	bgt.w	800d90c <_dtoa_r+0x8d4>
 800db74:	465d      	mov	r5, fp
 800db76:	4639      	mov	r1, r7
 800db78:	9804      	ldr	r0, [sp, #16]
 800db7a:	f7ff f9cf 	bl	800cf1c <quorem>
 800db7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800db82:	f805 8b01 	strb.w	r8, [r5], #1
 800db86:	9a02      	ldr	r2, [sp, #8]
 800db88:	eba5 030b 	sub.w	r3, r5, fp
 800db8c:	429a      	cmp	r2, r3
 800db8e:	ddb0      	ble.n	800daf2 <_dtoa_r+0xaba>
 800db90:	2300      	movs	r3, #0
 800db92:	220a      	movs	r2, #10
 800db94:	9904      	ldr	r1, [sp, #16]
 800db96:	4620      	mov	r0, r4
 800db98:	f000 fa45 	bl	800e026 <__multadd>
 800db9c:	9004      	str	r0, [sp, #16]
 800db9e:	e7ea      	b.n	800db76 <_dtoa_r+0xb3e>
 800dba0:	0800f938 	.word	0x0800f938
 800dba4:	0800f95c 	.word	0x0800f95c

0800dba8 <__sflush_r>:
 800dba8:	898a      	ldrh	r2, [r1, #12]
 800dbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbae:	4605      	mov	r5, r0
 800dbb0:	0710      	lsls	r0, r2, #28
 800dbb2:	460c      	mov	r4, r1
 800dbb4:	d458      	bmi.n	800dc68 <__sflush_r+0xc0>
 800dbb6:	684b      	ldr	r3, [r1, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	dc05      	bgt.n	800dbc8 <__sflush_r+0x20>
 800dbbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	dc02      	bgt.n	800dbc8 <__sflush_r+0x20>
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbca:	2e00      	cmp	r6, #0
 800dbcc:	d0f9      	beq.n	800dbc2 <__sflush_r+0x1a>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbd4:	682f      	ldr	r7, [r5, #0]
 800dbd6:	6a21      	ldr	r1, [r4, #32]
 800dbd8:	602b      	str	r3, [r5, #0]
 800dbda:	d032      	beq.n	800dc42 <__sflush_r+0x9a>
 800dbdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	075a      	lsls	r2, r3, #29
 800dbe2:	d505      	bpl.n	800dbf0 <__sflush_r+0x48>
 800dbe4:	6863      	ldr	r3, [r4, #4]
 800dbe6:	1ac0      	subs	r0, r0, r3
 800dbe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbea:	b10b      	cbz	r3, 800dbf0 <__sflush_r+0x48>
 800dbec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbee:	1ac0      	subs	r0, r0, r3
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbf6:	6a21      	ldr	r1, [r4, #32]
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	47b0      	blx	r6
 800dbfc:	1c43      	adds	r3, r0, #1
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	d106      	bne.n	800dc10 <__sflush_r+0x68>
 800dc02:	6829      	ldr	r1, [r5, #0]
 800dc04:	291d      	cmp	r1, #29
 800dc06:	d848      	bhi.n	800dc9a <__sflush_r+0xf2>
 800dc08:	4a29      	ldr	r2, [pc, #164]	; (800dcb0 <__sflush_r+0x108>)
 800dc0a:	40ca      	lsrs	r2, r1
 800dc0c:	07d6      	lsls	r6, r2, #31
 800dc0e:	d544      	bpl.n	800dc9a <__sflush_r+0xf2>
 800dc10:	2200      	movs	r2, #0
 800dc12:	6062      	str	r2, [r4, #4]
 800dc14:	04d9      	lsls	r1, r3, #19
 800dc16:	6922      	ldr	r2, [r4, #16]
 800dc18:	6022      	str	r2, [r4, #0]
 800dc1a:	d504      	bpl.n	800dc26 <__sflush_r+0x7e>
 800dc1c:	1c42      	adds	r2, r0, #1
 800dc1e:	d101      	bne.n	800dc24 <__sflush_r+0x7c>
 800dc20:	682b      	ldr	r3, [r5, #0]
 800dc22:	b903      	cbnz	r3, 800dc26 <__sflush_r+0x7e>
 800dc24:	6560      	str	r0, [r4, #84]	; 0x54
 800dc26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc28:	602f      	str	r7, [r5, #0]
 800dc2a:	2900      	cmp	r1, #0
 800dc2c:	d0c9      	beq.n	800dbc2 <__sflush_r+0x1a>
 800dc2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc32:	4299      	cmp	r1, r3
 800dc34:	d002      	beq.n	800dc3c <__sflush_r+0x94>
 800dc36:	4628      	mov	r0, r5
 800dc38:	f000 fc94 	bl	800e564 <_free_r>
 800dc3c:	2000      	movs	r0, #0
 800dc3e:	6360      	str	r0, [r4, #52]	; 0x34
 800dc40:	e7c0      	b.n	800dbc4 <__sflush_r+0x1c>
 800dc42:	2301      	movs	r3, #1
 800dc44:	4628      	mov	r0, r5
 800dc46:	47b0      	blx	r6
 800dc48:	1c41      	adds	r1, r0, #1
 800dc4a:	d1c8      	bne.n	800dbde <__sflush_r+0x36>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d0c5      	beq.n	800dbde <__sflush_r+0x36>
 800dc52:	2b1d      	cmp	r3, #29
 800dc54:	d001      	beq.n	800dc5a <__sflush_r+0xb2>
 800dc56:	2b16      	cmp	r3, #22
 800dc58:	d101      	bne.n	800dc5e <__sflush_r+0xb6>
 800dc5a:	602f      	str	r7, [r5, #0]
 800dc5c:	e7b1      	b.n	800dbc2 <__sflush_r+0x1a>
 800dc5e:	89a3      	ldrh	r3, [r4, #12]
 800dc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc64:	81a3      	strh	r3, [r4, #12]
 800dc66:	e7ad      	b.n	800dbc4 <__sflush_r+0x1c>
 800dc68:	690f      	ldr	r7, [r1, #16]
 800dc6a:	2f00      	cmp	r7, #0
 800dc6c:	d0a9      	beq.n	800dbc2 <__sflush_r+0x1a>
 800dc6e:	0793      	lsls	r3, r2, #30
 800dc70:	680e      	ldr	r6, [r1, #0]
 800dc72:	bf08      	it	eq
 800dc74:	694b      	ldreq	r3, [r1, #20]
 800dc76:	600f      	str	r7, [r1, #0]
 800dc78:	bf18      	it	ne
 800dc7a:	2300      	movne	r3, #0
 800dc7c:	eba6 0807 	sub.w	r8, r6, r7
 800dc80:	608b      	str	r3, [r1, #8]
 800dc82:	f1b8 0f00 	cmp.w	r8, #0
 800dc86:	dd9c      	ble.n	800dbc2 <__sflush_r+0x1a>
 800dc88:	4643      	mov	r3, r8
 800dc8a:	463a      	mov	r2, r7
 800dc8c:	6a21      	ldr	r1, [r4, #32]
 800dc8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc90:	4628      	mov	r0, r5
 800dc92:	47b0      	blx	r6
 800dc94:	2800      	cmp	r0, #0
 800dc96:	dc06      	bgt.n	800dca6 <__sflush_r+0xfe>
 800dc98:	89a3      	ldrh	r3, [r4, #12]
 800dc9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc9e:	81a3      	strh	r3, [r4, #12]
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295
 800dca4:	e78e      	b.n	800dbc4 <__sflush_r+0x1c>
 800dca6:	4407      	add	r7, r0
 800dca8:	eba8 0800 	sub.w	r8, r8, r0
 800dcac:	e7e9      	b.n	800dc82 <__sflush_r+0xda>
 800dcae:	bf00      	nop
 800dcb0:	20400001 	.word	0x20400001

0800dcb4 <_fflush_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	690b      	ldr	r3, [r1, #16]
 800dcb8:	4605      	mov	r5, r0
 800dcba:	460c      	mov	r4, r1
 800dcbc:	b1db      	cbz	r3, 800dcf6 <_fflush_r+0x42>
 800dcbe:	b118      	cbz	r0, 800dcc8 <_fflush_r+0x14>
 800dcc0:	6983      	ldr	r3, [r0, #24]
 800dcc2:	b90b      	cbnz	r3, 800dcc8 <_fflush_r+0x14>
 800dcc4:	f000 f860 	bl	800dd88 <__sinit>
 800dcc8:	4b0c      	ldr	r3, [pc, #48]	; (800dcfc <_fflush_r+0x48>)
 800dcca:	429c      	cmp	r4, r3
 800dccc:	d109      	bne.n	800dce2 <_fflush_r+0x2e>
 800dcce:	686c      	ldr	r4, [r5, #4]
 800dcd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcd4:	b17b      	cbz	r3, 800dcf6 <_fflush_r+0x42>
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	4628      	mov	r0, r5
 800dcda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcde:	f7ff bf63 	b.w	800dba8 <__sflush_r>
 800dce2:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <_fflush_r+0x4c>)
 800dce4:	429c      	cmp	r4, r3
 800dce6:	d101      	bne.n	800dcec <_fflush_r+0x38>
 800dce8:	68ac      	ldr	r4, [r5, #8]
 800dcea:	e7f1      	b.n	800dcd0 <_fflush_r+0x1c>
 800dcec:	4b05      	ldr	r3, [pc, #20]	; (800dd04 <_fflush_r+0x50>)
 800dcee:	429c      	cmp	r4, r3
 800dcf0:	bf08      	it	eq
 800dcf2:	68ec      	ldreq	r4, [r5, #12]
 800dcf4:	e7ec      	b.n	800dcd0 <_fflush_r+0x1c>
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	bd38      	pop	{r3, r4, r5, pc}
 800dcfa:	bf00      	nop
 800dcfc:	0800f98c 	.word	0x0800f98c
 800dd00:	0800f9ac 	.word	0x0800f9ac
 800dd04:	0800f96c 	.word	0x0800f96c

0800dd08 <std>:
 800dd08:	2300      	movs	r3, #0
 800dd0a:	b510      	push	{r4, lr}
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	e9c0 3300 	strd	r3, r3, [r0]
 800dd12:	6083      	str	r3, [r0, #8]
 800dd14:	8181      	strh	r1, [r0, #12]
 800dd16:	6643      	str	r3, [r0, #100]	; 0x64
 800dd18:	81c2      	strh	r2, [r0, #14]
 800dd1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd1e:	6183      	str	r3, [r0, #24]
 800dd20:	4619      	mov	r1, r3
 800dd22:	2208      	movs	r2, #8
 800dd24:	305c      	adds	r0, #92	; 0x5c
 800dd26:	f7fe faab 	bl	800c280 <memset>
 800dd2a:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <std+0x38>)
 800dd2c:	6263      	str	r3, [r4, #36]	; 0x24
 800dd2e:	4b05      	ldr	r3, [pc, #20]	; (800dd44 <std+0x3c>)
 800dd30:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd32:	4b05      	ldr	r3, [pc, #20]	; (800dd48 <std+0x40>)
 800dd34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd36:	4b05      	ldr	r3, [pc, #20]	; (800dd4c <std+0x44>)
 800dd38:	6224      	str	r4, [r4, #32]
 800dd3a:	6323      	str	r3, [r4, #48]	; 0x30
 800dd3c:	bd10      	pop	{r4, pc}
 800dd3e:	bf00      	nop
 800dd40:	0800e955 	.word	0x0800e955
 800dd44:	0800e977 	.word	0x0800e977
 800dd48:	0800e9af 	.word	0x0800e9af
 800dd4c:	0800e9d3 	.word	0x0800e9d3

0800dd50 <_cleanup_r>:
 800dd50:	4901      	ldr	r1, [pc, #4]	; (800dd58 <_cleanup_r+0x8>)
 800dd52:	f000 b885 	b.w	800de60 <_fwalk_reent>
 800dd56:	bf00      	nop
 800dd58:	0800dcb5 	.word	0x0800dcb5

0800dd5c <__sfmoreglue>:
 800dd5c:	b570      	push	{r4, r5, r6, lr}
 800dd5e:	1e4a      	subs	r2, r1, #1
 800dd60:	2568      	movs	r5, #104	; 0x68
 800dd62:	4355      	muls	r5, r2
 800dd64:	460e      	mov	r6, r1
 800dd66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd6a:	f000 fc49 	bl	800e600 <_malloc_r>
 800dd6e:	4604      	mov	r4, r0
 800dd70:	b140      	cbz	r0, 800dd84 <__sfmoreglue+0x28>
 800dd72:	2100      	movs	r1, #0
 800dd74:	e9c0 1600 	strd	r1, r6, [r0]
 800dd78:	300c      	adds	r0, #12
 800dd7a:	60a0      	str	r0, [r4, #8]
 800dd7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd80:	f7fe fa7e 	bl	800c280 <memset>
 800dd84:	4620      	mov	r0, r4
 800dd86:	bd70      	pop	{r4, r5, r6, pc}

0800dd88 <__sinit>:
 800dd88:	6983      	ldr	r3, [r0, #24]
 800dd8a:	b510      	push	{r4, lr}
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	bb33      	cbnz	r3, 800ddde <__sinit+0x56>
 800dd90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800dd94:	6503      	str	r3, [r0, #80]	; 0x50
 800dd96:	4b12      	ldr	r3, [pc, #72]	; (800dde0 <__sinit+0x58>)
 800dd98:	4a12      	ldr	r2, [pc, #72]	; (800dde4 <__sinit+0x5c>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	6282      	str	r2, [r0, #40]	; 0x28
 800dd9e:	4298      	cmp	r0, r3
 800dda0:	bf04      	itt	eq
 800dda2:	2301      	moveq	r3, #1
 800dda4:	6183      	streq	r3, [r0, #24]
 800dda6:	f000 f81f 	bl	800dde8 <__sfp>
 800ddaa:	6060      	str	r0, [r4, #4]
 800ddac:	4620      	mov	r0, r4
 800ddae:	f000 f81b 	bl	800dde8 <__sfp>
 800ddb2:	60a0      	str	r0, [r4, #8]
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 f817 	bl	800dde8 <__sfp>
 800ddba:	2200      	movs	r2, #0
 800ddbc:	60e0      	str	r0, [r4, #12]
 800ddbe:	2104      	movs	r1, #4
 800ddc0:	6860      	ldr	r0, [r4, #4]
 800ddc2:	f7ff ffa1 	bl	800dd08 <std>
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	2109      	movs	r1, #9
 800ddca:	68a0      	ldr	r0, [r4, #8]
 800ddcc:	f7ff ff9c 	bl	800dd08 <std>
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	2112      	movs	r1, #18
 800ddd4:	68e0      	ldr	r0, [r4, #12]
 800ddd6:	f7ff ff97 	bl	800dd08 <std>
 800ddda:	2301      	movs	r3, #1
 800dddc:	61a3      	str	r3, [r4, #24]
 800ddde:	bd10      	pop	{r4, pc}
 800dde0:	0800f928 	.word	0x0800f928
 800dde4:	0800dd51 	.word	0x0800dd51

0800dde8 <__sfp>:
 800dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddea:	4b1b      	ldr	r3, [pc, #108]	; (800de58 <__sfp+0x70>)
 800ddec:	681e      	ldr	r6, [r3, #0]
 800ddee:	69b3      	ldr	r3, [r6, #24]
 800ddf0:	4607      	mov	r7, r0
 800ddf2:	b913      	cbnz	r3, 800ddfa <__sfp+0x12>
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f7ff ffc7 	bl	800dd88 <__sinit>
 800ddfa:	3648      	adds	r6, #72	; 0x48
 800ddfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de00:	3b01      	subs	r3, #1
 800de02:	d503      	bpl.n	800de0c <__sfp+0x24>
 800de04:	6833      	ldr	r3, [r6, #0]
 800de06:	b133      	cbz	r3, 800de16 <__sfp+0x2e>
 800de08:	6836      	ldr	r6, [r6, #0]
 800de0a:	e7f7      	b.n	800ddfc <__sfp+0x14>
 800de0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de10:	b16d      	cbz	r5, 800de2e <__sfp+0x46>
 800de12:	3468      	adds	r4, #104	; 0x68
 800de14:	e7f4      	b.n	800de00 <__sfp+0x18>
 800de16:	2104      	movs	r1, #4
 800de18:	4638      	mov	r0, r7
 800de1a:	f7ff ff9f 	bl	800dd5c <__sfmoreglue>
 800de1e:	6030      	str	r0, [r6, #0]
 800de20:	2800      	cmp	r0, #0
 800de22:	d1f1      	bne.n	800de08 <__sfp+0x20>
 800de24:	230c      	movs	r3, #12
 800de26:	603b      	str	r3, [r7, #0]
 800de28:	4604      	mov	r4, r0
 800de2a:	4620      	mov	r0, r4
 800de2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de2e:	4b0b      	ldr	r3, [pc, #44]	; (800de5c <__sfp+0x74>)
 800de30:	6665      	str	r5, [r4, #100]	; 0x64
 800de32:	e9c4 5500 	strd	r5, r5, [r4]
 800de36:	60a5      	str	r5, [r4, #8]
 800de38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800de3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800de40:	2208      	movs	r2, #8
 800de42:	4629      	mov	r1, r5
 800de44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de48:	f7fe fa1a 	bl	800c280 <memset>
 800de4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de54:	e7e9      	b.n	800de2a <__sfp+0x42>
 800de56:	bf00      	nop
 800de58:	0800f928 	.word	0x0800f928
 800de5c:	ffff0001 	.word	0xffff0001

0800de60 <_fwalk_reent>:
 800de60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de64:	4680      	mov	r8, r0
 800de66:	4689      	mov	r9, r1
 800de68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de6c:	2600      	movs	r6, #0
 800de6e:	b914      	cbnz	r4, 800de76 <_fwalk_reent+0x16>
 800de70:	4630      	mov	r0, r6
 800de72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800de7a:	3f01      	subs	r7, #1
 800de7c:	d501      	bpl.n	800de82 <_fwalk_reent+0x22>
 800de7e:	6824      	ldr	r4, [r4, #0]
 800de80:	e7f5      	b.n	800de6e <_fwalk_reent+0xe>
 800de82:	89ab      	ldrh	r3, [r5, #12]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d907      	bls.n	800de98 <_fwalk_reent+0x38>
 800de88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de8c:	3301      	adds	r3, #1
 800de8e:	d003      	beq.n	800de98 <_fwalk_reent+0x38>
 800de90:	4629      	mov	r1, r5
 800de92:	4640      	mov	r0, r8
 800de94:	47c8      	blx	r9
 800de96:	4306      	orrs	r6, r0
 800de98:	3568      	adds	r5, #104	; 0x68
 800de9a:	e7ee      	b.n	800de7a <_fwalk_reent+0x1a>

0800de9c <_localeconv_r>:
 800de9c:	4b04      	ldr	r3, [pc, #16]	; (800deb0 <_localeconv_r+0x14>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6a18      	ldr	r0, [r3, #32]
 800dea2:	4b04      	ldr	r3, [pc, #16]	; (800deb4 <_localeconv_r+0x18>)
 800dea4:	2800      	cmp	r0, #0
 800dea6:	bf08      	it	eq
 800dea8:	4618      	moveq	r0, r3
 800deaa:	30f0      	adds	r0, #240	; 0xf0
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	20001670 	.word	0x20001670
 800deb4:	200016d4 	.word	0x200016d4

0800deb8 <__swhatbuf_r>:
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	460e      	mov	r6, r1
 800debc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dec0:	2900      	cmp	r1, #0
 800dec2:	b096      	sub	sp, #88	; 0x58
 800dec4:	4614      	mov	r4, r2
 800dec6:	461d      	mov	r5, r3
 800dec8:	da07      	bge.n	800deda <__swhatbuf_r+0x22>
 800deca:	2300      	movs	r3, #0
 800decc:	602b      	str	r3, [r5, #0]
 800dece:	89b3      	ldrh	r3, [r6, #12]
 800ded0:	061a      	lsls	r2, r3, #24
 800ded2:	d410      	bmi.n	800def6 <__swhatbuf_r+0x3e>
 800ded4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ded8:	e00e      	b.n	800def8 <__swhatbuf_r+0x40>
 800deda:	466a      	mov	r2, sp
 800dedc:	f000 fda0 	bl	800ea20 <_fstat_r>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	dbf2      	blt.n	800deca <__swhatbuf_r+0x12>
 800dee4:	9a01      	ldr	r2, [sp, #4]
 800dee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800deea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800deee:	425a      	negs	r2, r3
 800def0:	415a      	adcs	r2, r3
 800def2:	602a      	str	r2, [r5, #0]
 800def4:	e7ee      	b.n	800ded4 <__swhatbuf_r+0x1c>
 800def6:	2340      	movs	r3, #64	; 0x40
 800def8:	2000      	movs	r0, #0
 800defa:	6023      	str	r3, [r4, #0]
 800defc:	b016      	add	sp, #88	; 0x58
 800defe:	bd70      	pop	{r4, r5, r6, pc}

0800df00 <__smakebuf_r>:
 800df00:	898b      	ldrh	r3, [r1, #12]
 800df02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df04:	079d      	lsls	r5, r3, #30
 800df06:	4606      	mov	r6, r0
 800df08:	460c      	mov	r4, r1
 800df0a:	d507      	bpl.n	800df1c <__smakebuf_r+0x1c>
 800df0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df10:	6023      	str	r3, [r4, #0]
 800df12:	6123      	str	r3, [r4, #16]
 800df14:	2301      	movs	r3, #1
 800df16:	6163      	str	r3, [r4, #20]
 800df18:	b002      	add	sp, #8
 800df1a:	bd70      	pop	{r4, r5, r6, pc}
 800df1c:	ab01      	add	r3, sp, #4
 800df1e:	466a      	mov	r2, sp
 800df20:	f7ff ffca 	bl	800deb8 <__swhatbuf_r>
 800df24:	9900      	ldr	r1, [sp, #0]
 800df26:	4605      	mov	r5, r0
 800df28:	4630      	mov	r0, r6
 800df2a:	f000 fb69 	bl	800e600 <_malloc_r>
 800df2e:	b948      	cbnz	r0, 800df44 <__smakebuf_r+0x44>
 800df30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df34:	059a      	lsls	r2, r3, #22
 800df36:	d4ef      	bmi.n	800df18 <__smakebuf_r+0x18>
 800df38:	f023 0303 	bic.w	r3, r3, #3
 800df3c:	f043 0302 	orr.w	r3, r3, #2
 800df40:	81a3      	strh	r3, [r4, #12]
 800df42:	e7e3      	b.n	800df0c <__smakebuf_r+0xc>
 800df44:	4b0d      	ldr	r3, [pc, #52]	; (800df7c <__smakebuf_r+0x7c>)
 800df46:	62b3      	str	r3, [r6, #40]	; 0x28
 800df48:	89a3      	ldrh	r3, [r4, #12]
 800df4a:	6020      	str	r0, [r4, #0]
 800df4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df50:	81a3      	strh	r3, [r4, #12]
 800df52:	9b00      	ldr	r3, [sp, #0]
 800df54:	6163      	str	r3, [r4, #20]
 800df56:	9b01      	ldr	r3, [sp, #4]
 800df58:	6120      	str	r0, [r4, #16]
 800df5a:	b15b      	cbz	r3, 800df74 <__smakebuf_r+0x74>
 800df5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df60:	4630      	mov	r0, r6
 800df62:	f000 fd6f 	bl	800ea44 <_isatty_r>
 800df66:	b128      	cbz	r0, 800df74 <__smakebuf_r+0x74>
 800df68:	89a3      	ldrh	r3, [r4, #12]
 800df6a:	f023 0303 	bic.w	r3, r3, #3
 800df6e:	f043 0301 	orr.w	r3, r3, #1
 800df72:	81a3      	strh	r3, [r4, #12]
 800df74:	89a3      	ldrh	r3, [r4, #12]
 800df76:	431d      	orrs	r5, r3
 800df78:	81a5      	strh	r5, [r4, #12]
 800df7a:	e7cd      	b.n	800df18 <__smakebuf_r+0x18>
 800df7c:	0800dd51 	.word	0x0800dd51

0800df80 <malloc>:
 800df80:	4b02      	ldr	r3, [pc, #8]	; (800df8c <malloc+0xc>)
 800df82:	4601      	mov	r1, r0
 800df84:	6818      	ldr	r0, [r3, #0]
 800df86:	f000 bb3b 	b.w	800e600 <_malloc_r>
 800df8a:	bf00      	nop
 800df8c:	20001670 	.word	0x20001670

0800df90 <_Balloc>:
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df94:	4604      	mov	r4, r0
 800df96:	460e      	mov	r6, r1
 800df98:	b93d      	cbnz	r5, 800dfaa <_Balloc+0x1a>
 800df9a:	2010      	movs	r0, #16
 800df9c:	f7ff fff0 	bl	800df80 <malloc>
 800dfa0:	6260      	str	r0, [r4, #36]	; 0x24
 800dfa2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dfa6:	6005      	str	r5, [r0, #0]
 800dfa8:	60c5      	str	r5, [r0, #12]
 800dfaa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dfac:	68eb      	ldr	r3, [r5, #12]
 800dfae:	b183      	cbz	r3, 800dfd2 <_Balloc+0x42>
 800dfb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dfb8:	b9b8      	cbnz	r0, 800dfea <_Balloc+0x5a>
 800dfba:	2101      	movs	r1, #1
 800dfbc:	fa01 f506 	lsl.w	r5, r1, r6
 800dfc0:	1d6a      	adds	r2, r5, #5
 800dfc2:	0092      	lsls	r2, r2, #2
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	f000 fabf 	bl	800e548 <_calloc_r>
 800dfca:	b160      	cbz	r0, 800dfe6 <_Balloc+0x56>
 800dfcc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dfd0:	e00e      	b.n	800dff0 <_Balloc+0x60>
 800dfd2:	2221      	movs	r2, #33	; 0x21
 800dfd4:	2104      	movs	r1, #4
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f000 fab6 	bl	800e548 <_calloc_r>
 800dfdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfde:	60e8      	str	r0, [r5, #12]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1e4      	bne.n	800dfb0 <_Balloc+0x20>
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	bd70      	pop	{r4, r5, r6, pc}
 800dfea:	6802      	ldr	r2, [r0, #0]
 800dfec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dff0:	2300      	movs	r3, #0
 800dff2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dff6:	e7f7      	b.n	800dfe8 <_Balloc+0x58>

0800dff8 <_Bfree>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dffc:	4606      	mov	r6, r0
 800dffe:	460d      	mov	r5, r1
 800e000:	b93c      	cbnz	r4, 800e012 <_Bfree+0x1a>
 800e002:	2010      	movs	r0, #16
 800e004:	f7ff ffbc 	bl	800df80 <malloc>
 800e008:	6270      	str	r0, [r6, #36]	; 0x24
 800e00a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e00e:	6004      	str	r4, [r0, #0]
 800e010:	60c4      	str	r4, [r0, #12]
 800e012:	b13d      	cbz	r5, 800e024 <_Bfree+0x2c>
 800e014:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e016:	686a      	ldr	r2, [r5, #4]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e01e:	6029      	str	r1, [r5, #0]
 800e020:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e024:	bd70      	pop	{r4, r5, r6, pc}

0800e026 <__multadd>:
 800e026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e02a:	690d      	ldr	r5, [r1, #16]
 800e02c:	461f      	mov	r7, r3
 800e02e:	4606      	mov	r6, r0
 800e030:	460c      	mov	r4, r1
 800e032:	f101 0c14 	add.w	ip, r1, #20
 800e036:	2300      	movs	r3, #0
 800e038:	f8dc 0000 	ldr.w	r0, [ip]
 800e03c:	b281      	uxth	r1, r0
 800e03e:	fb02 7101 	mla	r1, r2, r1, r7
 800e042:	0c0f      	lsrs	r7, r1, #16
 800e044:	0c00      	lsrs	r0, r0, #16
 800e046:	fb02 7000 	mla	r0, r2, r0, r7
 800e04a:	b289      	uxth	r1, r1
 800e04c:	3301      	adds	r3, #1
 800e04e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e052:	429d      	cmp	r5, r3
 800e054:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e058:	f84c 1b04 	str.w	r1, [ip], #4
 800e05c:	dcec      	bgt.n	800e038 <__multadd+0x12>
 800e05e:	b1d7      	cbz	r7, 800e096 <__multadd+0x70>
 800e060:	68a3      	ldr	r3, [r4, #8]
 800e062:	42ab      	cmp	r3, r5
 800e064:	dc12      	bgt.n	800e08c <__multadd+0x66>
 800e066:	6861      	ldr	r1, [r4, #4]
 800e068:	4630      	mov	r0, r6
 800e06a:	3101      	adds	r1, #1
 800e06c:	f7ff ff90 	bl	800df90 <_Balloc>
 800e070:	6922      	ldr	r2, [r4, #16]
 800e072:	3202      	adds	r2, #2
 800e074:	f104 010c 	add.w	r1, r4, #12
 800e078:	4680      	mov	r8, r0
 800e07a:	0092      	lsls	r2, r2, #2
 800e07c:	300c      	adds	r0, #12
 800e07e:	f7fe f8db 	bl	800c238 <memcpy>
 800e082:	4621      	mov	r1, r4
 800e084:	4630      	mov	r0, r6
 800e086:	f7ff ffb7 	bl	800dff8 <_Bfree>
 800e08a:	4644      	mov	r4, r8
 800e08c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e090:	3501      	adds	r5, #1
 800e092:	615f      	str	r7, [r3, #20]
 800e094:	6125      	str	r5, [r4, #16]
 800e096:	4620      	mov	r0, r4
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e09c <__hi0bits>:
 800e09c:	0c02      	lsrs	r2, r0, #16
 800e09e:	0412      	lsls	r2, r2, #16
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	b9b2      	cbnz	r2, 800e0d2 <__hi0bits+0x36>
 800e0a4:	0403      	lsls	r3, r0, #16
 800e0a6:	2010      	movs	r0, #16
 800e0a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e0ac:	bf04      	itt	eq
 800e0ae:	021b      	lsleq	r3, r3, #8
 800e0b0:	3008      	addeq	r0, #8
 800e0b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e0b6:	bf04      	itt	eq
 800e0b8:	011b      	lsleq	r3, r3, #4
 800e0ba:	3004      	addeq	r0, #4
 800e0bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e0c0:	bf04      	itt	eq
 800e0c2:	009b      	lsleq	r3, r3, #2
 800e0c4:	3002      	addeq	r0, #2
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	db06      	blt.n	800e0d8 <__hi0bits+0x3c>
 800e0ca:	005b      	lsls	r3, r3, #1
 800e0cc:	d503      	bpl.n	800e0d6 <__hi0bits+0x3a>
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	4770      	bx	lr
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	e7e8      	b.n	800e0a8 <__hi0bits+0xc>
 800e0d6:	2020      	movs	r0, #32
 800e0d8:	4770      	bx	lr

0800e0da <__lo0bits>:
 800e0da:	6803      	ldr	r3, [r0, #0]
 800e0dc:	f013 0207 	ands.w	r2, r3, #7
 800e0e0:	4601      	mov	r1, r0
 800e0e2:	d00b      	beq.n	800e0fc <__lo0bits+0x22>
 800e0e4:	07da      	lsls	r2, r3, #31
 800e0e6:	d423      	bmi.n	800e130 <__lo0bits+0x56>
 800e0e8:	0798      	lsls	r0, r3, #30
 800e0ea:	bf49      	itett	mi
 800e0ec:	085b      	lsrmi	r3, r3, #1
 800e0ee:	089b      	lsrpl	r3, r3, #2
 800e0f0:	2001      	movmi	r0, #1
 800e0f2:	600b      	strmi	r3, [r1, #0]
 800e0f4:	bf5c      	itt	pl
 800e0f6:	600b      	strpl	r3, [r1, #0]
 800e0f8:	2002      	movpl	r0, #2
 800e0fa:	4770      	bx	lr
 800e0fc:	b298      	uxth	r0, r3
 800e0fe:	b9a8      	cbnz	r0, 800e12c <__lo0bits+0x52>
 800e100:	0c1b      	lsrs	r3, r3, #16
 800e102:	2010      	movs	r0, #16
 800e104:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e108:	bf04      	itt	eq
 800e10a:	0a1b      	lsreq	r3, r3, #8
 800e10c:	3008      	addeq	r0, #8
 800e10e:	071a      	lsls	r2, r3, #28
 800e110:	bf04      	itt	eq
 800e112:	091b      	lsreq	r3, r3, #4
 800e114:	3004      	addeq	r0, #4
 800e116:	079a      	lsls	r2, r3, #30
 800e118:	bf04      	itt	eq
 800e11a:	089b      	lsreq	r3, r3, #2
 800e11c:	3002      	addeq	r0, #2
 800e11e:	07da      	lsls	r2, r3, #31
 800e120:	d402      	bmi.n	800e128 <__lo0bits+0x4e>
 800e122:	085b      	lsrs	r3, r3, #1
 800e124:	d006      	beq.n	800e134 <__lo0bits+0x5a>
 800e126:	3001      	adds	r0, #1
 800e128:	600b      	str	r3, [r1, #0]
 800e12a:	4770      	bx	lr
 800e12c:	4610      	mov	r0, r2
 800e12e:	e7e9      	b.n	800e104 <__lo0bits+0x2a>
 800e130:	2000      	movs	r0, #0
 800e132:	4770      	bx	lr
 800e134:	2020      	movs	r0, #32
 800e136:	4770      	bx	lr

0800e138 <__i2b>:
 800e138:	b510      	push	{r4, lr}
 800e13a:	460c      	mov	r4, r1
 800e13c:	2101      	movs	r1, #1
 800e13e:	f7ff ff27 	bl	800df90 <_Balloc>
 800e142:	2201      	movs	r2, #1
 800e144:	6144      	str	r4, [r0, #20]
 800e146:	6102      	str	r2, [r0, #16]
 800e148:	bd10      	pop	{r4, pc}

0800e14a <__multiply>:
 800e14a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14e:	4614      	mov	r4, r2
 800e150:	690a      	ldr	r2, [r1, #16]
 800e152:	6923      	ldr	r3, [r4, #16]
 800e154:	429a      	cmp	r2, r3
 800e156:	bfb8      	it	lt
 800e158:	460b      	movlt	r3, r1
 800e15a:	4688      	mov	r8, r1
 800e15c:	bfbc      	itt	lt
 800e15e:	46a0      	movlt	r8, r4
 800e160:	461c      	movlt	r4, r3
 800e162:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e166:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e16a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e16e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e172:	eb07 0609 	add.w	r6, r7, r9
 800e176:	42b3      	cmp	r3, r6
 800e178:	bfb8      	it	lt
 800e17a:	3101      	addlt	r1, #1
 800e17c:	f7ff ff08 	bl	800df90 <_Balloc>
 800e180:	f100 0514 	add.w	r5, r0, #20
 800e184:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e188:	462b      	mov	r3, r5
 800e18a:	2200      	movs	r2, #0
 800e18c:	4573      	cmp	r3, lr
 800e18e:	d316      	bcc.n	800e1be <__multiply+0x74>
 800e190:	f104 0214 	add.w	r2, r4, #20
 800e194:	f108 0114 	add.w	r1, r8, #20
 800e198:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e19c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	9b00      	ldr	r3, [sp, #0]
 800e1a4:	9201      	str	r2, [sp, #4]
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d80c      	bhi.n	800e1c4 <__multiply+0x7a>
 800e1aa:	2e00      	cmp	r6, #0
 800e1ac:	dd03      	ble.n	800e1b6 <__multiply+0x6c>
 800e1ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d05d      	beq.n	800e272 <__multiply+0x128>
 800e1b6:	6106      	str	r6, [r0, #16]
 800e1b8:	b003      	add	sp, #12
 800e1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1be:	f843 2b04 	str.w	r2, [r3], #4
 800e1c2:	e7e3      	b.n	800e18c <__multiply+0x42>
 800e1c4:	f8b2 b000 	ldrh.w	fp, [r2]
 800e1c8:	f1bb 0f00 	cmp.w	fp, #0
 800e1cc:	d023      	beq.n	800e216 <__multiply+0xcc>
 800e1ce:	4689      	mov	r9, r1
 800e1d0:	46ac      	mov	ip, r5
 800e1d2:	f04f 0800 	mov.w	r8, #0
 800e1d6:	f859 4b04 	ldr.w	r4, [r9], #4
 800e1da:	f8dc a000 	ldr.w	sl, [ip]
 800e1de:	b2a3      	uxth	r3, r4
 800e1e0:	fa1f fa8a 	uxth.w	sl, sl
 800e1e4:	fb0b a303 	mla	r3, fp, r3, sl
 800e1e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e1ec:	f8dc 4000 	ldr.w	r4, [ip]
 800e1f0:	4443      	add	r3, r8
 800e1f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e1f6:	fb0b 840a 	mla	r4, fp, sl, r8
 800e1fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e1fe:	46e2      	mov	sl, ip
 800e200:	b29b      	uxth	r3, r3
 800e202:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e206:	454f      	cmp	r7, r9
 800e208:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e20c:	f84a 3b04 	str.w	r3, [sl], #4
 800e210:	d82b      	bhi.n	800e26a <__multiply+0x120>
 800e212:	f8cc 8004 	str.w	r8, [ip, #4]
 800e216:	9b01      	ldr	r3, [sp, #4]
 800e218:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e21c:	3204      	adds	r2, #4
 800e21e:	f1ba 0f00 	cmp.w	sl, #0
 800e222:	d020      	beq.n	800e266 <__multiply+0x11c>
 800e224:	682b      	ldr	r3, [r5, #0]
 800e226:	4689      	mov	r9, r1
 800e228:	46a8      	mov	r8, r5
 800e22a:	f04f 0b00 	mov.w	fp, #0
 800e22e:	f8b9 c000 	ldrh.w	ip, [r9]
 800e232:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e236:	fb0a 440c 	mla	r4, sl, ip, r4
 800e23a:	445c      	add	r4, fp
 800e23c:	46c4      	mov	ip, r8
 800e23e:	b29b      	uxth	r3, r3
 800e240:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e244:	f84c 3b04 	str.w	r3, [ip], #4
 800e248:	f859 3b04 	ldr.w	r3, [r9], #4
 800e24c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e250:	0c1b      	lsrs	r3, r3, #16
 800e252:	fb0a b303 	mla	r3, sl, r3, fp
 800e256:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e25a:	454f      	cmp	r7, r9
 800e25c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e260:	d805      	bhi.n	800e26e <__multiply+0x124>
 800e262:	f8c8 3004 	str.w	r3, [r8, #4]
 800e266:	3504      	adds	r5, #4
 800e268:	e79b      	b.n	800e1a2 <__multiply+0x58>
 800e26a:	46d4      	mov	ip, sl
 800e26c:	e7b3      	b.n	800e1d6 <__multiply+0x8c>
 800e26e:	46e0      	mov	r8, ip
 800e270:	e7dd      	b.n	800e22e <__multiply+0xe4>
 800e272:	3e01      	subs	r6, #1
 800e274:	e799      	b.n	800e1aa <__multiply+0x60>
	...

0800e278 <__pow5mult>:
 800e278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e27c:	4615      	mov	r5, r2
 800e27e:	f012 0203 	ands.w	r2, r2, #3
 800e282:	4606      	mov	r6, r0
 800e284:	460f      	mov	r7, r1
 800e286:	d007      	beq.n	800e298 <__pow5mult+0x20>
 800e288:	3a01      	subs	r2, #1
 800e28a:	4c21      	ldr	r4, [pc, #132]	; (800e310 <__pow5mult+0x98>)
 800e28c:	2300      	movs	r3, #0
 800e28e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e292:	f7ff fec8 	bl	800e026 <__multadd>
 800e296:	4607      	mov	r7, r0
 800e298:	10ad      	asrs	r5, r5, #2
 800e29a:	d035      	beq.n	800e308 <__pow5mult+0x90>
 800e29c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e29e:	b93c      	cbnz	r4, 800e2b0 <__pow5mult+0x38>
 800e2a0:	2010      	movs	r0, #16
 800e2a2:	f7ff fe6d 	bl	800df80 <malloc>
 800e2a6:	6270      	str	r0, [r6, #36]	; 0x24
 800e2a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2ac:	6004      	str	r4, [r0, #0]
 800e2ae:	60c4      	str	r4, [r0, #12]
 800e2b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e2b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2b8:	b94c      	cbnz	r4, 800e2ce <__pow5mult+0x56>
 800e2ba:	f240 2171 	movw	r1, #625	; 0x271
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f7ff ff3a 	bl	800e138 <__i2b>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	6003      	str	r3, [r0, #0]
 800e2ce:	f04f 0800 	mov.w	r8, #0
 800e2d2:	07eb      	lsls	r3, r5, #31
 800e2d4:	d50a      	bpl.n	800e2ec <__pow5mult+0x74>
 800e2d6:	4639      	mov	r1, r7
 800e2d8:	4622      	mov	r2, r4
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f7ff ff35 	bl	800e14a <__multiply>
 800e2e0:	4639      	mov	r1, r7
 800e2e2:	4681      	mov	r9, r0
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	f7ff fe87 	bl	800dff8 <_Bfree>
 800e2ea:	464f      	mov	r7, r9
 800e2ec:	106d      	asrs	r5, r5, #1
 800e2ee:	d00b      	beq.n	800e308 <__pow5mult+0x90>
 800e2f0:	6820      	ldr	r0, [r4, #0]
 800e2f2:	b938      	cbnz	r0, 800e304 <__pow5mult+0x8c>
 800e2f4:	4622      	mov	r2, r4
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	f7ff ff26 	bl	800e14a <__multiply>
 800e2fe:	6020      	str	r0, [r4, #0]
 800e300:	f8c0 8000 	str.w	r8, [r0]
 800e304:	4604      	mov	r4, r0
 800e306:	e7e4      	b.n	800e2d2 <__pow5mult+0x5a>
 800e308:	4638      	mov	r0, r7
 800e30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e30e:	bf00      	nop
 800e310:	0800fac0 	.word	0x0800fac0

0800e314 <__lshift>:
 800e314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e318:	460c      	mov	r4, r1
 800e31a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e31e:	6923      	ldr	r3, [r4, #16]
 800e320:	6849      	ldr	r1, [r1, #4]
 800e322:	eb0a 0903 	add.w	r9, sl, r3
 800e326:	68a3      	ldr	r3, [r4, #8]
 800e328:	4607      	mov	r7, r0
 800e32a:	4616      	mov	r6, r2
 800e32c:	f109 0501 	add.w	r5, r9, #1
 800e330:	42ab      	cmp	r3, r5
 800e332:	db32      	blt.n	800e39a <__lshift+0x86>
 800e334:	4638      	mov	r0, r7
 800e336:	f7ff fe2b 	bl	800df90 <_Balloc>
 800e33a:	2300      	movs	r3, #0
 800e33c:	4680      	mov	r8, r0
 800e33e:	f100 0114 	add.w	r1, r0, #20
 800e342:	461a      	mov	r2, r3
 800e344:	4553      	cmp	r3, sl
 800e346:	db2b      	blt.n	800e3a0 <__lshift+0x8c>
 800e348:	6920      	ldr	r0, [r4, #16]
 800e34a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e34e:	f104 0314 	add.w	r3, r4, #20
 800e352:	f016 021f 	ands.w	r2, r6, #31
 800e356:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e35a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e35e:	d025      	beq.n	800e3ac <__lshift+0x98>
 800e360:	f1c2 0e20 	rsb	lr, r2, #32
 800e364:	2000      	movs	r0, #0
 800e366:	681e      	ldr	r6, [r3, #0]
 800e368:	468a      	mov	sl, r1
 800e36a:	4096      	lsls	r6, r2
 800e36c:	4330      	orrs	r0, r6
 800e36e:	f84a 0b04 	str.w	r0, [sl], #4
 800e372:	f853 0b04 	ldr.w	r0, [r3], #4
 800e376:	459c      	cmp	ip, r3
 800e378:	fa20 f00e 	lsr.w	r0, r0, lr
 800e37c:	d814      	bhi.n	800e3a8 <__lshift+0x94>
 800e37e:	6048      	str	r0, [r1, #4]
 800e380:	b108      	cbz	r0, 800e386 <__lshift+0x72>
 800e382:	f109 0502 	add.w	r5, r9, #2
 800e386:	3d01      	subs	r5, #1
 800e388:	4638      	mov	r0, r7
 800e38a:	f8c8 5010 	str.w	r5, [r8, #16]
 800e38e:	4621      	mov	r1, r4
 800e390:	f7ff fe32 	bl	800dff8 <_Bfree>
 800e394:	4640      	mov	r0, r8
 800e396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e39a:	3101      	adds	r1, #1
 800e39c:	005b      	lsls	r3, r3, #1
 800e39e:	e7c7      	b.n	800e330 <__lshift+0x1c>
 800e3a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	e7cd      	b.n	800e344 <__lshift+0x30>
 800e3a8:	4651      	mov	r1, sl
 800e3aa:	e7dc      	b.n	800e366 <__lshift+0x52>
 800e3ac:	3904      	subs	r1, #4
 800e3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3b2:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3b6:	459c      	cmp	ip, r3
 800e3b8:	d8f9      	bhi.n	800e3ae <__lshift+0x9a>
 800e3ba:	e7e4      	b.n	800e386 <__lshift+0x72>

0800e3bc <__mcmp>:
 800e3bc:	6903      	ldr	r3, [r0, #16]
 800e3be:	690a      	ldr	r2, [r1, #16]
 800e3c0:	1a9b      	subs	r3, r3, r2
 800e3c2:	b530      	push	{r4, r5, lr}
 800e3c4:	d10c      	bne.n	800e3e0 <__mcmp+0x24>
 800e3c6:	0092      	lsls	r2, r2, #2
 800e3c8:	3014      	adds	r0, #20
 800e3ca:	3114      	adds	r1, #20
 800e3cc:	1884      	adds	r4, r0, r2
 800e3ce:	4411      	add	r1, r2
 800e3d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e3d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e3d8:	4295      	cmp	r5, r2
 800e3da:	d003      	beq.n	800e3e4 <__mcmp+0x28>
 800e3dc:	d305      	bcc.n	800e3ea <__mcmp+0x2e>
 800e3de:	2301      	movs	r3, #1
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	bd30      	pop	{r4, r5, pc}
 800e3e4:	42a0      	cmp	r0, r4
 800e3e6:	d3f3      	bcc.n	800e3d0 <__mcmp+0x14>
 800e3e8:	e7fa      	b.n	800e3e0 <__mcmp+0x24>
 800e3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ee:	e7f7      	b.n	800e3e0 <__mcmp+0x24>

0800e3f0 <__mdiff>:
 800e3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f4:	460d      	mov	r5, r1
 800e3f6:	4607      	mov	r7, r0
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	4614      	mov	r4, r2
 800e3fe:	f7ff ffdd 	bl	800e3bc <__mcmp>
 800e402:	1e06      	subs	r6, r0, #0
 800e404:	d108      	bne.n	800e418 <__mdiff+0x28>
 800e406:	4631      	mov	r1, r6
 800e408:	4638      	mov	r0, r7
 800e40a:	f7ff fdc1 	bl	800df90 <_Balloc>
 800e40e:	2301      	movs	r3, #1
 800e410:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e418:	bfa4      	itt	ge
 800e41a:	4623      	movge	r3, r4
 800e41c:	462c      	movge	r4, r5
 800e41e:	4638      	mov	r0, r7
 800e420:	6861      	ldr	r1, [r4, #4]
 800e422:	bfa6      	itte	ge
 800e424:	461d      	movge	r5, r3
 800e426:	2600      	movge	r6, #0
 800e428:	2601      	movlt	r6, #1
 800e42a:	f7ff fdb1 	bl	800df90 <_Balloc>
 800e42e:	692b      	ldr	r3, [r5, #16]
 800e430:	60c6      	str	r6, [r0, #12]
 800e432:	6926      	ldr	r6, [r4, #16]
 800e434:	f105 0914 	add.w	r9, r5, #20
 800e438:	f104 0214 	add.w	r2, r4, #20
 800e43c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e440:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e444:	f100 0514 	add.w	r5, r0, #20
 800e448:	f04f 0e00 	mov.w	lr, #0
 800e44c:	f852 ab04 	ldr.w	sl, [r2], #4
 800e450:	f859 4b04 	ldr.w	r4, [r9], #4
 800e454:	fa1e f18a 	uxtah	r1, lr, sl
 800e458:	b2a3      	uxth	r3, r4
 800e45a:	1ac9      	subs	r1, r1, r3
 800e45c:	0c23      	lsrs	r3, r4, #16
 800e45e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e462:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e466:	b289      	uxth	r1, r1
 800e468:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e46c:	45c8      	cmp	r8, r9
 800e46e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e472:	4694      	mov	ip, r2
 800e474:	f845 3b04 	str.w	r3, [r5], #4
 800e478:	d8e8      	bhi.n	800e44c <__mdiff+0x5c>
 800e47a:	45bc      	cmp	ip, r7
 800e47c:	d304      	bcc.n	800e488 <__mdiff+0x98>
 800e47e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e482:	b183      	cbz	r3, 800e4a6 <__mdiff+0xb6>
 800e484:	6106      	str	r6, [r0, #16]
 800e486:	e7c5      	b.n	800e414 <__mdiff+0x24>
 800e488:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e48c:	fa1e f381 	uxtah	r3, lr, r1
 800e490:	141a      	asrs	r2, r3, #16
 800e492:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e496:	b29b      	uxth	r3, r3
 800e498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e49c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e4a0:	f845 3b04 	str.w	r3, [r5], #4
 800e4a4:	e7e9      	b.n	800e47a <__mdiff+0x8a>
 800e4a6:	3e01      	subs	r6, #1
 800e4a8:	e7e9      	b.n	800e47e <__mdiff+0x8e>

0800e4aa <__d2b>:
 800e4aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4ae:	460e      	mov	r6, r1
 800e4b0:	2101      	movs	r1, #1
 800e4b2:	ec59 8b10 	vmov	r8, r9, d0
 800e4b6:	4615      	mov	r5, r2
 800e4b8:	f7ff fd6a 	bl	800df90 <_Balloc>
 800e4bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e4c0:	4607      	mov	r7, r0
 800e4c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4c6:	bb34      	cbnz	r4, 800e516 <__d2b+0x6c>
 800e4c8:	9301      	str	r3, [sp, #4]
 800e4ca:	f1b8 0300 	subs.w	r3, r8, #0
 800e4ce:	d027      	beq.n	800e520 <__d2b+0x76>
 800e4d0:	a802      	add	r0, sp, #8
 800e4d2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e4d6:	f7ff fe00 	bl	800e0da <__lo0bits>
 800e4da:	9900      	ldr	r1, [sp, #0]
 800e4dc:	b1f0      	cbz	r0, 800e51c <__d2b+0x72>
 800e4de:	9a01      	ldr	r2, [sp, #4]
 800e4e0:	f1c0 0320 	rsb	r3, r0, #32
 800e4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4e8:	430b      	orrs	r3, r1
 800e4ea:	40c2      	lsrs	r2, r0
 800e4ec:	617b      	str	r3, [r7, #20]
 800e4ee:	9201      	str	r2, [sp, #4]
 800e4f0:	9b01      	ldr	r3, [sp, #4]
 800e4f2:	61bb      	str	r3, [r7, #24]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	bf14      	ite	ne
 800e4f8:	2102      	movne	r1, #2
 800e4fa:	2101      	moveq	r1, #1
 800e4fc:	6139      	str	r1, [r7, #16]
 800e4fe:	b1c4      	cbz	r4, 800e532 <__d2b+0x88>
 800e500:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e504:	4404      	add	r4, r0
 800e506:	6034      	str	r4, [r6, #0]
 800e508:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e50c:	6028      	str	r0, [r5, #0]
 800e50e:	4638      	mov	r0, r7
 800e510:	b003      	add	sp, #12
 800e512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e51a:	e7d5      	b.n	800e4c8 <__d2b+0x1e>
 800e51c:	6179      	str	r1, [r7, #20]
 800e51e:	e7e7      	b.n	800e4f0 <__d2b+0x46>
 800e520:	a801      	add	r0, sp, #4
 800e522:	f7ff fdda 	bl	800e0da <__lo0bits>
 800e526:	9b01      	ldr	r3, [sp, #4]
 800e528:	617b      	str	r3, [r7, #20]
 800e52a:	2101      	movs	r1, #1
 800e52c:	6139      	str	r1, [r7, #16]
 800e52e:	3020      	adds	r0, #32
 800e530:	e7e5      	b.n	800e4fe <__d2b+0x54>
 800e532:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e536:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e53a:	6030      	str	r0, [r6, #0]
 800e53c:	6918      	ldr	r0, [r3, #16]
 800e53e:	f7ff fdad 	bl	800e09c <__hi0bits>
 800e542:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e546:	e7e1      	b.n	800e50c <__d2b+0x62>

0800e548 <_calloc_r>:
 800e548:	b538      	push	{r3, r4, r5, lr}
 800e54a:	fb02 f401 	mul.w	r4, r2, r1
 800e54e:	4621      	mov	r1, r4
 800e550:	f000 f856 	bl	800e600 <_malloc_r>
 800e554:	4605      	mov	r5, r0
 800e556:	b118      	cbz	r0, 800e560 <_calloc_r+0x18>
 800e558:	4622      	mov	r2, r4
 800e55a:	2100      	movs	r1, #0
 800e55c:	f7fd fe90 	bl	800c280 <memset>
 800e560:	4628      	mov	r0, r5
 800e562:	bd38      	pop	{r3, r4, r5, pc}

0800e564 <_free_r>:
 800e564:	b538      	push	{r3, r4, r5, lr}
 800e566:	4605      	mov	r5, r0
 800e568:	2900      	cmp	r1, #0
 800e56a:	d045      	beq.n	800e5f8 <_free_r+0x94>
 800e56c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e570:	1f0c      	subs	r4, r1, #4
 800e572:	2b00      	cmp	r3, #0
 800e574:	bfb8      	it	lt
 800e576:	18e4      	addlt	r4, r4, r3
 800e578:	f000 fa98 	bl	800eaac <__malloc_lock>
 800e57c:	4a1f      	ldr	r2, [pc, #124]	; (800e5fc <_free_r+0x98>)
 800e57e:	6813      	ldr	r3, [r2, #0]
 800e580:	4610      	mov	r0, r2
 800e582:	b933      	cbnz	r3, 800e592 <_free_r+0x2e>
 800e584:	6063      	str	r3, [r4, #4]
 800e586:	6014      	str	r4, [r2, #0]
 800e588:	4628      	mov	r0, r5
 800e58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e58e:	f000 ba8e 	b.w	800eaae <__malloc_unlock>
 800e592:	42a3      	cmp	r3, r4
 800e594:	d90c      	bls.n	800e5b0 <_free_r+0x4c>
 800e596:	6821      	ldr	r1, [r4, #0]
 800e598:	1862      	adds	r2, r4, r1
 800e59a:	4293      	cmp	r3, r2
 800e59c:	bf04      	itt	eq
 800e59e:	681a      	ldreq	r2, [r3, #0]
 800e5a0:	685b      	ldreq	r3, [r3, #4]
 800e5a2:	6063      	str	r3, [r4, #4]
 800e5a4:	bf04      	itt	eq
 800e5a6:	1852      	addeq	r2, r2, r1
 800e5a8:	6022      	streq	r2, [r4, #0]
 800e5aa:	6004      	str	r4, [r0, #0]
 800e5ac:	e7ec      	b.n	800e588 <_free_r+0x24>
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	685a      	ldr	r2, [r3, #4]
 800e5b2:	b10a      	cbz	r2, 800e5b8 <_free_r+0x54>
 800e5b4:	42a2      	cmp	r2, r4
 800e5b6:	d9fa      	bls.n	800e5ae <_free_r+0x4a>
 800e5b8:	6819      	ldr	r1, [r3, #0]
 800e5ba:	1858      	adds	r0, r3, r1
 800e5bc:	42a0      	cmp	r0, r4
 800e5be:	d10b      	bne.n	800e5d8 <_free_r+0x74>
 800e5c0:	6820      	ldr	r0, [r4, #0]
 800e5c2:	4401      	add	r1, r0
 800e5c4:	1858      	adds	r0, r3, r1
 800e5c6:	4282      	cmp	r2, r0
 800e5c8:	6019      	str	r1, [r3, #0]
 800e5ca:	d1dd      	bne.n	800e588 <_free_r+0x24>
 800e5cc:	6810      	ldr	r0, [r2, #0]
 800e5ce:	6852      	ldr	r2, [r2, #4]
 800e5d0:	605a      	str	r2, [r3, #4]
 800e5d2:	4401      	add	r1, r0
 800e5d4:	6019      	str	r1, [r3, #0]
 800e5d6:	e7d7      	b.n	800e588 <_free_r+0x24>
 800e5d8:	d902      	bls.n	800e5e0 <_free_r+0x7c>
 800e5da:	230c      	movs	r3, #12
 800e5dc:	602b      	str	r3, [r5, #0]
 800e5de:	e7d3      	b.n	800e588 <_free_r+0x24>
 800e5e0:	6820      	ldr	r0, [r4, #0]
 800e5e2:	1821      	adds	r1, r4, r0
 800e5e4:	428a      	cmp	r2, r1
 800e5e6:	bf04      	itt	eq
 800e5e8:	6811      	ldreq	r1, [r2, #0]
 800e5ea:	6852      	ldreq	r2, [r2, #4]
 800e5ec:	6062      	str	r2, [r4, #4]
 800e5ee:	bf04      	itt	eq
 800e5f0:	1809      	addeq	r1, r1, r0
 800e5f2:	6021      	streq	r1, [r4, #0]
 800e5f4:	605c      	str	r4, [r3, #4]
 800e5f6:	e7c7      	b.n	800e588 <_free_r+0x24>
 800e5f8:	bd38      	pop	{r3, r4, r5, pc}
 800e5fa:	bf00      	nop
 800e5fc:	20001be8 	.word	0x20001be8

0800e600 <_malloc_r>:
 800e600:	b570      	push	{r4, r5, r6, lr}
 800e602:	1ccd      	adds	r5, r1, #3
 800e604:	f025 0503 	bic.w	r5, r5, #3
 800e608:	3508      	adds	r5, #8
 800e60a:	2d0c      	cmp	r5, #12
 800e60c:	bf38      	it	cc
 800e60e:	250c      	movcc	r5, #12
 800e610:	2d00      	cmp	r5, #0
 800e612:	4606      	mov	r6, r0
 800e614:	db01      	blt.n	800e61a <_malloc_r+0x1a>
 800e616:	42a9      	cmp	r1, r5
 800e618:	d903      	bls.n	800e622 <_malloc_r+0x22>
 800e61a:	230c      	movs	r3, #12
 800e61c:	6033      	str	r3, [r6, #0]
 800e61e:	2000      	movs	r0, #0
 800e620:	bd70      	pop	{r4, r5, r6, pc}
 800e622:	f000 fa43 	bl	800eaac <__malloc_lock>
 800e626:	4a21      	ldr	r2, [pc, #132]	; (800e6ac <_malloc_r+0xac>)
 800e628:	6814      	ldr	r4, [r2, #0]
 800e62a:	4621      	mov	r1, r4
 800e62c:	b991      	cbnz	r1, 800e654 <_malloc_r+0x54>
 800e62e:	4c20      	ldr	r4, [pc, #128]	; (800e6b0 <_malloc_r+0xb0>)
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	b91b      	cbnz	r3, 800e63c <_malloc_r+0x3c>
 800e634:	4630      	mov	r0, r6
 800e636:	f000 f97d 	bl	800e934 <_sbrk_r>
 800e63a:	6020      	str	r0, [r4, #0]
 800e63c:	4629      	mov	r1, r5
 800e63e:	4630      	mov	r0, r6
 800e640:	f000 f978 	bl	800e934 <_sbrk_r>
 800e644:	1c43      	adds	r3, r0, #1
 800e646:	d124      	bne.n	800e692 <_malloc_r+0x92>
 800e648:	230c      	movs	r3, #12
 800e64a:	6033      	str	r3, [r6, #0]
 800e64c:	4630      	mov	r0, r6
 800e64e:	f000 fa2e 	bl	800eaae <__malloc_unlock>
 800e652:	e7e4      	b.n	800e61e <_malloc_r+0x1e>
 800e654:	680b      	ldr	r3, [r1, #0]
 800e656:	1b5b      	subs	r3, r3, r5
 800e658:	d418      	bmi.n	800e68c <_malloc_r+0x8c>
 800e65a:	2b0b      	cmp	r3, #11
 800e65c:	d90f      	bls.n	800e67e <_malloc_r+0x7e>
 800e65e:	600b      	str	r3, [r1, #0]
 800e660:	50cd      	str	r5, [r1, r3]
 800e662:	18cc      	adds	r4, r1, r3
 800e664:	4630      	mov	r0, r6
 800e666:	f000 fa22 	bl	800eaae <__malloc_unlock>
 800e66a:	f104 000b 	add.w	r0, r4, #11
 800e66e:	1d23      	adds	r3, r4, #4
 800e670:	f020 0007 	bic.w	r0, r0, #7
 800e674:	1ac3      	subs	r3, r0, r3
 800e676:	d0d3      	beq.n	800e620 <_malloc_r+0x20>
 800e678:	425a      	negs	r2, r3
 800e67a:	50e2      	str	r2, [r4, r3]
 800e67c:	e7d0      	b.n	800e620 <_malloc_r+0x20>
 800e67e:	428c      	cmp	r4, r1
 800e680:	684b      	ldr	r3, [r1, #4]
 800e682:	bf16      	itet	ne
 800e684:	6063      	strne	r3, [r4, #4]
 800e686:	6013      	streq	r3, [r2, #0]
 800e688:	460c      	movne	r4, r1
 800e68a:	e7eb      	b.n	800e664 <_malloc_r+0x64>
 800e68c:	460c      	mov	r4, r1
 800e68e:	6849      	ldr	r1, [r1, #4]
 800e690:	e7cc      	b.n	800e62c <_malloc_r+0x2c>
 800e692:	1cc4      	adds	r4, r0, #3
 800e694:	f024 0403 	bic.w	r4, r4, #3
 800e698:	42a0      	cmp	r0, r4
 800e69a:	d005      	beq.n	800e6a8 <_malloc_r+0xa8>
 800e69c:	1a21      	subs	r1, r4, r0
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f000 f948 	bl	800e934 <_sbrk_r>
 800e6a4:	3001      	adds	r0, #1
 800e6a6:	d0cf      	beq.n	800e648 <_malloc_r+0x48>
 800e6a8:	6025      	str	r5, [r4, #0]
 800e6aa:	e7db      	b.n	800e664 <_malloc_r+0x64>
 800e6ac:	20001be8 	.word	0x20001be8
 800e6b0:	20001bec 	.word	0x20001bec

0800e6b4 <__sfputc_r>:
 800e6b4:	6893      	ldr	r3, [r2, #8]
 800e6b6:	3b01      	subs	r3, #1
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	b410      	push	{r4}
 800e6bc:	6093      	str	r3, [r2, #8]
 800e6be:	da08      	bge.n	800e6d2 <__sfputc_r+0x1e>
 800e6c0:	6994      	ldr	r4, [r2, #24]
 800e6c2:	42a3      	cmp	r3, r4
 800e6c4:	db01      	blt.n	800e6ca <__sfputc_r+0x16>
 800e6c6:	290a      	cmp	r1, #10
 800e6c8:	d103      	bne.n	800e6d2 <__sfputc_r+0x1e>
 800e6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6ce:	f7fe bb65 	b.w	800cd9c <__swbuf_r>
 800e6d2:	6813      	ldr	r3, [r2, #0]
 800e6d4:	1c58      	adds	r0, r3, #1
 800e6d6:	6010      	str	r0, [r2, #0]
 800e6d8:	7019      	strb	r1, [r3, #0]
 800e6da:	4608      	mov	r0, r1
 800e6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6e0:	4770      	bx	lr

0800e6e2 <__sfputs_r>:
 800e6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e4:	4606      	mov	r6, r0
 800e6e6:	460f      	mov	r7, r1
 800e6e8:	4614      	mov	r4, r2
 800e6ea:	18d5      	adds	r5, r2, r3
 800e6ec:	42ac      	cmp	r4, r5
 800e6ee:	d101      	bne.n	800e6f4 <__sfputs_r+0x12>
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	e007      	b.n	800e704 <__sfputs_r+0x22>
 800e6f4:	463a      	mov	r2, r7
 800e6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	f7ff ffda 	bl	800e6b4 <__sfputc_r>
 800e700:	1c43      	adds	r3, r0, #1
 800e702:	d1f3      	bne.n	800e6ec <__sfputs_r+0xa>
 800e704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e708 <_vfiprintf_r>:
 800e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70c:	460c      	mov	r4, r1
 800e70e:	b09d      	sub	sp, #116	; 0x74
 800e710:	4617      	mov	r7, r2
 800e712:	461d      	mov	r5, r3
 800e714:	4606      	mov	r6, r0
 800e716:	b118      	cbz	r0, 800e720 <_vfiprintf_r+0x18>
 800e718:	6983      	ldr	r3, [r0, #24]
 800e71a:	b90b      	cbnz	r3, 800e720 <_vfiprintf_r+0x18>
 800e71c:	f7ff fb34 	bl	800dd88 <__sinit>
 800e720:	4b7c      	ldr	r3, [pc, #496]	; (800e914 <_vfiprintf_r+0x20c>)
 800e722:	429c      	cmp	r4, r3
 800e724:	d158      	bne.n	800e7d8 <_vfiprintf_r+0xd0>
 800e726:	6874      	ldr	r4, [r6, #4]
 800e728:	89a3      	ldrh	r3, [r4, #12]
 800e72a:	0718      	lsls	r0, r3, #28
 800e72c:	d55e      	bpl.n	800e7ec <_vfiprintf_r+0xe4>
 800e72e:	6923      	ldr	r3, [r4, #16]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d05b      	beq.n	800e7ec <_vfiprintf_r+0xe4>
 800e734:	2300      	movs	r3, #0
 800e736:	9309      	str	r3, [sp, #36]	; 0x24
 800e738:	2320      	movs	r3, #32
 800e73a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e73e:	2330      	movs	r3, #48	; 0x30
 800e740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e744:	9503      	str	r5, [sp, #12]
 800e746:	f04f 0b01 	mov.w	fp, #1
 800e74a:	46b8      	mov	r8, r7
 800e74c:	4645      	mov	r5, r8
 800e74e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e752:	b10b      	cbz	r3, 800e758 <_vfiprintf_r+0x50>
 800e754:	2b25      	cmp	r3, #37	; 0x25
 800e756:	d154      	bne.n	800e802 <_vfiprintf_r+0xfa>
 800e758:	ebb8 0a07 	subs.w	sl, r8, r7
 800e75c:	d00b      	beq.n	800e776 <_vfiprintf_r+0x6e>
 800e75e:	4653      	mov	r3, sl
 800e760:	463a      	mov	r2, r7
 800e762:	4621      	mov	r1, r4
 800e764:	4630      	mov	r0, r6
 800e766:	f7ff ffbc 	bl	800e6e2 <__sfputs_r>
 800e76a:	3001      	adds	r0, #1
 800e76c:	f000 80c2 	beq.w	800e8f4 <_vfiprintf_r+0x1ec>
 800e770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e772:	4453      	add	r3, sl
 800e774:	9309      	str	r3, [sp, #36]	; 0x24
 800e776:	f898 3000 	ldrb.w	r3, [r8]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f000 80ba 	beq.w	800e8f4 <_vfiprintf_r+0x1ec>
 800e780:	2300      	movs	r3, #0
 800e782:	f04f 32ff 	mov.w	r2, #4294967295
 800e786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e78a:	9304      	str	r3, [sp, #16]
 800e78c:	9307      	str	r3, [sp, #28]
 800e78e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e792:	931a      	str	r3, [sp, #104]	; 0x68
 800e794:	46a8      	mov	r8, r5
 800e796:	2205      	movs	r2, #5
 800e798:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e79c:	485e      	ldr	r0, [pc, #376]	; (800e918 <_vfiprintf_r+0x210>)
 800e79e:	f7f1 fd1f 	bl	80001e0 <memchr>
 800e7a2:	9b04      	ldr	r3, [sp, #16]
 800e7a4:	bb78      	cbnz	r0, 800e806 <_vfiprintf_r+0xfe>
 800e7a6:	06d9      	lsls	r1, r3, #27
 800e7a8:	bf44      	itt	mi
 800e7aa:	2220      	movmi	r2, #32
 800e7ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e7b0:	071a      	lsls	r2, r3, #28
 800e7b2:	bf44      	itt	mi
 800e7b4:	222b      	movmi	r2, #43	; 0x2b
 800e7b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e7ba:	782a      	ldrb	r2, [r5, #0]
 800e7bc:	2a2a      	cmp	r2, #42	; 0x2a
 800e7be:	d02a      	beq.n	800e816 <_vfiprintf_r+0x10e>
 800e7c0:	9a07      	ldr	r2, [sp, #28]
 800e7c2:	46a8      	mov	r8, r5
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	250a      	movs	r5, #10
 800e7c8:	4641      	mov	r1, r8
 800e7ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7ce:	3b30      	subs	r3, #48	; 0x30
 800e7d0:	2b09      	cmp	r3, #9
 800e7d2:	d969      	bls.n	800e8a8 <_vfiprintf_r+0x1a0>
 800e7d4:	b360      	cbz	r0, 800e830 <_vfiprintf_r+0x128>
 800e7d6:	e024      	b.n	800e822 <_vfiprintf_r+0x11a>
 800e7d8:	4b50      	ldr	r3, [pc, #320]	; (800e91c <_vfiprintf_r+0x214>)
 800e7da:	429c      	cmp	r4, r3
 800e7dc:	d101      	bne.n	800e7e2 <_vfiprintf_r+0xda>
 800e7de:	68b4      	ldr	r4, [r6, #8]
 800e7e0:	e7a2      	b.n	800e728 <_vfiprintf_r+0x20>
 800e7e2:	4b4f      	ldr	r3, [pc, #316]	; (800e920 <_vfiprintf_r+0x218>)
 800e7e4:	429c      	cmp	r4, r3
 800e7e6:	bf08      	it	eq
 800e7e8:	68f4      	ldreq	r4, [r6, #12]
 800e7ea:	e79d      	b.n	800e728 <_vfiprintf_r+0x20>
 800e7ec:	4621      	mov	r1, r4
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f7fe fb26 	bl	800ce40 <__swsetup_r>
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	d09d      	beq.n	800e734 <_vfiprintf_r+0x2c>
 800e7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7fc:	b01d      	add	sp, #116	; 0x74
 800e7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e802:	46a8      	mov	r8, r5
 800e804:	e7a2      	b.n	800e74c <_vfiprintf_r+0x44>
 800e806:	4a44      	ldr	r2, [pc, #272]	; (800e918 <_vfiprintf_r+0x210>)
 800e808:	1a80      	subs	r0, r0, r2
 800e80a:	fa0b f000 	lsl.w	r0, fp, r0
 800e80e:	4318      	orrs	r0, r3
 800e810:	9004      	str	r0, [sp, #16]
 800e812:	4645      	mov	r5, r8
 800e814:	e7be      	b.n	800e794 <_vfiprintf_r+0x8c>
 800e816:	9a03      	ldr	r2, [sp, #12]
 800e818:	1d11      	adds	r1, r2, #4
 800e81a:	6812      	ldr	r2, [r2, #0]
 800e81c:	9103      	str	r1, [sp, #12]
 800e81e:	2a00      	cmp	r2, #0
 800e820:	db01      	blt.n	800e826 <_vfiprintf_r+0x11e>
 800e822:	9207      	str	r2, [sp, #28]
 800e824:	e004      	b.n	800e830 <_vfiprintf_r+0x128>
 800e826:	4252      	negs	r2, r2
 800e828:	f043 0302 	orr.w	r3, r3, #2
 800e82c:	9207      	str	r2, [sp, #28]
 800e82e:	9304      	str	r3, [sp, #16]
 800e830:	f898 3000 	ldrb.w	r3, [r8]
 800e834:	2b2e      	cmp	r3, #46	; 0x2e
 800e836:	d10e      	bne.n	800e856 <_vfiprintf_r+0x14e>
 800e838:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e83c:	2b2a      	cmp	r3, #42	; 0x2a
 800e83e:	d138      	bne.n	800e8b2 <_vfiprintf_r+0x1aa>
 800e840:	9b03      	ldr	r3, [sp, #12]
 800e842:	1d1a      	adds	r2, r3, #4
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	9203      	str	r2, [sp, #12]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	bfb8      	it	lt
 800e84c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e850:	f108 0802 	add.w	r8, r8, #2
 800e854:	9305      	str	r3, [sp, #20]
 800e856:	4d33      	ldr	r5, [pc, #204]	; (800e924 <_vfiprintf_r+0x21c>)
 800e858:	f898 1000 	ldrb.w	r1, [r8]
 800e85c:	2203      	movs	r2, #3
 800e85e:	4628      	mov	r0, r5
 800e860:	f7f1 fcbe 	bl	80001e0 <memchr>
 800e864:	b140      	cbz	r0, 800e878 <_vfiprintf_r+0x170>
 800e866:	2340      	movs	r3, #64	; 0x40
 800e868:	1b40      	subs	r0, r0, r5
 800e86a:	fa03 f000 	lsl.w	r0, r3, r0
 800e86e:	9b04      	ldr	r3, [sp, #16]
 800e870:	4303      	orrs	r3, r0
 800e872:	f108 0801 	add.w	r8, r8, #1
 800e876:	9304      	str	r3, [sp, #16]
 800e878:	f898 1000 	ldrb.w	r1, [r8]
 800e87c:	482a      	ldr	r0, [pc, #168]	; (800e928 <_vfiprintf_r+0x220>)
 800e87e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e882:	2206      	movs	r2, #6
 800e884:	f108 0701 	add.w	r7, r8, #1
 800e888:	f7f1 fcaa 	bl	80001e0 <memchr>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d037      	beq.n	800e900 <_vfiprintf_r+0x1f8>
 800e890:	4b26      	ldr	r3, [pc, #152]	; (800e92c <_vfiprintf_r+0x224>)
 800e892:	bb1b      	cbnz	r3, 800e8dc <_vfiprintf_r+0x1d4>
 800e894:	9b03      	ldr	r3, [sp, #12]
 800e896:	3307      	adds	r3, #7
 800e898:	f023 0307 	bic.w	r3, r3, #7
 800e89c:	3308      	adds	r3, #8
 800e89e:	9303      	str	r3, [sp, #12]
 800e8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a2:	444b      	add	r3, r9
 800e8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e8a6:	e750      	b.n	800e74a <_vfiprintf_r+0x42>
 800e8a8:	fb05 3202 	mla	r2, r5, r2, r3
 800e8ac:	2001      	movs	r0, #1
 800e8ae:	4688      	mov	r8, r1
 800e8b0:	e78a      	b.n	800e7c8 <_vfiprintf_r+0xc0>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	f108 0801 	add.w	r8, r8, #1
 800e8b8:	9305      	str	r3, [sp, #20]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	250a      	movs	r5, #10
 800e8be:	4640      	mov	r0, r8
 800e8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8c4:	3a30      	subs	r2, #48	; 0x30
 800e8c6:	2a09      	cmp	r2, #9
 800e8c8:	d903      	bls.n	800e8d2 <_vfiprintf_r+0x1ca>
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d0c3      	beq.n	800e856 <_vfiprintf_r+0x14e>
 800e8ce:	9105      	str	r1, [sp, #20]
 800e8d0:	e7c1      	b.n	800e856 <_vfiprintf_r+0x14e>
 800e8d2:	fb05 2101 	mla	r1, r5, r1, r2
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	4680      	mov	r8, r0
 800e8da:	e7f0      	b.n	800e8be <_vfiprintf_r+0x1b6>
 800e8dc:	ab03      	add	r3, sp, #12
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	4622      	mov	r2, r4
 800e8e2:	4b13      	ldr	r3, [pc, #76]	; (800e930 <_vfiprintf_r+0x228>)
 800e8e4:	a904      	add	r1, sp, #16
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f7fd fd66 	bl	800c3b8 <_printf_float>
 800e8ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e8f0:	4681      	mov	r9, r0
 800e8f2:	d1d5      	bne.n	800e8a0 <_vfiprintf_r+0x198>
 800e8f4:	89a3      	ldrh	r3, [r4, #12]
 800e8f6:	065b      	lsls	r3, r3, #25
 800e8f8:	f53f af7e 	bmi.w	800e7f8 <_vfiprintf_r+0xf0>
 800e8fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8fe:	e77d      	b.n	800e7fc <_vfiprintf_r+0xf4>
 800e900:	ab03      	add	r3, sp, #12
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	4622      	mov	r2, r4
 800e906:	4b0a      	ldr	r3, [pc, #40]	; (800e930 <_vfiprintf_r+0x228>)
 800e908:	a904      	add	r1, sp, #16
 800e90a:	4630      	mov	r0, r6
 800e90c:	f7fe f80a 	bl	800c924 <_printf_i>
 800e910:	e7ec      	b.n	800e8ec <_vfiprintf_r+0x1e4>
 800e912:	bf00      	nop
 800e914:	0800f98c 	.word	0x0800f98c
 800e918:	0800facc 	.word	0x0800facc
 800e91c:	0800f9ac 	.word	0x0800f9ac
 800e920:	0800f96c 	.word	0x0800f96c
 800e924:	0800fad2 	.word	0x0800fad2
 800e928:	0800fad6 	.word	0x0800fad6
 800e92c:	0800c3b9 	.word	0x0800c3b9
 800e930:	0800e6e3 	.word	0x0800e6e3

0800e934 <_sbrk_r>:
 800e934:	b538      	push	{r3, r4, r5, lr}
 800e936:	4c06      	ldr	r4, [pc, #24]	; (800e950 <_sbrk_r+0x1c>)
 800e938:	2300      	movs	r3, #0
 800e93a:	4605      	mov	r5, r0
 800e93c:	4608      	mov	r0, r1
 800e93e:	6023      	str	r3, [r4, #0]
 800e940:	f7f7 faf8 	bl	8005f34 <_sbrk>
 800e944:	1c43      	adds	r3, r0, #1
 800e946:	d102      	bne.n	800e94e <_sbrk_r+0x1a>
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	b103      	cbz	r3, 800e94e <_sbrk_r+0x1a>
 800e94c:	602b      	str	r3, [r5, #0]
 800e94e:	bd38      	pop	{r3, r4, r5, pc}
 800e950:	20002e20 	.word	0x20002e20

0800e954 <__sread>:
 800e954:	b510      	push	{r4, lr}
 800e956:	460c      	mov	r4, r1
 800e958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e95c:	f000 f8a8 	bl	800eab0 <_read_r>
 800e960:	2800      	cmp	r0, #0
 800e962:	bfab      	itete	ge
 800e964:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e966:	89a3      	ldrhlt	r3, [r4, #12]
 800e968:	181b      	addge	r3, r3, r0
 800e96a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e96e:	bfac      	ite	ge
 800e970:	6563      	strge	r3, [r4, #84]	; 0x54
 800e972:	81a3      	strhlt	r3, [r4, #12]
 800e974:	bd10      	pop	{r4, pc}

0800e976 <__swrite>:
 800e976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e97a:	461f      	mov	r7, r3
 800e97c:	898b      	ldrh	r3, [r1, #12]
 800e97e:	05db      	lsls	r3, r3, #23
 800e980:	4605      	mov	r5, r0
 800e982:	460c      	mov	r4, r1
 800e984:	4616      	mov	r6, r2
 800e986:	d505      	bpl.n	800e994 <__swrite+0x1e>
 800e988:	2302      	movs	r3, #2
 800e98a:	2200      	movs	r2, #0
 800e98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e990:	f000 f868 	bl	800ea64 <_lseek_r>
 800e994:	89a3      	ldrh	r3, [r4, #12]
 800e996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e99a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e99e:	81a3      	strh	r3, [r4, #12]
 800e9a0:	4632      	mov	r2, r6
 800e9a2:	463b      	mov	r3, r7
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9aa:	f000 b817 	b.w	800e9dc <_write_r>

0800e9ae <__sseek>:
 800e9ae:	b510      	push	{r4, lr}
 800e9b0:	460c      	mov	r4, r1
 800e9b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9b6:	f000 f855 	bl	800ea64 <_lseek_r>
 800e9ba:	1c43      	adds	r3, r0, #1
 800e9bc:	89a3      	ldrh	r3, [r4, #12]
 800e9be:	bf15      	itete	ne
 800e9c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e9c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e9c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9ca:	81a3      	strheq	r3, [r4, #12]
 800e9cc:	bf18      	it	ne
 800e9ce:	81a3      	strhne	r3, [r4, #12]
 800e9d0:	bd10      	pop	{r4, pc}

0800e9d2 <__sclose>:
 800e9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9d6:	f000 b813 	b.w	800ea00 <_close_r>
	...

0800e9dc <_write_r>:
 800e9dc:	b538      	push	{r3, r4, r5, lr}
 800e9de:	4c07      	ldr	r4, [pc, #28]	; (800e9fc <_write_r+0x20>)
 800e9e0:	4605      	mov	r5, r0
 800e9e2:	4608      	mov	r0, r1
 800e9e4:	4611      	mov	r1, r2
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	6022      	str	r2, [r4, #0]
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	f7f3 ff18 	bl	8002820 <_write>
 800e9f0:	1c43      	adds	r3, r0, #1
 800e9f2:	d102      	bne.n	800e9fa <_write_r+0x1e>
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	b103      	cbz	r3, 800e9fa <_write_r+0x1e>
 800e9f8:	602b      	str	r3, [r5, #0]
 800e9fa:	bd38      	pop	{r3, r4, r5, pc}
 800e9fc:	20002e20 	.word	0x20002e20

0800ea00 <_close_r>:
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	4c06      	ldr	r4, [pc, #24]	; (800ea1c <_close_r+0x1c>)
 800ea04:	2300      	movs	r3, #0
 800ea06:	4605      	mov	r5, r0
 800ea08:	4608      	mov	r0, r1
 800ea0a:	6023      	str	r3, [r4, #0]
 800ea0c:	f7f3 ff32 	bl	8002874 <_close>
 800ea10:	1c43      	adds	r3, r0, #1
 800ea12:	d102      	bne.n	800ea1a <_close_r+0x1a>
 800ea14:	6823      	ldr	r3, [r4, #0]
 800ea16:	b103      	cbz	r3, 800ea1a <_close_r+0x1a>
 800ea18:	602b      	str	r3, [r5, #0]
 800ea1a:	bd38      	pop	{r3, r4, r5, pc}
 800ea1c:	20002e20 	.word	0x20002e20

0800ea20 <_fstat_r>:
 800ea20:	b538      	push	{r3, r4, r5, lr}
 800ea22:	4c07      	ldr	r4, [pc, #28]	; (800ea40 <_fstat_r+0x20>)
 800ea24:	2300      	movs	r3, #0
 800ea26:	4605      	mov	r5, r0
 800ea28:	4608      	mov	r0, r1
 800ea2a:	4611      	mov	r1, r2
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	f7f3 ff71 	bl	8002914 <_fstat>
 800ea32:	1c43      	adds	r3, r0, #1
 800ea34:	d102      	bne.n	800ea3c <_fstat_r+0x1c>
 800ea36:	6823      	ldr	r3, [r4, #0]
 800ea38:	b103      	cbz	r3, 800ea3c <_fstat_r+0x1c>
 800ea3a:	602b      	str	r3, [r5, #0]
 800ea3c:	bd38      	pop	{r3, r4, r5, pc}
 800ea3e:	bf00      	nop
 800ea40:	20002e20 	.word	0x20002e20

0800ea44 <_isatty_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4c06      	ldr	r4, [pc, #24]	; (800ea60 <_isatty_r+0x1c>)
 800ea48:	2300      	movs	r3, #0
 800ea4a:	4605      	mov	r5, r0
 800ea4c:	4608      	mov	r0, r1
 800ea4e:	6023      	str	r3, [r4, #0]
 800ea50:	f7f3 fed0 	bl	80027f4 <_isatty>
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	d102      	bne.n	800ea5e <_isatty_r+0x1a>
 800ea58:	6823      	ldr	r3, [r4, #0]
 800ea5a:	b103      	cbz	r3, 800ea5e <_isatty_r+0x1a>
 800ea5c:	602b      	str	r3, [r5, #0]
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}
 800ea60:	20002e20 	.word	0x20002e20

0800ea64 <_lseek_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4c07      	ldr	r4, [pc, #28]	; (800ea84 <_lseek_r+0x20>)
 800ea68:	4605      	mov	r5, r0
 800ea6a:	4608      	mov	r0, r1
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	2200      	movs	r2, #0
 800ea70:	6022      	str	r2, [r4, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	f7f3 ff15 	bl	80028a2 <_lseek>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_lseek_r+0x1e>
 800ea7c:	6823      	ldr	r3, [r4, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_lseek_r+0x1e>
 800ea80:	602b      	str	r3, [r5, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	20002e20 	.word	0x20002e20

0800ea88 <__ascii_mbtowc>:
 800ea88:	b082      	sub	sp, #8
 800ea8a:	b901      	cbnz	r1, 800ea8e <__ascii_mbtowc+0x6>
 800ea8c:	a901      	add	r1, sp, #4
 800ea8e:	b142      	cbz	r2, 800eaa2 <__ascii_mbtowc+0x1a>
 800ea90:	b14b      	cbz	r3, 800eaa6 <__ascii_mbtowc+0x1e>
 800ea92:	7813      	ldrb	r3, [r2, #0]
 800ea94:	600b      	str	r3, [r1, #0]
 800ea96:	7812      	ldrb	r2, [r2, #0]
 800ea98:	1c10      	adds	r0, r2, #0
 800ea9a:	bf18      	it	ne
 800ea9c:	2001      	movne	r0, #1
 800ea9e:	b002      	add	sp, #8
 800eaa0:	4770      	bx	lr
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	e7fb      	b.n	800ea9e <__ascii_mbtowc+0x16>
 800eaa6:	f06f 0001 	mvn.w	r0, #1
 800eaaa:	e7f8      	b.n	800ea9e <__ascii_mbtowc+0x16>

0800eaac <__malloc_lock>:
 800eaac:	4770      	bx	lr

0800eaae <__malloc_unlock>:
 800eaae:	4770      	bx	lr

0800eab0 <_read_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4c07      	ldr	r4, [pc, #28]	; (800ead0 <_read_r+0x20>)
 800eab4:	4605      	mov	r5, r0
 800eab6:	4608      	mov	r0, r1
 800eab8:	4611      	mov	r1, r2
 800eaba:	2200      	movs	r2, #0
 800eabc:	6022      	str	r2, [r4, #0]
 800eabe:	461a      	mov	r2, r3
 800eac0:	f7f3 ff00 	bl	80028c4 <_read>
 800eac4:	1c43      	adds	r3, r0, #1
 800eac6:	d102      	bne.n	800eace <_read_r+0x1e>
 800eac8:	6823      	ldr	r3, [r4, #0]
 800eaca:	b103      	cbz	r3, 800eace <_read_r+0x1e>
 800eacc:	602b      	str	r3, [r5, #0]
 800eace:	bd38      	pop	{r3, r4, r5, pc}
 800ead0:	20002e20 	.word	0x20002e20

0800ead4 <__ascii_wctomb>:
 800ead4:	b149      	cbz	r1, 800eaea <__ascii_wctomb+0x16>
 800ead6:	2aff      	cmp	r2, #255	; 0xff
 800ead8:	bf85      	ittet	hi
 800eada:	238a      	movhi	r3, #138	; 0x8a
 800eadc:	6003      	strhi	r3, [r0, #0]
 800eade:	700a      	strbls	r2, [r1, #0]
 800eae0:	f04f 30ff 	movhi.w	r0, #4294967295
 800eae4:	bf98      	it	ls
 800eae6:	2001      	movls	r0, #1
 800eae8:	4770      	bx	lr
 800eaea:	4608      	mov	r0, r1
 800eaec:	4770      	bx	lr
	...

0800eaf0 <sinf>:
 800eaf0:	ee10 3a10 	vmov	r3, s0
 800eaf4:	b507      	push	{r0, r1, r2, lr}
 800eaf6:	4a1d      	ldr	r2, [pc, #116]	; (800eb6c <sinf+0x7c>)
 800eaf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eafc:	4293      	cmp	r3, r2
 800eafe:	dc05      	bgt.n	800eb0c <sinf+0x1c>
 800eb00:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800eb70 <sinf+0x80>
 800eb04:	2000      	movs	r0, #0
 800eb06:	f000 fdd5 	bl	800f6b4 <__kernel_sinf>
 800eb0a:	e004      	b.n	800eb16 <sinf+0x26>
 800eb0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eb10:	db04      	blt.n	800eb1c <sinf+0x2c>
 800eb12:	ee30 0a40 	vsub.f32	s0, s0, s0
 800eb16:	b003      	add	sp, #12
 800eb18:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb1c:	4668      	mov	r0, sp
 800eb1e:	f000 f9b9 	bl	800ee94 <__ieee754_rem_pio2f>
 800eb22:	f000 0003 	and.w	r0, r0, #3
 800eb26:	2801      	cmp	r0, #1
 800eb28:	d008      	beq.n	800eb3c <sinf+0x4c>
 800eb2a:	2802      	cmp	r0, #2
 800eb2c:	d00d      	beq.n	800eb4a <sinf+0x5a>
 800eb2e:	b9b0      	cbnz	r0, 800eb5e <sinf+0x6e>
 800eb30:	2001      	movs	r0, #1
 800eb32:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb36:	ed9d 0a00 	vldr	s0, [sp]
 800eb3a:	e7e4      	b.n	800eb06 <sinf+0x16>
 800eb3c:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb40:	ed9d 0a00 	vldr	s0, [sp]
 800eb44:	f000 fad6 	bl	800f0f4 <__kernel_cosf>
 800eb48:	e7e5      	b.n	800eb16 <sinf+0x26>
 800eb4a:	2001      	movs	r0, #1
 800eb4c:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb50:	ed9d 0a00 	vldr	s0, [sp]
 800eb54:	f000 fdae 	bl	800f6b4 <__kernel_sinf>
 800eb58:	eeb1 0a40 	vneg.f32	s0, s0
 800eb5c:	e7db      	b.n	800eb16 <sinf+0x26>
 800eb5e:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb62:	ed9d 0a00 	vldr	s0, [sp]
 800eb66:	f000 fac5 	bl	800f0f4 <__kernel_cosf>
 800eb6a:	e7f5      	b.n	800eb58 <sinf+0x68>
 800eb6c:	3f490fd8 	.word	0x3f490fd8
 800eb70:	00000000 	.word	0x00000000

0800eb74 <asinf>:
 800eb74:	b510      	push	{r4, lr}
 800eb76:	ed2d 8b02 	vpush	{d8}
 800eb7a:	4c27      	ldr	r4, [pc, #156]	; (800ec18 <asinf+0xa4>)
 800eb7c:	b08a      	sub	sp, #40	; 0x28
 800eb7e:	eeb0 8a40 	vmov.f32	s16, s0
 800eb82:	f000 f89f 	bl	800ecc4 <__ieee754_asinf>
 800eb86:	f994 3000 	ldrsb.w	r3, [r4]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	eef0 8a40 	vmov.f32	s17, s0
 800eb90:	d03c      	beq.n	800ec0c <asinf+0x98>
 800eb92:	eeb4 8a48 	vcmp.f32	s16, s16
 800eb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9a:	d637      	bvs.n	800ec0c <asinf+0x98>
 800eb9c:	eeb0 0a48 	vmov.f32	s0, s16
 800eba0:	f000 fdda 	bl	800f758 <fabsf>
 800eba4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eba8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ebac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb0:	dd2c      	ble.n	800ec0c <asinf+0x98>
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	4b19      	ldr	r3, [pc, #100]	; (800ec1c <asinf+0xa8>)
 800ebb8:	9301      	str	r3, [sp, #4]
 800ebba:	ee18 0a10 	vmov	r0, s16
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	9308      	str	r3, [sp, #32]
 800ebc2:	f7f1 fcc1 	bl	8000548 <__aeabi_f2d>
 800ebc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ebca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebce:	4814      	ldr	r0, [pc, #80]	; (800ec20 <asinf+0xac>)
 800ebd0:	f000 fdba 	bl	800f748 <nan>
 800ebd4:	f994 3000 	ldrsb.w	r3, [r4]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ebde:	d104      	bne.n	800ebea <asinf+0x76>
 800ebe0:	f7fd fb00 	bl	800c1e4 <__errno>
 800ebe4:	2321      	movs	r3, #33	; 0x21
 800ebe6:	6003      	str	r3, [r0, #0]
 800ebe8:	e004      	b.n	800ebf4 <asinf+0x80>
 800ebea:	4668      	mov	r0, sp
 800ebec:	f000 fdaa 	bl	800f744 <matherr>
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d0f5      	beq.n	800ebe0 <asinf+0x6c>
 800ebf4:	9b08      	ldr	r3, [sp, #32]
 800ebf6:	b11b      	cbz	r3, 800ec00 <asinf+0x8c>
 800ebf8:	f7fd faf4 	bl	800c1e4 <__errno>
 800ebfc:	9b08      	ldr	r3, [sp, #32]
 800ebfe:	6003      	str	r3, [r0, #0]
 800ec00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec04:	f7f1 ffd0 	bl	8000ba8 <__aeabi_d2f>
 800ec08:	ee08 0a90 	vmov	s17, r0
 800ec0c:	eeb0 0a68 	vmov.f32	s0, s17
 800ec10:	b00a      	add	sp, #40	; 0x28
 800ec12:	ecbd 8b02 	vpop	{d8}
 800ec16:	bd10      	pop	{r4, pc}
 800ec18:	20001840 	.word	0x20001840
 800ec1c:	0800fbe8 	.word	0x0800fbe8
 800ec20:	0800fad1 	.word	0x0800fad1

0800ec24 <sqrtf>:
 800ec24:	b510      	push	{r4, lr}
 800ec26:	ed2d 8b02 	vpush	{d8}
 800ec2a:	b08a      	sub	sp, #40	; 0x28
 800ec2c:	eeb0 8a40 	vmov.f32	s16, s0
 800ec30:	f000 fa5c 	bl	800f0ec <__ieee754_sqrtf>
 800ec34:	4b21      	ldr	r3, [pc, #132]	; (800ecbc <sqrtf+0x98>)
 800ec36:	f993 4000 	ldrsb.w	r4, [r3]
 800ec3a:	1c63      	adds	r3, r4, #1
 800ec3c:	d02c      	beq.n	800ec98 <sqrtf+0x74>
 800ec3e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ec42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec46:	d627      	bvs.n	800ec98 <sqrtf+0x74>
 800ec48:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ec4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec50:	d522      	bpl.n	800ec98 <sqrtf+0x74>
 800ec52:	2301      	movs	r3, #1
 800ec54:	9300      	str	r3, [sp, #0]
 800ec56:	4b1a      	ldr	r3, [pc, #104]	; (800ecc0 <sqrtf+0x9c>)
 800ec58:	9301      	str	r3, [sp, #4]
 800ec5a:	ee18 0a10 	vmov	r0, s16
 800ec5e:	2300      	movs	r3, #0
 800ec60:	9308      	str	r3, [sp, #32]
 800ec62:	f7f1 fc71 	bl	8000548 <__aeabi_f2d>
 800ec66:	2200      	movs	r2, #0
 800ec68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec70:	2300      	movs	r3, #0
 800ec72:	b9ac      	cbnz	r4, 800eca0 <sqrtf+0x7c>
 800ec74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ec78:	4668      	mov	r0, sp
 800ec7a:	f000 fd63 	bl	800f744 <matherr>
 800ec7e:	b1b8      	cbz	r0, 800ecb0 <sqrtf+0x8c>
 800ec80:	9b08      	ldr	r3, [sp, #32]
 800ec82:	b11b      	cbz	r3, 800ec8c <sqrtf+0x68>
 800ec84:	f7fd faae 	bl	800c1e4 <__errno>
 800ec88:	9b08      	ldr	r3, [sp, #32]
 800ec8a:	6003      	str	r3, [r0, #0]
 800ec8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec90:	f7f1 ff8a 	bl	8000ba8 <__aeabi_d2f>
 800ec94:	ee00 0a10 	vmov	s0, r0
 800ec98:	b00a      	add	sp, #40	; 0x28
 800ec9a:	ecbd 8b02 	vpop	{d8}
 800ec9e:	bd10      	pop	{r4, pc}
 800eca0:	4610      	mov	r0, r2
 800eca2:	4619      	mov	r1, r3
 800eca4:	f7f1 fdd2 	bl	800084c <__aeabi_ddiv>
 800eca8:	2c02      	cmp	r4, #2
 800ecaa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ecae:	d1e3      	bne.n	800ec78 <sqrtf+0x54>
 800ecb0:	f7fd fa98 	bl	800c1e4 <__errno>
 800ecb4:	2321      	movs	r3, #33	; 0x21
 800ecb6:	6003      	str	r3, [r0, #0]
 800ecb8:	e7e2      	b.n	800ec80 <sqrtf+0x5c>
 800ecba:	bf00      	nop
 800ecbc:	20001840 	.word	0x20001840
 800ecc0:	0800fbee 	.word	0x0800fbee

0800ecc4 <__ieee754_asinf>:
 800ecc4:	b538      	push	{r3, r4, r5, lr}
 800ecc6:	ee10 5a10 	vmov	r5, s0
 800ecca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ecce:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ecd2:	ed2d 8b04 	vpush	{d8-d9}
 800ecd6:	d10c      	bne.n	800ecf2 <__ieee754_asinf+0x2e>
 800ecd8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800ee54 <__ieee754_asinf+0x190>
 800ecdc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800ee58 <__ieee754_asinf+0x194>
 800ece0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ece4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ece8:	eeb0 0a67 	vmov.f32	s0, s15
 800ecec:	ecbd 8b04 	vpop	{d8-d9}
 800ecf0:	bd38      	pop	{r3, r4, r5, pc}
 800ecf2:	dd04      	ble.n	800ecfe <__ieee754_asinf+0x3a>
 800ecf4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ecf8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ecfc:	e7f6      	b.n	800ecec <__ieee754_asinf+0x28>
 800ecfe:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ed02:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ed06:	da0b      	bge.n	800ed20 <__ieee754_asinf+0x5c>
 800ed08:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ed0c:	da52      	bge.n	800edb4 <__ieee754_asinf+0xf0>
 800ed0e:	eddf 7a53 	vldr	s15, [pc, #332]	; 800ee5c <__ieee754_asinf+0x198>
 800ed12:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ed16:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ed1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1e:	dce5      	bgt.n	800ecec <__ieee754_asinf+0x28>
 800ed20:	f000 fd1a 	bl	800f758 <fabsf>
 800ed24:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800ed28:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800ed2c:	ee20 8a08 	vmul.f32	s16, s0, s16
 800ed30:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800ee60 <__ieee754_asinf+0x19c>
 800ed34:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ee64 <__ieee754_asinf+0x1a0>
 800ed38:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800ee68 <__ieee754_asinf+0x1a4>
 800ed3c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800ed40:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ee6c <__ieee754_asinf+0x1a8>
 800ed44:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ed48:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ee70 <__ieee754_asinf+0x1ac>
 800ed4c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ed50:	eddf 7a48 	vldr	s15, [pc, #288]	; 800ee74 <__ieee754_asinf+0x1b0>
 800ed54:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ed58:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ee78 <__ieee754_asinf+0x1b4>
 800ed5c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800ed60:	eddf 7a46 	vldr	s15, [pc, #280]	; 800ee7c <__ieee754_asinf+0x1b8>
 800ed64:	eee8 7a07 	vfma.f32	s15, s16, s14
 800ed68:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800ee80 <__ieee754_asinf+0x1bc>
 800ed6c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ed70:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ee84 <__ieee754_asinf+0x1c0>
 800ed74:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ed78:	eeb0 0a48 	vmov.f32	s0, s16
 800ed7c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800ed80:	f000 f9b4 	bl	800f0ec <__ieee754_sqrtf>
 800ed84:	4b40      	ldr	r3, [pc, #256]	; (800ee88 <__ieee754_asinf+0x1c4>)
 800ed86:	ee29 9a08 	vmul.f32	s18, s18, s16
 800ed8a:	429c      	cmp	r4, r3
 800ed8c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800ed90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ed94:	dd3d      	ble.n	800ee12 <__ieee754_asinf+0x14e>
 800ed96:	eea0 0a06 	vfma.f32	s0, s0, s12
 800ed9a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800ee8c <__ieee754_asinf+0x1c8>
 800ed9e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800eda2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800ee58 <__ieee754_asinf+0x194>
 800eda6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800edaa:	2d00      	cmp	r5, #0
 800edac:	bfd8      	it	le
 800edae:	eeb1 0a40 	vnegle.f32	s0, s0
 800edb2:	e79b      	b.n	800ecec <__ieee754_asinf+0x28>
 800edb4:	ee60 7a00 	vmul.f32	s15, s0, s0
 800edb8:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ee60 <__ieee754_asinf+0x19c>
 800edbc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ee64 <__ieee754_asinf+0x1a0>
 800edc0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ee78 <__ieee754_asinf+0x1b4>
 800edc4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800edc8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ee6c <__ieee754_asinf+0x1a8>
 800edcc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800edd0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800ee70 <__ieee754_asinf+0x1ac>
 800edd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800edd8:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ee74 <__ieee754_asinf+0x1b0>
 800eddc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ede0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800ee68 <__ieee754_asinf+0x1a4>
 800ede4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ede8:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ee7c <__ieee754_asinf+0x1b8>
 800edec:	eee7 6a86 	vfma.f32	s13, s15, s12
 800edf0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800ee80 <__ieee754_asinf+0x1bc>
 800edf4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800edf8:	eddf 6a22 	vldr	s13, [pc, #136]	; 800ee84 <__ieee754_asinf+0x1c0>
 800edfc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ee00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee04:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ee08:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ee0c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ee10:	e76c      	b.n	800ecec <__ieee754_asinf+0x28>
 800ee12:	ee10 3a10 	vmov	r3, s0
 800ee16:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ee1a:	f023 030f 	bic.w	r3, r3, #15
 800ee1e:	ee07 3a90 	vmov	s15, r3
 800ee22:	eef1 6a67 	vneg.f32	s13, s15
 800ee26:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800ee2a:	ee70 5a00 	vadd.f32	s11, s0, s0
 800ee2e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ee32:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ee54 <__ieee754_asinf+0x190>
 800ee36:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800ee3a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ee90 <__ieee754_asinf+0x1cc>
 800ee3e:	eee5 7a47 	vfms.f32	s15, s10, s14
 800ee42:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800ee46:	eeb0 6a40 	vmov.f32	s12, s0
 800ee4a:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ee4e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ee52:	e7a8      	b.n	800eda6 <__ieee754_asinf+0xe2>
 800ee54:	b33bbd2e 	.word	0xb33bbd2e
 800ee58:	3fc90fdb 	.word	0x3fc90fdb
 800ee5c:	7149f2ca 	.word	0x7149f2ca
 800ee60:	3811ef08 	.word	0x3811ef08
 800ee64:	3a4f7f04 	.word	0x3a4f7f04
 800ee68:	3e2aaaab 	.word	0x3e2aaaab
 800ee6c:	bd241146 	.word	0xbd241146
 800ee70:	3e4e0aa8 	.word	0x3e4e0aa8
 800ee74:	bea6b090 	.word	0xbea6b090
 800ee78:	3d9dc62e 	.word	0x3d9dc62e
 800ee7c:	bf303361 	.word	0xbf303361
 800ee80:	4001572d 	.word	0x4001572d
 800ee84:	c019d139 	.word	0xc019d139
 800ee88:	3f799999 	.word	0x3f799999
 800ee8c:	333bbd2e 	.word	0x333bbd2e
 800ee90:	3f490fdb 	.word	0x3f490fdb

0800ee94 <__ieee754_rem_pio2f>:
 800ee94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee96:	ee10 6a10 	vmov	r6, s0
 800ee9a:	4b86      	ldr	r3, [pc, #536]	; (800f0b4 <__ieee754_rem_pio2f+0x220>)
 800ee9c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800eea0:	429c      	cmp	r4, r3
 800eea2:	b087      	sub	sp, #28
 800eea4:	4605      	mov	r5, r0
 800eea6:	dc05      	bgt.n	800eeb4 <__ieee754_rem_pio2f+0x20>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	ed85 0a00 	vstr	s0, [r5]
 800eeae:	6043      	str	r3, [r0, #4]
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	e020      	b.n	800eef6 <__ieee754_rem_pio2f+0x62>
 800eeb4:	4b80      	ldr	r3, [pc, #512]	; (800f0b8 <__ieee754_rem_pio2f+0x224>)
 800eeb6:	429c      	cmp	r4, r3
 800eeb8:	dc38      	bgt.n	800ef2c <__ieee754_rem_pio2f+0x98>
 800eeba:	2e00      	cmp	r6, #0
 800eebc:	f024 040f 	bic.w	r4, r4, #15
 800eec0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800f0bc <__ieee754_rem_pio2f+0x228>
 800eec4:	4b7e      	ldr	r3, [pc, #504]	; (800f0c0 <__ieee754_rem_pio2f+0x22c>)
 800eec6:	dd18      	ble.n	800eefa <__ieee754_rem_pio2f+0x66>
 800eec8:	429c      	cmp	r4, r3
 800eeca:	ee70 7a47 	vsub.f32	s15, s0, s14
 800eece:	bf09      	itett	eq
 800eed0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800f0c4 <__ieee754_rem_pio2f+0x230>
 800eed4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800f0c8 <__ieee754_rem_pio2f+0x234>
 800eed8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800eedc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800f0cc <__ieee754_rem_pio2f+0x238>
 800eee0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800eee4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eee8:	edc0 6a00 	vstr	s13, [r0]
 800eeec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eef0:	edc0 7a01 	vstr	s15, [r0, #4]
 800eef4:	2001      	movs	r0, #1
 800eef6:	b007      	add	sp, #28
 800eef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eefa:	429c      	cmp	r4, r3
 800eefc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ef00:	bf09      	itett	eq
 800ef02:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800f0c4 <__ieee754_rem_pio2f+0x230>
 800ef06:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800f0c8 <__ieee754_rem_pio2f+0x234>
 800ef0a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ef0e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800f0cc <__ieee754_rem_pio2f+0x238>
 800ef12:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ef16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ef1a:	edc0 6a00 	vstr	s13, [r0]
 800ef1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ef22:	edc0 7a01 	vstr	s15, [r0, #4]
 800ef26:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2a:	e7e4      	b.n	800eef6 <__ieee754_rem_pio2f+0x62>
 800ef2c:	4b68      	ldr	r3, [pc, #416]	; (800f0d0 <__ieee754_rem_pio2f+0x23c>)
 800ef2e:	429c      	cmp	r4, r3
 800ef30:	dc71      	bgt.n	800f016 <__ieee754_rem_pio2f+0x182>
 800ef32:	f000 fc11 	bl	800f758 <fabsf>
 800ef36:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f0d4 <__ieee754_rem_pio2f+0x240>
 800ef3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ef3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ef42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef46:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800ef4a:	ee17 0a90 	vmov	r0, s15
 800ef4e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f0bc <__ieee754_rem_pio2f+0x228>
 800ef52:	eeb1 7a46 	vneg.f32	s14, s12
 800ef56:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ef5a:	281f      	cmp	r0, #31
 800ef5c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800f0c8 <__ieee754_rem_pio2f+0x234>
 800ef60:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ef64:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ef68:	ee16 3a90 	vmov	r3, s13
 800ef6c:	dc1c      	bgt.n	800efa8 <__ieee754_rem_pio2f+0x114>
 800ef6e:	1e47      	subs	r7, r0, #1
 800ef70:	4959      	ldr	r1, [pc, #356]	; (800f0d8 <__ieee754_rem_pio2f+0x244>)
 800ef72:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ef76:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ef7a:	428a      	cmp	r2, r1
 800ef7c:	d014      	beq.n	800efa8 <__ieee754_rem_pio2f+0x114>
 800ef7e:	602b      	str	r3, [r5, #0]
 800ef80:	ed95 7a00 	vldr	s14, [r5]
 800ef84:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ef88:	2e00      	cmp	r6, #0
 800ef8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ef8e:	ed85 0a01 	vstr	s0, [r5, #4]
 800ef92:	dab0      	bge.n	800eef6 <__ieee754_rem_pio2f+0x62>
 800ef94:	eeb1 7a47 	vneg.f32	s14, s14
 800ef98:	eeb1 0a40 	vneg.f32	s0, s0
 800ef9c:	ed85 7a00 	vstr	s14, [r5]
 800efa0:	ed85 0a01 	vstr	s0, [r5, #4]
 800efa4:	4240      	negs	r0, r0
 800efa6:	e7a6      	b.n	800eef6 <__ieee754_rem_pio2f+0x62>
 800efa8:	15e4      	asrs	r4, r4, #23
 800efaa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800efae:	1aa2      	subs	r2, r4, r2
 800efb0:	2a08      	cmp	r2, #8
 800efb2:	dde4      	ble.n	800ef7e <__ieee754_rem_pio2f+0xea>
 800efb4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f0c4 <__ieee754_rem_pio2f+0x230>
 800efb8:	eef0 6a40 	vmov.f32	s13, s0
 800efbc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800efc0:	ee30 0a66 	vsub.f32	s0, s0, s13
 800efc4:	eea7 0a27 	vfma.f32	s0, s14, s15
 800efc8:	eddf 7a40 	vldr	s15, [pc, #256]	; 800f0cc <__ieee754_rem_pio2f+0x238>
 800efcc:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800efd0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800efd4:	eef0 7a40 	vmov.f32	s15, s0
 800efd8:	ee15 3a90 	vmov	r3, s11
 800efdc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800efe0:	1aa4      	subs	r4, r4, r2
 800efe2:	2c19      	cmp	r4, #25
 800efe4:	dc04      	bgt.n	800eff0 <__ieee754_rem_pio2f+0x15c>
 800efe6:	edc5 5a00 	vstr	s11, [r5]
 800efea:	eeb0 0a66 	vmov.f32	s0, s13
 800efee:	e7c7      	b.n	800ef80 <__ieee754_rem_pio2f+0xec>
 800eff0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800f0dc <__ieee754_rem_pio2f+0x248>
 800eff4:	eeb0 0a66 	vmov.f32	s0, s13
 800eff8:	eea7 0a25 	vfma.f32	s0, s14, s11
 800effc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f000:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f004:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f0e0 <__ieee754_rem_pio2f+0x24c>
 800f008:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800f00c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f010:	ed85 7a00 	vstr	s14, [r5]
 800f014:	e7b4      	b.n	800ef80 <__ieee754_rem_pio2f+0xec>
 800f016:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f01a:	db06      	blt.n	800f02a <__ieee754_rem_pio2f+0x196>
 800f01c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f020:	edc0 7a01 	vstr	s15, [r0, #4]
 800f024:	edc0 7a00 	vstr	s15, [r0]
 800f028:	e742      	b.n	800eeb0 <__ieee754_rem_pio2f+0x1c>
 800f02a:	15e2      	asrs	r2, r4, #23
 800f02c:	3a86      	subs	r2, #134	; 0x86
 800f02e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800f032:	ee07 3a90 	vmov	s15, r3
 800f036:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f03a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800f0e4 <__ieee754_rem_pio2f+0x250>
 800f03e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f046:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f04a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f04e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f052:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f05a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f05e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f062:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f06a:	edcd 7a05 	vstr	s15, [sp, #20]
 800f06e:	d11e      	bne.n	800f0ae <__ieee754_rem_pio2f+0x21a>
 800f070:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f078:	bf0c      	ite	eq
 800f07a:	2301      	moveq	r3, #1
 800f07c:	2302      	movne	r3, #2
 800f07e:	491a      	ldr	r1, [pc, #104]	; (800f0e8 <__ieee754_rem_pio2f+0x254>)
 800f080:	9101      	str	r1, [sp, #4]
 800f082:	2102      	movs	r1, #2
 800f084:	9100      	str	r1, [sp, #0]
 800f086:	a803      	add	r0, sp, #12
 800f088:	4629      	mov	r1, r5
 800f08a:	f000 f891 	bl	800f1b0 <__kernel_rem_pio2f>
 800f08e:	2e00      	cmp	r6, #0
 800f090:	f6bf af31 	bge.w	800eef6 <__ieee754_rem_pio2f+0x62>
 800f094:	edd5 7a00 	vldr	s15, [r5]
 800f098:	eef1 7a67 	vneg.f32	s15, s15
 800f09c:	edc5 7a00 	vstr	s15, [r5]
 800f0a0:	edd5 7a01 	vldr	s15, [r5, #4]
 800f0a4:	eef1 7a67 	vneg.f32	s15, s15
 800f0a8:	edc5 7a01 	vstr	s15, [r5, #4]
 800f0ac:	e77a      	b.n	800efa4 <__ieee754_rem_pio2f+0x110>
 800f0ae:	2303      	movs	r3, #3
 800f0b0:	e7e5      	b.n	800f07e <__ieee754_rem_pio2f+0x1ea>
 800f0b2:	bf00      	nop
 800f0b4:	3f490fd8 	.word	0x3f490fd8
 800f0b8:	4016cbe3 	.word	0x4016cbe3
 800f0bc:	3fc90f80 	.word	0x3fc90f80
 800f0c0:	3fc90fd0 	.word	0x3fc90fd0
 800f0c4:	37354400 	.word	0x37354400
 800f0c8:	37354443 	.word	0x37354443
 800f0cc:	2e85a308 	.word	0x2e85a308
 800f0d0:	43490f80 	.word	0x43490f80
 800f0d4:	3f22f984 	.word	0x3f22f984
 800f0d8:	0800fbf4 	.word	0x0800fbf4
 800f0dc:	2e85a300 	.word	0x2e85a300
 800f0e0:	248d3132 	.word	0x248d3132
 800f0e4:	43800000 	.word	0x43800000
 800f0e8:	0800fc74 	.word	0x0800fc74

0800f0ec <__ieee754_sqrtf>:
 800f0ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f0f0:	4770      	bx	lr
	...

0800f0f4 <__kernel_cosf>:
 800f0f4:	ee10 3a10 	vmov	r3, s0
 800f0f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f0fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f104:	da05      	bge.n	800f112 <__kernel_cosf+0x1e>
 800f106:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f10a:	ee17 2a90 	vmov	r2, s15
 800f10e:	2a00      	cmp	r2, #0
 800f110:	d03b      	beq.n	800f18a <__kernel_cosf+0x96>
 800f112:	ee20 6a00 	vmul.f32	s12, s0, s0
 800f116:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f11a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f190 <__kernel_cosf+0x9c>
 800f11e:	4a1d      	ldr	r2, [pc, #116]	; (800f194 <__kernel_cosf+0xa0>)
 800f120:	ee66 7a07 	vmul.f32	s15, s12, s14
 800f124:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800f198 <__kernel_cosf+0xa4>
 800f128:	eea6 7a25 	vfma.f32	s14, s12, s11
 800f12c:	4293      	cmp	r3, r2
 800f12e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800f19c <__kernel_cosf+0xa8>
 800f132:	eee7 5a06 	vfma.f32	s11, s14, s12
 800f136:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f1a0 <__kernel_cosf+0xac>
 800f13a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f13e:	eddf 5a19 	vldr	s11, [pc, #100]	; 800f1a4 <__kernel_cosf+0xb0>
 800f142:	eee7 5a06 	vfma.f32	s11, s14, s12
 800f146:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800f1a8 <__kernel_cosf+0xb4>
 800f14a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f14e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800f152:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f156:	eee6 0a07 	vfma.f32	s1, s12, s14
 800f15a:	dc04      	bgt.n	800f166 <__kernel_cosf+0x72>
 800f15c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800f160:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800f164:	4770      	bx	lr
 800f166:	4a11      	ldr	r2, [pc, #68]	; (800f1ac <__kernel_cosf+0xb8>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	bfda      	itte	le
 800f16c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800f170:	ee07 3a10 	vmovle	s14, r3
 800f174:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800f178:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f17c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800f180:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f184:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f188:	4770      	bx	lr
 800f18a:	eeb0 0a66 	vmov.f32	s0, s13
 800f18e:	4770      	bx	lr
 800f190:	ad47d74e 	.word	0xad47d74e
 800f194:	3e999999 	.word	0x3e999999
 800f198:	310f74f6 	.word	0x310f74f6
 800f19c:	b493f27c 	.word	0xb493f27c
 800f1a0:	37d00d01 	.word	0x37d00d01
 800f1a4:	bab60b61 	.word	0xbab60b61
 800f1a8:	3d2aaaab 	.word	0x3d2aaaab
 800f1ac:	3f480000 	.word	0x3f480000

0800f1b0 <__kernel_rem_pio2f>:
 800f1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b4:	ed2d 8b04 	vpush	{d8-d9}
 800f1b8:	b0d7      	sub	sp, #348	; 0x15c
 800f1ba:	469b      	mov	fp, r3
 800f1bc:	460e      	mov	r6, r1
 800f1be:	4bbe      	ldr	r3, [pc, #760]	; (800f4b8 <__kernel_rem_pio2f+0x308>)
 800f1c0:	9964      	ldr	r1, [sp, #400]	; 0x190
 800f1c2:	9002      	str	r0, [sp, #8]
 800f1c4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800f1c8:	9865      	ldr	r0, [sp, #404]	; 0x194
 800f1ca:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800f4c8 <__kernel_rem_pio2f+0x318>
 800f1ce:	1ed1      	subs	r1, r2, #3
 800f1d0:	2308      	movs	r3, #8
 800f1d2:	fb91 f1f3 	sdiv	r1, r1, r3
 800f1d6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800f1da:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f1de:	1c4c      	adds	r4, r1, #1
 800f1e0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800f1e4:	eba1 050a 	sub.w	r5, r1, sl
 800f1e8:	aa1a      	add	r2, sp, #104	; 0x68
 800f1ea:	eb09 070a 	add.w	r7, r9, sl
 800f1ee:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800f1f2:	4696      	mov	lr, r2
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	42bb      	cmp	r3, r7
 800f1f8:	dd0f      	ble.n	800f21a <__kernel_rem_pio2f+0x6a>
 800f1fa:	af42      	add	r7, sp, #264	; 0x108
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	454a      	cmp	r2, r9
 800f200:	dc27      	bgt.n	800f252 <__kernel_rem_pio2f+0xa2>
 800f202:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800f206:	eb0b 0302 	add.w	r3, fp, r2
 800f20a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800f20e:	9d02      	ldr	r5, [sp, #8]
 800f210:	eddf 7aad 	vldr	s15, [pc, #692]	; 800f4c8 <__kernel_rem_pio2f+0x318>
 800f214:	f04f 0c00 	mov.w	ip, #0
 800f218:	e015      	b.n	800f246 <__kernel_rem_pio2f+0x96>
 800f21a:	42dd      	cmn	r5, r3
 800f21c:	bf5d      	ittte	pl
 800f21e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800f222:	ee07 2a90 	vmovpl	s15, r2
 800f226:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f22a:	eef0 7a47 	vmovmi.f32	s15, s14
 800f22e:	ecee 7a01 	vstmia	lr!, {s15}
 800f232:	3301      	adds	r3, #1
 800f234:	e7df      	b.n	800f1f6 <__kernel_rem_pio2f+0x46>
 800f236:	ecf5 6a01 	vldmia	r5!, {s13}
 800f23a:	ed33 7a01 	vldmdb	r3!, {s14}
 800f23e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f242:	f10c 0c01 	add.w	ip, ip, #1
 800f246:	45d4      	cmp	ip, sl
 800f248:	ddf5      	ble.n	800f236 <__kernel_rem_pio2f+0x86>
 800f24a:	ece7 7a01 	vstmia	r7!, {s15}
 800f24e:	3201      	adds	r2, #1
 800f250:	e7d5      	b.n	800f1fe <__kernel_rem_pio2f+0x4e>
 800f252:	ab06      	add	r3, sp, #24
 800f254:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f258:	9304      	str	r3, [sp, #16]
 800f25a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800f4c4 <__kernel_rem_pio2f+0x314>
 800f25e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800f4c0 <__kernel_rem_pio2f+0x310>
 800f262:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800f266:	9303      	str	r3, [sp, #12]
 800f268:	464d      	mov	r5, r9
 800f26a:	ab56      	add	r3, sp, #344	; 0x158
 800f26c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800f270:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800f274:	3f01      	subs	r7, #1
 800f276:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800f27a:	00bf      	lsls	r7, r7, #2
 800f27c:	ab56      	add	r3, sp, #344	; 0x158
 800f27e:	19da      	adds	r2, r3, r7
 800f280:	3a4c      	subs	r2, #76	; 0x4c
 800f282:	2300      	movs	r3, #0
 800f284:	1ae9      	subs	r1, r5, r3
 800f286:	2900      	cmp	r1, #0
 800f288:	dc4c      	bgt.n	800f324 <__kernel_rem_pio2f+0x174>
 800f28a:	4620      	mov	r0, r4
 800f28c:	f000 faae 	bl	800f7ec <scalbnf>
 800f290:	eeb0 8a40 	vmov.f32	s16, s0
 800f294:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800f298:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f29c:	f000 fa64 	bl	800f768 <floorf>
 800f2a0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800f2a4:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f2a8:	2c00      	cmp	r4, #0
 800f2aa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f2ae:	edcd 7a01 	vstr	s15, [sp, #4]
 800f2b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f2b6:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f2ba:	dd48      	ble.n	800f34e <__kernel_rem_pio2f+0x19e>
 800f2bc:	1e69      	subs	r1, r5, #1
 800f2be:	ab06      	add	r3, sp, #24
 800f2c0:	f1c4 0008 	rsb	r0, r4, #8
 800f2c4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800f2c8:	9a01      	ldr	r2, [sp, #4]
 800f2ca:	fa4c f300 	asr.w	r3, ip, r0
 800f2ce:	441a      	add	r2, r3
 800f2d0:	4083      	lsls	r3, r0
 800f2d2:	9201      	str	r2, [sp, #4]
 800f2d4:	ebac 0203 	sub.w	r2, ip, r3
 800f2d8:	ab06      	add	r3, sp, #24
 800f2da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f2de:	f1c4 0307 	rsb	r3, r4, #7
 800f2e2:	fa42 f803 	asr.w	r8, r2, r3
 800f2e6:	f1b8 0f00 	cmp.w	r8, #0
 800f2ea:	dd41      	ble.n	800f370 <__kernel_rem_pio2f+0x1c0>
 800f2ec:	9b01      	ldr	r3, [sp, #4]
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	9301      	str	r3, [sp, #4]
 800f2f4:	4601      	mov	r1, r0
 800f2f6:	4285      	cmp	r5, r0
 800f2f8:	dc6d      	bgt.n	800f3d6 <__kernel_rem_pio2f+0x226>
 800f2fa:	2c00      	cmp	r4, #0
 800f2fc:	dd04      	ble.n	800f308 <__kernel_rem_pio2f+0x158>
 800f2fe:	2c01      	cmp	r4, #1
 800f300:	d07e      	beq.n	800f400 <__kernel_rem_pio2f+0x250>
 800f302:	2c02      	cmp	r4, #2
 800f304:	f000 8086 	beq.w	800f414 <__kernel_rem_pio2f+0x264>
 800f308:	f1b8 0f02 	cmp.w	r8, #2
 800f30c:	d130      	bne.n	800f370 <__kernel_rem_pio2f+0x1c0>
 800f30e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f312:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f316:	b359      	cbz	r1, 800f370 <__kernel_rem_pio2f+0x1c0>
 800f318:	4620      	mov	r0, r4
 800f31a:	f000 fa67 	bl	800f7ec <scalbnf>
 800f31e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f322:	e025      	b.n	800f370 <__kernel_rem_pio2f+0x1c0>
 800f324:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f328:	a806      	add	r0, sp, #24
 800f32a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f32e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f332:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f336:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f33a:	ee10 1a10 	vmov	r1, s0
 800f33e:	ed32 0a01 	vldmdb	r2!, {s0}
 800f342:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800f346:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f34a:	3301      	adds	r3, #1
 800f34c:	e79a      	b.n	800f284 <__kernel_rem_pio2f+0xd4>
 800f34e:	d106      	bne.n	800f35e <__kernel_rem_pio2f+0x1ae>
 800f350:	1e6b      	subs	r3, r5, #1
 800f352:	aa06      	add	r2, sp, #24
 800f354:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f358:	ea4f 2822 	mov.w	r8, r2, asr #8
 800f35c:	e7c3      	b.n	800f2e6 <__kernel_rem_pio2f+0x136>
 800f35e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f362:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f36a:	da31      	bge.n	800f3d0 <__kernel_rem_pio2f+0x220>
 800f36c:	f04f 0800 	mov.w	r8, #0
 800f370:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f378:	f040 80a8 	bne.w	800f4cc <__kernel_rem_pio2f+0x31c>
 800f37c:	1e6b      	subs	r3, r5, #1
 800f37e:	4618      	mov	r0, r3
 800f380:	2200      	movs	r2, #0
 800f382:	4548      	cmp	r0, r9
 800f384:	da4d      	bge.n	800f422 <__kernel_rem_pio2f+0x272>
 800f386:	2a00      	cmp	r2, #0
 800f388:	f000 8087 	beq.w	800f49a <__kernel_rem_pio2f+0x2ea>
 800f38c:	aa06      	add	r2, sp, #24
 800f38e:	3c08      	subs	r4, #8
 800f390:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f394:	2900      	cmp	r1, #0
 800f396:	f000 808d 	beq.w	800f4b4 <__kernel_rem_pio2f+0x304>
 800f39a:	4620      	mov	r0, r4
 800f39c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f3a0:	9302      	str	r3, [sp, #8]
 800f3a2:	f000 fa23 	bl	800f7ec <scalbnf>
 800f3a6:	9b02      	ldr	r3, [sp, #8]
 800f3a8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f4c4 <__kernel_rem_pio2f+0x314>
 800f3ac:	0099      	lsls	r1, r3, #2
 800f3ae:	aa42      	add	r2, sp, #264	; 0x108
 800f3b0:	1850      	adds	r0, r2, r1
 800f3b2:	1d05      	adds	r5, r0, #4
 800f3b4:	461c      	mov	r4, r3
 800f3b6:	2c00      	cmp	r4, #0
 800f3b8:	f280 80b8 	bge.w	800f52c <__kernel_rem_pio2f+0x37c>
 800f3bc:	2500      	movs	r5, #0
 800f3be:	1b5c      	subs	r4, r3, r5
 800f3c0:	2c00      	cmp	r4, #0
 800f3c2:	f2c0 80d8 	blt.w	800f576 <__kernel_rem_pio2f+0x3c6>
 800f3c6:	4f3d      	ldr	r7, [pc, #244]	; (800f4bc <__kernel_rem_pio2f+0x30c>)
 800f3c8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800f4c8 <__kernel_rem_pio2f+0x318>
 800f3cc:	2400      	movs	r4, #0
 800f3ce:	e0c6      	b.n	800f55e <__kernel_rem_pio2f+0x3ae>
 800f3d0:	f04f 0802 	mov.w	r8, #2
 800f3d4:	e78a      	b.n	800f2ec <__kernel_rem_pio2f+0x13c>
 800f3d6:	ab06      	add	r3, sp, #24
 800f3d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f3dc:	b949      	cbnz	r1, 800f3f2 <__kernel_rem_pio2f+0x242>
 800f3de:	b12b      	cbz	r3, 800f3ec <__kernel_rem_pio2f+0x23c>
 800f3e0:	aa06      	add	r2, sp, #24
 800f3e2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f3e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	3001      	adds	r0, #1
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	e781      	b.n	800f2f6 <__kernel_rem_pio2f+0x146>
 800f3f2:	aa06      	add	r2, sp, #24
 800f3f4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f3f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	e7f5      	b.n	800f3ec <__kernel_rem_pio2f+0x23c>
 800f400:	1e68      	subs	r0, r5, #1
 800f402:	ab06      	add	r3, sp, #24
 800f404:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f40c:	aa06      	add	r2, sp, #24
 800f40e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f412:	e779      	b.n	800f308 <__kernel_rem_pio2f+0x158>
 800f414:	1e68      	subs	r0, r5, #1
 800f416:	ab06      	add	r3, sp, #24
 800f418:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f41c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f420:	e7f4      	b.n	800f40c <__kernel_rem_pio2f+0x25c>
 800f422:	a906      	add	r1, sp, #24
 800f424:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f428:	3801      	subs	r0, #1
 800f42a:	430a      	orrs	r2, r1
 800f42c:	e7a9      	b.n	800f382 <__kernel_rem_pio2f+0x1d2>
 800f42e:	f10c 0c01 	add.w	ip, ip, #1
 800f432:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f436:	2a00      	cmp	r2, #0
 800f438:	d0f9      	beq.n	800f42e <__kernel_rem_pio2f+0x27e>
 800f43a:	eb0b 0305 	add.w	r3, fp, r5
 800f43e:	aa1a      	add	r2, sp, #104	; 0x68
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	1898      	adds	r0, r3, r2
 800f444:	3004      	adds	r0, #4
 800f446:	1c69      	adds	r1, r5, #1
 800f448:	3704      	adds	r7, #4
 800f44a:	2200      	movs	r2, #0
 800f44c:	4465      	add	r5, ip
 800f44e:	9005      	str	r0, [sp, #20]
 800f450:	428d      	cmp	r5, r1
 800f452:	f6ff af0a 	blt.w	800f26a <__kernel_rem_pio2f+0xba>
 800f456:	a81a      	add	r0, sp, #104	; 0x68
 800f458:	eb02 0c03 	add.w	ip, r2, r3
 800f45c:	4484      	add	ip, r0
 800f45e:	9803      	ldr	r0, [sp, #12]
 800f460:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f464:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800f468:	9001      	str	r0, [sp, #4]
 800f46a:	ee07 0a90 	vmov	s15, r0
 800f46e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f472:	9805      	ldr	r0, [sp, #20]
 800f474:	edcc 7a00 	vstr	s15, [ip]
 800f478:	eddf 7a13 	vldr	s15, [pc, #76]	; 800f4c8 <__kernel_rem_pio2f+0x318>
 800f47c:	eb00 0802 	add.w	r8, r0, r2
 800f480:	f04f 0c00 	mov.w	ip, #0
 800f484:	45d4      	cmp	ip, sl
 800f486:	dd0c      	ble.n	800f4a2 <__kernel_rem_pio2f+0x2f2>
 800f488:	eb02 0c07 	add.w	ip, r2, r7
 800f48c:	a842      	add	r0, sp, #264	; 0x108
 800f48e:	4484      	add	ip, r0
 800f490:	edcc 7a01 	vstr	s15, [ip, #4]
 800f494:	3101      	adds	r1, #1
 800f496:	3204      	adds	r2, #4
 800f498:	e7da      	b.n	800f450 <__kernel_rem_pio2f+0x2a0>
 800f49a:	9b04      	ldr	r3, [sp, #16]
 800f49c:	f04f 0c01 	mov.w	ip, #1
 800f4a0:	e7c7      	b.n	800f432 <__kernel_rem_pio2f+0x282>
 800f4a2:	ecfe 6a01 	vldmia	lr!, {s13}
 800f4a6:	ed38 7a01 	vldmdb	r8!, {s14}
 800f4aa:	f10c 0c01 	add.w	ip, ip, #1
 800f4ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f4b2:	e7e7      	b.n	800f484 <__kernel_rem_pio2f+0x2d4>
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	e769      	b.n	800f38c <__kernel_rem_pio2f+0x1dc>
 800f4b8:	0800ffb8 	.word	0x0800ffb8
 800f4bc:	0800ff8c 	.word	0x0800ff8c
 800f4c0:	43800000 	.word	0x43800000
 800f4c4:	3b800000 	.word	0x3b800000
 800f4c8:	00000000 	.word	0x00000000
 800f4cc:	4260      	negs	r0, r4
 800f4ce:	eeb0 0a48 	vmov.f32	s0, s16
 800f4d2:	f000 f98b 	bl	800f7ec <scalbnf>
 800f4d6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800f4c0 <__kernel_rem_pio2f+0x310>
 800f4da:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e2:	db1a      	blt.n	800f51a <__kernel_rem_pio2f+0x36a>
 800f4e4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f4c4 <__kernel_rem_pio2f+0x314>
 800f4e8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f4ec:	aa06      	add	r2, sp, #24
 800f4ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4f2:	a906      	add	r1, sp, #24
 800f4f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4f8:	3408      	adds	r4, #8
 800f4fa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f4fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f502:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f506:	ee10 3a10 	vmov	r3, s0
 800f50a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f50e:	1c6b      	adds	r3, r5, #1
 800f510:	ee17 2a90 	vmov	r2, s15
 800f514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f518:	e73f      	b.n	800f39a <__kernel_rem_pio2f+0x1ea>
 800f51a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f51e:	aa06      	add	r2, sp, #24
 800f520:	ee10 3a10 	vmov	r3, s0
 800f524:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f528:	462b      	mov	r3, r5
 800f52a:	e736      	b.n	800f39a <__kernel_rem_pio2f+0x1ea>
 800f52c:	aa06      	add	r2, sp, #24
 800f52e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800f532:	9202      	str	r2, [sp, #8]
 800f534:	ee07 2a90 	vmov	s15, r2
 800f538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f53c:	3c01      	subs	r4, #1
 800f53e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f542:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f546:	ed65 7a01 	vstmdb	r5!, {s15}
 800f54a:	e734      	b.n	800f3b6 <__kernel_rem_pio2f+0x206>
 800f54c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800f550:	ecf7 6a01 	vldmia	r7!, {s13}
 800f554:	ed9c 7a00 	vldr	s14, [ip]
 800f558:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f55c:	3401      	adds	r4, #1
 800f55e:	454c      	cmp	r4, r9
 800f560:	dc01      	bgt.n	800f566 <__kernel_rem_pio2f+0x3b6>
 800f562:	42a5      	cmp	r5, r4
 800f564:	daf2      	bge.n	800f54c <__kernel_rem_pio2f+0x39c>
 800f566:	aa56      	add	r2, sp, #344	; 0x158
 800f568:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800f56c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800f570:	3501      	adds	r5, #1
 800f572:	3804      	subs	r0, #4
 800f574:	e723      	b.n	800f3be <__kernel_rem_pio2f+0x20e>
 800f576:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f578:	2a03      	cmp	r2, #3
 800f57a:	d84d      	bhi.n	800f618 <__kernel_rem_pio2f+0x468>
 800f57c:	e8df f002 	tbb	[pc, r2]
 800f580:	021f1f3e 	.word	0x021f1f3e
 800f584:	aa56      	add	r2, sp, #344	; 0x158
 800f586:	4411      	add	r1, r2
 800f588:	399c      	subs	r1, #156	; 0x9c
 800f58a:	4608      	mov	r0, r1
 800f58c:	461c      	mov	r4, r3
 800f58e:	2c00      	cmp	r4, #0
 800f590:	dc5f      	bgt.n	800f652 <__kernel_rem_pio2f+0x4a2>
 800f592:	4608      	mov	r0, r1
 800f594:	461c      	mov	r4, r3
 800f596:	2c01      	cmp	r4, #1
 800f598:	dc6b      	bgt.n	800f672 <__kernel_rem_pio2f+0x4c2>
 800f59a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800f4c8 <__kernel_rem_pio2f+0x318>
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	dc77      	bgt.n	800f692 <__kernel_rem_pio2f+0x4e2>
 800f5a2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800f5a6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800f5aa:	f1b8 0f00 	cmp.w	r8, #0
 800f5ae:	d176      	bne.n	800f69e <__kernel_rem_pio2f+0x4ee>
 800f5b0:	edc6 6a00 	vstr	s13, [r6]
 800f5b4:	ed86 7a01 	vstr	s14, [r6, #4]
 800f5b8:	edc6 7a02 	vstr	s15, [r6, #8]
 800f5bc:	e02c      	b.n	800f618 <__kernel_rem_pio2f+0x468>
 800f5be:	aa56      	add	r2, sp, #344	; 0x158
 800f5c0:	4411      	add	r1, r2
 800f5c2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800f4c8 <__kernel_rem_pio2f+0x318>
 800f5c6:	399c      	subs	r1, #156	; 0x9c
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	da32      	bge.n	800f634 <__kernel_rem_pio2f+0x484>
 800f5ce:	f1b8 0f00 	cmp.w	r8, #0
 800f5d2:	d035      	beq.n	800f640 <__kernel_rem_pio2f+0x490>
 800f5d4:	eef1 7a47 	vneg.f32	s15, s14
 800f5d8:	edc6 7a00 	vstr	s15, [r6]
 800f5dc:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800f5e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5e4:	a82f      	add	r0, sp, #188	; 0xbc
 800f5e6:	2101      	movs	r1, #1
 800f5e8:	428b      	cmp	r3, r1
 800f5ea:	da2c      	bge.n	800f646 <__kernel_rem_pio2f+0x496>
 800f5ec:	f1b8 0f00 	cmp.w	r8, #0
 800f5f0:	d001      	beq.n	800f5f6 <__kernel_rem_pio2f+0x446>
 800f5f2:	eef1 7a67 	vneg.f32	s15, s15
 800f5f6:	edc6 7a01 	vstr	s15, [r6, #4]
 800f5fa:	e00d      	b.n	800f618 <__kernel_rem_pio2f+0x468>
 800f5fc:	aa56      	add	r2, sp, #344	; 0x158
 800f5fe:	4411      	add	r1, r2
 800f600:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800f4c8 <__kernel_rem_pio2f+0x318>
 800f604:	399c      	subs	r1, #156	; 0x9c
 800f606:	2b00      	cmp	r3, #0
 800f608:	da0e      	bge.n	800f628 <__kernel_rem_pio2f+0x478>
 800f60a:	f1b8 0f00 	cmp.w	r8, #0
 800f60e:	d001      	beq.n	800f614 <__kernel_rem_pio2f+0x464>
 800f610:	eef1 7a67 	vneg.f32	s15, s15
 800f614:	edc6 7a00 	vstr	s15, [r6]
 800f618:	9b01      	ldr	r3, [sp, #4]
 800f61a:	f003 0007 	and.w	r0, r3, #7
 800f61e:	b057      	add	sp, #348	; 0x15c
 800f620:	ecbd 8b04 	vpop	{d8-d9}
 800f624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f628:	ed31 7a01 	vldmdb	r1!, {s14}
 800f62c:	3b01      	subs	r3, #1
 800f62e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f632:	e7e8      	b.n	800f606 <__kernel_rem_pio2f+0x456>
 800f634:	ed71 7a01 	vldmdb	r1!, {s15}
 800f638:	3801      	subs	r0, #1
 800f63a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f63e:	e7c4      	b.n	800f5ca <__kernel_rem_pio2f+0x41a>
 800f640:	eef0 7a47 	vmov.f32	s15, s14
 800f644:	e7c8      	b.n	800f5d8 <__kernel_rem_pio2f+0x428>
 800f646:	ecb0 7a01 	vldmia	r0!, {s14}
 800f64a:	3101      	adds	r1, #1
 800f64c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f650:	e7ca      	b.n	800f5e8 <__kernel_rem_pio2f+0x438>
 800f652:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f656:	ed70 6a01 	vldmdb	r0!, {s13}
 800f65a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f65e:	3c01      	subs	r4, #1
 800f660:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f664:	ed00 7a01 	vstr	s14, [r0, #-4]
 800f668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f66c:	edc0 7a00 	vstr	s15, [r0]
 800f670:	e78d      	b.n	800f58e <__kernel_rem_pio2f+0x3de>
 800f672:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f676:	ed70 6a01 	vldmdb	r0!, {s13}
 800f67a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f67e:	3c01      	subs	r4, #1
 800f680:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f684:	ed00 7a01 	vstr	s14, [r0, #-4]
 800f688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f68c:	edc0 7a00 	vstr	s15, [r0]
 800f690:	e781      	b.n	800f596 <__kernel_rem_pio2f+0x3e6>
 800f692:	ed31 7a01 	vldmdb	r1!, {s14}
 800f696:	3b01      	subs	r3, #1
 800f698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f69c:	e77f      	b.n	800f59e <__kernel_rem_pio2f+0x3ee>
 800f69e:	eef1 6a66 	vneg.f32	s13, s13
 800f6a2:	eeb1 7a47 	vneg.f32	s14, s14
 800f6a6:	edc6 6a00 	vstr	s13, [r6]
 800f6aa:	ed86 7a01 	vstr	s14, [r6, #4]
 800f6ae:	eef1 7a67 	vneg.f32	s15, s15
 800f6b2:	e781      	b.n	800f5b8 <__kernel_rem_pio2f+0x408>

0800f6b4 <__kernel_sinf>:
 800f6b4:	ee10 3a10 	vmov	r3, s0
 800f6b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f6bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f6c0:	da04      	bge.n	800f6cc <__kernel_sinf+0x18>
 800f6c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f6c6:	ee17 3a90 	vmov	r3, s15
 800f6ca:	b35b      	cbz	r3, 800f724 <__kernel_sinf+0x70>
 800f6cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f6d0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f728 <__kernel_sinf+0x74>
 800f6d4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800f72c <__kernel_sinf+0x78>
 800f6d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f6dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800f730 <__kernel_sinf+0x7c>
 800f6e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f6e4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800f734 <__kernel_sinf+0x80>
 800f6e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f6ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 800f738 <__kernel_sinf+0x84>
 800f6f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f6f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f6f8:	b930      	cbnz	r0, 800f708 <__kernel_sinf+0x54>
 800f6fa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800f73c <__kernel_sinf+0x88>
 800f6fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f702:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f706:	4770      	bx	lr
 800f708:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f70c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f710:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f714:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f718:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f740 <__kernel_sinf+0x8c>
 800f71c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f720:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop
 800f728:	2f2ec9d3 	.word	0x2f2ec9d3
 800f72c:	b2d72f34 	.word	0xb2d72f34
 800f730:	3638ef1b 	.word	0x3638ef1b
 800f734:	b9500d01 	.word	0xb9500d01
 800f738:	3c088889 	.word	0x3c088889
 800f73c:	be2aaaab 	.word	0xbe2aaaab
 800f740:	3e2aaaab 	.word	0x3e2aaaab

0800f744 <matherr>:
 800f744:	2000      	movs	r0, #0
 800f746:	4770      	bx	lr

0800f748 <nan>:
 800f748:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f750 <nan+0x8>
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	00000000 	.word	0x00000000
 800f754:	7ff80000 	.word	0x7ff80000

0800f758 <fabsf>:
 800f758:	ee10 3a10 	vmov	r3, s0
 800f75c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f760:	ee00 3a10 	vmov	s0, r3
 800f764:	4770      	bx	lr
	...

0800f768 <floorf>:
 800f768:	ee10 3a10 	vmov	r3, s0
 800f76c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f770:	0dca      	lsrs	r2, r1, #23
 800f772:	3a7f      	subs	r2, #127	; 0x7f
 800f774:	2a16      	cmp	r2, #22
 800f776:	dc2a      	bgt.n	800f7ce <floorf+0x66>
 800f778:	2a00      	cmp	r2, #0
 800f77a:	da11      	bge.n	800f7a0 <floorf+0x38>
 800f77c:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f7e0 <floorf+0x78>
 800f780:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f784:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78c:	dd05      	ble.n	800f79a <floorf+0x32>
 800f78e:	2b00      	cmp	r3, #0
 800f790:	da23      	bge.n	800f7da <floorf+0x72>
 800f792:	4a14      	ldr	r2, [pc, #80]	; (800f7e4 <floorf+0x7c>)
 800f794:	2900      	cmp	r1, #0
 800f796:	bf18      	it	ne
 800f798:	4613      	movne	r3, r2
 800f79a:	ee00 3a10 	vmov	s0, r3
 800f79e:	4770      	bx	lr
 800f7a0:	4911      	ldr	r1, [pc, #68]	; (800f7e8 <floorf+0x80>)
 800f7a2:	4111      	asrs	r1, r2
 800f7a4:	420b      	tst	r3, r1
 800f7a6:	d0fa      	beq.n	800f79e <floorf+0x36>
 800f7a8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f7e0 <floorf+0x78>
 800f7ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f7b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b8:	ddef      	ble.n	800f79a <floorf+0x32>
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	bfbe      	ittt	lt
 800f7be:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800f7c2:	fa40 f202 	asrlt.w	r2, r0, r2
 800f7c6:	189b      	addlt	r3, r3, r2
 800f7c8:	ea23 0301 	bic.w	r3, r3, r1
 800f7cc:	e7e5      	b.n	800f79a <floorf+0x32>
 800f7ce:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f7d2:	d3e4      	bcc.n	800f79e <floorf+0x36>
 800f7d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f7d8:	4770      	bx	lr
 800f7da:	2300      	movs	r3, #0
 800f7dc:	e7dd      	b.n	800f79a <floorf+0x32>
 800f7de:	bf00      	nop
 800f7e0:	7149f2ca 	.word	0x7149f2ca
 800f7e4:	bf800000 	.word	0xbf800000
 800f7e8:	007fffff 	.word	0x007fffff

0800f7ec <scalbnf>:
 800f7ec:	b508      	push	{r3, lr}
 800f7ee:	ee10 2a10 	vmov	r2, s0
 800f7f2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f7f6:	ed2d 8b02 	vpush	{d8}
 800f7fa:	eef0 0a40 	vmov.f32	s1, s0
 800f7fe:	d004      	beq.n	800f80a <scalbnf+0x1e>
 800f800:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f804:	d306      	bcc.n	800f814 <scalbnf+0x28>
 800f806:	ee70 0a00 	vadd.f32	s1, s0, s0
 800f80a:	ecbd 8b02 	vpop	{d8}
 800f80e:	eeb0 0a60 	vmov.f32	s0, s1
 800f812:	bd08      	pop	{r3, pc}
 800f814:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f818:	d21c      	bcs.n	800f854 <scalbnf+0x68>
 800f81a:	4b1f      	ldr	r3, [pc, #124]	; (800f898 <scalbnf+0xac>)
 800f81c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f89c <scalbnf+0xb0>
 800f820:	4298      	cmp	r0, r3
 800f822:	ee60 0a27 	vmul.f32	s1, s0, s15
 800f826:	db10      	blt.n	800f84a <scalbnf+0x5e>
 800f828:	ee10 2a90 	vmov	r2, s1
 800f82c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800f830:	3b19      	subs	r3, #25
 800f832:	4403      	add	r3, r0
 800f834:	2bfe      	cmp	r3, #254	; 0xfe
 800f836:	dd0f      	ble.n	800f858 <scalbnf+0x6c>
 800f838:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800f8a0 <scalbnf+0xb4>
 800f83c:	eeb0 0a48 	vmov.f32	s0, s16
 800f840:	f000 f834 	bl	800f8ac <copysignf>
 800f844:	ee60 0a08 	vmul.f32	s1, s0, s16
 800f848:	e7df      	b.n	800f80a <scalbnf+0x1e>
 800f84a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800f8a4 <scalbnf+0xb8>
 800f84e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f852:	e7da      	b.n	800f80a <scalbnf+0x1e>
 800f854:	0ddb      	lsrs	r3, r3, #23
 800f856:	e7ec      	b.n	800f832 <scalbnf+0x46>
 800f858:	2b00      	cmp	r3, #0
 800f85a:	dd06      	ble.n	800f86a <scalbnf+0x7e>
 800f85c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f860:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f864:	ee00 3a90 	vmov	s1, r3
 800f868:	e7cf      	b.n	800f80a <scalbnf+0x1e>
 800f86a:	f113 0f16 	cmn.w	r3, #22
 800f86e:	da06      	bge.n	800f87e <scalbnf+0x92>
 800f870:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f874:	4298      	cmp	r0, r3
 800f876:	dcdf      	bgt.n	800f838 <scalbnf+0x4c>
 800f878:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800f8a4 <scalbnf+0xb8>
 800f87c:	e7de      	b.n	800f83c <scalbnf+0x50>
 800f87e:	3319      	adds	r3, #25
 800f880:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f884:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f888:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f8a8 <scalbnf+0xbc>
 800f88c:	ee07 3a10 	vmov	s14, r3
 800f890:	ee67 0a27 	vmul.f32	s1, s14, s15
 800f894:	e7b9      	b.n	800f80a <scalbnf+0x1e>
 800f896:	bf00      	nop
 800f898:	ffff3cb0 	.word	0xffff3cb0
 800f89c:	4c000000 	.word	0x4c000000
 800f8a0:	7149f2ca 	.word	0x7149f2ca
 800f8a4:	0da24260 	.word	0x0da24260
 800f8a8:	33000000 	.word	0x33000000

0800f8ac <copysignf>:
 800f8ac:	ee10 3a10 	vmov	r3, s0
 800f8b0:	ee10 2a90 	vmov	r2, s1
 800f8b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	ee00 3a10 	vmov	s0, r3
 800f8c2:	4770      	bx	lr

0800f8c4 <_init>:
 800f8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c6:	bf00      	nop
 800f8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ca:	bc08      	pop	{r3}
 800f8cc:	469e      	mov	lr, r3
 800f8ce:	4770      	bx	lr

0800f8d0 <_fini>:
 800f8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d2:	bf00      	nop
 800f8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8d6:	bc08      	pop	{r3}
 800f8d8:	469e      	mov	lr, r3
 800f8da:	4770      	bx	lr
