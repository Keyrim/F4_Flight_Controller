
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013638  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  080137c8  080137c8  000237c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ed4  08013ed4  00031c5c  2**0
                  CONTENTS
  4 .ARM          00000008  08013ed4  08013ed4  00023ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013edc  08013edc  00031c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013edc  08013edc  00023edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013ee0  08013ee0  00023ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001c5c  20000000  08013ee4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001680  20001c5c  08015b40  00031c5c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200032dc  08015b40  000332dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031c5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c3c9  00000000  00000000  00031c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007663  00000000  00000000  0007e055  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bc8  00000000  00000000  000856b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001890  00000000  00000000  00087280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c6bd  00000000  00000000  00088b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002e01b  00000000  00000000  000b51cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce52a  00000000  00000000  000e31e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b1712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e3c  00000000  00000000  001b1790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001c5c 	.word	0x20001c5c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080137b0 	.word	0x080137b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001c60 	.word	0x20001c60
 80001cc:	080137b0 	.word	0x080137b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DATA_LOGGER_Init>:



static uint8_t name_flight_mode[] = "Flight Mode";

void DATA_LOGGER_Init(system_t * sys_){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	sys = sys_;
 8000f50:	4ab3      	ldr	r2, [pc, #716]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]

	//	-----------------------------------------------	Définitions des data	-----------------------------------------------------------------
	//Angle
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							TRUE);
 8000f56:	4bb3      	ldr	r3, [pc, #716]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	4bb0      	ldr	r3, [pc, #704]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f64:	4aaf      	ldr	r2, [pc, #700]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f66:	6053      	str	r3, [r2, #4]
 8000f68:	4bae      	ldr	r3, [pc, #696]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f6a:	2229      	movs	r2, #41	; 0x29
 8000f6c:	725a      	strb	r2, [r3, #9]
 8000f6e:	4bad      	ldr	r3, [pc, #692]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f70:	4aad      	ldr	r2, [pc, #692]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4bab      	ldr	r3, [pc, #684]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f76:	220a      	movs	r2, #10
 8000f78:	741a      	strb	r2, [r3, #16]
 8000f7a:	4baa      	ldr	r3, [pc, #680]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	615a      	str	r2, [r3, #20]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							FALSE);
 8000f80:	4ba8      	ldr	r3, [pc, #672]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
 8000f88:	4ba5      	ldr	r3, [pc, #660]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000f90:	4aa4      	ldr	r2, [pc, #656]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4ba3      	ldr	r3, [pc, #652]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f96:	2229      	movs	r2, #41	; 0x29
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f9c:	4ba1      	ldr	r3, [pc, #644]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f9e:	4aa3      	ldr	r2, [pc, #652]	; (800122c <DATA_LOGGER_Init+0x2e4>)
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	4ba0      	ldr	r3, [pc, #640]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000faa:	4b9e      	ldr	r3, [pc, #632]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c

	//Consignes angles
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_roll,					FALSE);
 8000fb0:	4b9c      	ldr	r3, [pc, #624]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8000fb8:	4b99      	ldr	r3, [pc, #612]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8000fc0:	4a98      	ldr	r2, [pc, #608]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fc2:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 8000fc6:	4b97      	ldr	r3, [pc, #604]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fc8:	2229      	movs	r2, #41	; 0x29
 8000fca:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 8000fce:	4b95      	ldr	r3, [pc, #596]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fd0:	4a97      	ldr	r2, [pc, #604]	; (8001230 <DATA_LOGGER_Init+0x2e8>)
 8000fd2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8000fd6:	4b93      	ldr	r3, [pc, #588]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fd8:	220b      	movs	r2, #11
 8000fda:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8000fde:	4b91      	ldr	r3, [pc, #580]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_pitch,					FALSE);
 8000fe6:	4b8f      	ldr	r3, [pc, #572]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fe8:	2211      	movs	r2, #17
 8000fea:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8000fee:	4b8c      	ldr	r3, [pc, #560]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 8000ff6:	4a8b      	ldr	r2, [pc, #556]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000ff8:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 8000ffc:	4b89      	ldr	r3, [pc, #548]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000ffe:	2229      	movs	r2, #41	; 0x29
 8001000:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8001004:	4b87      	ldr	r3, [pc, #540]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001006:	4a8b      	ldr	r2, [pc, #556]	; (8001234 <DATA_LOGGER_Init+0x2ec>)
 8001008:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 800100c:	4b85      	ldr	r3, [pc, #532]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800100e:	220c      	movs	r2, #12
 8001010:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8001014:	4b83      	ldr	r3, [pc, #524]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

	//Pid gyro roll
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].output, 		DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll, 						FALSE);
 800101c:	4b81      	ldr	r3, [pc, #516]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800101e:	220d      	movs	r2, #13
 8001020:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8001024:	4b7e      	ldr	r3, [pc, #504]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f503 631a 	add.w	r3, r3, #2464	; 0x9a0
 800102c:	4a7d      	ldr	r2, [pc, #500]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800102e:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8001032:	4b7c      	ldr	r3, [pc, #496]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001034:	2229      	movs	r2, #41	; 0x29
 8001036:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 800103a:	4b7a      	ldr	r3, [pc, #488]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800103c:	4a7e      	ldr	r2, [pc, #504]	; (8001238 <DATA_LOGGER_Init+0x2f0>)
 800103e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8001042:	4b78      	ldr	r3, [pc, #480]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001044:	220d      	movs	r2, #13
 8001046:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 800104a:	4b76      	ldr	r3, [pc, #472]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800104c:	2200      	movs	r2, #0
 800104e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_P, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].P, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_p, 						FALSE);
 8001052:	4b74      	ldr	r3, [pc, #464]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001054:	220e      	movs	r2, #14
 8001056:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 800105a:	4b71      	ldr	r3, [pc, #452]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f603 13a4 	addw	r3, r3, #2468	; 0x9a4
 8001062:	4a70      	ldr	r2, [pc, #448]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001064:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001068:	4b6e      	ldr	r3, [pc, #440]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800106a:	2229      	movs	r2, #41	; 0x29
 800106c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8001070:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001072:	4a72      	ldr	r2, [pc, #456]	; (800123c <DATA_LOGGER_Init+0x2f4>)
 8001074:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8001078:	4b6a      	ldr	r3, [pc, #424]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800107a:	220d      	movs	r2, #13
 800107c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001082:	2200      	movs	r2, #0
 8001084:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_D, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].D, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_d, 						FALSE);
 8001088:	4b66      	ldr	r3, [pc, #408]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800108a:	220f      	movs	r2, #15
 800108c:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8001090:	4b63      	ldr	r3, [pc, #396]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 8001098:	4a62      	ldr	r2, [pc, #392]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800109a:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 800109e:	4b61      	ldr	r3, [pc, #388]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010a0:	2229      	movs	r2, #41	; 0x29
 80010a2:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 80010a6:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010a8:	4a65      	ldr	r2, [pc, #404]	; (8001240 <DATA_LOGGER_Init+0x2f8>)
 80010aa:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010b0:	220d      	movs	r2, #13
 80010b2:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 80010b6:	4b5b      	ldr	r3, [pc, #364]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	//Angle rate
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 								FALSE);
 80010be:	4b59      	ldr	r3, [pc, #356]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	333c      	adds	r3, #60	; 0x3c
 80010cc:	4a55      	ldr	r2, [pc, #340]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010ce:	6353      	str	r3, [r2, #52]	; 0x34
 80010d0:	4b54      	ldr	r3, [pc, #336]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010d2:	2229      	movs	r2, #41	; 0x29
 80010d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80010d8:	4b52      	ldr	r3, [pc, #328]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010da:	4a5a      	ldr	r2, [pc, #360]	; (8001244 <DATA_LOGGER_Init+0x2fc>)
 80010dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80010de:	4b51      	ldr	r3, [pc, #324]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010e0:	2209      	movs	r2, #9
 80010e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80010e6:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 								FALSE);
 80010ec:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010ee:	2203      	movs	r2, #3
 80010f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3338      	adds	r3, #56	; 0x38
 80010fa:	4a4a      	ldr	r2, [pc, #296]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001100:	2229      	movs	r2, #41	; 0x29
 8001102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <DATA_LOGGER_Init+0x300>)
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
 800110c:	4b45      	ldr	r3, [pc, #276]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800110e:	220a      	movs	r2, #10
 8001110:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001114:	4b43      	ldr	r3, [pc, #268]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001116:	2200      	movs	r2, #0
 8001118:	65da      	str	r2, [r3, #92]	; 0x5c
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 						FALSE);
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800111c:	2204      	movs	r2, #4
 800111e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001122:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3340      	adds	r3, #64	; 0x40
 8001128:	4a3e      	ldr	r2, [pc, #248]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800112a:	6653      	str	r3, [r2, #100]	; 0x64
 800112c:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800112e:	2229      	movs	r2, #41	; 0x29
 8001130:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001134:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001136:	4a45      	ldr	r2, [pc, #276]	; (800124c <DATA_LOGGER_Init+0x304>)
 8001138:	66da      	str	r2, [r3, #108]	; 0x6c
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800113c:	2208      	movs	r2, #8
 800113e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001144:	2200      	movs	r2, #0
 8001146:	675a      	str	r2, [r3, #116]	; 0x74

	//Consignes angles rates
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_roll_gyro, 							FALSE);
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800114a:	220a      	movs	r2, #10
 800114c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f603 332c 	addw	r3, r3, #2860	; 0xb2c
 8001158:	4a32      	ldr	r2, [pc, #200]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800115a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800115e:	4b31      	ldr	r3, [pc, #196]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001160:	2229      	movs	r2, #41	; 0x29
 8001162:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001168:	4a39      	ldr	r2, [pc, #228]	; (8001250 <DATA_LOGGER_Init+0x308>)
 800116a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001170:	220d      	movs	r2, #13
 8001172:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001178:	2200      	movs	r2, #0
 800117a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_pitch_gyro, 						FALSE);
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001180:	220b      	movs	r2, #11
 8001182:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 800118e:	4a25      	ldr	r2, [pc, #148]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001190:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001196:	2229      	movs	r2, #41	; 0x29
 8001198:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800119e:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <DATA_LOGGER_Init+0x30c>)
 80011a0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011a6:	220e      	movs	r2, #14
 80011a8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_YAW, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW], 		DATA_FORMAT_16B_FLOAT_1D, 	name_target_yaw_gyro, 		 					FALSE);
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011c6:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011cc:	2229      	movs	r2, #41	; 0x29
 80011ce:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011d4:	4a20      	ldr	r2, [pc, #128]	; (8001258 <DATA_LOGGER_Init+0x310>)
 80011d6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011dc:	220c      	movs	r2, #12
 80011de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	//Angle Rate raw
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 							FALSE);
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011ec:	2205      	movs	r2, #5
 80011ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <DATA_LOGGER_Init+0x2d8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f8:	3304      	adds	r3, #4
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011fc:	67d3      	str	r3, [r2, #124]	; 0x7c
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001200:	2229      	movs	r2, #41	; 0x29
 8001202:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001208:	4a14      	ldr	r2, [pc, #80]	; (800125c <DATA_LOGGER_Init+0x314>)
 800120a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001210:	220d      	movs	r2, #13
 8001212:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001216:	4b03      	ldr	r3, [pc, #12]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001218:	2200      	movs	r2, #0
 800121a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800121e:	e01f      	b.n	8001260 <DATA_LOGGER_Init+0x318>
 8001220:	20001c78 	.word	0x20001c78
 8001224:	20001c7c 	.word	0x20001c7c
 8001228:	20000004 	.word	0x20000004
 800122c:	20000010 	.word	0x20000010
 8001230:	2000001c 	.word	0x2000001c
 8001234:	20000028 	.word	0x20000028
 8001238:	200000bc 	.word	0x200000bc
 800123c:	200000cc 	.word	0x200000cc
 8001240:	200000dc 	.word	0x200000dc
 8001244:	20000038 	.word	0x20000038
 8001248:	20000044 	.word	0x20000044
 800124c:	20000050 	.word	0x20000050
 8001250:	2000005c 	.word	0x2000005c
 8001254:	2000006c 	.word	0x2000006c
 8001258:	2000007c 	.word	0x2000007c
 800125c:	2000008c 	.word	0x2000008c
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,							FALSE);
 8001260:	4b9d      	ldr	r3, [pc, #628]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001262:	2206      	movs	r2, #6
 8001264:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001268:	4b9c      	ldr	r3, [pc, #624]	; (80014dc <DATA_LOGGER_Init+0x594>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126e:	3304      	adds	r3, #4
 8001270:	4a99      	ldr	r2, [pc, #612]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001276:	4b98      	ldr	r3, [pc, #608]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001278:	2229      	movs	r2, #41	; 0x29
 800127a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800127e:	4b96      	ldr	r3, [pc, #600]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001280:	4a97      	ldr	r2, [pc, #604]	; (80014e0 <DATA_LOGGER_Init+0x598>)
 8001282:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001286:	4b94      	ldr	r3, [pc, #592]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001288:	220e      	movs	r2, #14
 800128a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800128e:	4b92      	ldr	r3, [pc, #584]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001290:	2200      	movs	r2, #0
 8001292:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 								FALSE);
 8001296:	4b90      	ldr	r3, [pc, #576]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001298:	2207      	movs	r2, #7
 800129a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800129e:	4b8f      	ldr	r3, [pc, #572]	; (80014dc <DATA_LOGGER_Init+0x594>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a4:	3308      	adds	r3, #8
 80012a6:	4a8c      	ldr	r2, [pc, #560]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012a8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 80012ac:	4b8a      	ldr	r3, [pc, #552]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012ae:	2229      	movs	r2, #41	; 0x29
 80012b0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80012b4:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012b6:	4a8b      	ldr	r2, [pc, #556]	; (80014e4 <DATA_LOGGER_Init+0x59c>)
 80012b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80012bc:	4b86      	ldr	r3, [pc, #536]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012be:	220c      	movs	r2, #12
 80012c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80012c4:	4b84      	ldr	r3, [pc, #528]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	//Barometer
	DEFINE_DATA(DATA_ID_PRESSURE, 		(uint8_t*)&sys->sensors.ms5611.pressure, 												DATA_FORMAT_16B_FLOAT_1D, 	name_pressure, 									TRUE);
 80012cc:	4b82      	ldr	r3, [pc, #520]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012ce:	2213      	movs	r2, #19
 80012d0:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 80012d4:	4b81      	ldr	r3, [pc, #516]	; (80014dc <DATA_LOGGER_Init+0x594>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80012dc:	4a7e      	ldr	r2, [pc, #504]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012de:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 80012e2:	4b7d      	ldr	r3, [pc, #500]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012e4:	2229      	movs	r2, #41	; 0x29
 80012e6:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 80012ea:	4b7b      	ldr	r3, [pc, #492]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012ec:	4a7e      	ldr	r2, [pc, #504]	; (80014e8 <DATA_LOGGER_Init+0x5a0>)
 80012ee:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 80012f2:	4b79      	ldr	r3, [pc, #484]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012f4:	2208      	movs	r2, #8
 80012f6:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80012fa:	4b77      	ldr	r3, [pc, #476]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	DEFINE_DATA(DATA_ID_TEMPERATURE, 	(uint8_t*)&sys->sensors.ms5611.temperature, 											DATA_FORMAT_16B_FLOAT_1D, 	name_temperature, 								TRUE);
 8001302:	4b75      	ldr	r3, [pc, #468]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001304:	2214      	movs	r2, #20
 8001306:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800130a:	4b74      	ldr	r3, [pc, #464]	; (80014dc <DATA_LOGGER_Init+0x594>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001312:	4a71      	ldr	r2, [pc, #452]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001314:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
 8001318:	4b6f      	ldr	r3, [pc, #444]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 800131a:	2229      	movs	r2, #41	; 0x29
 800131c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8001320:	4b6d      	ldr	r3, [pc, #436]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001322:	4a72      	ldr	r2, [pc, #456]	; (80014ec <DATA_LOGGER_Init+0x5a4>)
 8001324:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 8001328:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 800132a:	220b      	movs	r2, #11
 800132c:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8001330:	4b69      	ldr	r3, [pc, #420]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001332:	2201      	movs	r2, #1
 8001334:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	DEFINE_DATA(DATA_ID_ALTITUDE, 		(uint8_t*)&sys->sensors.ms5611.altitude, 												DATA_FORMAT_16B_FLOAT_1D, 	name_altitude, 									TRUE);
 8001338:	4b67      	ldr	r3, [pc, #412]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 800133a:	2215      	movs	r2, #21
 800133c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8001340:	4b66      	ldr	r3, [pc, #408]	; (80014dc <DATA_LOGGER_Init+0x594>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001348:	4a63      	ldr	r2, [pc, #396]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 800134a:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 800134e:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001350:	2229      	movs	r2, #41	; 0x29
 8001352:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001358:	4a65      	ldr	r2, [pc, #404]	; (80014f0 <DATA_LOGGER_Init+0x5a8>)
 800135a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800135e:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001360:	2208      	movs	r2, #8
 8001362:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001368:	2201      	movs	r2, #1
 800136a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	//Buttons
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_config_request, 							FALSE);
 800136e:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001370:	2216      	movs	r2, #22
 8001372:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8001376:	4b58      	ldr	r3, [pc, #352]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001378:	2200      	movs	r2, #0
 800137a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800137e:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8001386:	4b54      	ldr	r3, [pc, #336]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001388:	4a5a      	ldr	r2, [pc, #360]	; (80014f4 <DATA_LOGGER_Init+0x5ac>)
 800138a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800138e:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001390:	220b      	movs	r2, #11
 8001392:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8001396:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001398:	2200      	movs	r2, #0
 800139a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	DEFINE_DATA(DATA_ID_DISABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_disable_asser_orientation,  	TRUE);
 800139e:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013a0:	2217      	movs	r2, #23
 80013a2:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80013a6:	4b4c      	ldr	r3, [pc, #304]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 80013b6:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <DATA_LOGGER_Init+0x5b0>)
 80013ba:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 80013be:	4b46      	ldr	r3, [pc, #280]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013c0:	220d      	movs	r2, #13
 80013c2:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80013c6:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	DEFINE_DATA(DATA_ID_ENABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_enable_asser_orientation, 		TRUE);
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013d0:	2218      	movs	r2, #24
 80013d2:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 80013d6:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 80013e6:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013e8:	4a44      	ldr	r2, [pc, #272]	; (80014fc <DATA_LOGGER_Init+0x5b4>)
 80013ea:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013f0:	220c      	movs	r2, #12
 80013f2:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	DEFINE_DATA(DATA_ID_START_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 					TRUE);
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001400:	2219      	movs	r2, #25
 8001402:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 8001406:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001408:	2200      	movs	r2, #0
 800140a:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001418:	4a39      	ldr	r2, [pc, #228]	; (8001500 <DATA_LOGGER_Init+0x5b8>)
 800141a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001420:	220e      	movs	r2, #14
 8001422:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001428:	2201      	movs	r2, #1
 800142a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 							TRUE);
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001430:	221a      	movs	r2, #26
 8001432:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001438:	2200      	movs	r2, #0
 800143a:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001448:	4a2e      	ldr	r2, [pc, #184]	; (8001504 <DATA_LOGGER_Init+0x5bc>)
 800144a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001450:	220d      	movs	r2, #13
 8001452:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001458:	2201      	movs	r2, #1
 800145a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284

	//Propulsion
	DEFINE_DATA(DATA_ID_PROP_THRUST, (uint8_t*)&sys->propulsion.consigne[PROP_CONSIGNE_THRUST], 								DATA_FORMAT_16B_UINT16,  	name_prop_thrust, 								FALSE);
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001460:	2212      	movs	r2, #18
 8001462:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <DATA_LOGGER_Init+0x594>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f603 1342 	addw	r3, r3, #2370	; 0x942
 800146e:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001470:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001476:	222a      	movs	r2, #42	; 0x2a
 8001478:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 800147e:	4a22      	ldr	r2, [pc, #136]	; (8001508 <DATA_LOGGER_Init+0x5c0>)
 8001480:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001486:	220b      	movs	r2, #11
 8001488:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 800148e:	2200      	movs	r2, #0
 8001490:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4


	//Others
	DEFINE_DATA(DATA_ID_FLIGHT_MODE, sys->soft.flight_mode, 																	DATA_FORMAT_8B, 			name_flight_mode, 								FALSE);
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 8001496:	2209      	movs	r2, #9
 8001498:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <DATA_LOGGER_Init+0x594>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f8d3 3b44 	ldr.w	r3, [r3, #2884]	; 0xb44
 80014a4:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80014a6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80014ac:	2214      	movs	r2, #20
 80014ae:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80014b4:	4a15      	ldr	r2, [pc, #84]	; (800150c <DATA_LOGGER_Init+0x5c4>)
 80014b6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80014bc:	220b      	movs	r2, #11
 80014be:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <DATA_LOGGER_Init+0x590>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec


}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20001c7c 	.word	0x20001c7c
 80014dc:	20001c78 	.word	0x20001c78
 80014e0:	2000009c 	.word	0x2000009c
 80014e4:	200000ac 	.word	0x200000ac
 80014e8:	20000104 	.word	0x20000104
 80014ec:	200000f8 	.word	0x200000f8
 80014f0:	20000110 	.word	0x20000110
 80014f4:	2000011c 	.word	0x2000011c
 80014f8:	20000138 	.word	0x20000138
 80014fc:	20000128 	.word	0x20000128
 8001500:	20000148 	.word	0x20000148
 8001504:	20000158 	.word	0x20000158
 8001508:	200000ec 	.word	0x200000ec
 800150c:	20000168 	.word	0x20000168

08001510 <DATA_LOGGER_Start>:

void DATA_LOGGER_Start(){
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <DATA_LOGGER_Start+0x14>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	20001f08 	.word	0x20001f08

08001528 <DATA_LOGGER_Stop>:

void DATA_LOGGER_Stop(){
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <DATA_LOGGER_Stop+0x14>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20001f0c 	.word	0x20001f0c

08001540 <DATA_LOGGER_Main>:

void DATA_LOGGER_Main(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0

	static data_logger_state_e previous_state 	= LOGGER_TRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8001546:	4b6b      	ldr	r3, [pc, #428]	; (80016f4 <DATA_LOGGER_Main+0x1b4>)
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	4b6b      	ldr	r3, [pc, #428]	; (80016f8 <DATA_LOGGER_Main+0x1b8>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	bf14      	ite	ne
 8001552:	2301      	movne	r3, #1
 8001554:	2300      	moveq	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	603b      	str	r3, [r7, #0]
	previous_state = state ;
 800155a:	4b67      	ldr	r3, [pc, #412]	; (80016f8 <DATA_LOGGER_Main+0x1b8>)
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <DATA_LOGGER_Main+0x1b4>)
 8001560:	701a      	strb	r2, [r3, #0]

	switch(state){
 8001562:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <DATA_LOGGER_Main+0x1b8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d036      	beq.n	80015d8 <DATA_LOGGER_Main+0x98>
 800156a:	2b02      	cmp	r3, #2
 800156c:	d07e      	beq.n	800166c <DATA_LOGGER_Main+0x12c>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d000      	beq.n	8001574 <DATA_LOGGER_Main+0x34>
				}
			}
			break;
	}

}
 8001572:	e0ba      	b.n	80016ea <DATA_LOGGER_Main+0x1aa>
			if(entrance){
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <DATA_LOGGER_Main+0x42>
				SCHEDULER_reschedule_task(TASK_LOGGER, 2000000);
 800157a:	4960      	ldr	r1, [pc, #384]	; (80016fc <DATA_LOGGER_Main+0x1bc>)
 800157c:	200d      	movs	r0, #13
 800157e:	f002 f8ad 	bl	80036dc <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(DATA_ID_CONFIG_REQUEST, tmp);
 8001582:	495f      	ldr	r1, [pc, #380]	; (8001700 <DATA_LOGGER_Main+0x1c0>)
 8001584:	2016      	movs	r0, #22
 8001586:	f000 fa4d 	bl	8001a24 <DATA_LOGGER_Get_Data_Config>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <DATA_LOGGER_Main+0x1c4>)
 8001590:	701a      	strb	r2, [r3, #0]
			TELEMETRY_Send_Data(tmp, tmp_len);
 8001592:	4b5c      	ldr	r3, [pc, #368]	; (8001704 <DATA_LOGGER_Main+0x1c4>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	4859      	ldr	r0, [pc, #356]	; (8001700 <DATA_LOGGER_Main+0x1c0>)
 800159a:	f005 fef5 	bl	8007388 <TELEMETRY_Send_Data>
			if(start_flag){
 800159e:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <DATA_LOGGER_Main+0x1c8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a0 	beq.w	80016e8 <DATA_LOGGER_Main+0x1a8>
				start_flag = FALSE;
 80015a8:	4b57      	ldr	r3, [pc, #348]	; (8001708 <DATA_LOGGER_Main+0x1c8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
				stop_flag = FALSE;
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <DATA_LOGGER_Main+0x1cc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
				if(config_not_sent){
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <DATA_LOGGER_Main+0x1d0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d009      	beq.n	80015d0 <DATA_LOGGER_Main+0x90>
					id_init_counter = 0;
 80015bc:	4b55      	ldr	r3, [pc, #340]	; (8001714 <DATA_LOGGER_Main+0x1d4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 80015c2:	4b55      	ldr	r3, [pc, #340]	; (8001718 <DATA_LOGGER_Main+0x1d8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <DATA_LOGGER_Main+0x1b8>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
			break;
 80015ce:	e08b      	b.n	80016e8 <DATA_LOGGER_Main+0x1a8>
					state = LOGGER_LOG;
 80015d0:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <DATA_LOGGER_Main+0x1b8>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	701a      	strb	r2, [r3, #0]
			break;
 80015d6:	e087      	b.n	80016e8 <DATA_LOGGER_Main+0x1a8>
			if(entrance)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00a      	beq.n	80015f4 <DATA_LOGGER_Main+0xb4>
				SCHEDULER_reschedule_task(TASK_LOGGER, 500000);	//On abaisse la fréquence de la tâche pendant l'init
 80015de:	494f      	ldr	r1, [pc, #316]	; (800171c <DATA_LOGGER_Main+0x1dc>)
 80015e0:	200d      	movs	r0, #13
 80015e2:	f002 f87b 	bl	80036dc <SCHEDULER_reschedule_task>
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 80015e6:	e005      	b.n	80015f4 <DATA_LOGGER_Main+0xb4>
				id_init_counter ++ ;
 80015e8:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <DATA_LOGGER_Main+0x1d4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b48      	ldr	r3, [pc, #288]	; (8001714 <DATA_LOGGER_Main+0x1d4>)
 80015f2:	701a      	strb	r2, [r3, #0]
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 80015f4:	4b47      	ldr	r3, [pc, #284]	; (8001714 <DATA_LOGGER_Main+0x1d4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	4a49      	ldr	r2, [pc, #292]	; (8001720 <DATA_LOGGER_Main+0x1e0>)
 80015fc:	460b      	mov	r3, r1
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	440b      	add	r3, r1
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	3314      	adds	r3, #20
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d103      	bne.n	8001616 <DATA_LOGGER_Main+0xd6>
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <DATA_LOGGER_Main+0x1d4>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b1a      	cmp	r3, #26
 8001614:	d9e8      	bls.n	80015e8 <DATA_LOGGER_Main+0xa8>
			if(id_init_counter < DATA_ID_COUNT){
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <DATA_LOGGER_Main+0x1d4>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b1a      	cmp	r3, #26
 800161c:	d817      	bhi.n	800164e <DATA_LOGGER_Main+0x10e>
				is_any_data_used = TRUE;
 800161e:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <DATA_LOGGER_Main+0x1d8>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8001624:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <DATA_LOGGER_Main+0x1d4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	b2d1      	uxtb	r1, r2
 800162c:	4a39      	ldr	r2, [pc, #228]	; (8001714 <DATA_LOGGER_Main+0x1d4>)
 800162e:	7011      	strb	r1, [r2, #0]
 8001630:	4933      	ldr	r1, [pc, #204]	; (8001700 <DATA_LOGGER_Main+0x1c0>)
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f9f6 	bl	8001a24 <DATA_LOGGER_Get_Data_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <DATA_LOGGER_Main+0x1c4>)
 800163e:	701a      	strb	r2, [r3, #0]
				TELEMETRY_Send_Data(tmp, tmp_len);
 8001640:	4b30      	ldr	r3, [pc, #192]	; (8001704 <DATA_LOGGER_Main+0x1c4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	482e      	ldr	r0, [pc, #184]	; (8001700 <DATA_LOGGER_Main+0x1c0>)
 8001648:	f005 fe9e 	bl	8007388 <TELEMETRY_Send_Data>
			break;
 800164c:	e04d      	b.n	80016ea <DATA_LOGGER_Main+0x1aa>
				if(is_any_data_used)
 800164e:	4b32      	ldr	r3, [pc, #200]	; (8001718 <DATA_LOGGER_Main+0x1d8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <DATA_LOGGER_Main+0x124>
					config_not_sent = FALSE ;
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <DATA_LOGGER_Main+0x1d0>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
					state = LOGGER_LOG ;
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <DATA_LOGGER_Main+0x1b8>)
 800165e:	2202      	movs	r2, #2
 8001660:	701a      	strb	r2, [r3, #0]
			break;
 8001662:	e042      	b.n	80016ea <DATA_LOGGER_Main+0x1aa>
					state = LOGGER_IDDLE ;
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <DATA_LOGGER_Main+0x1b8>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
			break;
 800166a:	e03e      	b.n	80016ea <DATA_LOGGER_Main+0x1aa>
			if(entrance)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <DATA_LOGGER_Main+0x13c>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);	//On reprend une fréquence plus importante pour l'envoit en flux continu
 8001672:	f242 7110 	movw	r1, #10000	; 0x2710
 8001676:	200d      	movs	r0, #13
 8001678:	f002 f830 	bl	80036dc <SCHEDULER_reschedule_task>
			if(stop_flag)
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <DATA_LOGGER_Main+0x1cc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <DATA_LOGGER_Main+0x14a>
				state = LOGGER_IDDLE;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <DATA_LOGGER_Main+0x1b8>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 800168a:	2300      	movs	r3, #0
 800168c:	71fb      	strb	r3, [r7, #7]
 800168e:	e027      	b.n	80016e0 <DATA_LOGGER_Main+0x1a0>
				if(data_list[d].used && (data_list[d].format != DATA_FORMAT_0B_BUTTON))
 8001690:	79fa      	ldrb	r2, [r7, #7]
 8001692:	4923      	ldr	r1, [pc, #140]	; (8001720 <DATA_LOGGER_Main+0x1e0>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	3314      	adds	r3, #20
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d019      	beq.n	80016da <DATA_LOGGER_Main+0x19a>
 80016a6:	79fa      	ldrb	r2, [r7, #7]
 80016a8:	491d      	ldr	r1, [pc, #116]	; (8001720 <DATA_LOGGER_Main+0x1e0>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	3309      	adds	r3, #9
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00e      	beq.n	80016da <DATA_LOGGER_Main+0x19a>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4910      	ldr	r1, [pc, #64]	; (8001700 <DATA_LOGGER_Main+0x1c0>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 f8c9 	bl	8001858 <DATA_LOGGER_Get_Data_Value>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <DATA_LOGGER_Main+0x1c4>)
 80016cc:	701a      	strb	r2, [r3, #0]
					TELEMETRY_Send_Data(tmp, tmp_len);
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <DATA_LOGGER_Main+0x1c4>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4619      	mov	r1, r3
 80016d4:	480a      	ldr	r0, [pc, #40]	; (8001700 <DATA_LOGGER_Main+0x1c0>)
 80016d6:	f005 fe57 	bl	8007388 <TELEMETRY_Send_Data>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	3301      	adds	r3, #1
 80016de:	71fb      	strb	r3, [r7, #7]
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b1a      	cmp	r3, #26
 80016e4:	d9d4      	bls.n	8001690 <DATA_LOGGER_Main+0x150>
			break;
 80016e6:	e000      	b.n	80016ea <DATA_LOGGER_Main+0x1aa>
			break;
 80016e8:	bf00      	nop
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000174 	.word	0x20000174
 80016f8:	20001f04 	.word	0x20001f04
 80016fc:	001e8480 	.word	0x001e8480
 8001700:	20001f10 	.word	0x20001f10
 8001704:	20001f24 	.word	0x20001f24
 8001708:	20001f08 	.word	0x20001f08
 800170c:	20001f0c 	.word	0x20001f0c
 8001710:	20000000 	.word	0x20000000
 8001714:	20001f25 	.word	0x20001f25
 8001718:	20001f28 	.word	0x20001f28
 800171c:	0007a120 	.word	0x0007a120
 8001720:	20001c7c 	.word	0x20001c7c

08001724 <DATA_LOGGER_Reception>:

void DATA_LOGGER_Reception(uint8_t * input_buffer){
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	73fb      	strb	r3, [r7, #15]

	switch(data_list[id].format){
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	4946      	ldr	r1, [pc, #280]	; (8001850 <DATA_LOGGER_Reception+0x12c>)
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	440b      	add	r3, r1
 8001740:	3309      	adds	r3, #9
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b29      	cmp	r3, #41	; 0x29
 8001746:	d87d      	bhi.n	8001844 <DATA_LOGGER_Reception+0x120>
 8001748:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <DATA_LOGGER_Reception+0x2c>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	080017f9 	.word	0x080017f9
 8001754:	08001845 	.word	0x08001845
 8001758:	08001845 	.word	0x08001845
 800175c:	08001845 	.word	0x08001845
 8001760:	08001845 	.word	0x08001845
 8001764:	08001845 	.word	0x08001845
 8001768:	08001845 	.word	0x08001845
 800176c:	08001845 	.word	0x08001845
 8001770:	08001845 	.word	0x08001845
 8001774:	08001845 	.word	0x08001845
 8001778:	08001845 	.word	0x08001845
 800177c:	08001845 	.word	0x08001845
 8001780:	08001845 	.word	0x08001845
 8001784:	08001845 	.word	0x08001845
 8001788:	08001845 	.word	0x08001845
 800178c:	08001845 	.word	0x08001845
 8001790:	08001845 	.word	0x08001845
 8001794:	08001845 	.word	0x08001845
 8001798:	08001845 	.word	0x08001845
 800179c:	08001845 	.word	0x08001845
 80017a0:	08001845 	.word	0x08001845
 80017a4:	08001845 	.word	0x08001845
 80017a8:	08001845 	.word	0x08001845
 80017ac:	08001845 	.word	0x08001845
 80017b0:	08001845 	.word	0x08001845
 80017b4:	08001845 	.word	0x08001845
 80017b8:	08001845 	.word	0x08001845
 80017bc:	08001845 	.word	0x08001845
 80017c0:	08001845 	.word	0x08001845
 80017c4:	08001845 	.word	0x08001845
 80017c8:	08001845 	.word	0x08001845
 80017cc:	08001845 	.word	0x08001845
 80017d0:	08001845 	.word	0x08001845
 80017d4:	08001845 	.word	0x08001845
 80017d8:	08001845 	.word	0x08001845
 80017dc:	08001845 	.word	0x08001845
 80017e0:	08001845 	.word	0x08001845
 80017e4:	08001845 	.word	0x08001845
 80017e8:	08001845 	.word	0x08001845
 80017ec:	08001845 	.word	0x08001845
 80017f0:	08001845 	.word	0x08001845
 80017f4:	08001845 	.word	0x08001845
		case DATA_FORMAT_0B_BUTTON:
			//We can create an action for each id
			switch(id)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	3b16      	subs	r3, #22
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d81f      	bhi.n	8001840 <DATA_LOGGER_Reception+0x11c>
 8001800:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <DATA_LOGGER_Reception+0xe4>)
 8001802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001806:	bf00      	nop
 8001808:	0800181d 	.word	0x0800181d
 800180c:	0800182d 	.word	0x0800182d
 8001810:	08001825 	.word	0x08001825
 8001814:	08001835 	.word	0x08001835
 8001818:	0800183b 	.word	0x0800183b
			{
				default:
					break;
				case DATA_ID_CONFIG_REQUEST:
					start_flag = TRUE;
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <DATA_LOGGER_Reception+0x130>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]
					break;
 8001822:	e00e      	b.n	8001842 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_ENABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8001824:	2001      	movs	r0, #1
 8001826:	f002 fe0f 	bl	8004448 <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 800182a:	e00a      	b.n	8001842 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_DISABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 800182c:	2000      	movs	r0, #0
 800182e:	f002 fe0b 	bl	8004448 <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 8001832:	e006      	b.n	8001842 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_START_TRANSFER:
					DATA_LOGGER_Start();
 8001834:	f7ff fe6c 	bl	8001510 <DATA_LOGGER_Start>
					break;
 8001838:	e003      	b.n	8001842 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_STOP_TRANSFER:
					DATA_LOGGER_Stop();
 800183a:	f7ff fe75 	bl	8001528 <DATA_LOGGER_Stop>
					break;
 800183e:	e000      	b.n	8001842 <DATA_LOGGER_Reception+0x11e>
					break;
 8001840:	bf00      	nop
			}
			break;
 8001842:	e000      	b.n	8001846 <DATA_LOGGER_Reception+0x122>
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			break;
		default:
			break;
 8001844:	bf00      	nop

	}
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20001c7c 	.word	0x20001c7c
 8001854:	20001f08 	.word	0x20001f08

08001858 <DATA_LOGGER_Get_Data_Value>:

uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer){
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	73fb      	strb	r3, [r7, #15]

//	uint16_t tmp_u16 = 0;
	int16_t tmp_16 = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	613b      	str	r3, [r7, #16]

	//Premier octet contient l'id
	buffer[0] = id ;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	701a      	strb	r2, [r3, #0]

	//Formatage de la donnée en fonction du type et du format
	switch(data_list[id].format){
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	4969      	ldr	r1, [pc, #420]	; (8001a1c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	3309      	adds	r3, #9
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	3b14      	subs	r3, #20
 8001888:	2b17      	cmp	r3, #23
 800188a:	f200 80af 	bhi.w	80019ec <DATA_LOGGER_Get_Data_Value+0x194>
 800188e:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <DATA_LOGGER_Get_Data_Value+0x3c>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	080018f5 	.word	0x080018f5
 8001898:	080019ed 	.word	0x080019ed
 800189c:	080019ed 	.word	0x080019ed
 80018a0:	08001911 	.word	0x08001911
 80018a4:	080019ed 	.word	0x080019ed
 80018a8:	080019ed 	.word	0x080019ed
 80018ac:	080019ed 	.word	0x080019ed
 80018b0:	080019ed 	.word	0x080019ed
 80018b4:	080019ed 	.word	0x080019ed
 80018b8:	080019ed 	.word	0x080019ed
 80018bc:	080019ed 	.word	0x080019ed
 80018c0:	080019ed 	.word	0x080019ed
 80018c4:	080019ed 	.word	0x080019ed
 80018c8:	080019ed 	.word	0x080019ed
 80018cc:	080019ed 	.word	0x080019ed
 80018d0:	080019ed 	.word	0x080019ed
 80018d4:	080019ed 	.word	0x080019ed
 80018d8:	080019ed 	.word	0x080019ed
 80018dc:	080019ed 	.word	0x080019ed
 80018e0:	080019ed 	.word	0x080019ed
 80018e4:	080019ed 	.word	0x080019ed
 80018e8:	08001941 	.word	0x08001941
 80018ec:	08001989 	.word	0x08001989
 80018f0:	080019bb 	.word	0x080019bb
		case DATA_FORMAT_8B:
			buffer[1] = *data_list[id].data ;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	4949      	ldr	r1, [pc, #292]	; (8001a1c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	3304      	adds	r3, #4
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	3301      	adds	r3, #1
 800190a:	7812      	ldrb	r2, [r2, #0]
 800190c:	701a      	strb	r2, [r3, #0]
			break;
 800190e:	e06e      	b.n	80019ee <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_8B_PWM:
			break;
		case DATA_FORMAT_8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	4942      	ldr	r1, [pc, #264]	; (8001a1c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3304      	adds	r3, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8001926:	edd7 7a04 	vldr	s15, [r7, #16]
 800192a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800192e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001932:	793b      	ldrb	r3, [r7, #4]
 8001934:	b25a      	sxtb	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3301      	adds	r3, #1
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]
			break;
 800193e:	e056      	b.n	80019ee <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_8B_FLOAT_1D:
			break;
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	4936      	ldr	r1, [pc, #216]	; (8001a1c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	3304      	adds	r3, #4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8001956:	edd7 7a04 	vldr	s15, [r7, #16]
 800195a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800195e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001966:	ee17 3a90 	vmov	r3, s15
 800196a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800196c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001970:	121b      	asrs	r3, r3, #8
 8001972:	b21a      	sxth	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	3301      	adds	r3, #1
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	3302      	adds	r3, #2
 8001980:	8afa      	ldrh	r2, [r7, #22]
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]
			break;
 8001986:	e032      	b.n	80019ee <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	4924      	ldr	r1, [pc, #144]	; (8001a1c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	3304      	adds	r3, #4
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800199e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019a2:	121b      	asrs	r3, r3, #8
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3302      	adds	r3, #2
 80019b2:	8afa      	ldrh	r2, [r7, #22]
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
			break;
 80019b8:	e019      	b.n	80019ee <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	4917      	ldr	r1, [pc, #92]	; (8001a1c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	3304      	adds	r3, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80019d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019d4:	121b      	asrs	r3, r3, #8
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	3302      	adds	r3, #2
 80019e4:	8afa      	ldrh	r2, [r7, #22]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]
			break;
 80019ea:	e000      	b.n	80019ee <DATA_LOGGER_Get_Data_Value+0x196>
		default:
			break;
 80019ec:	bf00      	nop
	}

	//Return the len of data
	return (data_list[id].format / 20) + 1;
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	490a      	ldr	r1, [pc, #40]	; (8001a1c <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	3309      	adds	r3, #9
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <DATA_LOGGER_Get_Data_Value+0x1c8>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2db      	uxtb	r3, r3

}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20001c7c 	.word	0x20001c7c
 8001a20:	cccccccd 	.word	0xcccccccd

08001a24 <DATA_LOGGER_Get_Data_Config>:

uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer){
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
	//New data so we start with 255
	buffer[0] = 255;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	701a      	strb	r2, [r3, #0]
	//Then name len
	buffer[1] = data_list[id].len_name;
 8001a36:	79fa      	ldrb	r2, [r7, #7]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	1c59      	adds	r1, r3, #1
 8001a3c:	481f      	ldr	r0, [pc, #124]	; (8001abc <DATA_LOGGER_Get_Data_Config+0x98>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4403      	add	r3, r0
 8001a48:	3310      	adds	r3, #16
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	700b      	strb	r3, [r1, #0]
	//Then format
	buffer[2] = data_list[id].format ;
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	1c99      	adds	r1, r3, #2
 8001a54:	4819      	ldr	r0, [pc, #100]	; (8001abc <DATA_LOGGER_Get_Data_Config+0x98>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4403      	add	r3, r0
 8001a60:	3309      	adds	r3, #9
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	700b      	strb	r3, [r1, #0]
	//Taille du nom
	buffer[3] = id	 ;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	3303      	adds	r3, #3
 8001a6a:	79fa      	ldrb	r2, [r7, #7]
 8001a6c:	701a      	strb	r2, [r3, #0]
	//Copie du nom
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	1d18      	adds	r0, r3, #4
 8001a72:	79fa      	ldrb	r2, [r7, #7]
 8001a74:	4911      	ldr	r1, [pc, #68]	; (8001abc <DATA_LOGGER_Get_Data_Config+0x98>)
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	330c      	adds	r3, #12
 8001a82:	681c      	ldr	r4, [r3, #0]
 8001a84:	79fa      	ldrb	r2, [r7, #7]
 8001a86:	490d      	ldr	r1, [pc, #52]	; (8001abc <DATA_LOGGER_Get_Data_Config+0x98>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3310      	adds	r3, #16
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4621      	mov	r1, r4
 8001a9a:	f00d feb5 	bl	800f808 <memcpy>

	//And that s it
	return 4 + data_list[id].len_name ;
 8001a9e:	79fa      	ldrb	r2, [r7, #7]
 8001aa0:	4906      	ldr	r1, [pc, #24]	; (8001abc <DATA_LOGGER_Get_Data_Config+0x98>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	3310      	adds	r3, #16
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	b2db      	uxtb	r3, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd90      	pop	{r4, r7, pc}
 8001abc:	20001c7c 	.word	0x20001c7c

08001ac0 <DATA_LOGGER_Get_Data>:

data_t * DATA_LOGGER_Get_Data(data_id_e id){
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 8001aca:	79fa      	ldrb	r2, [r7, #7]
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <DATA_LOGGER_Get_Data+0x24>)
 8001ad6:	4413      	add	r3, r2
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20001c7c 	.word	0x20001c7c

08001ae8 <angle_180>:
static float absolu(float x);
//static float acc_correction(float x);
static float angle_180(float x);


static float angle_180(float x){
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 180)
 8001af2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001af6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001b4c <angle_180+0x64>
 8001afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	dd08      	ble.n	8001b16 <angle_180+0x2e>
		x -= 360;
 8001b04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b08:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001b50 <angle_180+0x68>
 8001b0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b10:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b14:	e010      	b.n	8001b38 <angle_180+0x50>
	else if( x < -180)
 8001b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b1a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001b54 <angle_180+0x6c>
 8001b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	d507      	bpl.n	8001b38 <angle_180+0x50>
		x += 360 ;
 8001b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b2c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001b50 <angle_180+0x68>
 8001b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b34:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	ee07 3a90 	vmov	s15, r3
}
 8001b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	43340000 	.word	0x43340000
 8001b50:	43b40000 	.word	0x43b40000
 8001b54:	c3340000 	.word	0xc3340000

08001b58 <absolu>:

static float absolu(float x){
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	ed87 0a01 	vstr	s0, [r7, #4]
	if( x > 0)
 8001b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	dd02      	ble.n	8001b76 <absolu+0x1e>
		return x ;
 8001b70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b74:	e003      	b.n	8001b7e <absolu+0x26>
	else
		return -x ;
 8001b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b7a:	eef1 7a67 	vneg.f32	s15, s15
}
 8001b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <ORIENTATION_Init>:
//static float acc_correction(float x){
//	x = ( x > 0) ? 180 - x : -180 -x ;
//	return x ;
//}

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
	//Link data structures
	orientation->acc = acc ;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24
	orientation->gyro = gyro ;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	621a      	str	r2, [r3, #32]
	orientation->angular_velocity = gyro->filtered ;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f103 0208 	add.w	r2, r3, #8
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	60da      	str	r2, [r3, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
	orientation->periode = (float)1 / (float)frequency ;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	orientation->alpha = ORIENTATION_ALPHA ;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <ORIENTATION_Init+0x84>)
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e011      	b.n	8001bfe <ORIENTATION_Init+0x72>
	{
		orientation->angular_position[x] = 0 ;
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
		orientation->angular_velocity[x] = 0 ;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < 3; x++)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	ddea      	ble.n	8001bda <ORIENTATION_Init+0x4e>
	}

}
 8001c04:	bf00      	nop
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	3f7f7cee 	.word	0x3f7f7cee

08001c14 <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	//Just to make the code lighter
	acc_t * acc = orientation->acc ;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_t * gyro = orientation->gyro ;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	623b      	str	r3, [r7, #32]

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ACC_AXE_X] * acc->filtered[ACC_AXE_X] ;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c38:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ACC_AXE_Y] * acc->filtered[ACC_AXE_Y] ;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c54:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ACC_AXE_Z] * acc->filtered[ACC_AXE_Z] ;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c68:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total = sqrtf(acc_total);
 8001c74:	ed97 0a07 	vldr	s0, [r7, #28]
 8001c78:	f010 fc20 	bl	80124bc <sqrtf>
 8001c7c:	ed87 0a07 	vstr	s0, [r7, #28]

	if(acc_total)	//To avoid /0
 8001c80:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d049      	beq.n	8001d22 <ORIENTATION_Update+0x10e>
	{
		if(absolu(acc->filtered[ACC_AXE_X]) < acc_total)	//To avoid asin x with x greater than 1
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c94:	eeb0 0a67 	vmov.f32	s0, s15
 8001c98:	f7ff ff5e 	bl	8001b58 <absolu>
 8001c9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ca0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	dd15      	ble.n	8001cda <ORIENTATION_Update+0xc6>
			orientation->acc_angles[ACC_AXE_Y] = -asinf(acc->filtered[ACC_AXE_X] / acc_total) * 57.32f;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cb8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cbc:	eeb0 0a66 	vmov.f32	s0, s13
 8001cc0:	f010 fa40 	bl	8012144 <asinf>
 8001cc4:	eef0 7a40 	vmov.f32	s15, s0
 8001cc8:	eef1 7a67 	vneg.f32	s15, s15
 8001ccc:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001eb4 <ORIENTATION_Update+0x2a0>
 8001cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	edc3 7a05 	vstr	s15, [r3, #20]
		if(absolu(acc->filtered[ACC_AXE_Y]) < acc_total) 	//To avoid asin x with x greater than 1
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce4:	f7ff ff38 	bl	8001b58 <absolu>
 8001ce8:	eeb0 7a40 	vmov.f32	s14, s0
 8001cec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	dd13      	ble.n	8001d22 <ORIENTATION_Update+0x10e>
			orientation->acc_angles[ACC_AXE_X] = asinf(acc->filtered[ACC_AXE_Y] / acc_total) * 57.32f;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d08:	eeb0 0a66 	vmov.f32	s0, s13
 8001d0c:	f010 fa1a 	bl	8012144 <asinf>
 8001d10:	eeb0 7a40 	vmov.f32	s14, s0
 8001d14:	eddf 7a67 	vldr	s15, [pc, #412]	; 8001eb4 <ORIENTATION_Update+0x2a0>
 8001d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	edc3 7a04 	vstr	s15, [r3, #16]
//			orientation->acc_angles[ACC_AXE_Y] = acc_correction(orientation->acc_angles[ACC_AXE_Y]);
//		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 8001d22:	4b65      	ldr	r3, [pc, #404]	; (8001eb8 <ORIENTATION_Update+0x2a4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00f      	beq.n	8001d4a <ORIENTATION_Update+0x136>
	{
		orientation->angular_position[GYRO_AXE_X] = orientation->acc_angles[ACC_AXE_X] ;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->acc_angles[ACC_AXE_Y] ;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	605a      	str	r2, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] = 0 ;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
		first_use = FALSE ;
 8001d42:	4b5d      	ldr	r3, [pc, #372]	; (8001eb8 <ORIENTATION_Update+0x2a4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];



	}
}
 8001d48:	e0af      	b.n	8001eaa <ORIENTATION_Update+0x296>
		float dx = gyro->filtered[GYRO_AXE_X] * orientation->periode ;
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5a:	edc7 7a06 	vstr	s15, [r7, #24]
		float dy = gyro->filtered[GYRO_AXE_Y] * orientation->periode ;
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	edc7 7a05 	vstr	s15, [r7, #20]
		float dz = gyro->filtered[GYRO_AXE_Z] * orientation->periode ;
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d82:	edc7 7a04 	vstr	s15, [r7, #16]
		orientation->angular_position[GYRO_AXE_X] += dx ;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	ed93 7a00 	vldr	s14, [r3]
 8001d8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] += dy ;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] += dz ;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001db4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	edc3 7a02 	vstr	s15, [r3, #8]
		float sin_dz = sinf(0.017f * dz);
 8001dc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dc6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001ebc <ORIENTATION_Update+0x2a8>
 8001dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dce:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd2:	f010 f975 	bl	80120c0 <sinf>
 8001dd6:	ed87 0a03 	vstr	s0, [r7, #12]
		orientation->angular_position[GYRO_AXE_X] += sin_dz * orientation->angular_position[GYRO_AXE_Y] ;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	ed93 7a00 	vldr	s14, [r3]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] -= sin_dz * orientation->angular_position[GYRO_AXE_X] ;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edd3 6a00 	vldr	s13, [r3]
 8001e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_X] = angle_180(orientation->angular_position[GYRO_AXE_X]);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e20:	f7ff fe62 	bl	8001ae8 <angle_180>
 8001e24:	eef0 7a40 	vmov.f32	s15, s0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = angle_180(orientation->angular_position[GYRO_AXE_Y]);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e34:	eeb0 0a67 	vmov.f32	s0, s15
 8001e38:	f7ff fe56 	bl	8001ae8 <angle_180>
 8001e3c:	eef0 7a40 	vmov.f32	s15, s0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_X] = orientation->alpha * orientation->angular_position[GYRO_AXE_X] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_X];
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001eaa:	bf00      	nop
 8001eac:	3728      	adds	r7, #40	; 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	426547ae 	.word	0x426547ae
 8001eb8:	20000178 	.word	0x20000178
 8001ebc:	3c8b4396 	.word	0x3c8b4396

08001ec0 <arming_entrance>:
static state_arming_e state = 0;
static uint8_t state_vroum_vroum = 0;
static uint32_t next_change = 0 ;
static float elapsed = 0 ;

void arming_entrance(system_t * sys){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f002 fabd 	bl	8004448 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f002 fc12 	bl	80046f8 <REGULATION_POSITION_Set_Regulation_Mode>
	sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2228      	movs	r2, #40	; 0x28
 8001ed8:	f8a3 2b38 	strh.w	r2, [r3, #2872]	; 0xb38
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_10, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001edc:	2300      	movs	r3, #0
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f000 fb51 	bl	800258c <IHM_Set_Sequences>
	state = ARMING_THROTTLE_LOW ;
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <arming_entrance+0x40>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
	state_vroum_vroum= 0 ;
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <arming_entrance+0x44>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20001f2c 	.word	0x20001f2c
 8001f04:	20001f2d 	.word	0x20001f2d

08001f08 <arming_main>:

void arming_main(system_t * sys, uint32_t time_us){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]



	switch(state){
 8001f12:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <arming_main+0x1f8>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d019      	beq.n	8001f4e <arming_main+0x46>
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d036      	beq.n	8001f8c <arming_main+0x84>
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d000      	beq.n	8001f24 <arming_main+0x1c>
				default:
					break;
			}
			break;
	}
}
 8001f22:	e0e8      	b.n	80020f6 <arming_main+0x1ee>
			if(sys->radio.controller.channels[2]<1100){
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	f240 424b 	movw	r2, #1099	; 0x44b
 8001f32:	4293      	cmp	r3, r2
 8001f34:	f200 80dc 	bhi.w	80020f0 <arming_main+0x1e8>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_11, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 8001f40:	2000      	movs	r0, #0
 8001f42:	f000 fb23 	bl	800258c <IHM_Set_Sequences>
				state = ARMING_STICK_ON_THE_RIGHT;
 8001f46:	4b6e      	ldr	r3, [pc, #440]	; (8002100 <arming_main+0x1f8>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
			break;
 8001f4c:	e0d0      	b.n	80020f0 <arming_main+0x1e8>
			if(sys->radio.controller.channels[3]>1950 && sys->radio.controller.channels[2]<1100){
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8001f54:	3306      	adds	r3, #6
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	f240 729e 	movw	r2, #1950	; 0x79e
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f240 80c9 	bls.w	80020f4 <arming_main+0x1ec>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8001f68:	3304      	adds	r3, #4
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	f240 424b 	movw	r2, #1099	; 0x44b
 8001f70:	4293      	cmp	r3, r2
 8001f72:	f200 80bf 	bhi.w	80020f4 <arming_main+0x1ec>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_ON, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001f76:	2300      	movs	r3, #0
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 fb04 	bl	800258c <IHM_Set_Sequences>
				state = ARMING_VROUM_VOUM;
 8001f84:	4b5e      	ldr	r3, [pc, #376]	; (8002100 <arming_main+0x1f8>)
 8001f86:	2202      	movs	r2, #2
 8001f88:	701a      	strb	r2, [r3, #0]
			break;
 8001f8a:	e0b3      	b.n	80020f4 <arming_main+0x1ec>
			switch(state_vroum_vroum){
 8001f8c:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <arming_main+0x1fc>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	f200 80a3 	bhi.w	80020dc <arming_main+0x1d4>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <arming_main+0x94>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fb1 	.word	0x08001fb1
 8001fa0:	08001fd5 	.word	0x08001fd5
 8001fa4:	08002063 	.word	0x08002063
 8001fa8:	08002091 	.word	0x08002091
 8001fac:	080020bf 	.word	0x080020bf
					next_change = time_us + PERIODE_1;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 8001fb6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fba:	4a53      	ldr	r2, [pc, #332]	; (8002108 <arming_main+0x200>)
 8001fbc:	6013      	str	r3, [r2, #0]
					sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	22c8      	movs	r2, #200	; 0xc8
 8001fc2:	f8a3 2b38 	strh.w	r2, [r3, #2872]	; 0xb38
					state_vroum_vroum++;
 8001fc6:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <arming_main+0x1fc>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <arming_main+0x1fc>)
 8001fd0:	701a      	strb	r2, [r3, #0]
					break;
 8001fd2:	e08c      	b.n	80020ee <arming_main+0x1e6>
					elapsed = (float)time_us - (float)(next_change-PERIODE_1);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fde:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <arming_main+0x200>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f5a3 23c3 	sub.w	r3, r3, #399360	; 0x61800
 8001fe6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff6:	4b45      	ldr	r3, [pc, #276]	; (800210c <arming_main+0x204>)
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
					elapsed /= (float)PERIODE_1;
 8001ffc:	4b43      	ldr	r3, [pc, #268]	; (800210c <arming_main+0x204>)
 8001ffe:	ed93 7a00 	vldr	s14, [r3]
 8002002:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002110 <arming_main+0x208>
 8002006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200a:	4b40      	ldr	r3, [pc, #256]	; (800210c <arming_main+0x204>)
 800200c:	edc3 7a00 	vstr	s15, [r3]
					sys->regulation.position.consigne = MOTORS_LOW_POWER + (uint32_t)((float)(MOTORS_HIGH_POWER - MOTORS_LOW_POWER) * elapsed);
 8002010:	4b3e      	ldr	r3, [pc, #248]	; (800210c <arming_main+0x204>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002114 <arming_main+0x20c>
 800201a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800201e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002022:	ee17 3a90 	vmov	r3, s15
 8002026:	b29b      	uxth	r3, r3
 8002028:	3328      	adds	r3, #40	; 0x28
 800202a:	b29b      	uxth	r3, r3
 800202c:	b21a      	sxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8a3 2b38 	strh.w	r2, [r3, #2872]	; 0xb38
					if(time_us > next_change){
 8002034:	4b34      	ldr	r3, [pc, #208]	; (8002108 <arming_main+0x200>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d950      	bls.n	80020e0 <arming_main+0x1d8>
						next_change = time_us + PERIODE_2;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8002044:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8002048:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <arming_main+0x200>)
 800204a:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2228      	movs	r2, #40	; 0x28
 8002050:	f8a3 2b38 	strh.w	r2, [r3, #2872]	; 0xb38
						state_vroum_vroum++;
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <arming_main+0x1fc>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b29      	ldr	r3, [pc, #164]	; (8002104 <arming_main+0x1fc>)
 800205e:	701a      	strb	r2, [r3, #0]
					break;
 8002060:	e03e      	b.n	80020e0 <arming_main+0x1d8>
					if(time_us > next_change){
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <arming_main+0x200>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d93b      	bls.n	80020e4 <arming_main+0x1dc>
						next_change = time_us + PERIODE_3;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 8002072:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002076:	4a24      	ldr	r2, [pc, #144]	; (8002108 <arming_main+0x200>)
 8002078:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	22c8      	movs	r2, #200	; 0xc8
 800207e:	f8a3 2b38 	strh.w	r2, [r3, #2872]	; 0xb38
						state_vroum_vroum++;
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <arming_main+0x1fc>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <arming_main+0x1fc>)
 800208c:	701a      	strb	r2, [r3, #0]
					break;
 800208e:	e029      	b.n	80020e4 <arming_main+0x1dc>
					if(time_us > next_change){
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <arming_main+0x200>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d926      	bls.n	80020e8 <arming_main+0x1e0>
						next_change = time_us + PERIODE_4;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 80020a0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80020a4:	4a18      	ldr	r2, [pc, #96]	; (8002108 <arming_main+0x200>)
 80020a6:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2228      	movs	r2, #40	; 0x28
 80020ac:	f8a3 2b38 	strh.w	r2, [r3, #2872]	; 0xb38
						state_vroum_vroum++;
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <arming_main+0x1fc>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <arming_main+0x1fc>)
 80020ba:	701a      	strb	r2, [r3, #0]
					break;
 80020bc:	e014      	b.n	80020e8 <arming_main+0x1e0>
					if(time_us > next_change){
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <arming_main+0x200>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d911      	bls.n	80020ec <arming_main+0x1e4>
						EVENT_Set_flag(FLAG_ARMED);
 80020c8:	201d      	movs	r0, #29
 80020ca:	f000 fe83 	bl	8002dd4 <EVENT_Set_flag>
						state_vroum_vroum++;
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <arming_main+0x1fc>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <arming_main+0x1fc>)
 80020d8:	701a      	strb	r2, [r3, #0]
					break;
 80020da:	e007      	b.n	80020ec <arming_main+0x1e4>
					break;
 80020dc:	bf00      	nop
 80020de:	e00a      	b.n	80020f6 <arming_main+0x1ee>
					break;
 80020e0:	bf00      	nop
 80020e2:	e008      	b.n	80020f6 <arming_main+0x1ee>
					break;
 80020e4:	bf00      	nop
 80020e6:	e006      	b.n	80020f6 <arming_main+0x1ee>
					break;
 80020e8:	bf00      	nop
 80020ea:	e004      	b.n	80020f6 <arming_main+0x1ee>
					break;
 80020ec:	bf00      	nop
			break;
 80020ee:	e002      	b.n	80020f6 <arming_main+0x1ee>
			break;
 80020f0:	bf00      	nop
 80020f2:	e000      	b.n	80020f6 <arming_main+0x1ee>
			break;
 80020f4:	bf00      	nop
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20001f2c 	.word	0x20001f2c
 8002104:	20001f2d 	.word	0x20001f2d
 8002108:	20001f30 	.word	0x20001f30
 800210c:	20001f34 	.word	0x20001f34
 8002110:	48c35000 	.word	0x48c35000
 8002114:	43200000 	.word	0x43200000

08002118 <FLIGHT_MODE_Init>:
		[FLIGHT_MODE_GYRO_ACC_CALIBRATION] = 	DEF_FLIGHT_MODE(FLIGHT_MODE_GYRO_ACC_CALIBRATION, 		gyro_acc_calibration_entrance, 	gyro_acc_calibration_main),

};

//	-------------------------	Public functions	-------------------------
void FLIGHT_MODE_Init(system_t * sys_){
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	sys = sys_;
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <FLIGHT_MODE_Init+0x24>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
	sys->soft.flight_mode = &current_flight_mode;
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <FLIGHT_MODE_Init+0x24>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a05      	ldr	r2, [pc, #20]	; (8002140 <FLIGHT_MODE_Init+0x28>)
 800212c:	f8c3 2b44 	str.w	r2, [r3, #2884]	; 0xb44
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	20001f38 	.word	0x20001f38
 8002140:	20001f3c 	.word	0x20001f3c

08002144 <FLIGHT_MODE_Set_Flight_Mode>:

//Dont call it from an it plz for now ..
void FLIGHT_MODE_Set_Flight_Mode(flight_modes_names_e new){
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
	next_flight_mode = new ;
 800214e:	4a04      	ldr	r2, [pc, #16]	; (8002160 <FLIGHT_MODE_Set_Flight_Mode+0x1c>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	7013      	strb	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20001f3d 	.word	0x20001f3d

08002164 <FLIGHT_MODE_Main>:

void FLIGHT_MODE_Main(uint32_t time_us){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	//Check if we have to change the current flight mode
	if(next_flight_mode != current_flight_mode){
 800216c:	4b25      	ldr	r3, [pc, #148]	; (8002204 <FLIGHT_MODE_Main+0xa0>)
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <FLIGHT_MODE_Main+0xa4>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d02b      	beq.n	80021d0 <FLIGHT_MODE_Main+0x6c>

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(flights_modes[current_flight_mode].function_leave != NULL)
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <FLIGHT_MODE_Main+0xa4>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4a23      	ldr	r2, [pc, #140]	; (800220c <FLIGHT_MODE_Main+0xa8>)
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4413      	add	r3, r2
 8002182:	330c      	adds	r3, #12
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <FLIGHT_MODE_Main+0x3c>
			flights_modes[current_flight_mode].function_leave(sys);
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <FLIGHT_MODE_Main+0xa4>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	4a1f      	ldr	r2, [pc, #124]	; (800220c <FLIGHT_MODE_Main+0xa8>)
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	4413      	add	r3, r2
 8002194:	330c      	adds	r3, #12
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <FLIGHT_MODE_Main+0xac>)
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	4610      	mov	r0, r2
 800219e:	4798      	blx	r3

		//Call the entrance function associated to the next flight mode if it exists
		if(flights_modes[next_flight_mode].function_entrance != NULL)
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <FLIGHT_MODE_Main+0xa0>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4a19      	ldr	r2, [pc, #100]	; (800220c <FLIGHT_MODE_Main+0xa8>)
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	4413      	add	r3, r2
 80021aa:	3304      	adds	r3, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <FLIGHT_MODE_Main+0x64>
			flights_modes[next_flight_mode].function_entrance(sys);
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <FLIGHT_MODE_Main+0xa0>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <FLIGHT_MODE_Main+0xa8>)
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	4413      	add	r3, r2
 80021bc:	3304      	adds	r3, #4
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a13      	ldr	r2, [pc, #76]	; (8002210 <FLIGHT_MODE_Main+0xac>)
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	4610      	mov	r0, r2
 80021c6:	4798      	blx	r3

		//Change the current flight mode
		current_flight_mode = next_flight_mode ;
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <FLIGHT_MODE_Main+0xa0>)
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <FLIGHT_MODE_Main+0xa4>)
 80021ce:	701a      	strb	r2, [r3, #0]
	}
	//Call the function associated to the current flight mode
	if(flights_modes[next_flight_mode].function_main != NULL)
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <FLIGHT_MODE_Main+0xa0>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <FLIGHT_MODE_Main+0xa8>)
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	4413      	add	r3, r2
 80021da:	3308      	adds	r3, #8
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <FLIGHT_MODE_Main+0x96>
		flights_modes[current_flight_mode].function_main(sys, time_us);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <FLIGHT_MODE_Main+0xa4>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <FLIGHT_MODE_Main+0xa8>)
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4413      	add	r3, r2
 80021ec:	3308      	adds	r3, #8
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <FLIGHT_MODE_Main+0xac>)
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4610      	mov	r0, r2
 80021f8:	4798      	blx	r3

}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20001f3d 	.word	0x20001f3d
 8002208:	20001f3c 	.word	0x20001f3c
 800220c:	2000017c 	.word	0x2000017c
 8002210:	20001f38 	.word	0x20001f38

08002214 <gyro_acc_calibration_entrance>:

#include "Flight_mode.h"
#include "../OS/events/events.h"
#include "../OS/events/flags.h"

void gyro_acc_calibration_entrance(system_t * sys){
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_3);
 800221c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	2001      	movs	r0, #1
 8002226:	f000 f9b1 	bl	800258c <IHM_Set_Sequences>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <gyro_acc_calibration_main>:
void gyro_acc_calibration_main(system_t * sys, uint32_t time_us){
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]

	if(GYRO_calibrate(&sys->sensors.gyro, 1500)){	//The high lvl runs at 500 HZ so 1500 by 500 => 3 secs of calibration
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3330      	adds	r3, #48	; 0x30
 8002240:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002244:	4618      	mov	r0, r3
 8002246:	f002 fc3b 	bl	8004ac0 <GYRO_calibrate>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d009      	beq.n	8002264 <gyro_acc_calibration_main+0x32>
		EVENT_Set_flag(FLAG_GYRO_CALI_DONE);
 8002250:	2020      	movs	r0, #32
 8002252:	f000 fdbf 	bl	8002dd4 <EVENT_Set_flag>
		IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8002256:	2300      	movs	r3, #0
 8002258:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800225c:	2100      	movs	r1, #0
 800225e:	2001      	movs	r0, #1
 8002260:	f000 f994 	bl	800258c <IHM_Set_Sequences>
	}

}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <manual_accro_entrance>:
 */


#include "Flight_mode.h"

void manual_accro_entrance(system_t * sys){
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8002274:	2001      	movs	r0, #1
 8002276:	f002 f8e7 	bl	8004448 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 800227a:	2001      	movs	r0, #1
 800227c:	f002 fa3c 	bl	80046f8 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_1);
 8002280:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	2000      	movs	r0, #0
 800228a:	f000 f97f 	bl	800258c <IHM_Set_Sequences>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <manual_accro_main>:

void manual_accro_main(system_t * sys, uint32_t time_us){
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL] = -((float)sys->radio.controller.channels[0]-1500)*1.5f;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002354 <manual_accro_main+0xbc>
 80022b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022ba:	eef1 7a67 	vneg.f32	s15, s15
 80022be:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80022c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f603 332c 	addw	r3, r3, #2860	; 0xb2c
 80022cc:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH] = -((float)sys->radio.controller.channels[1]-1500)*1.5f;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 80022d6:	3302      	adds	r3, #2
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002354 <manual_accro_main+0xbc>
 80022e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022ea:	eef1 7a67 	vneg.f32	s15, s15
 80022ee:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80022f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 80022fc:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002306:	3306      	adds	r3, #6
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002312:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002354 <manual_accro_main+0xbc>
 8002316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800231a:	eef1 7a67 	vneg.f32	s15, s15
 800231e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002358 <manual_accro_main+0xc0>
 8002322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 800232c:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002336:	3304      	adds	r3, #4
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800233e:	b29b      	uxth	r3, r3
 8002340:	b21a      	sxth	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8a3 2b38 	strh.w	r2, [r3, #2872]	; 0xb38
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	44bb8000 	.word	0x44bb8000
 8002358:	3f99999a 	.word	0x3f99999a

0800235c <manual_angle_entrance>:
 *      Author: Théo
 */

#include "Flight_mode.h"

void manual_angle_entrance(system_t * sys){
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ANGLE);
 8002364:	2002      	movs	r0, #2
 8002366:	f002 f86f 	bl	8004448 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 800236a:	2001      	movs	r0, #1
 800236c:	f002 f9c4 	bl	80046f8 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_7);
 8002370:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 8002374:	2200      	movs	r2, #0
 8002376:	2100      	movs	r1, #0
 8002378:	2000      	movs	r0, #0
 800237a:	f000 f907 	bl	800258c <IHM_Set_Sequences>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <manual_angle_main>:
void manual_angle_main(system_t * sys, uint32_t time_us){
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL] = -((float)sys->radio.controller.channels[0]-1500)*0.14f;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002444 <manual_angle_main+0xbc>
 80023a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023aa:	eef1 7a67 	vneg.f32	s15, s15
 80023ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002448 <manual_angle_main+0xc0>
 80023b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 80023bc:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH] = -((float)sys->radio.controller.channels[1]-1500)*0.14f;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 80023c6:	3302      	adds	r3, #2
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002444 <manual_angle_main+0xbc>
 80023d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023da:	eef1 7a67 	vneg.f32	s15, s15
 80023de:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002448 <manual_angle_main+0xc0>
 80023e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 80023ec:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 80023f6:	3306      	adds	r3, #6
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002402:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002444 <manual_angle_main+0xbc>
 8002406:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800240a:	eef1 7a67 	vneg.f32	s15, s15
 800240e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800244c <manual_angle_main+0xc4>
 8002412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 800241c:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002426:	3304      	adds	r3, #4
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800242e:	b29b      	uxth	r3, r3
 8002430:	b21a      	sxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8a3 2b38 	strh.w	r2, [r3, #2872]	; 0xb38
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	44bb8000 	.word	0x44bb8000
 8002448:	3e0f5c29 	.word	0x3e0f5c29
 800244c:	3f99999a 	.word	0x3f99999a

08002450 <on_the_ground_entrance>:
 *  Created on: 19 déc. 2020
 *      Author: theom
 */
#include "Flight_mode.h"

void on_the_ground_entrance(system_t * sys){
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8002458:	2000      	movs	r0, #0
 800245a:	f001 fff5 	bl	8004448 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_OFF);
 800245e:	2000      	movs	r0, #0
 8002460:	f002 f94a 	bl	80046f8 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8002464:	2300      	movs	r3, #0
 8002466:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800246a:	2100      	movs	r1, #0
 800246c:	2000      	movs	r0, #0
 800246e:	f000 f88d 	bl	800258c <IHM_Set_Sequences>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <on_the_ground_main>:
void on_the_ground_main(system_t * sys, uint32_t time_us){
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <IHM_Init>:





void IHM_Init(Ihm_t * ihm_){
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	ihm = ihm_;
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <IHM_Init+0x1c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20001f40 	.word	0x20001f40

080024b0 <IHM_Led_Init>:

void IHM_Led_Init(led_name_e name, uint32_t periode, uint16_t pin, led_output_logic_e output_logic){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6039      	str	r1, [r7, #0]
 80024b8:	4611      	mov	r1, r2
 80024ba:	461a      	mov	r2, r3
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
 80024c0:	460b      	mov	r3, r1
 80024c2:	80bb      	strh	r3, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	71bb      	strb	r3, [r7, #6]
	ihm->leds[name].periode = periode ;
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <IHM_Led_Init+0x80>)
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	79fa      	ldrb	r2, [r7, #7]
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	330c      	adds	r3, #12
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	601a      	str	r2, [r3, #0]
	ihm->leds[name].pin = pin ;
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <IHM_Led_Init+0x80>)
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	79fa      	ldrb	r2, [r7, #7]
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	440b      	add	r3, r1
 80024ee:	3310      	adds	r3, #16
 80024f0:	88ba      	ldrh	r2, [r7, #4]
 80024f2:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].output_logic = output_logic ;
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <IHM_Led_Init+0x80>)
 80024f6:	6819      	ldr	r1, [r3, #0]
 80024f8:	79fa      	ldrb	r2, [r7, #7]
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	3314      	adds	r3, #20
 8002506:	79ba      	ldrb	r2, [r7, #6]
 8002508:	701a      	strb	r2, [r3, #0]

	//Set the outputs low
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e008      	b.n	8002522 <IHM_Led_Init+0x72>
		IHM_Set_Sequence(name, c, SEQUENCE_LED_OFF);
 8002510:	7bf9      	ldrb	r1, [r7, #15]
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2200      	movs	r2, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f80c 	bl	8002534 <IHM_Set_Sequence>
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	3301      	adds	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d9f3      	bls.n	8002510 <IHM_Led_Init+0x60>
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20001f40 	.word	0x20001f40

08002534 <IHM_Set_Sequence>:

void IHM_Set_Sequence(led_name_e name, led_color_e color, uint16_t sequence){
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	460b      	mov	r3, r1
 8002540:	71bb      	strb	r3, [r7, #6]
 8002542:	4613      	mov	r3, r2
 8002544:	80bb      	strh	r3, [r7, #4]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE)
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <IHM_Set_Sequence+0x54>)
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	79fa      	ldrb	r2, [r7, #7]
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	3314      	adds	r3, #20
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d102      	bne.n	8002564 <IHM_Set_Sequence+0x30>
		sequence = ~sequence ;
 800255e:	88bb      	ldrh	r3, [r7, #4]
 8002560:	43db      	mvns	r3, r3
 8002562:	80bb      	strh	r3, [r7, #4]
	ihm->leds[name].seqs[color] = sequence ;
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <IHM_Set_Sequence+0x54>)
 8002566:	6819      	ldr	r1, [r3, #0]
 8002568:	79fa      	ldrb	r2, [r7, #7]
 800256a:	79b8      	ldrb	r0, [r7, #6]
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4403      	add	r3, r0
 8002576:	88ba      	ldrh	r2, [r7, #4]
 8002578:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	20001f40 	.word	0x20001f40

0800258c <IHM_Set_Sequences>:

void IHM_Set_Sequences(led_name_e name, uint16_t sequence_red, uint16_t sequence_green, uint16_t sequence_blue){
 800258c:	b490      	push	{r4, r7}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4604      	mov	r4, r0
 8002594:	4608      	mov	r0, r1
 8002596:	4611      	mov	r1, r2
 8002598:	461a      	mov	r2, r3
 800259a:	4623      	mov	r3, r4
 800259c:	71fb      	strb	r3, [r7, #7]
 800259e:	4603      	mov	r3, r0
 80025a0:	80bb      	strh	r3, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	807b      	strh	r3, [r7, #2]
 80025a6:	4613      	mov	r3, r2
 80025a8:	803b      	strh	r3, [r7, #0]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE){
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <IHM_Set_Sequences+0x94>)
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	3314      	adds	r3, #20
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d108      	bne.n	80025d4 <IHM_Set_Sequences+0x48>
		sequence_red = ~sequence_red ;
 80025c2:	88bb      	ldrh	r3, [r7, #4]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	80bb      	strh	r3, [r7, #4]
		sequence_green = ~sequence_green ;
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	807b      	strh	r3, [r7, #2]
		sequence_blue = ~sequence_blue ;
 80025ce:	883b      	ldrh	r3, [r7, #0]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	803b      	strh	r3, [r7, #0]
	}
	ihm->leds[name].seqs[LED_COLOR_RED] = sequence_red ;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <IHM_Set_Sequences+0x94>)
 80025d6:	6819      	ldr	r1, [r3, #0]
 80025d8:	79fa      	ldrb	r2, [r7, #7]
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	88ba      	ldrh	r2, [r7, #4]
 80025e6:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_GREEN] = sequence_green ;
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <IHM_Set_Sequences+0x94>)
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	79fa      	ldrb	r2, [r7, #7]
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	440b      	add	r3, r1
 80025f8:	3302      	adds	r3, #2
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_BLUE] = sequence_blue ;
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <IHM_Set_Sequences+0x94>)
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	79fa      	ldrb	r2, [r7, #7]
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	3304      	adds	r3, #4
 8002610:	883a      	ldrh	r2, [r7, #0]
 8002612:	801a      	strh	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bc90      	pop	{r4, r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20001f40 	.word	0x20001f40

08002624 <IHM_Update>:

void IHM_Update(void){
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0

	//Increment the counter each time (since we re called at 1kHz
	compteur ++ ;
 800262a:	4b8a      	ldr	r3, [pc, #552]	; (8002854 <IHM_Update+0x230>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	4a88      	ldr	r2, [pc, #544]	; (8002854 <IHM_Update+0x230>)
 8002632:	6013      	str	r3, [r2, #0]
	//Update the current color and the current led
	current_led = compteur % LED_COUNT ;
 8002634:	4b87      	ldr	r3, [pc, #540]	; (8002854 <IHM_Update+0x230>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b85      	ldr	r3, [pc, #532]	; (8002858 <IHM_Update+0x234>)
 8002642:	701a      	strb	r2, [r3, #0]

	//Check if we have to change the current bit
	if(compteur > ihm->leds[current_led].next_time)
 8002644:	4b85      	ldr	r3, [pc, #532]	; (800285c <IHM_Update+0x238>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b83      	ldr	r3, [pc, #524]	; (8002858 <IHM_Update+0x234>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	460b      	mov	r3, r1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	440b      	add	r3, r1
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	3308      	adds	r3, #8
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b7d      	ldr	r3, [pc, #500]	; (8002854 <IHM_Update+0x230>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d259      	bcs.n	8002718 <IHM_Update+0xf4>
	{
		ihm->leds[current_led].current_bit >>= 1;
 8002664:	4b7d      	ldr	r3, [pc, #500]	; (800285c <IHM_Update+0x238>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b7b      	ldr	r3, [pc, #492]	; (8002858 <IHM_Update+0x234>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	460b      	mov	r3, r1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	440b      	add	r3, r1
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	3312      	adds	r3, #18
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	4a77      	ldr	r2, [pc, #476]	; (800285c <IHM_Update+0x238>)
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	4975      	ldr	r1, [pc, #468]	; (8002858 <IHM_Update+0x234>)
 8002682:	7809      	ldrb	r1, [r1, #0]
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	b298      	uxth	r0, r3
 8002688:	460b      	mov	r3, r1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	440b      	add	r3, r1
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	3312      	adds	r3, #18
 8002694:	4602      	mov	r2, r0
 8002696:	801a      	strh	r2, [r3, #0]
		ihm->leds[current_led].next_time += ihm->leds[current_led].periode ;
 8002698:	4b70      	ldr	r3, [pc, #448]	; (800285c <IHM_Update+0x238>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b6e      	ldr	r3, [pc, #440]	; (8002858 <IHM_Update+0x234>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	460b      	mov	r3, r1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	440b      	add	r3, r1
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	3308      	adds	r3, #8
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b6a      	ldr	r3, [pc, #424]	; (800285c <IHM_Update+0x238>)
 80026b2:	6819      	ldr	r1, [r3, #0]
 80026b4:	4b68      	ldr	r3, [pc, #416]	; (8002858 <IHM_Update+0x234>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4403      	add	r3, r0
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	330c      	adds	r3, #12
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4964      	ldr	r1, [pc, #400]	; (800285c <IHM_Update+0x238>)
 80026ca:	6809      	ldr	r1, [r1, #0]
 80026cc:	4862      	ldr	r0, [pc, #392]	; (8002858 <IHM_Update+0x234>)
 80026ce:	7800      	ldrb	r0, [r0, #0]
 80026d0:	441a      	add	r2, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4403      	add	r3, r0
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	3308      	adds	r3, #8
 80026de:	601a      	str	r2, [r3, #0]

		if(ihm->leds[current_led].current_bit == 0)
 80026e0:	4b5e      	ldr	r3, [pc, #376]	; (800285c <IHM_Update+0x238>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b5c      	ldr	r3, [pc, #368]	; (8002858 <IHM_Update+0x234>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	460b      	mov	r3, r1
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	440b      	add	r3, r1
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	3312      	adds	r3, #18
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10d      	bne.n	8002718 <IHM_Update+0xf4>
			ihm->leds[current_led].current_bit = 1 << (SEQUENCE_LEN-1);
 80026fc:	4b57      	ldr	r3, [pc, #348]	; (800285c <IHM_Update+0x238>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b55      	ldr	r3, [pc, #340]	; (8002858 <IHM_Update+0x234>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	460b      	mov	r3, r1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	440b      	add	r3, r1
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	3312      	adds	r3, #18
 8002712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002716:	801a      	strh	r2, [r3, #0]
	}

	uint16_t pins_high = 0 ;
 8002718:	2300      	movs	r3, #0
 800271a:	80fb      	strh	r3, [r7, #6]
	uint16_t pins_low = 0 ;
 800271c:	2300      	movs	r3, #0
 800271e:	80bb      	strh	r3, [r7, #4]
	uint16_t current_bit =  ihm->leds[current_led].current_bit ;
 8002720:	4b4e      	ldr	r3, [pc, #312]	; (800285c <IHM_Update+0x238>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b4c      	ldr	r3, [pc, #304]	; (8002858 <IHM_Update+0x234>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	460b      	mov	r3, r1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	3312      	adds	r3, #18
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	803b      	strh	r3, [r7, #0]

	//For each color, check if we have to set outputs high or low
	if(ihm->leds[current_led].seqs[LED_COLOR_RED] & current_bit)		//Red pin high ?
 800273a:	4b48      	ldr	r3, [pc, #288]	; (800285c <IHM_Update+0x238>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b46      	ldr	r3, [pc, #280]	; (8002858 <IHM_Update+0x234>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	4619      	mov	r1, r3
 8002744:	460b      	mov	r3, r1
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	440b      	add	r3, r1
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	881a      	ldrh	r2, [r3, #0]
 8002750:	883b      	ldrh	r3, [r7, #0]
 8002752:	4013      	ands	r3, r2
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <IHM_Update+0x142>
		pins_high += pin_color[LED_COLOR_RED];
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <IHM_Update+0x23c>)
 800275c:	881a      	ldrh	r2, [r3, #0]
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	4413      	add	r3, r2
 8002762:	80fb      	strh	r3, [r7, #6]
 8002764:	e004      	b.n	8002770 <IHM_Update+0x14c>
	else
		pins_low += pin_color[LED_COLOR_RED];
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <IHM_Update+0x23c>)
 8002768:	881a      	ldrh	r2, [r3, #0]
 800276a:	88bb      	ldrh	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_GREEN] & current_bit)		//Green pin High ?
 8002770:	4b3a      	ldr	r3, [pc, #232]	; (800285c <IHM_Update+0x238>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b38      	ldr	r3, [pc, #224]	; (8002858 <IHM_Update+0x234>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	460b      	mov	r3, r1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	440b      	add	r3, r1
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	3302      	adds	r3, #2
 8002786:	881a      	ldrh	r2, [r3, #0]
 8002788:	883b      	ldrh	r3, [r7, #0]
 800278a:	4013      	ands	r3, r2
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <IHM_Update+0x17a>
		pins_high += pin_color[LED_COLOR_GREEN];
 8002792:	4b33      	ldr	r3, [pc, #204]	; (8002860 <IHM_Update+0x23c>)
 8002794:	885a      	ldrh	r2, [r3, #2]
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	4413      	add	r3, r2
 800279a:	80fb      	strh	r3, [r7, #6]
 800279c:	e004      	b.n	80027a8 <IHM_Update+0x184>
	else
		pins_low += pin_color[LED_COLOR_GREEN];
 800279e:	4b30      	ldr	r3, [pc, #192]	; (8002860 <IHM_Update+0x23c>)
 80027a0:	885a      	ldrh	r2, [r3, #2]
 80027a2:	88bb      	ldrh	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_BLUE] & current_bit)		//Blue pin high ?
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <IHM_Update+0x238>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <IHM_Update+0x234>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	460b      	mov	r3, r1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	440b      	add	r3, r1
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	3304      	adds	r3, #4
 80027be:	881a      	ldrh	r2, [r3, #0]
 80027c0:	883b      	ldrh	r3, [r7, #0]
 80027c2:	4013      	ands	r3, r2
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <IHM_Update+0x1b2>
		pins_high |= pin_color[LED_COLOR_BLUE];
 80027ca:	4b25      	ldr	r3, [pc, #148]	; (8002860 <IHM_Update+0x23c>)
 80027cc:	889a      	ldrh	r2, [r3, #4]
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	80fb      	strh	r3, [r7, #6]
 80027d4:	e004      	b.n	80027e0 <IHM_Update+0x1bc>
	else
		pins_low |= pin_color[LED_COLOR_BLUE];
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <IHM_Update+0x23c>)
 80027d8:	889a      	ldrh	r2, [r3, #4]
 80027da:	88bb      	ldrh	r3, [r7, #4]
 80027dc:	4313      	orrs	r3, r2
 80027de:	80bb      	strh	r3, [r7, #4]

	//Then we activate the current led
	for(uint8_t l = 0; l < LED_COUNT; l++){
 80027e0:	2300      	movs	r3, #0
 80027e2:	70fb      	strb	r3, [r7, #3]
 80027e4:	e022      	b.n	800282c <IHM_Update+0x208>
		if(l == current_led)
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <IHM_Update+0x234>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d10d      	bne.n	800280c <IHM_Update+0x1e8>
			pins_high |= ihm->leds[l].pin ;
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <IHM_Update+0x238>)
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	3310      	adds	r3, #16
 8002802:	881a      	ldrh	r2, [r3, #0]
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	4313      	orrs	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
 800280a:	e00c      	b.n	8002826 <IHM_Update+0x202>
		else
			pins_low |= ihm->leds[l].pin ;
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <IHM_Update+0x238>)
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	3310      	adds	r3, #16
 800281e:	881a      	ldrh	r2, [r3, #0]
 8002820:	88bb      	ldrh	r3, [r7, #4]
 8002822:	4313      	orrs	r3, r2
 8002824:	80bb      	strh	r3, [r7, #4]
	for(uint8_t l = 0; l < LED_COUNT; l++){
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	3301      	adds	r3, #1
 800282a:	70fb      	strb	r3, [r7, #3]
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d9d9      	bls.n	80027e6 <IHM_Update+0x1c2>
	}
	HAL_GPIO_WritePin(GPIOC, pins_high, GPIO_PIN_SET);
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	2201      	movs	r2, #1
 8002836:	4619      	mov	r1, r3
 8002838:	480a      	ldr	r0, [pc, #40]	; (8002864 <IHM_Update+0x240>)
 800283a:	f006 f935 	bl	8008aa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, pins_low, GPIO_PIN_RESET);
 800283e:	88bb      	ldrh	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	4619      	mov	r1, r3
 8002844:	4807      	ldr	r0, [pc, #28]	; (8002864 <IHM_Update+0x240>)
 8002846:	f006 f92f 	bl	8008aa8 <HAL_GPIO_WritePin>





}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20001f44 	.word	0x20001f44
 8002858:	20001f48 	.word	0x20001f48
 800285c:	20001f40 	.word	0x20001f40
 8002860:	200001dc 	.word	0x200001dc
 8002864:	40020800 	.word	0x40020800

08002868 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 800286c:	4803      	ldr	r0, [pc, #12]	; (800287c <DEBUG_init+0x14>)
 800286e:	f000 f809 	bl	8002884 <RetargetInit>
	printf("Debuger is init\n");
 8002872:	4803      	ldr	r0, [pc, #12]	; (8002880 <DEBUG_init+0x18>)
 8002874:	f00d fcc4 	bl	8010200 <puts>
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20003254 	.word	0x20003254
 8002880:	080137c8 	.word	0x080137c8

08002884 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800288c:	4a07      	ldr	r2, [pc, #28]	; (80028ac <RetargetInit+0x28>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <RetargetInit+0x2c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6898      	ldr	r0, [r3, #8]
 8002898:	2300      	movs	r3, #0
 800289a:	2202      	movs	r2, #2
 800289c:	2100      	movs	r1, #0
 800289e:	f00d fcb7 	bl	8010210 <setvbuf>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20002074 	.word	0x20002074
 80028b0:	20001a88 	.word	0x20001a88

080028b4 <_isatty>:

int _isatty(int fd) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db04      	blt.n	80028cc <_isatty+0x18>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	dc01      	bgt.n	80028cc <_isatty+0x18>
    return 1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e005      	b.n	80028d8 <_isatty+0x24>

  errno = EBADF;
 80028cc:	f00c ff72 	bl	800f7b4 <__errno>
 80028d0:	4602      	mov	r2, r0
 80028d2:	2309      	movs	r3, #9
 80028d4:	6013      	str	r3, [r2, #0]
  return 0;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_write>:

int _write(int fd, char* ptr, int len) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d002      	beq.n	80028f8 <_write+0x18>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d110      	bne.n	800291a <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <_write+0x50>)
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	2364      	movs	r3, #100	; 0x64
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	f00b fa55 	bl	800ddb2 <HAL_UART_Transmit>
 8002908:	4603      	mov	r3, r0
 800290a:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <_write+0x36>
      return len;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	e008      	b.n	8002928 <_write+0x48>
    else
      return EIO;
 8002916:	2305      	movs	r3, #5
 8002918:	e006      	b.n	8002928 <_write+0x48>
  }
  errno = EBADF;
 800291a:	f00c ff4b 	bl	800f7b4 <__errno>
 800291e:	4602      	mov	r2, r0
 8002920:	2309      	movs	r3, #9
 8002922:	6013      	str	r3, [r2, #0]
  return -1;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20002074 	.word	0x20002074

08002934 <_close>:

int _close(int fd) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db04      	blt.n	800294c <_close+0x18>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b02      	cmp	r3, #2
 8002946:	dc01      	bgt.n	800294c <_close+0x18>
    return 0;
 8002948:	2300      	movs	r3, #0
 800294a:	e006      	b.n	800295a <_close+0x26>

  errno = EBADF;
 800294c:	f00c ff32 	bl	800f7b4 <__errno>
 8002950:	4602      	mov	r2, r0
 8002952:	2309      	movs	r3, #9
 8002954:	6013      	str	r3, [r2, #0]
  return -1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800296e:	f00c ff21 	bl	800f7b4 <__errno>
 8002972:	4602      	mov	r2, r0
 8002974:	2309      	movs	r3, #9
 8002976:	6013      	str	r3, [r2, #0]
  return -1;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_read>:

int _read(int fd, char* ptr, int len) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d110      	bne.n	80029b8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <_read+0x4c>)
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	2201      	movs	r2, #1
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	f00b fa9f 	bl	800dee4 <HAL_UART_Receive>
 80029a6:	4603      	mov	r3, r0
 80029a8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <_read+0x30>
      return 1;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e008      	b.n	80029c6 <_read+0x42>
    else
      return EIO;
 80029b4:	2305      	movs	r3, #5
 80029b6:	e006      	b.n	80029c6 <_read+0x42>
  }
  errno = EBADF;
 80029b8:	f00c fefc 	bl	800f7b4 <__errno>
 80029bc:	4602      	mov	r2, r0
 80029be:	2309      	movs	r3, #9
 80029c0:	6013      	str	r3, [r2, #0]
  return -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20002074 	.word	0x20002074

080029d4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	db08      	blt.n	80029f6 <_fstat+0x22>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	dc05      	bgt.n	80029f6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029f0:	605a      	str	r2, [r3, #4]
    return 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e005      	b.n	8002a02 <_fstat+0x2e>
  }

  errno = EBADF;
 80029f6:	f00c fedd 	bl	800f7b4 <__errno>
 80029fa:	4602      	mov	r2, r0
 80029fc:	2309      	movs	r3, #9
 80029fe:	6013      	str	r3, [r2, #0]
  return 0;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <gyro_init_ok_func>:



};

static void gyro_init_ok_func(mask_def_ids_t mask_id){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_GYRO_READING);
 8002a16:	2001      	movs	r0, #1
 8002a18:	f000 f9dc 	bl	8002dd4 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2004      	movs	r0, #4
 8002a20:	f000 fe30 	bl	8003684 <SCHEDULER_task_set_mode>
	events_main[EVENT_GYRO_INIT_OK].state = EVENT_DISABLED ;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <gyro_init_ok_func+0x28>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200001e4 	.word	0x200001e4

08002a38 <acc_init_ok_func>:

static void acc_init_ok_func(mask_def_ids_t mask_id){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_ACC_READING);
 8002a42:	2005      	movs	r0, #5
 8002a44:	f000 f9c6 	bl	8002dd4 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 8002a48:	2101      	movs	r1, #1
 8002a4a:	2006      	movs	r0, #6
 8002a4c:	f000 fe1a 	bl	8003684 <SCHEDULER_task_set_mode>
	events_main[EVENT_ACC_INIT_OK].state = EVENT_DISABLED ;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <acc_init_ok_func+0x28>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200001e4 	.word	0x200001e4

08002a64 <ibus_data_rdy>:

static void ibus_data_rdy(mask_def_ids_t mask_id){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6e:	b672      	cpsid	i
	//On clean le flag ibus_data_rdy
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_IBUS_DATA_RDY);
 8002a70:	210c      	movs	r1, #12
 8002a72:	4806      	ldr	r0, [pc, #24]	; (8002a8c <ibus_data_rdy+0x28>)
 8002a74:	f000 fa6d 	bl	8002f52 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a78:	b662      	cpsie	i
	__enable_irq();
	//On déclenche la tâche de traitement des octets pour l ibus
	SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_UPDATE, TASK_MODE_EVENT);
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	2009      	movs	r0, #9
 8002a7e:	f000 fe01 	bl	8003684 <SCHEDULER_task_set_mode>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20001f4c 	.word	0x20001f4c

08002a90 <baro_data_ready_func>:

static void baro_data_ready_func(mask_def_ids_t mask_id){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
	switch(mask_id){
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d00c      	beq.n	8002aba <baro_data_ready_func+0x2a>
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d012      	beq.n	8002aca <baro_data_ready_func+0x3a>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d000      	beq.n	8002aaa <baro_data_ready_func+0x1a>
		case MASK_BARO_DATA_READY_PRESSURE:
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RDY);
			SCHEDULER_task_set_mode(TASK_BARO_ALTITUDE, TASK_MODE_EVENT);
			break;
		default:
			break;
 8002aa8:	e017      	b.n	8002ada <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_TEMP_RAW_RDY);
 8002aaa:	2009      	movs	r0, #9
 8002aac:	f000 f9aa 	bl	8002e04 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_TEMP, TASK_MODE_EVENT);
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	2010      	movs	r0, #16
 8002ab4:	f000 fde6 	bl	8003684 <SCHEDULER_task_set_mode>
			break;
 8002ab8:	e00f      	b.n	8002ada <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RAW_RDY);
 8002aba:	200a      	movs	r0, #10
 8002abc:	f000 f9a2 	bl	8002e04 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_PRESSURE, TASK_MODE_EVENT);
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	2011      	movs	r0, #17
 8002ac4:	f000 fdde 	bl	8003684 <SCHEDULER_task_set_mode>
			break;
 8002ac8:	e007      	b.n	8002ada <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RDY);
 8002aca:	200b      	movs	r0, #11
 8002acc:	f000 f99a 	bl	8002e04 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_ALTITUDE, TASK_MODE_EVENT);
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	2012      	movs	r0, #18
 8002ad4:	f000 fdd6 	bl	8003684 <SCHEDULER_task_set_mode>
			break;
 8002ad8:	bf00      	nop

	}
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <on_the_ground>:

static void on_the_ground(mask_def_ids_t mask_id){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aee:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_FLYING);
 8002af0:	2121      	movs	r1, #33	; 0x21
 8002af2:	480d      	ldr	r0, [pc, #52]	; (8002b28 <on_the_ground+0x44>)
 8002af4:	f000 fa2d 	bl	8002f52 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMED);
 8002af8:	211d      	movs	r1, #29
 8002afa:	480b      	ldr	r0, [pc, #44]	; (8002b28 <on_the_ground+0x44>)
 8002afc:	f000 fa29 	bl	8002f52 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_BUSY);
 8002b00:	211e      	movs	r1, #30
 8002b02:	4809      	ldr	r0, [pc, #36]	; (8002b28 <on_the_ground+0x44>)
 8002b04:	f000 fa25 	bl	8002f52 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMING);
 8002b08:	211c      	movs	r1, #28
 8002b0a:	4807      	ldr	r0, [pc, #28]	; (8002b28 <on_the_ground+0x44>)
 8002b0c:	f000 fa21 	bl	8002f52 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8002b10:	211f      	movs	r1, #31
 8002b12:	4805      	ldr	r0, [pc, #20]	; (8002b28 <on_the_ground+0x44>)
 8002b14:	f000 fa1d 	bl	8002f52 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b18:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ON_THE_GROUND);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7ff fb12 	bl	8002144 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20001f4c 	.word	0x20001f4c

08002b2c <manual_accro>:
static void manual_accro(mask_def_ids_t mask_id){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b36:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8002b38:	2121      	movs	r1, #33	; 0x21
 8002b3a:	4807      	ldr	r0, [pc, #28]	; (8002b58 <manual_accro+0x2c>)
 8002b3c:	f000 f9d9 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8002b40:	2122      	movs	r1, #34	; 0x22
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <manual_accro+0x2c>)
 8002b44:	f000 f9d5 	bl	8002ef2 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b48:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ACCRO);
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7ff fafa 	bl	8002144 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20001f4c 	.word	0x20001f4c

08002b5c <manual_angle>:

static void manual_angle(mask_def_ids_t mask_id){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b66:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8002b68:	2121      	movs	r1, #33	; 0x21
 8002b6a:	4807      	ldr	r0, [pc, #28]	; (8002b88 <manual_angle+0x2c>)
 8002b6c:	f000 f9c1 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8002b70:	2122      	movs	r1, #34	; 0x22
 8002b72:	4805      	ldr	r0, [pc, #20]	; (8002b88 <manual_angle+0x2c>)
 8002b74:	f000 f9bd 	bl	8002ef2 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b78:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ANGLE);
 8002b7a:	2002      	movs	r0, #2
 8002b7c:	f7ff fae2 	bl	8002144 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20001f4c 	.word	0x20001f4c

08002b8c <gyro_data_ready_func>:

static void gyro_data_ready_func(mask_def_ids_t mask_id){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b96:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <gyro_data_ready_func+0x28>)
 8002b9c:	f000 f9d9 	bl	8002f52 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ba0:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	2005      	movs	r0, #5
 8002ba6:	f000 fd6d 	bl	8003684 <SCHEDULER_task_set_mode>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20001f4c 	.word	0x20001f4c

08002bb8 <acc_data_ready_func>:

static void acc_data_ready_func(mask_def_ids_t mask_id){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc2:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 8002bc4:	2106      	movs	r1, #6
 8002bc6:	4806      	ldr	r0, [pc, #24]	; (8002be0 <acc_data_ready_func+0x28>)
 8002bc8:	f000 f9c3 	bl	8002f52 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002bcc:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 8002bce:	2102      	movs	r1, #2
 8002bd0:	2007      	movs	r0, #7
 8002bd2:	f000 fd57 	bl	8003684 <SCHEDULER_task_set_mode>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20001f4c 	.word	0x20001f4c

08002be4 <orientation_update>:

static void orientation_update(mask_def_ids_t mask_id){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bee:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 8002bf0:	2107      	movs	r1, #7
 8002bf2:	4808      	ldr	r0, [pc, #32]	; (8002c14 <orientation_update+0x30>)
 8002bf4:	f000 f9ad 	bl	8002f52 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 8002bf8:	2103      	movs	r1, #3
 8002bfa:	4806      	ldr	r0, [pc, #24]	; (8002c14 <orientation_update+0x30>)
 8002bfc:	f000 f9a9 	bl	8002f52 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c00:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 8002c02:	2102      	movs	r1, #2
 8002c04:	2008      	movs	r0, #8
 8002c06:	f000 fd3d 	bl	8003684 <SCHEDULER_task_set_mode>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20001f4c 	.word	0x20001f4c

08002c18 <arming>:

static void arming(mask_def_ids_t mask_id){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c22:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_ARMING);
 8002c24:	211c      	movs	r1, #28
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <arming+0x2c>)
 8002c28:	f000 f963 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);	//We re now busy => cant go in calibration mode or other "on the ground" modes
 8002c2c:	211e      	movs	r1, #30
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <arming+0x2c>)
 8002c30:	f000 f95f 	bl	8002ef2 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c34:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ARMING);
 8002c36:	2003      	movs	r0, #3
 8002c38:	f7ff fa84 	bl	8002144 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20001f4c 	.word	0x20001f4c

08002c48 <gyro_acc_calibration>:

static void gyro_acc_calibration(mask_def_ids_t mask_id){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c52:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8002c54:	211f      	movs	r1, #31
 8002c56:	480b      	ldr	r0, [pc, #44]	; (8002c84 <gyro_acc_calibration+0x3c>)
 8002c58:	f000 f94b 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);
 8002c5c:	211e      	movs	r1, #30
 8002c5e:	4809      	ldr	r0, [pc, #36]	; (8002c84 <gyro_acc_calibration+0x3c>)
 8002c60:	f000 f947 	bl	8002ef2 <MASK_set_flag>
	MASK_clean_flag(&flags, FLAG_CHAN_9_PUSH);
 8002c64:	2117      	movs	r1, #23
 8002c66:	4807      	ldr	r0, [pc, #28]	; (8002c84 <gyro_acc_calibration+0x3c>)
 8002c68:	f000 f973 	bl	8002f52 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_DONE);
 8002c6c:	2120      	movs	r1, #32
 8002c6e:	4805      	ldr	r0, [pc, #20]	; (8002c84 <gyro_acc_calibration+0x3c>)
 8002c70:	f000 f96f 	bl	8002f52 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c74:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_GYRO_ACC_CALIBRATION);
 8002c76:	2004      	movs	r0, #4
 8002c78:	f7ff fa64 	bl	8002144 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20001f4c 	.word	0x20001f4c

08002c88 <EVENT_init>:


void EVENT_init(system_t * sys_){
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	initialized = TRUE ;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <EVENT_init+0x24>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
	sys =sys_;
 8002c96:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <EVENT_init+0x28>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6013      	str	r3, [r2, #0]

	//Configuration des mask associés aux events
	mask_def_events_init(events_main);
 8002c9c:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <EVENT_init+0x2c>)
 8002c9e:	f000 f987 	bl	8002fb0 <mask_def_events_init>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20001f5c 	.word	0x20001f5c
 8002cb0:	20001f58 	.word	0x20001f58
 8002cb4:	200001e4 	.word	0x200001e4

08002cb8 <EVENT_process>:

//Déclenchement des events en main
void EVENT_process(bool_e test_all){
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	if(new_flag)
 8002cc0:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <EVENT_process+0x110>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d07a      	beq.n	8002dbe <EVENT_process+0x106>
	{
		new_flag = FALSE;
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <EVENT_process+0x110>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]

		//Nombre d'event à tester
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 8002cce:	2307      	movs	r3, #7
 8002cd0:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <EVENT_process+0x24>
			max = EVENT_COUNT ;
 8002cd8:	230c      	movs	r3, #12
 8002cda:	75fb      	strb	r3, [r7, #23]



		//Pout chaque event
		for(uint32_t e = 0; e < max; e ++)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	e069      	b.n	8002db6 <EVENT_process+0xfe>
		{

			uint32_t m = 0 ;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]

			//On test chaque paires de masque
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8002cea:	e049      	b.n	8002d80 <EVENT_process+0xc8>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8002cec:	4837      	ldr	r0, [pc, #220]	; (8002dcc <EVENT_process+0x114>)
 8002cee:	4938      	ldr	r1, [pc, #224]	; (8002dd0 <EVENT_process+0x118>)
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	00d2      	lsls	r2, r2, #3
 8002cf6:	24b4      	movs	r4, #180	; 0xb4
 8002cf8:	fb04 f303 	mul.w	r3, r4, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4419      	add	r1, r3
 8002d00:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002d04:	c903      	ldmia	r1, {r0, r1}
 8002d06:	f000 f895 	bl	8002e34 <Mask_test_and>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d034      	beq.n	8002d7a <EVENT_process+0xc2>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 8002d10:	482e      	ldr	r0, [pc, #184]	; (8002dcc <EVENT_process+0x114>)
 8002d12:	492f      	ldr	r1, [pc, #188]	; (8002dd0 <EVENT_process+0x118>)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1dda      	adds	r2, r3, #7
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	00d2      	lsls	r2, r2, #3
 8002d1c:	24b4      	movs	r4, #180	; 0xb4
 8002d1e:	fb04 f303 	mul.w	r3, r4, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	4419      	add	r1, r3
 8002d26:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002d2a:	c903      	ldmia	r1, {r0, r1}
 8002d2c:	f000 f8b5 	bl	8002e9a <Mask_test_or>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d021      	beq.n	8002d7a <EVENT_process+0xc2>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	//Mask not test
 8002d36:	4825      	ldr	r0, [pc, #148]	; (8002dcc <EVENT_process+0x114>)
 8002d38:	4925      	ldr	r1, [pc, #148]	; (8002dd0 <EVENT_process+0x118>)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f103 020e 	add.w	r2, r3, #14
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	00d2      	lsls	r2, r2, #3
 8002d44:	24b4      	movs	r4, #180	; 0xb4
 8002d46:	fb04 f303 	mul.w	r3, r4, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4419      	add	r1, r3
 8002d4e:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002d52:	c903      	ldmia	r1, {r0, r1}
 8002d54:	f000 f8a1 	bl	8002e9a <Mask_test_or>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10d      	bne.n	8002d7a <EVENT_process+0xc2>
						{
							events_main[e].function(m);
 8002d5e:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <EVENT_process+0x118>)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	21b4      	movs	r1, #180	; 0xb4
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	33b0      	adds	r3, #176	; 0xb0
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	4610      	mov	r0, r2
 8002d74:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8002d76:	2301      	movs	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
						}
					}
				}
				m++ ;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8002d80:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <EVENT_process+0x118>)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	21b4      	movs	r1, #180	; 0xb4
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	33a8      	adds	r3, #168	; 0xa8
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d20c      	bcs.n	8002db0 <EVENT_process+0xf8>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <EVENT_process+0xf8>
 8002d9c:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <EVENT_process+0x118>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	21b4      	movs	r1, #180	; 0xb4
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	33ac      	adds	r3, #172	; 0xac
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d09d      	beq.n	8002cec <EVENT_process+0x34>
		for(uint32_t e = 0; e < max; e ++)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	3301      	adds	r3, #1
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d391      	bcc.n	8002ce2 <EVENT_process+0x2a>
			}

		}
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd90      	pop	{r4, r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20001f54 	.word	0x20001f54
 8002dcc:	20001f4c 	.word	0x20001f4c
 8002dd0:	200001e4 	.word	0x200001e4

08002dd4 <EVENT_Set_flag>:


//Set a flag
void EVENT_Set_flag(Flags_e flag){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dde:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <EVENT_Set_flag+0x28>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4619      	mov	r1, r3
 8002dea:	4805      	ldr	r0, [pc, #20]	; (8002e00 <EVENT_Set_flag+0x2c>)
 8002dec:	f000 f881 	bl	8002ef2 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002df0:	b662      	cpsie	i
	__enable_irq();
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20001f54 	.word	0x20001f54
 8002e00:	20001f4c 	.word	0x20001f4c

08002e04 <EVENT_Clean_flag>:
//CleaR a flag (i know it should be called cleaR instead of cleaN but i didnt took the time to change it YET)
//Todo : cleaRRRRRRR a flag
void EVENT_Clean_flag(Flags_e flag){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e0e:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <EVENT_Clean_flag+0x28>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <EVENT_Clean_flag+0x2c>)
 8002e1c:	f000 f899 	bl	8002f52 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e20:	b662      	cpsie	i
	__enable_irq();
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20001f54 	.word	0x20001f54
 8002e30:	20001f4c 	.word	0x20001f4c

08002e34 <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 8002e34:	b490      	push	{r4, r7}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	f107 0408 	add.w	r4, r7, #8
 8002e3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002e42:	4639      	mov	r1, r7
 8002e44:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e01c      	b.n	8002e88 <Mask_test_and+0x54>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	f107 0218 	add.w	r2, r7, #24
 8002e56:	4413      	add	r3, r2
 8002e58:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	f107 0118 	add.w	r1, r7, #24
 8002e64:	440b      	add	r3, r1
 8002e66:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	f107 0118 	add.w	r1, r7, #24
 8002e74:	440b      	add	r3, r1
 8002e76:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <Mask_test_and+0x4e>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e006      	b.n	8002e90 <Mask_test_and+0x5c>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	dddf      	ble.n	8002e4e <Mask_test_and+0x1a>
		}
	return TRUE ;
 8002e8e:	2301      	movs	r3, #1
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc90      	pop	{r4, r7}
 8002e98:	4770      	bx	lr

08002e9a <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8002e9a:	b490      	push	{r4, r7}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	f107 0408 	add.w	r4, r7, #8
 8002ea4:	e884 0003 	stmia.w	r4, {r0, r1}
 8002ea8:	4639      	mov	r1, r7
 8002eaa:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e015      	b.n	8002ee0 <Mask_test_or+0x46>
		if(mask_test.array[m] & mask_ref.array[m])
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	f107 0218 	add.w	r2, r7, #24
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	f107 0118 	add.w	r1, r7, #24
 8002eca:	440b      	add	r3, r1
 8002ecc:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <Mask_test_or+0x40>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e006      	b.n	8002ee8 <Mask_test_or+0x4e>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	dde6      	ble.n	8002eb4 <Mask_test_or+0x1a>
	return FALSE ;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc90      	pop	{r4, r7}
 8002ef0:	4770      	bx	lr

08002ef2 <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
 8002ef2:	b480      	push	{r7}
 8002ef4:	b087      	sub	sp, #28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	60fb      	str	r3, [r7, #12]
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d101      	bne.n	8002f2e <MASK_set_flag+0x3c>
		return FALSE ;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e00b      	b.n	8002f46 <MASK_set_flag+0x54>
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	ea42 0103 	orr.w	r1, r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return TRUE ;
 8002f44:	2301      	movs	r3, #1
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
 8002f52:	b480      	push	{r7}
 8002f54:	b087      	sub	sp, #28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8002f6e:	2201      	movs	r2, #1
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	60fb      	str	r3, [r7, #12]
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d10b      	bne.n	8002fa2 <MASK_clean_flag+0x50>
		mask->array[array_nb] -= flag_mask ;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad1      	subs	r1, r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return TRUE ;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <MASK_clean_flag+0x52>
	}
	return FALSE ;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <mask_def_events_init>:
static void mask_def_gyro_acc_calibration(Event_t * event);
static void mask_def_manual_angle(Event_t * event);



void mask_def_events_init(Event_t * event){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_init_ok(&event[EVENT_GYRO_INIT_OK]);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f842 	bl	8003048 <mask_def_gyro_init_ok>
	mask_def_gyro_data_ready(&event[EVENT_GYRO_DATA_READY]);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f858 	bl	800307a <mask_def_gyro_data_ready>
	//Acc mask def
	mask_def_acc_init_ok(&event[EVENT_ACC_INIT_OK]);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f865 	bl	80030a0 <mask_def_acc_init_ok>
	mask_def_acc_data_ready(&event[EVENT_ACC_DATA_READY]);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	33b4      	adds	r3, #180	; 0xb4
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f879 	bl	80030d2 <mask_def_acc_data_ready>
	//Ibus
	mask_def_ibus_data_rdy(&event[EVENT_IBUS_DATA_RDY]);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f8a3 	bl	8003132 <mask_def_ibus_data_rdy>
	//Orientation
	mask_def_baro_data_rdy(&event[EVENT_BARO_DATA_RDY]);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f8b0 	bl	8003158 <mask_def_baro_data_rdy>
	//Baro
	mask_def_orientation_update(&event[EVENT_ORIENTATION_UPDATE]);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f87a 	bl	80030f8 <mask_def_orientation_update>
	//Flight_modes
	mask_def_on_the_ground(&event[EVENT_ON_THE_GROUND]);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f8cf 	bl	80031ae <mask_def_on_the_ground>
	mask_def_manual_accro(&event[EVENT_MANUAL_ACCRO]);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f8f4 	bl	8003204 <mask_def_manual_accro>
	mask_def_arming(&event[EVENT_ARMING]);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f914 	bl	8003250 <mask_def_arming>
	mask_def_gyro_acc_calibration(&event[EVENT_GYRO_ACC_CALIBRATION]);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800302e:	4618      	mov	r0, r3
 8003030:	f000 f92d 	bl	800328e <mask_def_gyro_acc_calibration>
	mask_def_manual_angle(&event[EVENT_MANUAL_ANGLE]);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f203 6354 	addw	r3, r3, #1620	; 0x654
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f8f5 	bl	800322a <mask_def_manual_angle>

}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <mask_def_gyro_init_ok>:

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff4c 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3338      	adds	r3, #56	; 0x38
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff46 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3370      	adds	r3, #112	; 0x70
 800306a:	2101      	movs	r1, #1
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff40 	bl	8002ef2 <MASK_set_flag>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ff33 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3338      	adds	r3, #56	; 0x38
 8003090:	2102      	movs	r1, #2
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff ff2d 	bl	8002ef2 <MASK_set_flag>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2104      	movs	r1, #4
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff20 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3338      	adds	r3, #56	; 0x38
 80030b6:	2104      	movs	r1, #4
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff1a 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3370      	adds	r3, #112	; 0x70
 80030c2:	2105      	movs	r1, #5
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff14 	bl	8002ef2 <MASK_set_flag>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2104      	movs	r1, #4
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff07 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3338      	adds	r3, #56	; 0x38
 80030e8:	2106      	movs	r1, #6
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ff01 	bl	8002ef2 <MASK_set_flag>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2104      	movs	r1, #4
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fef4 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff feef 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2103      	movs	r1, #3
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff feea 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3338      	adds	r3, #56	; 0x38
 8003122:	2107      	movs	r1, #7
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fee4 	bl	8002ef2 <MASK_set_flag>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <mask_def_ibus_data_rdy>:

// ----------------	Radio ------------------------
static void mask_def_ibus_data_rdy(Event_t * event){
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
	//Si flag data rdy on y go
	MASK_set_flag(&event->mask_and[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	210c      	movs	r1, #12
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fed7 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3338      	adds	r3, #56	; 0x38
 8003148:	210c      	movs	r1, #12
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fed1 	bl	8002ef2 <MASK_set_flag>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <mask_def_baro_data_rdy>:

// ----------------	BAaro ------------------------
static void mask_def_baro_data_rdy(Event_t * event){
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_TEMP_RAW], FLAG_BARO_OK);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2108      	movs	r1, #8
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fec4 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_TEMP_RAW], FLAG_BARO_TEMP_RAW_RDY);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3338      	adds	r3, #56	; 0x38
 800316e:	2109      	movs	r1, #9
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff febe 	bl	8002ef2 <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_PRESSURE_RAW], FLAG_BARO_OK);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3308      	adds	r3, #8
 800317a:	2108      	movs	r1, #8
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff feb8 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_PRESSURE_RAW], FLAG_BARO_PRESSURE_RAW_RDY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3340      	adds	r3, #64	; 0x40
 8003186:	210a      	movs	r1, #10
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff feb2 	bl	8002ef2 <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_PRESSURE], FLAG_BARO_OK);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3310      	adds	r3, #16
 8003192:	2108      	movs	r1, #8
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff feac 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_PRESSURE], FLAG_BARO_PRESSURE_RDY);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3348      	adds	r3, #72	; 0x48
 800319e:	210b      	movs	r1, #11
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fea6 	bl	8002ef2 <MASK_set_flag>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <mask_def_on_the_ground>:

// ----------------	Flight Modes ------------------------
static void mask_def_on_the_ground(Event_t * event){
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_FLYING], FLAG_FLYING);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2121      	movs	r1, #33	; 0x21
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fe99 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_FLYING], FLAG_CHAN_5_POS_1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3338      	adds	r3, #56	; 0x38
 80031c4:	210d      	movs	r1, #13
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fe93 	bl	8002ef2 <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_ARMING], FLAG_ARMING);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3308      	adds	r3, #8
 80031d0:	211c      	movs	r1, #28
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fe8d 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_ARMING], FLAG_CHAN_5_POS_1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3340      	adds	r3, #64	; 0x40
 80031dc:	210d      	movs	r1, #13
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fe87 	bl	8002ef2 <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_IN_PROGRESS);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3310      	adds	r3, #16
 80031e8:	211f      	movs	r1, #31
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fe81 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_DONE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3348      	adds	r3, #72	; 0x48
 80031f4:	2120      	movs	r1, #32
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fe7b 	bl	8002ef2 <MASK_set_flag>


}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <mask_def_manual_accro>:

static void mask_def_manual_accro(Event_t * event){
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_CHAN_6_POS_1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	210f      	movs	r1, #15
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fe6e 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_ARMED);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3338      	adds	r3, #56	; 0x38
 800321a:	211d      	movs	r1, #29
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fe68 	bl	8002ef2 <MASK_set_flag>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <mask_def_manual_angle>:

static void mask_def_manual_angle(Event_t * event){
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_CHAN_6_POS_2);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2110      	movs	r1, #16
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fe5b 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_ARMED);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3338      	adds	r3, #56	; 0x38
 8003240:	211d      	movs	r1, #29
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fe55 	bl	8002ef2 <MASK_set_flag>
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <mask_def_arming>:

static void mask_def_arming(Event_t * event){
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ARMING_ON_THE_GROUND], FLAG_GYRO_OK);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fe48 	bl	8002ef2 <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_ARMING_ON_THE_GROUND], FLAG_CHAN_5_POS_3);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3338      	adds	r3, #56	; 0x38
 8003266:	210e      	movs	r1, #14
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fe42 	bl	8002ef2 <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_FLYING);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3370      	adds	r3, #112	; 0x70
 8003272:	2121      	movs	r1, #33	; 0x21
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fe3c 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_BUSY);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3370      	adds	r3, #112	; 0x70
 800327e:	211e      	movs	r1, #30
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fe36 	bl	8002ef2 <MASK_set_flag>


}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <mask_def_gyro_acc_calibration>:

static void mask_def_gyro_acc_calibration(Event_t * event){
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_GYRO_ACC_CALIBRATION], FLAG_GYRO_OK);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fe29 	bl	8002ef2 <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_GYRO_ACC_CALIBRATION], FLAG_CHAN_9_PUSH);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3338      	adds	r3, #56	; 0x38
 80032a4:	2117      	movs	r1, #23
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fe23 	bl	8002ef2 <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_BUSY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3370      	adds	r3, #112	; 0x70
 80032b0:	211e      	movs	r1, #30
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fe1d 	bl	8002ef2 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_FLYING);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3370      	adds	r3, #112	; 0x70
 80032bc:	2121      	movs	r1, #33	; 0x21
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fe17 	bl	8002ef2 <MASK_set_flag>
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 80032d4:	4a05      	ldr	r2, [pc, #20]	; (80032ec <SCHEDULER_init+0x20>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 80032da:	f7ff fac5 	bl	8002868 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fad6 	bl	8003890 <tasks_init>
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20001fb4 	.word	0x20001fb4

080032f0 <SCHEDULER_run>:

void SCHEDULER_run(void){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 80032f6:	f000 fc87 	bl	8003c08 <TIME_us>
 80032fa:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 80032fc:	f000 f8ce 	bl	800349c <get_first_task>
 8003300:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]
	while(task_queu_position < task_queu_size && task != NULL){
 8003306:	e045      	b.n	8003394 <SCHEDULER_run+0xa4>

		switch(task->mode){
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	7a1b      	ldrb	r3, [r3, #8]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d01f      	beq.n	8003350 <SCHEDULER_run+0x60>
 8003310:	2b03      	cmp	r3, #3
 8003312:	d002      	beq.n	800331a <SCHEDULER_run+0x2a>
 8003314:	2b01      	cmp	r3, #1
 8003316:	d008      	beq.n	800332a <SCHEDULER_run+0x3a>
				task->mode = TASK_MODE_WAIT ;
				break;
			case TASK_MODE_TIMMER :
			case TASK_MODE_WAIT:
			default:
				break;
 8003318:	e026      	b.n	8003368 <SCHEDULER_run+0x78>
				current_time_us = task_process(task, current_time_us);
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	68b8      	ldr	r0, [r7, #8]
 800331e:	f000 f8e3 	bl	80034e8 <task_process>
 8003322:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8003324:	2301      	movs	r3, #1
 8003326:	607b      	str	r3, [r7, #4]
				break;
 8003328:	e01e      	b.n	8003368 <SCHEDULER_run+0x78>
				if(current_time_us >= task->desired_next_start_us){
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d318      	bcc.n	8003366 <SCHEDULER_run+0x76>
					current_time_us = task_process(task, current_time_us);
 8003334:	68f9      	ldr	r1, [r7, #12]
 8003336:	68b8      	ldr	r0, [r7, #8]
 8003338:	f000 f8d6 	bl	80034e8 <task_process>
 800333c:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us = task->desired_period_us + current_time_us ;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	441a      	add	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 800334a:	2301      	movs	r3, #1
 800334c:	607b      	str	r3, [r7, #4]
				break;
 800334e:	e00a      	b.n	8003366 <SCHEDULER_run+0x76>
				current_time_us = task_process(task, current_time_us);
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	f000 f8c8 	bl	80034e8 <task_process>
 8003358:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 800335a:	2301      	movs	r3, #1
 800335c:	607b      	str	r3, [r7, #4]
				task->mode = TASK_MODE_WAIT ;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2200      	movs	r2, #0
 8003362:	721a      	strb	r2, [r3, #8]
				break;
 8003364:	e000      	b.n	8003368 <SCHEDULER_run+0x78>
				break;
 8003366:	bf00      	nop
		}
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <SCHEDULER_run+0x9a>
 800336e:	2000      	movs	r0, #0
 8003370:	f000 fc36 	bl	8003be0 <TASK_get_task>
 8003374:	4602      	mov	r2, r0
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4293      	cmp	r3, r2
 800337a:	d006      	beq.n	800338a <SCHEDULER_run+0x9a>
 800337c:	2001      	movs	r0, #1
 800337e:	f000 fc2f 	bl	8003be0 <TASK_get_task>
 8003382:	4602      	mov	r2, r0
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4293      	cmp	r3, r2
 8003388:	d10e      	bne.n	80033a8 <SCHEDULER_run+0xb8>
			//Stop the while loop if we executed a task
			break;
		task_executed = FALSE ;
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
		task = get_next_task();
 800338e:	f000 f895 	bl	80034bc <get_next_task>
 8003392:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL){
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <SCHEDULER_run+0xc4>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <SCHEDULER_run+0xc8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d204      	bcs.n	80033aa <SCHEDULER_run+0xba>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1b0      	bne.n	8003308 <SCHEDULER_run+0x18>
	}
}
 80033a6:	e000      	b.n	80033aa <SCHEDULER_run+0xba>
			break;
 80033a8:	bf00      	nop
}
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20001fb0 	.word	0x20001fb0
 80033b8:	20001fac 	.word	0x20001fac

080033bc <SCHEDULER_task>:

void SCHEDULER_task(void){
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
	//Changement de mode pour les tâches
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	71fb      	strb	r3, [r7, #7]
 80033c6:	e00b      	b.n	80033e0 <SCHEDULER_task+0x24>
	{
		task_to_change[t]->mode = change_mode[t] ;
 80033c8:	79fa      	ldrb	r2, [r7, #7]
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <SCHEDULER_task+0x44>)
 80033ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033d2:	490c      	ldr	r1, [pc, #48]	; (8003404 <SCHEDULER_task+0x48>)
 80033d4:	5c8a      	ldrb	r2, [r1, r2]
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	721a      	strb	r2, [r3, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	3301      	adds	r3, #1
 80033de:	71fb      	strb	r3, [r7, #7]
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <SCHEDULER_task+0x4c>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	79fa      	ldrb	r2, [r7, #7]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d3ed      	bcc.n	80033c8 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <SCHEDULER_task+0x4c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20001fb8 	.word	0x20001fb8
 8003404:	20002004 	.word	0x20002004
 8003408:	20002017 	.word	0x20002017

0800340c <SCHEDULER_get_cpu_load>:

float SCHEDULER_get_cpu_load(void){
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
	float load_pourcentage = 0 ;
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	607b      	str	r3, [r7, #4]
	for(uint32_t t = 2; t < task_queu_size; t++)
 8003418:	2302      	movs	r3, #2
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	e023      	b.n	8003466 <SCHEDULER_get_cpu_load+0x5a>
		if(task_queu[t]->real_period_us)
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <SCHEDULER_get_cpu_load+0x84>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d019      	beq.n	8003460 <SCHEDULER_get_cpu_load+0x54>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 800342c:	4a18      	ldr	r2, [pc, #96]	; (8003490 <SCHEDULER_get_cpu_load+0x84>)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 800343a:	fb02 f203 	mul.w	r2, r2, r3
 800343e:	4914      	ldr	r1, [pc, #80]	; (8003490 <SCHEDULER_get_cpu_load+0x84>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003454:	ed97 7a01 	vldr	s14, [r7, #4]
 8003458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345c:	edc7 7a01 	vstr	s15, [r7, #4]
	for(uint32_t t = 2; t < task_queu_size; t++)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	3301      	adds	r3, #1
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <SCHEDULER_get_cpu_load+0x88>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d3d6      	bcc.n	800341e <SCHEDULER_get_cpu_load+0x12>

	return load_pourcentage / 512.0f ;
 8003470:	edd7 7a01 	vldr	s15, [r7, #4]
 8003474:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003498 <SCHEDULER_get_cpu_load+0x8c>
 8003478:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800347c:	eef0 7a66 	vmov.f32	s15, s13
}
 8003480:	eeb0 0a67 	vmov.f32	s0, s15
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20001f60 	.word	0x20001f60
 8003494:	20001fac 	.word	0x20001fac
 8003498:	44000000 	.word	0x44000000

0800349c <get_first_task>:

static task_t * get_first_task(void){
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <get_first_task+0x18>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <get_first_task+0x1c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	20001fb0 	.word	0x20001fb0
 80034b8:	20001f60 	.word	0x20001f60

080034bc <get_next_task>:

static task_t * get_next_task(void){
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <get_next_task+0x24>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3301      	adds	r3, #1
 80034c6:	4a06      	ldr	r2, [pc, #24]	; (80034e0 <get_next_task+0x24>)
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <get_next_task+0x24>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <get_next_task+0x28>)
 80034d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20001fb0 	.word	0x20001fb0
 80034e4:	20001f60 	.word	0x20001f60

080034e8 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <task_process+0x16>
		return current_time_us ;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	e09d      	b.n	800363a <task_process+0x152>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	3308      	adds	r3, #8
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	1ad2      	subs	r2, r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003522:	6839      	ldr	r1, [r7, #0]
 8003524:	1a8a      	subs	r2, r1, r2
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	3308      	adds	r3, #8
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	3308      	adds	r3, #8
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	441a      	add	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354e:	4a3d      	ldr	r2, [pc, #244]	; (8003644 <task_process+0x15c>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	091a      	lsrs	r2, r3, #4
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]

	task->last_execution_us = current_time_us ;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	6838      	ldr	r0, [r7, #0]
 8003566:	4798      	blx	r3
	current_time_us = TIME_us();
 8003568:	f000 fb4e 	bl	8003c08 <TIME_us>
 800356c:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	311e      	adds	r1, #30
 800357e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003582:	1ad2      	subs	r2, r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8003594:	6839      	ldr	r1, [r7, #0]
 8003596:	1ac9      	subs	r1, r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	321e      	adds	r2, #30
 800359c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	311e      	adds	r1, #30
 80035ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	bf38      	it	cc
 80035b6:	461a      	movcc	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	311e      	adds	r1, #30
 80035cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80035de:	4a19      	ldr	r2, [pc, #100]	; (8003644 <task_process+0x15c>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	091a      	lsrs	r2, r3, #4
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	321e      	adds	r2, #30
 80035f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035fc:	d90c      	bls.n	8003618 <task_process+0x130>
		task->duration_us_average_array[task->average_index] ++ ;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	f103 011e 	add.w	r1, r3, #30
 800360a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800360e:	1c51      	adds	r1, r2, #1
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	331e      	adds	r3, #30
 8003614:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800362c:	2b14      	cmp	r3, #20
 800362e:	d103      	bne.n	8003638 <task_process+0x150>
		task->average_index = 0 ;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 8003638:	683b      	ldr	r3, [r7, #0]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	cccccccd 	.word	0xcccccccd

08003648 <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]
	if(enable)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <SCHEDULER_enable_task+0x24>
		queu_add(TASK_get_task(id));
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fabf 	bl	8003be0 <TASK_get_task>
 8003662:	4603      	mov	r3, r0
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f873 	bl	8003750 <queu_add>
	else
		queu_remove(TASK_get_task(id));
}
 800366a:	e007      	b.n	800367c <SCHEDULER_enable_task+0x34>
		queu_remove(TASK_get_task(id));
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fab6 	bl	8003be0 <TASK_get_task>
 8003674:	4603      	mov	r3, r0
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f8c8 	bl	800380c <queu_remove>
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <SCHEDULER_task_set_mode>:

void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	460a      	mov	r2, r1
 800368e:	71fb      	strb	r3, [r7, #7]
 8003690:	4613      	mov	r3, r2
 8003692:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8003694:	b672      	cpsid	i
	__disable_irq();
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <SCHEDULER_task_set_mode+0x4c>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461c      	mov	r4, r3
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fa9d 	bl	8003be0 <TASK_get_task>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <SCHEDULER_task_set_mode+0x50>)
 80036aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 80036ae:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <SCHEDULER_task_set_mode+0x4c>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	b2d1      	uxtb	r1, r2
 80036b8:	4a05      	ldr	r2, [pc, #20]	; (80036d0 <SCHEDULER_task_set_mode+0x4c>)
 80036ba:	7011      	strb	r1, [r2, #0]
 80036bc:	4619      	mov	r1, r3
 80036be:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <SCHEDULER_task_set_mode+0x54>)
 80036c0:	79bb      	ldrb	r3, [r7, #6]
 80036c2:	5453      	strb	r3, [r2, r1]
  __ASM volatile ("cpsie i" : : : "memory");
 80036c4:	b662      	cpsie	i
	__enable_irq();
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd90      	pop	{r4, r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20002017 	.word	0x20002017
 80036d4:	20001fb8 	.word	0x20001fb8
 80036d8:	20002004 	.word	0x20002004

080036dc <SCHEDULER_reschedule_task>:

void SCHEDULER_reschedule_task(task_ids_t id, uint32_t new_period_us){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	6039      	str	r1, [r7, #0]
 80036e6:	71fb      	strb	r3, [r7, #7]
	task_t * task = TASK_get_task(id);
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fa78 	bl	8003be0 <TASK_get_task>
 80036f0:	60f8      	str	r0, [r7, #12]
	task->desired_period_us = new_period_us ;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	615a      	str	r2, [r3, #20]
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <queu_contains+0x12>
		return FALSE ;
 800370e:	2300      	movs	r3, #0
 8003710:	e014      	b.n	800373c <queu_contains+0x3c>

	for(uint32_t t = 0; t < task_queu_size; t++)
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e00b      	b.n	8003730 <queu_contains+0x30>
		if(task_queu[t] == task)
 8003718:	4a0b      	ldr	r2, [pc, #44]	; (8003748 <queu_contains+0x48>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d101      	bne.n	800372a <queu_contains+0x2a>
			return TRUE ;
 8003726:	2301      	movs	r3, #1
 8003728:	e008      	b.n	800373c <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <queu_contains+0x4c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	429a      	cmp	r2, r3
 8003738:	d3ee      	bcc.n	8003718 <queu_contains+0x18>
	return FALSE ;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	20001f60 	.word	0x20001f60
 800374c:	20001fac 	.word	0x20001fac

08003750 <queu_add>:

static bool_e queu_add(task_t * task){
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ffd1 	bl	8003700 <queu_contains>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <queu_add+0x22>
 8003764:	4b27      	ldr	r3, [pc, #156]	; (8003804 <queu_add+0xb4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b12      	cmp	r3, #18
 800376a:	d802      	bhi.n	8003772 <queu_add+0x22>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <queu_add+0x26>
		return FALSE ;
 8003772:	2300      	movs	r3, #0
 8003774:	e041      	b.n	80037fa <queu_add+0xaa>


	uint32_t t = 0 ;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 800377a:	e03a      	b.n	80037f2 <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 800377c:	4a22      	ldr	r2, [pc, #136]	; (8003808 <queu_add+0xb8>)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <queu_add+0x50>
		{
			task_queu[t] = task ;
 8003788:	491f      	ldr	r1, [pc, #124]	; (8003808 <queu_add+0xb8>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8003792:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <queu_add+0xb4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	4a1a      	ldr	r2, [pc, #104]	; (8003804 <queu_add+0xb4>)
 800379a:	6013      	str	r3, [r2, #0]
			return TRUE;
 800379c:	2301      	movs	r3, #1
 800379e:	e02c      	b.n	80037fa <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	4918      	ldr	r1, [pc, #96]	; (8003808 <queu_add+0xb8>)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d91c      	bls.n	80037ec <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3301      	adds	r3, #1
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4a13      	ldr	r2, [pc, #76]	; (8003808 <queu_add+0xb8>)
 80037ba:	1898      	adds	r0, r3, r2
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4a11      	ldr	r2, [pc, #68]	; (8003808 <queu_add+0xb8>)
 80037c2:	1899      	adds	r1, r3, r2
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <queu_add+0xb4>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	461a      	mov	r2, r3
 80037d0:	f00c f825 	bl	800f81e <memmove>
			task_queu[t] = task ;
 80037d4:	490c      	ldr	r1, [pc, #48]	; (8003808 <queu_add+0xb8>)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <queu_add+0xb4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a07      	ldr	r2, [pc, #28]	; (8003804 <queu_add+0xb4>)
 80037e6:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e006      	b.n	80037fa <queu_add+0xaa>
		}
		t++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3301      	adds	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b12      	cmp	r3, #18
 80037f6:	d9c1      	bls.n	800377c <queu_add+0x2c>
	}
	return FALSE ;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20001fac 	.word	0x20001fac
 8003808:	20001f60 	.word	0x20001f60

0800380c <queu_remove>:

static bool_e queu_remove(task_t * task){
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff73 	bl	8003700 <queu_contains>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <queu_remove+0x1a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <queu_remove+0x1e>
		return FALSE ;
 8003826:	2300      	movs	r3, #0
 8003828:	e02a      	b.n	8003880 <queu_remove+0x74>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e021      	b.n	8003874 <queu_remove+0x68>
		if(task == task_queu[t]){
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <queu_remove+0x7c>)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d117      	bne.n	800386e <queu_remove+0x62>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4a11      	ldr	r2, [pc, #68]	; (8003888 <queu_remove+0x7c>)
 8003844:	1898      	adds	r0, r3, r2
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3301      	adds	r3, #1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4a0e      	ldr	r2, [pc, #56]	; (8003888 <queu_remove+0x7c>)
 800384e:	1899      	adds	r1, r3, r2
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <queu_remove+0x80>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	461a      	mov	r2, r3
 800385c:	f00b ffdf 	bl	800f81e <memmove>
			task_queu_size -- ;
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <queu_remove+0x80>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3b01      	subs	r3, #1
 8003866:	4a09      	ldr	r2, [pc, #36]	; (800388c <queu_remove+0x80>)
 8003868:	6013      	str	r3, [r2, #0]
			return TRUE ;
 800386a:	2301      	movs	r3, #1
 800386c:	e008      	b.n	8003880 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3301      	adds	r3, #1
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <queu_remove+0x80>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	429a      	cmp	r2, r3
 800387c:	d3d8      	bcc.n	8003830 <queu_remove+0x24>
		}
	}
	return FALSE ;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20001f60 	.word	0x20001f60
 800388c:	20001fac 	.word	0x20001fac

08003890 <tasks_init>:

static uint32_t start_time_gyro = 0;
static uint32_t end_time_filtering_gyro= 0;


void tasks_init(system_t * sys_){
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 8003898:	4a25      	ldr	r2, [pc, #148]	; (8003930 <tasks_init+0xa0>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 800389e:	2101      	movs	r1, #1
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7ff fed1 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 80038a6:	2101      	movs	r1, #1
 80038a8:	2001      	movs	r0, #1
 80038aa:	f7ff fecd 	bl	8003648 <SCHEDULER_enable_task>

	SCHEDULER_enable_task(TASK_LED, TRUE);
 80038ae:	2101      	movs	r1, #1
 80038b0:	2003      	movs	r0, #3
 80038b2:	f7ff fec9 	bl	8003648 <SCHEDULER_enable_task>
	//SCHEDULER_enable_task(TASK_PRINTF, TRUE);
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 80038b6:	2101      	movs	r1, #1
 80038b8:	2008      	movs	r0, #8
 80038ba:	f7ff fec5 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 80038be:	2101      	movs	r1, #1
 80038c0:	2005      	movs	r0, #5
 80038c2:	f7ff fec1 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 80038c6:	2101      	movs	r1, #1
 80038c8:	2004      	movs	r0, #4
 80038ca:	f7ff febd 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 80038ce:	2101      	movs	r1, #1
 80038d0:	2007      	movs	r0, #7
 80038d2:	f7ff feb9 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_UPDATE, TRUE);
 80038d6:	2101      	movs	r1, #1
 80038d8:	2009      	movs	r0, #9
 80038da:	f7ff feb5 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_ANALYSIS, TRUE);
 80038de:	2101      	movs	r1, #1
 80038e0:	200a      	movs	r0, #10
 80038e2:	f7ff feb1 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_HIGH_LVL, TRUE);
 80038e6:	2101      	movs	r1, #1
 80038e8:	200b      	movs	r0, #11
 80038ea:	f7ff fead 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_TELEMETRIE, TRUE);
 80038ee:	2101      	movs	r1, #1
 80038f0:	200c      	movs	r0, #12
 80038f2:	f7ff fea9 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_LOGGER, TRUE);
 80038f6:	2101      	movs	r1, #1
 80038f8:	200d      	movs	r0, #13
 80038fa:	f7ff fea5 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_SELF_TEST, TRUE);
 80038fe:	2101      	movs	r1, #1
 8003900:	200e      	movs	r0, #14
 8003902:	f7ff fea1 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_UPDATE, TRUE);
 8003906:	2101      	movs	r1, #1
 8003908:	200f      	movs	r0, #15
 800390a:	f7ff fe9d 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_TEMP, TRUE);
 800390e:	2101      	movs	r1, #1
 8003910:	2010      	movs	r0, #16
 8003912:	f7ff fe99 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_PRESSURE, TRUE);
 8003916:	2101      	movs	r1, #1
 8003918:	2011      	movs	r0, #17
 800391a:	f7ff fe95 	bl	8003648 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_ALTITUDE, TRUE);
 800391e:	2101      	movs	r1, #1
 8003920:	2012      	movs	r0, #18
 8003922:	f7ff fe91 	bl	8003648 <SCHEDULER_enable_task>

}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20002018 	.word	0x20002018

08003934 <process_print_f>:

void process_print_f(uint32_t current_time_us){
 8003934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003938:	b088      	sub	sp, #32
 800393a:	af04      	add	r7, sp, #16
 800393c:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);
//	gyro_t * gyro = &sys->sensors.gyro ;
//	acc_t * acc = &sys->sensors.acc ;
	orientation_t * ori = &sys->orientation ;
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <process_print_f+0x5c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003946:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	//printf("%f\t%f\t%f\t%f\t%f\t%f\t%lu\n",acc->raw[0], acc->raw[1], acc->raw[2],gyro->raw[0], gyro->raw[1], gyro->raw[2], TASK_get_task(TASK_GYRO_UPDATE)->duration_us);
	//printf("%f\t%f\t%lu\n", acc->filtered[ACC_AXE_Z], gyro->filtered[ACC_AXE_X], delta_1);
	//printf("%f\n", acc->filtered[GYRO_AXE_X]);
	//printf("%lu\n", delta_1);
	printf("%f\t%f\t%f\n", ori->angular_position[0], ori->angular_velocity[0], ori->acc_angles[0]);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7fc fdfb 	bl	8000548 <__aeabi_f2d>
 8003952:	4680      	mov	r8, r0
 8003954:	4689      	mov	r9, r1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fdf3 	bl	8000548 <__aeabi_f2d>
 8003962:	4604      	mov	r4, r0
 8003964:	460d      	mov	r5, r1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fc fdec 	bl	8000548 <__aeabi_f2d>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003978:	e9cd 4500 	strd	r4, r5, [sp]
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	4804      	ldr	r0, [pc, #16]	; (8003994 <process_print_f+0x60>)
 8003982:	f00c fbc9 	bl	8010118 <iprintf>
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003990:	20002018 	.word	0x20002018
 8003994:	080137d8 	.word	0x080137d8

08003998 <process_led>:


void process_led(uint32_t current_time_us){
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
//	uint8_t data[2];
//	uint8_t len = DATA_LOGGER_Get_Data(DATA_ID_ROLL_GYRO, data);
//	TELEMETRY_Send_Data(&sys->radio.telemetry, data, len);
	IHM_Update();
 80039a0:	f7fe fe40 	bl	8002624 <IHM_Update>
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <process_gyro_update>:

void process_gyro_update(uint32_t current_time_us){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	start_time_gyro = current_time_us ;
 80039b4:	4a06      	ldr	r2, [pc, #24]	; (80039d0 <process_gyro_update+0x24>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6013      	str	r3, [r2, #0]
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <process_gyro_update+0x28>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3330      	adds	r3, #48	; 0x30
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 f90b 	bl	8004bdc <GYRO_ACC_update_dma>

}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	2000201c 	.word	0x2000201c
 80039d4:	20002018 	.word	0x20002018

080039d8 <process_gyro_filter>:

void process_gyro_filter(uint32_t current_time_us){
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	end_time_filtering_gyro = current_time_us ;
 80039e0:	4a06      	ldr	r2, [pc, #24]	; (80039fc <process_gyro_filter+0x24>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6013      	str	r3, [r2, #0]

	GYRO_process_lpf(&sys->sensors.gyro);
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <process_gyro_filter+0x28>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3330      	adds	r3, #48	; 0x30
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 f911 	bl	8004c14 <GYRO_process_lpf>

}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20002020 	.word	0x20002020
 8003a00:	20002018 	.word	0x20002018

08003a04 <process_acc_update>:

void process_acc_update(uint32_t current_time_us){
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <process_acc_update+0x1c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	33a4      	adds	r3, #164	; 0xa4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fee6 	bl	80047e4 <ACC_update>
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20002018 	.word	0x20002018

08003a24 <process_acc_filter>:

void process_acc_filter(uint32_t current_time_us){
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	ACC_process_lpf(&sys->sensors.acc);
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <process_acc_filter+0x1c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	33a4      	adds	r3, #164	; 0xa4
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fef4 	bl	8004820 <ACC_process_lpf>
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20002018 	.word	0x20002018

08003a44 <process_event_main>:

void process_event_main(uint32_t current_time_us){
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7ff f933 	bl	8002cb8 <EVENT_process>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <process_orientation_update>:

void process_orientation_update(uint32_t current_time_us){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

	ORIENTATION_Update(&sys->orientation);
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <process_orientation_update+0x2c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe f8d1 	bl	8001c14 <ORIENTATION_Update>

	REGULATION_POSITION_Process();
 8003a72:	f000 fe53 	bl	800471c <REGULATION_POSITION_Process>
	REGULATION_ORIENTATION_Process();
 8003a76:	f000 fcf9 	bl	800446c <REGULATION_ORIENTATION_Process>
	PROPULSION_Update_Motors();
 8003a7a:	f000 f923 	bl	8003cc4 <PROPULSION_Update_Motors>
	//delta_1 = (TIME_us() - start_time_gyro) ;
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20002018 	.word	0x20002018

08003a8c <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 8003a94:	f7ff fc92 	bl	80033bc <SCHEDULER_task>
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <process_controller_channel_update>:

void process_controller_channel_update(uint32_t current_time_us){
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	if(CONTROLLER_Update_Channels_Array())
 8003aa8:	f000 fc66 	bl	8004378 <CONTROLLER_Update_Channels_Array>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <process_controller_channel_update+0x1a>
		SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_ANALYSIS, TASK_MODE_EVENT);
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	200a      	movs	r0, #10
 8003ab6:	f7ff fde5 	bl	8003684 <SCHEDULER_task_set_mode>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <process_controller_channel_analysis>:

void process_controller_channel_analysis(uint32_t current_time_us){
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
	CONTROLLER_Update_Channels_Analysis();
 8003aca:	f000 f9d7 	bl	8003e7c <CONTROLLER_Update_Channels_Analysis>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <process_high_lvl>:

void process_high_lvl(uint32_t current_time_us){
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
	EVENT_process(TRUE);
 8003ade:	2001      	movs	r0, #1
 8003ae0:	f7ff f8ea 	bl	8002cb8 <EVENT_process>
	FLIGHT_MODE_Main(current_time_us);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7fe fb3d 	bl	8002164 <FLIGHT_MODE_Main>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <process_telemetry>:

void process_telemetry(uint32_t current_time_us){
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
	TELEMETRY_Process(current_time_us);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f003 fb5a 	bl	80071b4 <TELEMETRY_Process>
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <process_logger>:

void process_logger(uint32_t current_time_us){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	DATA_LOGGER_Main();
 8003b10:	f7fd fd16 	bl	8001540 <DATA_LOGGER_Main>
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <process_self_test>:

void process_self_test(uint32_t current_time_us){
 8003b1c:	b590      	push	{r4, r7, lr}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	sys->soft.cpu_load = SCHEDULER_get_cpu_load();
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <process_self_test+0x24>)
 8003b26:	681c      	ldr	r4, [r3, #0]
 8003b28:	f7ff fc70 	bl	800340c <SCHEDULER_get_cpu_load>
 8003b2c:	eef0 7a40 	vmov.f32	s15, s0
 8003b30:	f604 3348 	addw	r3, r4, #2888	; 0xb48
 8003b34:	edc3 7a00 	vstr	s15, [r3]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd90      	pop	{r4, r7, pc}
 8003b40:	20002018 	.word	0x20002018

08003b44 <process_baro_update>:

void process_baro_update(uint32_t current_time_us){
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	SCHEDULER_reschedule_task(TASK_BARO_UPDATE, BARO_Main(&sys->sensors.baro));
 8003b4c:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <process_baro_update+0x28>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fee1 	bl	800491c <BARO_Main>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	200f      	movs	r0, #15
 8003b60:	f7ff fdbc 	bl	80036dc <SCHEDULER_reschedule_task>
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20002018 	.word	0x20002018

08003b70 <process_baro_temp>:

void process_baro_temp(uint32_t current_time_us){
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	BARO_compute_temp(&sys->sensors.baro);
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <process_baro_temp+0x20>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 ff17 	bl	80049b4 <BARO_compute_temp>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20002018 	.word	0x20002018

08003b94 <process_baro_pressure>:

void process_baro_pressure(uint32_t current_time_us){
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	BARO_compute_pressure(&sys->sensors.baro);
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <process_baro_pressure+0x24>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 ff12 	bl	80049ce <BARO_compute_pressure>
	EVENT_Set_flag(FLAG_BARO_PRESSURE_RDY);
 8003baa:	200b      	movs	r0, #11
 8003bac:	f7ff f912 	bl	8002dd4 <EVENT_Set_flag>
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20002018 	.word	0x20002018

08003bbc <process_baro_altitude>:

void process_baro_altitude(uint32_t current_time_us){
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	BARO_compute_altitude(&sys->sensors.baro);
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <process_baro_altitude+0x20>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 ff0b 	bl	80049e8 <BARO_compute_altitude>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20002018 	.word	0x20002018

08003be0 <TASK_get_task>:


};


task_t * TASK_get_task(task_ids_t id){
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	22d0      	movs	r2, #208	; 0xd0
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <TASK_get_task+0x24>)
 8003bf4:	4413      	add	r3, r2
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000a54 	.word	0x20000a54

08003c08 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c0e:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8003c10:	f003 fcd2 	bl	80075b8 <HAL_GetTick>
 8003c14:	4603      	mov	r3, r0
 8003c16:	3301      	adds	r3, #1
 8003c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c1c:	fb02 f203 	mul.w	r2, r2, r3
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <TIME_us+0x50>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	08db      	lsrs	r3, r3, #3
 8003c26:	490d      	ldr	r1, [pc, #52]	; (8003c5c <TIME_us+0x54>)
 8003c28:	fba1 1303 	umull	r1, r3, r1, r3
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c32:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s est pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us > t_us)
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <TIME_us+0x58>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d203      	bcs.n	8003c46 <TIME_us+0x3e>
		t_us += 1000;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003c44:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 8003c46:	4a06      	ldr	r2, [pc, #24]	; (8003c60 <TIME_us+0x58>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6013      	str	r3, [r2, #0]

	return t_us;
 8003c4c:	687b      	ldr	r3, [r7, #4]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000e010 	.word	0xe000e010
 8003c5c:	18618619 	.word	0x18618619
 8003c60:	20002024 	.word	0x20002024

08003c64 <TIME_delay_us_blocking>:

void TIME_delay_us_blocking(uint32_t duration_us){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	uint32_t end_time = TIME_us() + duration_us;
 8003c6c:	f7ff ffcc 	bl	8003c08 <TIME_us>
 8003c70:	4602      	mov	r2, r0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
	while(TIME_us() < end_time);
 8003c78:	bf00      	nop
 8003c7a:	f7ff ffc5 	bl	8003c08 <TIME_us>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d8f9      	bhi.n	8003c7a <TIME_delay_us_blocking+0x16>
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <PROPULSION_Init>:
#define ROLL prop->consigne[PROP_CONSIGNE_ROLL]
#define PITCH prop->consigne[PROP_CONSIGNE_PITCH]
#define YAW prop->consigne[PROP_CONSIGNE_YAW]
#define THRUST prop->consigne[PROP_CONSIGNE_THRUST]

void PROPULSION_Init(propulsion_t * prop_, TIM_HandleTypeDef * htim){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
	prop = prop_;
 8003c9a:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <PROPULSION_Init+0x30>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6013      	str	r3, [r2, #0]

	MOTORS_Init(&prop->motors, htim, prop->motors_outputs, TRUE);
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <PROPULSION_Init+0x30>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <PROPULSION_Init+0x30>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f103 0218 	add.w	r2, r3, #24
 8003cae:	2301      	movs	r3, #1
 8003cb0:	6839      	ldr	r1, [r7, #0]
 8003cb2:	f00b fc11 	bl	800f4d8 <MOTORS_Init>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20002028 	.word	0x20002028

08003cc4 <PROPULSION_Update_Motors>:

void PROPULSION_Update_Motors(void){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0

	//Mixage des sorties
	int16_t m1 = THRUST - PITCH - ROLL + YAW;
 8003cca:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	4b49      	ldr	r3, [pc, #292]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	80fb      	strh	r3, [r7, #6]
	int16_t m2 = THRUST - PITCH + ROLL - YAW ;
 8003d00:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	4b3c      	ldr	r3, [pc, #240]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	4b38      	ldr	r3, [pc, #224]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	80bb      	strh	r3, [r7, #4]
	int16_t m3 = THRUST + PITCH + ROLL + YAW ;
 8003d36:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	807b      	strh	r3, [r7, #2]
	int16_t m4 = THRUST + PITCH - ROLL - YAW ;
 8003d6c:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	803b      	strh	r3, [r7, #0]
	prop->motors_outputs[MOTOR_FL] = (uint16_t)((m1 > 0) ? m1 : 0);
 8003da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003da6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003daa:	b21a      	sxth	r2, r3
 8003dac:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b292      	uxth	r2, r2
 8003db2:	83da      	strh	r2, [r3, #30]
	prop->motors_outputs[MOTOR_FR] = (uint16_t)((m2 > 0) ? m2 : 0);
 8003db4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003db8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003dbc:	b21a      	sxth	r2, r3
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	839a      	strh	r2, [r3, #28]
	prop->motors_outputs[MOTOR_BR] = (uint16_t)((m3 > 0) ? m3 : 0);
 8003dc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003dca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003dce:	b21a      	sxth	r2, r3
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	831a      	strh	r2, [r3, #24]
	prop->motors_outputs[MOTOR_BL] = (uint16_t)((m4 > 0) ? m4 : 0);
 8003dd8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003ddc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003de0:	b21a      	sxth	r2, r3
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	b292      	uxth	r2, r2
 8003de8:	835a      	strh	r2, [r3, #26]
	MOTORS_Change_output(&prop->motors);
 8003dea:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <PROPULSION_Update_Motors+0x138>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f00b fba9 	bl	800f546 <MOTORS_Change_output>

}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20002028 	.word	0x20002028

08003e00 <CONTROLLER_Init>:
//Controller used
static controller_t * controller ;
//Private functions prototypes
static void flag_process();

void CONTROLLER_Init(controller_t * controller_, ibus_t * ibus){
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	//Sauvegarde la structure utilsié
	controller = controller_ ;
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6013      	str	r3, [r2, #0]
	controller->channels = ibus->channels ;
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	321a      	adds	r2, #26
 8003e18:	601a      	str	r2, [r3, #0]

	//Configuration du mode d'analyse pour les channels
	controller->analysis_mode[0] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003e1a:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	711a      	strb	r2, [r3, #4]
	controller->analysis_mode[1] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2201      	movs	r2, #1
 8003e28:	715a      	strb	r2, [r3, #5]
	controller->analysis_mode[2] = ANALYSIS_MODE_STICK_LVL ;
 8003e2a:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	719a      	strb	r2, [r3, #6]
	controller->analysis_mode[3] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003e32:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2201      	movs	r2, #1
 8003e38:	71da      	strb	r2, [r3, #7]
	controller->analysis_mode[4] = ANALYSIS_MODE_SWITCH_MODE ;
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2204      	movs	r2, #4
 8003e40:	721a      	strb	r2, [r3, #8]
	controller->analysis_mode[5] = ANALYSIS_MODE_SWITCH_MODE ;
 8003e42:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2204      	movs	r2, #4
 8003e48:	725a      	strb	r2, [r3, #9]
	controller->analysis_mode[6] = ANALYSIS_MODE_SWITCH_MODE ;
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	729a      	strb	r2, [r3, #10]
	controller->analysis_mode[7] = ANALYSIS_MODE_SWITCH_MODE ;
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2204      	movs	r2, #4
 8003e58:	72da      	strb	r2, [r3, #11]
	controller->analysis_mode[8] = ANALYSIS_MODE_BUTTON_PUSH ;
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2206      	movs	r2, #6
 8003e60:	731a      	strb	r2, [r3, #12]
	controller->analysis_mode[9] = ANALYSIS_MODE_BUTTON_ON_OFF ;
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <CONTROLLER_Init+0x78>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2205      	movs	r2, #5
 8003e68:	735a      	strb	r2, [r3, #13]

}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	2000202c 	.word	0x2000202c

08003e7c <CONTROLLER_Update_Channels_Analysis>:

void CONTROLLER_Update_Channels_Analysis(void){
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
	//Analyse des channels
		bool_e button_state ;
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8003e82:	2300      	movs	r3, #0
 8003e84:	71fb      	strb	r3, [r7, #7]
 8003e86:	e1a0      	b.n	80041ca <CONTROLLER_Update_Channels_Analysis+0x34e>
			switch (controller->analysis_mode[ch]) {
 8003e88:	4bac      	ldr	r3, [pc, #688]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	4413      	add	r3, r2
 8003e92:	791b      	ldrb	r3, [r3, #4]
 8003e94:	2b06      	cmp	r3, #6
 8003e96:	f200 818d 	bhi.w	80041b4 <CONTROLLER_Update_Channels_Analysis+0x338>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <CONTROLLER_Update_Channels_Analysis+0x24>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	080041b5 	.word	0x080041b5
 8003ea4:	08003ebd 	.word	0x08003ebd
 8003ea8:	08003f09 	.word	0x08003f09
 8003eac:	080041b5 	.word	0x080041b5
 8003eb0:	08004115 	.word	0x08004115
 8003eb4:	08003fd1 	.word	0x08003fd1
 8003eb8:	08004085 	.word	0x08004085
				case ANALYSIS_MODE_NONE:
					//On fait R
					break;

				case ANALYSIS_MODE_STICK_DEAD_BAND :
					if(abs(controller->channels[ch] - 1500) < JOYCTICK_DEAD_BAND)
 8003ebc:	4b9f      	ldr	r3, [pc, #636]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003ed0:	f113 0f1d 	cmn.w	r3, #29
 8003ed4:	f2c0 8170 	blt.w	80041b8 <CONTROLLER_Update_Channels_Analysis+0x33c>
 8003ed8:	4b98      	ldr	r3, [pc, #608]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003eec:	2b1d      	cmp	r3, #29
 8003eee:	f300 8163 	bgt.w	80041b8 <CONTROLLER_Update_Channels_Analysis+0x33c>
						controller->channels[ch] = 1500 ;
 8003ef2:	4b92      	ldr	r3, [pc, #584]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4413      	add	r3, r2
 8003f00:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003f04:	801a      	strh	r2, [r3, #0]
					break;
 8003f06:	e157      	b.n	80041b8 <CONTROLLER_Update_Channels_Analysis+0x33c>

				case ANALYSIS_MODE_STICK_LVL :
					if(controller->channels[ch] > 1000 && controller->channels[ch] <= 1050)
 8003f08:	4b8c      	ldr	r3, [pc, #560]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f1c:	d914      	bls.n	8003f48 <CONTROLLER_Update_Channels_Analysis+0xcc>
 8003f1e:	4b87      	ldr	r3, [pc, #540]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	f240 421a 	movw	r2, #1050	; 0x41a
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d808      	bhi.n	8003f48 <CONTROLLER_Update_Channels_Analysis+0xcc>
						controller->throttle_lvl[ch] = THROTTLE_LVL_NULL ;
 8003f36:	4b81      	ldr	r3, [pc, #516]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	4413      	add	r3, r2
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2020 	strb.w	r2, [r3, #32]
 8003f46:	e042      	b.n	8003fce <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1050 && controller->channels[ch] <= 1150)
 8003f48:	4b7c      	ldr	r3, [pc, #496]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4413      	add	r3, r2
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	f240 421a 	movw	r2, #1050	; 0x41a
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d914      	bls.n	8003f8a <CONTROLLER_Update_Channels_Analysis+0x10e>
 8003f60:	4b76      	ldr	r3, [pc, #472]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4413      	add	r3, r2
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	f240 427e 	movw	r2, #1150	; 0x47e
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d808      	bhi.n	8003f8a <CONTROLLER_Update_Channels_Analysis+0x10e>
						controller->throttle_lvl[ch] = THROTTLE_LVL_LOW ;
 8003f78:	4b70      	ldr	r3, [pc, #448]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f80:	4413      	add	r3, r2
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2020 	strb.w	r2, [r3, #32]
 8003f88:	e021      	b.n	8003fce <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1150 && controller->channels[ch] < 2000)
 8003f8a:	4b6c      	ldr	r3, [pc, #432]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	f240 427e 	movw	r2, #1150	; 0x47e
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	f240 810c 	bls.w	80041bc <CONTROLLER_Update_Channels_Analysis+0x340>
 8003fa4:	4b65      	ldr	r3, [pc, #404]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003fb8:	f080 8100 	bcs.w	80041bc <CONTROLLER_Update_Channels_Analysis+0x340>
						controller->throttle_lvl[ch] = THROTTLE_LVL_HIGH ;
 8003fbc:	4b5f      	ldr	r3, [pc, #380]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2020 	strb.w	r2, [r3, #32]


					break;
 8003fcc:	e0f6      	b.n	80041bc <CONTROLLER_Update_Channels_Analysis+0x340>
 8003fce:	e0f5      	b.n	80041bc <CONTROLLER_Update_Channels_Analysis+0x340>

				case ANALYSIS_MODE_BUTTON_ON_OFF :
					//Active le boutton dans le code
					if(!controller->button_on_off[ch])
 8003fd0:	4b5a      	ldr	r3, [pc, #360]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <CONTROLLER_Update_Channels_Analysis+0x176>
						controller->button_on_off[ch] = BUTTON_OFF ;
 8003fe2:	4b56      	ldr	r3, [pc, #344]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	4413      	add	r3, r2
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8003ff2:	4b52      	ldr	r3, [pc, #328]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4413      	add	r3, r2
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004006:	4293      	cmp	r3, r2
 8004008:	bf8c      	ite	hi
 800400a:	2301      	movhi	r3, #1
 800400c:	2300      	movls	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8004012:	4b4a      	ldr	r3, [pc, #296]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	4413      	add	r3, r2
 800401c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004020:	461a      	mov	r2, r3
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	4293      	cmp	r3, r2
 8004026:	d022      	beq.n	800406e <CONTROLLER_Update_Channels_Analysis+0x1f2>
 8004028:	4b44      	ldr	r3, [pc, #272]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004030:	4413      	add	r3, r2
 8004032:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004036:	2b00      	cmp	r3, #0
 8004038:	d119      	bne.n	800406e <CONTROLLER_Update_Channels_Analysis+0x1f2>
						if(controller->button_on_off[ch] == BUTTON_ON)
 800403a:	4b40      	ldr	r3, [pc, #256]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	4413      	add	r3, r2
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004048:	2b02      	cmp	r3, #2
 800404a:	d108      	bne.n	800405e <CONTROLLER_Update_Channels_Analysis+0x1e2>
							controller->button_on_off[ch] = BUTTON_OFF ;
 800404c:	4b3b      	ldr	r3, [pc, #236]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004054:	4413      	add	r3, r2
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800405c:	e007      	b.n	800406e <CONTROLLER_Update_Channels_Analysis+0x1f2>
						else
							controller->button_on_off[ch] = BUTTON_ON ;
 800405e:	4b37      	ldr	r3, [pc, #220]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004066:	4413      	add	r3, r2
 8004068:	2202      	movs	r2, #2
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}

					controller->button_state[ch] = button_state ;
 800406e:	4b33      	ldr	r3, [pc, #204]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	6839      	ldr	r1, [r7, #0]
 8004078:	b2c9      	uxtb	r1, r1
 800407a:	4413      	add	r3, r2
 800407c:	460a      	mov	r2, r1
 800407e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8004082:	e09c      	b.n	80041be <CONTROLLER_Update_Channels_Analysis+0x342>

				case ANALYSIS_MODE_BUTTON_PUSH :
					//Active le boutton dans le code
					if(!controller->button_pushed[ch])
 8004084:	4b2d      	ldr	r3, [pc, #180]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408c:	4413      	add	r3, r2
 800408e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004092:	2b00      	cmp	r3, #0
 8004094:	d107      	bne.n	80040a6 <CONTROLLER_Update_Channels_Analysis+0x22a>
						controller->button_pushed[ch] = BUTTON_PUSHED_NO_REQUEST ;
 8004096:	4b29      	ldr	r3, [pc, #164]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	4413      	add	r3, r2
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 80040a6:	4b25      	ldr	r3, [pc, #148]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040ba:	4293      	cmp	r3, r2
 80040bc:	bf8c      	ite	hi
 80040be:	2301      	movhi	r3, #1
 80040c0:	2300      	movls	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	4413      	add	r3, r2
 80040d0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80040d4:	461a      	mov	r2, r3
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	4293      	cmp	r3, r2
 80040da:	d010      	beq.n	80040fe <CONTROLLER_Update_Channels_Analysis+0x282>
 80040dc:	4b17      	ldr	r3, [pc, #92]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e4:	4413      	add	r3, r2
 80040e6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <CONTROLLER_Update_Channels_Analysis+0x282>
						controller->button_pushed[ch] = BUTTON_PUSHED_REQUEST ;
 80040ee:	4b13      	ldr	r3, [pc, #76]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	4413      	add	r3, r2
 80040f8:	2202      	movs	r2, #2
 80040fa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					}

					controller->button_state[ch] = button_state ;
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	6839      	ldr	r1, [r7, #0]
 8004108:	b2c9      	uxtb	r1, r1
 800410a:	4413      	add	r3, r2
 800410c:	460a      	mov	r2, r1
 800410e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8004112:	e054      	b.n	80041be <CONTROLLER_Update_Channels_Analysis+0x342>
				case ANALYSIS_MODE_SEQUENCE:
					//todo analyse de séquences sur les switchs
					break;

				case ANALYSIS_MODE_SWITCH_MODE:
					if(controller->channels[ch] < 1300)
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	f240 5213 	movw	r2, #1299	; 0x513
 8004128:	4293      	cmp	r3, r2
 800412a:	d809      	bhi.n	8004140 <CONTROLLER_Update_Channels_Analysis+0x2c4>
						controller->switch_pos[ch] = SWITCH_POS_1 ;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004134:	4413      	add	r3, r2
 8004136:	2200      	movs	r2, #0
 8004138:	749a      	strb	r2, [r3, #18]
						controller->switch_pos[ch] = SWITCH_POS_2 ;
					else if(controller->channels[ch] > 1600)
						controller->switch_pos[ch] = SWITCH_POS_3 ;
					else
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
					break;
 800413a:	e040      	b.n	80041be <CONTROLLER_Update_Channels_Analysis+0x342>
 800413c:	2000202c 	.word	0x2000202c
					else if(controller->channels[ch] > 1300 && controller->channels[ch] < 1600)
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	f240 5214 	movw	r2, #1300	; 0x514
 8004154:	4293      	cmp	r3, r2
 8004156:	d912      	bls.n	800417e <CONTROLLER_Update_Channels_Analysis+0x302>
 8004158:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4413      	add	r3, r2
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800416c:	d207      	bcs.n	800417e <CONTROLLER_Update_Channels_Analysis+0x302>
						controller->switch_pos[ch] = SWITCH_POS_2 ;
 800416e:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	4413      	add	r3, r2
 8004178:	2201      	movs	r2, #1
 800417a:	749a      	strb	r2, [r3, #18]
					break;
 800417c:	e01f      	b.n	80041be <CONTROLLER_Update_Channels_Analysis+0x342>
					else if(controller->channels[ch] > 1600)
 800417e:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004192:	d907      	bls.n	80041a4 <CONTROLLER_Update_Channels_Analysis+0x328>
						controller->switch_pos[ch] = SWITCH_POS_3 ;
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419c:	4413      	add	r3, r2
 800419e:	2202      	movs	r2, #2
 80041a0:	749a      	strb	r2, [r3, #18]
					break;
 80041a2:	e00c      	b.n	80041be <CONTROLLER_Update_Channels_Analysis+0x342>
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
 80041a4:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <CONTROLLER_Update_Channels_Analysis+0x364>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ac:	4413      	add	r3, r2
 80041ae:	2203      	movs	r2, #3
 80041b0:	749a      	strb	r2, [r3, #18]
					break;
 80041b2:	e004      	b.n	80041be <CONTROLLER_Update_Channels_Analysis+0x342>
				default:
					break;
 80041b4:	bf00      	nop
 80041b6:	e002      	b.n	80041be <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 80041bc:	bf00      	nop
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	71fb      	strb	r3, [r7, #7]
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	2b09      	cmp	r3, #9
 80041d0:	f77f ae5a 	ble.w	8003e88 <CONTROLLER_Update_Channels_Analysis+0xc>
			}
		}

		flag_process();
 80041d4:	f000 f806 	bl	80041e4 <flag_process>
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	2000202c 	.word	0x2000202c

080041e4 <flag_process>:

static void flag_process()
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
	//Throttle lvl
	switch(controller->throttle_lvl[2]){
 80041e8:	4b62      	ldr	r3, [pc, #392]	; (8004374 <flag_process+0x190>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d00d      	beq.n	8004210 <flag_process+0x2c>
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d015      	beq.n	8004224 <flag_process+0x40>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d11d      	bne.n	8004238 <flag_process+0x54>
		case THROTTLE_LVL_NULL :
			EVENT_Set_flag(FLAG_THROTTLE_NULL);
 80041fc:	201b      	movs	r0, #27
 80041fe:	f7fe fde9 	bl	8002dd4 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8004202:	201a      	movs	r0, #26
 8004204:	f7fe fdfe 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8004208:	2019      	movs	r0, #25
 800420a:	f7fe fdfb 	bl	8002e04 <EVENT_Clean_flag>
			break;
 800420e:	e013      	b.n	8004238 <flag_process+0x54>
		case THROTTLE_LVL_LOW :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8004210:	201b      	movs	r0, #27
 8004212:	f7fe fdf7 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_LOW);
 8004216:	201a      	movs	r0, #26
 8004218:	f7fe fddc 	bl	8002dd4 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 800421c:	2019      	movs	r0, #25
 800421e:	f7fe fdf1 	bl	8002e04 <EVENT_Clean_flag>
			break;
 8004222:	e009      	b.n	8004238 <flag_process+0x54>
		case THROTTLE_LVL_HIGH :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8004224:	201b      	movs	r0, #27
 8004226:	f7fe fded 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 800422a:	201a      	movs	r0, #26
 800422c:	f7fe fdea 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_HIGH);
 8004230:	2019      	movs	r0, #25
 8004232:	f7fe fdcf 	bl	8002dd4 <EVENT_Set_flag>
			break;
 8004236:	bf00      	nop
	}

	//Switch 1 (ch5 soit ch[4])
	if(controller->switch_pos[4] == SWITCH_POS_1){
 8004238:	4b4e      	ldr	r3, [pc, #312]	; (8004374 <flag_process+0x190>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	7d9b      	ldrb	r3, [r3, #22]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <flag_process+0x6c>
		EVENT_Set_flag(FLAG_CHAN_5_POS_1);
 8004242:	200d      	movs	r0, #13
 8004244:	f7fe fdc6 	bl	8002dd4 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_5_POS_3);
 8004248:	200e      	movs	r0, #14
 800424a:	f7fe fddb 	bl	8002e04 <EVENT_Clean_flag>
 800424e:	e005      	b.n	800425c <flag_process+0x78>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_5_POS_1);
 8004250:	200d      	movs	r0, #13
 8004252:	f7fe fdd7 	bl	8002e04 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_5_POS_3);
 8004256:	200e      	movs	r0, #14
 8004258:	f7fe fdbc 	bl	8002dd4 <EVENT_Set_flag>
	}
	//Switch 2(ch6 soit ch[5])
	switch(controller->switch_pos[5]){
 800425c:	4b45      	ldr	r3, [pc, #276]	; (8004374 <flag_process+0x190>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	7ddb      	ldrb	r3, [r3, #23]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d828      	bhi.n	80042b8 <flag_process+0xd4>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <flag_process+0x88>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	0800427d 	.word	0x0800427d
 8004270:	08004291 	.word	0x08004291
 8004274:	080042a5 	.word	0x080042a5
 8004278:	080042b9 	.word	0x080042b9
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_6_POS_1);
 800427c:	200f      	movs	r0, #15
 800427e:	f7fe fda9 	bl	8002dd4 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8004282:	2010      	movs	r0, #16
 8004284:	f7fe fdbe 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8004288:	2011      	movs	r0, #17
 800428a:	f7fe fdbb 	bl	8002e04 <EVENT_Clean_flag>
			break;
 800428e:	e013      	b.n	80042b8 <flag_process+0xd4>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8004290:	200f      	movs	r0, #15
 8004292:	f7fe fdb7 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_2);
 8004296:	2010      	movs	r0, #16
 8004298:	f7fe fd9c 	bl	8002dd4 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 800429c:	2011      	movs	r0, #17
 800429e:	f7fe fdb1 	bl	8002e04 <EVENT_Clean_flag>
			break;
 80042a2:	e009      	b.n	80042b8 <flag_process+0xd4>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 80042a4:	200f      	movs	r0, #15
 80042a6:	f7fe fdad 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 80042aa:	2010      	movs	r0, #16
 80042ac:	f7fe fdaa 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_3);
 80042b0:	2011      	movs	r0, #17
 80042b2:	f7fe fd8f 	bl	8002dd4 <EVENT_Set_flag>
			break;
 80042b6:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 3(ch7 soit ch[6])
	switch(controller->switch_pos[6]){
 80042b8:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <flag_process+0x190>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	7e1b      	ldrb	r3, [r3, #24]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d828      	bhi.n	8004314 <flag_process+0x130>
 80042c2:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <flag_process+0xe4>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042ed 	.word	0x080042ed
 80042d0:	08004301 	.word	0x08004301
 80042d4:	08004315 	.word	0x08004315
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_7_POS_1);
 80042d8:	2012      	movs	r0, #18
 80042da:	f7fe fd7b 	bl	8002dd4 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 80042de:	2013      	movs	r0, #19
 80042e0:	f7fe fd90 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 80042e4:	2014      	movs	r0, #20
 80042e6:	f7fe fd8d 	bl	8002e04 <EVENT_Clean_flag>
			break;
 80042ea:	e013      	b.n	8004314 <flag_process+0x130>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 80042ec:	2012      	movs	r0, #18
 80042ee:	f7fe fd89 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_2);
 80042f2:	2013      	movs	r0, #19
 80042f4:	f7fe fd6e 	bl	8002dd4 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 80042f8:	2014      	movs	r0, #20
 80042fa:	f7fe fd83 	bl	8002e04 <EVENT_Clean_flag>
			break;
 80042fe:	e009      	b.n	8004314 <flag_process+0x130>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8004300:	2012      	movs	r0, #18
 8004302:	f7fe fd7f 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8004306:	2013      	movs	r0, #19
 8004308:	f7fe fd7c 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_3);
 800430c:	2014      	movs	r0, #20
 800430e:	f7fe fd61 	bl	8002dd4 <EVENT_Set_flag>
			break;
 8004312:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 4 (ch8 soit ch[7])
	if(controller->switch_pos[7] == SWITCH_POS_1){
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <flag_process+0x190>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	7e5b      	ldrb	r3, [r3, #25]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <flag_process+0x148>
		EVENT_Set_flag(FLAG_CHAN_8_POS_1);
 800431e:	2015      	movs	r0, #21
 8004320:	f7fe fd58 	bl	8002dd4 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_8_POS_3);
 8004324:	2016      	movs	r0, #22
 8004326:	f7fe fd6d 	bl	8002e04 <EVENT_Clean_flag>
 800432a:	e005      	b.n	8004338 <flag_process+0x154>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_8_POS_1);
 800432c:	2015      	movs	r0, #21
 800432e:	f7fe fd69 	bl	8002e04 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_8_POS_3);
 8004332:	2016      	movs	r0, #22
 8004334:	f7fe fd4e 	bl	8002dd4 <EVENT_Set_flag>
	}

	//Button 1 (ch9 soit ch[8]) en mode push
	if(controller->button_pushed[8] == BUTTON_PUSHED_REQUEST){
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <flag_process+0x190>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004340:	2b02      	cmp	r3, #2
 8004342:	d107      	bne.n	8004354 <flag_process+0x170>
		EVENT_Set_flag(FLAG_CHAN_9_PUSH);
 8004344:	2017      	movs	r0, #23
 8004346:	f7fe fd45 	bl	8002dd4 <EVENT_Set_flag>
		controller->button_pushed[8] = BUTTON_PUSHED_NO_REQUEST ;
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <flag_process+0x190>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	//Button 2 (ch10 soit ch[9]) en mode on/off
	if(controller->button_on_off[9] == BUTTON_ON)
 8004354:	4b07      	ldr	r3, [pc, #28]	; (8004374 <flag_process+0x190>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800435c:	2b02      	cmp	r3, #2
 800435e:	d103      	bne.n	8004368 <flag_process+0x184>
		EVENT_Set_flag(FLAG_CHAN_10_ON);
 8004360:	2018      	movs	r0, #24
 8004362:	f7fe fd37 	bl	8002dd4 <EVENT_Set_flag>
	else
		EVENT_Clean_flag(FLAG_CHAN_10_ON);



}
 8004366:	e002      	b.n	800436e <flag_process+0x18a>
		EVENT_Clean_flag(FLAG_CHAN_10_ON);
 8004368:	2018      	movs	r0, #24
 800436a:	f7fe fd4b 	bl	8002e04 <EVENT_Clean_flag>
}
 800436e:	bf00      	nop
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2000202c 	.word	0x2000202c

08004378 <CONTROLLER_Update_Channels_Array>:

bool_e CONTROLLER_Update_Channels_Array(void){
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
	//Utilisation de l'ibus atm
	return IBUS_Channel_Update();
 800437c:	f00a ff24 	bl	800f1c8 <IBUS_Channel_Update>
 8004380:	4603      	mov	r3, r0
}
 8004382:	4618      	mov	r0, r3
 8004384:	bd80      	pop	{r7, pc}

08004386 <CONTROLLER_Rx_Data_Rdy>:

void CONTROLLER_Rx_Data_Rdy(void){
 8004386:	b580      	push	{r7, lr}
 8004388:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_IBUS_DATA_RDY);
 800438a:	200c      	movs	r0, #12
 800438c:	f7fe fd22 	bl	8002dd4 <EVENT_Set_flag>
}
 8004390:	bf00      	nop
 8004392:	bd80      	pop	{r7, pc}

08004394 <REGULATION_ORIENTATION_Init>:

float pid_angle_settings_roll[PID_NB_SETTINGS] = {6.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};
float pid_angle_settings_pitch[PID_NB_SETTINGS] = {7.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};


void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
	orientation = orientation_ ;
 80043a0:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <REGULATION_ORIENTATION_Init+0x8c>)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_ ;
 80043a6:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <REGULATION_ORIENTATION_Init+0x90>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6013      	str	r3, [r2, #0]
	regu_orientation->mode = REGULATION_ORIENTATION_MODE_OFF ;
 80043ac:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <REGULATION_ORIENTATION_Init+0x90>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2200      	movs	r2, #0
 80043b2:	711a      	strb	r2, [r3, #4]
	regu_orientation->outputs = output ;
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <REGULATION_ORIENTATION_Init+0x90>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8


	//Init PIDs angular speed
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], pid_velocity_settings_roll, FILTER_SECOND_ORDER, filter_pid_velocity_roll_pitch);
 80043be:	4b19      	ldr	r3, [pc, #100]	; (8004424 <REGULATION_ORIENTATION_Init+0x90>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <REGULATION_ORIENTATION_Init+0x94>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	4918      	ldr	r1, [pc, #96]	; (800442c <REGULATION_ORIENTATION_Init+0x98>)
 80043cc:	f00b f9be 	bl	800f74c <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], pid_velocity_settings_pitch, FILTER_SECOND_ORDER, filter_pid_velocity_roll_pitch);
 80043d0:	4b14      	ldr	r3, [pc, #80]	; (8004424 <REGULATION_ORIENTATION_Init+0x90>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f103 0008 	add.w	r0, r3, #8
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <REGULATION_ORIENTATION_Init+0x94>)
 80043da:	2201      	movs	r2, #1
 80043dc:	4914      	ldr	r1, [pc, #80]	; (8004430 <REGULATION_ORIENTATION_Init+0x9c>)
 80043de:	f00b f9b5 	bl	800f74c <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], pid_velocity_settings_yaw, FILTER_FIRST_ORDER, filter_pid_velocity_yaw);
 80043e2:	4b10      	ldr	r3, [pc, #64]	; (8004424 <REGULATION_ORIENTATION_Init+0x90>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <REGULATION_ORIENTATION_Init+0xa0>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	4912      	ldr	r1, [pc, #72]	; (8004438 <REGULATION_ORIENTATION_Init+0xa4>)
 80043f0:	f00b f9ac 	bl	800f74c <PID_init>


	//Init PIDs angular position
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], pid_angle_settings_roll, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <REGULATION_ORIENTATION_Init+0x90>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f503 709c 	add.w	r0, r3, #312	; 0x138
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <REGULATION_ORIENTATION_Init+0xa8>)
 80043fe:	2200      	movs	r2, #0
 8004400:	490f      	ldr	r1, [pc, #60]	; (8004440 <REGULATION_ORIENTATION_Init+0xac>)
 8004402:	f00b f9a3 	bl	800f74c <PID_init>
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], pid_angle_settings_pitch, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 8004406:	4b07      	ldr	r3, [pc, #28]	; (8004424 <REGULATION_ORIENTATION_Init+0x90>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <REGULATION_ORIENTATION_Init+0xa8>)
 8004410:	2200      	movs	r2, #0
 8004412:	490c      	ldr	r1, [pc, #48]	; (8004444 <REGULATION_ORIENTATION_Init+0xb0>)
 8004414:	f00b f99a 	bl	800f74c <PID_init>


}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20002034 	.word	0x20002034
 8004424:	20002030 	.word	0x20002030
 8004428:	200019c4 	.word	0x200019c4
 800442c:	200019dc 	.word	0x200019dc
 8004430:	200019f0 	.word	0x200019f0
 8004434:	200019d0 	.word	0x200019d0
 8004438:	20001a04 	.word	0x20001a04
 800443c:	20001a18 	.word	0x20001a18
 8004440:	20001a24 	.word	0x20001a24
 8004444:	20001a38 	.word	0x20001a38

08004448 <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_orientation_mode_e regu_mode){
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	71fb      	strb	r3, [r7, #7]
	regu_orientation->mode = regu_mode;
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <REGULATION_ORIENTATION_Set_Regulation_Mode+0x20>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	79fa      	ldrb	r2, [r7, #7]
 8004458:	711a      	strb	r2, [r3, #4]
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20002030 	.word	0x20002030

0800446c <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0

	switch(regu_orientation->mode){
 8004470:	4b90      	ldr	r3, [pc, #576]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	791b      	ldrb	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d019      	beq.n	80044ae <REGULATION_ORIENTATION_Process+0x42>
 800447a:	2b02      	cmp	r3, #2
 800447c:	d07c      	beq.n	8004578 <REGULATION_ORIENTATION_Process+0x10c>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d000      	beq.n	8004484 <REGULATION_ORIENTATION_Process+0x18>
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
			break;
	}

}
 8004482:	e114      	b.n	80046ae <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = 0;
 8004484:	4b8b      	ldr	r3, [pc, #556]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800448c:	2200      	movs	r2, #0
 800448e:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = 0;
 8004490:	4b88      	ldr	r3, [pc, #544]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004498:	3302      	adds	r3, #2
 800449a:	2200      	movs	r2, #0
 800449c:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = 0;
 800449e:	4b85      	ldr	r3, [pc, #532]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80044a6:	3304      	adds	r3, #4
 80044a8:	2200      	movs	r2, #0
 80044aa:	801a      	strh	r2, [r3, #0]
			break;
 80044ac:	e0ff      	b.n	80046ae <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 80044ae:	4b81      	ldr	r3, [pc, #516]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80044b6:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80044be:	4b7e      	ldr	r3, [pc, #504]	; (80046b8 <REGULATION_ORIENTATION_Process+0x24c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	3304      	adds	r3, #4
 80044c6:	ed93 7a00 	vldr	s14, [r3]
 80044ca:	eef0 0a47 	vmov.f32	s1, s14
 80044ce:	eeb0 0a67 	vmov.f32	s0, s15
 80044d2:	4610      	mov	r0, r2
 80044d4:	f00b f89e 	bl	800f614 <PID_compute>
 80044d8:	eef0 7a40 	vmov.f32	s15, s0
 80044dc:	4b75      	ldr	r3, [pc, #468]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80044e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044e8:	ee17 2a90 	vmov	r2, s15
 80044ec:	b212      	sxth	r2, r2
 80044ee:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 80044f0:	4b70      	ldr	r3, [pc, #448]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f103 0208 	add.w	r2, r3, #8
 80044f8:	4b6e      	ldr	r3, [pc, #440]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8004500:	4b6d      	ldr	r3, [pc, #436]	; (80046b8 <REGULATION_ORIENTATION_Process+0x24c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	ed93 7a00 	vldr	s14, [r3]
 800450a:	eef0 0a47 	vmov.f32	s1, s14
 800450e:	eeb0 0a67 	vmov.f32	s0, s15
 8004512:	4610      	mov	r0, r2
 8004514:	f00b f87e 	bl	800f614 <PID_compute>
 8004518:	eef0 7a40 	vmov.f32	s15, s0
 800451c:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004524:	3302      	adds	r3, #2
 8004526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800452a:	ee17 2a90 	vmov	r2, s15
 800452e:	b212      	sxth	r2, r2
 8004530:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 8004532:	4b60      	ldr	r3, [pc, #384]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800453a:	4b5e      	ldr	r3, [pc, #376]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8004542:	4b5d      	ldr	r3, [pc, #372]	; (80046b8 <REGULATION_ORIENTATION_Process+0x24c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	3308      	adds	r3, #8
 800454a:	ed93 7a00 	vldr	s14, [r3]
 800454e:	eef0 0a47 	vmov.f32	s1, s14
 8004552:	eeb0 0a67 	vmov.f32	s0, s15
 8004556:	4610      	mov	r0, r2
 8004558:	f00b f85c 	bl	800f614 <PID_compute>
 800455c:	eef0 7a40 	vmov.f32	s15, s0
 8004560:	4b54      	ldr	r3, [pc, #336]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004568:	3304      	adds	r3, #4
 800456a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800456e:	ee17 2a90 	vmov	r2, s15
 8004572:	b212      	sxth	r2, r2
 8004574:	801a      	strh	r2, [r3, #0]
			break;
 8004576:	e09a      	b.n	80046ae <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->consigne_angular_speed[ORIENTATION_ROLL] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], regu_orientation->consigne_angular_pos[ORIENTATION_ROLL], orientation->angular_position[ORIENTATION_ROLL]);
 8004578:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8004580:	4b4c      	ldr	r3, [pc, #304]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8004588:	4b4b      	ldr	r3, [pc, #300]	; (80046b8 <REGULATION_ORIENTATION_Process+0x24c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004590:	eef0 0a47 	vmov.f32	s1, s14
 8004594:	eeb0 0a67 	vmov.f32	s0, s15
 8004598:	4610      	mov	r0, r2
 800459a:	f00b f83b 	bl	800f614 <PID_compute>
 800459e:	eef0 7a40 	vmov.f32	s15, s0
 80045a2:	4b44      	ldr	r3, [pc, #272]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	eef1 7a67 	vneg.f32	s15, s15
 80045aa:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0
			regu_orientation->consigne_angular_speed[ORIENTATION_PITCH] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], regu_orientation->consigne_angular_pos[ORIENTATION_PITCH], orientation->angular_position[ORIENTATION_PITCH]);
 80045ae:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80045b6:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80045be:	4b3e      	ldr	r3, [pc, #248]	; (80046b8 <REGULATION_ORIENTATION_Process+0x24c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	ed93 7a00 	vldr	s14, [r3]
 80045c6:	eef0 0a47 	vmov.f32	s1, s14
 80045ca:	eeb0 0a67 	vmov.f32	s0, s15
 80045ce:	4610      	mov	r0, r2
 80045d0:	f00b f820 	bl	800f614 <PID_compute>
 80045d4:	eef0 7a40 	vmov.f32	s15, s0
 80045d8:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	eef1 7a67 	vneg.f32	s15, s15
 80045e0:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 80045e4:	4b33      	ldr	r3, [pc, #204]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80045ec:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80045f4:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <REGULATION_ORIENTATION_Process+0x24c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	3304      	adds	r3, #4
 80045fc:	ed93 7a00 	vldr	s14, [r3]
 8004600:	eef0 0a47 	vmov.f32	s1, s14
 8004604:	eeb0 0a67 	vmov.f32	s0, s15
 8004608:	4610      	mov	r0, r2
 800460a:	f00b f803 	bl	800f614 <PID_compute>
 800460e:	eef0 7a40 	vmov.f32	s15, s0
 8004612:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800461a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800461e:	ee17 2a90 	vmov	r2, s15
 8004622:	b212      	sxth	r2, r2
 8004624:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 8004626:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f103 0208 	add.w	r2, r3, #8
 800462e:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8004636:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <REGULATION_ORIENTATION_Process+0x24c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	ed93 7a00 	vldr	s14, [r3]
 8004640:	eef0 0a47 	vmov.f32	s1, s14
 8004644:	eeb0 0a67 	vmov.f32	s0, s15
 8004648:	4610      	mov	r0, r2
 800464a:	f00a ffe3 	bl	800f614 <PID_compute>
 800464e:	eef0 7a40 	vmov.f32	s15, s0
 8004652:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800465a:	3302      	adds	r3, #2
 800465c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004660:	ee17 2a90 	vmov	r2, s15
 8004664:	b212      	sxth	r2, r2
 8004666:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <REGULATION_ORIENTATION_Process+0x24c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	3308      	adds	r3, #8
 8004680:	ed93 7a00 	vldr	s14, [r3]
 8004684:	eef0 0a47 	vmov.f32	s1, s14
 8004688:	eeb0 0a67 	vmov.f32	s0, s15
 800468c:	4610      	mov	r0, r2
 800468e:	f00a ffc1 	bl	800f614 <PID_compute>
 8004692:	eef0 7a40 	vmov.f32	s15, s0
 8004696:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <REGULATION_ORIENTATION_Process+0x248>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800469e:	3304      	adds	r3, #4
 80046a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046a4:	ee17 2a90 	vmov	r2, s15
 80046a8:	b212      	sxth	r2, r2
 80046aa:	801a      	strh	r2, [r3, #0]
			break;
 80046ac:	bf00      	nop
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20002030 	.word	0x20002030
 80046b8:	20002034 	.word	0x20002034

080046bc <REGULATION_POSITION_Init>:





void REGULATION_POSITION_Init(regu_position_t * regu_position_, regu_orientation_t * regu_orientation_, int16_t * outputs){
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
	regu_position = regu_position_;
 80046c8:	4a09      	ldr	r2, [pc, #36]	; (80046f0 <REGULATION_POSITION_Init+0x34>)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_;
 80046ce:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <REGULATION_POSITION_Init+0x38>)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6013      	str	r3, [r2, #0]
	regu_position->mode = REGULATION_POSITION_MODE_OFF ;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <REGULATION_POSITION_Init+0x34>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	721a      	strb	r2, [r3, #8]
	regu_position->outputs = outputs ;
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <REGULATION_POSITION_Init+0x34>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	605a      	str	r2, [r3, #4]


}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	20002038 	.word	0x20002038
 80046f4:	2000203c 	.word	0x2000203c

080046f8 <REGULATION_POSITION_Set_Regulation_Mode>:

void REGULATION_POSITION_Set_Regulation_Mode(regu_position_mode_e regu_mode){
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
	regu_position->mode = regu_mode ;
 8004702:	4b05      	ldr	r3, [pc, #20]	; (8004718 <REGULATION_POSITION_Set_Regulation_Mode+0x20>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	79fa      	ldrb	r2, [r7, #7]
 8004708:	721a      	strb	r2, [r3, #8]
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20002038 	.word	0x20002038

0800471c <REGULATION_POSITION_Process>:

void REGULATION_POSITION_Process(void){
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
	switch(regu_position->mode){
 8004720:	4b0e      	ldr	r3, [pc, #56]	; (800475c <REGULATION_POSITION_Process+0x40>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	7a1b      	ldrb	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <REGULATION_POSITION_Process+0x14>
 800472a:	2b01      	cmp	r3, #1
 800472c:	d007      	beq.n	800473e <REGULATION_POSITION_Process+0x22>
			break;
		case REGULATION_POSITION_MODE_ON:
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
			break;
	}
}
 800472e:	e010      	b.n	8004752 <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = 0;
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <REGULATION_POSITION_Process+0x40>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	3306      	adds	r3, #6
 8004738:	2200      	movs	r2, #0
 800473a:	801a      	strh	r2, [r3, #0]
			break;
 800473c:	e009      	b.n	8004752 <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <REGULATION_POSITION_Process+0x40>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <REGULATION_POSITION_Process+0x40>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	3306      	adds	r3, #6
 800474a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800474e:	801a      	strh	r2, [r3, #0]
			break;
 8004750:	bf00      	nop
}
 8004752:	bf00      	nop
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	20002038 	.word	0x20002038

08004760 <ACC_init>:
static void acc_data_callback(void);

float filter_config [3] = {0.1f, 0.9f, 0};


void ACC_init(acc_t * acc, mpu_t * mpu){
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]

	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_FIRST_ORDER);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3314      	adds	r3, #20
 800476e:	2200      	movs	r2, #0
 8004770:	491a      	ldr	r1, [pc, #104]	; (80047dc <ACC_init+0x7c>)
 8004772:	4618      	mov	r0, r3
 8004774:	f00a fc26 	bl	800efc4 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_FIRST_ORDER);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3330      	adds	r3, #48	; 0x30
 800477c:	2200      	movs	r2, #0
 800477e:	4917      	ldr	r1, [pc, #92]	; (80047dc <ACC_init+0x7c>)
 8004780:	4618      	mov	r0, r3
 8004782:	f00a fc1f 	bl	800efc4 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_FIRST_ORDER);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	334c      	adds	r3, #76	; 0x4c
 800478a:	2200      	movs	r2, #0
 800478c:	4913      	ldr	r1, [pc, #76]	; (80047dc <ACC_init+0x7c>)
 800478e:	4618      	mov	r0, r3
 8004790:	f00a fc18 	bl	800efc4 <FILTER_init>


	acc->mpu = mpu ;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	601a      	str	r2, [r3, #0]
	acc->raw = acc->mpu->acc ;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	605a      	str	r2, [r3, #4]

	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a0d      	ldr	r2, [pc, #52]	; (80047e0 <ACC_init+0x80>)
 80047ac:	2101      	movs	r1, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fd2a 	bl	8005208 <MPU_init_acc>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d008      	beq.n	80047cc <ACC_init+0x6c>
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d008      	beq.n	80047d0 <ACC_init+0x70>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d000      	beq.n	80047c4 <ACC_init+0x64>
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}

}
 80047c2:	e006      	b.n	80047d2 <ACC_init+0x72>
			EVENT_Set_flag(FLAG_ACC_OK);
 80047c4:	2004      	movs	r0, #4
 80047c6:	f7fe fb05 	bl	8002dd4 <EVENT_Set_flag>
			break;
 80047ca:	e002      	b.n	80047d2 <ACC_init+0x72>
			break;
 80047cc:	bf00      	nop
 80047ce:	e000      	b.n	80047d2 <ACC_init+0x72>
			break;
 80047d0:	bf00      	nop
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20001a4c 	.word	0x20001a4c
 80047e0:	080048a1 	.word	0x080048a1

080047e4 <ACC_update>:

void ACC_update(acc_t * acc){
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	switch(MPU_update_acc(acc->mpu)){
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fdb7 	bl	8005364 <MPU_update_acc>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d00c      	beq.n	8004816 <ACC_update+0x32>
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d006      	beq.n	800480e <ACC_update+0x2a>
 8004800:	2b00      	cmp	r3, #0
 8004802:	d000      	beq.n	8004806 <ACC_update+0x22>
			EVENT_Clean_flag(FLAG_ACC_OK);
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8004804:	e008      	b.n	8004818 <ACC_update+0x34>
			EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8004806:	2006      	movs	r0, #6
 8004808:	f7fe fae4 	bl	8002dd4 <EVENT_Set_flag>
			break;
 800480c:	e004      	b.n	8004818 <ACC_update+0x34>
			EVENT_Clean_flag(FLAG_ACC_OK);
 800480e:	2004      	movs	r0, #4
 8004810:	f7fe faf8 	bl	8002e04 <EVENT_Clean_flag>
			break;
 8004814:	e000      	b.n	8004818 <ACC_update+0x34>
			break;
 8004816:	bf00      	nop
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <ACC_process_lpf>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void ACC_process_lpf(acc_t * acc){
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f103 0214 	add.w	r2, r3, #20
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	eeb0 0a67 	vmov.f32	s0, s15
 800483a:	4610      	mov	r0, r2
 800483c:	f00a fbe5 	bl	800f00a <FILTER_process>
 8004840:	eef0 7a40 	vmov.f32	s15, s0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	3304      	adds	r3, #4
 8004856:	edd3 7a00 	vldr	s15, [r3]
 800485a:	eeb0 0a67 	vmov.f32	s0, s15
 800485e:	4610      	mov	r0, r2
 8004860:	f00a fbd3 	bl	800f00a <FILTER_process>
 8004864:	eef0 7a40 	vmov.f32	s15, s0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	edc3 7a03 	vstr	s15, [r3, #12]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	3308      	adds	r3, #8
 800487a:	edd3 7a00 	vldr	s15, [r3]
 800487e:	eeb0 0a67 	vmov.f32	s0, s15
 8004882:	4610      	mov	r0, r2
 8004884:	f00a fbc1 	bl	800f00a <FILTER_process>
 8004888:	eef0 7a40 	vmov.f32	s15, s0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	edc3 7a04 	vstr	s15, [r3, #16]
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 8004892:	2007      	movs	r0, #7
 8004894:	f7fe fa9e 	bl	8002dd4 <EVENT_Set_flag>
}
 8004898:	bf00      	nop
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <acc_data_callback>:

static void acc_data_callback(void){
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 80048a4:	2006      	movs	r0, #6
 80048a6:	f7fe fa95 	bl	8002dd4 <EVENT_Set_flag>
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}

080048ae <ms5611_raw_temp_rdy>:


static void ms5611_raw_temp_rdy();
static void ms5611_raw_pressure_rdy();

static void ms5611_raw_temp_rdy(){
 80048ae:	b580      	push	{r7, lr}
 80048b0:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_BARO_TEMP_RAW_RDY);
 80048b2:	2009      	movs	r0, #9
 80048b4:	f7fe fa8e 	bl	8002dd4 <EVENT_Set_flag>
}
 80048b8:	bf00      	nop
 80048ba:	bd80      	pop	{r7, pc}

080048bc <ms5611_raw_pressure_rdy>:
static void ms5611_raw_pressure_rdy(){
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_BARO_PRESSURE_RAW_RDY);
 80048c0:	200a      	movs	r0, #10
 80048c2:	f7fe fa87 	bl	8002dd4 <EVENT_Set_flag>
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <BARO_init>:

void BARO_init(baro_t * baro, ms5611_t * ms5611, I2C_HandleTypeDef * hi2c){
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
	baro->ms5611 = ms5611 ;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	601a      	str	r2, [r3, #0]

	switch(MS5611_init(baro->ms5611, hi2c, ms5611_raw_temp_rdy, ms5611_raw_pressure_rdy))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <BARO_init+0x48>)
 80048e4:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <BARO_init+0x4c>)
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	f000 fe1e 	bl	8005528 <MS5611_init>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d008      	beq.n	8004904 <BARO_init+0x38>
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d008      	beq.n	8004908 <BARO_init+0x3c>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d000      	beq.n	80048fc <BARO_init+0x30>
		case SENSOR_REQUEST_FAIL :
			break;
		case SENSOR_REQUEST_BUSY :
			break;
	}
}
 80048fa:	e006      	b.n	800490a <BARO_init+0x3e>
			EVENT_Set_flag(FLAG_BARO_OK);
 80048fc:	2008      	movs	r0, #8
 80048fe:	f7fe fa69 	bl	8002dd4 <EVENT_Set_flag>
			break;
 8004902:	e002      	b.n	800490a <BARO_init+0x3e>
			break;
 8004904:	bf00      	nop
 8004906:	e000      	b.n	800490a <BARO_init+0x3e>
			break;
 8004908:	bf00      	nop
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	080048bd 	.word	0x080048bd
 8004918:	080048af 	.word	0x080048af

0800491c <BARO_Main>:

uint32_t BARO_Main(baro_t * baro){
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	uint32_t to_return = 9600 ;
 8004924:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004928:	60fb      	str	r3, [r7, #12]
	switch(baro->state){
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	791b      	ldrb	r3, [r3, #4]
 800492e:	2b04      	cmp	r3, #4
 8004930:	d83a      	bhi.n	80049a8 <BARO_Main+0x8c>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <BARO_Main+0x1c>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	0800494d 	.word	0x0800494d
 800493c:	08004955 	.word	0x08004955
 8004940:	08004967 	.word	0x08004967
 8004944:	0800497f 	.word	0x0800497f
 8004948:	08004991 	.word	0x08004991
		case BARO_STATE_IDDLE:
			baro->state = BARO_STATE_ASK_TEMP ;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	711a      	strb	r2, [r3, #4]
			break;
 8004952:	e029      	b.n	80049a8 <BARO_Main+0x8c>
		case BARO_STATE_ASK_TEMP :
			MS5611_request_temp(baro->ms5611);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fe51 	bl	8005600 <MS5611_request_temp>
			baro->state = BARO_STATE_READ_TEMP ;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	711a      	strb	r2, [r3, #4]
			break;
 8004964:	e020      	b.n	80049a8 <BARO_Main+0x8c>
		case BARO_STATE_READ_TEMP :
			MS5611_read_temp(baro->ms5611);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fea0 	bl	80056b0 <MS5611_read_temp>
			baro->state = BARO_STATE_ASK_PRESSURE ;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2203      	movs	r2, #3
 8004974:	711a      	strb	r2, [r3, #4]
			to_return = 400 ;
 8004976:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800497a:	60fb      	str	r3, [r7, #12]
			break;
 800497c:	e014      	b.n	80049a8 <BARO_Main+0x8c>
		case BARO_STATE_ASK_PRESSURE :
			MS5611_request_pressure(baro->ms5611);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fe68 	bl	8005658 <MS5611_request_pressure>
			baro->state = BARO_STATE_READ_PRESSURE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2204      	movs	r2, #4
 800498c:	711a      	strb	r2, [r3, #4]
			break;
 800498e:	e00b      	b.n	80049a8 <BARO_Main+0x8c>
		case BARO_STATE_READ_PRESSURE :
			MS5611_read_pressure(baro->ms5611);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 febc 	bl	8005712 <MS5611_read_pressure>
			baro->state = BARO_STATE_ASK_TEMP ;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	711a      	strb	r2, [r3, #4]
			to_return = 400 ;
 80049a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80049a4:	60fb      	str	r3, [r7, #12]
			break;
 80049a6:	bf00      	nop
	}
	return to_return ;
 80049a8:	68fb      	ldr	r3, [r7, #12]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop

080049b4 <BARO_compute_temp>:

void BARO_compute_temp(baro_t * baro){
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	MS5611_calculate_temperature(baro->ms5611);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fed3 	bl	800576c <MS5611_calculate_temperature>

}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <BARO_compute_pressure>:
void BARO_compute_pressure(baro_t * baro){
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
	MS5611_calculate_pressure(baro->ms5611);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 ff06 	bl	80057ec <MS5611_calculate_pressure>
}
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <BARO_compute_altitude>:
void BARO_compute_altitude(baro_t * baro){
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
	MS5611_calculate_altitude(baro->ms5611);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 ff97 	bl	8005928 <MS5611_calculate_altitude>
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <BATTERIE_Init>:


#include "batterie.h"


void BATTERIE_Init(batterie_t * batterie, ADC_HandleTypeDef * hadc){
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
	batterie->hadc = hadc ;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(hadc, batterie->reading, 16);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3304      	adds	r3, #4
 8004a16:	2210      	movs	r2, #16
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6838      	ldr	r0, [r7, #0]
 8004a1c:	f002 fe3e 	bl	800769c <HAL_ADC_Start_DMA>
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <GYRO_init>:

//float filter[3] = {0.01234567901f, 1.777777778f, -0.7901234568f};
float filter[3] = {0.04f, 1.6f, -0.64f};
static void gyro_data_callback(void);

void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]

	//Filters init
	FILTER_init(&gyro->filters[GYRO_AXE_X], filter, FILTER_SECOND_ORDER);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3320      	adds	r3, #32
 8004a36:	2201      	movs	r2, #1
 8004a38:	491d      	ldr	r1, [pc, #116]	; (8004ab0 <GYRO_init+0x88>)
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f00a fac2 	bl	800efc4 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Y], filter, FILTER_SECOND_ORDER);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	333c      	adds	r3, #60	; 0x3c
 8004a44:	2201      	movs	r2, #1
 8004a46:	491a      	ldr	r1, [pc, #104]	; (8004ab0 <GYRO_init+0x88>)
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f00a fabb 	bl	800efc4 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Z], filter, FILTER_SECOND_ORDER);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3358      	adds	r3, #88	; 0x58
 8004a52:	2201      	movs	r2, #1
 8004a54:	4916      	ldr	r1, [pc, #88]	; (8004ab0 <GYRO_init+0x88>)
 8004a56:	4618      	mov	r0, r3
 8004a58:	f00a fab4 	bl	800efc4 <FILTER_init>

	gyro->mpu = mpu ;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	601a      	str	r2, [r3, #0]
	gyro->raw = gyro->mpu->gyro ;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	605a      	str	r2, [r3, #4]

	gyro->offsets[GYRO_AXE_Y] = - 0.7f ;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a10      	ldr	r2, [pc, #64]	; (8004ab4 <GYRO_init+0x8c>)
 8004a72:	619a      	str	r2, [r3, #24]
	gyro->offsets[GYRO_AXE_X] = - 5.5f ;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <GYRO_init+0x90>)
 8004a78:	615a      	str	r2, [r3, #20]

	//Raise the flag "ok" if the gyro get succesfully initiated
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a0f      	ldr	r2, [pc, #60]	; (8004abc <GYRO_init+0x94>)
 8004a80:	2103      	movs	r1, #3
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fb08 	bl	8005098 <MPU_init_gyro>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d008      	beq.n	8004aa0 <GYRO_init+0x78>
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d008      	beq.n	8004aa4 <GYRO_init+0x7c>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d000      	beq.n	8004a98 <GYRO_init+0x70>
		case SENSOR_REQUEST_FAIL:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8004a96:	e006      	b.n	8004aa6 <GYRO_init+0x7e>
			EVENT_Set_flag(FLAG_GYRO_OK);
 8004a98:	2000      	movs	r0, #0
 8004a9a:	f7fe f99b 	bl	8002dd4 <EVENT_Set_flag>
			break;
 8004a9e:	e002      	b.n	8004aa6 <GYRO_init+0x7e>
			break;
 8004aa0:	bf00      	nop
 8004aa2:	e000      	b.n	8004aa6 <GYRO_init+0x7e>
			break;
 8004aa4:	bf00      	nop
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20001a58 	.word	0x20001a58
 8004ab4:	bf333333 	.word	0xbf333333
 8004ab8:	c0b00000 	.word	0xc0b00000
 8004abc:	08004ceb 	.word	0x08004ceb

08004ac0 <GYRO_calibrate>:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
bool_e GYRO_calibrate(gyro_t * gyro, uint16_t iteration){
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]
	static uint16_t compteur = 0;

	static float sum[3] = {0};

	if(!compteur){
 8004acc:	4b41      	ldr	r3, [pc, #260]	; (8004bd4 <GYRO_calibrate+0x114>)
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <GYRO_calibrate+0x2c>
		sum[0] = 0 ;
 8004ad4:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
		sum[1] = 0 ;
 8004adc:	4b3e      	ldr	r3, [pc, #248]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	605a      	str	r2, [r3, #4]
		sum[2] = 0 ;
 8004ae4:	4b3c      	ldr	r3, [pc, #240]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	609a      	str	r2, [r3, #8]
	}

	sum[0] += gyro->raw[0] + gyro->offsets[0];
 8004aec:	4b3a      	ldr	r3, [pc, #232]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004aee:	ed93 7a00 	vldr	s14, [r3]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	edd3 6a00 	vldr	s13, [r3]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b08:	4b33      	ldr	r3, [pc, #204]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004b0a:	edc3 7a00 	vstr	s15, [r3]
	sum[1] += gyro->raw[1] + gyro->offsets[1];
 8004b0e:	4b32      	ldr	r3, [pc, #200]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004b10:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	edd3 6a00 	vldr	s13, [r3]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b2c:	4b2a      	ldr	r3, [pc, #168]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004b2e:	edc3 7a01 	vstr	s15, [r3, #4]
	sum[2] += gyro->raw[2] + gyro->offsets[2];
 8004b32:	4b29      	ldr	r3, [pc, #164]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004b34:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	edd3 6a00 	vldr	s13, [r3]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	edd3 7a07 	vldr	s15, [r3, #28]
 8004b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b50:	4b21      	ldr	r3, [pc, #132]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004b52:	edc3 7a02 	vstr	s15, [r3, #8]

	compteur ++;
 8004b56:	4b1f      	ldr	r3, [pc, #124]	; (8004bd4 <GYRO_calibrate+0x114>)
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <GYRO_calibrate+0x114>)
 8004b60:	801a      	strh	r2, [r3, #0]

	if(compteur == iteration){
 8004b62:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <GYRO_calibrate+0x114>)
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	887a      	ldrh	r2, [r7, #2]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d12b      	bne.n	8004bc4 <GYRO_calibrate+0x104>
		gyro->offsets[0] = sum[0] / (float)iteration;
 8004b6c:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004b6e:	edd3 6a00 	vldr	s13, [r3]
 8004b72:	887b      	ldrh	r3, [r7, #2]
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	edc3 7a05 	vstr	s15, [r3, #20]
		gyro->offsets[1] = sum[1] / (float)iteration;
 8004b86:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004b88:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b8c:	887b      	ldrh	r3, [r7, #2]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	edc3 7a06 	vstr	s15, [r3, #24]
		gyro->offsets[2] = sum[2] / (float)iteration;
 8004ba0:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <GYRO_calibrate+0x118>)
 8004ba2:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	ee07 3a90 	vmov	s15, r3
 8004bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	edc3 7a07 	vstr	s15, [r3, #28]
		compteur = 0;
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <GYRO_calibrate+0x114>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	801a      	strh	r2, [r3, #0]
		return TRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <GYRO_calibrate+0x106>
	}

	return FALSE;
 8004bc4:	2300      	movs	r3, #0

}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20002040 	.word	0x20002040
 8004bd8:	20002044 	.word	0x20002044

08004bdc <GYRO_ACC_update_dma>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void GYRO_ACC_update_dma(gyro_t * gyro){
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	switch(MPU_update_all_dma(gyro->mpu)){
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fbfa 	bl	80053e2 <MPU_update_all_dma>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d00a      	beq.n	8004c0a <GYRO_ACC_update_dma+0x2e>
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d001      	beq.n	8004bfc <GYRO_ACC_update_dma+0x20>
 8004bf8:	2b00      	cmp	r3, #0
		case SENSOR_REQUEST_OK:
			break;
 8004bfa:	e007      	b.n	8004c0c <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_FAIL:
			EVENT_Clean_flag(FLAG_GYRO_OK);
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f7fe f901 	bl	8002e04 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8004c02:	2004      	movs	r0, #4
 8004c04:	f7fe f8fe 	bl	8002e04 <EVENT_Clean_flag>
			break;
 8004c08:	e000      	b.n	8004c0c <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_BUSY:
			break;
 8004c0a:	bf00      	nop
	}
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <GYRO_process_lpf>:

void GYRO_process_lpf(gyro_t * gyro){
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	//Offset correction first
	gyro->raw[GYRO_AXE_X] -= gyro->offsets[GYRO_AXE_X];
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	ed93 7a00 	vldr	s14, [r3]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	edd3 7a05 	vldr	s15, [r3, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c32:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[GYRO_AXE_Y] -= gyro->offsets[GYRO_AXE_Y];
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	ed93 7a00 	vldr	s14, [r3]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c50:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[GYRO_AXE_Z] -= gyro->offsets[GYRO_AXE_Z];
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	3308      	adds	r3, #8
 8004c5a:	ed93 7a00 	vldr	s14, [r3]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	edd3 7a07 	vldr	s15, [r3, #28]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	3308      	adds	r3, #8
 8004c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c6e:	edc3 7a00 	vstr	s15, [r3]
	//Then the actual low pass filter
	gyro->filtered[GYRO_AXE_X] =  FILTER_process(&gyro->filters[GYRO_AXE_X], gyro->raw[GYRO_AXE_X]);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f103 0220 	add.w	r2, r3, #32
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	edd3 7a00 	vldr	s15, [r3]
 8004c80:	eeb0 0a67 	vmov.f32	s0, s15
 8004c84:	4610      	mov	r0, r2
 8004c86:	f00a f9c0 	bl	800f00a <FILTER_process>
 8004c8a:	eef0 7a40 	vmov.f32	s15, s0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[GYRO_AXE_Y] =  FILTER_process(&gyro->filters[GYRO_AXE_Y], gyro->raw[GYRO_AXE_Y]);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	edd3 7a00 	vldr	s15, [r3]
 8004ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f00a f9ae 	bl	800f00a <FILTER_process>
 8004cae:	eef0 7a40 	vmov.f32	s15, s0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro->filtered[GYRO_AXE_Z] =  FILTER_process(&gyro->filters[GYRO_AXE_Z], gyro->raw[GYRO_AXE_Z]);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	edd3 7a00 	vldr	s15, [r3]
 8004cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f00a f99c 	bl	800f00a <FILTER_process>
 8004cd2:	eef0 7a40 	vmov.f32	s15, s0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	edc3 7a04 	vstr	s15, [r3, #16]
	//We warn the system that we ve got new data ready to be used :)
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 8004cdc:	2003      	movs	r0, #3
 8004cde:	f7fe f879 	bl	8002dd4 <EVENT_Set_flag>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <gyro_data_callback>:

static void gyro_data_callback(void){
 8004cea:	b580      	push	{r7, lr}
 8004cec:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 8004cee:	2002      	movs	r0, #2
 8004cf0:	f7fe f870 	bl	8002dd4 <EVENT_Set_flag>
}
 8004cf4:	bf00      	nop
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <convert_gyro>:

static void MPU_spi_slow(mpu_t * mpu);
static void MPU_spi_fast(mpu_t * mpu);

//Private functions def
static void convert_gyro(mpu_t * mpu){
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	3301      	adds	r3, #1
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	b21a      	sxth	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b21b      	sxth	r3, r3
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b21a      	sxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	3303      	adds	r3, #3
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	b21a      	sxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	3302      	adds	r3, #2
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	b21b      	sxth	r3, r3
 8004d32:	4313      	orrs	r3, r2
 8004d34:	b21a      	sxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	3305      	adds	r3, #5
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	b21a      	sxth	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	b21b      	sxth	r3, r3
 8004d50:	4313      	orrs	r3, r2
 8004d52:	b21a      	sxth	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	851a      	strh	r2, [r3, #40]	; 0x28

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <convert_acc>:
static void convert_acc(mpu_t * mpu){
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	3301      	adds	r3, #1
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	b21a      	sxth	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	b21b      	sxth	r3, r3
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	b21a      	sxth	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	3303      	adds	r3, #3
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	b21a      	sxth	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	3302      	adds	r3, #2
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	b21a      	sxth	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	3305      	adds	r3, #5
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	b21a      	sxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e14:	3304      	adds	r3, #4
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	b21b      	sxth	r3, r3
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	b21a      	sxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <MPU_cs_lock>:

static void MPU_cs_lock(mpu_t * mpu){
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6898      	ldr	r0, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	899b      	ldrh	r3, [r3, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f003 fe03 	bl	8008aa8 <HAL_GPIO_WritePin>
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <MPU_cs_unlock>:
static void MPU_cs_unlock(mpu_t * mpu){
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6898      	ldr	r0, [r3, #8]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	899b      	ldrh	r3, [r3, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	f003 fdf3 	bl	8008aa8 <HAL_GPIO_WritePin>
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <MPU_spi_slow>:

static void MPU_spi_slow(mpu_t * mpu){
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_SLOW;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 64 ;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2240      	movs	r2, #64	; 0x40
 8004ee0:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f007 f98a 	bl	800c200 <HAL_SPI_Init>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 8004ef4:	200a      	movs	r0, #10
 8004ef6:	f002 fb6b 	bl	80075d0 <HAL_Delay>
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <MPU_spi_fast>:
static void MPU_spi_fast(mpu_t * mpu){
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_FAST;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 4 ;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2204      	movs	r2, #4
 8004f18:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f007 f96e 	bl	800c200 <HAL_SPI_Init>
 8004f24:	4603      	mov	r3, r0
 8004f26:	461a      	mov	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 8004f2c:	200a      	movs	r0, #10
 8004f2e:	f002 fb4f 	bl	80075d0 <HAL_Delay>
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <MPU_init>:


/*
 *
 */
sensor_request_e MPU_init(mpu_t * mpu, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	807b      	strh	r3, [r7, #2]


	//Requiert un SPI pour fonctionner
	if(hspi == NULL)
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <MPU_init+0x18>
		return SENSOR_REQUEST_FAIL ;
 8004f50:	2302      	movs	r3, #2
 8004f52:	e090      	b.n	8005076 <MPU_init+0x13a>


	//CS pin must be high by default
	MPU_cs_unlock(mpu);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff ffa8 	bl	8004eaa <MPU_cs_unlock>
	HAL_Delay(1);
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	f002 fb38 	bl	80075d0 <HAL_Delay>
	TIME_delay_us_blocking(1);
 8004f60:	2001      	movs	r0, #1
 8004f62:	f7fe fe7f 	bl	8003c64 <TIME_delay_us_blocking>

	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	73da      	strb	r2, [r3, #15]

	//SPI slow pdt l'init, max si 1Mhz for the mpu
	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d102      	bne.n	8004f7c <MPU_init+0x40>
		MPU_spi_slow(mpu);
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7ff ffa7 	bl	8004eca <MPU_spi_slow>


	//Définit d'après la doc pour les registres du mpu
	mpu->gyro_data = &mpu->data[8] ;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f103 021a 	add.w	r2, r3, #26
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	621a      	str	r2, [r3, #32]
	mpu->acc_data = &mpu->data[0] ;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f103 0212 	add.w	r2, r3, #18
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44


	//Application des paramètres de connexion
	mpu->hspi = hspi ;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	887a      	ldrh	r2, [r7, #2]
 8004f9a:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	22d0      	movs	r2, #208	; 0xd0
 8004fa6:	745a      	strb	r2, [r3, #17]

	mpu_handlers[mpu_init_compteur] = mpu ;
 8004fa8:	4b35      	ldr	r3, [pc, #212]	; (8005080 <MPU_init+0x144>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	4619      	mov	r1, r3
 8004fae:	4a35      	ldr	r2, [pc, #212]	; (8005084 <MPU_init+0x148>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	SPI_handlers[mpu_init_compteur++] = hspi ;
 8004fb6:	4b32      	ldr	r3, [pc, #200]	; (8005080 <MPU_init+0x144>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	b2d1      	uxtb	r1, r2
 8004fbe:	4a30      	ldr	r2, [pc, #192]	; (8005080 <MPU_init+0x144>)
 8004fc0:	7011      	strb	r1, [r2, #0]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4a30      	ldr	r2, [pc, #192]	; (8005088 <MPU_init+0x14c>)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Wakeup mpu
	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x80} ;
 8004fcc:	4b2f      	ldr	r3, [pc, #188]	; (800508c <MPU_init+0x150>)
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	83bb      	strh	r3, [r7, #28]
	MPU_cs_lock(mpu);
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff ff59 	bl	8004e8a <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6858      	ldr	r0, [r3, #4]
 8004fdc:	f107 011c 	add.w	r1, r7, #28
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f007 f970 	bl	800c2c8 <HAL_SPI_Transmit>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	461a      	mov	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f7ff ff5a 	bl	8004eaa <MPU_cs_unlock>

	HAL_Delay(150);
 8004ff6:	2096      	movs	r0, #150	; 0x96
 8004ff8:	f002 faea 	bl	80075d0 <HAL_Delay>

	//Clock select
	uint8_t mpu_clock_sel_pll_gyroz[] = {MPU6050_PWR_MGMT_1, 0x03};
 8004ffc:	4b24      	ldr	r3, [pc, #144]	; (8005090 <MPU_init+0x154>)
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	833b      	strh	r3, [r7, #24]
	MPU_cs_lock(mpu);
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff ff41 	bl	8004e8a <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_clock_sel_pll_gyroz, 2, 2);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6858      	ldr	r0, [r3, #4]
 800500c:	f107 0118 	add.w	r1, r7, #24
 8005010:	2302      	movs	r3, #2
 8005012:	2202      	movs	r2, #2
 8005014:	f007 f958 	bl	800c2c8 <HAL_SPI_Transmit>
 8005018:	4603      	mov	r3, r0
 800501a:	461a      	mov	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff ff42 	bl	8004eaa <MPU_cs_unlock>

	HAL_Delay(15);
 8005026:	200f      	movs	r0, #15
 8005028:	f002 fad2 	bl	80075d0 <HAL_Delay>

	//Disable I2C
	uint8_t mpu_disable_i2c[] = {MPU6050_USER_CTRL, 0x10};
 800502c:	4b19      	ldr	r3, [pc, #100]	; (8005094 <MPU_init+0x158>)
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	82bb      	strh	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff ff29 	bl	8004e8a <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_disable_i2c, 2, 2);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6858      	ldr	r0, [r3, #4]
 800503c:	f107 0114 	add.w	r1, r7, #20
 8005040:	2302      	movs	r3, #2
 8005042:	2202      	movs	r2, #2
 8005044:	f007 f940 	bl	800c2c8 <HAL_SPI_Transmit>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7ff ff2a 	bl	8004eaa <MPU_cs_unlock>

	TIME_delay_us_blocking(2);
 8005056:	2002      	movs	r0, #2
 8005058:	f7fe fe04 	bl	8003c64 <TIME_delay_us_blocking>
//	MPU_cs_lock(mpu);
//	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, set_dlpf, 2, 2);
//	MPU_cs_unlock(mpu);

	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	7b9b      	ldrb	r3, [r3, #14]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <MPU_init+0x132>
		mpu->state = SENSOR_ERROR ;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2204      	movs	r2, #4
 8005068:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 800506a:	2302      	movs	r3, #2
 800506c:	e003      	b.n	8005076 <MPU_init+0x13a>
	}

	mpu->state = SENSOR_IDDLE ;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	73da      	strb	r2, [r3, #15]
	return SENSOR_REQUEST_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20002058 	.word	0x20002058
 8005084:	20002054 	.word	0x20002054
 8005088:	20002050 	.word	0x20002050
 800508c:	080137e4 	.word	0x080137e4
 8005090:	080137e8 	.word	0x080137e8
 8005094:	080137ec 	.word	0x080137ec

08005098 <MPU_init_gyro>:

/*
 *
 */
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	460b      	mov	r3, r1
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	72fb      	strb	r3, [r7, #11]

	mpu->gyro_range = gyro_range ;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	7afa      	ldrb	r2, [r7, #11]
 80050aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mpu->gyro_data_callback = gyro_data_callback ;
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	7bdb      	ldrb	r3, [r3, #15]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <MPU_init_gyro+0x28>
		return SENSOR_REQUEST_FAIL ;
 80050bc:	2302      	movs	r3, #2
 80050be:	e096      	b.n	80051ee <MPU_init_gyro+0x156>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d102      	bne.n	80050d0 <MPU_init_gyro+0x38>
		MPU_spi_slow(mpu);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff fefd 	bl	8004eca <MPU_spi_slow>

	//Configuration de la sensi du gyro dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 80050d0:	239b      	movs	r3, #155	; 0x9b
 80050d2:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7ff fed8 	bl	8004e8a <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6858      	ldr	r0, [r3, #4]
 80050de:	f107 0214 	add.w	r2, r7, #20
 80050e2:	f107 0114 	add.w	r1, r7, #20
 80050e6:	2302      	movs	r3, #2
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	2302      	movs	r3, #2
 80050ec:	f007 fa20 	bl	800c530 <HAL_SPI_TransmitReceive>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff fed6 	bl	8004eaa <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	7b9b      	ldrb	r3, [r3, #14]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d122      	bne.n	800514c <MPU_init_gyro+0xb4>
		HAL_Delay(1);
 8005106:	2001      	movs	r0, #1
 8005108:	f002 fa62 	bl	80075d0 <HAL_Delay>
		MPU_cs_lock(mpu);
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff febc 	bl	8004e8a <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 8005112:	231b      	movs	r3, #27
 8005114:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 8005116:	7d7b      	ldrb	r3, [r7, #21]
 8005118:	b25b      	sxtb	r3, r3
 800511a:	f023 0318 	bic.w	r3, r3, #24
 800511e:	b25a      	sxtb	r2, r3
 8005120:	7afb      	ldrb	r3, [r7, #11]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	b25b      	sxtb	r3, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	b25b      	sxtb	r3, r3
 800512a:	b2db      	uxtb	r3, r3
 800512c:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6858      	ldr	r0, [r3, #4]
 8005132:	f107 0114 	add.w	r1, r7, #20
 8005136:	2302      	movs	r3, #2
 8005138:	2202      	movs	r2, #2
 800513a:	f007 f8c5 	bl	800c2c8 <HAL_SPI_Transmit>
 800513e:	4603      	mov	r3, r0
 8005140:	461a      	mov	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff feaf 	bl	8004eaa <MPU_cs_unlock>
	}

	//ON vérifi si on a bien écris ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	7b9b      	ldrb	r3, [r3, #14]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d124      	bne.n	800519e <MPU_init_gyro+0x106>
		uint8_t temp2 = temp[1];
 8005154:	7d7b      	ldrb	r3, [r7, #21]
 8005156:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8005158:	239b      	movs	r3, #155	; 0x9b
 800515a:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 800515c:	2001      	movs	r0, #1
 800515e:	f002 fa37 	bl	80075d0 <HAL_Delay>
		MPU_cs_lock(mpu);
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff fe91 	bl	8004e8a <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6858      	ldr	r0, [r3, #4]
 800516c:	f107 0214 	add.w	r2, r7, #20
 8005170:	f107 0114 	add.w	r1, r7, #20
 8005174:	2302      	movs	r3, #2
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	2302      	movs	r3, #2
 800517a:	f007 f9d9 	bl	800c530 <HAL_SPI_TransmitReceive>
 800517e:	4603      	mov	r3, r0
 8005180:	461a      	mov	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff fe8f 	bl	8004eaa <MPU_cs_unlock>

		if(temp[1] != temp2)
 800518c:	7d7b      	ldrb	r3, [r7, #21]
 800518e:	7dfa      	ldrb	r2, [r7, #23]
 8005190:	429a      	cmp	r2, r3
 8005192:	d004      	beq.n	800519e <MPU_init_gyro+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2204      	movs	r2, #4
 8005198:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 800519a:	2302      	movs	r3, #2
 800519c:	e027      	b.n	80051ee <MPU_init_gyro+0x156>

	}



	if(mpu->hal_state != HAL_OK)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	7b9b      	ldrb	r3, [r3, #14]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d004      	beq.n	80051b0 <MPU_init_gyro+0x118>
	{
		mpu->state = SENSOR_ERROR ;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2204      	movs	r2, #4
 80051aa:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 80051ac:	2302      	movs	r3, #2
 80051ae:	e01e      	b.n	80051ee <MPU_init_gyro+0x156>
	}

	switch(gyro_range){
 80051b0:	7afb      	ldrb	r3, [r7, #11]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d81a      	bhi.n	80051ec <MPU_init_gyro+0x154>
 80051b6:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <MPU_init_gyro+0x124>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051cd 	.word	0x080051cd
 80051c0:	080051d5 	.word	0x080051d5
 80051c4:	080051dd 	.word	0x080051dd
 80051c8:	080051e5 	.word	0x080051e5
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <MPU_init_gyro+0x160>)
 80051d0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80051d2:	e00b      	b.n	80051ec <MPU_init_gyro+0x154>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a09      	ldr	r2, [pc, #36]	; (80051fc <MPU_init_gyro+0x164>)
 80051d8:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80051da:	e007      	b.n	80051ec <MPU_init_gyro+0x154>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a08      	ldr	r2, [pc, #32]	; (8005200 <MPU_init_gyro+0x168>)
 80051e0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80051e2:	e003      	b.n	80051ec <MPU_init_gyro+0x154>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a07      	ldr	r2, [pc, #28]	; (8005204 <MPU_init_gyro+0x16c>)
 80051e8:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80051ea:	bf00      	nop
	}

	return SENSOR_REQUEST_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	3bfa232d 	.word	0x3bfa232d
 80051fc:	3c7a232d 	.word	0x3c7a232d
 8005200:	3cf9c190 	.word	0x3cf9c190
 8005204:	3d79c190 	.word	0x3d79c190

08005208 <MPU_init_acc>:

/*
 *
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	460b      	mov	r3, r1
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	72fb      	strb	r3, [r7, #11]
	mpu->acc_range = acc_range ;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	7afa      	ldrb	r2, [r7, #11]
 800521a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	mpu->acc_data_callback = acc_data_callback ;
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	665a      	str	r2, [r3, #100]	; 0x64
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	7bdb      	ldrb	r3, [r3, #15]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <MPU_init_acc+0x28>
		return SENSOR_REQUEST_FAIL ;
 800522c:	2302      	movs	r3, #2
 800522e:	e095      	b.n	800535c <MPU_init_acc+0x154>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005236:	2b01      	cmp	r3, #1
 8005238:	d102      	bne.n	8005240 <MPU_init_acc+0x38>
			MPU_spi_slow(mpu);
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f7ff fe45 	bl	8004eca <MPU_spi_slow>

	//Configuration de la sensi de l'acc dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8005240:	239c      	movs	r3, #156	; 0x9c
 8005242:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff fe20 	bl	8004e8a <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6858      	ldr	r0, [r3, #4]
 800524e:	f107 0214 	add.w	r2, r7, #20
 8005252:	f107 0114 	add.w	r1, r7, #20
 8005256:	2302      	movs	r3, #2
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	2302      	movs	r3, #2
 800525c:	f007 f968 	bl	800c530 <HAL_SPI_TransmitReceive>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f7ff fe1e 	bl	8004eaa <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){	//Si mpu ok on écrit en spi dans le registre de config du mpu dédié au gyro
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	7b9b      	ldrb	r3, [r3, #14]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d122      	bne.n	80052bc <MPU_init_acc+0xb4>
		HAL_Delay(1);
 8005276:	2001      	movs	r0, #1
 8005278:	f002 f9aa 	bl	80075d0 <HAL_Delay>
		MPU_cs_lock(mpu);
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff fe04 	bl	8004e8a <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 8005282:	231c      	movs	r3, #28
 8005284:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 8005286:	7d7b      	ldrb	r3, [r7, #21]
 8005288:	b25b      	sxtb	r3, r3
 800528a:	f023 0318 	bic.w	r3, r3, #24
 800528e:	b25a      	sxtb	r2, r3
 8005290:	7afb      	ldrb	r3, [r7, #11]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	b25b      	sxtb	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	b25b      	sxtb	r3, r3
 800529a:	b2db      	uxtb	r3, r3
 800529c:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6858      	ldr	r0, [r3, #4]
 80052a2:	f107 0114 	add.w	r1, r7, #20
 80052a6:	2302      	movs	r3, #2
 80052a8:	2202      	movs	r2, #2
 80052aa:	f007 f80d 	bl	800c2c8 <HAL_SPI_Transmit>
 80052ae:	4603      	mov	r3, r0
 80052b0:	461a      	mov	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7ff fdf7 	bl	8004eaa <MPU_cs_unlock>
	}

	//On test si on a bien écrit ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	7b9b      	ldrb	r3, [r3, #14]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d124      	bne.n	800530e <MPU_init_acc+0x106>
		uint8_t temp2 = temp[1];
 80052c4:	7d7b      	ldrb	r3, [r7, #21]
 80052c6:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 80052c8:	239c      	movs	r3, #156	; 0x9c
 80052ca:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 80052cc:	2001      	movs	r0, #1
 80052ce:	f002 f97f 	bl	80075d0 <HAL_Delay>
		MPU_cs_lock(mpu);
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff fdd9 	bl	8004e8a <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6858      	ldr	r0, [r3, #4]
 80052dc:	f107 0214 	add.w	r2, r7, #20
 80052e0:	f107 0114 	add.w	r1, r7, #20
 80052e4:	2302      	movs	r3, #2
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	2302      	movs	r3, #2
 80052ea:	f007 f921 	bl	800c530 <HAL_SPI_TransmitReceive>
 80052ee:	4603      	mov	r3, r0
 80052f0:	461a      	mov	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff fdd7 	bl	8004eaa <MPU_cs_unlock>

		if(temp[1] != temp2)
 80052fc:	7d7b      	ldrb	r3, [r7, #21]
 80052fe:	7dfa      	ldrb	r2, [r7, #23]
 8005300:	429a      	cmp	r2, r3
 8005302:	d004      	beq.n	800530e <MPU_init_acc+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2204      	movs	r2, #4
 8005308:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 800530a:	2302      	movs	r3, #2
 800530c:	e026      	b.n	800535c <MPU_init_acc+0x154>
		}
	}



	switch(acc_range){
 800530e:	7afb      	ldrb	r3, [r7, #11]
 8005310:	2b03      	cmp	r3, #3
 8005312:	d81f      	bhi.n	8005354 <MPU_init_acc+0x14c>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <MPU_init_acc+0x114>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	0800532d 	.word	0x0800532d
 8005320:	08005337 	.word	0x08005337
 8005324:	08005341 	.word	0x08005341
 8005328:	0800534b 	.word	0x0800534b
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8005332:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8005334:	e00e      	b.n	8005354 <MPU_init_acc+0x14c>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800533c:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 800533e:	e009      	b.n	8005354 <MPU_init_acc+0x14c>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8005346:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8005348:	e004      	b.n	8005354 <MPU_init_acc+0x14c>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8005350:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8005352:	bf00      	nop
	}
	MPU_spi_fast(mpu);
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff fdd4 	bl	8004f02 <MPU_spi_fast>
	return SENSOR_REQUEST_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_REQUEST_OK ;

}

sensor_request_e MPU_update_acc(mpu_t * mpu){
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af02      	add	r7, sp, #8
 800536a:	6078      	str	r0, [r7, #4]

	if(mpu->state != SENSOR_IDDLE){
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	7bdb      	ldrb	r3, [r3, #15]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <MPU_update_acc+0x14>
		return SENSOR_REQUEST_FAIL ;
 8005374:	2302      	movs	r3, #2
 8005376:	e030      	b.n	80053da <MPU_update_acc+0x76>
	}

	//Update des valeurs
	uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 8005378:	23bb      	movs	r3, #187	; 0xbb
 800537a:	723b      	strb	r3, [r7, #8]
 800537c:	2300      	movs	r3, #0
 800537e:	727b      	strb	r3, [r7, #9]
 8005380:	2300      	movs	r3, #0
 8005382:	72bb      	strb	r3, [r7, #10]
 8005384:	2300      	movs	r3, #0
 8005386:	72fb      	strb	r3, [r7, #11]
 8005388:	2300      	movs	r3, #0
 800538a:	733b      	strb	r3, [r7, #12]
 800538c:	2300      	movs	r3, #0
 800538e:	737b      	strb	r3, [r7, #13]
	MPU_cs_lock(mpu);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fd7a 	bl	8004e8a <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6858      	ldr	r0, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800539e:	f107 0108 	add.w	r1, r7, #8
 80053a2:	2302      	movs	r3, #2
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	2306      	movs	r3, #6
 80053a8:	f007 f8c2 	bl	800c530 <HAL_SPI_TransmitReceive>
 80053ac:	4603      	mov	r3, r0
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff fd78 	bl	8004eaa <MPU_cs_unlock>


	if(mpu->hal_state == HAL_BUSY)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	7b9b      	ldrb	r3, [r3, #14]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d101      	bne.n	80053c6 <MPU_update_acc+0x62>
		return SENSOR_REQUEST_BUSY ;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e009      	b.n	80053da <MPU_update_acc+0x76>
	if(mpu->hal_state != HAL_OK){
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	7b9b      	ldrb	r3, [r3, #14]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <MPU_update_acc+0x6e>
		return SENSOR_REQUEST_FAIL ;
 80053ce:	2302      	movs	r3, #2
 80053d0:	e003      	b.n	80053da <MPU_update_acc+0x76>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7ff fcf3 	bl	8004dbe <convert_acc>
	return SENSOR_REQUEST_OK ;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <MPU_update_all_dma>:
	}

	return SENSOR_REQUEST_OK;
}

sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]

	uint8_t registers [14] = {0};
 80053ea:	f107 0308 	add.w	r3, r7, #8
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	609a      	str	r2, [r3, #8]
 80053f6:	819a      	strh	r2, [r3, #12]
	registers[0] = MPU6050_ACCEL_XOUT_H | MPU6050_READ ;
 80053f8:	23bb      	movs	r3, #187	; 0xbb
 80053fa:	723b      	strb	r3, [r7, #8]
	MPU_cs_lock(mpu);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff fd44 	bl	8004e8a <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive_DMA(mpu->hspi, registers, mpu->data, 14);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6858      	ldr	r0, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f103 0212 	add.w	r2, r3, #18
 800540c:	f107 0108 	add.w	r1, r7, #8
 8005410:	230e      	movs	r3, #14
 8005412:	f007 fa2f 	bl	800c874 <HAL_SPI_TransmitReceive_DMA>
 8005416:	4603      	mov	r3, r0
 8005418:	461a      	mov	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	7b9b      	ldrb	r3, [r3, #14]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d107      	bne.n	8005436 <MPU_update_all_dma+0x54>
	{
		mpu->state = SENSOR_BUSY ;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2203      	movs	r2, #3
 800542a:	73da      	strb	r2, [r3, #15]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2203      	movs	r2, #3
 8005430:	741a      	strb	r2, [r3, #16]
	{
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	return SENSOR_REQUEST_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e009      	b.n	800544a <MPU_update_all_dma+0x68>
	else if(mpu->hal_state == HAL_BUSY)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	7b9b      	ldrb	r3, [r3, #14]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d101      	bne.n	8005442 <MPU_update_all_dma+0x60>
		return SENSOR_REQUEST_BUSY;
 800543e:	2301      	movs	r3, #1
 8005440:	e003      	b.n	800544a <MPU_update_all_dma+0x68>
		mpu->state = SENSOR_ERROR ;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2204      	movs	r2, #4
 8005446:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8005448:	2302      	movs	r3, #2
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <MPU_dma_transmit_complete>:



static void MPU_dma_transmit_complete(mpu_t * mpu){
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]

	//On relâche le pin CS du mpu
	MPU_cs_unlock(mpu);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff fd25 	bl	8004eaa <MPU_cs_unlock>


	switch(mpu->dma_state){
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	7c1b      	ldrb	r3, [r3, #16]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d00b      	beq.n	8005480 <MPU_dma_transmit_complete+0x2e>
 8005468:	2b03      	cmp	r3, #3
 800546a:	d010      	beq.n	800548e <MPU_dma_transmit_complete+0x3c>
 800546c:	2b01      	cmp	r3, #1
 800546e:	d000      	beq.n	8005472 <MPU_dma_transmit_complete+0x20>
			mpu->gyro_data_callback();

			break;
		case MPU_DMA_IDDLE:
		default:
			break;
 8005470:	e014      	b.n	800549c <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fc40 	bl	8004cf8 <convert_gyro>
			mpu->gyro_data_callback();
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	4798      	blx	r3
			break;
 800547e:	e00d      	b.n	800549c <MPU_dma_transmit_complete+0x4a>
			convert_acc(mpu);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fc9c 	bl	8004dbe <convert_acc>
			mpu->acc_data_callback();
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800548a:	4798      	blx	r3
			break;
 800548c:	e006      	b.n	800549c <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fc32 	bl	8004cf8 <convert_gyro>
			mpu->gyro_data_callback();
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	4798      	blx	r3
			break;
 800549a:	bf00      	nop

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	741a      	strb	r2, [r3, #16]
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <MPU_dma_transmit_half_complete>:
static void MPU_dma_transmit_half_complete(mpu_t * mpu){
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]

	if(mpu->dma_state == MPU_DMA_ACC_AND_GYRO_IN_PROGRESS)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	7c1b      	ldrb	r3, [r3, #16]
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d105      	bne.n	80054c6 <MPU_dma_transmit_half_complete+0x1c>
	{
		//A la moitié donc les données de l'acc sont arrivées
		convert_acc(mpu);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff fc7f 	bl	8004dbe <convert_acc>
		mpu->acc_data_callback();
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c4:	4798      	blx	r3
	}
}
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
	if(hspi == SPI_handlers[0])
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <HAL_SPI_TxRxCpltCallback+0x24>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d104      	bne.n	80054ec <HAL_SPI_TxRxCpltCallback+0x1c>
		MPU_dma_transmit_complete(mpu_handlers[0]);
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <HAL_SPI_TxRxCpltCallback+0x28>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff ffb3 	bl	8005452 <MPU_dma_transmit_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	20002050 	.word	0x20002050
 80054f8:	20002054 	.word	0x20002054

080054fc <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
if(hspi == SPI_handlers[0])
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d104      	bne.n	8005518 <HAL_SPI_TxRxHalfCpltCallback+0x1c>
	MPU_dma_transmit_half_complete(mpu_handlers[0]);
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff ffc9 	bl	80054aa <MPU_dma_transmit_half_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif

}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20002050 	.word	0x20002050
 8005524:	20002054 	.word	0x20002054

08005528 <MS5611_init>:

#include "ms5611.h"
#include "math.h"
ms5611_t * ms5611_ ;

sensor_request_e MS5611_init(ms5611_t * ms5611, I2C_HandleTypeDef * hi2c, void (*temp_data), void (*pressure_data)){
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af04      	add	r7, sp, #16
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
	ms5611->state = SENSOR_NOT_INIT ;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	715a      	strb	r2, [r3, #5]
	ms5611_ = ms5611 ;
 800553c:	4a2f      	ldr	r2, [pc, #188]	; (80055fc <MS5611_init+0xd4>)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6013      	str	r3, [r2, #0]

	//Callback function
	ms5611->temp_data = temp_data ;
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	635a      	str	r2, [r3, #52]	; 0x34
	ms5611->pressure_data = pressure_data ;
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	639a      	str	r2, [r3, #56]	; 0x38
	if(hi2c == NULL)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <MS5611_init+0x30>
		return SENSOR_REQUEST_FAIL ;
 8005554:	2302      	movs	r3, #2
 8005556:	e04c      	b.n	80055f2 <MS5611_init+0xca>

	ms5611->hi2c = hi2c ;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	601a      	str	r2, [r3, #0]
	ms5611->hal_state = HAL_I2C_IsDeviceReady(ms5611->hi2c, MS5611_ADRESSE, 5, 2);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	2302      	movs	r3, #2
 8005564:	2205      	movs	r2, #5
 8005566:	21ee      	movs	r1, #238	; 0xee
 8005568:	f004 f89e 	bl	80096a8 <HAL_I2C_IsDeviceReady>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	711a      	strb	r2, [r3, #4]
	if(ms5611->hal_state != HAL_OK)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	791b      	ldrb	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <MS5611_init+0x58>
		return SENSOR_REQUEST_FAIL ;
 800557c:	2302      	movs	r3, #2
 800557e:	e038      	b.n	80055f2 <MS5611_init+0xca>

	//Get calibrations values from the sensor
	uint8_t data[2];
	for(uint8_t d = 1; d < 7; d++){
 8005580:	2301      	movs	r3, #1
 8005582:	75fb      	strb	r3, [r7, #23]
 8005584:	e02e      	b.n	80055e4 <MS5611_init+0xbc>
		if(ms5611->hal_state == HAL_OK){
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	791b      	ldrb	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d125      	bne.n	80055da <MS5611_init+0xb2>
			ms5611->hal_state = HAL_I2C_Mem_Read(ms5611->hi2c, MS5611_ADRESSE, (uint8_t)(MS5611_PROM + (2*d)), I2C_MEMADD_SIZE_8BIT, data, 2, 2);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	3350      	adds	r3, #80	; 0x50
 8005596:	b2db      	uxtb	r3, r3
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	b2db      	uxtb	r3, r3
 800559c:	b29a      	uxth	r2, r3
 800559e:	2302      	movs	r3, #2
 80055a0:	9302      	str	r3, [sp, #8]
 80055a2:	2302      	movs	r3, #2
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2301      	movs	r3, #1
 80055ae:	21ee      	movs	r1, #238	; 0xee
 80055b0:	f003 fce2 	bl	8008f78 <HAL_I2C_Mem_Read>
 80055b4:	4603      	mov	r3, r0
 80055b6:	461a      	mov	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	711a      	strb	r2, [r3, #4]
			ms5611->calibration_values[d-1] = (uint16_t)((data[0] << 8) | data[1]);
 80055bc:	7d3b      	ldrb	r3, [r7, #20]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	b21a      	sxth	r2, r3
 80055c2:	7d7b      	ldrb	r3, [r7, #21]
 80055c4:	b21b      	sxth	r3, r3
 80055c6:	4313      	orrs	r3, r2
 80055c8:	b219      	sxth	r1, r3
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	1e5a      	subs	r2, r3, #1
 80055ce:	b289      	uxth	r1, r1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3204      	adds	r2, #4
 80055d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80055d8:	e001      	b.n	80055de <MS5611_init+0xb6>
		}
		else
			return SENSOR_REQUEST_FAIL ;
 80055da:	2302      	movs	r3, #2
 80055dc:	e009      	b.n	80055f2 <MS5611_init+0xca>
	for(uint8_t d = 1; d < 7; d++){
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	3301      	adds	r3, #1
 80055e2:	75fb      	strb	r3, [r7, #23]
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
 80055e6:	2b06      	cmp	r3, #6
 80055e8:	d9cd      	bls.n	8005586 <MS5611_init+0x5e>
	}
	ms5611->state = SENSOR_IDDLE ;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	715a      	strb	r2, [r3, #5]

	return SENSOR_REQUEST_OK ;
 80055f0:	2300      	movs	r3, #0

}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20002078 	.word	0x20002078

08005600 <MS5611_request_temp>:

//Demande pour une mesure de température
sensor_request_e MS5611_request_temp(ms5611_t * ms5611){
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	if(ms5611->state == SENSOR_BUSY)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	795b      	ldrb	r3, [r3, #5]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d101      	bne.n	8005614 <MS5611_request_temp+0x14>
		return SENSOR_REQUEST_BUSY;
 8005610:	2301      	movs	r3, #1
 8005612:	e01d      	b.n	8005650 <MS5611_request_temp+0x50>
	if(ms5611->state)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	795b      	ldrb	r3, [r3, #5]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <MS5611_request_temp+0x20>
		return SENSOR_REQUEST_FAIL;
 800561c:	2302      	movs	r3, #2
 800561e:	e017      	b.n	8005650 <MS5611_request_temp+0x50>

	uint8_t temp_request = MS5611_TEMP ;
 8005620:	2358      	movs	r3, #88	; 0x58
 8005622:	73fb      	strb	r3, [r7, #15]
	ms5611->hal_state = HAL_I2C_Master_Transmit_DMA(ms5611->hi2c, MS5611_ADRESSE, &temp_request, 1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	f107 020f 	add.w	r2, r7, #15
 800562c:	2301      	movs	r3, #1
 800562e:	21ee      	movs	r1, #238	; 0xee
 8005630:	f003 fb8c 	bl	8008d4c <HAL_I2C_Master_Transmit_DMA>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	711a      	strb	r2, [r3, #4]

	if(ms5611->hal_state != HAL_OK){
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	791b      	ldrb	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <MS5611_request_temp+0x4e>
		ms5611->state = SENSOR_ERROR ;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2204      	movs	r2, #4
 8005648:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 800564a:	2302      	movs	r3, #2
 800564c:	e000      	b.n	8005650 <MS5611_request_temp+0x50>
	}
	else
		return SENSOR_REQUEST_OK ;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <MS5611_request_pressure>:

//Demande pour une mesure de pressio
sensor_request_e MS5611_request_pressure(ms5611_t * ms5611){
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	if(ms5611->state == SENSOR_BUSY)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	795b      	ldrb	r3, [r3, #5]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d101      	bne.n	800566c <MS5611_request_pressure+0x14>
		return SENSOR_REQUEST_BUSY;
 8005668:	2301      	movs	r3, #1
 800566a:	e01d      	b.n	80056a8 <MS5611_request_pressure+0x50>
	if(ms5611->state)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	795b      	ldrb	r3, [r3, #5]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <MS5611_request_pressure+0x20>
		return SENSOR_REQUEST_FAIL;
 8005674:	2302      	movs	r3, #2
 8005676:	e017      	b.n	80056a8 <MS5611_request_pressure+0x50>

	uint8_t pressure_request = MS5611_PRESSURE ;
 8005678:	2348      	movs	r3, #72	; 0x48
 800567a:	73fb      	strb	r3, [r7, #15]
	ms5611->hal_state = HAL_I2C_Master_Transmit_DMA(ms5611->hi2c, MS5611_ADRESSE, &pressure_request, 1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	f107 020f 	add.w	r2, r7, #15
 8005684:	2301      	movs	r3, #1
 8005686:	21ee      	movs	r1, #238	; 0xee
 8005688:	f003 fb60 	bl	8008d4c <HAL_I2C_Master_Transmit_DMA>
 800568c:	4603      	mov	r3, r0
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	711a      	strb	r2, [r3, #4]

	if(ms5611->hal_state != HAL_OK){
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	791b      	ldrb	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <MS5611_request_pressure+0x4e>
		ms5611->state = SENSOR_ERROR ;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2204      	movs	r2, #4
 80056a0:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 80056a2:	2302      	movs	r3, #2
 80056a4:	e000      	b.n	80056a8 <MS5611_request_pressure+0x50>
	}
	else
		return SENSOR_REQUEST_OK ;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <MS5611_read_temp>:

//Lecture de la température
sensor_request_e MS5611_read_temp(ms5611_t * ms5611){
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	6078      	str	r0, [r7, #4]

	if(ms5611->state == SENSOR_BUSY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	795b      	ldrb	r3, [r3, #5]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d101      	bne.n	80056c4 <MS5611_read_temp+0x14>
		return SENSOR_REQUEST_BUSY;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e022      	b.n	800570a <MS5611_read_temp+0x5a>
	if(ms5611->state)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	795b      	ldrb	r3, [r3, #5]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <MS5611_read_temp+0x20>
		return SENSOR_REQUEST_FAIL;
 80056cc:	2302      	movs	r3, #2
 80056ce:	e01c      	b.n	800570a <MS5611_read_temp+0x5a>

	ms5611->hal_state = HAL_I2C_Mem_Read_DMA(ms5611->hi2c, MS5611_ADRESSE, MS5611_READ_DATA, I2C_MEMADD_SIZE_8BIT, ms5611->read_tmp, 3);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3330      	adds	r3, #48	; 0x30
 80056d8:	2203      	movs	r2, #3
 80056da:	9201      	str	r2, [sp, #4]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	2301      	movs	r3, #1
 80056e0:	2200      	movs	r2, #0
 80056e2:	21ee      	movs	r1, #238	; 0xee
 80056e4:	f003 fe6e 	bl	80093c4 <HAL_I2C_Mem_Read_DMA>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	711a      	strb	r2, [r3, #4]
	ms5611->read_state = MS5611_READ_TEMPERATURE ;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	719a      	strb	r2, [r3, #6]

	if(ms5611->hal_state != HAL_OK){
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	791b      	ldrb	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <MS5611_read_temp+0x58>
		ms5611->state = SENSOR_ERROR ;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2204      	movs	r2, #4
 8005702:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 8005704:	2302      	movs	r3, #2
 8005706:	e000      	b.n	800570a <MS5611_read_temp+0x5a>
	}
	else
		return SENSOR_REQUEST_OK ;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <MS5611_read_pressure>:

//Lecture de la pression
sensor_request_e MS5611_read_pressure(ms5611_t * ms5611){
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af02      	add	r7, sp, #8
 8005718:	6078      	str	r0, [r7, #4]

	if(ms5611->state == SENSOR_BUSY)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	795b      	ldrb	r3, [r3, #5]
 800571e:	2b03      	cmp	r3, #3
 8005720:	d101      	bne.n	8005726 <MS5611_read_pressure+0x14>
		return SENSOR_REQUEST_BUSY;
 8005722:	2301      	movs	r3, #1
 8005724:	e01e      	b.n	8005764 <MS5611_read_pressure+0x52>
	if(ms5611->state)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	795b      	ldrb	r3, [r3, #5]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <MS5611_read_pressure+0x20>
		return SENSOR_REQUEST_FAIL;
 800572e:	2302      	movs	r3, #2
 8005730:	e018      	b.n	8005764 <MS5611_read_pressure+0x52>


	HAL_I2C_Mem_Read_DMA(ms5611->hi2c, MS5611_ADRESSE, MS5611_READ_DATA, I2C_MEMADD_SIZE_8BIT, ms5611->read_tmp, 3);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3330      	adds	r3, #48	; 0x30
 800573a:	2203      	movs	r2, #3
 800573c:	9201      	str	r2, [sp, #4]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	2301      	movs	r3, #1
 8005742:	2200      	movs	r2, #0
 8005744:	21ee      	movs	r1, #238	; 0xee
 8005746:	f003 fe3d 	bl	80093c4 <HAL_I2C_Mem_Read_DMA>
	ms5611->read_state = MS5611_READ_PRESSURE ;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	719a      	strb	r2, [r3, #6]

	if(ms5611->hal_state != HAL_OK){
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	791b      	ldrb	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <MS5611_read_pressure+0x50>
		ms5611->state = SENSOR_ERROR ;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2204      	movs	r2, #4
 800575c:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 800575e:	2302      	movs	r3, #2
 8005760:	e000      	b.n	8005764 <MS5611_read_pressure+0x52>
	}
	else
		return SENSOR_REQUEST_OK ;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <MS5611_calculate_temperature>:

//Calcul de la température
void MS5611_calculate_temperature(ms5611_t * ms5611){
 800576c:	b4b0      	push	{r4, r5, r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	ms5611->dT = ms5611->raw_temperature - (int32_t)ms5611->calibration_values[4] * 256;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	8a12      	ldrh	r2, [r2, #16]
 800577c:	0212      	lsls	r2, r2, #8
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	461a      	mov	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	625a      	str	r2, [r3, #36]	; 0x24
	ms5611->temperature = 2000 +  ((int64_t) ms5611->dT * ms5611->calibration_values[5]) / 8388608 ;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	4619      	mov	r1, r3
 800578c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8a5b      	ldrh	r3, [r3, #18]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f04f 0400 	mov.w	r4, #0
 800579a:	fb03 f502 	mul.w	r5, r3, r2
 800579e:	fb01 f004 	mul.w	r0, r1, r4
 80057a2:	4428      	add	r0, r5
 80057a4:	fba1 3403 	umull	r3, r4, r1, r3
 80057a8:	1902      	adds	r2, r0, r4
 80057aa:	4614      	mov	r4, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f174 0200 	sbcs.w	r2, r4, #0
 80057b2:	da05      	bge.n	80057c0 <MS5611_calculate_temperature+0x54>
 80057b4:	490c      	ldr	r1, [pc, #48]	; (80057e8 <MS5611_calculate_temperature+0x7c>)
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	185b      	adds	r3, r3, r1
 80057bc:	eb44 0402 	adc.w	r4, r4, r2
 80057c0:	f04f 0100 	mov.w	r1, #0
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	0dd9      	lsrs	r1, r3, #23
 80057ca:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 80057ce:	15e2      	asrs	r2, r4, #23
 80057d0:	460b      	mov	r3, r1
 80057d2:	4614      	mov	r4, r2
 80057d4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80057d8:	461a      	mov	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bcb0      	pop	{r4, r5, r7}
 80057e6:	4770      	bx	lr
 80057e8:	007fffff 	.word	0x007fffff

080057ec <MS5611_calculate_pressure>:

//Calcul de la pression
void MS5611_calculate_pressure(ms5611_t * ms5611){
 80057ec:	b4f0      	push	{r4, r5, r6, r7}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	 int64_t OFF = (int64_t)ms5611->calibration_values[1] * 65536 + (int64_t)ms5611->calibration_values[3] * ms5611->dT / 128 ;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	895b      	ldrh	r3, [r3, #10]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f04f 0400 	mov.w	r4, #0
 80057fe:	f04f 0100 	mov.w	r1, #0
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	0422      	lsls	r2, r4, #16
 8005808:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 800580c:	0419      	lsls	r1, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	89db      	ldrh	r3, [r3, #14]
 8005812:	b29d      	uxth	r5, r3
 8005814:	f04f 0600 	mov.w	r6, #0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005820:	fb03 fc06 	mul.w	ip, r3, r6
 8005824:	fb05 f004 	mul.w	r0, r5, r4
 8005828:	4460      	add	r0, ip
 800582a:	fba5 3403 	umull	r3, r4, r5, r3
 800582e:	4420      	add	r0, r4
 8005830:	4604      	mov	r4, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	f174 0000 	sbcs.w	r0, r4, #0
 8005838:	da02      	bge.n	8005840 <MS5611_calculate_pressure+0x54>
 800583a:	337f      	adds	r3, #127	; 0x7f
 800583c:	f144 0400 	adc.w	r4, r4, #0
 8005840:	f04f 0500 	mov.w	r5, #0
 8005844:	f04f 0600 	mov.w	r6, #0
 8005848:	09dd      	lsrs	r5, r3, #7
 800584a:	ea45 6544 	orr.w	r5, r5, r4, lsl #25
 800584e:	11e6      	asrs	r6, r4, #7
 8005850:	186b      	adds	r3, r5, r1
 8005852:	eb46 0402 	adc.w	r4, r6, r2
 8005856:	e9c7 3404 	strd	r3, r4, [r7, #16]
	 int64_t SENS = (int64_t)ms5611->calibration_values[0] * 32768 + (int64_t)ms5611->calibration_values[2] * ms5611->dT / 256 ;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	891b      	ldrh	r3, [r3, #8]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f04f 0400 	mov.w	r4, #0
 8005864:	f04f 0100 	mov.w	r1, #0
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	03e2      	lsls	r2, r4, #15
 800586e:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 8005872:	03d9      	lsls	r1, r3, #15
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	899b      	ldrh	r3, [r3, #12]
 8005878:	b29d      	uxth	r5, r3
 800587a:	f04f 0600 	mov.w	r6, #0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005886:	fb03 fc06 	mul.w	ip, r3, r6
 800588a:	fb05 f004 	mul.w	r0, r5, r4
 800588e:	4460      	add	r0, ip
 8005890:	fba5 3403 	umull	r3, r4, r5, r3
 8005894:	4420      	add	r0, r4
 8005896:	4604      	mov	r4, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	f174 0000 	sbcs.w	r0, r4, #0
 800589e:	da02      	bge.n	80058a6 <MS5611_calculate_pressure+0xba>
 80058a0:	33ff      	adds	r3, #255	; 0xff
 80058a2:	f144 0400 	adc.w	r4, r4, #0
 80058a6:	f04f 0500 	mov.w	r5, #0
 80058aa:	f04f 0600 	mov.w	r6, #0
 80058ae:	0a1d      	lsrs	r5, r3, #8
 80058b0:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
 80058b4:	1226      	asrs	r6, r4, #8
 80058b6:	186b      	adds	r3, r5, r1
 80058b8:	eb46 0402 	adc.w	r4, r6, r2
 80058bc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	 ms5611->pressure = (uint32_t)(ms5611->raw_pressure * SENS / 2097152 - OFF) / 32768 ;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f04f 0400 	mov.w	r4, #0
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	fb04 f102 	mul.w	r1, r4, r2
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	fb03 f202 	mul.w	r2, r3, r2
 80058d4:	440a      	add	r2, r1
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	fba1 3403 	umull	r3, r4, r1, r3
 80058dc:	4422      	add	r2, r4
 80058de:	4614      	mov	r4, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f174 0200 	sbcs.w	r2, r4, #0
 80058e6:	da05      	bge.n	80058f4 <MS5611_calculate_pressure+0x108>
 80058e8:	490d      	ldr	r1, [pc, #52]	; (8005920 <MS5611_calculate_pressure+0x134>)
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	185b      	adds	r3, r3, r1
 80058f0:	eb44 0402 	adc.w	r4, r4, r2
 80058f4:	f04f 0100 	mov.w	r1, #0
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	0d59      	lsrs	r1, r3, #21
 80058fe:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 8005902:	1562      	asrs	r2, r4, #21
 8005904:	460b      	mov	r3, r1
 8005906:	4614      	mov	r4, r2
 8005908:	461a      	mov	r2, r3
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	0bda      	lsrs	r2, r3, #15
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	61da      	str	r2, [r3, #28]
}
 8005914:	bf00      	nop
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bcf0      	pop	{r4, r5, r6, r7}
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	001fffff 	.word	0x001fffff
 8005924:	00000000 	.word	0x00000000

08005928 <MS5611_calculate_altitude>:

//Calcul de l'altitude
void MS5611_calculate_altitude(ms5611_t * ms5611){
 8005928:	b5b0      	push	{r4, r5, r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	ms5611->altitude = 44330.0f * (1.0 - powf((float)ms5611->pressure * 0.00000986923f, 0.190294957f)) - ms5611->altitude_shift ;	// 260 µs lel
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	ee07 3a90 	vmov	s15, r3
 8005938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80059d8 <MS5611_calculate_altitude+0xb0>
 8005940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005944:	eddf 0a25 	vldr	s1, [pc, #148]	; 80059dc <MS5611_calculate_altitude+0xb4>
 8005948:	eeb0 0a67 	vmov.f32	s0, s15
 800594c:	f00c fc52 	bl	80121f4 <powf>
 8005950:	ee10 3a10 	vmov	r3, s0
 8005954:	4618      	mov	r0, r3
 8005956:	f7fa fdf7 	bl	8000548 <__aeabi_f2d>
 800595a:	4603      	mov	r3, r0
 800595c:	460c      	mov	r4, r1
 800595e:	461a      	mov	r2, r3
 8005960:	4623      	mov	r3, r4
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	491e      	ldr	r1, [pc, #120]	; (80059e0 <MS5611_calculate_altitude+0xb8>)
 8005968:	f7fa fc8e 	bl	8000288 <__aeabi_dsub>
 800596c:	4603      	mov	r3, r0
 800596e:	460c      	mov	r4, r1
 8005970:	4618      	mov	r0, r3
 8005972:	4621      	mov	r1, r4
 8005974:	a316      	add	r3, pc, #88	; (adr r3, 80059d0 <MS5611_calculate_altitude+0xa8>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f7fa fe3d 	bl	80005f8 <__aeabi_dmul>
 800597e:	4603      	mov	r3, r0
 8005980:	460c      	mov	r4, r1
 8005982:	4625      	mov	r5, r4
 8005984:	461c      	mov	r4, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	4618      	mov	r0, r3
 800598c:	f7fa fddc 	bl	8000548 <__aeabi_f2d>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4620      	mov	r0, r4
 8005996:	4629      	mov	r1, r5
 8005998:	f7fa fc76 	bl	8000288 <__aeabi_dsub>
 800599c:	4603      	mov	r3, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	4618      	mov	r0, r3
 80059a2:	4621      	mov	r1, r4
 80059a4:	f7fb f900 	bl	8000ba8 <__aeabi_d2f>
 80059a8:	4602      	mov	r2, r0
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	629a      	str	r2, [r3, #40]	; 0x28
	//Si on a le shift en altitude qui est nul, on l'init
	if(!ms5611->altitude_shift)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80059b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80059b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059bc:	d103      	bne.n	80059c6 <MS5611_calculate_altitude+0x9e>
		ms5611->altitude_shift = ms5611->altitude ;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bdb0      	pop	{r4, r5, r7, pc}
 80059ce:	bf00      	nop
 80059d0:	00000000 	.word	0x00000000
 80059d4:	40e5a540 	.word	0x40e5a540
 80059d8:	37259405 	.word	0x37259405
 80059dc:	3e42dcae 	.word	0x3e42dcae
 80059e0:	3ff00000 	.word	0x3ff00000

080059e4 <MS5611_i2c_rx_callabck>:


//Callback de l'i2c car dma finit
void MS5611_i2c_rx_callabck(I2C_HandleTypeDef * hi2c){
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	UNUSED(hi2c);
	if(ms5611_->read_state == MS5611_READ_TEMPERATURE){
 80059ec:	4b1e      	ldr	r3, [pc, #120]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	799b      	ldrb	r3, [r3, #6]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d117      	bne.n	8005a26 <MS5611_i2c_rx_callabck+0x42>
		ms5611_->raw_temperature = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
 80059f6:	4b1c      	ldr	r3, [pc, #112]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059fe:	041a      	lsls	r2, r3, #16
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005a14:	431a      	orrs	r2, r3
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	619a      	str	r2, [r3, #24]
		ms5611_->temp_data();
 8005a1c:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	4798      	blx	r3
	else if(ms5611_->read_state == MS5611_READ_PRESSURE){
		ms5611_->raw_pressure = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
		ms5611_->pressure_data();
	}

}
 8005a24:	e01b      	b.n	8005a5e <MS5611_i2c_rx_callabck+0x7a>
	else if(ms5611_->read_state == MS5611_READ_PRESSURE){
 8005a26:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	799b      	ldrb	r3, [r3, #6]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d116      	bne.n	8005a5e <MS5611_i2c_rx_callabck+0x7a>
		ms5611_->raw_pressure = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
 8005a30:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a38:	041a      	lsls	r2, r3, #16
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	4313      	orrs	r3, r2
 8005a46:	4a08      	ldr	r2, [pc, #32]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	615a      	str	r2, [r3, #20]
		ms5611_->pressure_data();
 8005a56:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <MS5611_i2c_rx_callabck+0x84>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	4798      	blx	r3
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20002078 	.word	0x20002078

08005a6c <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005a72:	463b      	mov	r3, r7
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	609a      	str	r2, [r3, #8]
 8005a7c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005a7e:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005a80:	4a21      	ldr	r2, [pc, #132]	; (8005b08 <MX_ADC2_Init+0x9c>)
 8005a82:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005a84:	4b1f      	ldr	r3, [pc, #124]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005a86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a8a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8005a92:	4b1c      	ldr	r3, [pc, #112]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005a98:	4b1a      	ldr	r3, [pc, #104]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005a9e:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005aa6:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005aac:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005aae:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <MX_ADC2_Init+0xa0>)
 8005ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ab2:	4b14      	ldr	r3, [pc, #80]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005ab8:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005acc:	480d      	ldr	r0, [pc, #52]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005ace:	f001 fda1 	bl	8007614 <HAL_ADC_Init>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005ad8:	f000 fbe4 	bl	80062a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005adc:	2309      	movs	r3, #9
 8005ade:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ae8:	463b      	mov	r3, r7
 8005aea:	4619      	mov	r1, r3
 8005aec:	4805      	ldr	r0, [pc, #20]	; (8005b04 <MX_ADC2_Init+0x98>)
 8005aee:	f001 fee5 	bl	80078bc <HAL_ADC_ConfigChannel>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005af8:	f000 fbd4 	bl	80062a4 <Error_Handler>
  }

}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	2000207c 	.word	0x2000207c
 8005b08:	40012100 	.word	0x40012100
 8005b0c:	0f000001 	.word	0x0f000001

08005b10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b18:	f107 0314 	add.w	r3, r7, #20
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	609a      	str	r2, [r3, #8]
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a3c      	ldr	r2, [pc, #240]	; (8005c20 <HAL_ADC_MspInit+0x110>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d172      	bne.n	8005c18 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <HAL_ADC_MspInit+0x114>)
 8005b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3a:	4a3a      	ldr	r2, [pc, #232]	; (8005c24 <HAL_ADC_MspInit+0x114>)
 8005b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b40:	6453      	str	r3, [r2, #68]	; 0x44
 8005b42:	4b38      	ldr	r3, [pc, #224]	; (8005c24 <HAL_ADC_MspInit+0x114>)
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	4b34      	ldr	r3, [pc, #208]	; (8005c24 <HAL_ADC_MspInit+0x114>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	4a33      	ldr	r2, [pc, #204]	; (8005c24 <HAL_ADC_MspInit+0x114>)
 8005b58:	f043 0304 	orr.w	r3, r3, #4
 8005b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b5e:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <HAL_ADC_MspInit+0x114>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	4b2d      	ldr	r3, [pc, #180]	; (8005c24 <HAL_ADC_MspInit+0x114>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	4a2c      	ldr	r2, [pc, #176]	; (8005c24 <HAL_ADC_MspInit+0x114>)
 8005b74:	f043 0302 	orr.w	r3, r3, #2
 8005b78:	6313      	str	r3, [r2, #48]	; 0x30
 8005b7a:	4b2a      	ldr	r3, [pc, #168]	; (8005c24 <HAL_ADC_MspInit+0x114>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 8005b86:	2302      	movs	r3, #2
 8005b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 8005b92:	f107 0314 	add.w	r3, r7, #20
 8005b96:	4619      	mov	r1, r3
 8005b98:	4823      	ldr	r0, [pc, #140]	; (8005c28 <HAL_ADC_MspInit+0x118>)
 8005b9a:	f002 fdeb 	bl	8008774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8005baa:	f107 0314 	add.w	r3, r7, #20
 8005bae:	4619      	mov	r1, r3
 8005bb0:	481e      	ldr	r0, [pc, #120]	; (8005c2c <HAL_ADC_MspInit+0x11c>)
 8005bb2:	f002 fddf 	bl	8008774 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8005bb6:	4b1e      	ldr	r3, [pc, #120]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005bb8:	4a1e      	ldr	r2, [pc, #120]	; (8005c34 <HAL_ADC_MspInit+0x124>)
 8005bba:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bc2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bca:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005bd0:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bd6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005bd8:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bde:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005be0:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005be6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005be8:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bee:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005bf0:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005bf6:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005bfc:	480c      	ldr	r0, [pc, #48]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005bfe:	f002 fa0f 	bl	8008020 <HAL_DMA_Init>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8005c08:	f000 fb4c 	bl	80062a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a08      	ldr	r2, [pc, #32]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
 8005c12:	4a07      	ldr	r2, [pc, #28]	; (8005c30 <HAL_ADC_MspInit+0x120>)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3728      	adds	r7, #40	; 0x28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40012100 	.word	0x40012100
 8005c24:	40023800 	.word	0x40023800
 8005c28:	40020800 	.word	0x40020800
 8005c2c:	40020400 	.word	0x40020400
 8005c30:	200020c4 	.word	0x200020c4
 8005c34:	40026440 	.word	0x40026440

08005c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005c3e:	2300      	movs	r3, #0
 8005c40:	607b      	str	r3, [r7, #4]
 8005c42:	4b3f      	ldr	r3, [pc, #252]	; (8005d40 <MX_DMA_Init+0x108>)
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	4a3e      	ldr	r2, [pc, #248]	; (8005d40 <MX_DMA_Init+0x108>)
 8005c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c4e:	4b3c      	ldr	r3, [pc, #240]	; (8005d40 <MX_DMA_Init+0x108>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c56:	607b      	str	r3, [r7, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	603b      	str	r3, [r7, #0]
 8005c5e:	4b38      	ldr	r3, [pc, #224]	; (8005d40 <MX_DMA_Init+0x108>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	4a37      	ldr	r2, [pc, #220]	; (8005d40 <MX_DMA_Init+0x108>)
 8005c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c68:	6313      	str	r3, [r2, #48]	; 0x30
 8005c6a:	4b35      	ldr	r3, [pc, #212]	; (8005d40 <MX_DMA_Init+0x108>)
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005c76:	2200      	movs	r2, #0
 8005c78:	2100      	movs	r1, #0
 8005c7a:	200b      	movs	r0, #11
 8005c7c:	f002 f999 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005c80:	200b      	movs	r0, #11
 8005c82:	f002 f9b2 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8005c86:	2200      	movs	r2, #0
 8005c88:	2100      	movs	r1, #0
 8005c8a:	200c      	movs	r0, #12
 8005c8c:	f002 f991 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005c90:	200c      	movs	r0, #12
 8005c92:	f002 f9aa 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8005c96:	2200      	movs	r2, #0
 8005c98:	2100      	movs	r1, #0
 8005c9a:	200e      	movs	r0, #14
 8005c9c:	f002 f989 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005ca0:	200e      	movs	r0, #14
 8005ca2:	f002 f9a2 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2100      	movs	r1, #0
 8005caa:	200f      	movs	r0, #15
 8005cac:	f002 f981 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005cb0:	200f      	movs	r0, #15
 8005cb2:	f002 f99a 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	2010      	movs	r0, #16
 8005cbc:	f002 f979 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005cc0:	2010      	movs	r0, #16
 8005cc2:	f002 f992 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2100      	movs	r1, #0
 8005cca:	2011      	movs	r0, #17
 8005ccc:	f002 f971 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005cd0:	2011      	movs	r0, #17
 8005cd2:	f002 f98a 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2100      	movs	r1, #0
 8005cda:	202f      	movs	r0, #47	; 0x2f
 8005cdc:	f002 f969 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8005ce0:	202f      	movs	r0, #47	; 0x2f
 8005ce2:	f002 f982 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2100      	movs	r1, #0
 8005cea:	2038      	movs	r0, #56	; 0x38
 8005cec:	f002 f961 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005cf0:	2038      	movs	r0, #56	; 0x38
 8005cf2:	f002 f97a 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	2039      	movs	r0, #57	; 0x39
 8005cfc:	f002 f959 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005d00:	2039      	movs	r0, #57	; 0x39
 8005d02:	f002 f972 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005d06:	2200      	movs	r2, #0
 8005d08:	2100      	movs	r1, #0
 8005d0a:	203a      	movs	r0, #58	; 0x3a
 8005d0c:	f002 f951 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005d10:	203a      	movs	r0, #58	; 0x3a
 8005d12:	f002 f96a 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005d16:	2200      	movs	r2, #0
 8005d18:	2100      	movs	r1, #0
 8005d1a:	203b      	movs	r0, #59	; 0x3b
 8005d1c:	f002 f949 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005d20:	203b      	movs	r0, #59	; 0x3b
 8005d22:	f002 f962 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8005d26:	2200      	movs	r2, #0
 8005d28:	2100      	movs	r1, #0
 8005d2a:	2045      	movs	r0, #69	; 0x45
 8005d2c:	f002 f941 	bl	8007fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005d30:	2045      	movs	r0, #69	; 0x45
 8005d32:	f002 f95a 	bl	8007fea <HAL_NVIC_EnableIRQ>

}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40023800 	.word	0x40023800

08005d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	; 0x28
 8005d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d4a:	f107 0314 	add.w	r3, r7, #20
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	605a      	str	r2, [r3, #4]
 8005d54:	609a      	str	r2, [r3, #8]
 8005d56:	60da      	str	r2, [r3, #12]
 8005d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	4b44      	ldr	r3, [pc, #272]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	4a43      	ldr	r2, [pc, #268]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005d64:	f043 0304 	orr.w	r3, r3, #4
 8005d68:	6313      	str	r3, [r2, #48]	; 0x30
 8005d6a:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	4b3d      	ldr	r3, [pc, #244]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d84:	6313      	str	r3, [r2, #48]	; 0x30
 8005d86:	4b3a      	ldr	r3, [pc, #232]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	4a35      	ldr	r2, [pc, #212]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	6313      	str	r3, [r2, #48]	; 0x30
 8005da2:	4b33      	ldr	r3, [pc, #204]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dae:	2300      	movs	r3, #0
 8005db0:	607b      	str	r3, [r7, #4]
 8005db2:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	4a2e      	ldr	r2, [pc, #184]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005db8:	f043 0302 	orr.w	r3, r3, #2
 8005dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005dbe:	4b2c      	ldr	r3, [pc, #176]	; (8005e70 <MX_GPIO_Init+0x12c>)
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	607b      	str	r3, [r7, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8005dd0:	4828      	ldr	r0, [pc, #160]	; (8005e74 <MX_GPIO_Init+0x130>)
 8005dd2:	f002 fe69 	bl	8008aa8 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4826      	ldr	r0, [pc, #152]	; (8005e74 <MX_GPIO_Init+0x130>)
 8005ddc:	f002 fe64 	bl	8008aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8005de0:	2200      	movs	r2, #0
 8005de2:	2101      	movs	r1, #1
 8005de4:	4824      	ldr	r0, [pc, #144]	; (8005e78 <MX_GPIO_Init+0x134>)
 8005de6:	f002 fe5f 	bl	8008aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 8005dea:	2200      	movs	r2, #0
 8005dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005df0:	4822      	ldr	r0, [pc, #136]	; (8005e7c <MX_GPIO_Init+0x138>)
 8005df2:	f002 fe59 	bl	8008aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 8005df6:	f24e 231d 	movw	r3, #57885	; 0xe21d
 8005dfa:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e04:	2300      	movs	r3, #0
 8005e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e08:	f107 0314 	add.w	r3, r7, #20
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4819      	ldr	r0, [pc, #100]	; (8005e74 <MX_GPIO_Init+0x130>)
 8005e10:	f002 fcb0 	bl	8008774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 8005e14:	2301      	movs	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e20:	2300      	movs	r3, #0
 8005e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 8005e24:	f107 0314 	add.w	r3, r7, #20
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4813      	ldr	r0, [pc, #76]	; (8005e78 <MX_GPIO_Init+0x134>)
 8005e2c:	f002 fca2 	bl	8008774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 8005e30:	2302      	movs	r3, #2
 8005e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 8005e3c:	f107 0314 	add.w	r3, r7, #20
 8005e40:	4619      	mov	r1, r3
 8005e42:	480d      	ldr	r0, [pc, #52]	; (8005e78 <MX_GPIO_Init+0x134>)
 8005e44:	f002 fc96 	bl	8008774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 8005e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e56:	2300      	movs	r3, #0
 8005e58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 8005e5a:	f107 0314 	add.w	r3, r7, #20
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4806      	ldr	r0, [pc, #24]	; (8005e7c <MX_GPIO_Init+0x138>)
 8005e62:	f002 fc87 	bl	8008774 <HAL_GPIO_Init>

}
 8005e66:	bf00      	nop
 8005e68:	3728      	adds	r7, #40	; 0x28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40023800 	.word	0x40023800
 8005e74:	40020800 	.word	0x40020800
 8005e78:	40020000 	.word	0x40020000
 8005e7c:	40020400 	.word	0x40020400

08005e80 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005e84:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <MX_I2C1_Init+0x50>)
 8005e86:	4a13      	ldr	r2, [pc, #76]	; (8005ed4 <MX_I2C1_Init+0x54>)
 8005e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005e8a:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <MX_I2C1_Init+0x50>)
 8005e8c:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <MX_I2C1_Init+0x58>)
 8005e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <MX_I2C1_Init+0x50>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005e96:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <MX_I2C1_Init+0x50>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <MX_I2C1_Init+0x50>)
 8005e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ea2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <MX_I2C1_Init+0x50>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005eaa:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <MX_I2C1_Init+0x50>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <MX_I2C1_Init+0x50>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005eb6:	4b06      	ldr	r3, [pc, #24]	; (8005ed0 <MX_I2C1_Init+0x50>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ebc:	4804      	ldr	r0, [pc, #16]	; (8005ed0 <MX_I2C1_Init+0x50>)
 8005ebe:	f002 fe0d 	bl	8008adc <HAL_I2C_Init>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005ec8:	f000 f9ec 	bl	80062a4 <Error_Handler>
  }

}
 8005ecc:	bf00      	nop
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20002184 	.word	0x20002184
 8005ed4:	40005400 	.word	0x40005400
 8005ed8:	00061a80 	.word	0x00061a80

08005edc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	609a      	str	r2, [r3, #8]
 8005ef0:	60da      	str	r2, [r3, #12]
 8005ef2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a4f      	ldr	r2, [pc, #316]	; (8006038 <HAL_I2C_MspInit+0x15c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	f040 8098 	bne.w	8006030 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f00:	2300      	movs	r3, #0
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	4b4d      	ldr	r3, [pc, #308]	; (800603c <HAL_I2C_MspInit+0x160>)
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	4a4c      	ldr	r2, [pc, #304]	; (800603c <HAL_I2C_MspInit+0x160>)
 8005f0a:	f043 0302 	orr.w	r3, r3, #2
 8005f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f10:	4b4a      	ldr	r3, [pc, #296]	; (800603c <HAL_I2C_MspInit+0x160>)
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f1c:	23c0      	movs	r3, #192	; 0xc0
 8005f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f20:	2312      	movs	r3, #18
 8005f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f24:	2301      	movs	r3, #1
 8005f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f30:	f107 0314 	add.w	r3, r7, #20
 8005f34:	4619      	mov	r1, r3
 8005f36:	4842      	ldr	r0, [pc, #264]	; (8006040 <HAL_I2C_MspInit+0x164>)
 8005f38:	f002 fc1c 	bl	8008774 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	4b3e      	ldr	r3, [pc, #248]	; (800603c <HAL_I2C_MspInit+0x160>)
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	4a3d      	ldr	r2, [pc, #244]	; (800603c <HAL_I2C_MspInit+0x160>)
 8005f46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f4c:	4b3b      	ldr	r3, [pc, #236]	; (800603c <HAL_I2C_MspInit+0x160>)
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005f58:	4b3a      	ldr	r3, [pc, #232]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f5a:	4a3b      	ldr	r2, [pc, #236]	; (8006048 <HAL_I2C_MspInit+0x16c>)
 8005f5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005f5e:	4b39      	ldr	r3, [pc, #228]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f64:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f66:	4b37      	ldr	r3, [pc, #220]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f6c:	4b35      	ldr	r3, [pc, #212]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f72:	4b34      	ldr	r3, [pc, #208]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f78:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f7a:	4b32      	ldr	r3, [pc, #200]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f80:	4b30      	ldr	r3, [pc, #192]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005f86:	4b2f      	ldr	r3, [pc, #188]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f8c:	4b2d      	ldr	r3, [pc, #180]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f92:	4b2c      	ldr	r3, [pc, #176]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005f98:	482a      	ldr	r0, [pc, #168]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005f9a:	f002 f841 	bl	8008020 <HAL_DMA_Init>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8005fa4:	f000 f97e 	bl	80062a4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a26      	ldr	r2, [pc, #152]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
 8005fae:	4a25      	ldr	r2, [pc, #148]	; (8006044 <HAL_I2C_MspInit+0x168>)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8005fb4:	4b25      	ldr	r3, [pc, #148]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005fb6:	4a26      	ldr	r2, [pc, #152]	; (8006050 <HAL_I2C_MspInit+0x174>)
 8005fb8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8005fba:	4b24      	ldr	r3, [pc, #144]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fc0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fc2:	4b22      	ldr	r3, [pc, #136]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005fc4:	2240      	movs	r2, #64	; 0x40
 8005fc6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fc8:	4b20      	ldr	r3, [pc, #128]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005fce:	4b1f      	ldr	r3, [pc, #124]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fd4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fdc:	4b1b      	ldr	r3, [pc, #108]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005fe2:	4b1a      	ldr	r3, [pc, #104]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005fe8:	4b18      	ldr	r3, [pc, #96]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fee:	4b17      	ldr	r3, [pc, #92]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005ff4:	4815      	ldr	r0, [pc, #84]	; (800604c <HAL_I2C_MspInit+0x170>)
 8005ff6:	f002 f813 	bl	8008020 <HAL_DMA_Init>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8006000:	f000 f950 	bl	80062a4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a11      	ldr	r2, [pc, #68]	; (800604c <HAL_I2C_MspInit+0x170>)
 8006008:	635a      	str	r2, [r3, #52]	; 0x34
 800600a:	4a10      	ldr	r2, [pc, #64]	; (800604c <HAL_I2C_MspInit+0x170>)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006010:	2200      	movs	r2, #0
 8006012:	2100      	movs	r1, #0
 8006014:	201f      	movs	r0, #31
 8006016:	f001 ffcc 	bl	8007fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800601a:	201f      	movs	r0, #31
 800601c:	f001 ffe5 	bl	8007fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006020:	2200      	movs	r2, #0
 8006022:	2100      	movs	r1, #0
 8006024:	2020      	movs	r0, #32
 8006026:	f001 ffc4 	bl	8007fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800602a:	2020      	movs	r0, #32
 800602c:	f001 ffdd 	bl	8007fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006030:	bf00      	nop
 8006032:	3728      	adds	r7, #40	; 0x28
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40005400 	.word	0x40005400
 800603c:	40023800 	.word	0x40023800
 8006040:	40020400 	.word	0x40020400
 8006044:	200021d8 	.word	0x200021d8
 8006048:	40026010 	.word	0x40026010
 800604c:	20002124 	.word	0x20002124
 8006050:	400260b8 	.word	0x400260b8

08006054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006058:	f001 fa48 	bl	80074ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800605c:	f000 f8b8 	bl	80061d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);	//Let the time to the components to start
 8006060:	20c8      	movs	r0, #200	; 0xc8
 8006062:	f001 fab5 	bl	80075d0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006066:	f7ff fe6d 	bl	8005d44 <MX_GPIO_Init>
  MX_DMA_Init();
 800606a:	f7ff fde5 	bl	8005c38 <MX_DMA_Init>
  MX_I2C1_Init();
 800606e:	f7ff ff07 	bl	8005e80 <MX_I2C1_Init>
  MX_SPI1_Init();
 8006072:	f000 f91f 	bl	80062b4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006076:	f000 f953 	bl	8006320 <MX_SPI2_Init>
  MX_TIM1_Init();
 800607a:	f000 fc57 	bl	800692c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800607e:	f000 fddd 	bl	8006c3c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006082:	f000 fe05 	bl	8006c90 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8006086:	f000 fe2d 	bl	8006ce4 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 800608a:	f7ff fcef 	bl	8005a6c <MX_ADC2_Init>
  MX_TIM2_Init();
 800608e:	f000 fd13 	bl	8006ab8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);	//Let the time for the components to start
 8006092:	20c8      	movs	r0, #200	; 0xc8
 8006094:	f001 fa9c 	bl	80075d0 <HAL_Delay>



  //Init du GYRO et de l ACC en utilisant un MPU6000
  MPU_init(&sys.sensors.mpu, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 8006098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800609c:	4a35      	ldr	r2, [pc, #212]	; (8006174 <main+0x120>)
 800609e:	4936      	ldr	r1, [pc, #216]	; (8006178 <main+0x124>)
 80060a0:	4836      	ldr	r0, [pc, #216]	; (800617c <main+0x128>)
 80060a2:	f7fe ff4b 	bl	8004f3c <MPU_init>
  HAL_Delay(200);	//Let the time for the components to start
 80060a6:	20c8      	movs	r0, #200	; 0xc8
 80060a8:	f001 fa92 	bl	80075d0 <HAL_Delay>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 80060ac:	4933      	ldr	r1, [pc, #204]	; (800617c <main+0x128>)
 80060ae:	4834      	ldr	r0, [pc, #208]	; (8006180 <main+0x12c>)
 80060b0:	f7fe fcba 	bl	8004a28 <GYRO_init>
  HAL_Delay(200);	//Let the time for the components to start
 80060b4:	20c8      	movs	r0, #200	; 0xc8
 80060b6:	f001 fa8b 	bl	80075d0 <HAL_Delay>
  ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 80060ba:	4930      	ldr	r1, [pc, #192]	; (800617c <main+0x128>)
 80060bc:	4831      	ldr	r0, [pc, #196]	; (8006184 <main+0x130>)
 80060be:	f7fe fb4f 	bl	8004760 <ACC_init>

  //Init du baromètre
  BARO_init(&sys.sensors.baro, &sys.sensors.ms5611, &hi2c1);
 80060c2:	4a31      	ldr	r2, [pc, #196]	; (8006188 <main+0x134>)
 80060c4:	4931      	ldr	r1, [pc, #196]	; (800618c <main+0x138>)
 80060c6:	4832      	ldr	r0, [pc, #200]	; (8006190 <main+0x13c>)
 80060c8:	f7fe fc00 	bl	80048cc <BARO_init>

  IHM_Init(&sys.ihm);
 80060cc:	4831      	ldr	r0, [pc, #196]	; (8006194 <main+0x140>)
 80060ce:	f7fc f9df 	bl	8002490 <IHM_Init>
  IHM_Led_Init(LED_HIGH_LVL, 30, PIN_LED_RGB_1_Pin, LED_OUTPUT_NEGATIVE);
 80060d2:	2301      	movs	r3, #1
 80060d4:	2201      	movs	r2, #1
 80060d6:	211e      	movs	r1, #30
 80060d8:	2000      	movs	r0, #0
 80060da:	f7fc f9e9 	bl	80024b0 <IHM_Led_Init>
  IHM_Led_Init(LED_SENSORS, 30, PIN_LED_RGB_2_Pin, LED_OUTPUT_NEGATIVE);
 80060de:	2301      	movs	r3, #1
 80060e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e4:	211e      	movs	r1, #30
 80060e6:	2001      	movs	r0, #1
 80060e8:	f7fc f9e2 	bl	80024b0 <IHM_Led_Init>

  IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80060ec:	2300      	movs	r3, #0
 80060ee:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80060f2:	2100      	movs	r1, #0
 80060f4:	2000      	movs	r0, #0
 80060f6:	f7fc fa49 	bl	800258c <IHM_Set_Sequences>
  IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80060fa:	2300      	movs	r3, #0
 80060fc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006100:	2100      	movs	r1, #0
 8006102:	2001      	movs	r0, #1
 8006104:	f7fc fa42 	bl	800258c <IHM_Set_Sequences>

  BATTERIE_Init(&sys.sensors.batterie, &hadc2);
 8006108:	4923      	ldr	r1, [pc, #140]	; (8006198 <main+0x144>)
 800610a:	4824      	ldr	r0, [pc, #144]	; (800619c <main+0x148>)
 800610c:	f7fe fc79 	bl	8004a02 <BATTERIE_Init>

  CONTROLLER_Init(&sys.radio.controller, &sys.radio.ibus);
 8006110:	4923      	ldr	r1, [pc, #140]	; (80061a0 <main+0x14c>)
 8006112:	4824      	ldr	r0, [pc, #144]	; (80061a4 <main+0x150>)
 8006114:	f7fd fe74 	bl	8003e00 <CONTROLLER_Init>
  IBUS_init(&sys.radio.ibus, &huart3, CONTROLLER_Rx_Data_Rdy);
 8006118:	4a23      	ldr	r2, [pc, #140]	; (80061a8 <main+0x154>)
 800611a:	4924      	ldr	r1, [pc, #144]	; (80061ac <main+0x158>)
 800611c:	4820      	ldr	r0, [pc, #128]	; (80061a0 <main+0x14c>)
 800611e:	f008 fff9 	bl	800f114 <IBUS_init>

  ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_FREQUENCY);
 8006122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006126:	4a17      	ldr	r2, [pc, #92]	; (8006184 <main+0x130>)
 8006128:	4915      	ldr	r1, [pc, #84]	; (8006180 <main+0x12c>)
 800612a:	4821      	ldr	r0, [pc, #132]	; (80061b0 <main+0x15c>)
 800612c:	f7fb fd2e 	bl	8001b8c <ORIENTATION_Init>
  REGULATION_ORIENTATION_Init(&sys.regulation.orientation, &sys.orientation, sys.propulsion.consigne);
 8006130:	4a20      	ldr	r2, [pc, #128]	; (80061b4 <main+0x160>)
 8006132:	491f      	ldr	r1, [pc, #124]	; (80061b0 <main+0x15c>)
 8006134:	4820      	ldr	r0, [pc, #128]	; (80061b8 <main+0x164>)
 8006136:	f7fe f92d 	bl	8004394 <REGULATION_ORIENTATION_Init>
  REGULATION_POSITION_Init(&sys.regulation.position, &sys.regulation.orientation, sys.propulsion.consigne);
 800613a:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <main+0x160>)
 800613c:	491e      	ldr	r1, [pc, #120]	; (80061b8 <main+0x164>)
 800613e:	481f      	ldr	r0, [pc, #124]	; (80061bc <main+0x168>)
 8006140:	f7fe fabc 	bl	80046bc <REGULATION_POSITION_Init>
  PROPULSION_Init(&sys.propulsion, &htim1);
 8006144:	491e      	ldr	r1, [pc, #120]	; (80061c0 <main+0x16c>)
 8006146:	481f      	ldr	r0, [pc, #124]	; (80061c4 <main+0x170>)
 8006148:	f7fd fda2 	bl	8003c90 <PROPULSION_Init>

  TELEMETRY_Init(&sys.radio.telemetry, &huart2);
 800614c:	491e      	ldr	r1, [pc, #120]	; (80061c8 <main+0x174>)
 800614e:	481f      	ldr	r0, [pc, #124]	; (80061cc <main+0x178>)
 8006150:	f000 fffc 	bl	800714c <TELEMETRY_Init>

  FLIGHT_MODE_Init(&sys);
 8006154:	480f      	ldr	r0, [pc, #60]	; (8006194 <main+0x140>)
 8006156:	f7fb ffdf 	bl	8002118 <FLIGHT_MODE_Init>

  SCHEDULER_init(&sys);
 800615a:	480e      	ldr	r0, [pc, #56]	; (8006194 <main+0x140>)
 800615c:	f7fd f8b6 	bl	80032cc <SCHEDULER_init>
  EVENT_init(&sys);
 8006160:	480c      	ldr	r0, [pc, #48]	; (8006194 <main+0x140>)
 8006162:	f7fc fd91 	bl	8002c88 <EVENT_init>

  DATA_LOGGER_Init(&sys);
 8006166:	480b      	ldr	r0, [pc, #44]	; (8006194 <main+0x140>)
 8006168:	f7fa feee 	bl	8000f48 <DATA_LOGGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 800616c:	f7fd f8c0 	bl	80032f0 <SCHEDULER_run>
 8006170:	e7fc      	b.n	800616c <main+0x118>
 8006172:	bf00      	nop
 8006174:	40020400 	.word	0x40020400
 8006178:	20002d84 	.word	0x20002d84
 800617c:	20002390 	.word	0x20002390
 8006180:	20002268 	.word	0x20002268
 8006184:	200022dc 	.word	0x200022dc
 8006188:	20002184 	.word	0x20002184
 800618c:	20002410 	.word	0x20002410
 8006190:	20002388 	.word	0x20002388
 8006194:	20002238 	.word	0x20002238
 8006198:	2000207c 	.word	0x2000207c
 800619c:	20002344 	.word	0x20002344
 80061a0:	20002480 	.word	0x20002480
 80061a4:	200024e0 	.word	0x200024e0
 80061a8:	08004387 	.word	0x08004387
 80061ac:	20003154 	.word	0x20003154
 80061b0:	2000244c 	.word	0x2000244c
 80061b4:	20002b74 	.word	0x20002b74
 80061b8:	20002b84 	.word	0x20002b84
 80061bc:	20002d70 	.word	0x20002d70
 80061c0:	20002fb4 	.word	0x20002fb4
 80061c4:	20002b64 	.word	0x20002b64
 80061c8:	20003294 	.word	0x20003294
 80061cc:	20002538 	.word	0x20002538

080061d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b094      	sub	sp, #80	; 0x50
 80061d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061d6:	f107 0320 	add.w	r3, r7, #32
 80061da:	2230      	movs	r2, #48	; 0x30
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f009 fb36 	bl	800f850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061e4:	f107 030c 	add.w	r3, r7, #12
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	605a      	str	r2, [r3, #4]
 80061ee:	609a      	str	r2, [r3, #8]
 80061f0:	60da      	str	r2, [r3, #12]
 80061f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80061f4:	2300      	movs	r3, #0
 80061f6:	60bb      	str	r3, [r7, #8]
 80061f8:	4b28      	ldr	r3, [pc, #160]	; (800629c <SystemClock_Config+0xcc>)
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	4a27      	ldr	r2, [pc, #156]	; (800629c <SystemClock_Config+0xcc>)
 80061fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006202:	6413      	str	r3, [r2, #64]	; 0x40
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <SystemClock_Config+0xcc>)
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006210:	2300      	movs	r3, #0
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	4b22      	ldr	r3, [pc, #136]	; (80062a0 <SystemClock_Config+0xd0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a21      	ldr	r2, [pc, #132]	; (80062a0 <SystemClock_Config+0xd0>)
 800621a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4b1f      	ldr	r3, [pc, #124]	; (80062a0 <SystemClock_Config+0xd0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006228:	607b      	str	r3, [r7, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800622c:	2302      	movs	r3, #2
 800622e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006230:	2301      	movs	r3, #1
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006234:	2310      	movs	r3, #16
 8006236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006238:	2302      	movs	r3, #2
 800623a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800623c:	2300      	movs	r3, #0
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006240:	2308      	movs	r3, #8
 8006242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006244:	23a8      	movs	r3, #168	; 0xa8
 8006246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006248:	2302      	movs	r3, #2
 800624a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800624c:	2304      	movs	r3, #4
 800624e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006250:	f107 0320 	add.w	r3, r7, #32
 8006254:	4618      	mov	r0, r3
 8006256:	f005 fb97 	bl	800b988 <HAL_RCC_OscConfig>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006260:	f000 f820 	bl	80062a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006264:	230f      	movs	r3, #15
 8006266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006268:	2302      	movs	r3, #2
 800626a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006270:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800627a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800627c:	f107 030c 	add.w	r3, r7, #12
 8006280:	2105      	movs	r1, #5
 8006282:	4618      	mov	r0, r3
 8006284:	f005 fdf0 	bl	800be68 <HAL_RCC_ClockConfig>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800628e:	f000 f809 	bl	80062a4 <Error_Handler>
  }
}
 8006292:	bf00      	nop
 8006294:	3750      	adds	r7, #80	; 0x50
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023800 	.word	0x40023800
 80062a0:	40007000 	.word	0x40007000

080062a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80062a8:	bf00      	nop
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80062b8:	4b17      	ldr	r3, [pc, #92]	; (8006318 <MX_SPI1_Init+0x64>)
 80062ba:	4a18      	ldr	r2, [pc, #96]	; (800631c <MX_SPI1_Init+0x68>)
 80062bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80062be:	4b16      	ldr	r3, [pc, #88]	; (8006318 <MX_SPI1_Init+0x64>)
 80062c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80062c6:	4b14      	ldr	r3, [pc, #80]	; (8006318 <MX_SPI1_Init+0x64>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <MX_SPI1_Init+0x64>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80062d2:	4b11      	ldr	r3, [pc, #68]	; (8006318 <MX_SPI1_Init+0x64>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <MX_SPI1_Init+0x64>)
 80062da:	2200      	movs	r2, #0
 80062dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80062de:	4b0e      	ldr	r3, [pc, #56]	; (8006318 <MX_SPI1_Init+0x64>)
 80062e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <MX_SPI1_Init+0x64>)
 80062e8:	2238      	movs	r2, #56	; 0x38
 80062ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <MX_SPI1_Init+0x64>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80062f2:	4b09      	ldr	r3, [pc, #36]	; (8006318 <MX_SPI1_Init+0x64>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f8:	4b07      	ldr	r3, [pc, #28]	; (8006318 <MX_SPI1_Init+0x64>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <MX_SPI1_Init+0x64>)
 8006300:	220a      	movs	r2, #10
 8006302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006304:	4804      	ldr	r0, [pc, #16]	; (8006318 <MX_SPI1_Init+0x64>)
 8006306:	f005 ff7b 	bl	800c200 <HAL_SPI_Init>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006310:	f7ff ffc8 	bl	80062a4 <Error_Handler>
  }

}
 8006314:	bf00      	nop
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20002e3c 	.word	0x20002e3c
 800631c:	40013000 	.word	0x40013000

08006320 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8006324:	4b17      	ldr	r3, [pc, #92]	; (8006384 <MX_SPI2_Init+0x64>)
 8006326:	4a18      	ldr	r2, [pc, #96]	; (8006388 <MX_SPI2_Init+0x68>)
 8006328:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800632a:	4b16      	ldr	r3, [pc, #88]	; (8006384 <MX_SPI2_Init+0x64>)
 800632c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006330:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <MX_SPI2_Init+0x64>)
 8006334:	2200      	movs	r2, #0
 8006336:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006338:	4b12      	ldr	r3, [pc, #72]	; (8006384 <MX_SPI2_Init+0x64>)
 800633a:	2200      	movs	r2, #0
 800633c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <MX_SPI2_Init+0x64>)
 8006340:	2200      	movs	r2, #0
 8006342:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006344:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <MX_SPI2_Init+0x64>)
 8006346:	2200      	movs	r2, #0
 8006348:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800634a:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <MX_SPI2_Init+0x64>)
 800634c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006350:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006352:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <MX_SPI2_Init+0x64>)
 8006354:	2228      	movs	r2, #40	; 0x28
 8006356:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006358:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <MX_SPI2_Init+0x64>)
 800635a:	2200      	movs	r2, #0
 800635c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800635e:	4b09      	ldr	r3, [pc, #36]	; (8006384 <MX_SPI2_Init+0x64>)
 8006360:	2200      	movs	r2, #0
 8006362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <MX_SPI2_Init+0x64>)
 8006366:	2200      	movs	r2, #0
 8006368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800636a:	4b06      	ldr	r3, [pc, #24]	; (8006384 <MX_SPI2_Init+0x64>)
 800636c:	220a      	movs	r2, #10
 800636e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006370:	4804      	ldr	r0, [pc, #16]	; (8006384 <MX_SPI2_Init+0x64>)
 8006372:	f005 ff45 	bl	800c200 <HAL_SPI_Init>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800637c:	f7ff ff92 	bl	80062a4 <Error_Handler>
  }

}
 8006380:	bf00      	nop
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20002d84 	.word	0x20002d84
 8006388:	40003800 	.word	0x40003800

0800638c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08c      	sub	sp, #48	; 0x30
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006394:	f107 031c 	add.w	r3, r7, #28
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	605a      	str	r2, [r3, #4]
 800639e:	609a      	str	r2, [r3, #8]
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a8e      	ldr	r2, [pc, #568]	; (80065e4 <HAL_SPI_MspInit+0x258>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	f040 8089 	bne.w	80064c2 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80063b0:	2300      	movs	r3, #0
 80063b2:	61bb      	str	r3, [r7, #24]
 80063b4:	4b8c      	ldr	r3, [pc, #560]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80063b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b8:	4a8b      	ldr	r2, [pc, #556]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80063ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063be:	6453      	str	r3, [r2, #68]	; 0x44
 80063c0:	4b89      	ldr	r3, [pc, #548]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80063c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063cc:	2300      	movs	r3, #0
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	4b85      	ldr	r3, [pc, #532]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	4a84      	ldr	r2, [pc, #528]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	6313      	str	r3, [r2, #48]	; 0x30
 80063dc:	4b82      	ldr	r3, [pc, #520]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80063e8:	23e0      	movs	r3, #224	; 0xe0
 80063ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ec:	2302      	movs	r3, #2
 80063ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063f4:	2303      	movs	r3, #3
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80063f8:	2305      	movs	r3, #5
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063fc:	f107 031c 	add.w	r3, r7, #28
 8006400:	4619      	mov	r1, r3
 8006402:	487a      	ldr	r0, [pc, #488]	; (80065ec <HAL_SPI_MspInit+0x260>)
 8006404:	f002 f9b6 	bl	8008774 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006408:	4b79      	ldr	r3, [pc, #484]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 800640a:	4a7a      	ldr	r2, [pc, #488]	; (80065f4 <HAL_SPI_MspInit+0x268>)
 800640c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800640e:	4b78      	ldr	r3, [pc, #480]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 8006410:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006414:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006416:	4b76      	ldr	r3, [pc, #472]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 8006418:	2200      	movs	r2, #0
 800641a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800641c:	4b74      	ldr	r3, [pc, #464]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 800641e:	2200      	movs	r2, #0
 8006420:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006422:	4b73      	ldr	r3, [pc, #460]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 8006424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006428:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800642a:	4b71      	ldr	r3, [pc, #452]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 800642c:	2200      	movs	r2, #0
 800642e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006430:	4b6f      	ldr	r3, [pc, #444]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 8006432:	2200      	movs	r2, #0
 8006434:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006436:	4b6e      	ldr	r3, [pc, #440]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 8006438:	2200      	movs	r2, #0
 800643a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800643c:	4b6c      	ldr	r3, [pc, #432]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 800643e:	2200      	movs	r2, #0
 8006440:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006442:	4b6b      	ldr	r3, [pc, #428]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 8006444:	2200      	movs	r2, #0
 8006446:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006448:	4869      	ldr	r0, [pc, #420]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 800644a:	f001 fde9 	bl	8008020 <HAL_DMA_Init>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8006454:	f7ff ff26 	bl	80062a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a65      	ldr	r2, [pc, #404]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 800645c:	64da      	str	r2, [r3, #76]	; 0x4c
 800645e:	4a64      	ldr	r2, [pc, #400]	; (80065f0 <HAL_SPI_MspInit+0x264>)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8006464:	4b64      	ldr	r3, [pc, #400]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 8006466:	4a65      	ldr	r2, [pc, #404]	; (80065fc <HAL_SPI_MspInit+0x270>)
 8006468:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800646a:	4b63      	ldr	r3, [pc, #396]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 800646c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006470:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006472:	4b61      	ldr	r3, [pc, #388]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 8006474:	2240      	movs	r2, #64	; 0x40
 8006476:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006478:	4b5f      	ldr	r3, [pc, #380]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 800647a:	2200      	movs	r2, #0
 800647c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800647e:	4b5e      	ldr	r3, [pc, #376]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 8006480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006484:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006486:	4b5c      	ldr	r3, [pc, #368]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 8006488:	2200      	movs	r2, #0
 800648a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800648c:	4b5a      	ldr	r3, [pc, #360]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 800648e:	2200      	movs	r2, #0
 8006490:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006492:	4b59      	ldr	r3, [pc, #356]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 8006494:	2200      	movs	r2, #0
 8006496:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006498:	4b57      	ldr	r3, [pc, #348]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 800649a:	2200      	movs	r2, #0
 800649c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800649e:	4b56      	ldr	r3, [pc, #344]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80064a4:	4854      	ldr	r0, [pc, #336]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 80064a6:	f001 fdbb 	bl	8008020 <HAL_DMA_Init>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80064b0:	f7ff fef8 	bl	80062a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a50      	ldr	r2, [pc, #320]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 80064b8:	649a      	str	r2, [r3, #72]	; 0x48
 80064ba:	4a4f      	ldr	r2, [pc, #316]	; (80065f8 <HAL_SPI_MspInit+0x26c>)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80064c0:	e08c      	b.n	80065dc <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a4e      	ldr	r2, [pc, #312]	; (8006600 <HAL_SPI_MspInit+0x274>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	f040 8087 	bne.w	80065dc <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	4b45      	ldr	r3, [pc, #276]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	4a44      	ldr	r2, [pc, #272]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80064d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064dc:	6413      	str	r3, [r2, #64]	; 0x40
 80064de:	4b42      	ldr	r3, [pc, #264]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	4b3e      	ldr	r3, [pc, #248]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	4a3d      	ldr	r2, [pc, #244]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80064f4:	f043 0302 	orr.w	r3, r3, #2
 80064f8:	6313      	str	r3, [r2, #48]	; 0x30
 80064fa:	4b3b      	ldr	r3, [pc, #236]	; (80065e8 <HAL_SPI_MspInit+0x25c>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006506:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800650a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650c:	2302      	movs	r3, #2
 800650e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006510:	2300      	movs	r3, #0
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006514:	2303      	movs	r3, #3
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006518:	2305      	movs	r3, #5
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800651c:	f107 031c 	add.w	r3, r7, #28
 8006520:	4619      	mov	r1, r3
 8006522:	4838      	ldr	r0, [pc, #224]	; (8006604 <HAL_SPI_MspInit+0x278>)
 8006524:	f002 f926 	bl	8008774 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8006528:	4b37      	ldr	r3, [pc, #220]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 800652a:	4a38      	ldr	r2, [pc, #224]	; (800660c <HAL_SPI_MspInit+0x280>)
 800652c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800652e:	4b36      	ldr	r3, [pc, #216]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 8006530:	2200      	movs	r2, #0
 8006532:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006534:	4b34      	ldr	r3, [pc, #208]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 8006536:	2200      	movs	r2, #0
 8006538:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800653a:	4b33      	ldr	r3, [pc, #204]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 800653c:	2200      	movs	r2, #0
 800653e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006540:	4b31      	ldr	r3, [pc, #196]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 8006542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006546:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006548:	4b2f      	ldr	r3, [pc, #188]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 800654a:	2200      	movs	r2, #0
 800654c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800654e:	4b2e      	ldr	r3, [pc, #184]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 8006550:	2200      	movs	r2, #0
 8006552:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8006554:	4b2c      	ldr	r3, [pc, #176]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 8006556:	2200      	movs	r2, #0
 8006558:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800655a:	4b2b      	ldr	r3, [pc, #172]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 800655c:	2200      	movs	r2, #0
 800655e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006560:	4b29      	ldr	r3, [pc, #164]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 8006562:	2200      	movs	r2, #0
 8006564:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006566:	4828      	ldr	r0, [pc, #160]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 8006568:	f001 fd5a 	bl	8008020 <HAL_DMA_Init>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 8006572:	f7ff fe97 	bl	80062a4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a23      	ldr	r2, [pc, #140]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 800657a:	64da      	str	r2, [r3, #76]	; 0x4c
 800657c:	4a22      	ldr	r2, [pc, #136]	; (8006608 <HAL_SPI_MspInit+0x27c>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006582:	4b23      	ldr	r3, [pc, #140]	; (8006610 <HAL_SPI_MspInit+0x284>)
 8006584:	4a23      	ldr	r2, [pc, #140]	; (8006614 <HAL_SPI_MspInit+0x288>)
 8006586:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006588:	4b21      	ldr	r3, [pc, #132]	; (8006610 <HAL_SPI_MspInit+0x284>)
 800658a:	2200      	movs	r2, #0
 800658c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800658e:	4b20      	ldr	r3, [pc, #128]	; (8006610 <HAL_SPI_MspInit+0x284>)
 8006590:	2240      	movs	r2, #64	; 0x40
 8006592:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006594:	4b1e      	ldr	r3, [pc, #120]	; (8006610 <HAL_SPI_MspInit+0x284>)
 8006596:	2200      	movs	r2, #0
 8006598:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800659a:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <HAL_SPI_MspInit+0x284>)
 800659c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065a0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065a2:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <HAL_SPI_MspInit+0x284>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065a8:	4b19      	ldr	r3, [pc, #100]	; (8006610 <HAL_SPI_MspInit+0x284>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80065ae:	4b18      	ldr	r3, [pc, #96]	; (8006610 <HAL_SPI_MspInit+0x284>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80065b4:	4b16      	ldr	r3, [pc, #88]	; (8006610 <HAL_SPI_MspInit+0x284>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065ba:	4b15      	ldr	r3, [pc, #84]	; (8006610 <HAL_SPI_MspInit+0x284>)
 80065bc:	2200      	movs	r2, #0
 80065be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80065c0:	4813      	ldr	r0, [pc, #76]	; (8006610 <HAL_SPI_MspInit+0x284>)
 80065c2:	f001 fd2d 	bl	8008020 <HAL_DMA_Init>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 80065cc:	f7ff fe6a 	bl	80062a4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a0f      	ldr	r2, [pc, #60]	; (8006610 <HAL_SPI_MspInit+0x284>)
 80065d4:	649a      	str	r2, [r3, #72]	; 0x48
 80065d6:	4a0e      	ldr	r2, [pc, #56]	; (8006610 <HAL_SPI_MspInit+0x284>)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80065dc:	bf00      	nop
 80065de:	3730      	adds	r7, #48	; 0x30
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40013000 	.word	0x40013000
 80065e8:	40023800 	.word	0x40023800
 80065ec:	40020000 	.word	0x40020000
 80065f0:	20002e94 	.word	0x20002e94
 80065f4:	40026410 	.word	0x40026410
 80065f8:	20002f54 	.word	0x20002f54
 80065fc:	40026458 	.word	0x40026458
 8006600:	40003800 	.word	0x40003800
 8006604:	40020400 	.word	0x40020400
 8006608:	20002ddc 	.word	0x20002ddc
 800660c:	40026058 	.word	0x40026058
 8006610:	20002ef4 	.word	0x20002ef4
 8006614:	40026070 	.word	0x40026070

08006618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800661e:	2300      	movs	r3, #0
 8006620:	607b      	str	r3, [r7, #4]
 8006622:	4b10      	ldr	r3, [pc, #64]	; (8006664 <HAL_MspInit+0x4c>)
 8006624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006626:	4a0f      	ldr	r2, [pc, #60]	; (8006664 <HAL_MspInit+0x4c>)
 8006628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800662c:	6453      	str	r3, [r2, #68]	; 0x44
 800662e:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <HAL_MspInit+0x4c>)
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006636:	607b      	str	r3, [r7, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800663a:	2300      	movs	r3, #0
 800663c:	603b      	str	r3, [r7, #0]
 800663e:	4b09      	ldr	r3, [pc, #36]	; (8006664 <HAL_MspInit+0x4c>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	4a08      	ldr	r2, [pc, #32]	; (8006664 <HAL_MspInit+0x4c>)
 8006644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006648:	6413      	str	r3, [r2, #64]	; 0x40
 800664a:	4b06      	ldr	r3, [pc, #24]	; (8006664 <HAL_MspInit+0x4c>)
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40023800 	.word	0x40023800

08006668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800666c:	bf00      	nop
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006676:	b480      	push	{r7}
 8006678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800667a:	e7fe      	b.n	800667a <HardFault_Handler+0x4>

0800667c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006680:	e7fe      	b.n	8006680 <MemManage_Handler+0x4>

08006682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006682:	b480      	push	{r7}
 8006684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006686:	e7fe      	b.n	8006686 <BusFault_Handler+0x4>

08006688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800668c:	e7fe      	b.n	800668c <UsageFault_Handler+0x4>

0800668e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800668e:	b480      	push	{r7}
 8006690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006692:	bf00      	nop
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066a0:	bf00      	nop
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066aa:	b480      	push	{r7}
 80066ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066ae:	bf00      	nop
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80066bc:	f000 ff68 	bl	8007590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80066c0:	bf00      	nop
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80066c8:	4802      	ldr	r0, [pc, #8]	; (80066d4 <DMA1_Stream0_IRQHandler+0x10>)
 80066ca:	f001 fdd1 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80066ce:	bf00      	nop
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	200021d8 	.word	0x200021d8

080066d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80066dc:	4802      	ldr	r0, [pc, #8]	; (80066e8 <DMA1_Stream1_IRQHandler+0x10>)
 80066de:	f001 fdc7 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80066e2:	bf00      	nop
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	200030f4 	.word	0x200030f4

080066ec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80066f0:	4802      	ldr	r0, [pc, #8]	; (80066fc <DMA1_Stream3_IRQHandler+0x10>)
 80066f2:	f001 fdbd 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80066f6:	bf00      	nop
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20002ddc 	.word	0x20002ddc

08006700 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006704:	4802      	ldr	r0, [pc, #8]	; (8006710 <DMA1_Stream4_IRQHandler+0x10>)
 8006706:	f001 fdb3 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800670a:	bf00      	nop
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20002ef4 	.word	0x20002ef4

08006714 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006718:	4802      	ldr	r0, [pc, #8]	; (8006724 <DMA1_Stream5_IRQHandler+0x10>)
 800671a:	f001 fda9 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800671e:	bf00      	nop
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20003034 	.word	0x20003034

08006728 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800672c:	4802      	ldr	r0, [pc, #8]	; (8006738 <DMA1_Stream6_IRQHandler+0x10>)
 800672e:	f001 fd9f 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	200031f4 	.word	0x200031f4

0800673c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006740:	4802      	ldr	r0, [pc, #8]	; (800674c <TIM2_IRQHandler+0x10>)
 8006742:	f006 fc3f 	bl	800cfc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20002ff4 	.word	0x20002ff4

08006750 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006754:	4802      	ldr	r0, [pc, #8]	; (8006760 <I2C1_EV_IRQHandler+0x10>)
 8006756:	f003 f8d5 	bl	8009904 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800675a:	bf00      	nop
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20002184 	.word	0x20002184

08006764 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006768:	4802      	ldr	r0, [pc, #8]	; (8006774 <I2C1_ER_IRQHandler+0x10>)
 800676a:	f003 fa38 	bl	8009bde <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */


  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800676e:	bf00      	nop
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20002184 	.word	0x20002184

08006778 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800677e:	480d      	ldr	r0, [pc, #52]	; (80067b4 <USART2_IRQHandler+0x3c>)
 8006780:	f007 fd42 	bl	800e208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)){
 8006784:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <USART2_IRQHandler+0x3c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b10      	cmp	r3, #16
 8006790:	d10c      	bne.n	80067ac <USART2_IRQHandler+0x34>
	  TELEMETRY_Idle_Line_Detection();
 8006792:	f000 fe93 	bl	80074bc <TELEMETRY_Idle_Line_Detection>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8006796:	2300      	movs	r3, #0
 8006798:	607b      	str	r3, [r7, #4]
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <USART2_IRQHandler+0x3c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <USART2_IRQHandler+0x3c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	607b      	str	r3, [r7, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
	}
  /* USER CODE END USART2_IRQn 1 */
}
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20003294 	.word	0x20003294

080067b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80067bc:	4802      	ldr	r0, [pc, #8]	; (80067c8 <USART3_IRQHandler+0x10>)
 80067be:	f007 fd23 	bl	800e208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80067c2:	bf00      	nop
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20003154 	.word	0x20003154

080067cc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80067d0:	4802      	ldr	r0, [pc, #8]	; (80067dc <DMA1_Stream7_IRQHandler+0x10>)
 80067d2:	f001 fd4d 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80067d6:	bf00      	nop
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20002124 	.word	0x20002124

080067e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80067e4:	4802      	ldr	r0, [pc, #8]	; (80067f0 <DMA2_Stream0_IRQHandler+0x10>)
 80067e6:	f001 fd43 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80067ea:	bf00      	nop
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20002e94 	.word	0x20002e94

080067f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80067f8:	4802      	ldr	r0, [pc, #8]	; (8006804 <DMA2_Stream1_IRQHandler+0x10>)
 80067fa:	f001 fd39 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80067fe:	bf00      	nop
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20003094 	.word	0x20003094

08006808 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800680c:	4802      	ldr	r0, [pc, #8]	; (8006818 <DMA2_Stream2_IRQHandler+0x10>)
 800680e:	f001 fd2f 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006812:	bf00      	nop
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	200020c4 	.word	0x200020c4

0800681c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006820:	4802      	ldr	r0, [pc, #8]	; (800682c <DMA2_Stream3_IRQHandler+0x10>)
 8006822:	f001 fd25 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006826:	bf00      	nop
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20002f54 	.word	0x20002f54

08006830 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006834:	4802      	ldr	r0, [pc, #8]	; (8006840 <DMA2_Stream6_IRQHandler+0x10>)
 8006836:	f001 fd1b 	bl	8008270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800683a:	bf00      	nop
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20003194 	.word	0x20003194

08006844 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	IBUS_RxCplt(huart);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f008 fc87 	bl	800f160 <IBUS_RxCplt>
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
	IBUS_RxHalfCplt(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f008 fc96 	bl	800f194 <IBUS_RxHalfCplt>
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  if(hi2c == &hi2c1){
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a05      	ldr	r2, [pc, #20]	; (8006890 <HAL_I2C_MemRxCpltCallback+0x20>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d102      	bne.n	8006886 <HAL_I2C_MemRxCpltCallback+0x16>
	  MS5611_i2c_rx_callabck(hi2c);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff f8af 	bl	80059e4 <MS5611_i2c_rx_callabck>
  }
}
 8006886:	bf00      	nop
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20002184 	.word	0x20002184

08006894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800689c:	4a14      	ldr	r2, [pc, #80]	; (80068f0 <_sbrk+0x5c>)
 800689e:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <_sbrk+0x60>)
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068a8:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <_sbrk+0x64>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80068b0:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <_sbrk+0x64>)
 80068b2:	4a12      	ldr	r2, [pc, #72]	; (80068fc <_sbrk+0x68>)
 80068b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068b6:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <_sbrk+0x64>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4413      	add	r3, r2
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d207      	bcs.n	80068d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068c4:	f008 ff76 	bl	800f7b4 <__errno>
 80068c8:	4602      	mov	r2, r0
 80068ca:	230c      	movs	r3, #12
 80068cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80068ce:	f04f 33ff 	mov.w	r3, #4294967295
 80068d2:	e009      	b.n	80068e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068d4:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <_sbrk+0x64>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068da:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <_sbrk+0x64>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4413      	add	r3, r2
 80068e2:	4a05      	ldr	r2, [pc, #20]	; (80068f8 <_sbrk+0x64>)
 80068e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068e6:	68fb      	ldr	r3, [r7, #12]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20020000 	.word	0x20020000
 80068f4:	00000400 	.word	0x00000400
 80068f8:	2000205c 	.word	0x2000205c
 80068fc:	200032e0 	.word	0x200032e0

08006900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006904:	4b08      	ldr	r3, [pc, #32]	; (8006928 <SystemInit+0x28>)
 8006906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690a:	4a07      	ldr	r2, [pc, #28]	; (8006928 <SystemInit+0x28>)
 800690c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006914:	4b04      	ldr	r3, [pc, #16]	; (8006928 <SystemInit+0x28>)
 8006916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800691a:	609a      	str	r2, [r3, #8]
#endif
}
 800691c:	bf00      	nop
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	e000ed00 	.word	0xe000ed00

0800692c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b096      	sub	sp, #88	; 0x58
 8006930:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006932:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	605a      	str	r2, [r3, #4]
 800693c:	609a      	str	r2, [r3, #8]
 800693e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006940:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800694a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	605a      	str	r2, [r3, #4]
 8006954:	609a      	str	r2, [r3, #8]
 8006956:	60da      	str	r2, [r3, #12]
 8006958:	611a      	str	r2, [r3, #16]
 800695a:	615a      	str	r2, [r3, #20]
 800695c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	2220      	movs	r2, #32
 8006962:	2100      	movs	r1, #0
 8006964:	4618      	mov	r0, r3
 8006966:	f008 ff73 	bl	800f850 <memset>

  htim1.Instance = TIM1;
 800696a:	4b51      	ldr	r3, [pc, #324]	; (8006ab0 <MX_TIM1_Init+0x184>)
 800696c:	4a51      	ldr	r2, [pc, #324]	; (8006ab4 <MX_TIM1_Init+0x188>)
 800696e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8006970:	4b4f      	ldr	r3, [pc, #316]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006972:	2214      	movs	r2, #20
 8006974:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006976:	4b4e      	ldr	r3, [pc, #312]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006978:	2200      	movs	r2, #0
 800697a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 800697c:	4b4c      	ldr	r3, [pc, #304]	; (8006ab0 <MX_TIM1_Init+0x184>)
 800697e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006982:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006984:	4b4a      	ldr	r3, [pc, #296]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006986:	2200      	movs	r2, #0
 8006988:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800698a:	4b49      	ldr	r3, [pc, #292]	; (8006ab0 <MX_TIM1_Init+0x184>)
 800698c:	2200      	movs	r2, #0
 800698e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006990:	4b47      	ldr	r3, [pc, #284]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006992:	2280      	movs	r2, #128	; 0x80
 8006994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006996:	4846      	ldr	r0, [pc, #280]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006998:	f006 fa76 	bl	800ce88 <HAL_TIM_Base_Init>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80069a2:	f7ff fc7f 	bl	80062a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80069a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80069ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80069b0:	4619      	mov	r1, r3
 80069b2:	483f      	ldr	r0, [pc, #252]	; (8006ab0 <MX_TIM1_Init+0x184>)
 80069b4:	f006 fcd4 	bl	800d360 <HAL_TIM_ConfigClockSource>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80069be:	f7ff fc71 	bl	80062a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80069c2:	483b      	ldr	r0, [pc, #236]	; (8006ab0 <MX_TIM1_Init+0x184>)
 80069c4:	f006 fa8b 	bl	800cede <HAL_TIM_PWM_Init>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80069ce:	f7ff fc69 	bl	80062a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069d2:	2300      	movs	r3, #0
 80069d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80069da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069de:	4619      	mov	r1, r3
 80069e0:	4833      	ldr	r0, [pc, #204]	; (8006ab0 <MX_TIM1_Init+0x184>)
 80069e2:	f007 f8b7 	bl	800db54 <HAL_TIMEx_MasterConfigSynchronization>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80069ec:	f7ff fc5a 	bl	80062a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069f0:	2360      	movs	r3, #96	; 0x60
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 80069f4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80069f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069fa:	2300      	movs	r3, #0
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80069fe:	2300      	movs	r3, #0
 8006a00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006a06:	2300      	movs	r3, #0
 8006a08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a12:	2200      	movs	r2, #0
 8006a14:	4619      	mov	r1, r3
 8006a16:	4826      	ldr	r0, [pc, #152]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006a18:	f006 fbdc 	bl	800d1d4 <HAL_TIM_PWM_ConfigChannel>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8006a22:	f7ff fc3f 	bl	80062a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4820      	ldr	r0, [pc, #128]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006a30:	f006 fbd0 	bl	800d1d4 <HAL_TIM_PWM_ConfigChannel>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8006a3a:	f7ff fc33 	bl	80062a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a42:	2208      	movs	r2, #8
 8006a44:	4619      	mov	r1, r3
 8006a46:	481a      	ldr	r0, [pc, #104]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006a48:	f006 fbc4 	bl	800d1d4 <HAL_TIM_PWM_ConfigChannel>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8006a52:	f7ff fc27 	bl	80062a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a5a:	220c      	movs	r2, #12
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4814      	ldr	r0, [pc, #80]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006a60:	f006 fbb8 	bl	800d1d4 <HAL_TIM_PWM_ConfigChannel>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8006a6a:	f7ff fc1b 	bl	80062a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006a8c:	1d3b      	adds	r3, r7, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4807      	ldr	r0, [pc, #28]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006a92:	f007 f8db 	bl	800dc4c <HAL_TIMEx_ConfigBreakDeadTime>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8006a9c:	f7ff fc02 	bl	80062a4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8006aa0:	4803      	ldr	r0, [pc, #12]	; (8006ab0 <MX_TIM1_Init+0x184>)
 8006aa2:	f000 f891 	bl	8006bc8 <HAL_TIM_MspPostInit>

}
 8006aa6:	bf00      	nop
 8006aa8:	3758      	adds	r7, #88	; 0x58
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20002fb4 	.word	0x20002fb4
 8006ab4:	40010000 	.word	0x40010000

08006ab8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006abe:	f107 0308 	add.w	r3, r7, #8
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	605a      	str	r2, [r3, #4]
 8006ac8:	609a      	str	r2, [r3, #8]
 8006aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006acc:	463b      	mov	r3, r7
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8006ad4:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <MX_TIM2_Init+0x94>)
 8006ad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8006adc:	4b1b      	ldr	r3, [pc, #108]	; (8006b4c <MX_TIM2_Init+0x94>)
 8006ade:	22a7      	movs	r2, #167	; 0xa7
 8006ae0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ae2:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <MX_TIM2_Init+0x94>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8006ae8:	4b18      	ldr	r3, [pc, #96]	; (8006b4c <MX_TIM2_Init+0x94>)
 8006aea:	2203      	movs	r2, #3
 8006aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aee:	4b17      	ldr	r3, [pc, #92]	; (8006b4c <MX_TIM2_Init+0x94>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006af4:	4b15      	ldr	r3, [pc, #84]	; (8006b4c <MX_TIM2_Init+0x94>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006afa:	4814      	ldr	r0, [pc, #80]	; (8006b4c <MX_TIM2_Init+0x94>)
 8006afc:	f006 f9c4 	bl	800ce88 <HAL_TIM_Base_Init>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8006b06:	f7ff fbcd 	bl	80062a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006b10:	f107 0308 	add.w	r3, r7, #8
 8006b14:	4619      	mov	r1, r3
 8006b16:	480d      	ldr	r0, [pc, #52]	; (8006b4c <MX_TIM2_Init+0x94>)
 8006b18:	f006 fc22 	bl	800d360 <HAL_TIM_ConfigClockSource>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8006b22:	f7ff fbbf 	bl	80062a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b26:	2300      	movs	r3, #0
 8006b28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006b2e:	463b      	mov	r3, r7
 8006b30:	4619      	mov	r1, r3
 8006b32:	4806      	ldr	r0, [pc, #24]	; (8006b4c <MX_TIM2_Init+0x94>)
 8006b34:	f007 f80e 	bl	800db54 <HAL_TIMEx_MasterConfigSynchronization>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8006b3e:	f7ff fbb1 	bl	80062a4 <Error_Handler>
  }

}
 8006b42:	bf00      	nop
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20002ff4 	.word	0x20002ff4

08006b50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a18      	ldr	r2, [pc, #96]	; (8006bc0 <HAL_TIM_Base_MspInit+0x70>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d10e      	bne.n	8006b80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <HAL_TIM_Base_MspInit+0x74>)
 8006b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6a:	4a16      	ldr	r2, [pc, #88]	; (8006bc4 <HAL_TIM_Base_MspInit+0x74>)
 8006b6c:	f043 0301 	orr.w	r3, r3, #1
 8006b70:	6453      	str	r3, [r2, #68]	; 0x44
 8006b72:	4b14      	ldr	r3, [pc, #80]	; (8006bc4 <HAL_TIM_Base_MspInit+0x74>)
 8006b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006b7e:	e01a      	b.n	8006bb6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b88:	d115      	bne.n	8006bb6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60bb      	str	r3, [r7, #8]
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <HAL_TIM_Base_MspInit+0x74>)
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	4a0c      	ldr	r2, [pc, #48]	; (8006bc4 <HAL_TIM_Base_MspInit+0x74>)
 8006b94:	f043 0301 	orr.w	r3, r3, #1
 8006b98:	6413      	str	r3, [r2, #64]	; 0x40
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <HAL_TIM_Base_MspInit+0x74>)
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	60bb      	str	r3, [r7, #8]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2100      	movs	r1, #0
 8006baa:	201c      	movs	r0, #28
 8006bac:	f001 fa01 	bl	8007fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006bb0:	201c      	movs	r0, #28
 8006bb2:	f001 fa1a 	bl	8007fea <HAL_NVIC_EnableIRQ>
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40023800 	.word	0x40023800

08006bc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd0:	f107 030c 	add.w	r3, r7, #12
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	605a      	str	r2, [r3, #4]
 8006bda:	609a      	str	r2, [r3, #8]
 8006bdc:	60da      	str	r2, [r3, #12]
 8006bde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a12      	ldr	r2, [pc, #72]	; (8006c30 <HAL_TIM_MspPostInit+0x68>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d11e      	bne.n	8006c28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bea:	2300      	movs	r3, #0
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <HAL_TIM_MspPostInit+0x6c>)
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	4a10      	ldr	r2, [pc, #64]	; (8006c34 <HAL_TIM_MspPostInit+0x6c>)
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bfa:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <HAL_TIM_MspPostInit+0x6c>)
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	60bb      	str	r3, [r7, #8]
 8006c04:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8006c06:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006c0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c1c:	f107 030c 	add.w	r3, r7, #12
 8006c20:	4619      	mov	r1, r3
 8006c22:	4805      	ldr	r0, [pc, #20]	; (8006c38 <HAL_TIM_MspPostInit+0x70>)
 8006c24:	f001 fda6 	bl	8008774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006c28:	bf00      	nop
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40023800 	.word	0x40023800
 8006c38:	40020000 	.word	0x40020000

08006c3c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006c40:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <MX_USART2_UART_Init+0x4c>)
 8006c42:	4a12      	ldr	r2, [pc, #72]	; (8006c8c <MX_USART2_UART_Init+0x50>)
 8006c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8006c46:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <MX_USART2_UART_Init+0x4c>)
 8006c48:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <MX_USART2_UART_Init+0x4c>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006c54:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <MX_USART2_UART_Init+0x4c>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006c5a:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <MX_USART2_UART_Init+0x4c>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006c60:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <MX_USART2_UART_Init+0x4c>)
 8006c62:	220c      	movs	r2, #12
 8006c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c66:	4b08      	ldr	r3, [pc, #32]	; (8006c88 <MX_USART2_UART_Init+0x4c>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <MX_USART2_UART_Init+0x4c>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006c72:	4805      	ldr	r0, [pc, #20]	; (8006c88 <MX_USART2_UART_Init+0x4c>)
 8006c74:	f007 f850 	bl	800dd18 <HAL_UART_Init>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006c7e:	f7ff fb11 	bl	80062a4 <Error_Handler>
  }

}
 8006c82:	bf00      	nop
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20003294 	.word	0x20003294
 8006c8c:	40004400 	.word	0x40004400

08006c90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006c94:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <MX_USART3_UART_Init+0x4c>)
 8006c96:	4a12      	ldr	r2, [pc, #72]	; (8006ce0 <MX_USART3_UART_Init+0x50>)
 8006c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006c9a:	4b10      	ldr	r3, [pc, #64]	; (8006cdc <MX_USART3_UART_Init+0x4c>)
 8006c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006ca2:	4b0e      	ldr	r3, [pc, #56]	; (8006cdc <MX_USART3_UART_Init+0x4c>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <MX_USART3_UART_Init+0x4c>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006cae:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <MX_USART3_UART_Init+0x4c>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006cb4:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <MX_USART3_UART_Init+0x4c>)
 8006cb6:	220c      	movs	r2, #12
 8006cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006cba:	4b08      	ldr	r3, [pc, #32]	; (8006cdc <MX_USART3_UART_Init+0x4c>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006cc0:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <MX_USART3_UART_Init+0x4c>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006cc6:	4805      	ldr	r0, [pc, #20]	; (8006cdc <MX_USART3_UART_Init+0x4c>)
 8006cc8:	f007 f826 	bl	800dd18 <HAL_UART_Init>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006cd2:	f7ff fae7 	bl	80062a4 <Error_Handler>
  }

}
 8006cd6:	bf00      	nop
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20003154 	.word	0x20003154
 8006ce0:	40004800 	.word	0x40004800

08006ce4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8006ce8:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <MX_USART6_UART_Init+0x4c>)
 8006cea:	4a12      	ldr	r2, [pc, #72]	; (8006d34 <MX_USART6_UART_Init+0x50>)
 8006cec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8006cee:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <MX_USART6_UART_Init+0x4c>)
 8006cf0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8006cf4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006cf6:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <MX_USART6_UART_Init+0x4c>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <MX_USART6_UART_Init+0x4c>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006d02:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <MX_USART6_UART_Init+0x4c>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006d08:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <MX_USART6_UART_Init+0x4c>)
 8006d0a:	220c      	movs	r2, #12
 8006d0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d0e:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <MX_USART6_UART_Init+0x4c>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d14:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <MX_USART6_UART_Init+0x4c>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006d1a:	4805      	ldr	r0, [pc, #20]	; (8006d30 <MX_USART6_UART_Init+0x4c>)
 8006d1c:	f006 fffc 	bl	800dd18 <HAL_UART_Init>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006d26:	f7ff fabd 	bl	80062a4 <Error_Handler>
  }

}
 8006d2a:	bf00      	nop
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20003254 	.word	0x20003254
 8006d34:	40011400 	.word	0x40011400

08006d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08e      	sub	sp, #56	; 0x38
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	60da      	str	r2, [r3, #12]
 8006d4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a7f      	ldr	r2, [pc, #508]	; (8006f54 <HAL_UART_MspInit+0x21c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	f040 8091 	bne.w	8006e7e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	623b      	str	r3, [r7, #32]
 8006d60:	4b7d      	ldr	r3, [pc, #500]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	4a7c      	ldr	r2, [pc, #496]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d6c:	4b7a      	ldr	r3, [pc, #488]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d74:	623b      	str	r3, [r7, #32]
 8006d76:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	4b76      	ldr	r3, [pc, #472]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	4a75      	ldr	r2, [pc, #468]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	6313      	str	r3, [r2, #48]	; 0x30
 8006d88:	4b73      	ldr	r3, [pc, #460]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006d94:	230c      	movs	r3, #12
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006da0:	2303      	movs	r3, #3
 8006da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006da4:	2307      	movs	r3, #7
 8006da6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dac:	4619      	mov	r1, r3
 8006dae:	486b      	ldr	r0, [pc, #428]	; (8006f5c <HAL_UART_MspInit+0x224>)
 8006db0:	f001 fce0 	bl	8008774 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006db4:	4b6a      	ldr	r3, [pc, #424]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006db6:	4a6b      	ldr	r2, [pc, #428]	; (8006f64 <HAL_UART_MspInit+0x22c>)
 8006db8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006dba:	4b69      	ldr	r3, [pc, #420]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006dc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006dc2:	4b67      	ldr	r3, [pc, #412]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dc8:	4b65      	ldr	r3, [pc, #404]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006dce:	4b64      	ldr	r3, [pc, #400]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006dd6:	4b62      	ldr	r3, [pc, #392]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ddc:	4b60      	ldr	r3, [pc, #384]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006de2:	4b5f      	ldr	r3, [pc, #380]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006de8:	4b5d      	ldr	r3, [pc, #372]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006dee:	4b5c      	ldr	r3, [pc, #368]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006df4:	485a      	ldr	r0, [pc, #360]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006df6:	f001 f913 	bl	8008020 <HAL_DMA_Init>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006e00:	f7ff fa50 	bl	80062a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a56      	ldr	r2, [pc, #344]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006e08:	635a      	str	r2, [r3, #52]	; 0x34
 8006e0a:	4a55      	ldr	r2, [pc, #340]	; (8006f60 <HAL_UART_MspInit+0x228>)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006e10:	4b55      	ldr	r3, [pc, #340]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e12:	4a56      	ldr	r2, [pc, #344]	; (8006f6c <HAL_UART_MspInit+0x234>)
 8006e14:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006e16:	4b54      	ldr	r3, [pc, #336]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e1e:	4b52      	ldr	r3, [pc, #328]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e20:	2240      	movs	r2, #64	; 0x40
 8006e22:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e24:	4b50      	ldr	r3, [pc, #320]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e2a:	4b4f      	ldr	r3, [pc, #316]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e30:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e32:	4b4d      	ldr	r3, [pc, #308]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e38:	4b4b      	ldr	r3, [pc, #300]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006e3e:	4b4a      	ldr	r3, [pc, #296]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006e44:	4b48      	ldr	r3, [pc, #288]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e4a:	4b47      	ldr	r3, [pc, #284]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006e50:	4845      	ldr	r0, [pc, #276]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e52:	f001 f8e5 	bl	8008020 <HAL_DMA_Init>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8006e5c:	f7ff fa22 	bl	80062a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a41      	ldr	r2, [pc, #260]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
 8006e66:	4a40      	ldr	r2, [pc, #256]	; (8006f68 <HAL_UART_MspInit+0x230>)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2100      	movs	r1, #0
 8006e70:	2026      	movs	r0, #38	; 0x26
 8006e72:	f001 f89e 	bl	8007fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006e76:	2026      	movs	r0, #38	; 0x26
 8006e78:	f001 f8b7 	bl	8007fea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8006e7c:	e10e      	b.n	800709c <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART3)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a3b      	ldr	r2, [pc, #236]	; (8006f70 <HAL_UART_MspInit+0x238>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d17b      	bne.n	8006f80 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	4b32      	ldr	r3, [pc, #200]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	4a31      	ldr	r2, [pc, #196]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e96:	6413      	str	r3, [r2, #64]	; 0x40
 8006e98:	4b2f      	ldr	r3, [pc, #188]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	4b2b      	ldr	r3, [pc, #172]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eac:	4a2a      	ldr	r2, [pc, #168]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006eae:	f043 0302 	orr.w	r3, r3, #2
 8006eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb4:	4b28      	ldr	r3, [pc, #160]	; (8006f58 <HAL_UART_MspInit+0x220>)
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006ec0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006ed2:	2307      	movs	r3, #7
 8006ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eda:	4619      	mov	r1, r3
 8006edc:	4825      	ldr	r0, [pc, #148]	; (8006f74 <HAL_UART_MspInit+0x23c>)
 8006ede:	f001 fc49 	bl	8008774 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006ee2:	4b25      	ldr	r3, [pc, #148]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006ee4:	4a25      	ldr	r2, [pc, #148]	; (8006f7c <HAL_UART_MspInit+0x244>)
 8006ee6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006ee8:	4b23      	ldr	r3, [pc, #140]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006eea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006eee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ef0:	4b21      	ldr	r3, [pc, #132]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ef6:	4b20      	ldr	r3, [pc, #128]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006efc:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f02:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f04:	4b1c      	ldr	r3, [pc, #112]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006f10:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f16:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f18:	4b17      	ldr	r3, [pc, #92]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f1e:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006f24:	4814      	ldr	r0, [pc, #80]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006f26:	f001 f87b 	bl	8008020 <HAL_DMA_Init>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8006f30:	f7ff f9b8 	bl	80062a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a10      	ldr	r2, [pc, #64]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006f38:	635a      	str	r2, [r3, #52]	; 0x34
 8006f3a:	4a0f      	ldr	r2, [pc, #60]	; (8006f78 <HAL_UART_MspInit+0x240>)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006f40:	2200      	movs	r2, #0
 8006f42:	2100      	movs	r1, #0
 8006f44:	2027      	movs	r0, #39	; 0x27
 8006f46:	f001 f834 	bl	8007fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006f4a:	2027      	movs	r0, #39	; 0x27
 8006f4c:	f001 f84d 	bl	8007fea <HAL_NVIC_EnableIRQ>
}
 8006f50:	e0a4      	b.n	800709c <HAL_UART_MspInit+0x364>
 8006f52:	bf00      	nop
 8006f54:	40004400 	.word	0x40004400
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	40020000 	.word	0x40020000
 8006f60:	20003034 	.word	0x20003034
 8006f64:	40026088 	.word	0x40026088
 8006f68:	200031f4 	.word	0x200031f4
 8006f6c:	400260a0 	.word	0x400260a0
 8006f70:	40004800 	.word	0x40004800
 8006f74:	40020400 	.word	0x40020400
 8006f78:	200030f4 	.word	0x200030f4
 8006f7c:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a47      	ldr	r2, [pc, #284]	; (80070a4 <HAL_UART_MspInit+0x36c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	f040 8088 	bne.w	800709c <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	4b45      	ldr	r3, [pc, #276]	; (80070a8 <HAL_UART_MspInit+0x370>)
 8006f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f94:	4a44      	ldr	r2, [pc, #272]	; (80070a8 <HAL_UART_MspInit+0x370>)
 8006f96:	f043 0320 	orr.w	r3, r3, #32
 8006f9a:	6453      	str	r3, [r2, #68]	; 0x44
 8006f9c:	4b42      	ldr	r3, [pc, #264]	; (80070a8 <HAL_UART_MspInit+0x370>)
 8006f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	4b3e      	ldr	r3, [pc, #248]	; (80070a8 <HAL_UART_MspInit+0x370>)
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	4a3d      	ldr	r2, [pc, #244]	; (80070a8 <HAL_UART_MspInit+0x370>)
 8006fb2:	f043 0304 	orr.w	r3, r3, #4
 8006fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8006fb8:	4b3b      	ldr	r3, [pc, #236]	; (80070a8 <HAL_UART_MspInit+0x370>)
 8006fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006fc4:	23c0      	movs	r3, #192	; 0xc0
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4833      	ldr	r0, [pc, #204]	; (80070ac <HAL_UART_MspInit+0x374>)
 8006fe0:	f001 fbc8 	bl	8008774 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006fe4:	4b32      	ldr	r3, [pc, #200]	; (80070b0 <HAL_UART_MspInit+0x378>)
 8006fe6:	4a33      	ldr	r2, [pc, #204]	; (80070b4 <HAL_UART_MspInit+0x37c>)
 8006fe8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006fea:	4b31      	ldr	r3, [pc, #196]	; (80070b0 <HAL_UART_MspInit+0x378>)
 8006fec:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006ff0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ff2:	4b2f      	ldr	r3, [pc, #188]	; (80070b0 <HAL_UART_MspInit+0x378>)
 8006ff4:	2240      	movs	r2, #64	; 0x40
 8006ff6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ff8:	4b2d      	ldr	r3, [pc, #180]	; (80070b0 <HAL_UART_MspInit+0x378>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006ffe:	4b2c      	ldr	r3, [pc, #176]	; (80070b0 <HAL_UART_MspInit+0x378>)
 8007000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007004:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007006:	4b2a      	ldr	r3, [pc, #168]	; (80070b0 <HAL_UART_MspInit+0x378>)
 8007008:	2200      	movs	r2, #0
 800700a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800700c:	4b28      	ldr	r3, [pc, #160]	; (80070b0 <HAL_UART_MspInit+0x378>)
 800700e:	2200      	movs	r2, #0
 8007010:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8007012:	4b27      	ldr	r3, [pc, #156]	; (80070b0 <HAL_UART_MspInit+0x378>)
 8007014:	2200      	movs	r2, #0
 8007016:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007018:	4b25      	ldr	r3, [pc, #148]	; (80070b0 <HAL_UART_MspInit+0x378>)
 800701a:	2200      	movs	r2, #0
 800701c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800701e:	4b24      	ldr	r3, [pc, #144]	; (80070b0 <HAL_UART_MspInit+0x378>)
 8007020:	2200      	movs	r2, #0
 8007022:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8007024:	4822      	ldr	r0, [pc, #136]	; (80070b0 <HAL_UART_MspInit+0x378>)
 8007026:	f000 fffb 	bl	8008020 <HAL_DMA_Init>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8007030:	f7ff f938 	bl	80062a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a1e      	ldr	r2, [pc, #120]	; (80070b0 <HAL_UART_MspInit+0x378>)
 8007038:	631a      	str	r2, [r3, #48]	; 0x30
 800703a:	4a1d      	ldr	r2, [pc, #116]	; (80070b0 <HAL_UART_MspInit+0x378>)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007040:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <HAL_UART_MspInit+0x380>)
 8007042:	4a1e      	ldr	r2, [pc, #120]	; (80070bc <HAL_UART_MspInit+0x384>)
 8007044:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007046:	4b1c      	ldr	r3, [pc, #112]	; (80070b8 <HAL_UART_MspInit+0x380>)
 8007048:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800704c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800704e:	4b1a      	ldr	r3, [pc, #104]	; (80070b8 <HAL_UART_MspInit+0x380>)
 8007050:	2200      	movs	r2, #0
 8007052:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007054:	4b18      	ldr	r3, [pc, #96]	; (80070b8 <HAL_UART_MspInit+0x380>)
 8007056:	2200      	movs	r2, #0
 8007058:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800705a:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <HAL_UART_MspInit+0x380>)
 800705c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007060:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007062:	4b15      	ldr	r3, [pc, #84]	; (80070b8 <HAL_UART_MspInit+0x380>)
 8007064:	2200      	movs	r2, #0
 8007066:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007068:	4b13      	ldr	r3, [pc, #76]	; (80070b8 <HAL_UART_MspInit+0x380>)
 800706a:	2200      	movs	r2, #0
 800706c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800706e:	4b12      	ldr	r3, [pc, #72]	; (80070b8 <HAL_UART_MspInit+0x380>)
 8007070:	2200      	movs	r2, #0
 8007072:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007074:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <HAL_UART_MspInit+0x380>)
 8007076:	2200      	movs	r2, #0
 8007078:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800707a:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <HAL_UART_MspInit+0x380>)
 800707c:	2200      	movs	r2, #0
 800707e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007080:	480d      	ldr	r0, [pc, #52]	; (80070b8 <HAL_UART_MspInit+0x380>)
 8007082:	f000 ffcd 	bl	8008020 <HAL_DMA_Init>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <HAL_UART_MspInit+0x358>
      Error_Handler();
 800708c:	f7ff f90a 	bl	80062a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a09      	ldr	r2, [pc, #36]	; (80070b8 <HAL_UART_MspInit+0x380>)
 8007094:	635a      	str	r2, [r3, #52]	; 0x34
 8007096:	4a08      	ldr	r2, [pc, #32]	; (80070b8 <HAL_UART_MspInit+0x380>)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800709c:	bf00      	nop
 800709e:	3738      	adds	r7, #56	; 0x38
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	40011400 	.word	0x40011400
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40020800 	.word	0x40020800
 80070b0:	20003194 	.word	0x20003194
 80070b4:	400264a0 	.word	0x400264a0
 80070b8:	20003094 	.word	0x20003094
 80070bc:	40026428 	.word	0x40026428

080070c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80070c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80070c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80070c6:	e003      	b.n	80070d0 <LoopCopyDataInit>

080070c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80070c8:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80070ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80070cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80070ce:	3104      	adds	r1, #4

080070d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80070d0:	480b      	ldr	r0, [pc, #44]	; (8007100 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80070d2:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80070d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80070d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80070d8:	d3f6      	bcc.n	80070c8 <CopyDataInit>
  ldr  r2, =_sbss
 80070da:	4a0b      	ldr	r2, [pc, #44]	; (8007108 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80070dc:	e002      	b.n	80070e4 <LoopFillZerobss>

080070de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80070de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80070e0:	f842 3b04 	str.w	r3, [r2], #4

080070e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80070e4:	4b09      	ldr	r3, [pc, #36]	; (800710c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80070e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80070e8:	d3f9      	bcc.n	80070de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80070ea:	f7ff fc09 	bl	8006900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070ee:	f008 fb67 	bl	800f7c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070f2:	f7fe ffaf 	bl	8006054 <main>
  bx  lr    
 80070f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80070f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80070fc:	08013ee4 	.word	0x08013ee4
  ldr  r0, =_sdata
 8007100:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007104:	20001c5c 	.word	0x20001c5c
  ldr  r2, =_sbss
 8007108:	20001c5c 	.word	0x20001c5c
  ldr  r3, = _ebss
 800710c:	200032dc 	.word	0x200032dc

08007110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007110:	e7fe      	b.n	8007110 <ADC_IRQHandler>

08007112 <get_nb_bytes_available>:

static telemetry_t * telem ;	//We dont use multiples telemetry anyways

//Private function to know the number of bytes available
uint16_t get_nb_bytes_available(telemetry_t * telem);
uint16_t get_nb_bytes_available(telemetry_t * telem){
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
	uint16_t nb = 0 ;
 800711a:	2300      	movs	r3, #0
 800711c:	81fb      	strh	r3, [r7, #14]
	if(telem->index_write_rx > telem->index_read_rx){
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800712a:	429a      	cmp	r2, r3
 800712c:	d907      	bls.n	800713e <get_nb_bytes_available+0x2c>
		nb = telem->index_write_rx - telem->index_read_rx ;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 800713e:	89fb      	ldrh	r3, [r7, #14]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <TELEMETRY_Init>:

void TELEMETRY_Init(telemetry_t * telem_, UART_HandleTypeDef * huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
	telem = telem_ ;
 8007156:	4a15      	ldr	r2, [pc, #84]	; (80071ac <TELEMETRY_Init+0x60>)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6013      	str	r3, [r2, #0]
	telem->huart = huart ;
 800715c:	4b13      	ldr	r3, [pc, #76]	; (80071ac <TELEMETRY_Init+0x60>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	601a      	str	r2, [r3, #0]

	//On envoit un premier message qui sert sutout à éviter que les premiers octet utiles soient perdu
	static uint8_t hey_msg[] = "Hey it s me Theo...\n";
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 8007164:	4b11      	ldr	r3, [pc, #68]	; (80071ac <TELEMETRY_Init+0x60>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2214      	movs	r2, #20
 800716c:	4910      	ldr	r1, [pc, #64]	; (80071b0 <TELEMETRY_Init+0x64>)
 800716e:	4618      	mov	r0, r3
 8007170:	f006 ff5e 	bl	800e030 <HAL_UART_Transmit_DMA>

	//Activation de l'it "idle" qui préviendra de la fin de la récéption d'un message
	__HAL_UART_ENABLE_IT(telem->huart, UART_IT_IDLE);
 8007174:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <TELEMETRY_Init+0x60>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <TELEMETRY_Init+0x60>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0210 	orr.w	r2, r2, #16
 800718a:	60da      	str	r2, [r3, #12]
	//On lance la récéption en DMA
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 800718c:	4b07      	ldr	r3, [pc, #28]	; (80071ac <TELEMETRY_Init+0x60>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	4b06      	ldr	r3, [pc, #24]	; (80071ac <TELEMETRY_Init+0x60>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800719a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800719e:	4619      	mov	r1, r3
 80071a0:	f006 ffb2 	bl	800e108 <HAL_UART_Receive_DMA>
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	20002060 	.word	0x20002060
 80071b0:	20001a68 	.word	0x20001a68

080071b4 <TELEMETRY_Process>:


void TELEMETRY_Process(uint32_t time_us){
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]

	//	--------------------	Transmission	------------------------
	//Ce qui suit vide le buffer en transmettant on contenu en respectant la limite
	//de vitesse maximum
	if(telem->index_write_tx != telem->index_read_tx && time_us > telem->next_send)
 80071bc:	4b6f      	ldr	r3, [pc, #444]	; (800737c <TELEMETRY_Process+0x1c8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 80071c4:	4b6d      	ldr	r3, [pc, #436]	; (800737c <TELEMETRY_Process+0x1c8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d051      	beq.n	8007274 <TELEMETRY_Process+0xc0>
 80071d0:	4b6a      	ldr	r3, [pc, #424]	; (800737c <TELEMETRY_Process+0x1c8>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d94a      	bls.n	8007274 <TELEMETRY_Process+0xc0>
	{
		telem->next_send = time_us + telem->len_portion_tx[telem->index_read_tx] * PERIODE_1_OCTET ;
 80071de:	4b67      	ldr	r3, [pc, #412]	; (800737c <TELEMETRY_Process+0x1c8>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a66      	ldr	r2, [pc, #408]	; (800737c <TELEMETRY_Process+0x1c8>)
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 80071ea:	4413      	add	r3, r2
 80071ec:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 80071f0:	461a      	mov	r2, r3
 80071f2:	f240 134d 	movw	r3, #333	; 0x14d
 80071f6:	fb03 f302 	mul.w	r3, r3, r2
 80071fa:	4619      	mov	r1, r3
 80071fc:	4b5f      	ldr	r3, [pc, #380]	; (800737c <TELEMETRY_Process+0x1c8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	440a      	add	r2, r1
 8007204:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

		//On transmet les données
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 8007208:	4b5c      	ldr	r3, [pc, #368]	; (800737c <TELEMETRY_Process+0x1c8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	4b5b      	ldr	r3, [pc, #364]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4b5a      	ldr	r3, [pc, #360]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 800721a:	4619      	mov	r1, r3
 800721c:	460b      	mov	r3, r1
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	1d59      	adds	r1, r3, #5
 8007228:	4b54      	ldr	r3, [pc, #336]	; (800737c <TELEMETRY_Process+0x1c8>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a53      	ldr	r2, [pc, #332]	; (800737c <TELEMETRY_Process+0x1c8>)
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 8007234:	4413      	add	r3, r2
 8007236:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 800723a:	b29b      	uxth	r3, r3
 800723c:	461a      	mov	r2, r3
 800723e:	f006 fef7 	bl	800e030 <HAL_UART_Transmit_DMA>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
 8007242:	4b4e      	ldr	r3, [pc, #312]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f8b3 2426 	ldrh.w	r2, [r3, #1062]	; 0x426
 800724a:	3201      	adds	r2, #1
 800724c:	b292      	uxth	r2, r2
 800724e:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 8007252:	4b4a      	ldr	r3, [pc, #296]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 800725a:	4a48      	ldr	r2, [pc, #288]	; (800737c <TELEMETRY_Process+0x1c8>)
 800725c:	6812      	ldr	r2, [r2, #0]
 800725e:	4948      	ldr	r1, [pc, #288]	; (8007380 <TELEMETRY_Process+0x1cc>)
 8007260:	fba1 0103 	umull	r0, r1, r1, r3
 8007264:	0909      	lsrs	r1, r1, #4
 8007266:	2032      	movs	r0, #50	; 0x32
 8007268:	fb00 f101 	mul.w	r1, r0, r1
 800726c:	1a5b      	subs	r3, r3, r1
 800726e:	b29b      	uxth	r3, r3
 8007270:	f8a2 3426 	strh.w	r3, [r2, #1062]	; 0x426
	}

	//	---------------------	Reception	-------------------------------

	uint16_t bytes_avaibles = get_nb_bytes_available(telem);
 8007274:	4b41      	ldr	r3, [pc, #260]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff ff4a 	bl	8007112 <get_nb_bytes_available>
 800727e:	4603      	mov	r3, r0
 8007280:	823b      	strh	r3, [r7, #16]
	if(bytes_avaibles > 2)	//Minimum trois octets pour faire quoi que ce soit
 8007282:	8a3b      	ldrh	r3, [r7, #16]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d976      	bls.n	8007376 <TELEMETRY_Process+0x1c2>
	{
		uint16_t bytes_used = 1 ;
 8007288:	2301      	movs	r3, #1
 800728a:	82fb      	strh	r3, [r7, #22]
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 800728c:	4b3b      	ldr	r3, [pc, #236]	; (800737c <TELEMETRY_Process+0x1c8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a3a      	ldr	r2, [pc, #232]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	f8b2 262a 	ldrh.w	r2, [r2, #1578]	; 0x62a
 8007298:	4413      	add	r3, r2
 800729a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800729e:	2b24      	cmp	r3, #36	; 0x24
 80072a0:	d15c      	bne.n	800735c <TELEMETRY_Process+0x1a8>
		{
			//Number of byte recquiered including the '$' and the checksum to use the current frame we are on
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[telem->index_read_rx+1]);
 80072a2:	4b36      	ldr	r3, [pc, #216]	; (800737c <TELEMETRY_Process+0x1c8>)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b35      	ldr	r3, [pc, #212]	; (800737c <TELEMETRY_Process+0x1c8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80072ae:	3301      	adds	r3, #1
 80072b0:	4413      	add	r3, r2
 80072b2:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fa fc02 	bl	8001ac0 <DATA_LOGGER_Get_Data>
 80072bc:	60f8      	str	r0, [r7, #12]
			uint16_t bytes_recquired = (current_data->format / 20) + 3 ;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	7a5b      	ldrb	r3, [r3, #9]
 80072c2:	4a30      	ldr	r2, [pc, #192]	; (8007384 <TELEMETRY_Process+0x1d0>)
 80072c4:	fba2 2303 	umull	r2, r3, r2, r3
 80072c8:	091b      	lsrs	r3, r3, #4
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3303      	adds	r3, #3
 80072d0:	817b      	strh	r3, [r7, #10]

			if(bytes_recquired > bytes_avaibles)
 80072d2:	897a      	ldrh	r2, [r7, #10]
 80072d4:	8a3b      	ldrh	r3, [r7, #16]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d84c      	bhi.n	8007374 <TELEMETRY_Process+0x1c0>
				return ;	//We just wait for then next call with hopefully more data available
			bytes_used = bytes_recquired;
 80072da:	897b      	ldrh	r3, [r7, #10]
 80072dc:	82fb      	strh	r3, [r7, #22]

			//Len is id(1 byte) + data(x bytes)
			uint16_t len_frame = bytes_recquired - 2 ;
 80072de:	897b      	ldrh	r3, [r7, #10]
 80072e0:	3b02      	subs	r3, #2
 80072e2:	813b      	strh	r3, [r7, #8]

			//Checksum
			uint16_t checksum = 0 ;
 80072e4:	2300      	movs	r3, #0
 80072e6:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 80072e8:	2300      	movs	r3, #0
 80072ea:	827b      	strh	r3, [r7, #18]
 80072ec:	e012      	b.n	8007314 <TELEMETRY_Process+0x160>
			{
				checksum += telem->buffer_rx[telem->index_read_rx+1+b];
 80072ee:	4b23      	ldr	r3, [pc, #140]	; (800737c <TELEMETRY_Process+0x1c8>)
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b22      	ldr	r3, [pc, #136]	; (800737c <TELEMETRY_Process+0x1c8>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80072fa:	1c59      	adds	r1, r3, #1
 80072fc:	8a7b      	ldrh	r3, [r7, #18]
 80072fe:	440b      	add	r3, r1
 8007300:	4413      	add	r3, r2
 8007302:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8007306:	b29a      	uxth	r2, r3
 8007308:	8abb      	ldrh	r3, [r7, #20]
 800730a:	4413      	add	r3, r2
 800730c:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 800730e:	8a7b      	ldrh	r3, [r7, #18]
 8007310:	3301      	adds	r3, #1
 8007312:	827b      	strh	r3, [r7, #18]
 8007314:	8a7a      	ldrh	r2, [r7, #18]
 8007316:	893b      	ldrh	r3, [r7, #8]
 8007318:	429a      	cmp	r2, r3
 800731a:	d3e8      	bcc.n	80072ee <TELEMETRY_Process+0x13a>
			}
			if(checksum % 256 == telem->buffer_rx[telem->index_read_rx + bytes_recquired-1])
 800731c:	8abb      	ldrh	r3, [r7, #20]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	b29a      	uxth	r2, r3
 8007322:	4b16      	ldr	r3, [pc, #88]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007324:	6819      	ldr	r1, [r3, #0]
 8007326:	4b15      	ldr	r3, [pc, #84]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800732e:	4618      	mov	r0, r3
 8007330:	897b      	ldrh	r3, [r7, #10]
 8007332:	4403      	add	r3, r0
 8007334:	3b01      	subs	r3, #1
 8007336:	440b      	add	r3, r1
 8007338:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800733c:	b29b      	uxth	r3, r3
 800733e:	429a      	cmp	r2, r3
 8007340:	d10c      	bne.n	800735c <TELEMETRY_Process+0x1a8>
			{
				DATA_LOGGER_Reception(&telem->buffer_rx[telem->index_read_rx+1]);
 8007342:	4b0e      	ldr	r3, [pc, #56]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	4b0d      	ldr	r3, [pc, #52]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800734e:	3301      	adds	r3, #1
 8007350:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8007354:	4413      	add	r3, r2
 8007356:	4618      	mov	r0, r3
 8007358:	f7fa f9e4 	bl	8001724 <DATA_LOGGER_Reception>
			}
		}
		telem->index_read_rx += bytes_used ;
 800735c:	4b07      	ldr	r3, [pc, #28]	; (800737c <TELEMETRY_Process+0x1c8>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f8b3 162a 	ldrh.w	r1, [r3, #1578]	; 0x62a
 8007364:	4b05      	ldr	r3, [pc, #20]	; (800737c <TELEMETRY_Process+0x1c8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	8afa      	ldrh	r2, [r7, #22]
 800736a:	440a      	add	r2, r1
 800736c:	b292      	uxth	r2, r2
 800736e:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
 8007372:	e000      	b.n	8007376 <TELEMETRY_Process+0x1c2>
				return ;	//We just wait for then next call with hopefully more data available
 8007374:	bf00      	nop
	}

}
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20002060 	.word	0x20002060
 8007380:	51eb851f 	.word	0x51eb851f
 8007384:	cccccccd 	.word	0xcccccccd

08007388 <TELEMETRY_Send_Data>:


void TELEMETRY_Send_Data(uint8_t * data, uint8_t len){
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
	uint8_t to_send[SIZE_PORTION_BUFFER];
	uint32_t checksum = 0 ;
 8007394:	2300      	movs	r3, #0
 8007396:	627b      	str	r3, [r7, #36]	; 0x24


	to_send[0] = '$';
 8007398:	2324      	movs	r3, #36	; 0x24
 800739a:	733b      	strb	r3, [r7, #12]

	for(uint8_t b = 0; b < len; b++){
 800739c:	2300      	movs	r3, #0
 800739e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073a2:	e01d      	b.n	80073e0 <TELEMETRY_Send_Data+0x58>
		to_send[1 + b] = data[b];
 80073a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	441a      	add	r2, r3
 80073ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073b0:	3301      	adds	r3, #1
 80073b2:	7812      	ldrb	r2, [r2, #0]
 80073b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80073b8:	440b      	add	r3, r1
 80073ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
		checksum += (uint32_t)to_send[1 + b];
 80073be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073c2:	3301      	adds	r3, #1
 80073c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80073c8:	4413      	add	r3, r2
 80073ca:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80073ce:	461a      	mov	r2, r3
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	4413      	add	r3, r2
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint8_t b = 0; b < len; b++){
 80073d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073da:	3301      	adds	r3, #1
 80073dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d3dc      	bcc.n	80073a4 <TELEMETRY_Send_Data+0x1c>
	}

	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	3301      	adds	r3, #1
 80073ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80073f6:	440b      	add	r3, r1
 80073f8:	f803 2c1c 	strb.w	r2, [r3, #-28]
	TELEMETRY_Send_Data_Raw(to_send, len+2);
 80073fc:	78fb      	ldrb	r3, [r7, #3]
 80073fe:	3302      	adds	r3, #2
 8007400:	b2da      	uxtb	r2, r3
 8007402:	f107 030c 	add.w	r3, r7, #12
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f805 	bl	8007418 <TELEMETRY_Send_Data_Raw>
}
 800740e:	bf00      	nop
 8007410:	3728      	adds	r7, #40	; 0x28
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <TELEMETRY_Send_Data_Raw>:

void TELEMETRY_Send_Data_Raw(uint8_t * data, uint8_t len){
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]

	//Copie du tableau dans le buffer
	for(uint8_t c = 0; c < len; c++)
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
 8007428:	e017      	b.n	800745a <TELEMETRY_Send_Data_Raw+0x42>
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	18d1      	adds	r1, r2, r3
 8007430:	4b20      	ldr	r3, [pc, #128]	; (80074b4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	4b1f      	ldr	r3, [pc, #124]	; (80074b4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 800743c:	4618      	mov	r0, r3
 800743e:	4603      	mov	r3, r0
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4403      	add	r3, r0
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4618      	mov	r0, r3
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	4403      	add	r3, r0
 800744c:	7809      	ldrb	r1, [r1, #0]
 800744e:	4413      	add	r3, r2
 8007450:	460a      	mov	r2, r1
 8007452:	715a      	strb	r2, [r3, #5]
	for(uint8_t c = 0; c < len; c++)
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	3301      	adds	r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	7bfa      	ldrb	r2, [r7, #15]
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	429a      	cmp	r2, r3
 8007460:	d3e3      	bcc.n	800742a <TELEMETRY_Send_Data_Raw+0x12>
	//On enregistre la taille de la donnée
	telem->len_portion_tx[telem->index_write_tx] = len ;
 8007462:	4b14      	ldr	r3, [pc, #80]	; (80074b4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a13      	ldr	r2, [pc, #76]	; (80074b4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	f8b2 2424 	ldrh.w	r2, [r2, #1060]	; 0x424
 800746e:	4413      	add	r3, r2
 8007470:	78fa      	ldrb	r2, [r7, #3]
 8007472:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed

	//Incrémentation de l'index
	telem->index_write_tx ++ ;
 8007476:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 800747e:	3201      	adds	r2, #1
 8007480:	b292      	uxth	r2, r2
 8007482:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 8007486:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 800748e:	4a09      	ldr	r2, [pc, #36]	; (80074b4 <TELEMETRY_Send_Data_Raw+0x9c>)
 8007490:	6812      	ldr	r2, [r2, #0]
 8007492:	4909      	ldr	r1, [pc, #36]	; (80074b8 <TELEMETRY_Send_Data_Raw+0xa0>)
 8007494:	fba1 0103 	umull	r0, r1, r1, r3
 8007498:	0909      	lsrs	r1, r1, #4
 800749a:	2032      	movs	r0, #50	; 0x32
 800749c:	fb00 f101 	mul.w	r1, r0, r1
 80074a0:	1a5b      	subs	r3, r3, r1
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f8a2 3424 	strh.w	r3, [r2, #1060]	; 0x424
}
 80074a8:	bf00      	nop
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20002060 	.word	0x20002060
 80074b8:	51eb851f 	.word	0x51eb851f

080074bc <TELEMETRY_Idle_Line_Detection>:

void TELEMETRY_Idle_Line_Detection(void){
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
	//On met à jour l'index d'écriture du buffer rx
	telem->index_write_rx = LEN_RX_BUFFER - telem->huart->hdmarx->Instance->NDTR ;
 80074c0:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <TELEMETRY_Idle_Line_Detection+0x2c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <TELEMETRY_Idle_Line_Detection+0x2c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80074d6:	b292      	uxth	r2, r2
 80074d8:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
}
 80074dc:	bf00      	nop
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	20002060 	.word	0x20002060

080074ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80074f0:	4b0e      	ldr	r3, [pc, #56]	; (800752c <HAL_Init+0x40>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a0d      	ldr	r2, [pc, #52]	; (800752c <HAL_Init+0x40>)
 80074f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <HAL_Init+0x40>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0a      	ldr	r2, [pc, #40]	; (800752c <HAL_Init+0x40>)
 8007502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007508:	4b08      	ldr	r3, [pc, #32]	; (800752c <HAL_Init+0x40>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a07      	ldr	r2, [pc, #28]	; (800752c <HAL_Init+0x40>)
 800750e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007514:	2003      	movs	r0, #3
 8007516:	f000 fd41 	bl	8007f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800751a:	2000      	movs	r0, #0
 800751c:	f000 f808 	bl	8007530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007520:	f7ff f87a 	bl	8006618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40023c00 	.word	0x40023c00

08007530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007538:	4b12      	ldr	r3, [pc, #72]	; (8007584 <HAL_InitTick+0x54>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	4b12      	ldr	r3, [pc, #72]	; (8007588 <HAL_InitTick+0x58>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	4619      	mov	r1, r3
 8007542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007546:	fbb3 f3f1 	udiv	r3, r3, r1
 800754a:	fbb2 f3f3 	udiv	r3, r2, r3
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fd59 	bl	8008006 <HAL_SYSTICK_Config>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e00e      	b.n	800757c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b0f      	cmp	r3, #15
 8007562:	d80a      	bhi.n	800757a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007564:	2200      	movs	r2, #0
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	f000 fd21 	bl	8007fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007570:	4a06      	ldr	r2, [pc, #24]	; (800758c <HAL_InitTick+0x5c>)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	e000      	b.n	800757c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20001a64 	.word	0x20001a64
 8007588:	20001a84 	.word	0x20001a84
 800758c:	20001a80 	.word	0x20001a80

08007590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007594:	4b06      	ldr	r3, [pc, #24]	; (80075b0 <HAL_IncTick+0x20>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <HAL_IncTick+0x24>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4413      	add	r3, r2
 80075a0:	4a04      	ldr	r2, [pc, #16]	; (80075b4 <HAL_IncTick+0x24>)
 80075a2:	6013      	str	r3, [r2, #0]
}
 80075a4:	bf00      	nop
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	20001a84 	.word	0x20001a84
 80075b4:	200032d4 	.word	0x200032d4

080075b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
  return uwTick;
 80075bc:	4b03      	ldr	r3, [pc, #12]	; (80075cc <HAL_GetTick+0x14>)
 80075be:	681b      	ldr	r3, [r3, #0]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	200032d4 	.word	0x200032d4

080075d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80075d8:	f7ff ffee 	bl	80075b8 <HAL_GetTick>
 80075dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e8:	d005      	beq.n	80075f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80075ea:	4b09      	ldr	r3, [pc, #36]	; (8007610 <HAL_Delay+0x40>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80075f6:	bf00      	nop
 80075f8:	f7ff ffde 	bl	80075b8 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	429a      	cmp	r2, r3
 8007606:	d8f7      	bhi.n	80075f8 <HAL_Delay+0x28>
  {
  }
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20001a84 	.word	0x20001a84

08007614 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e033      	b.n	8007692 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fe fa6c 	bl	8005b10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	f003 0310 	and.w	r3, r3, #16
 800764e:	2b00      	cmp	r3, #0
 8007650:	d118      	bne.n	8007684 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800765a:	f023 0302 	bic.w	r3, r3, #2
 800765e:	f043 0202 	orr.w	r2, r3, #2
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa4a 	bl	8007b00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	f023 0303 	bic.w	r3, r3, #3
 800767a:	f043 0201 	orr.w	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	641a      	str	r2, [r3, #64]	; 0x40
 8007682:	e001      	b.n	8007688 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
	...

0800769c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d101      	bne.n	80076ba <HAL_ADC_Start_DMA+0x1e>
 80076b6:	2302      	movs	r3, #2
 80076b8:	e0cc      	b.n	8007854 <HAL_ADC_Start_DMA+0x1b8>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d018      	beq.n	8007702 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0201 	orr.w	r2, r2, #1
 80076de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80076e0:	4b5e      	ldr	r3, [pc, #376]	; (800785c <HAL_ADC_Start_DMA+0x1c0>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a5e      	ldr	r2, [pc, #376]	; (8007860 <HAL_ADC_Start_DMA+0x1c4>)
 80076e6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ea:	0c9a      	lsrs	r2, r3, #18
 80076ec:	4613      	mov	r3, r2
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	4413      	add	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80076f4:	e002      	b.n	80076fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1f9      	bne.n	80076f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b01      	cmp	r3, #1
 800770e:	f040 80a0 	bne.w	8007852 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800771a:	f023 0301 	bic.w	r3, r3, #1
 800771e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007730:	2b00      	cmp	r3, #0
 8007732:	d007      	beq.n	8007744 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800773c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800774c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007750:	d106      	bne.n	8007760 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007756:	f023 0206 	bic.w	r2, r3, #6
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	645a      	str	r2, [r3, #68]	; 0x44
 800775e:	e002      	b.n	8007766 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800776e:	4b3d      	ldr	r3, [pc, #244]	; (8007864 <HAL_ADC_Start_DMA+0x1c8>)
 8007770:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	4a3c      	ldr	r2, [pc, #240]	; (8007868 <HAL_ADC_Start_DMA+0x1cc>)
 8007778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	4a3b      	ldr	r2, [pc, #236]	; (800786c <HAL_ADC_Start_DMA+0x1d0>)
 8007780:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007786:	4a3a      	ldr	r2, [pc, #232]	; (8007870 <HAL_ADC_Start_DMA+0x1d4>)
 8007788:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007792:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80077a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	334c      	adds	r3, #76	; 0x4c
 80077be:	4619      	mov	r1, r3
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f000 fcda 	bl	800817c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f003 031f 	and.w	r3, r3, #31
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d12a      	bne.n	800782a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a26      	ldr	r2, [pc, #152]	; (8007874 <HAL_ADC_Start_DMA+0x1d8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d015      	beq.n	800780a <HAL_ADC_Start_DMA+0x16e>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a25      	ldr	r2, [pc, #148]	; (8007878 <HAL_ADC_Start_DMA+0x1dc>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d105      	bne.n	80077f4 <HAL_ADC_Start_DMA+0x158>
 80077e8:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <HAL_ADC_Start_DMA+0x1c8>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00a      	beq.n	800780a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a20      	ldr	r2, [pc, #128]	; (800787c <HAL_ADC_Start_DMA+0x1e0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d129      	bne.n	8007852 <HAL_ADC_Start_DMA+0x1b6>
 80077fe:	4b19      	ldr	r3, [pc, #100]	; (8007864 <HAL_ADC_Start_DMA+0x1c8>)
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f003 031f 	and.w	r3, r3, #31
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d823      	bhi.n	8007852 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d11c      	bne.n	8007852 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007826:	609a      	str	r2, [r3, #8]
 8007828:	e013      	b.n	8007852 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a11      	ldr	r2, [pc, #68]	; (8007874 <HAL_ADC_Start_DMA+0x1d8>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d10e      	bne.n	8007852 <HAL_ADC_Start_DMA+0x1b6>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d107      	bne.n	8007852 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007850:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20001a64 	.word	0x20001a64
 8007860:	431bde83 	.word	0x431bde83
 8007864:	40012300 	.word	0x40012300
 8007868:	08007cf9 	.word	0x08007cf9
 800786c:	08007db3 	.word	0x08007db3
 8007870:	08007dcf 	.word	0x08007dcf
 8007874:	40012000 	.word	0x40012000
 8007878:	40012100 	.word	0x40012100
 800787c:	40012200 	.word	0x40012200

08007880 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_ADC_ConfigChannel+0x1c>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e105      	b.n	8007ae4 <HAL_ADC_ConfigChannel+0x228>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b09      	cmp	r3, #9
 80078e6:	d925      	bls.n	8007934 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68d9      	ldr	r1, [r3, #12]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	4613      	mov	r3, r2
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	4413      	add	r3, r2
 80078fc:	3b1e      	subs	r3, #30
 80078fe:	2207      	movs	r2, #7
 8007900:	fa02 f303 	lsl.w	r3, r2, r3
 8007904:	43da      	mvns	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	400a      	ands	r2, r1
 800790c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68d9      	ldr	r1, [r3, #12]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	4618      	mov	r0, r3
 8007920:	4603      	mov	r3, r0
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	4403      	add	r3, r0
 8007926:	3b1e      	subs	r3, #30
 8007928:	409a      	lsls	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	60da      	str	r2, [r3, #12]
 8007932:	e022      	b.n	800797a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6919      	ldr	r1, [r3, #16]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	4613      	mov	r3, r2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4413      	add	r3, r2
 8007948:	2207      	movs	r2, #7
 800794a:	fa02 f303 	lsl.w	r3, r2, r3
 800794e:	43da      	mvns	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	400a      	ands	r2, r1
 8007956:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6919      	ldr	r1, [r3, #16]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	4618      	mov	r0, r3
 800796a:	4603      	mov	r3, r0
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	4403      	add	r3, r0
 8007970:	409a      	lsls	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2b06      	cmp	r3, #6
 8007980:	d824      	bhi.n	80079cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	3b05      	subs	r3, #5
 8007994:	221f      	movs	r2, #31
 8007996:	fa02 f303 	lsl.w	r3, r2, r3
 800799a:	43da      	mvns	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	400a      	ands	r2, r1
 80079a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	4618      	mov	r0, r3
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	3b05      	subs	r3, #5
 80079be:	fa00 f203 	lsl.w	r2, r0, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	635a      	str	r2, [r3, #52]	; 0x34
 80079ca:	e04c      	b.n	8007a66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b0c      	cmp	r3, #12
 80079d2:	d824      	bhi.n	8007a1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	3b23      	subs	r3, #35	; 0x23
 80079e6:	221f      	movs	r2, #31
 80079e8:	fa02 f303 	lsl.w	r3, r2, r3
 80079ec:	43da      	mvns	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	400a      	ands	r2, r1
 80079f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	4618      	mov	r0, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3b23      	subs	r3, #35	; 0x23
 8007a10:	fa00 f203 	lsl.w	r2, r0, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8007a1c:	e023      	b.n	8007a66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	3b41      	subs	r3, #65	; 0x41
 8007a30:	221f      	movs	r2, #31
 8007a32:	fa02 f303 	lsl.w	r3, r2, r3
 8007a36:	43da      	mvns	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	400a      	ands	r2, r1
 8007a3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	3b41      	subs	r3, #65	; 0x41
 8007a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a66:	4b22      	ldr	r3, [pc, #136]	; (8007af0 <HAL_ADC_ConfigChannel+0x234>)
 8007a68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a21      	ldr	r2, [pc, #132]	; (8007af4 <HAL_ADC_ConfigChannel+0x238>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d109      	bne.n	8007a88 <HAL_ADC_ConfigChannel+0x1cc>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b12      	cmp	r3, #18
 8007a7a:	d105      	bne.n	8007a88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a19      	ldr	r2, [pc, #100]	; (8007af4 <HAL_ADC_ConfigChannel+0x238>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d123      	bne.n	8007ada <HAL_ADC_ConfigChannel+0x21e>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b10      	cmp	r3, #16
 8007a98:	d003      	beq.n	8007aa2 <HAL_ADC_ConfigChannel+0x1e6>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b11      	cmp	r3, #17
 8007aa0:	d11b      	bne.n	8007ada <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b10      	cmp	r3, #16
 8007ab4:	d111      	bne.n	8007ada <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <HAL_ADC_ConfigChannel+0x23c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a10      	ldr	r2, [pc, #64]	; (8007afc <HAL_ADC_ConfigChannel+0x240>)
 8007abc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac0:	0c9a      	lsrs	r2, r3, #18
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007acc:	e002      	b.n	8007ad4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f9      	bne.n	8007ace <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	40012300 	.word	0x40012300
 8007af4:	40012000 	.word	0x40012000
 8007af8:	20001a64 	.word	0x20001a64
 8007afc:	431bde83 	.word	0x431bde83

08007b00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b08:	4b79      	ldr	r3, [pc, #484]	; (8007cf0 <ADC_Init+0x1f0>)
 8007b0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	431a      	orrs	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6859      	ldr	r1, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	021a      	lsls	r2, r3, #8
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6859      	ldr	r1, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6899      	ldr	r1, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b92:	4a58      	ldr	r2, [pc, #352]	; (8007cf4 <ADC_Init+0x1f4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d022      	beq.n	8007bde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ba6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6899      	ldr	r1, [r3, #8]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6899      	ldr	r1, [r3, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	609a      	str	r2, [r3, #8]
 8007bdc:	e00f      	b.n	8007bfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f022 0202 	bic.w	r2, r2, #2
 8007c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6899      	ldr	r1, [r3, #8]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7e1b      	ldrb	r3, [r3, #24]
 8007c18:	005a      	lsls	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01b      	beq.n	8007c64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	3b01      	subs	r3, #1
 8007c58:	035a      	lsls	r2, r3, #13
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	605a      	str	r2, [r3, #4]
 8007c62:	e007      	b.n	8007c74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	051a      	lsls	r2, r3, #20
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6899      	ldr	r1, [r3, #8]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cb6:	025a      	lsls	r2, r3, #9
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6899      	ldr	r1, [r3, #8]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	029a      	lsls	r2, r3, #10
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	609a      	str	r2, [r3, #8]
}
 8007ce4:	bf00      	nop
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	40012300 	.word	0x40012300
 8007cf4:	0f000001 	.word	0x0f000001

08007cf8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d13c      	bne.n	8007d8c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d12b      	bne.n	8007d84 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d127      	bne.n	8007d84 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d006      	beq.n	8007d50 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d119      	bne.n	8007d84 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0220 	bic.w	r2, r2, #32
 8007d5e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d105      	bne.n	8007d84 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	f043 0201 	orr.w	r2, r3, #1
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff fd7b 	bl	8007880 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d8a:	e00e      	b.n	8007daa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	f003 0310 	and.w	r3, r3, #16
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f7ff fd85 	bl	80078a8 <HAL_ADC_ErrorCallback>
}
 8007d9e:	e004      	b.n	8007daa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	4798      	blx	r3
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f7ff fd67 	bl	8007894 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dda:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2240      	movs	r2, #64	; 0x40
 8007de0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de6:	f043 0204 	orr.w	r2, r3, #4
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7ff fd5a 	bl	80078a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007df4:	bf00      	nop
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <__NVIC_SetPriorityGrouping+0x44>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e18:	4013      	ands	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e2e:	4a04      	ldr	r2, [pc, #16]	; (8007e40 <__NVIC_SetPriorityGrouping+0x44>)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	60d3      	str	r3, [r2, #12]
}
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	e000ed00 	.word	0xe000ed00

08007e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <__NVIC_GetPriorityGrouping+0x18>)
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	0a1b      	lsrs	r3, r3, #8
 8007e4e:	f003 0307 	and.w	r3, r3, #7
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	e000ed00 	.word	0xe000ed00

08007e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	db0b      	blt.n	8007e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	f003 021f 	and.w	r2, r3, #31
 8007e78:	4907      	ldr	r1, [pc, #28]	; (8007e98 <__NVIC_EnableIRQ+0x38>)
 8007e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	2001      	movs	r0, #1
 8007e82:	fa00 f202 	lsl.w	r2, r0, r2
 8007e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	e000e100 	.word	0xe000e100

08007e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	6039      	str	r1, [r7, #0]
 8007ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	db0a      	blt.n	8007ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	490c      	ldr	r1, [pc, #48]	; (8007ee8 <__NVIC_SetPriority+0x4c>)
 8007eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eba:	0112      	lsls	r2, r2, #4
 8007ebc:	b2d2      	uxtb	r2, r2
 8007ebe:	440b      	add	r3, r1
 8007ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ec4:	e00a      	b.n	8007edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	4908      	ldr	r1, [pc, #32]	; (8007eec <__NVIC_SetPriority+0x50>)
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	3b04      	subs	r3, #4
 8007ed4:	0112      	lsls	r2, r2, #4
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	440b      	add	r3, r1
 8007eda:	761a      	strb	r2, [r3, #24]
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	e000e100 	.word	0xe000e100
 8007eec:	e000ed00 	.word	0xe000ed00

08007ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b089      	sub	sp, #36	; 0x24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	f1c3 0307 	rsb	r3, r3, #7
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	bf28      	it	cs
 8007f0e:	2304      	movcs	r3, #4
 8007f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	3304      	adds	r3, #4
 8007f16:	2b06      	cmp	r3, #6
 8007f18:	d902      	bls.n	8007f20 <NVIC_EncodePriority+0x30>
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	3b03      	subs	r3, #3
 8007f1e:	e000      	b.n	8007f22 <NVIC_EncodePriority+0x32>
 8007f20:	2300      	movs	r3, #0
 8007f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43da      	mvns	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	401a      	ands	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f38:	f04f 31ff 	mov.w	r1, #4294967295
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f42:	43d9      	mvns	r1, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f48:	4313      	orrs	r3, r2
         );
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3724      	adds	r7, #36	; 0x24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
	...

08007f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f68:	d301      	bcc.n	8007f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e00f      	b.n	8007f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f6e:	4a0a      	ldr	r2, [pc, #40]	; (8007f98 <SysTick_Config+0x40>)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f76:	210f      	movs	r1, #15
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	f7ff ff8e 	bl	8007e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f80:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <SysTick_Config+0x40>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f86:	4b04      	ldr	r3, [pc, #16]	; (8007f98 <SysTick_Config+0x40>)
 8007f88:	2207      	movs	r2, #7
 8007f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	e000e010 	.word	0xe000e010

08007f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff ff29 	bl	8007dfc <__NVIC_SetPriorityGrouping>
}
 8007faa:	bf00      	nop
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b086      	sub	sp, #24
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	4603      	mov	r3, r0
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fc4:	f7ff ff3e 	bl	8007e44 <__NVIC_GetPriorityGrouping>
 8007fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	6978      	ldr	r0, [r7, #20]
 8007fd0:	f7ff ff8e 	bl	8007ef0 <NVIC_EncodePriority>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff ff5d 	bl	8007e9c <__NVIC_SetPriority>
}
 8007fe2:	bf00      	nop
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7ff ff31 	bl	8007e60 <__NVIC_EnableIRQ>
}
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff ffa2 	bl	8007f58 <SysTick_Config>
 8008014:	4603      	mov	r3, r0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800802c:	f7ff fac4 	bl	80075b8 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e099      	b.n	8008170 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800805c:	e00f      	b.n	800807e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800805e:	f7ff faab 	bl	80075b8 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b05      	cmp	r3, #5
 800806a:	d908      	bls.n	800807e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2203      	movs	r2, #3
 8008076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e078      	b.n	8008170 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e8      	bne.n	800805e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4b38      	ldr	r3, [pc, #224]	; (8008178 <HAL_DMA_Init+0x158>)
 8008098:	4013      	ands	r3, r2
 800809a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d107      	bne.n	80080e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e0:	4313      	orrs	r3, r2
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f023 0307 	bic.w	r3, r3, #7
 80080fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	4313      	orrs	r3, r2
 8008108:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b04      	cmp	r3, #4
 8008110:	d117      	bne.n	8008142 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	4313      	orrs	r3, r2
 800811a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00e      	beq.n	8008142 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 faab 	bl	8008680 <DMA_CheckFifoParam>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2240      	movs	r2, #64	; 0x40
 8008134:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800813e:	2301      	movs	r3, #1
 8008140:	e016      	b.n	8008170 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa62 	bl	8008614 <DMA_CalcBaseAndBitshift>
 8008150:	4603      	mov	r3, r0
 8008152:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008158:	223f      	movs	r2, #63	; 0x3f
 800815a:	409a      	lsls	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	f010803f 	.word	0xf010803f

0800817c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008192:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_DMA_Start_IT+0x26>
 800819e:	2302      	movs	r3, #2
 80081a0:	e040      	b.n	8008224 <HAL_DMA_Start_IT+0xa8>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d12f      	bne.n	8008216 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2202      	movs	r2, #2
 80081ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 f9f4 	bl	80085b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d4:	223f      	movs	r2, #63	; 0x3f
 80081d6:	409a      	lsls	r2, r3
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0216 	orr.w	r2, r2, #22
 80081ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d007      	beq.n	8008204 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0208 	orr.w	r2, r2, #8
 8008202:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0201 	orr.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	e005      	b.n	8008222 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800821e:	2302      	movs	r3, #2
 8008220:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008222:	7dfb      	ldrb	r3, [r7, #23]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d004      	beq.n	800824a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2280      	movs	r2, #128	; 0x80
 8008244:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e00c      	b.n	8008264 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2205      	movs	r2, #5
 800824e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800827c:	4b92      	ldr	r3, [pc, #584]	; (80084c8 <HAL_DMA_IRQHandler+0x258>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a92      	ldr	r2, [pc, #584]	; (80084cc <HAL_DMA_IRQHandler+0x25c>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	0a9b      	lsrs	r3, r3, #10
 8008288:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800829a:	2208      	movs	r2, #8
 800829c:	409a      	lsls	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4013      	ands	r3, r2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01a      	beq.n	80082dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d013      	beq.n	80082dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0204 	bic.w	r2, r2, #4
 80082c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c8:	2208      	movs	r2, #8
 80082ca:	409a      	lsls	r2, r3
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d4:	f043 0201 	orr.w	r2, r3, #1
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e0:	2201      	movs	r2, #1
 80082e2:	409a      	lsls	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4013      	ands	r3, r2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d012      	beq.n	8008312 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00b      	beq.n	8008312 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082fe:	2201      	movs	r2, #1
 8008300:	409a      	lsls	r2, r3
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830a:	f043 0202 	orr.w	r2, r3, #2
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008316:	2204      	movs	r2, #4
 8008318:	409a      	lsls	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4013      	ands	r3, r2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d012      	beq.n	8008348 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008334:	2204      	movs	r2, #4
 8008336:	409a      	lsls	r2, r3
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008340:	f043 0204 	orr.w	r2, r3, #4
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800834c:	2210      	movs	r2, #16
 800834e:	409a      	lsls	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4013      	ands	r3, r2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d043      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0308 	and.w	r3, r3, #8
 8008362:	2b00      	cmp	r3, #0
 8008364:	d03c      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800836a:	2210      	movs	r2, #16
 800836c:	409a      	lsls	r2, r3
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d018      	beq.n	80083b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d108      	bne.n	80083a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	2b00      	cmp	r3, #0
 8008394:	d024      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	4798      	blx	r3
 800839e:	e01f      	b.n	80083e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d01b      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	4798      	blx	r3
 80083b0:	e016      	b.n	80083e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d107      	bne.n	80083d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0208 	bic.w	r2, r2, #8
 80083ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e4:	2220      	movs	r2, #32
 80083e6:	409a      	lsls	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4013      	ands	r3, r2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 808e 	beq.w	800850e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8086 	beq.w	800850e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008406:	2220      	movs	r2, #32
 8008408:	409a      	lsls	r2, r3
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b05      	cmp	r3, #5
 8008418:	d136      	bne.n	8008488 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0216 	bic.w	r2, r2, #22
 8008428:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	695a      	ldr	r2, [r3, #20]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008438:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	2b00      	cmp	r3, #0
 8008440:	d103      	bne.n	800844a <HAL_DMA_IRQHandler+0x1da>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0208 	bic.w	r2, r2, #8
 8008458:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800845e:	223f      	movs	r2, #63	; 0x3f
 8008460:	409a      	lsls	r2, r3
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847a:	2b00      	cmp	r3, #0
 800847c:	d07d      	beq.n	800857a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
        }
        return;
 8008486:	e078      	b.n	800857a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d01c      	beq.n	80084d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d108      	bne.n	80084b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d030      	beq.n	800850e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
 80084b4:	e02b      	b.n	800850e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d027      	beq.n	800850e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
 80084c6:	e022      	b.n	800850e <HAL_DMA_IRQHandler+0x29e>
 80084c8:	20001a64 	.word	0x20001a64
 80084cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10f      	bne.n	80084fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0210 	bic.w	r2, r2, #16
 80084ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008512:	2b00      	cmp	r3, #0
 8008514:	d032      	beq.n	800857c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d022      	beq.n	8008568 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2205      	movs	r2, #5
 8008526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0201 	bic.w	r2, r2, #1
 8008538:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	3301      	adds	r3, #1
 800853e:	60bb      	str	r3, [r7, #8]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	429a      	cmp	r2, r3
 8008544:	d307      	bcc.n	8008556 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1f2      	bne.n	800853a <HAL_DMA_IRQHandler+0x2ca>
 8008554:	e000      	b.n	8008558 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008556:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
 8008578:	e000      	b.n	800857c <HAL_DMA_IRQHandler+0x30c>
        return;
 800857a:	bf00      	nop
    }
  }
}
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop

08008584 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008592:	b2db      	uxtb	r3, r3
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b40      	cmp	r3, #64	; 0x40
 80085e4:	d108      	bne.n	80085f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80085f6:	e007      	b.n	8008608 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	60da      	str	r2, [r3, #12]
}
 8008608:	bf00      	nop
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	3b10      	subs	r3, #16
 8008624:	4a14      	ldr	r2, [pc, #80]	; (8008678 <DMA_CalcBaseAndBitshift+0x64>)
 8008626:	fba2 2303 	umull	r2, r3, r2, r3
 800862a:	091b      	lsrs	r3, r3, #4
 800862c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800862e:	4a13      	ldr	r2, [pc, #76]	; (800867c <DMA_CalcBaseAndBitshift+0x68>)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4413      	add	r3, r2
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b03      	cmp	r3, #3
 8008640:	d909      	bls.n	8008656 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800864a:	f023 0303 	bic.w	r3, r3, #3
 800864e:	1d1a      	adds	r2, r3, #4
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	659a      	str	r2, [r3, #88]	; 0x58
 8008654:	e007      	b.n	8008666 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800865e:	f023 0303 	bic.w	r3, r3, #3
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	aaaaaaab 	.word	0xaaaaaaab
 800867c:	08013808 	.word	0x08013808

08008680 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d11f      	bne.n	80086da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b03      	cmp	r3, #3
 800869e:	d855      	bhi.n	800874c <DMA_CheckFifoParam+0xcc>
 80086a0:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <DMA_CheckFifoParam+0x28>)
 80086a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a6:	bf00      	nop
 80086a8:	080086b9 	.word	0x080086b9
 80086ac:	080086cb 	.word	0x080086cb
 80086b0:	080086b9 	.word	0x080086b9
 80086b4:	0800874d 	.word	0x0800874d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d045      	beq.n	8008750 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086c8:	e042      	b.n	8008750 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086d2:	d13f      	bne.n	8008754 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086d8:	e03c      	b.n	8008754 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086e2:	d121      	bne.n	8008728 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d836      	bhi.n	8008758 <DMA_CheckFifoParam+0xd8>
 80086ea:	a201      	add	r2, pc, #4	; (adr r2, 80086f0 <DMA_CheckFifoParam+0x70>)
 80086ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008707 	.word	0x08008707
 80086f8:	08008701 	.word	0x08008701
 80086fc:	08008719 	.word	0x08008719
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	73fb      	strb	r3, [r7, #15]
      break;
 8008704:	e02f      	b.n	8008766 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d024      	beq.n	800875c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008716:	e021      	b.n	800875c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008720:	d11e      	bne.n	8008760 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008726:	e01b      	b.n	8008760 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b02      	cmp	r3, #2
 800872c:	d902      	bls.n	8008734 <DMA_CheckFifoParam+0xb4>
 800872e:	2b03      	cmp	r3, #3
 8008730:	d003      	beq.n	800873a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008732:	e018      	b.n	8008766 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	73fb      	strb	r3, [r7, #15]
      break;
 8008738:	e015      	b.n	8008766 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00e      	beq.n	8008764 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	73fb      	strb	r3, [r7, #15]
      break;
 800874a:	e00b      	b.n	8008764 <DMA_CheckFifoParam+0xe4>
      break;
 800874c:	bf00      	nop
 800874e:	e00a      	b.n	8008766 <DMA_CheckFifoParam+0xe6>
      break;
 8008750:	bf00      	nop
 8008752:	e008      	b.n	8008766 <DMA_CheckFifoParam+0xe6>
      break;
 8008754:	bf00      	nop
 8008756:	e006      	b.n	8008766 <DMA_CheckFifoParam+0xe6>
      break;
 8008758:	bf00      	nop
 800875a:	e004      	b.n	8008766 <DMA_CheckFifoParam+0xe6>
      break;
 800875c:	bf00      	nop
 800875e:	e002      	b.n	8008766 <DMA_CheckFifoParam+0xe6>
      break;   
 8008760:	bf00      	nop
 8008762:	e000      	b.n	8008766 <DMA_CheckFifoParam+0xe6>
      break;
 8008764:	bf00      	nop
    }
  } 
  
  return status; 
 8008766:	7bfb      	ldrb	r3, [r7, #15]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008774:	b480      	push	{r7}
 8008776:	b089      	sub	sp, #36	; 0x24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800877e:	2300      	movs	r3, #0
 8008780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008782:	2300      	movs	r3, #0
 8008784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008786:	2300      	movs	r3, #0
 8008788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
 800878e:	e16b      	b.n	8008a68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008790:	2201      	movs	r2, #1
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	4013      	ands	r3, r2
 80087a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	f040 815a 	bne.w	8008a62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d00b      	beq.n	80087ce <HAL_GPIO_Init+0x5a>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d007      	beq.n	80087ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80087c2:	2b11      	cmp	r3, #17
 80087c4:	d003      	beq.n	80087ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2b12      	cmp	r3, #18
 80087cc:	d130      	bne.n	8008830 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	2203      	movs	r2, #3
 80087da:	fa02 f303 	lsl.w	r3, r2, r3
 80087de:	43db      	mvns	r3, r3
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	4013      	ands	r3, r2
 80087e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	fa02 f303 	lsl.w	r3, r2, r3
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008804:	2201      	movs	r2, #1
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	fa02 f303 	lsl.w	r3, r2, r3
 800880c:	43db      	mvns	r3, r3
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	4013      	ands	r3, r2
 8008812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	091b      	lsrs	r3, r3, #4
 800881a:	f003 0201 	and.w	r2, r3, #1
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	fa02 f303 	lsl.w	r3, r2, r3
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	4313      	orrs	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	2203      	movs	r2, #3
 800883c:	fa02 f303 	lsl.w	r3, r2, r3
 8008840:	43db      	mvns	r3, r3
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	4013      	ands	r3, r2
 8008846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	fa02 f303 	lsl.w	r3, r2, r3
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	4313      	orrs	r3, r2
 8008858:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d003      	beq.n	8008870 <HAL_GPIO_Init+0xfc>
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	2b12      	cmp	r3, #18
 800886e:	d123      	bne.n	80088b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	08da      	lsrs	r2, r3, #3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3208      	adds	r2, #8
 8008878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	f003 0307 	and.w	r3, r3, #7
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	220f      	movs	r2, #15
 8008888:	fa02 f303 	lsl.w	r3, r2, r3
 800888c:	43db      	mvns	r3, r3
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	4013      	ands	r3, r2
 8008892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	fa02 f303 	lsl.w	r3, r2, r3
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	08da      	lsrs	r2, r3, #3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3208      	adds	r2, #8
 80088b2:	69b9      	ldr	r1, [r7, #24]
 80088b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	2203      	movs	r2, #3
 80088c4:	fa02 f303 	lsl.w	r3, r2, r3
 80088c8:	43db      	mvns	r3, r3
 80088ca:	69ba      	ldr	r2, [r7, #24]
 80088cc:	4013      	ands	r3, r2
 80088ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 0203 	and.w	r2, r3, #3
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	fa02 f303 	lsl.w	r3, r2, r3
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 80b4 	beq.w	8008a62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088fa:	2300      	movs	r3, #0
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	4b5f      	ldr	r3, [pc, #380]	; (8008a7c <HAL_GPIO_Init+0x308>)
 8008900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008902:	4a5e      	ldr	r2, [pc, #376]	; (8008a7c <HAL_GPIO_Init+0x308>)
 8008904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008908:	6453      	str	r3, [r2, #68]	; 0x44
 800890a:	4b5c      	ldr	r3, [pc, #368]	; (8008a7c <HAL_GPIO_Init+0x308>)
 800890c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008916:	4a5a      	ldr	r2, [pc, #360]	; (8008a80 <HAL_GPIO_Init+0x30c>)
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	089b      	lsrs	r3, r3, #2
 800891c:	3302      	adds	r3, #2
 800891e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	220f      	movs	r2, #15
 800892e:	fa02 f303 	lsl.w	r3, r2, r3
 8008932:	43db      	mvns	r3, r3
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	4013      	ands	r3, r2
 8008938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a51      	ldr	r2, [pc, #324]	; (8008a84 <HAL_GPIO_Init+0x310>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d02b      	beq.n	800899a <HAL_GPIO_Init+0x226>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a50      	ldr	r2, [pc, #320]	; (8008a88 <HAL_GPIO_Init+0x314>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d025      	beq.n	8008996 <HAL_GPIO_Init+0x222>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a4f      	ldr	r2, [pc, #316]	; (8008a8c <HAL_GPIO_Init+0x318>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d01f      	beq.n	8008992 <HAL_GPIO_Init+0x21e>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a4e      	ldr	r2, [pc, #312]	; (8008a90 <HAL_GPIO_Init+0x31c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d019      	beq.n	800898e <HAL_GPIO_Init+0x21a>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a4d      	ldr	r2, [pc, #308]	; (8008a94 <HAL_GPIO_Init+0x320>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d013      	beq.n	800898a <HAL_GPIO_Init+0x216>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a4c      	ldr	r2, [pc, #304]	; (8008a98 <HAL_GPIO_Init+0x324>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d00d      	beq.n	8008986 <HAL_GPIO_Init+0x212>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a4b      	ldr	r2, [pc, #300]	; (8008a9c <HAL_GPIO_Init+0x328>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d007      	beq.n	8008982 <HAL_GPIO_Init+0x20e>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a4a      	ldr	r2, [pc, #296]	; (8008aa0 <HAL_GPIO_Init+0x32c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d101      	bne.n	800897e <HAL_GPIO_Init+0x20a>
 800897a:	2307      	movs	r3, #7
 800897c:	e00e      	b.n	800899c <HAL_GPIO_Init+0x228>
 800897e:	2308      	movs	r3, #8
 8008980:	e00c      	b.n	800899c <HAL_GPIO_Init+0x228>
 8008982:	2306      	movs	r3, #6
 8008984:	e00a      	b.n	800899c <HAL_GPIO_Init+0x228>
 8008986:	2305      	movs	r3, #5
 8008988:	e008      	b.n	800899c <HAL_GPIO_Init+0x228>
 800898a:	2304      	movs	r3, #4
 800898c:	e006      	b.n	800899c <HAL_GPIO_Init+0x228>
 800898e:	2303      	movs	r3, #3
 8008990:	e004      	b.n	800899c <HAL_GPIO_Init+0x228>
 8008992:	2302      	movs	r3, #2
 8008994:	e002      	b.n	800899c <HAL_GPIO_Init+0x228>
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <HAL_GPIO_Init+0x228>
 800899a:	2300      	movs	r3, #0
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	f002 0203 	and.w	r2, r2, #3
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	4093      	lsls	r3, r2
 80089a6:	69ba      	ldr	r2, [r7, #24]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089ac:	4934      	ldr	r1, [pc, #208]	; (8008a80 <HAL_GPIO_Init+0x30c>)
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	089b      	lsrs	r3, r3, #2
 80089b2:	3302      	adds	r3, #2
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80089ba:	4b3a      	ldr	r3, [pc, #232]	; (8008aa4 <HAL_GPIO_Init+0x330>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	43db      	mvns	r3, r3
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	4013      	ands	r3, r2
 80089c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80089d6:	69ba      	ldr	r2, [r7, #24]
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	4313      	orrs	r3, r2
 80089dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80089de:	4a31      	ldr	r2, [pc, #196]	; (8008aa4 <HAL_GPIO_Init+0x330>)
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80089e4:	4b2f      	ldr	r3, [pc, #188]	; (8008aa4 <HAL_GPIO_Init+0x330>)
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	43db      	mvns	r3, r3
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	4013      	ands	r3, r2
 80089f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008a08:	4a26      	ldr	r2, [pc, #152]	; (8008aa4 <HAL_GPIO_Init+0x330>)
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a0e:	4b25      	ldr	r3, [pc, #148]	; (8008aa4 <HAL_GPIO_Init+0x330>)
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	43db      	mvns	r3, r3
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008a32:	4a1c      	ldr	r2, [pc, #112]	; (8008aa4 <HAL_GPIO_Init+0x330>)
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a38:	4b1a      	ldr	r3, [pc, #104]	; (8008aa4 <HAL_GPIO_Init+0x330>)
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	43db      	mvns	r3, r3
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	4013      	ands	r3, r2
 8008a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d003      	beq.n	8008a5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008a5c:	4a11      	ldr	r2, [pc, #68]	; (8008aa4 <HAL_GPIO_Init+0x330>)
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	3301      	adds	r3, #1
 8008a66:	61fb      	str	r3, [r7, #28]
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	2b0f      	cmp	r3, #15
 8008a6c:	f67f ae90 	bls.w	8008790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008a70:	bf00      	nop
 8008a72:	3724      	adds	r7, #36	; 0x24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	40023800 	.word	0x40023800
 8008a80:	40013800 	.word	0x40013800
 8008a84:	40020000 	.word	0x40020000
 8008a88:	40020400 	.word	0x40020400
 8008a8c:	40020800 	.word	0x40020800
 8008a90:	40020c00 	.word	0x40020c00
 8008a94:	40021000 	.word	0x40021000
 8008a98:	40021400 	.word	0x40021400
 8008a9c:	40021800 	.word	0x40021800
 8008aa0:	40021c00 	.word	0x40021c00
 8008aa4:	40013c00 	.word	0x40013c00

08008aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	807b      	strh	r3, [r7, #2]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ab8:	787b      	ldrb	r3, [r7, #1]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008abe:	887a      	ldrh	r2, [r7, #2]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008ac4:	e003      	b.n	8008ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008ac6:	887b      	ldrh	r3, [r7, #2]
 8008ac8:	041a      	lsls	r2, r3, #16
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	619a      	str	r2, [r3, #24]
}
 8008ace:	bf00      	nop
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
	...

08008adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e11f      	b.n	8008d2e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7fd f9ea 	bl	8005edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2224      	movs	r2, #36	; 0x24
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0201 	bic.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008b40:	f003 fb36 	bl	800c1b0 <HAL_RCC_GetPCLK1Freq>
 8008b44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	4a7b      	ldr	r2, [pc, #492]	; (8008d38 <HAL_I2C_Init+0x25c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d807      	bhi.n	8008b60 <HAL_I2C_Init+0x84>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4a7a      	ldr	r2, [pc, #488]	; (8008d3c <HAL_I2C_Init+0x260>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	bf94      	ite	ls
 8008b58:	2301      	movls	r3, #1
 8008b5a:	2300      	movhi	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	e006      	b.n	8008b6e <HAL_I2C_Init+0x92>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4a77      	ldr	r2, [pc, #476]	; (8008d40 <HAL_I2C_Init+0x264>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	bf94      	ite	ls
 8008b68:	2301      	movls	r3, #1
 8008b6a:	2300      	movhi	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e0db      	b.n	8008d2e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4a72      	ldr	r2, [pc, #456]	; (8008d44 <HAL_I2C_Init+0x268>)
 8008b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7e:	0c9b      	lsrs	r3, r3, #18
 8008b80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	4a64      	ldr	r2, [pc, #400]	; (8008d38 <HAL_I2C_Init+0x25c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d802      	bhi.n	8008bb0 <HAL_I2C_Init+0xd4>
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	3301      	adds	r3, #1
 8008bae:	e009      	b.n	8008bc4 <HAL_I2C_Init+0xe8>
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008bb6:	fb02 f303 	mul.w	r3, r2, r3
 8008bba:	4a63      	ldr	r2, [pc, #396]	; (8008d48 <HAL_I2C_Init+0x26c>)
 8008bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc0:	099b      	lsrs	r3, r3, #6
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008bd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	4956      	ldr	r1, [pc, #344]	; (8008d38 <HAL_I2C_Init+0x25c>)
 8008be0:	428b      	cmp	r3, r1
 8008be2:	d80d      	bhi.n	8008c00 <HAL_I2C_Init+0x124>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	1e59      	subs	r1, r3, #1
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	bf38      	it	cc
 8008bfc:	2304      	movcc	r3, #4
 8008bfe:	e04f      	b.n	8008ca0 <HAL_I2C_Init+0x1c4>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d111      	bne.n	8008c2c <HAL_I2C_Init+0x150>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	1e58      	subs	r0, r3, #1
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6859      	ldr	r1, [r3, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	440b      	add	r3, r1
 8008c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bf0c      	ite	eq
 8008c24:	2301      	moveq	r3, #1
 8008c26:	2300      	movne	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	e012      	b.n	8008c52 <HAL_I2C_Init+0x176>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	1e58      	subs	r0, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6859      	ldr	r1, [r3, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	440b      	add	r3, r1
 8008c3a:	0099      	lsls	r1, r3, #2
 8008c3c:	440b      	add	r3, r1
 8008c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c42:	3301      	adds	r3, #1
 8008c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	bf0c      	ite	eq
 8008c4c:	2301      	moveq	r3, #1
 8008c4e:	2300      	movne	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <HAL_I2C_Init+0x17e>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e022      	b.n	8008ca0 <HAL_I2C_Init+0x1c4>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10e      	bne.n	8008c80 <HAL_I2C_Init+0x1a4>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	1e58      	subs	r0, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6859      	ldr	r1, [r3, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	440b      	add	r3, r1
 8008c70:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c74:	3301      	adds	r3, #1
 8008c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c7e:	e00f      	b.n	8008ca0 <HAL_I2C_Init+0x1c4>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	1e58      	subs	r0, r3, #1
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	0099      	lsls	r1, r3, #2
 8008c90:	440b      	add	r3, r1
 8008c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c96:	3301      	adds	r3, #1
 8008c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	6809      	ldr	r1, [r1, #0]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	69da      	ldr	r2, [r3, #28]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008cce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6911      	ldr	r1, [r2, #16]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	68d2      	ldr	r2, [r2, #12]
 8008cda:	4311      	orrs	r1, r2
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	6812      	ldr	r2, [r2, #0]
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	695a      	ldr	r2, [r3, #20]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f042 0201 	orr.w	r2, r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	000186a0 	.word	0x000186a0
 8008d3c:	001e847f 	.word	0x001e847f
 8008d40:	003d08ff 	.word	0x003d08ff
 8008d44:	431bde83 	.word	0x431bde83
 8008d48:	10624dd3 	.word	0x10624dd3

08008d4c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	607a      	str	r2, [r7, #4]
 8008d56:	461a      	mov	r2, r3
 8008d58:	460b      	mov	r3, r1
 8008d5a:	817b      	strh	r3, [r7, #10]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	f040 80f4 	bne.w	8008f5a <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008d72:	4b7c      	ldr	r3, [pc, #496]	; (8008f64 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	08db      	lsrs	r3, r3, #3
 8008d78:	4a7b      	ldr	r2, [pc, #492]	; (8008f68 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8008d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d7e:	0a1a      	lsrs	r2, r3, #8
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	009a      	lsls	r2, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d116      	bne.n	8008dc6 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db2:	f043 0220 	orr.w	r2, r3, #32
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e0ca      	b.n	8008f5c <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d0db      	beq.n	8008d8c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_I2C_Master_Transmit_DMA+0x96>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e0bc      	b.n	8008f5c <HAL_I2C_Master_Transmit_DMA+0x210>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d007      	beq.n	8008e08 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0201 	orr.w	r2, r2, #1
 8008e06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2221      	movs	r2, #33	; 0x21
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2210      	movs	r2, #16
 8008e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	893a      	ldrh	r2, [r7, #8]
 8008e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4a49      	ldr	r2, [pc, #292]	; (8008f6c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8008e48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8008e4a:	897a      	ldrh	r2, [r7, #10]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d062      	beq.n	8008f1e <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5c:	4a44      	ldr	r2, [pc, #272]	; (8008f70 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8008e5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e64:	4a43      	ldr	r2, [pc, #268]	; (8008f74 <HAL_I2C_Master_Transmit_DMA+0x228>)
 8008e66:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e74:	2200      	movs	r2, #0
 8008e76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e84:	2200      	movs	r2, #0
 8008e86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	4619      	mov	r1, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3310      	adds	r3, #16
 8008e98:	461a      	mov	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e9e:	f7ff f96d 	bl	800817c <HAL_DMA_Start_IT>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d124      	bne.n	8008ef6 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008eba:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eca:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008ee2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ef2:	605a      	str	r2, [r3, #4]
 8008ef4:	e02f      	b.n	8008f56 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0a:	f043 0210 	orr.w	r2, r3, #16
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e01e      	b.n	8008f5c <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f2c:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f3c:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008f54:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	e000      	b.n	8008f5c <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8008f5a:	2302      	movs	r3, #2
  }
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	20001a64 	.word	0x20001a64
 8008f68:	14f8b589 	.word	0x14f8b589
 8008f6c:	ffff0000 	.word	0xffff0000
 8008f70:	0800b241 	.word	0x0800b241
 8008f74:	0800b3eb 	.word	0x0800b3eb

08008f78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08c      	sub	sp, #48	; 0x30
 8008f7c:	af02      	add	r7, sp, #8
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	461a      	mov	r2, r3
 8008f86:	4603      	mov	r3, r0
 8008f88:	817b      	strh	r3, [r7, #10]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	813b      	strh	r3, [r7, #8]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f92:	f7fe fb11 	bl	80075b8 <HAL_GetTick>
 8008f96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	f040 8208 	bne.w	80093b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	2319      	movs	r3, #25
 8008fac:	2201      	movs	r2, #1
 8008fae:	497b      	ldr	r1, [pc, #492]	; (800919c <HAL_I2C_Mem_Read+0x224>)
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f002 faff 	bl	800b5b4 <I2C_WaitOnFlagUntilTimeout>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e1fb      	b.n	80093b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d101      	bne.n	8008fce <HAL_I2C_Mem_Read+0x56>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e1f4      	b.n	80093b8 <HAL_I2C_Mem_Read+0x440>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d007      	beq.n	8008ff4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f042 0201 	orr.w	r2, r2, #1
 8008ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2222      	movs	r2, #34	; 0x22
 8009008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2240      	movs	r2, #64	; 0x40
 8009010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4a5b      	ldr	r2, [pc, #364]	; (80091a0 <HAL_I2C_Mem_Read+0x228>)
 8009034:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009036:	88f8      	ldrh	r0, [r7, #6]
 8009038:	893a      	ldrh	r2, [r7, #8]
 800903a:	8979      	ldrh	r1, [r7, #10]
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	4603      	mov	r3, r0
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f002 f812 	bl	800b070 <I2C_RequestMemoryRead>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e1b0      	b.n	80093b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800905a:	2b00      	cmp	r3, #0
 800905c:	d113      	bne.n	8009086 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800905e:	2300      	movs	r3, #0
 8009060:	623b      	str	r3, [r7, #32]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	623b      	str	r3, [r7, #32]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	623b      	str	r3, [r7, #32]
 8009072:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	e184      	b.n	8009390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908a:	2b01      	cmp	r3, #1
 800908c:	d11b      	bne.n	80090c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800909c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800909e:	2300      	movs	r3, #0
 80090a0:	61fb      	str	r3, [r7, #28]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	61fb      	str	r3, [r7, #28]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	61fb      	str	r3, [r7, #28]
 80090b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e164      	b.n	8009390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d11b      	bne.n	8009106 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ee:	2300      	movs	r3, #0
 80090f0:	61bb      	str	r3, [r7, #24]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	e144      	b.n	8009390 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009106:	2300      	movs	r3, #0
 8009108:	617b      	str	r3, [r7, #20]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800911c:	e138      	b.n	8009390 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009122:	2b03      	cmp	r3, #3
 8009124:	f200 80f1 	bhi.w	800930a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800912c:	2b01      	cmp	r3, #1
 800912e:	d123      	bne.n	8009178 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f002 fb87 	bl	800b848 <I2C_WaitOnRXNEFlagUntilTimeout>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e139      	b.n	80093b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	691a      	ldr	r2, [r3, #16]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009160:	3b01      	subs	r3, #1
 8009162:	b29a      	uxth	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009176:	e10b      	b.n	8009390 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917c:	2b02      	cmp	r3, #2
 800917e:	d14e      	bne.n	800921e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	2200      	movs	r2, #0
 8009188:	4906      	ldr	r1, [pc, #24]	; (80091a4 <HAL_I2C_Mem_Read+0x22c>)
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f002 fa12 	bl	800b5b4 <I2C_WaitOnFlagUntilTimeout>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d008      	beq.n	80091a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e10e      	b.n	80093b8 <HAL_I2C_Mem_Read+0x440>
 800919a:	bf00      	nop
 800919c:	00100002 	.word	0x00100002
 80091a0:	ffff0000 	.word	0xffff0000
 80091a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	691a      	ldr	r2, [r3, #16]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	b2d2      	uxtb	r2, r2
 80091c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d4:	3b01      	subs	r3, #1
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	3b01      	subs	r3, #1
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	691a      	ldr	r2, [r3, #16]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	b2d2      	uxtb	r2, r2
 80091f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009206:	3b01      	subs	r3, #1
 8009208:	b29a      	uxth	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009212:	b29b      	uxth	r3, r3
 8009214:	3b01      	subs	r3, #1
 8009216:	b29a      	uxth	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800921c:	e0b8      	b.n	8009390 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	2200      	movs	r2, #0
 8009226:	4966      	ldr	r1, [pc, #408]	; (80093c0 <HAL_I2C_Mem_Read+0x448>)
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f002 f9c3 	bl	800b5b4 <I2C_WaitOnFlagUntilTimeout>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e0bf      	b.n	80093b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	691a      	ldr	r2, [r3, #16]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009252:	b2d2      	uxtb	r2, r2
 8009254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009264:	3b01      	subs	r3, #1
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009270:	b29b      	uxth	r3, r3
 8009272:	3b01      	subs	r3, #1
 8009274:	b29a      	uxth	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	2200      	movs	r2, #0
 8009282:	494f      	ldr	r1, [pc, #316]	; (80093c0 <HAL_I2C_Mem_Read+0x448>)
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f002 f995 	bl	800b5b4 <I2C_WaitOnFlagUntilTimeout>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e091      	b.n	80093b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	691a      	ldr	r2, [r3, #16]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	b2d2      	uxtb	r2, r2
 80092b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c0:	3b01      	subs	r3, #1
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	b2d2      	uxtb	r2, r2
 80092e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f2:	3b01      	subs	r3, #1
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092fe:	b29b      	uxth	r3, r3
 8009300:	3b01      	subs	r3, #1
 8009302:	b29a      	uxth	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009308:	e042      	b.n	8009390 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800930a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800930c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f002 fa9a 	bl	800b848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e04c      	b.n	80093b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691a      	ldr	r2, [r3, #16]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	b2d2      	uxtb	r2, r2
 800932a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933a:	3b01      	subs	r3, #1
 800933c:	b29a      	uxth	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009346:	b29b      	uxth	r3, r3
 8009348:	3b01      	subs	r3, #1
 800934a:	b29a      	uxth	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	f003 0304 	and.w	r3, r3, #4
 800935a:	2b04      	cmp	r3, #4
 800935c:	d118      	bne.n	8009390 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	691a      	ldr	r2, [r3, #16]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	b2d2      	uxtb	r2, r2
 800936a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937a:	3b01      	subs	r3, #1
 800937c:	b29a      	uxth	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009386:	b29b      	uxth	r3, r3
 8009388:	3b01      	subs	r3, #1
 800938a:	b29a      	uxth	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009394:	2b00      	cmp	r3, #0
 8009396:	f47f aec2 	bne.w	800911e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2220      	movs	r2, #32
 800939e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e000      	b.n	80093b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80093b6:	2302      	movs	r3, #2
  }
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3728      	adds	r7, #40	; 0x28
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	00010004 	.word	0x00010004

080093c4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08c      	sub	sp, #48	; 0x30
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	4608      	mov	r0, r1
 80093ce:	4611      	mov	r1, r2
 80093d0:	461a      	mov	r2, r3
 80093d2:	4603      	mov	r3, r0
 80093d4:	817b      	strh	r3, [r7, #10]
 80093d6:	460b      	mov	r3, r1
 80093d8:	813b      	strh	r3, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093de:	f7fe f8eb 	bl	80075b8 <HAL_GetTick>
 80093e2:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b20      	cmp	r3, #32
 80093f2:	f040 8154 	bne.w	800969e <HAL_I2C_Mem_Read_DMA+0x2da>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80093f6:	4b96      	ldr	r3, [pc, #600]	; (8009650 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	08db      	lsrs	r3, r3, #3
 80093fc:	4a95      	ldr	r2, [pc, #596]	; (8009654 <HAL_I2C_Mem_Read_DMA+0x290>)
 80093fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009402:	0a1a      	lsrs	r2, r3, #8
 8009404:	4613      	mov	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	009a      	lsls	r2, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	3b01      	subs	r3, #1
 8009414:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d116      	bne.n	800944a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2220      	movs	r2, #32
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009436:	f043 0220 	orr.w	r2, r3, #32
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e12a      	b.n	80096a0 <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b02      	cmp	r3, #2
 8009456:	d0db      	beq.n	8009410 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800945e:	2b01      	cmp	r3, #1
 8009460:	d101      	bne.n	8009466 <HAL_I2C_Mem_Read_DMA+0xa2>
 8009462:	2302      	movs	r3, #2
 8009464:	e11c      	b.n	80096a0 <HAL_I2C_Mem_Read_DMA+0x2dc>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	2b01      	cmp	r3, #1
 800947a:	d007      	beq.n	800948c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f042 0201 	orr.w	r2, r2, #1
 800948a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800949a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2222      	movs	r2, #34	; 0x22
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2240      	movs	r2, #64	; 0x40
 80094a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	4a63      	ldr	r2, [pc, #396]	; (8009658 <HAL_I2C_Mem_Read_DMA+0x294>)
 80094cc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 80ab 	beq.w	800962e <HAL_I2C_Mem_Read_DMA+0x26a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094dc:	4a5f      	ldr	r2, [pc, #380]	; (800965c <HAL_I2C_Mem_Read_DMA+0x298>)
 80094de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	4a5e      	ldr	r2, [pc, #376]	; (8009660 <HAL_I2C_Mem_Read_DMA+0x29c>)
 80094e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ec:	2200      	movs	r2, #0
 80094ee:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	2200      	movs	r2, #0
 80094f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fc:	2200      	movs	r2, #0
 80094fe:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	2200      	movs	r2, #0
 8009506:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3310      	adds	r3, #16
 8009512:	4619      	mov	r1, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	461a      	mov	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800951e:	f7fe fe2d 	bl	800817c <HAL_DMA_Start_IT>
 8009522:	4603      	mov	r3, r0
 8009524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8009528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800952c:	2b00      	cmp	r3, #0
 800952e:	d16a      	bne.n	8009606 <HAL_I2C_Mem_Read_DMA+0x242>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009530:	88f8      	ldrh	r0, [r7, #6]
 8009532:	893a      	ldrh	r2, [r7, #8]
 8009534:	8979      	ldrh	r1, [r7, #10]
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	2323      	movs	r3, #35	; 0x23
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	4603      	mov	r3, r0
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f001 fd95 	bl	800b070 <I2C_RequestMemoryRead>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d027      	beq.n	800959c <HAL_I2C_Mem_Read_DMA+0x1d8>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe fe6b 	bl	800822c <HAL_DMA_Abort_IT>
 8009556:	4603      	mov	r3, r0
 8009558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Clear directly Complete callback as no XferAbortCallback is used to finalize Abort treatment */
          if (hi2c->hdmarx != NULL)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_I2C_Mem_Read_DMA+0x1a8>
          {
            hi2c->hdmarx->XferCpltCallback = NULL;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	2200      	movs	r2, #0
 800956a:	63da      	str	r2, [r3, #60]	; 0x3c
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800957a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0201 	bic.w	r2, r2, #1
 8009596:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e081      	b.n	80096a0 <HAL_I2C_Mem_Read_DMA+0x2dc>
        }

        if (hi2c->XferSize == 1U)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d108      	bne.n	80095b6 <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	e007      	b.n	80095c6 <HAL_I2C_Mem_Read_DMA+0x202>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095c6:	2300      	movs	r3, #0
 80095c8:	61bb      	str	r3, [r7, #24]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	695b      	ldr	r3, [r3, #20]
 80095d0:	61bb      	str	r3, [r7, #24]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	61bb      	str	r3, [r7, #24]
 80095da:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095f2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009602:	605a      	str	r2, [r3, #4]
 8009604:	e049      	b.n	800969a <HAL_I2C_Mem_Read_DMA+0x2d6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2220      	movs	r2, #32
 800960a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	f043 0210 	orr.w	r2, r3, #16
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e038      	b.n	80096a0 <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800962e:	88f8      	ldrh	r0, [r7, #6]
 8009630:	893a      	ldrh	r2, [r7, #8]
 8009632:	8979      	ldrh	r1, [r7, #10]
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	2323      	movs	r3, #35	; 0x23
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	4603      	mov	r3, r0
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f001 fd16 	bl	800b070 <I2C_RequestMemoryRead>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00c      	beq.n	8009664 <HAL_I2C_Mem_Read_DMA+0x2a0>
      {
        return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e028      	b.n	80096a0 <HAL_I2C_Mem_Read_DMA+0x2dc>
 800964e:	bf00      	nop
 8009650:	20001a64 	.word	0x20001a64
 8009654:	14f8b589 	.word	0x14f8b589
 8009658:	ffff0000 	.word	0xffff0000
 800965c:	0800b241 	.word	0x0800b241
 8009660:	0800b3eb 	.word	0x0800b3eb
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009664:	2300      	movs	r3, #0
 8009666:	617b      	str	r3, [r7, #20]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	617b      	str	r3, [r7, #20]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009688:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2220      	movs	r2, #32
 800968e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	e000      	b.n	80096a0 <HAL_I2C_Mem_Read_DMA+0x2dc>
  }
  else
  {
    return HAL_BUSY;
 800969e:	2302      	movs	r3, #2
  }
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3728      	adds	r7, #40	; 0x28
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08a      	sub	sp, #40	; 0x28
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	607a      	str	r2, [r7, #4]
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	460b      	mov	r3, r1
 80096b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80096b8:	f7fd ff7e 	bl	80075b8 <HAL_GetTick>
 80096bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80096be:	2301      	movs	r3, #1
 80096c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b20      	cmp	r3, #32
 80096cc:	f040 8111 	bne.w	80098f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	2319      	movs	r3, #25
 80096d6:	2201      	movs	r2, #1
 80096d8:	4988      	ldr	r1, [pc, #544]	; (80098fc <HAL_I2C_IsDeviceReady+0x254>)
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f001 ff6a 	bl	800b5b4 <I2C_WaitOnFlagUntilTimeout>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80096e6:	2302      	movs	r3, #2
 80096e8:	e104      	b.n	80098f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_I2C_IsDeviceReady+0x50>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e0fd      	b.n	80098f4 <HAL_I2C_IsDeviceReady+0x24c>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b01      	cmp	r3, #1
 800970c:	d007      	beq.n	800971e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f042 0201 	orr.w	r2, r2, #1
 800971c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800972c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2224      	movs	r2, #36	; 0x24
 8009732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4a70      	ldr	r2, [pc, #448]	; (8009900 <HAL_I2C_IsDeviceReady+0x258>)
 8009740:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009750:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2200      	movs	r2, #0
 800975a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f001 ff28 	bl	800b5b4 <I2C_WaitOnFlagUntilTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00d      	beq.n	8009786 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009778:	d103      	bne.n	8009782 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009780:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e0b6      	b.n	80098f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009786:	897b      	ldrh	r3, [r7, #10]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	461a      	mov	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009794:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009796:	f7fd ff0f 	bl	80075b8 <HAL_GetTick>
 800979a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	bf0c      	ite	eq
 80097aa:	2301      	moveq	r3, #1
 80097ac:	2300      	movne	r3, #0
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097c0:	bf0c      	ite	eq
 80097c2:	2301      	moveq	r3, #1
 80097c4:	2300      	movne	r3, #0
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80097ca:	e025      	b.n	8009818 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80097cc:	f7fd fef4 	bl	80075b8 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d302      	bcc.n	80097e2 <HAL_I2C_IsDeviceReady+0x13a>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d103      	bne.n	80097ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	22a0      	movs	r2, #160	; 0xa0
 80097e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	f003 0302 	and.w	r3, r3, #2
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	bf0c      	ite	eq
 80097f8:	2301      	moveq	r3, #1
 80097fa:	2300      	movne	r3, #0
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800980a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800980e:	bf0c      	ite	eq
 8009810:	2301      	moveq	r3, #1
 8009812:	2300      	movne	r3, #0
 8009814:	b2db      	uxtb	r3, r3
 8009816:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2ba0      	cmp	r3, #160	; 0xa0
 8009822:	d005      	beq.n	8009830 <HAL_I2C_IsDeviceReady+0x188>
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d102      	bne.n	8009830 <HAL_I2C_IsDeviceReady+0x188>
 800982a:	7dbb      	ldrb	r3, [r7, #22]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d0cd      	beq.n	80097cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2220      	movs	r2, #32
 8009834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	f003 0302 	and.w	r3, r3, #2
 8009842:	2b02      	cmp	r3, #2
 8009844:	d129      	bne.n	800989a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009854:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009856:	2300      	movs	r3, #0
 8009858:	613b      	str	r3, [r7, #16]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	613b      	str	r3, [r7, #16]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	613b      	str	r3, [r7, #16]
 800986a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	2319      	movs	r3, #25
 8009872:	2201      	movs	r2, #1
 8009874:	4921      	ldr	r1, [pc, #132]	; (80098fc <HAL_I2C_IsDeviceReady+0x254>)
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f001 fe9c 	bl	800b5b4 <I2C_WaitOnFlagUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e036      	b.n	80098f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2220      	movs	r2, #32
 800988a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	e02c      	b.n	80098f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	2319      	movs	r3, #25
 80098ba:	2201      	movs	r2, #1
 80098bc:	490f      	ldr	r1, [pc, #60]	; (80098fc <HAL_I2C_IsDeviceReady+0x254>)
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f001 fe78 	bl	800b5b4 <I2C_WaitOnFlagUntilTimeout>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e012      	b.n	80098f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	3301      	adds	r3, #1
 80098d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	429a      	cmp	r2, r3
 80098da:	f4ff af32 	bcc.w	8009742 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e000      	b.n	80098f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80098f2:	2302      	movs	r3, #2
  }
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3720      	adds	r7, #32
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	00100002 	.word	0x00100002
 8009900:	ffff0000 	.word	0xffff0000

08009904 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b088      	sub	sp, #32
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009924:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800992c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	2b10      	cmp	r3, #16
 8009932:	d003      	beq.n	800993c <HAL_I2C_EV_IRQHandler+0x38>
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	2b40      	cmp	r3, #64	; 0x40
 8009938:	f040 80bd 	bne.w	8009ab6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10d      	bne.n	8009972 <HAL_I2C_EV_IRQHandler+0x6e>
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800995c:	d003      	beq.n	8009966 <HAL_I2C_EV_IRQHandler+0x62>
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009964:	d101      	bne.n	800996a <HAL_I2C_EV_IRQHandler+0x66>
 8009966:	2301      	movs	r3, #1
 8009968:	e000      	b.n	800996c <HAL_I2C_EV_IRQHandler+0x68>
 800996a:	2300      	movs	r3, #0
 800996c:	2b01      	cmp	r3, #1
 800996e:	f000 812e 	beq.w	8009bce <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00c      	beq.n	8009996 <HAL_I2C_EV_IRQHandler+0x92>
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	0a5b      	lsrs	r3, r3, #9
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d006      	beq.n	8009996 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 ffe2 	bl	800b952 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fd58 	bl	800a444 <I2C_Master_SB>
 8009994:	e08e      	b.n	8009ab4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	08db      	lsrs	r3, r3, #3
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d009      	beq.n	80099b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	0a5b      	lsrs	r3, r3, #9
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fdce 	bl	800a550 <I2C_Master_ADD10>
 80099b4:	e07e      	b.n	8009ab4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	085b      	lsrs	r3, r3, #1
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d009      	beq.n	80099d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	0a5b      	lsrs	r3, r3, #9
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fde8 	bl	800a5a4 <I2C_Master_ADDR>
 80099d4:	e06e      	b.n	8009ab4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	089b      	lsrs	r3, r3, #2
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d037      	beq.n	8009a52 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099f0:	f000 80ef 	beq.w	8009bd2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	09db      	lsrs	r3, r3, #7
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00f      	beq.n	8009a20 <HAL_I2C_EV_IRQHandler+0x11c>
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	0a9b      	lsrs	r3, r3, #10
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d009      	beq.n	8009a20 <HAL_I2C_EV_IRQHandler+0x11c>
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	089b      	lsrs	r3, r3, #2
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d103      	bne.n	8009a20 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f9e5 	bl	8009de8 <I2C_MasterTransmit_TXE>
 8009a1e:	e049      	b.n	8009ab4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	089b      	lsrs	r3, r3, #2
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80d2 	beq.w	8009bd2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	0a5b      	lsrs	r3, r3, #9
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 80cb 	beq.w	8009bd2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	2b10      	cmp	r3, #16
 8009a40:	d103      	bne.n	8009a4a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa6c 	bl	8009f20 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a48:	e0c3      	b.n	8009bd2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fad0 	bl	8009ff0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a50:	e0bf      	b.n	8009bd2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a60:	f000 80b7 	beq.w	8009bd2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	099b      	lsrs	r3, r3, #6
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00f      	beq.n	8009a90 <HAL_I2C_EV_IRQHandler+0x18c>
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	0a9b      	lsrs	r3, r3, #10
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d009      	beq.n	8009a90 <HAL_I2C_EV_IRQHandler+0x18c>
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	089b      	lsrs	r3, r3, #2
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d103      	bne.n	8009a90 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fb40 	bl	800a10e <I2C_MasterReceive_RXNE>
 8009a8e:	e011      	b.n	8009ab4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	089b      	lsrs	r3, r3, #2
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 809a 	beq.w	8009bd2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	0a5b      	lsrs	r3, r3, #9
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 8093 	beq.w	8009bd2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fbdf 	bl	800a270 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ab2:	e08e      	b.n	8009bd2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8009ab4:	e08d      	b.n	8009bd2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d004      	beq.n	8009ac8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	e007      	b.n	8009ad8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	085b      	lsrs	r3, r3, #1
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d012      	beq.n	8009b0a <HAL_I2C_EV_IRQHandler+0x206>
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	0a5b      	lsrs	r3, r3, #9
 8009ae8:	f003 0301 	and.w	r3, r3, #1
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00c      	beq.n	8009b0a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009b00:	69b9      	ldr	r1, [r7, #24]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 ff9d 	bl	800aa42 <I2C_Slave_ADDR>
 8009b08:	e066      	b.n	8009bd8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	091b      	lsrs	r3, r3, #4
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d009      	beq.n	8009b2a <HAL_I2C_EV_IRQHandler+0x226>
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	0a5b      	lsrs	r3, r3, #9
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 ffd2 	bl	800aacc <I2C_Slave_STOPF>
 8009b28:	e056      	b.n	8009bd8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b21      	cmp	r3, #33	; 0x21
 8009b2e:	d002      	beq.n	8009b36 <HAL_I2C_EV_IRQHandler+0x232>
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b29      	cmp	r3, #41	; 0x29
 8009b34:	d125      	bne.n	8009b82 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	09db      	lsrs	r3, r3, #7
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00f      	beq.n	8009b62 <HAL_I2C_EV_IRQHandler+0x25e>
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	0a9b      	lsrs	r3, r3, #10
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d009      	beq.n	8009b62 <HAL_I2C_EV_IRQHandler+0x25e>
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	089b      	lsrs	r3, r3, #2
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d103      	bne.n	8009b62 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 feb3 	bl	800a8c6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009b60:	e039      	b.n	8009bd6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	089b      	lsrs	r3, r3, #2
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d033      	beq.n	8009bd6 <HAL_I2C_EV_IRQHandler+0x2d2>
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	0a5b      	lsrs	r3, r3, #9
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d02d      	beq.n	8009bd6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fee0 	bl	800a940 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009b80:	e029      	b.n	8009bd6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	099b      	lsrs	r3, r3, #6
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00f      	beq.n	8009bae <HAL_I2C_EV_IRQHandler+0x2aa>
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	0a9b      	lsrs	r3, r3, #10
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d009      	beq.n	8009bae <HAL_I2C_EV_IRQHandler+0x2aa>
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	089b      	lsrs	r3, r3, #2
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d103      	bne.n	8009bae <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 feeb 	bl	800a982 <I2C_SlaveReceive_RXNE>
 8009bac:	e014      	b.n	8009bd8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	089b      	lsrs	r3, r3, #2
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00e      	beq.n	8009bd8 <HAL_I2C_EV_IRQHandler+0x2d4>
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	0a5b      	lsrs	r3, r3, #9
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d008      	beq.n	8009bd8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 ff19 	bl	800a9fe <I2C_SlaveReceive_BTF>
 8009bcc:	e004      	b.n	8009bd8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8009bce:	bf00      	nop
 8009bd0:	e002      	b.n	8009bd8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009bd2:	bf00      	nop
 8009bd4:	e000      	b.n	8009bd8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009bd6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8009bd8:	3720      	adds	r7, #32
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b08a      	sub	sp, #40	; 0x28
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c00:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	0a1b      	lsrs	r3, r3, #8
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00e      	beq.n	8009c2c <HAL_I2C_ER_IRQHandler+0x4e>
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	0a1b      	lsrs	r3, r3, #8
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d008      	beq.n	8009c2c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	f043 0301 	orr.w	r3, r3, #1
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c2a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	0a5b      	lsrs	r3, r3, #9
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00e      	beq.n	8009c56 <HAL_I2C_ER_IRQHandler+0x78>
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	0a1b      	lsrs	r3, r3, #8
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d008      	beq.n	8009c56 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	f043 0302 	orr.w	r3, r3, #2
 8009c4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8009c54:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	0a9b      	lsrs	r3, r3, #10
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d03f      	beq.n	8009ce2 <HAL_I2C_ER_IRQHandler+0x104>
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	0a1b      	lsrs	r3, r3, #8
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d039      	beq.n	8009ce2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8009c6e:	7efb      	ldrb	r3, [r7, #27]
 8009c70:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c80:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c86:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009c88:	7ebb      	ldrb	r3, [r7, #26]
 8009c8a:	2b20      	cmp	r3, #32
 8009c8c:	d112      	bne.n	8009cb4 <HAL_I2C_ER_IRQHandler+0xd6>
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10f      	bne.n	8009cb4 <HAL_I2C_ER_IRQHandler+0xd6>
 8009c94:	7cfb      	ldrb	r3, [r7, #19]
 8009c96:	2b21      	cmp	r3, #33	; 0x21
 8009c98:	d008      	beq.n	8009cac <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009c9a:	7cfb      	ldrb	r3, [r7, #19]
 8009c9c:	2b29      	cmp	r3, #41	; 0x29
 8009c9e:	d005      	beq.n	8009cac <HAL_I2C_ER_IRQHandler+0xce>
 8009ca0:	7cfb      	ldrb	r3, [r7, #19]
 8009ca2:	2b28      	cmp	r3, #40	; 0x28
 8009ca4:	d106      	bne.n	8009cb4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2b21      	cmp	r3, #33	; 0x21
 8009caa:	d103      	bne.n	8009cb4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 f83d 	bl	800ad2c <I2C_Slave_AF>
 8009cb2:	e016      	b.n	8009ce2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009cbc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	f043 0304 	orr.w	r3, r3, #4
 8009cc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009cc6:	7efb      	ldrb	r3, [r7, #27]
 8009cc8:	2b10      	cmp	r3, #16
 8009cca:	d002      	beq.n	8009cd2 <HAL_I2C_ER_IRQHandler+0xf4>
 8009ccc:	7efb      	ldrb	r3, [r7, #27]
 8009cce:	2b40      	cmp	r3, #64	; 0x40
 8009cd0:	d107      	bne.n	8009ce2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ce0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	0adb      	lsrs	r3, r3, #11
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00e      	beq.n	8009d0c <HAL_I2C_ER_IRQHandler+0x12e>
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	0a1b      	lsrs	r3, r3, #8
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d008      	beq.n	8009d0c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	f043 0308 	orr.w	r3, r3, #8
 8009d00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009d0a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d008      	beq.n	8009d24 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	431a      	orrs	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f001 f874 	bl	800ae0c <I2C_ITError>
  }
}
 8009d24:	bf00      	nop
 8009d26:	3728      	adds	r7, #40	; 0x28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	460b      	mov	r3, r1
 8009d86:	70fb      	strb	r3, [r7, #3]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009df6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d150      	bne.n	8009eb0 <I2C_MasterTransmit_TXE+0xc8>
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	2b21      	cmp	r3, #33	; 0x21
 8009e12:	d14d      	bne.n	8009eb0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b08      	cmp	r3, #8
 8009e18:	d01d      	beq.n	8009e56 <I2C_MasterTransmit_TXE+0x6e>
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d01a      	beq.n	8009e56 <I2C_MasterTransmit_TXE+0x6e>
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e26:	d016      	beq.n	8009e56 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009e36:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2211      	movs	r2, #17
 8009e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2220      	movs	r2, #32
 8009e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff ff6c 	bl	8009d2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009e54:	e060      	b.n	8009f18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009e64:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e74:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b40      	cmp	r3, #64	; 0x40
 8009e8e:	d107      	bne.n	8009ea0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff ff87 	bl	8009dac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009e9e:	e03b      	b.n	8009f18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f7ff ff3f 	bl	8009d2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009eae:	e033      	b.n	8009f18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	2b21      	cmp	r3, #33	; 0x21
 8009eb4:	d005      	beq.n	8009ec2 <I2C_MasterTransmit_TXE+0xda>
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
 8009eb8:	2b40      	cmp	r3, #64	; 0x40
 8009eba:	d12d      	bne.n	8009f18 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	2b22      	cmp	r3, #34	; 0x22
 8009ec0:	d12a      	bne.n	8009f18 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d108      	bne.n	8009ede <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eda:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009edc:	e01c      	b.n	8009f18 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b40      	cmp	r3, #64	; 0x40
 8009ee8:	d103      	bne.n	8009ef2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f880 	bl	8009ff0 <I2C_MemoryTransmit_TXE_BTF>
}
 8009ef0:	e012      	b.n	8009f18 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef6:	781a      	ldrb	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009f16:	e7ff      	b.n	8009f18 <I2C_MasterTransmit_TXE+0x130>
 8009f18:	bf00      	nop
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b21      	cmp	r3, #33	; 0x21
 8009f38:	d156      	bne.n	8009fe8 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d012      	beq.n	8009f6a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	781a      	ldrb	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	3b01      	subs	r3, #1
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009f68:	e03e      	b.n	8009fe8 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d01d      	beq.n	8009fac <I2C_MasterTransmit_BTF+0x8c>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b20      	cmp	r3, #32
 8009f74:	d01a      	beq.n	8009fac <I2C_MasterTransmit_BTF+0x8c>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f7c:	d016      	beq.n	8009fac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f8c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2211      	movs	r2, #17
 8009f92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff fec1 	bl	8009d2c <HAL_I2C_MasterTxCpltCallback>
}
 8009faa:	e01d      	b.n	8009fe8 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009fba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7ff fea2 	bl	8009d2c <HAL_I2C_MasterTxCpltCallback>
}
 8009fe8:	bf00      	nop
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ffe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a004:	2b00      	cmp	r3, #0
 800a006:	d11d      	bne.n	800a044 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d10b      	bne.n	800a028 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a014:	b2da      	uxtb	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a020:	1c9a      	adds	r2, r3, #2
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800a026:	e06e      	b.n	800a106 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	121b      	asrs	r3, r3, #8
 800a030:	b2da      	uxtb	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a042:	e060      	b.n	800a106 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d10b      	bne.n	800a064 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a050:	b2da      	uxtb	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a062:	e050      	b.n	800a106 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d14c      	bne.n	800a106 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	2b22      	cmp	r3, #34	; 0x22
 800a070:	d108      	bne.n	800a084 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a080:	601a      	str	r2, [r3, #0]
}
 800a082:	e040      	b.n	800a106 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d015      	beq.n	800a0ba <I2C_MemoryTransmit_TXE_BTF+0xca>
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
 800a090:	2b21      	cmp	r3, #33	; 0x21
 800a092:	d112      	bne.n	800a0ba <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	781a      	ldrb	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a0b8:	e025      	b.n	800a106 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d120      	bne.n	800a106 <I2C_MemoryTransmit_TXE_BTF+0x116>
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	2b21      	cmp	r3, #33	; 0x21
 800a0c8:	d11d      	bne.n	800a106 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a0d8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0e8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fe53 	bl	8009dac <HAL_I2C_MemTxCpltCallback>
}
 800a106:	bf00      	nop
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b22      	cmp	r3, #34	; 0x22
 800a120:	f040 80a2 	bne.w	800a268 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a128:	b29b      	uxth	r3, r3
 800a12a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d921      	bls.n	800a176 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	691a      	ldr	r2, [r3, #16]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	b2d2      	uxtb	r2, r2
 800a13e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a14e:	b29b      	uxth	r3, r3
 800a150:	3b01      	subs	r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	2b03      	cmp	r3, #3
 800a160:	f040 8082 	bne.w	800a268 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a172:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800a174:	e078      	b.n	800a268 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d074      	beq.n	800a268 <I2C_MasterReceive_RXNE+0x15a>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d002      	beq.n	800a18a <I2C_MasterReceive_RXNE+0x7c>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d16e      	bne.n	800a268 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 fb2a 	bl	800b7e4 <I2C_WaitOnSTOPRequestThroughIT>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d142      	bne.n	800a21c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1a4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a1b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	b2d2      	uxtb	r2, r2
 800a1c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b40      	cmp	r3, #64	; 0x40
 800a1ee:	d10a      	bne.n	800a206 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7fc fb36 	bl	8006870 <HAL_I2C_MemRxCpltCallback>
}
 800a204:	e030      	b.n	800a268 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2212      	movs	r2, #18
 800a212:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff fd93 	bl	8009d40 <HAL_I2C_MasterRxCpltCallback>
}
 800a21a:	e025      	b.n	800a268 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a22a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	691a      	ldr	r2, [r3, #16]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	b2d2      	uxtb	r2, r2
 800a238:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a248:	b29b      	uxth	r3, r3
 800a24a:	3b01      	subs	r3, #1
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2220      	movs	r2, #32
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff fdac 	bl	8009dc0 <HAL_I2C_ErrorCallback>
}
 800a268:	bf00      	nop
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a282:	b29b      	uxth	r3, r3
 800a284:	2b04      	cmp	r3, #4
 800a286:	d11b      	bne.n	800a2c0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a296:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	691a      	ldr	r2, [r3, #16]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	b2d2      	uxtb	r2, r2
 800a2a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a2be:	e0bd      	b.n	800a43c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d129      	bne.n	800a31e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2d8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b04      	cmp	r3, #4
 800a2de:	d00a      	beq.n	800a2f6 <I2C_MasterReceive_BTF+0x86>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d007      	beq.n	800a2f6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2f4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	691a      	ldr	r2, [r3, #16]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	b2d2      	uxtb	r2, r2
 800a302:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	1c5a      	adds	r2, r3, #1
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a312:	b29b      	uxth	r3, r3
 800a314:	3b01      	subs	r3, #1
 800a316:	b29a      	uxth	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a31c:	e08e      	b.n	800a43c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a322:	b29b      	uxth	r3, r3
 800a324:	2b02      	cmp	r3, #2
 800a326:	d176      	bne.n	800a416 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d002      	beq.n	800a334 <I2C_MasterReceive_BTF+0xc4>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2b10      	cmp	r3, #16
 800a332:	d108      	bne.n	800a346 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	e019      	b.n	800a37a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d002      	beq.n	800a352 <I2C_MasterReceive_BTF+0xe2>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d108      	bne.n	800a364 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	e00a      	b.n	800a37a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b10      	cmp	r3, #16
 800a368:	d007      	beq.n	800a37a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a378:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	691a      	ldr	r2, [r3, #16]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	b2d2      	uxtb	r2, r2
 800a386:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a396:	b29b      	uxth	r3, r3
 800a398:	3b01      	subs	r3, #1
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	691a      	ldr	r2, [r3, #16]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	b2d2      	uxtb	r2, r2
 800a3ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a3d4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2220      	movs	r2, #32
 800a3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b40      	cmp	r3, #64	; 0x40
 800a3e8:	d10a      	bne.n	800a400 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7fc fa39 	bl	8006870 <HAL_I2C_MemRxCpltCallback>
}
 800a3fe:	e01d      	b.n	800a43c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2212      	movs	r2, #18
 800a40c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff fc96 	bl	8009d40 <HAL_I2C_MasterRxCpltCallback>
}
 800a414:	e012      	b.n	800a43c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	691a      	ldr	r2, [r3, #16]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a420:	b2d2      	uxtb	r2, r2
 800a422:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a432:	b29b      	uxth	r3, r3
 800a434:	3b01      	subs	r3, #1
 800a436:	b29a      	uxth	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a43c:	bf00      	nop
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b40      	cmp	r3, #64	; 0x40
 800a456:	d117      	bne.n	800a488 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d109      	bne.n	800a474 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a464:	b2db      	uxtb	r3, r3
 800a466:	461a      	mov	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a470:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800a472:	e067      	b.n	800a544 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	f043 0301 	orr.w	r3, r3, #1
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	611a      	str	r2, [r3, #16]
}
 800a486:	e05d      	b.n	800a544 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a490:	d133      	bne.n	800a4fa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b21      	cmp	r3, #33	; 0x21
 800a49c:	d109      	bne.n	800a4b2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a4ae:	611a      	str	r2, [r3, #16]
 800a4b0:	e008      	b.n	800a4c4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	f043 0301 	orr.w	r3, r3, #1
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <I2C_Master_SB+0x92>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d108      	bne.n	800a4e8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d032      	beq.n	800a544 <I2C_Master_SB+0x100>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d02d      	beq.n	800a544 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4f6:	605a      	str	r2, [r3, #4]
}
 800a4f8:	e024      	b.n	800a544 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10e      	bne.n	800a520 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a506:	b29b      	uxth	r3, r3
 800a508:	11db      	asrs	r3, r3, #7
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	f003 0306 	and.w	r3, r3, #6
 800a510:	b2db      	uxtb	r3, r3
 800a512:	f063 030f 	orn	r3, r3, #15
 800a516:	b2da      	uxtb	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	611a      	str	r2, [r3, #16]
}
 800a51e:	e011      	b.n	800a544 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a524:	2b01      	cmp	r3, #1
 800a526:	d10d      	bne.n	800a544 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	11db      	asrs	r3, r3, #7
 800a530:	b2db      	uxtb	r3, r3
 800a532:	f003 0306 	and.w	r3, r3, #6
 800a536:	b2db      	uxtb	r3, r3
 800a538:	f063 030e 	orn	r3, r3, #14
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	611a      	str	r2, [r3, #16]
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d103      	bne.n	800a574 <I2C_Master_ADD10+0x24>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a570:	2b00      	cmp	r3, #0
 800a572:	d011      	beq.n	800a598 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d104      	bne.n	800a588 <I2C_Master_ADD10+0x38>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a584:	2b00      	cmp	r3, #0
 800a586:	d007      	beq.n	800a598 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a596:	605a      	str	r2, [r3, #4]
    }
  }
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b091      	sub	sp, #68	; 0x44
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b22      	cmp	r3, #34	; 0x22
 800a5cc:	f040 8169 	bne.w	800a8a2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10f      	bne.n	800a5f8 <I2C_Master_ADDR+0x54>
 800a5d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5dc:	2b40      	cmp	r3, #64	; 0x40
 800a5de:	d10b      	bne.n	800a5f8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	633b      	str	r3, [r7, #48]	; 0x30
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	633b      	str	r3, [r7, #48]	; 0x30
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	633b      	str	r3, [r7, #48]	; 0x30
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	e160      	b.n	800a8ba <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d11d      	bne.n	800a63c <I2C_Master_ADDR+0x98>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a608:	d118      	bne.n	800a63c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a60a:	2300      	movs	r3, #0
 800a60c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	695b      	ldr	r3, [r3, #20]
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a62e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	651a      	str	r2, [r3, #80]	; 0x50
 800a63a:	e13e      	b.n	800a8ba <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a640:	b29b      	uxth	r3, r3
 800a642:	2b00      	cmp	r3, #0
 800a644:	d113      	bne.n	800a66e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a646:	2300      	movs	r3, #0
 800a648:	62bb      	str	r3, [r7, #40]	; 0x28
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	62bb      	str	r3, [r7, #40]	; 0x28
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	62bb      	str	r3, [r7, #40]	; 0x28
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	e115      	b.n	800a89a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a672:	b29b      	uxth	r3, r3
 800a674:	2b01      	cmp	r3, #1
 800a676:	f040 808a 	bne.w	800a78e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a680:	d137      	bne.n	800a6f2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a690:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a69c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6a0:	d113      	bne.n	800a6ca <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6b0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	e0e7      	b.n	800a89a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	623b      	str	r3, [r7, #32]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	623b      	str	r3, [r7, #32]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	623b      	str	r3, [r7, #32]
 800a6de:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	e0d3      	b.n	800a89a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	2b08      	cmp	r3, #8
 800a6f6:	d02e      	beq.n	800a756 <I2C_Master_ADDR+0x1b2>
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fa:	2b20      	cmp	r3, #32
 800a6fc:	d02b      	beq.n	800a756 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a700:	2b12      	cmp	r3, #18
 800a702:	d102      	bne.n	800a70a <I2C_Master_ADDR+0x166>
 800a704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a706:	2b01      	cmp	r3, #1
 800a708:	d125      	bne.n	800a756 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d00e      	beq.n	800a72e <I2C_Master_ADDR+0x18a>
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	2b02      	cmp	r3, #2
 800a714:	d00b      	beq.n	800a72e <I2C_Master_ADDR+0x18a>
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	2b10      	cmp	r3, #16
 800a71a:	d008      	beq.n	800a72e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	e007      	b.n	800a73e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a73c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a73e:	2300      	movs	r3, #0
 800a740:	61fb      	str	r3, [r7, #28]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	61fb      	str	r3, [r7, #28]
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	e0a1      	b.n	800a89a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a764:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a766:	2300      	movs	r3, #0
 800a768:	61bb      	str	r3, [r7, #24]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	695b      	ldr	r3, [r3, #20]
 800a770:	61bb      	str	r3, [r7, #24]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	61bb      	str	r3, [r7, #24]
 800a77a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	e085      	b.n	800a89a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a792:	b29b      	uxth	r3, r3
 800a794:	2b02      	cmp	r3, #2
 800a796:	d14d      	bne.n	800a834 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	2b04      	cmp	r3, #4
 800a79c:	d016      	beq.n	800a7cc <I2C_Master_ADDR+0x228>
 800a79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d013      	beq.n	800a7cc <I2C_Master_ADDR+0x228>
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a6:	2b10      	cmp	r3, #16
 800a7a8:	d010      	beq.n	800a7cc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7b8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	e007      	b.n	800a7dc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7da:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7ea:	d117      	bne.n	800a81c <I2C_Master_ADDR+0x278>
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a7f2:	d00b      	beq.n	800a80c <I2C_Master_ADDR+0x268>
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d008      	beq.n	800a80c <I2C_Master_ADDR+0x268>
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d005      	beq.n	800a80c <I2C_Master_ADDR+0x268>
 800a800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a802:	2b10      	cmp	r3, #16
 800a804:	d002      	beq.n	800a80c <I2C_Master_ADDR+0x268>
 800a806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a808:	2b20      	cmp	r3, #32
 800a80a:	d107      	bne.n	800a81c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a81a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a81c:	2300      	movs	r3, #0
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	617b      	str	r3, [r7, #20]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	617b      	str	r3, [r7, #20]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	e032      	b.n	800a89a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a842:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a84e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a852:	d117      	bne.n	800a884 <I2C_Master_ADDR+0x2e0>
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a85a:	d00b      	beq.n	800a874 <I2C_Master_ADDR+0x2d0>
 800a85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d008      	beq.n	800a874 <I2C_Master_ADDR+0x2d0>
 800a862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a864:	2b08      	cmp	r3, #8
 800a866:	d005      	beq.n	800a874 <I2C_Master_ADDR+0x2d0>
 800a868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86a:	2b10      	cmp	r3, #16
 800a86c:	d002      	beq.n	800a874 <I2C_Master_ADDR+0x2d0>
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	2b20      	cmp	r3, #32
 800a872:	d107      	bne.n	800a884 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	685a      	ldr	r2, [r3, #4]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a882:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a884:	2300      	movs	r3, #0
 800a886:	613b      	str	r3, [r7, #16]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	613b      	str	r3, [r7, #16]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	613b      	str	r3, [r7, #16]
 800a898:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800a8a0:	e00b      	b.n	800a8ba <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
}
 800a8b8:	e7ff      	b.n	800a8ba <I2C_Master_ADDR+0x316>
 800a8ba:	bf00      	nop
 800a8bc:	3744      	adds	r7, #68	; 0x44
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d02b      	beq.n	800a938 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	781a      	ldrb	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a908:	b29b      	uxth	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d114      	bne.n	800a938 <I2C_SlaveTransmit_TXE+0x72>
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	2b29      	cmp	r3, #41	; 0x29
 800a912:	d111      	bne.n	800a938 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	685a      	ldr	r2, [r3, #4]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a922:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2221      	movs	r2, #33	; 0x21
 800a928:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2228      	movs	r2, #40	; 0x28
 800a92e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7ff fa0e 	bl	8009d54 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a938:	bf00      	nop
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d011      	beq.n	800a976 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	781a      	ldrb	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	3b01      	subs	r3, #1
 800a970:	b29a      	uxth	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a990:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a996:	b29b      	uxth	r3, r3
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d02c      	beq.n	800a9f6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	691a      	ldr	r2, [r3, #16]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	b2d2      	uxtb	r2, r2
 800a9a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d114      	bne.n	800a9f6 <I2C_SlaveReceive_RXNE+0x74>
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a9d0:	d111      	bne.n	800a9f6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2222      	movs	r2, #34	; 0x22
 800a9e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2228      	movs	r2, #40	; 0x28
 800a9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7ff f9b9 	bl	8009d68 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a9f6:	bf00      	nop
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d012      	beq.n	800aa36 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	691a      	ldr	r2, [r3, #16]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1a:	b2d2      	uxtb	r2, r2
 800aa1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa22:	1c5a      	adds	r2, r3, #1
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aa5c:	2b28      	cmp	r3, #40	; 0x28
 800aa5e:	d127      	bne.n	800aab0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa6e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	089b      	lsrs	r3, r3, #2
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	09db      	lsrs	r3, r3, #7
 800aa84:	f003 0301 	and.w	r3, r3, #1
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d103      	bne.n	800aa94 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	81bb      	strh	r3, [r7, #12]
 800aa92:	e002      	b.n	800aa9a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800aaa2:	89ba      	ldrh	r2, [r7, #12]
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7ff f967 	bl	8009d7c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800aaae:	e008      	b.n	800aac2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f06f 0202 	mvn.w	r2, #2
 800aab8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800aac2:	bf00      	nop
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
	...

0800aacc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aada:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aaea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800aaec:	2300      	movs	r3, #0
 800aaee:	60bb      	str	r3, [r7, #8]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	60bb      	str	r3, [r7, #8]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f042 0201 	orr.w	r2, r2, #1
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab18:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab28:	d172      	bne.n	800ac10 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	2b22      	cmp	r3, #34	; 0x22
 800ab2e:	d002      	beq.n	800ab36 <I2C_Slave_STOPF+0x6a>
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
 800ab32:	2b2a      	cmp	r3, #42	; 0x2a
 800ab34:	d135      	bne.n	800aba2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d005      	beq.n	800ab5a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab52:	f043 0204 	orr.w	r2, r3, #4
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fd fd08 	bl	8008584 <HAL_DMA_GetState>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d049      	beq.n	800ac0e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7e:	4a69      	ldr	r2, [pc, #420]	; (800ad24 <I2C_Slave_STOPF+0x258>)
 800ab80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fd fb50 	bl	800822c <HAL_DMA_Abort_IT>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d03d      	beq.n	800ac0e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aba0:	e035      	b.n	800ac0e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	b29a      	uxth	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d005      	beq.n	800abc6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	f043 0204 	orr.w	r2, r3, #4
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fd fcd2 	bl	8008584 <HAL_DMA_GetState>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d014      	beq.n	800ac10 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abea:	4a4e      	ldr	r2, [pc, #312]	; (800ad24 <I2C_Slave_STOPF+0x258>)
 800abec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fd fb1a 	bl	800822c <HAL_DMA_Abort_IT>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d008      	beq.n	800ac10 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4798      	blx	r3
 800ac0c:	e000      	b.n	800ac10 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ac0e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d03e      	beq.n	800ac98 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	f003 0304 	and.w	r3, r3, #4
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d112      	bne.n	800ac4e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	691a      	ldr	r2, [r3, #16]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	3b01      	subs	r3, #1
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac58:	2b40      	cmp	r3, #64	; 0x40
 800ac5a:	d112      	bne.n	800ac82 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	691a      	ldr	r2, [r3, #16]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac66:	b2d2      	uxtb	r2, r2
 800ac68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d005      	beq.n	800ac98 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac90:	f043 0204 	orr.w	r2, r3, #4
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f8b3 	bl	800ae0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800aca6:	e039      	b.n	800ad1c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	2b2a      	cmp	r3, #42	; 0x2a
 800acac:	d109      	bne.n	800acc2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2228      	movs	r2, #40	; 0x28
 800acb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff f853 	bl	8009d68 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b28      	cmp	r3, #40	; 0x28
 800accc:	d111      	bne.n	800acf2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a15      	ldr	r2, [pc, #84]	; (800ad28 <I2C_Slave_STOPF+0x25c>)
 800acd2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2220      	movs	r2, #32
 800acde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff f854 	bl	8009d98 <HAL_I2C_ListenCpltCallback>
}
 800acf0:	e014      	b.n	800ad1c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf6:	2b22      	cmp	r3, #34	; 0x22
 800acf8:	d002      	beq.n	800ad00 <I2C_Slave_STOPF+0x234>
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	2b22      	cmp	r3, #34	; 0x22
 800acfe:	d10d      	bne.n	800ad1c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2220      	movs	r2, #32
 800ad0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7ff f826 	bl	8009d68 <HAL_I2C_SlaveRxCpltCallback>
}
 800ad1c:	bf00      	nop
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	0800b465 	.word	0x0800b465
 800ad28:	ffff0000 	.word	0xffff0000

0800ad2c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad3a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2b08      	cmp	r3, #8
 800ad46:	d002      	beq.n	800ad4e <I2C_Slave_AF+0x22>
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	2b20      	cmp	r3, #32
 800ad4c:	d129      	bne.n	800ada2 <I2C_Slave_AF+0x76>
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
 800ad50:	2b28      	cmp	r3, #40	; 0x28
 800ad52:	d126      	bne.n	800ada2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a2c      	ldr	r2, [pc, #176]	; (800ae08 <I2C_Slave_AF+0xdc>)
 800ad58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ad68:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ad72:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad82:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7fe fffc 	bl	8009d98 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ada0:	e02e      	b.n	800ae00 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	2b21      	cmp	r3, #33	; 0x21
 800ada6:	d126      	bne.n	800adf6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a17      	ldr	r2, [pc, #92]	; (800ae08 <I2C_Slave_AF+0xdc>)
 800adac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2221      	movs	r2, #33	; 0x21
 800adb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2220      	movs	r2, #32
 800adb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685a      	ldr	r2, [r3, #4]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800add2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800addc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7fe ffb0 	bl	8009d54 <HAL_I2C_SlaveTxCpltCallback>
}
 800adf4:	e004      	b.n	800ae00 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800adfe:	615a      	str	r2, [r3, #20]
}
 800ae00:	bf00      	nop
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	ffff0000 	.word	0xffff0000

0800ae0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	2b10      	cmp	r3, #16
 800ae28:	d002      	beq.n	800ae30 <I2C_ITError+0x24>
 800ae2a:	7bbb      	ldrb	r3, [r7, #14]
 800ae2c:	2b40      	cmp	r3, #64	; 0x40
 800ae2e:	d10a      	bne.n	800ae46 <I2C_ITError+0x3a>
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	2b22      	cmp	r3, #34	; 0x22
 800ae34:	d107      	bne.n	800ae46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
 800ae48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ae4c:	2b28      	cmp	r3, #40	; 0x28
 800ae4e:	d107      	bne.n	800ae60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2228      	movs	r2, #40	; 0x28
 800ae5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ae5e:	e015      	b.n	800ae8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae6e:	d00a      	beq.n	800ae86 <I2C_ITError+0x7a>
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
 800ae72:	2b60      	cmp	r3, #96	; 0x60
 800ae74:	d007      	beq.n	800ae86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2220      	movs	r2, #32
 800ae7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae9a:	d162      	bne.n	800af62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aeaa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d020      	beq.n	800aefc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aebe:	4a6a      	ldr	r2, [pc, #424]	; (800b068 <I2C_ITError+0x25c>)
 800aec0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fd f9b0 	bl	800822c <HAL_DMA_Abort_IT>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 8089 	beq.w	800afe6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 0201 	bic.w	r2, r2, #1
 800aee2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2220      	movs	r2, #32
 800aee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aef6:	4610      	mov	r0, r2
 800aef8:	4798      	blx	r3
 800aefa:	e074      	b.n	800afe6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af00:	4a59      	ldr	r2, [pc, #356]	; (800b068 <I2C_ITError+0x25c>)
 800af02:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fd f98f 	bl	800822c <HAL_DMA_Abort_IT>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d068      	beq.n	800afe6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	695b      	ldr	r3, [r3, #20]
 800af1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1e:	2b40      	cmp	r3, #64	; 0x40
 800af20:	d10b      	bne.n	800af3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	691a      	ldr	r2, [r3, #16]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	b2d2      	uxtb	r2, r2
 800af2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	1c5a      	adds	r2, r3, #1
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f022 0201 	bic.w	r2, r2, #1
 800af48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2220      	movs	r2, #32
 800af4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af5c:	4610      	mov	r0, r2
 800af5e:	4798      	blx	r3
 800af60:	e041      	b.n	800afe6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b60      	cmp	r3, #96	; 0x60
 800af6c:	d125      	bne.n	800afba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2220      	movs	r2, #32
 800af72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af86:	2b40      	cmp	r3, #64	; 0x40
 800af88:	d10b      	bne.n	800afa2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	691a      	ldr	r2, [r3, #16]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af94:	b2d2      	uxtb	r2, r2
 800af96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	1c5a      	adds	r2, r3, #1
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f022 0201 	bic.w	r2, r2, #1
 800afb0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7fe ff0e 	bl	8009dd4 <HAL_I2C_AbortCpltCallback>
 800afb8:	e015      	b.n	800afe6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	695b      	ldr	r3, [r3, #20]
 800afc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc4:	2b40      	cmp	r3, #64	; 0x40
 800afc6:	d10b      	bne.n	800afe0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	691a      	ldr	r2, [r3, #16]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	b2d2      	uxtb	r2, r2
 800afd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7fe feed 	bl	8009dc0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10e      	bne.n	800b014 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800affc:	2b00      	cmp	r3, #0
 800affe:	d109      	bne.n	800b014 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b006:	2b00      	cmp	r3, #0
 800b008:	d104      	bne.n	800b014 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b010:	2b00      	cmp	r3, #0
 800b012:	d007      	beq.n	800b024 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685a      	ldr	r2, [r3, #4]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b022:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b02a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b04      	cmp	r3, #4
 800b036:	d113      	bne.n	800b060 <I2C_ITError+0x254>
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	2b28      	cmp	r3, #40	; 0x28
 800b03c:	d110      	bne.n	800b060 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a0a      	ldr	r2, [pc, #40]	; (800b06c <I2C_ITError+0x260>)
 800b042:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2220      	movs	r2, #32
 800b04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7fe fe9c 	bl	8009d98 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b060:	bf00      	nop
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	0800b465 	.word	0x0800b465
 800b06c:	ffff0000 	.word	0xffff0000

0800b070 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b088      	sub	sp, #32
 800b074:	af02      	add	r7, sp, #8
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	4608      	mov	r0, r1
 800b07a:	4611      	mov	r1, r2
 800b07c:	461a      	mov	r2, r3
 800b07e:	4603      	mov	r3, r0
 800b080:	817b      	strh	r3, [r7, #10]
 800b082:	460b      	mov	r3, r1
 800b084:	813b      	strh	r3, [r7, #8]
 800b086:	4613      	mov	r3, r2
 800b088:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b098:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f000 fa7c 	bl	800b5b4 <I2C_WaitOnFlagUntilTimeout>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00d      	beq.n	800b0de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d0:	d103      	bne.n	800b0da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e0aa      	b.n	800b234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b0de:	897b      	ldrh	r3, [r7, #10]
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b0ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	6a3a      	ldr	r2, [r7, #32]
 800b0f2:	4952      	ldr	r1, [pc, #328]	; (800b23c <I2C_RequestMemoryRead+0x1cc>)
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f000 fab4 	bl	800b662 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	e097      	b.n	800b234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b104:	2300      	movs	r3, #0
 800b106:	617b      	str	r3, [r7, #20]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	617b      	str	r3, [r7, #20]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b11c:	6a39      	ldr	r1, [r7, #32]
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f000 fb1e 	bl	800b760 <I2C_WaitOnTXEFlagUntilTimeout>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00d      	beq.n	800b146 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	2b04      	cmp	r3, #4
 800b130:	d107      	bne.n	800b142 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b140:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e076      	b.n	800b234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b146:	88fb      	ldrh	r3, [r7, #6]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d105      	bne.n	800b158 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b14c:	893b      	ldrh	r3, [r7, #8]
 800b14e:	b2da      	uxtb	r2, r3
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	611a      	str	r2, [r3, #16]
 800b156:	e021      	b.n	800b19c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b158:	893b      	ldrh	r3, [r7, #8]
 800b15a:	0a1b      	lsrs	r3, r3, #8
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	b2da      	uxtb	r2, r3
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b168:	6a39      	ldr	r1, [r7, #32]
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f000 faf8 	bl	800b760 <I2C_WaitOnTXEFlagUntilTimeout>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00d      	beq.n	800b192 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	2b04      	cmp	r3, #4
 800b17c:	d107      	bne.n	800b18e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b18c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e050      	b.n	800b234 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b192:	893b      	ldrh	r3, [r7, #8]
 800b194:	b2da      	uxtb	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b19e:	6a39      	ldr	r1, [r7, #32]
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 fadd 	bl	800b760 <I2C_WaitOnTXEFlagUntilTimeout>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00d      	beq.n	800b1c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b0:	2b04      	cmp	r3, #4
 800b1b2:	d107      	bne.n	800b1c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e035      	b.n	800b234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f000 f9e5 	bl	800b5b4 <I2C_WaitOnFlagUntilTimeout>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00d      	beq.n	800b20c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1fe:	d103      	bne.n	800b208 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e013      	b.n	800b234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b20c:	897b      	ldrh	r3, [r7, #10]
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	f043 0301 	orr.w	r3, r3, #1
 800b214:	b2da      	uxtb	r2, r3
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	6a3a      	ldr	r2, [r7, #32]
 800b220:	4906      	ldr	r1, [pc, #24]	; (800b23c <I2C_RequestMemoryRead+0x1cc>)
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 fa1d 	bl	800b662 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e000      	b.n	800b234 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	00010002 	.word	0x00010002

0800b240 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b254:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b25c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b262:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b272:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d003      	beq.n	800b284 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b280:	2200      	movs	r2, #0
 800b282:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d003      	beq.n	800b294 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	2200      	movs	r2, #0
 800b292:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800b294:	7cfb      	ldrb	r3, [r7, #19]
 800b296:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800b29a:	2b21      	cmp	r3, #33	; 0x21
 800b29c:	d007      	beq.n	800b2ae <I2C_DMAXferCplt+0x6e>
 800b29e:	7cfb      	ldrb	r3, [r7, #19]
 800b2a0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800b2a4:	2b22      	cmp	r3, #34	; 0x22
 800b2a6:	d131      	bne.n	800b30c <I2C_DMAXferCplt+0xcc>
 800b2a8:	7cbb      	ldrb	r3, [r7, #18]
 800b2aa:	2b20      	cmp	r3, #32
 800b2ac:	d12e      	bne.n	800b30c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2bc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b2c4:	7cfb      	ldrb	r3, [r7, #19]
 800b2c6:	2b29      	cmp	r3, #41	; 0x29
 800b2c8:	d10a      	bne.n	800b2e0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2221      	movs	r2, #33	; 0x21
 800b2ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2228      	movs	r2, #40	; 0x28
 800b2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b2d8:	6978      	ldr	r0, [r7, #20]
 800b2da:	f7fe fd3b 	bl	8009d54 <HAL_I2C_SlaveTxCpltCallback>
 800b2de:	e00c      	b.n	800b2fa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b2e0:	7cfb      	ldrb	r3, [r7, #19]
 800b2e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e4:	d109      	bne.n	800b2fa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2222      	movs	r2, #34	; 0x22
 800b2ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	2228      	movs	r2, #40	; 0x28
 800b2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b2f4:	6978      	ldr	r0, [r7, #20]
 800b2f6:	f7fe fd37 	bl	8009d68 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b308:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800b30a:	e06a      	b.n	800b3e2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b00      	cmp	r3, #0
 800b316:	d064      	beq.n	800b3e2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d107      	bne.n	800b332 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b330:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	685a      	ldr	r2, [r3, #4]
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b340:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b348:	d009      	beq.n	800b35e <I2C_DMAXferCplt+0x11e>
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2b08      	cmp	r3, #8
 800b34e:	d006      	beq.n	800b35e <I2C_DMAXferCplt+0x11e>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b356:	d002      	beq.n	800b35e <I2C_DMAXferCplt+0x11e>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	d107      	bne.n	800b36e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b36c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	685a      	ldr	r2, [r3, #4]
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b37c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b38c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2200      	movs	r2, #0
 800b392:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d003      	beq.n	800b3a4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800b39c:	6978      	ldr	r0, [r7, #20]
 800b39e:	f7fe fd0f 	bl	8009dc0 <HAL_I2C_ErrorCallback>
}
 800b3a2:	e01e      	b.n	800b3e2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2220      	movs	r2, #32
 800b3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b40      	cmp	r3, #64	; 0x40
 800b3b6:	d10a      	bne.n	800b3ce <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800b3c6:	6978      	ldr	r0, [r7, #20]
 800b3c8:	f7fb fa52 	bl	8006870 <HAL_I2C_MemRxCpltCallback>
}
 800b3cc:	e009      	b.n	800b3e2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	2212      	movs	r2, #18
 800b3da:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800b3dc:	6978      	ldr	r0, [r7, #20]
 800b3de:	f7fe fcaf 	bl	8009d40 <HAL_I2C_MasterRxCpltCallback>
}
 800b3e2:	bf00      	nop
 800b3e4:	3718      	adds	r7, #24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b404:	2200      	movs	r2, #0
 800b406:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d003      	beq.n	800b418 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b414:	2200      	movs	r2, #0
 800b416:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7fd f8c1 	bl	80085a0 <HAL_DMA_GetError>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b02      	cmp	r3, #2
 800b422:	d01b      	beq.n	800b45c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b432:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44e:	f043 0210 	orr.w	r2, r3, #16
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f7fe fcb2 	bl	8009dc0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b45c:	bf00      	nop
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b46c:	2300      	movs	r3, #0
 800b46e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b474:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b47c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b47e:	4b4b      	ldr	r3, [pc, #300]	; (800b5ac <I2C_DMAAbort+0x148>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	08db      	lsrs	r3, r3, #3
 800b484:	4a4a      	ldr	r2, [pc, #296]	; (800b5b0 <I2C_DMAAbort+0x14c>)
 800b486:	fba2 2303 	umull	r2, r3, r2, r3
 800b48a:	0a1a      	lsrs	r2, r3, #8
 800b48c:	4613      	mov	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	00da      	lsls	r2, r3, #3
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a2:	f043 0220 	orr.w	r2, r3, #32
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800b4aa:	e00a      	b.n	800b4c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4c0:	d0ea      	beq.n	800b498 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4de:	2200      	movs	r2, #0
 800b4e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b504:	2200      	movs	r2, #0
 800b506:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d003      	beq.n	800b518 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b514:	2200      	movs	r2, #0
 800b516:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f022 0201 	bic.w	r2, r2, #1
 800b526:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	2b60      	cmp	r3, #96	; 0x60
 800b532:	d10e      	bne.n	800b552 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2220      	movs	r2, #32
 800b538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2200      	movs	r2, #0
 800b548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b54a:	6978      	ldr	r0, [r7, #20]
 800b54c:	f7fe fc42 	bl	8009dd4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b550:	e027      	b.n	800b5a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b552:	7cfb      	ldrb	r3, [r7, #19]
 800b554:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b558:	2b28      	cmp	r3, #40	; 0x28
 800b55a:	d117      	bne.n	800b58c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f042 0201 	orr.w	r2, r2, #1
 800b56a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b57a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2200      	movs	r2, #0
 800b580:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2228      	movs	r2, #40	; 0x28
 800b586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b58a:	e007      	b.n	800b59c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	2220      	movs	r2, #32
 800b590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b59c:	6978      	ldr	r0, [r7, #20]
 800b59e:	f7fe fc0f 	bl	8009dc0 <HAL_I2C_ErrorCallback>
}
 800b5a2:	bf00      	nop
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20001a64 	.word	0x20001a64
 800b5b0:	14f8b589 	.word	0x14f8b589

0800b5b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	603b      	str	r3, [r7, #0]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b5c4:	e025      	b.n	800b612 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5cc:	d021      	beq.n	800b612 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5ce:	f7fb fff3 	bl	80075b8 <HAL_GetTick>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d302      	bcc.n	800b5e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d116      	bne.n	800b612 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fe:	f043 0220 	orr.w	r2, r3, #32
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e023      	b.n	800b65a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	0c1b      	lsrs	r3, r3, #16
 800b616:	b2db      	uxtb	r3, r3
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d10d      	bne.n	800b638 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	695b      	ldr	r3, [r3, #20]
 800b622:	43da      	mvns	r2, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	4013      	ands	r3, r2
 800b628:	b29b      	uxth	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bf0c      	ite	eq
 800b62e:	2301      	moveq	r3, #1
 800b630:	2300      	movne	r3, #0
 800b632:	b2db      	uxtb	r3, r3
 800b634:	461a      	mov	r2, r3
 800b636:	e00c      	b.n	800b652 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	43da      	mvns	r2, r3
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	4013      	ands	r3, r2
 800b644:	b29b      	uxth	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	bf0c      	ite	eq
 800b64a:	2301      	moveq	r3, #1
 800b64c:	2300      	movne	r3, #0
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	461a      	mov	r2, r3
 800b652:	79fb      	ldrb	r3, [r7, #7]
 800b654:	429a      	cmp	r2, r3
 800b656:	d0b6      	beq.n	800b5c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	60b9      	str	r1, [r7, #8]
 800b66c:	607a      	str	r2, [r7, #4]
 800b66e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b670:	e051      	b.n	800b716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b67c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b680:	d123      	bne.n	800b6ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b690:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b69a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b6:	f043 0204 	orr.w	r2, r3, #4
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e046      	b.n	800b758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d0:	d021      	beq.n	800b716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6d2:	f7fb ff71 	bl	80075b8 <HAL_GetTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d302      	bcc.n	800b6e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d116      	bne.n	800b716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2220      	movs	r2, #32
 800b6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b702:	f043 0220 	orr.w	r2, r3, #32
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e020      	b.n	800b758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	0c1b      	lsrs	r3, r3, #16
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d10c      	bne.n	800b73a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	43da      	mvns	r2, r3
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	4013      	ands	r3, r2
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	2b00      	cmp	r3, #0
 800b730:	bf14      	ite	ne
 800b732:	2301      	movne	r3, #1
 800b734:	2300      	moveq	r3, #0
 800b736:	b2db      	uxtb	r3, r3
 800b738:	e00b      	b.n	800b752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	43da      	mvns	r2, r3
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	4013      	ands	r3, r2
 800b746:	b29b      	uxth	r3, r3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	bf14      	ite	ne
 800b74c:	2301      	movne	r3, #1
 800b74e:	2300      	moveq	r3, #0
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b00      	cmp	r3, #0
 800b754:	d18d      	bne.n	800b672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b76c:	e02d      	b.n	800b7ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f000 f8c0 	bl	800b8f4 <I2C_IsAcknowledgeFailed>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d001      	beq.n	800b77e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e02d      	b.n	800b7da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b784:	d021      	beq.n	800b7ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b786:	f7fb ff17 	bl	80075b8 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	429a      	cmp	r2, r3
 800b794:	d302      	bcc.n	800b79c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d116      	bne.n	800b7ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2220      	movs	r2, #32
 800b7a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b6:	f043 0220 	orr.w	r2, r3, #32
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e007      	b.n	800b7da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7d4:	2b80      	cmp	r3, #128	; 0x80
 800b7d6:	d1ca      	bne.n	800b76e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800b7f0:	4b13      	ldr	r3, [pc, #76]	; (800b840 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	08db      	lsrs	r3, r3, #3
 800b7f6:	4a13      	ldr	r2, [pc, #76]	; (800b844 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800b7f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7fc:	0a1a      	lsrs	r2, r3, #8
 800b7fe:	4613      	mov	r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	4413      	add	r3, r2
 800b804:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3b01      	subs	r3, #1
 800b80a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d107      	bne.n	800b822 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b816:	f043 0220 	orr.w	r2, r3, #32
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e008      	b.n	800b834 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b82c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b830:	d0e9      	beq.n	800b806 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	20001a64 	.word	0x20001a64
 800b844:	14f8b589 	.word	0x14f8b589

0800b848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b854:	e042      	b.n	800b8dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	f003 0310 	and.w	r3, r3, #16
 800b860:	2b10      	cmp	r3, #16
 800b862:	d119      	bne.n	800b898 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f06f 0210 	mvn.w	r2, #16
 800b86c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2220      	movs	r2, #32
 800b878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	e029      	b.n	800b8ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b898:	f7fb fe8e 	bl	80075b8 <HAL_GetTick>
 800b89c:	4602      	mov	r2, r0
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	68ba      	ldr	r2, [r7, #8]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d302      	bcc.n	800b8ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d116      	bne.n	800b8dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2220      	movs	r2, #32
 800b8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c8:	f043 0220 	orr.w	r2, r3, #32
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e007      	b.n	800b8ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e6:	2b40      	cmp	r3, #64	; 0x40
 800b8e8:	d1b5      	bne.n	800b856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b90a:	d11b      	bne.n	800b944 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b914:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2220      	movs	r2, #32
 800b920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b930:	f043 0204 	orr.w	r2, r3, #4
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e000      	b.n	800b946 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b952:	b480      	push	{r7}
 800b954:	b083      	sub	sp, #12
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b962:	d103      	bne.n	800b96c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b96a:	e007      	b.n	800b97c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b970:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b974:	d102      	bne.n	800b97c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2208      	movs	r2, #8
 800b97a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d101      	bne.n	800b99a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e25b      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d075      	beq.n	800ba92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b9a6:	4ba3      	ldr	r3, [pc, #652]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	f003 030c 	and.w	r3, r3, #12
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d00c      	beq.n	800b9cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b9b2:	4ba0      	ldr	r3, [pc, #640]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b9ba:	2b08      	cmp	r3, #8
 800b9bc:	d112      	bne.n	800b9e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b9be:	4b9d      	ldr	r3, [pc, #628]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9ca:	d10b      	bne.n	800b9e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9cc:	4b99      	ldr	r3, [pc, #612]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d05b      	beq.n	800ba90 <HAL_RCC_OscConfig+0x108>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d157      	bne.n	800ba90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e236      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ec:	d106      	bne.n	800b9fc <HAL_RCC_OscConfig+0x74>
 800b9ee:	4b91      	ldr	r3, [pc, #580]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a90      	ldr	r2, [pc, #576]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800b9f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9f8:	6013      	str	r3, [r2, #0]
 800b9fa:	e01d      	b.n	800ba38 <HAL_RCC_OscConfig+0xb0>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba04:	d10c      	bne.n	800ba20 <HAL_RCC_OscConfig+0x98>
 800ba06:	4b8b      	ldr	r3, [pc, #556]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a8a      	ldr	r2, [pc, #552]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800ba0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba10:	6013      	str	r3, [r2, #0]
 800ba12:	4b88      	ldr	r3, [pc, #544]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a87      	ldr	r2, [pc, #540]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800ba18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	e00b      	b.n	800ba38 <HAL_RCC_OscConfig+0xb0>
 800ba20:	4b84      	ldr	r3, [pc, #528]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a83      	ldr	r2, [pc, #524]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800ba26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba2a:	6013      	str	r3, [r2, #0]
 800ba2c:	4b81      	ldr	r3, [pc, #516]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a80      	ldr	r2, [pc, #512]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800ba32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d013      	beq.n	800ba68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba40:	f7fb fdba 	bl	80075b8 <HAL_GetTick>
 800ba44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba46:	e008      	b.n	800ba5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba48:	f7fb fdb6 	bl	80075b8 <HAL_GetTick>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	2b64      	cmp	r3, #100	; 0x64
 800ba54:	d901      	bls.n	800ba5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ba56:	2303      	movs	r3, #3
 800ba58:	e1fb      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba5a:	4b76      	ldr	r3, [pc, #472]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d0f0      	beq.n	800ba48 <HAL_RCC_OscConfig+0xc0>
 800ba66:	e014      	b.n	800ba92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba68:	f7fb fda6 	bl	80075b8 <HAL_GetTick>
 800ba6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba6e:	e008      	b.n	800ba82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba70:	f7fb fda2 	bl	80075b8 <HAL_GetTick>
 800ba74:	4602      	mov	r2, r0
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	2b64      	cmp	r3, #100	; 0x64
 800ba7c:	d901      	bls.n	800ba82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	e1e7      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba82:	4b6c      	ldr	r3, [pc, #432]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1f0      	bne.n	800ba70 <HAL_RCC_OscConfig+0xe8>
 800ba8e:	e000      	b.n	800ba92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f003 0302 	and.w	r3, r3, #2
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d063      	beq.n	800bb66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ba9e:	4b65      	ldr	r3, [pc, #404]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	f003 030c 	and.w	r3, r3, #12
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00b      	beq.n	800bac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800baaa:	4b62      	ldr	r3, [pc, #392]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bab2:	2b08      	cmp	r3, #8
 800bab4:	d11c      	bne.n	800baf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bab6:	4b5f      	ldr	r3, [pc, #380]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d116      	bne.n	800baf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bac2:	4b5c      	ldr	r3, [pc, #368]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0302 	and.w	r3, r3, #2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d005      	beq.n	800bada <HAL_RCC_OscConfig+0x152>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d001      	beq.n	800bada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bad6:	2301      	movs	r3, #1
 800bad8:	e1bb      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bada:	4b56      	ldr	r3, [pc, #344]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	4952      	ldr	r1, [pc, #328]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800baea:	4313      	orrs	r3, r2
 800baec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800baee:	e03a      	b.n	800bb66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d020      	beq.n	800bb3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800baf8:	4b4f      	ldr	r3, [pc, #316]	; (800bc38 <HAL_RCC_OscConfig+0x2b0>)
 800bafa:	2201      	movs	r2, #1
 800bafc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bafe:	f7fb fd5b 	bl	80075b8 <HAL_GetTick>
 800bb02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb04:	e008      	b.n	800bb18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb06:	f7fb fd57 	bl	80075b8 <HAL_GetTick>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d901      	bls.n	800bb18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bb14:	2303      	movs	r3, #3
 800bb16:	e19c      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb18:	4b46      	ldr	r3, [pc, #280]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 0302 	and.w	r3, r3, #2
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d0f0      	beq.n	800bb06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb24:	4b43      	ldr	r3, [pc, #268]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	00db      	lsls	r3, r3, #3
 800bb32:	4940      	ldr	r1, [pc, #256]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bb34:	4313      	orrs	r3, r2
 800bb36:	600b      	str	r3, [r1, #0]
 800bb38:	e015      	b.n	800bb66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb3a:	4b3f      	ldr	r3, [pc, #252]	; (800bc38 <HAL_RCC_OscConfig+0x2b0>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb40:	f7fb fd3a 	bl	80075b8 <HAL_GetTick>
 800bb44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb46:	e008      	b.n	800bb5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb48:	f7fb fd36 	bl	80075b8 <HAL_GetTick>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d901      	bls.n	800bb5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bb56:	2303      	movs	r3, #3
 800bb58:	e17b      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb5a:	4b36      	ldr	r3, [pc, #216]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f003 0302 	and.w	r3, r3, #2
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1f0      	bne.n	800bb48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 0308 	and.w	r3, r3, #8
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d030      	beq.n	800bbd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d016      	beq.n	800bba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb7a:	4b30      	ldr	r3, [pc, #192]	; (800bc3c <HAL_RCC_OscConfig+0x2b4>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb80:	f7fb fd1a 	bl	80075b8 <HAL_GetTick>
 800bb84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb86:	e008      	b.n	800bb9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb88:	f7fb fd16 	bl	80075b8 <HAL_GetTick>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	2b02      	cmp	r3, #2
 800bb94:	d901      	bls.n	800bb9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bb96:	2303      	movs	r3, #3
 800bb98:	e15b      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb9a:	4b26      	ldr	r3, [pc, #152]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bb9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb9e:	f003 0302 	and.w	r3, r3, #2
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0f0      	beq.n	800bb88 <HAL_RCC_OscConfig+0x200>
 800bba6:	e015      	b.n	800bbd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bba8:	4b24      	ldr	r3, [pc, #144]	; (800bc3c <HAL_RCC_OscConfig+0x2b4>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bbae:	f7fb fd03 	bl	80075b8 <HAL_GetTick>
 800bbb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbb4:	e008      	b.n	800bbc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bbb6:	f7fb fcff 	bl	80075b8 <HAL_GetTick>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d901      	bls.n	800bbc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	e144      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbc8:	4b1a      	ldr	r3, [pc, #104]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bbca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbcc:	f003 0302 	and.w	r3, r3, #2
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1f0      	bne.n	800bbb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0304 	and.w	r3, r3, #4
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 80a0 	beq.w	800bd22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbe6:	4b13      	ldr	r3, [pc, #76]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10f      	bne.n	800bc12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60bb      	str	r3, [r7, #8]
 800bbf6:	4b0f      	ldr	r3, [pc, #60]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfa:	4a0e      	ldr	r2, [pc, #56]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bbfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc00:	6413      	str	r3, [r2, #64]	; 0x40
 800bc02:	4b0c      	ldr	r3, [pc, #48]	; (800bc34 <HAL_RCC_OscConfig+0x2ac>)
 800bc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc0a:	60bb      	str	r3, [r7, #8]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc12:	4b0b      	ldr	r3, [pc, #44]	; (800bc40 <HAL_RCC_OscConfig+0x2b8>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d121      	bne.n	800bc62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc1e:	4b08      	ldr	r3, [pc, #32]	; (800bc40 <HAL_RCC_OscConfig+0x2b8>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a07      	ldr	r2, [pc, #28]	; (800bc40 <HAL_RCC_OscConfig+0x2b8>)
 800bc24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc2a:	f7fb fcc5 	bl	80075b8 <HAL_GetTick>
 800bc2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc30:	e011      	b.n	800bc56 <HAL_RCC_OscConfig+0x2ce>
 800bc32:	bf00      	nop
 800bc34:	40023800 	.word	0x40023800
 800bc38:	42470000 	.word	0x42470000
 800bc3c:	42470e80 	.word	0x42470e80
 800bc40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc44:	f7fb fcb8 	bl	80075b8 <HAL_GetTick>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	d901      	bls.n	800bc56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800bc52:	2303      	movs	r3, #3
 800bc54:	e0fd      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc56:	4b81      	ldr	r3, [pc, #516]	; (800be5c <HAL_RCC_OscConfig+0x4d4>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d0f0      	beq.n	800bc44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d106      	bne.n	800bc78 <HAL_RCC_OscConfig+0x2f0>
 800bc6a:	4b7d      	ldr	r3, [pc, #500]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bc6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc6e:	4a7c      	ldr	r2, [pc, #496]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bc70:	f043 0301 	orr.w	r3, r3, #1
 800bc74:	6713      	str	r3, [r2, #112]	; 0x70
 800bc76:	e01c      	b.n	800bcb2 <HAL_RCC_OscConfig+0x32a>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	2b05      	cmp	r3, #5
 800bc7e:	d10c      	bne.n	800bc9a <HAL_RCC_OscConfig+0x312>
 800bc80:	4b77      	ldr	r3, [pc, #476]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bc82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc84:	4a76      	ldr	r2, [pc, #472]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bc86:	f043 0304 	orr.w	r3, r3, #4
 800bc8a:	6713      	str	r3, [r2, #112]	; 0x70
 800bc8c:	4b74      	ldr	r3, [pc, #464]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bc8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc90:	4a73      	ldr	r2, [pc, #460]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bc92:	f043 0301 	orr.w	r3, r3, #1
 800bc96:	6713      	str	r3, [r2, #112]	; 0x70
 800bc98:	e00b      	b.n	800bcb2 <HAL_RCC_OscConfig+0x32a>
 800bc9a:	4b71      	ldr	r3, [pc, #452]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bc9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc9e:	4a70      	ldr	r2, [pc, #448]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bca0:	f023 0301 	bic.w	r3, r3, #1
 800bca4:	6713      	str	r3, [r2, #112]	; 0x70
 800bca6:	4b6e      	ldr	r3, [pc, #440]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcaa:	4a6d      	ldr	r2, [pc, #436]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bcac:	f023 0304 	bic.w	r3, r3, #4
 800bcb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d015      	beq.n	800bce6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcba:	f7fb fc7d 	bl	80075b8 <HAL_GetTick>
 800bcbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcc0:	e00a      	b.n	800bcd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcc2:	f7fb fc79 	bl	80075b8 <HAL_GetTick>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d901      	bls.n	800bcd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e0bc      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcd8:	4b61      	ldr	r3, [pc, #388]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bcda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcdc:	f003 0302 	and.w	r3, r3, #2
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d0ee      	beq.n	800bcc2 <HAL_RCC_OscConfig+0x33a>
 800bce4:	e014      	b.n	800bd10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bce6:	f7fb fc67 	bl	80075b8 <HAL_GetTick>
 800bcea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcec:	e00a      	b.n	800bd04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcee:	f7fb fc63 	bl	80075b8 <HAL_GetTick>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d901      	bls.n	800bd04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e0a6      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd04:	4b56      	ldr	r3, [pc, #344]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bd06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd08:	f003 0302 	and.w	r3, r3, #2
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1ee      	bne.n	800bcee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d105      	bne.n	800bd22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd16:	4b52      	ldr	r3, [pc, #328]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1a:	4a51      	ldr	r2, [pc, #324]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bd1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f000 8092 	beq.w	800be50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bd2c:	4b4c      	ldr	r3, [pc, #304]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	f003 030c 	and.w	r3, r3, #12
 800bd34:	2b08      	cmp	r3, #8
 800bd36:	d05c      	beq.n	800bdf2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d141      	bne.n	800bdc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd40:	4b48      	ldr	r3, [pc, #288]	; (800be64 <HAL_RCC_OscConfig+0x4dc>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd46:	f7fb fc37 	bl	80075b8 <HAL_GetTick>
 800bd4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd4c:	e008      	b.n	800bd60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd4e:	f7fb fc33 	bl	80075b8 <HAL_GetTick>
 800bd52:	4602      	mov	r2, r0
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	1ad3      	subs	r3, r2, r3
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d901      	bls.n	800bd60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	e078      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd60:	4b3f      	ldr	r3, [pc, #252]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1f0      	bne.n	800bd4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	69da      	ldr	r2, [r3, #28]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a1b      	ldr	r3, [r3, #32]
 800bd74:	431a      	orrs	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	019b      	lsls	r3, r3, #6
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	085b      	lsrs	r3, r3, #1
 800bd84:	3b01      	subs	r3, #1
 800bd86:	041b      	lsls	r3, r3, #16
 800bd88:	431a      	orrs	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8e:	061b      	lsls	r3, r3, #24
 800bd90:	4933      	ldr	r1, [pc, #204]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd96:	4b33      	ldr	r3, [pc, #204]	; (800be64 <HAL_RCC_OscConfig+0x4dc>)
 800bd98:	2201      	movs	r2, #1
 800bd9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd9c:	f7fb fc0c 	bl	80075b8 <HAL_GetTick>
 800bda0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bda2:	e008      	b.n	800bdb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bda4:	f7fb fc08 	bl	80075b8 <HAL_GetTick>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d901      	bls.n	800bdb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e04d      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bdb6:	4b2a      	ldr	r3, [pc, #168]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d0f0      	beq.n	800bda4 <HAL_RCC_OscConfig+0x41c>
 800bdc2:	e045      	b.n	800be50 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bdc4:	4b27      	ldr	r3, [pc, #156]	; (800be64 <HAL_RCC_OscConfig+0x4dc>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bdca:	f7fb fbf5 	bl	80075b8 <HAL_GetTick>
 800bdce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdd0:	e008      	b.n	800bde4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bdd2:	f7fb fbf1 	bl	80075b8 <HAL_GetTick>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d901      	bls.n	800bde4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800bde0:	2303      	movs	r3, #3
 800bde2:	e036      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bde4:	4b1e      	ldr	r3, [pc, #120]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1f0      	bne.n	800bdd2 <HAL_RCC_OscConfig+0x44a>
 800bdf0:	e02e      	b.n	800be50 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d101      	bne.n	800bdfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e029      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bdfe:	4b18      	ldr	r3, [pc, #96]	; (800be60 <HAL_RCC_OscConfig+0x4d8>)
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d11c      	bne.n	800be4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d115      	bne.n	800be4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800be26:	4013      	ands	r3, r2
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d10d      	bne.n	800be4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d106      	bne.n	800be4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800be48:	429a      	cmp	r2, r3
 800be4a:	d001      	beq.n	800be50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	e000      	b.n	800be52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3718      	adds	r7, #24
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	40007000 	.word	0x40007000
 800be60:	40023800 	.word	0x40023800
 800be64:	42470060 	.word	0x42470060

0800be68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	e0cc      	b.n	800c016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800be7c:	4b68      	ldr	r3, [pc, #416]	; (800c020 <HAL_RCC_ClockConfig+0x1b8>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 030f 	and.w	r3, r3, #15
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	429a      	cmp	r2, r3
 800be88:	d90c      	bls.n	800bea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be8a:	4b65      	ldr	r3, [pc, #404]	; (800c020 <HAL_RCC_ClockConfig+0x1b8>)
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	b2d2      	uxtb	r2, r2
 800be90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be92:	4b63      	ldr	r3, [pc, #396]	; (800c020 <HAL_RCC_ClockConfig+0x1b8>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f003 030f 	and.w	r3, r3, #15
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d001      	beq.n	800bea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	e0b8      	b.n	800c016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 0302 	and.w	r3, r3, #2
 800beac:	2b00      	cmp	r3, #0
 800beae:	d020      	beq.n	800bef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f003 0304 	and.w	r3, r3, #4
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d005      	beq.n	800bec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bebc:	4b59      	ldr	r3, [pc, #356]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	4a58      	ldr	r2, [pc, #352]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f003 0308 	and.w	r3, r3, #8
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d005      	beq.n	800bee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bed4:	4b53      	ldr	r3, [pc, #332]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	4a52      	ldr	r2, [pc, #328]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800beda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bee0:	4b50      	ldr	r3, [pc, #320]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	494d      	ldr	r1, [pc, #308]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800beee:	4313      	orrs	r3, r2
 800bef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 0301 	and.w	r3, r3, #1
 800befa:	2b00      	cmp	r3, #0
 800befc:	d044      	beq.n	800bf88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d107      	bne.n	800bf16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf06:	4b47      	ldr	r3, [pc, #284]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d119      	bne.n	800bf46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e07f      	b.n	800c016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	d003      	beq.n	800bf26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d107      	bne.n	800bf36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf26:	4b3f      	ldr	r3, [pc, #252]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d109      	bne.n	800bf46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	e06f      	b.n	800c016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf36:	4b3b      	ldr	r3, [pc, #236]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 0302 	and.w	r3, r3, #2
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e067      	b.n	800c016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf46:	4b37      	ldr	r3, [pc, #220]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	f023 0203 	bic.w	r2, r3, #3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	4934      	ldr	r1, [pc, #208]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bf58:	f7fb fb2e 	bl	80075b8 <HAL_GetTick>
 800bf5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf5e:	e00a      	b.n	800bf76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf60:	f7fb fb2a 	bl	80075b8 <HAL_GetTick>
 800bf64:	4602      	mov	r2, r0
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d901      	bls.n	800bf76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bf72:	2303      	movs	r3, #3
 800bf74:	e04f      	b.n	800c016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf76:	4b2b      	ldr	r3, [pc, #172]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	f003 020c 	and.w	r2, r3, #12
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d1eb      	bne.n	800bf60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bf88:	4b25      	ldr	r3, [pc, #148]	; (800c020 <HAL_RCC_ClockConfig+0x1b8>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 030f 	and.w	r3, r3, #15
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d20c      	bcs.n	800bfb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf96:	4b22      	ldr	r3, [pc, #136]	; (800c020 <HAL_RCC_ClockConfig+0x1b8>)
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	b2d2      	uxtb	r2, r2
 800bf9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf9e:	4b20      	ldr	r3, [pc, #128]	; (800c020 <HAL_RCC_ClockConfig+0x1b8>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 030f 	and.w	r3, r3, #15
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d001      	beq.n	800bfb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	e032      	b.n	800c016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 0304 	and.w	r3, r3, #4
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d008      	beq.n	800bfce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bfbc:	4b19      	ldr	r3, [pc, #100]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	4916      	ldr	r1, [pc, #88]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 0308 	and.w	r3, r3, #8
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d009      	beq.n	800bfee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bfda:	4b12      	ldr	r3, [pc, #72]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	691b      	ldr	r3, [r3, #16]
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	490e      	ldr	r1, [pc, #56]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bfea:	4313      	orrs	r3, r2
 800bfec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bfee:	f000 f821 	bl	800c034 <HAL_RCC_GetSysClockFreq>
 800bff2:	4601      	mov	r1, r0
 800bff4:	4b0b      	ldr	r3, [pc, #44]	; (800c024 <HAL_RCC_ClockConfig+0x1bc>)
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	091b      	lsrs	r3, r3, #4
 800bffa:	f003 030f 	and.w	r3, r3, #15
 800bffe:	4a0a      	ldr	r2, [pc, #40]	; (800c028 <HAL_RCC_ClockConfig+0x1c0>)
 800c000:	5cd3      	ldrb	r3, [r2, r3]
 800c002:	fa21 f303 	lsr.w	r3, r1, r3
 800c006:	4a09      	ldr	r2, [pc, #36]	; (800c02c <HAL_RCC_ClockConfig+0x1c4>)
 800c008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c00a:	4b09      	ldr	r3, [pc, #36]	; (800c030 <HAL_RCC_ClockConfig+0x1c8>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fb fa8e 	bl	8007530 <HAL_InitTick>

  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	40023c00 	.word	0x40023c00
 800c024:	40023800 	.word	0x40023800
 800c028:	080137f0 	.word	0x080137f0
 800c02c:	20001a64 	.word	0x20001a64
 800c030:	20001a80 	.word	0x20001a80

0800c034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c03a:	2300      	movs	r3, #0
 800c03c:	607b      	str	r3, [r7, #4]
 800c03e:	2300      	movs	r3, #0
 800c040:	60fb      	str	r3, [r7, #12]
 800c042:	2300      	movs	r3, #0
 800c044:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c046:	2300      	movs	r3, #0
 800c048:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c04a:	4b50      	ldr	r3, [pc, #320]	; (800c18c <HAL_RCC_GetSysClockFreq+0x158>)
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	f003 030c 	and.w	r3, r3, #12
 800c052:	2b04      	cmp	r3, #4
 800c054:	d007      	beq.n	800c066 <HAL_RCC_GetSysClockFreq+0x32>
 800c056:	2b08      	cmp	r3, #8
 800c058:	d008      	beq.n	800c06c <HAL_RCC_GetSysClockFreq+0x38>
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f040 808d 	bne.w	800c17a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c060:	4b4b      	ldr	r3, [pc, #300]	; (800c190 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c062:	60bb      	str	r3, [r7, #8]
       break;
 800c064:	e08c      	b.n	800c180 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c066:	4b4b      	ldr	r3, [pc, #300]	; (800c194 <HAL_RCC_GetSysClockFreq+0x160>)
 800c068:	60bb      	str	r3, [r7, #8]
      break;
 800c06a:	e089      	b.n	800c180 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c06c:	4b47      	ldr	r3, [pc, #284]	; (800c18c <HAL_RCC_GetSysClockFreq+0x158>)
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c074:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c076:	4b45      	ldr	r3, [pc, #276]	; (800c18c <HAL_RCC_GetSysClockFreq+0x158>)
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d023      	beq.n	800c0ca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c082:	4b42      	ldr	r3, [pc, #264]	; (800c18c <HAL_RCC_GetSysClockFreq+0x158>)
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	099b      	lsrs	r3, r3, #6
 800c088:	f04f 0400 	mov.w	r4, #0
 800c08c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c090:	f04f 0200 	mov.w	r2, #0
 800c094:	ea03 0501 	and.w	r5, r3, r1
 800c098:	ea04 0602 	and.w	r6, r4, r2
 800c09c:	4a3d      	ldr	r2, [pc, #244]	; (800c194 <HAL_RCC_GetSysClockFreq+0x160>)
 800c09e:	fb02 f106 	mul.w	r1, r2, r6
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	fb02 f205 	mul.w	r2, r2, r5
 800c0a8:	440a      	add	r2, r1
 800c0aa:	493a      	ldr	r1, [pc, #232]	; (800c194 <HAL_RCC_GetSysClockFreq+0x160>)
 800c0ac:	fba5 0101 	umull	r0, r1, r5, r1
 800c0b0:	1853      	adds	r3, r2, r1
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f04f 0400 	mov.w	r4, #0
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	4623      	mov	r3, r4
 800c0be:	f7f4 fdc3 	bl	8000c48 <__aeabi_uldivmod>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	e049      	b.n	800c15e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c0ca:	4b30      	ldr	r3, [pc, #192]	; (800c18c <HAL_RCC_GetSysClockFreq+0x158>)
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	099b      	lsrs	r3, r3, #6
 800c0d0:	f04f 0400 	mov.w	r4, #0
 800c0d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c0d8:	f04f 0200 	mov.w	r2, #0
 800c0dc:	ea03 0501 	and.w	r5, r3, r1
 800c0e0:	ea04 0602 	and.w	r6, r4, r2
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	f04f 0300 	mov.w	r3, #0
 800c0ec:	f04f 0400 	mov.w	r4, #0
 800c0f0:	0154      	lsls	r4, r2, #5
 800c0f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c0f6:	014b      	lsls	r3, r1, #5
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4622      	mov	r2, r4
 800c0fc:	1b49      	subs	r1, r1, r5
 800c0fe:	eb62 0206 	sbc.w	r2, r2, r6
 800c102:	f04f 0300 	mov.w	r3, #0
 800c106:	f04f 0400 	mov.w	r4, #0
 800c10a:	0194      	lsls	r4, r2, #6
 800c10c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c110:	018b      	lsls	r3, r1, #6
 800c112:	1a5b      	subs	r3, r3, r1
 800c114:	eb64 0402 	sbc.w	r4, r4, r2
 800c118:	f04f 0100 	mov.w	r1, #0
 800c11c:	f04f 0200 	mov.w	r2, #0
 800c120:	00e2      	lsls	r2, r4, #3
 800c122:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c126:	00d9      	lsls	r1, r3, #3
 800c128:	460b      	mov	r3, r1
 800c12a:	4614      	mov	r4, r2
 800c12c:	195b      	adds	r3, r3, r5
 800c12e:	eb44 0406 	adc.w	r4, r4, r6
 800c132:	f04f 0100 	mov.w	r1, #0
 800c136:	f04f 0200 	mov.w	r2, #0
 800c13a:	02a2      	lsls	r2, r4, #10
 800c13c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c140:	0299      	lsls	r1, r3, #10
 800c142:	460b      	mov	r3, r1
 800c144:	4614      	mov	r4, r2
 800c146:	4618      	mov	r0, r3
 800c148:	4621      	mov	r1, r4
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f04f 0400 	mov.w	r4, #0
 800c150:	461a      	mov	r2, r3
 800c152:	4623      	mov	r3, r4
 800c154:	f7f4 fd78 	bl	8000c48 <__aeabi_uldivmod>
 800c158:	4603      	mov	r3, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c15e:	4b0b      	ldr	r3, [pc, #44]	; (800c18c <HAL_RCC_GetSysClockFreq+0x158>)
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	0c1b      	lsrs	r3, r3, #16
 800c164:	f003 0303 	and.w	r3, r3, #3
 800c168:	3301      	adds	r3, #1
 800c16a:	005b      	lsls	r3, r3, #1
 800c16c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	fbb2 f3f3 	udiv	r3, r2, r3
 800c176:	60bb      	str	r3, [r7, #8]
      break;
 800c178:	e002      	b.n	800c180 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c17a:	4b05      	ldr	r3, [pc, #20]	; (800c190 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c17c:	60bb      	str	r3, [r7, #8]
      break;
 800c17e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c180:	68bb      	ldr	r3, [r7, #8]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3714      	adds	r7, #20
 800c186:	46bd      	mov	sp, r7
 800c188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c18a:	bf00      	nop
 800c18c:	40023800 	.word	0x40023800
 800c190:	00f42400 	.word	0x00f42400
 800c194:	017d7840 	.word	0x017d7840

0800c198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c198:	b480      	push	{r7}
 800c19a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c19c:	4b03      	ldr	r3, [pc, #12]	; (800c1ac <HAL_RCC_GetHCLKFreq+0x14>)
 800c19e:	681b      	ldr	r3, [r3, #0]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	20001a64 	.word	0x20001a64

0800c1b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c1b4:	f7ff fff0 	bl	800c198 <HAL_RCC_GetHCLKFreq>
 800c1b8:	4601      	mov	r1, r0
 800c1ba:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	0a9b      	lsrs	r3, r3, #10
 800c1c0:	f003 0307 	and.w	r3, r3, #7
 800c1c4:	4a03      	ldr	r2, [pc, #12]	; (800c1d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c1c6:	5cd3      	ldrb	r3, [r2, r3]
 800c1c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	40023800 	.word	0x40023800
 800c1d4:	08013800 	.word	0x08013800

0800c1d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c1dc:	f7ff ffdc 	bl	800c198 <HAL_RCC_GetHCLKFreq>
 800c1e0:	4601      	mov	r1, r0
 800c1e2:	4b05      	ldr	r3, [pc, #20]	; (800c1f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	0b5b      	lsrs	r3, r3, #13
 800c1e8:	f003 0307 	and.w	r3, r3, #7
 800c1ec:	4a03      	ldr	r2, [pc, #12]	; (800c1fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c1ee:	5cd3      	ldrb	r3, [r2, r3]
 800c1f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	40023800 	.word	0x40023800
 800c1fc:	08013800 	.word	0x08013800

0800c200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e056      	b.n	800c2c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b00      	cmp	r3, #0
 800c222:	d106      	bne.n	800c232 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7fa f8ad 	bl	800638c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2202      	movs	r2, #2
 800c236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c248:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	431a      	orrs	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	431a      	orrs	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	431a      	orrs	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c26e:	431a      	orrs	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	69db      	ldr	r3, [r3, #28]
 800c274:	431a      	orrs	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	ea42 0103 	orr.w	r1, r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	430a      	orrs	r2, r1
 800c288:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	699b      	ldr	r3, [r3, #24]
 800c28e:	0c1b      	lsrs	r3, r3, #16
 800c290:	f003 0104 	and.w	r1, r3, #4
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	430a      	orrs	r2, r1
 800c29e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	69da      	ldr	r2, [r3, #28]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b088      	sub	sp, #32
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	603b      	str	r3, [r7, #0]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d101      	bne.n	800c2ea <HAL_SPI_Transmit+0x22>
 800c2e6:	2302      	movs	r3, #2
 800c2e8:	e11e      	b.n	800c528 <HAL_SPI_Transmit+0x260>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2f2:	f7fb f961 	bl	80075b8 <HAL_GetTick>
 800c2f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c2f8:	88fb      	ldrh	r3, [r7, #6]
 800c2fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c302:	b2db      	uxtb	r3, r3
 800c304:	2b01      	cmp	r3, #1
 800c306:	d002      	beq.n	800c30e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c308:	2302      	movs	r3, #2
 800c30a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c30c:	e103      	b.n	800c516 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <HAL_SPI_Transmit+0x52>
 800c314:	88fb      	ldrh	r3, [r7, #6]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d102      	bne.n	800c320 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c31e:	e0fa      	b.n	800c516 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2203      	movs	r2, #3
 800c324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	88fa      	ldrh	r2, [r7, #6]
 800c338:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	88fa      	ldrh	r2, [r7, #6]
 800c33e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2200      	movs	r2, #0
 800c34a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2200      	movs	r2, #0
 800c356:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c366:	d107      	bne.n	800c378 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c376:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c382:	2b40      	cmp	r3, #64	; 0x40
 800c384:	d007      	beq.n	800c396 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c39e:	d14b      	bne.n	800c438 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <HAL_SPI_Transmit+0xe6>
 800c3a8:	8afb      	ldrh	r3, [r7, #22]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d13e      	bne.n	800c42c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b2:	881a      	ldrh	r2, [r3, #0]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3be:	1c9a      	adds	r2, r3, #2
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c3d2:	e02b      	b.n	800c42c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	f003 0302 	and.w	r3, r3, #2
 800c3de:	2b02      	cmp	r3, #2
 800c3e0:	d112      	bne.n	800c408 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e6:	881a      	ldrh	r2, [r3, #0]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f2:	1c9a      	adds	r2, r3, #2
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	3b01      	subs	r3, #1
 800c400:	b29a      	uxth	r2, r3
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	86da      	strh	r2, [r3, #54]	; 0x36
 800c406:	e011      	b.n	800c42c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c408:	f7fb f8d6 	bl	80075b8 <HAL_GetTick>
 800c40c:	4602      	mov	r2, r0
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	429a      	cmp	r2, r3
 800c416:	d803      	bhi.n	800c420 <HAL_SPI_Transmit+0x158>
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c41e:	d102      	bne.n	800c426 <HAL_SPI_Transmit+0x15e>
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d102      	bne.n	800c42c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c42a:	e074      	b.n	800c516 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c430:	b29b      	uxth	r3, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1ce      	bne.n	800c3d4 <HAL_SPI_Transmit+0x10c>
 800c436:	e04c      	b.n	800c4d2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <HAL_SPI_Transmit+0x17e>
 800c440:	8afb      	ldrh	r3, [r7, #22]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d140      	bne.n	800c4c8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	330c      	adds	r3, #12
 800c450:	7812      	ldrb	r2, [r2, #0]
 800c452:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c458:	1c5a      	adds	r2, r3, #1
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c462:	b29b      	uxth	r3, r3
 800c464:	3b01      	subs	r3, #1
 800c466:	b29a      	uxth	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c46c:	e02c      	b.n	800c4c8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	f003 0302 	and.w	r3, r3, #2
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d113      	bne.n	800c4a4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	330c      	adds	r3, #12
 800c486:	7812      	ldrb	r2, [r2, #0]
 800c488:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48e:	1c5a      	adds	r2, r3, #1
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c498:	b29b      	uxth	r3, r3
 800c49a:	3b01      	subs	r3, #1
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	86da      	strh	r2, [r3, #54]	; 0x36
 800c4a2:	e011      	b.n	800c4c8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4a4:	f7fb f888 	bl	80075b8 <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d803      	bhi.n	800c4bc <HAL_SPI_Transmit+0x1f4>
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ba:	d102      	bne.n	800c4c2 <HAL_SPI_Transmit+0x1fa>
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d102      	bne.n	800c4c8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c4c6:	e026      	b.n	800c516 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1cd      	bne.n	800c46e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c4d2:	69ba      	ldr	r2, [r7, #24]
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f000 fc94 	bl	800ce04 <SPI_EndRxTxTransaction>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d002      	beq.n	800c4e8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2220      	movs	r2, #32
 800c4e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10a      	bne.n	800c506 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	613b      	str	r3, [r7, #16]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	613b      	str	r3, [r7, #16]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	613b      	str	r3, [r7, #16]
 800c504:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	77fb      	strb	r3, [r7, #31]
 800c512:	e000      	b.n	800c516 <HAL_SPI_Transmit+0x24e>
  }

error:
 800c514:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c526:	7ffb      	ldrb	r3, [r7, #31]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3720      	adds	r7, #32
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b08c      	sub	sp, #48	; 0x30
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c53e:	2301      	movs	r3, #1
 800c540:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c542:	2300      	movs	r3, #0
 800c544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d101      	bne.n	800c556 <HAL_SPI_TransmitReceive+0x26>
 800c552:	2302      	movs	r3, #2
 800c554:	e18a      	b.n	800c86c <HAL_SPI_TransmitReceive+0x33c>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c55e:	f7fb f82b 	bl	80075b8 <HAL_GetTick>
 800c562:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c56a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c574:	887b      	ldrh	r3, [r7, #2]
 800c576:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c578:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d00f      	beq.n	800c5a0 <HAL_SPI_TransmitReceive+0x70>
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c586:	d107      	bne.n	800c598 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d103      	bne.n	800c598 <HAL_SPI_TransmitReceive+0x68>
 800c590:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c594:	2b04      	cmp	r3, #4
 800c596:	d003      	beq.n	800c5a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c598:	2302      	movs	r3, #2
 800c59a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c59e:	e15b      	b.n	800c858 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d005      	beq.n	800c5b2 <HAL_SPI_TransmitReceive+0x82>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <HAL_SPI_TransmitReceive+0x82>
 800c5ac:	887b      	ldrh	r3, [r7, #2]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d103      	bne.n	800c5ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c5b8:	e14e      	b.n	800c858 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b04      	cmp	r3, #4
 800c5c4:	d003      	beq.n	800c5ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2205      	movs	r2, #5
 800c5ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	887a      	ldrh	r2, [r7, #2]
 800c5de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	887a      	ldrh	r2, [r7, #2]
 800c5e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	887a      	ldrh	r2, [r7, #2]
 800c5f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	887a      	ldrh	r2, [r7, #2]
 800c5f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2200      	movs	r2, #0
 800c602:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c60e:	2b40      	cmp	r3, #64	; 0x40
 800c610:	d007      	beq.n	800c622 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c620:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c62a:	d178      	bne.n	800c71e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d002      	beq.n	800c63a <HAL_SPI_TransmitReceive+0x10a>
 800c634:	8b7b      	ldrh	r3, [r7, #26]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d166      	bne.n	800c708 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c63e:	881a      	ldrh	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64a:	1c9a      	adds	r2, r3, #2
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c654:	b29b      	uxth	r3, r3
 800c656:	3b01      	subs	r3, #1
 800c658:	b29a      	uxth	r2, r3
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c65e:	e053      	b.n	800c708 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	f003 0302 	and.w	r3, r3, #2
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d11b      	bne.n	800c6a6 <HAL_SPI_TransmitReceive+0x176>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c672:	b29b      	uxth	r3, r3
 800c674:	2b00      	cmp	r3, #0
 800c676:	d016      	beq.n	800c6a6 <HAL_SPI_TransmitReceive+0x176>
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d113      	bne.n	800c6a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c682:	881a      	ldrh	r2, [r3, #0]
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68e:	1c9a      	adds	r2, r3, #2
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c698:	b29b      	uxth	r3, r3
 800c69a:	3b01      	subs	r3, #1
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	f003 0301 	and.w	r3, r3, #1
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d119      	bne.n	800c6e8 <HAL_SPI_TransmitReceive+0x1b8>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d014      	beq.n	800c6e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68da      	ldr	r2, [r3, #12]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c8:	b292      	uxth	r2, r2
 800c6ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d0:	1c9a      	adds	r2, r3, #2
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c6e8:	f7fa ff66 	bl	80075b8 <HAL_GetTick>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d807      	bhi.n	800c708 <HAL_SPI_TransmitReceive+0x1d8>
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fe:	d003      	beq.n	800c708 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c700:	2303      	movs	r3, #3
 800c702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c706:	e0a7      	b.n	800c858 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1a6      	bne.n	800c660 <HAL_SPI_TransmitReceive+0x130>
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c716:	b29b      	uxth	r3, r3
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1a1      	bne.n	800c660 <HAL_SPI_TransmitReceive+0x130>
 800c71c:	e07c      	b.n	800c818 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d002      	beq.n	800c72c <HAL_SPI_TransmitReceive+0x1fc>
 800c726:	8b7b      	ldrh	r3, [r7, #26]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d16b      	bne.n	800c804 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	330c      	adds	r3, #12
 800c736:	7812      	ldrb	r2, [r2, #0]
 800c738:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c73e:	1c5a      	adds	r2, r3, #1
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c748:	b29b      	uxth	r3, r3
 800c74a:	3b01      	subs	r3, #1
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c752:	e057      	b.n	800c804 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	f003 0302 	and.w	r3, r3, #2
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d11c      	bne.n	800c79c <HAL_SPI_TransmitReceive+0x26c>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c766:	b29b      	uxth	r3, r3
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d017      	beq.n	800c79c <HAL_SPI_TransmitReceive+0x26c>
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d114      	bne.n	800c79c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	330c      	adds	r3, #12
 800c77c:	7812      	ldrb	r2, [r2, #0]
 800c77e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c78e:	b29b      	uxth	r3, r3
 800c790:	3b01      	subs	r3, #1
 800c792:	b29a      	uxth	r2, r3
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c798:	2300      	movs	r3, #0
 800c79a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	f003 0301 	and.w	r3, r3, #1
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d119      	bne.n	800c7de <HAL_SPI_TransmitReceive+0x2ae>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d014      	beq.n	800c7de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	68da      	ldr	r2, [r3, #12]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7be:	b2d2      	uxtb	r2, r2
 800c7c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c6:	1c5a      	adds	r2, r3, #1
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c7de:	f7fa feeb 	bl	80075b8 <HAL_GetTick>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d803      	bhi.n	800c7f6 <HAL_SPI_TransmitReceive+0x2c6>
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f4:	d102      	bne.n	800c7fc <HAL_SPI_TransmitReceive+0x2cc>
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d103      	bne.n	800c804 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c802:	e029      	b.n	800c858 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c808:	b29b      	uxth	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1a2      	bne.n	800c754 <HAL_SPI_TransmitReceive+0x224>
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c812:	b29b      	uxth	r3, r3
 800c814:	2b00      	cmp	r3, #0
 800c816:	d19d      	bne.n	800c754 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c81a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f000 faf1 	bl	800ce04 <SPI_EndRxTxTransaction>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d006      	beq.n	800c836 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c828:	2301      	movs	r3, #1
 800c82a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2220      	movs	r2, #32
 800c832:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c834:	e010      	b.n	800c858 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	689b      	ldr	r3, [r3, #8]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10b      	bne.n	800c856 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c83e:	2300      	movs	r3, #0
 800c840:	617b      	str	r3, [r7, #20]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	617b      	str	r3, [r7, #20]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	617b      	str	r3, [r7, #20]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	e000      	b.n	800c858 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c856:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2200      	movs	r2, #0
 800c864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3730      	adds	r7, #48	; 0x30
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d101      	bne.n	800c894 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c890:	2302      	movs	r3, #2
 800c892:	e0e3      	b.n	800ca5c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2201      	movs	r2, #1
 800c898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c8a2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c8aa:	7dbb      	ldrb	r3, [r7, #22]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d00d      	beq.n	800c8cc <HAL_SPI_TransmitReceive_DMA+0x58>
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8b6:	d106      	bne.n	800c8c6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d102      	bne.n	800c8c6 <HAL_SPI_TransmitReceive_DMA+0x52>
 800c8c0:	7dbb      	ldrb	r3, [r7, #22]
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	d002      	beq.n	800c8cc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c8ca:	e0c2      	b.n	800ca52 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d005      	beq.n	800c8de <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d002      	beq.n	800c8de <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c8d8:	887b      	ldrh	r3, [r7, #2]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d102      	bne.n	800c8e4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c8e2:	e0b6      	b.n	800ca52 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b04      	cmp	r3, #4
 800c8ee:	d003      	beq.n	800c8f8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2205      	movs	r2, #5
 800c8f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	887a      	ldrh	r2, [r7, #2]
 800c908:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	887a      	ldrh	r2, [r7, #2]
 800c90e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	887a      	ldrh	r2, [r7, #2]
 800c91a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	887a      	ldrh	r2, [r7, #2]
 800c920:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2200      	movs	r2, #0
 800c92c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c934:	b2db      	uxtb	r3, r3
 800c936:	2b04      	cmp	r3, #4
 800c938:	d108      	bne.n	800c94c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c93e:	4a49      	ldr	r2, [pc, #292]	; (800ca64 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800c940:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c946:	4a48      	ldr	r2, [pc, #288]	; (800ca68 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800c948:	63da      	str	r2, [r3, #60]	; 0x3c
 800c94a:	e007      	b.n	800c95c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c950:	4a46      	ldr	r2, [pc, #280]	; (800ca6c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800c952:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c958:	4a45      	ldr	r2, [pc, #276]	; (800ca70 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800c95a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c960:	4a44      	ldr	r2, [pc, #272]	; (800ca74 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800c962:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c968:	2200      	movs	r2, #0
 800c96a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	330c      	adds	r3, #12
 800c976:	4619      	mov	r1, r3
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c982:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c984:	f7fb fbfa 	bl	800817c <HAL_DMA_Start_IT>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00c      	beq.n	800c9a8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c992:	f043 0210 	orr.w	r2, r3, #16
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800c9a6:	e054      	b.n	800ca52 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	685a      	ldr	r2, [r3, #4]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f042 0201 	orr.w	r2, r2, #1
 800c9b6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9bc:	2200      	movs	r2, #0
 800c9be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	330c      	adds	r3, #12
 800c9e8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c9f0:	f7fb fbc4 	bl	800817c <HAL_DMA_Start_IT>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00c      	beq.n	800ca14 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9fe:	f043 0210 	orr.w	r2, r3, #16
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ca12:	e01e      	b.n	800ca52 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca1e:	2b40      	cmp	r3, #64	; 0x40
 800ca20:	d007      	beq.n	800ca32 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca30:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	685a      	ldr	r2, [r3, #4]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f042 0220 	orr.w	r2, r2, #32
 800ca40:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f042 0202 	orr.w	r2, r2, #2
 800ca50:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ca5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3718      	adds	r7, #24
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	0800cbed 	.word	0x0800cbed
 800ca68:	0800cab5 	.word	0x0800cab5
 800ca6c:	0800cc09 	.word	0x0800cc09
 800ca70:	0800cb5d 	.word	0x0800cb5d
 800ca74:	0800cc25 	.word	0x0800cc25

0800ca78 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ca94:	bf00      	nop
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cac2:	f7fa fd79 	bl	80075b8 <HAL_GetTick>
 800cac6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cad6:	d03b      	beq.n	800cb50 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	685a      	ldr	r2, [r3, #4]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f022 0220 	bic.w	r2, r2, #32
 800cae6:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d10d      	bne.n	800cb0c <SPI_DMAReceiveCplt+0x58>
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800caf8:	d108      	bne.n	800cb0c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	685a      	ldr	r2, [r3, #4]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f022 0203 	bic.w	r2, r2, #3
 800cb08:	605a      	str	r2, [r3, #4]
 800cb0a:	e007      	b.n	800cb1c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	685a      	ldr	r2, [r3, #4]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f022 0201 	bic.w	r2, r2, #1
 800cb1a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	2164      	movs	r1, #100	; 0x64
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f000 f909 	bl	800cd38 <SPI_EndRxTransaction>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2220      	movs	r2, #32
 800cb30:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d003      	beq.n	800cb50 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f7ff ffa9 	bl	800caa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cb4e:	e002      	b.n	800cb56 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f7ff ff91 	bl	800ca78 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb68:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb6a:	f7fa fd25 	bl	80075b8 <HAL_GetTick>
 800cb6e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb7e:	d02f      	beq.n	800cbe0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	685a      	ldr	r2, [r3, #4]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f022 0220 	bic.w	r2, r2, #32
 800cb8e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	2164      	movs	r1, #100	; 0x64
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f000 f935 	bl	800ce04 <SPI_EndRxTxTransaction>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d005      	beq.n	800cbac <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cba4:	f043 0220 	orr.w	r2, r3, #32
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f022 0203 	bic.w	r2, r2, #3
 800cbba:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d003      	beq.n	800cbe0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f7ff ff61 	bl	800caa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cbde:	e002      	b.n	800cbe6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f7f8 fc75 	bl	80054d0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f7ff ff46 	bl	800ca8c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc00:	bf00      	nop
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc14:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f7f8 fc70 	bl	80054fc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc1c:	bf00      	nop
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc30:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	685a      	ldr	r2, [r3, #4]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f022 0203 	bic.w	r2, r2, #3
 800cc40:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc46:	f043 0210 	orr.w	r2, r3, #16
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2201      	movs	r2, #1
 800cc52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cc56:	68f8      	ldr	r0, [r7, #12]
 800cc58:	f7ff ff22 	bl	800caa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc5c:	bf00      	nop
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	603b      	str	r3, [r7, #0]
 800cc70:	4613      	mov	r3, r2
 800cc72:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cc74:	e04c      	b.n	800cd10 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7c:	d048      	beq.n	800cd10 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800cc7e:	f7fa fc9b 	bl	80075b8 <HAL_GetTick>
 800cc82:	4602      	mov	r2, r0
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	1ad3      	subs	r3, r2, r3
 800cc88:	683a      	ldr	r2, [r7, #0]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d902      	bls.n	800cc94 <SPI_WaitFlagStateUntilTimeout+0x30>
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d13d      	bne.n	800cd10 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	685a      	ldr	r2, [r3, #4]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cca2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccac:	d111      	bne.n	800ccd2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccb6:	d004      	beq.n	800ccc2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccc0:	d107      	bne.n	800ccd2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccda:	d10f      	bne.n	800ccfc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ccea:	601a      	str	r2, [r3, #0]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ccfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e00f      	b.n	800cd30 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	689a      	ldr	r2, [r3, #8]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	4013      	ands	r3, r2
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	bf0c      	ite	eq
 800cd20:	2301      	moveq	r3, #1
 800cd22:	2300      	movne	r3, #0
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	461a      	mov	r2, r3
 800cd28:	79fb      	ldrb	r3, [r7, #7]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d1a3      	bne.n	800cc76 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b086      	sub	sp, #24
 800cd3c:	af02      	add	r7, sp, #8
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd4c:	d111      	bne.n	800cd72 <SPI_EndRxTransaction+0x3a>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd56:	d004      	beq.n	800cd62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd60:	d107      	bne.n	800cd72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd7a:	d12a      	bne.n	800cdd2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd84:	d012      	beq.n	800cdac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	2180      	movs	r1, #128	; 0x80
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f7ff ff67 	bl	800cc64 <SPI_WaitFlagStateUntilTimeout>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d02d      	beq.n	800cdf8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda0:	f043 0220 	orr.w	r2, r3, #32
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e026      	b.n	800cdfa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	9300      	str	r3, [sp, #0]
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f7ff ff54 	bl	800cc64 <SPI_WaitFlagStateUntilTimeout>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d01a      	beq.n	800cdf8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdc6:	f043 0220 	orr.w	r2, r3, #32
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	e013      	b.n	800cdfa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	2101      	movs	r1, #1
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f7ff ff41 	bl	800cc64 <SPI_WaitFlagStateUntilTimeout>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d007      	beq.n	800cdf8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdec:	f043 0220 	orr.w	r2, r3, #32
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e000      	b.n	800cdfa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b088      	sub	sp, #32
 800ce08:	af02      	add	r7, sp, #8
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ce10:	4b1b      	ldr	r3, [pc, #108]	; (800ce80 <SPI_EndRxTxTransaction+0x7c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a1b      	ldr	r2, [pc, #108]	; (800ce84 <SPI_EndRxTxTransaction+0x80>)
 800ce16:	fba2 2303 	umull	r2, r3, r2, r3
 800ce1a:	0d5b      	lsrs	r3, r3, #21
 800ce1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ce20:	fb02 f303 	mul.w	r3, r2, r3
 800ce24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce2e:	d112      	bne.n	800ce56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2200      	movs	r2, #0
 800ce38:	2180      	movs	r1, #128	; 0x80
 800ce3a:	68f8      	ldr	r0, [r7, #12]
 800ce3c:	f7ff ff12 	bl	800cc64 <SPI_WaitFlagStateUntilTimeout>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d016      	beq.n	800ce74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce4a:	f043 0220 	orr.w	r2, r3, #32
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e00f      	b.n	800ce76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00a      	beq.n	800ce72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce6c:	2b80      	cmp	r3, #128	; 0x80
 800ce6e:	d0f2      	beq.n	800ce56 <SPI_EndRxTxTransaction+0x52>
 800ce70:	e000      	b.n	800ce74 <SPI_EndRxTxTransaction+0x70>
        break;
 800ce72:	bf00      	nop
  }

  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3718      	adds	r7, #24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	20001a64 	.word	0x20001a64
 800ce84:	165e9f81 	.word	0x165e9f81

0800ce88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d101      	bne.n	800ce9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce96:	2301      	movs	r3, #1
 800ce98:	e01d      	b.n	800ced6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d106      	bne.n	800ceb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7f9 fe4e 	bl	8006b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2202      	movs	r2, #2
 800ceb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	3304      	adds	r3, #4
 800cec4:	4619      	mov	r1, r3
 800cec6:	4610      	mov	r0, r2
 800cec8:	f000 fb34 	bl	800d534 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2201      	movs	r2, #1
 800ced0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ceec:	2301      	movs	r3, #1
 800ceee:	e01d      	b.n	800cf2c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d106      	bne.n	800cf0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 f815 	bl	800cf34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2202      	movs	r2, #2
 800cf0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	3304      	adds	r3, #4
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	f000 fb09 	bl	800d534 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cf3c:	bf00      	nop
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2201      	movs	r2, #1
 800cf58:	6839      	ldr	r1, [r7, #0]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 fdd4 	bl	800db08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a15      	ldr	r2, [pc, #84]	; (800cfbc <HAL_TIM_PWM_Start+0x74>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d004      	beq.n	800cf74 <HAL_TIM_PWM_Start+0x2c>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a14      	ldr	r2, [pc, #80]	; (800cfc0 <HAL_TIM_PWM_Start+0x78>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d101      	bne.n	800cf78 <HAL_TIM_PWM_Start+0x30>
 800cf74:	2301      	movs	r3, #1
 800cf76:	e000      	b.n	800cf7a <HAL_TIM_PWM_Start+0x32>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d007      	beq.n	800cf8e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	f003 0307 	and.w	r3, r3, #7
 800cf98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2b06      	cmp	r3, #6
 800cf9e:	d007      	beq.n	800cfb0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f042 0201 	orr.w	r2, r2, #1
 800cfae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	40010000 	.word	0x40010000
 800cfc0:	40010400 	.word	0x40010400

0800cfc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	d122      	bne.n	800d020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	f003 0302 	and.w	r3, r3, #2
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d11b      	bne.n	800d020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f06f 0202 	mvn.w	r2, #2
 800cff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2201      	movs	r2, #1
 800cff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	699b      	ldr	r3, [r3, #24]
 800cffe:	f003 0303 	and.w	r3, r3, #3
 800d002:	2b00      	cmp	r3, #0
 800d004:	d003      	beq.n	800d00e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 fa75 	bl	800d4f6 <HAL_TIM_IC_CaptureCallback>
 800d00c:	e005      	b.n	800d01a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fa67 	bl	800d4e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fa78 	bl	800d50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	691b      	ldr	r3, [r3, #16]
 800d026:	f003 0304 	and.w	r3, r3, #4
 800d02a:	2b04      	cmp	r3, #4
 800d02c:	d122      	bne.n	800d074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	f003 0304 	and.w	r3, r3, #4
 800d038:	2b04      	cmp	r3, #4
 800d03a:	d11b      	bne.n	800d074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f06f 0204 	mvn.w	r2, #4
 800d044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2202      	movs	r2, #2
 800d04a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	699b      	ldr	r3, [r3, #24]
 800d052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d056:	2b00      	cmp	r3, #0
 800d058:	d003      	beq.n	800d062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fa4b 	bl	800d4f6 <HAL_TIM_IC_CaptureCallback>
 800d060:	e005      	b.n	800d06e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 fa3d 	bl	800d4e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 fa4e 	bl	800d50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	691b      	ldr	r3, [r3, #16]
 800d07a:	f003 0308 	and.w	r3, r3, #8
 800d07e:	2b08      	cmp	r3, #8
 800d080:	d122      	bne.n	800d0c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	f003 0308 	and.w	r3, r3, #8
 800d08c:	2b08      	cmp	r3, #8
 800d08e:	d11b      	bne.n	800d0c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f06f 0208 	mvn.w	r2, #8
 800d098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2204      	movs	r2, #4
 800d09e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	69db      	ldr	r3, [r3, #28]
 800d0a6:	f003 0303 	and.w	r3, r3, #3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d003      	beq.n	800d0b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fa21 	bl	800d4f6 <HAL_TIM_IC_CaptureCallback>
 800d0b4:	e005      	b.n	800d0c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 fa13 	bl	800d4e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fa24 	bl	800d50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	f003 0310 	and.w	r3, r3, #16
 800d0d2:	2b10      	cmp	r3, #16
 800d0d4:	d122      	bne.n	800d11c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	f003 0310 	and.w	r3, r3, #16
 800d0e0:	2b10      	cmp	r3, #16
 800d0e2:	d11b      	bne.n	800d11c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f06f 0210 	mvn.w	r2, #16
 800d0ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2208      	movs	r2, #8
 800d0f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	69db      	ldr	r3, [r3, #28]
 800d0fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 f9f7 	bl	800d4f6 <HAL_TIM_IC_CaptureCallback>
 800d108:	e005      	b.n	800d116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f9e9 	bl	800d4e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f9fa 	bl	800d50a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	691b      	ldr	r3, [r3, #16]
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	2b01      	cmp	r3, #1
 800d128:	d10e      	bne.n	800d148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	f003 0301 	and.w	r3, r3, #1
 800d134:	2b01      	cmp	r3, #1
 800d136:	d107      	bne.n	800d148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f06f 0201 	mvn.w	r2, #1
 800d140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 f9c3 	bl	800d4ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	691b      	ldr	r3, [r3, #16]
 800d14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d152:	2b80      	cmp	r3, #128	; 0x80
 800d154:	d10e      	bne.n	800d174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d160:	2b80      	cmp	r3, #128	; 0x80
 800d162:	d107      	bne.n	800d174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d16c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 fdc8 	bl	800dd04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d17e:	2b40      	cmp	r3, #64	; 0x40
 800d180:	d10e      	bne.n	800d1a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d18c:	2b40      	cmp	r3, #64	; 0x40
 800d18e:	d107      	bne.n	800d1a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f9bf 	bl	800d51e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	f003 0320 	and.w	r3, r3, #32
 800d1aa:	2b20      	cmp	r3, #32
 800d1ac:	d10e      	bne.n	800d1cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	f003 0320 	and.w	r3, r3, #32
 800d1b8:	2b20      	cmp	r3, #32
 800d1ba:	d107      	bne.n	800d1cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f06f 0220 	mvn.w	r2, #32
 800d1c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 fd92 	bl	800dcf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d1cc:	bf00      	nop
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d101      	bne.n	800d1ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d1ea:	2302      	movs	r3, #2
 800d1ec:	e0b4      	b.n	800d358 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b0c      	cmp	r3, #12
 800d202:	f200 809f 	bhi.w	800d344 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d206:	a201      	add	r2, pc, #4	; (adr r2, 800d20c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20c:	0800d241 	.word	0x0800d241
 800d210:	0800d345 	.word	0x0800d345
 800d214:	0800d345 	.word	0x0800d345
 800d218:	0800d345 	.word	0x0800d345
 800d21c:	0800d281 	.word	0x0800d281
 800d220:	0800d345 	.word	0x0800d345
 800d224:	0800d345 	.word	0x0800d345
 800d228:	0800d345 	.word	0x0800d345
 800d22c:	0800d2c3 	.word	0x0800d2c3
 800d230:	0800d345 	.word	0x0800d345
 800d234:	0800d345 	.word	0x0800d345
 800d238:	0800d345 	.word	0x0800d345
 800d23c:	0800d303 	.word	0x0800d303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68b9      	ldr	r1, [r7, #8]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 fa14 	bl	800d674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	699a      	ldr	r2, [r3, #24]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f042 0208 	orr.w	r2, r2, #8
 800d25a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	699a      	ldr	r2, [r3, #24]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f022 0204 	bic.w	r2, r2, #4
 800d26a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6999      	ldr	r1, [r3, #24]
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	691a      	ldr	r2, [r3, #16]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	430a      	orrs	r2, r1
 800d27c:	619a      	str	r2, [r3, #24]
      break;
 800d27e:	e062      	b.n	800d346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68b9      	ldr	r1, [r7, #8]
 800d286:	4618      	mov	r0, r3
 800d288:	f000 fa64 	bl	800d754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	699a      	ldr	r2, [r3, #24]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d29a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	699a      	ldr	r2, [r3, #24]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	6999      	ldr	r1, [r3, #24]
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	021a      	lsls	r2, r3, #8
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	430a      	orrs	r2, r1
 800d2be:	619a      	str	r2, [r3, #24]
      break;
 800d2c0:	e041      	b.n	800d346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	68b9      	ldr	r1, [r7, #8]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f000 fab9 	bl	800d840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	69da      	ldr	r2, [r3, #28]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f042 0208 	orr.w	r2, r2, #8
 800d2dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	69da      	ldr	r2, [r3, #28]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f022 0204 	bic.w	r2, r2, #4
 800d2ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	69d9      	ldr	r1, [r3, #28]
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	691a      	ldr	r2, [r3, #16]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	430a      	orrs	r2, r1
 800d2fe:	61da      	str	r2, [r3, #28]
      break;
 800d300:	e021      	b.n	800d346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68b9      	ldr	r1, [r7, #8]
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 fb0d 	bl	800d928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	69da      	ldr	r2, [r3, #28]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d31c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	69da      	ldr	r2, [r3, #28]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d32c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	69d9      	ldr	r1, [r3, #28]
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	691b      	ldr	r3, [r3, #16]
 800d338:	021a      	lsls	r2, r3, #8
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	430a      	orrs	r2, r1
 800d340:	61da      	str	r2, [r3, #28]
      break;
 800d342:	e000      	b.n	800d346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d344:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d370:	2b01      	cmp	r3, #1
 800d372:	d101      	bne.n	800d378 <HAL_TIM_ConfigClockSource+0x18>
 800d374:	2302      	movs	r3, #2
 800d376:	e0a6      	b.n	800d4c6 <HAL_TIM_ConfigClockSource+0x166>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2202      	movs	r2, #2
 800d384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d396:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d39e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b40      	cmp	r3, #64	; 0x40
 800d3ae:	d067      	beq.n	800d480 <HAL_TIM_ConfigClockSource+0x120>
 800d3b0:	2b40      	cmp	r3, #64	; 0x40
 800d3b2:	d80b      	bhi.n	800d3cc <HAL_TIM_ConfigClockSource+0x6c>
 800d3b4:	2b10      	cmp	r3, #16
 800d3b6:	d073      	beq.n	800d4a0 <HAL_TIM_ConfigClockSource+0x140>
 800d3b8:	2b10      	cmp	r3, #16
 800d3ba:	d802      	bhi.n	800d3c2 <HAL_TIM_ConfigClockSource+0x62>
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d06f      	beq.n	800d4a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d3c0:	e078      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d3c2:	2b20      	cmp	r3, #32
 800d3c4:	d06c      	beq.n	800d4a0 <HAL_TIM_ConfigClockSource+0x140>
 800d3c6:	2b30      	cmp	r3, #48	; 0x30
 800d3c8:	d06a      	beq.n	800d4a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d3ca:	e073      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d3cc:	2b70      	cmp	r3, #112	; 0x70
 800d3ce:	d00d      	beq.n	800d3ec <HAL_TIM_ConfigClockSource+0x8c>
 800d3d0:	2b70      	cmp	r3, #112	; 0x70
 800d3d2:	d804      	bhi.n	800d3de <HAL_TIM_ConfigClockSource+0x7e>
 800d3d4:	2b50      	cmp	r3, #80	; 0x50
 800d3d6:	d033      	beq.n	800d440 <HAL_TIM_ConfigClockSource+0xe0>
 800d3d8:	2b60      	cmp	r3, #96	; 0x60
 800d3da:	d041      	beq.n	800d460 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d3dc:	e06a      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d3de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3e2:	d066      	beq.n	800d4b2 <HAL_TIM_ConfigClockSource+0x152>
 800d3e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3e8:	d017      	beq.n	800d41a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d3ea:	e063      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6818      	ldr	r0, [r3, #0]
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	6899      	ldr	r1, [r3, #8]
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	685a      	ldr	r2, [r3, #4]
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	f000 fb64 	bl	800dac8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d40e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	609a      	str	r2, [r3, #8]
      break;
 800d418:	e04c      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6818      	ldr	r0, [r3, #0]
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	6899      	ldr	r1, [r3, #8]
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	f000 fb4d 	bl	800dac8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	689a      	ldr	r2, [r3, #8]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d43c:	609a      	str	r2, [r3, #8]
      break;
 800d43e:	e039      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6818      	ldr	r0, [r3, #0]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	6859      	ldr	r1, [r3, #4]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	461a      	mov	r2, r3
 800d44e:	f000 fac1 	bl	800d9d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2150      	movs	r1, #80	; 0x50
 800d458:	4618      	mov	r0, r3
 800d45a:	f000 fb1a 	bl	800da92 <TIM_ITRx_SetConfig>
      break;
 800d45e:	e029      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6818      	ldr	r0, [r3, #0]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	6859      	ldr	r1, [r3, #4]
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	461a      	mov	r2, r3
 800d46e:	f000 fae0 	bl	800da32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2160      	movs	r1, #96	; 0x60
 800d478:	4618      	mov	r0, r3
 800d47a:	f000 fb0a 	bl	800da92 <TIM_ITRx_SetConfig>
      break;
 800d47e:	e019      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6818      	ldr	r0, [r3, #0]
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	6859      	ldr	r1, [r3, #4]
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	461a      	mov	r2, r3
 800d48e:	f000 faa1 	bl	800d9d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2140      	movs	r1, #64	; 0x40
 800d498:	4618      	mov	r0, r3
 800d49a:	f000 fafa 	bl	800da92 <TIM_ITRx_SetConfig>
      break;
 800d49e:	e009      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	f000 faf1 	bl	800da92 <TIM_ITRx_SetConfig>
      break;
 800d4b0:	e000      	b.n	800d4b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d4b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d4c4:	2300      	movs	r3, #0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b083      	sub	sp, #12
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d4d6:	bf00      	nop
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b083      	sub	sp, #12
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d4ea:	bf00      	nop
 800d4ec:	370c      	adds	r7, #12
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d4f6:	b480      	push	{r7}
 800d4f8:	b083      	sub	sp, #12
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d4fe:	bf00      	nop
 800d500:	370c      	adds	r7, #12
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr

0800d50a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d50a:	b480      	push	{r7}
 800d50c:	b083      	sub	sp, #12
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d512:	bf00      	nop
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr

0800d51e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d51e:	b480      	push	{r7}
 800d520:	b083      	sub	sp, #12
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d526:	bf00      	nop
 800d528:	370c      	adds	r7, #12
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
	...

0800d534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4a40      	ldr	r2, [pc, #256]	; (800d648 <TIM_Base_SetConfig+0x114>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d013      	beq.n	800d574 <TIM_Base_SetConfig+0x40>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d552:	d00f      	beq.n	800d574 <TIM_Base_SetConfig+0x40>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	4a3d      	ldr	r2, [pc, #244]	; (800d64c <TIM_Base_SetConfig+0x118>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d00b      	beq.n	800d574 <TIM_Base_SetConfig+0x40>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a3c      	ldr	r2, [pc, #240]	; (800d650 <TIM_Base_SetConfig+0x11c>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d007      	beq.n	800d574 <TIM_Base_SetConfig+0x40>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4a3b      	ldr	r2, [pc, #236]	; (800d654 <TIM_Base_SetConfig+0x120>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d003      	beq.n	800d574 <TIM_Base_SetConfig+0x40>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	4a3a      	ldr	r2, [pc, #232]	; (800d658 <TIM_Base_SetConfig+0x124>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d108      	bne.n	800d586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d57a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	4313      	orrs	r3, r2
 800d584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4a2f      	ldr	r2, [pc, #188]	; (800d648 <TIM_Base_SetConfig+0x114>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d02b      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d594:	d027      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	4a2c      	ldr	r2, [pc, #176]	; (800d64c <TIM_Base_SetConfig+0x118>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d023      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a2b      	ldr	r2, [pc, #172]	; (800d650 <TIM_Base_SetConfig+0x11c>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d01f      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a2a      	ldr	r2, [pc, #168]	; (800d654 <TIM_Base_SetConfig+0x120>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d01b      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a29      	ldr	r2, [pc, #164]	; (800d658 <TIM_Base_SetConfig+0x124>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d017      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a28      	ldr	r2, [pc, #160]	; (800d65c <TIM_Base_SetConfig+0x128>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d013      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a27      	ldr	r2, [pc, #156]	; (800d660 <TIM_Base_SetConfig+0x12c>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d00f      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4a26      	ldr	r2, [pc, #152]	; (800d664 <TIM_Base_SetConfig+0x130>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d00b      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4a25      	ldr	r2, [pc, #148]	; (800d668 <TIM_Base_SetConfig+0x134>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d007      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a24      	ldr	r2, [pc, #144]	; (800d66c <TIM_Base_SetConfig+0x138>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d003      	beq.n	800d5e6 <TIM_Base_SetConfig+0xb2>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a23      	ldr	r2, [pc, #140]	; (800d670 <TIM_Base_SetConfig+0x13c>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d108      	bne.n	800d5f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	695b      	ldr	r3, [r3, #20]
 800d602:	4313      	orrs	r3, r2
 800d604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	68fa      	ldr	r2, [r7, #12]
 800d60a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	689a      	ldr	r2, [r3, #8]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a0a      	ldr	r2, [pc, #40]	; (800d648 <TIM_Base_SetConfig+0x114>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d003      	beq.n	800d62c <TIM_Base_SetConfig+0xf8>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a0c      	ldr	r2, [pc, #48]	; (800d658 <TIM_Base_SetConfig+0x124>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d103      	bne.n	800d634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	691a      	ldr	r2, [r3, #16]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2201      	movs	r2, #1
 800d638:	615a      	str	r2, [r3, #20]
}
 800d63a:	bf00      	nop
 800d63c:	3714      	adds	r7, #20
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	40010000 	.word	0x40010000
 800d64c:	40000400 	.word	0x40000400
 800d650:	40000800 	.word	0x40000800
 800d654:	40000c00 	.word	0x40000c00
 800d658:	40010400 	.word	0x40010400
 800d65c:	40014000 	.word	0x40014000
 800d660:	40014400 	.word	0x40014400
 800d664:	40014800 	.word	0x40014800
 800d668:	40001800 	.word	0x40001800
 800d66c:	40001c00 	.word	0x40001c00
 800d670:	40002000 	.word	0x40002000

0800d674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d674:	b480      	push	{r7}
 800d676:	b087      	sub	sp, #28
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	f023 0201 	bic.w	r2, r3, #1
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6a1b      	ldr	r3, [r3, #32]
 800d68e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	699b      	ldr	r3, [r3, #24]
 800d69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f023 0303 	bic.w	r3, r3, #3
 800d6aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	f023 0302 	bic.w	r3, r3, #2
 800d6bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	697a      	ldr	r2, [r7, #20]
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a20      	ldr	r2, [pc, #128]	; (800d74c <TIM_OC1_SetConfig+0xd8>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d003      	beq.n	800d6d8 <TIM_OC1_SetConfig+0x64>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4a1f      	ldr	r2, [pc, #124]	; (800d750 <TIM_OC1_SetConfig+0xdc>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d10c      	bne.n	800d6f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	f023 0308 	bic.w	r3, r3, #8
 800d6de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	f023 0304 	bic.w	r3, r3, #4
 800d6f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4a15      	ldr	r2, [pc, #84]	; (800d74c <TIM_OC1_SetConfig+0xd8>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d003      	beq.n	800d702 <TIM_OC1_SetConfig+0x8e>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a14      	ldr	r2, [pc, #80]	; (800d750 <TIM_OC1_SetConfig+0xdc>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d111      	bne.n	800d726 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	695b      	ldr	r3, [r3, #20]
 800d716:	693a      	ldr	r2, [r7, #16]
 800d718:	4313      	orrs	r3, r2
 800d71a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	699b      	ldr	r3, [r3, #24]
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	4313      	orrs	r3, r2
 800d724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	693a      	ldr	r2, [r7, #16]
 800d72a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	68fa      	ldr	r2, [r7, #12]
 800d730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	685a      	ldr	r2, [r3, #4]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	621a      	str	r2, [r3, #32]
}
 800d740:	bf00      	nop
 800d742:	371c      	adds	r7, #28
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	40010000 	.word	0x40010000
 800d750:	40010400 	.word	0x40010400

0800d754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d754:	b480      	push	{r7}
 800d756:	b087      	sub	sp, #28
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6a1b      	ldr	r3, [r3, #32]
 800d762:	f023 0210 	bic.w	r2, r3, #16
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a1b      	ldr	r3, [r3, #32]
 800d76e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d78a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	021b      	lsls	r3, r3, #8
 800d792:	68fa      	ldr	r2, [r7, #12]
 800d794:	4313      	orrs	r3, r2
 800d796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	f023 0320 	bic.w	r3, r3, #32
 800d79e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	011b      	lsls	r3, r3, #4
 800d7a6:	697a      	ldr	r2, [r7, #20]
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a22      	ldr	r2, [pc, #136]	; (800d838 <TIM_OC2_SetConfig+0xe4>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d003      	beq.n	800d7bc <TIM_OC2_SetConfig+0x68>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a21      	ldr	r2, [pc, #132]	; (800d83c <TIM_OC2_SetConfig+0xe8>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d10d      	bne.n	800d7d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	011b      	lsls	r3, r3, #4
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a17      	ldr	r2, [pc, #92]	; (800d838 <TIM_OC2_SetConfig+0xe4>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d003      	beq.n	800d7e8 <TIM_OC2_SetConfig+0x94>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a16      	ldr	r2, [pc, #88]	; (800d83c <TIM_OC2_SetConfig+0xe8>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d113      	bne.n	800d810 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	695b      	ldr	r3, [r3, #20]
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	693a      	ldr	r2, [r7, #16]
 800d800:	4313      	orrs	r3, r2
 800d802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	693a      	ldr	r2, [r7, #16]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	697a      	ldr	r2, [r7, #20]
 800d828:	621a      	str	r2, [r3, #32]
}
 800d82a:	bf00      	nop
 800d82c:	371c      	adds	r7, #28
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	40010000 	.word	0x40010000
 800d83c:	40010400 	.word	0x40010400

0800d840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d840:	b480      	push	{r7}
 800d842:	b087      	sub	sp, #28
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a1b      	ldr	r3, [r3, #32]
 800d84e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a1b      	ldr	r3, [r3, #32]
 800d85a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d86e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f023 0303 	bic.w	r3, r3, #3
 800d876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	4313      	orrs	r3, r2
 800d880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	021b      	lsls	r3, r3, #8
 800d890:	697a      	ldr	r2, [r7, #20]
 800d892:	4313      	orrs	r3, r2
 800d894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4a21      	ldr	r2, [pc, #132]	; (800d920 <TIM_OC3_SetConfig+0xe0>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d003      	beq.n	800d8a6 <TIM_OC3_SetConfig+0x66>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4a20      	ldr	r2, [pc, #128]	; (800d924 <TIM_OC3_SetConfig+0xe4>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d10d      	bne.n	800d8c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	021b      	lsls	r3, r3, #8
 800d8b4:	697a      	ldr	r2, [r7, #20]
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d8c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4a16      	ldr	r2, [pc, #88]	; (800d920 <TIM_OC3_SetConfig+0xe0>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d003      	beq.n	800d8d2 <TIM_OC3_SetConfig+0x92>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4a15      	ldr	r2, [pc, #84]	; (800d924 <TIM_OC3_SetConfig+0xe4>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d113      	bne.n	800d8fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d8e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	695b      	ldr	r3, [r3, #20]
 800d8e6:	011b      	lsls	r3, r3, #4
 800d8e8:	693a      	ldr	r2, [r7, #16]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	699b      	ldr	r3, [r3, #24]
 800d8f2:	011b      	lsls	r3, r3, #4
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	693a      	ldr	r2, [r7, #16]
 800d8fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	685a      	ldr	r2, [r3, #4]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	697a      	ldr	r2, [r7, #20]
 800d912:	621a      	str	r2, [r3, #32]
}
 800d914:	bf00      	nop
 800d916:	371c      	adds	r7, #28
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr
 800d920:	40010000 	.word	0x40010000
 800d924:	40010400 	.word	0x40010400

0800d928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d928:	b480      	push	{r7}
 800d92a:	b087      	sub	sp, #28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6a1b      	ldr	r3, [r3, #32]
 800d936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a1b      	ldr	r3, [r3, #32]
 800d942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	69db      	ldr	r3, [r3, #28]
 800d94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d95e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	021b      	lsls	r3, r3, #8
 800d966:	68fa      	ldr	r2, [r7, #12]
 800d968:	4313      	orrs	r3, r2
 800d96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	031b      	lsls	r3, r3, #12
 800d97a:	693a      	ldr	r2, [r7, #16]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4a12      	ldr	r2, [pc, #72]	; (800d9cc <TIM_OC4_SetConfig+0xa4>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d003      	beq.n	800d990 <TIM_OC4_SetConfig+0x68>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a11      	ldr	r2, [pc, #68]	; (800d9d0 <TIM_OC4_SetConfig+0xa8>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d109      	bne.n	800d9a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	019b      	lsls	r3, r3, #6
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	685a      	ldr	r2, [r3, #4]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	693a      	ldr	r2, [r7, #16]
 800d9bc:	621a      	str	r2, [r3, #32]
}
 800d9be:	bf00      	nop
 800d9c0:	371c      	adds	r7, #28
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	40010000 	.word	0x40010000
 800d9d0:	40010400 	.word	0x40010400

0800d9d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b087      	sub	sp, #28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6a1b      	ldr	r3, [r3, #32]
 800d9e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	6a1b      	ldr	r3, [r3, #32]
 800d9ea:	f023 0201 	bic.w	r2, r3, #1
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d9fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	011b      	lsls	r3, r3, #4
 800da04:	693a      	ldr	r2, [r7, #16]
 800da06:	4313      	orrs	r3, r2
 800da08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	f023 030a 	bic.w	r3, r3, #10
 800da10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	4313      	orrs	r3, r2
 800da18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	697a      	ldr	r2, [r7, #20]
 800da24:	621a      	str	r2, [r3, #32]
}
 800da26:	bf00      	nop
 800da28:	371c      	adds	r7, #28
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da32:	b480      	push	{r7}
 800da34:	b087      	sub	sp, #28
 800da36:	af00      	add	r7, sp, #0
 800da38:	60f8      	str	r0, [r7, #12]
 800da3a:	60b9      	str	r1, [r7, #8]
 800da3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6a1b      	ldr	r3, [r3, #32]
 800da42:	f023 0210 	bic.w	r2, r3, #16
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6a1b      	ldr	r3, [r3, #32]
 800da54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	031b      	lsls	r3, r3, #12
 800da62:	697a      	ldr	r2, [r7, #20]
 800da64:	4313      	orrs	r3, r2
 800da66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	011b      	lsls	r3, r3, #4
 800da74:	693a      	ldr	r2, [r7, #16]
 800da76:	4313      	orrs	r3, r2
 800da78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	697a      	ldr	r2, [r7, #20]
 800da7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	693a      	ldr	r2, [r7, #16]
 800da84:	621a      	str	r2, [r3, #32]
}
 800da86:	bf00      	nop
 800da88:	371c      	adds	r7, #28
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr

0800da92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800da92:	b480      	push	{r7}
 800da94:	b085      	sub	sp, #20
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
 800da9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	4313      	orrs	r3, r2
 800dab0:	f043 0307 	orr.w	r3, r3, #7
 800dab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	609a      	str	r2, [r3, #8]
}
 800dabc:	bf00      	nop
 800dabe:	3714      	adds	r7, #20
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dac8:	b480      	push	{r7}
 800daca:	b087      	sub	sp, #28
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	607a      	str	r2, [r7, #4]
 800dad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	021a      	lsls	r2, r3, #8
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	431a      	orrs	r2, r3
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	4313      	orrs	r3, r2
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	609a      	str	r2, [r3, #8]
}
 800dafc:	bf00      	nop
 800dafe:	371c      	adds	r7, #28
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800db08:	b480      	push	{r7}
 800db0a:	b087      	sub	sp, #28
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	f003 031f 	and.w	r3, r3, #31
 800db1a:	2201      	movs	r2, #1
 800db1c:	fa02 f303 	lsl.w	r3, r2, r3
 800db20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	6a1a      	ldr	r2, [r3, #32]
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	43db      	mvns	r3, r3
 800db2a:	401a      	ands	r2, r3
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6a1a      	ldr	r2, [r3, #32]
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	f003 031f 	and.w	r3, r3, #31
 800db3a:	6879      	ldr	r1, [r7, #4]
 800db3c:	fa01 f303 	lsl.w	r3, r1, r3
 800db40:	431a      	orrs	r2, r3
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	621a      	str	r2, [r3, #32]
}
 800db46:	bf00      	nop
 800db48:	371c      	adds	r7, #28
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
	...

0800db54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db64:	2b01      	cmp	r3, #1
 800db66:	d101      	bne.n	800db6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db68:	2302      	movs	r3, #2
 800db6a:	e05a      	b.n	800dc22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2202      	movs	r2, #2
 800db78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a21      	ldr	r2, [pc, #132]	; (800dc30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d022      	beq.n	800dbf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbb8:	d01d      	beq.n	800dbf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a1d      	ldr	r2, [pc, #116]	; (800dc34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d018      	beq.n	800dbf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a1b      	ldr	r2, [pc, #108]	; (800dc38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d013      	beq.n	800dbf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a1a      	ldr	r2, [pc, #104]	; (800dc3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d00e      	beq.n	800dbf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a18      	ldr	r2, [pc, #96]	; (800dc40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d009      	beq.n	800dbf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a17      	ldr	r2, [pc, #92]	; (800dc44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d004      	beq.n	800dbf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a15      	ldr	r2, [pc, #84]	; (800dc48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d10c      	bne.n	800dc10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	68ba      	ldr	r2, [r7, #8]
 800dc04:	4313      	orrs	r3, r2
 800dc06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	40010000 	.word	0x40010000
 800dc34:	40000400 	.word	0x40000400
 800dc38:	40000800 	.word	0x40000800
 800dc3c:	40000c00 	.word	0x40000c00
 800dc40:	40010400 	.word	0x40010400
 800dc44:	40014000 	.word	0x40014000
 800dc48:	40001800 	.word	0x40001800

0800dc4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b085      	sub	sp, #20
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dc56:	2300      	movs	r3, #0
 800dc58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d101      	bne.n	800dc68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dc64:	2302      	movs	r3, #2
 800dc66:	e03d      	b.n	800dce4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4313      	orrs	r3, r2
 800dca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	695b      	ldr	r3, [r3, #20]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	69db      	ldr	r3, [r3, #28]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3714      	adds	r7, #20
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dcf8:	bf00      	nop
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d101      	bne.n	800dd2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	e03f      	b.n	800ddaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d106      	bne.n	800dd44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7f8 fffa 	bl	8006d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2224      	movs	r2, #36	; 0x24
 800dd48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68da      	ldr	r2, [r3, #12]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dd5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 fdb5 	bl	800e8cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	691a      	ldr	r2, [r3, #16]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	695a      	ldr	r2, [r3, #20]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68da      	ldr	r2, [r3, #12]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dd90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2220      	movs	r2, #32
 800dd9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2220      	movs	r2, #32
 800dda4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b088      	sub	sp, #32
 800ddb6:	af02      	add	r7, sp, #8
 800ddb8:	60f8      	str	r0, [r7, #12]
 800ddba:	60b9      	str	r1, [r7, #8]
 800ddbc:	603b      	str	r3, [r7, #0]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b20      	cmp	r3, #32
 800ddd0:	f040 8083 	bne.w	800deda <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d002      	beq.n	800dde0 <HAL_UART_Transmit+0x2e>
 800ddda:	88fb      	ldrh	r3, [r7, #6]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d101      	bne.n	800dde4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800dde0:	2301      	movs	r3, #1
 800dde2:	e07b      	b.n	800dedc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d101      	bne.n	800ddf2 <HAL_UART_Transmit+0x40>
 800ddee:	2302      	movs	r3, #2
 800ddf0:	e074      	b.n	800dedc <HAL_UART_Transmit+0x12a>
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2221      	movs	r2, #33	; 0x21
 800de04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800de08:	f7f9 fbd6 	bl	80075b8 <HAL_GetTick>
 800de0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	88fa      	ldrh	r2, [r7, #6]
 800de12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	88fa      	ldrh	r2, [r7, #6]
 800de18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800de22:	e042      	b.n	800deaa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de28:	b29b      	uxth	r3, r3
 800de2a:	3b01      	subs	r3, #1
 800de2c:	b29a      	uxth	r2, r3
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de3a:	d122      	bne.n	800de82 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	2200      	movs	r2, #0
 800de44:	2180      	movs	r1, #128	; 0x80
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	f000 fbbf 	bl	800e5ca <UART_WaitOnFlagUntilTimeout>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800de52:	2303      	movs	r3, #3
 800de54:	e042      	b.n	800dedc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	881b      	ldrh	r3, [r3, #0]
 800de5e:	461a      	mov	r2, r3
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d103      	bne.n	800de7a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	3302      	adds	r3, #2
 800de76:	60bb      	str	r3, [r7, #8]
 800de78:	e017      	b.n	800deaa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	3301      	adds	r3, #1
 800de7e:	60bb      	str	r3, [r7, #8]
 800de80:	e013      	b.n	800deaa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	2200      	movs	r2, #0
 800de8a:	2180      	movs	r1, #128	; 0x80
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	f000 fb9c 	bl	800e5ca <UART_WaitOnFlagUntilTimeout>
 800de92:	4603      	mov	r3, r0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d001      	beq.n	800de9c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800de98:	2303      	movs	r3, #3
 800de9a:	e01f      	b.n	800dedc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	1c5a      	adds	r2, r3, #1
 800dea0:	60ba      	str	r2, [r7, #8]
 800dea2:	781a      	ldrb	r2, [r3, #0]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800deae:	b29b      	uxth	r3, r3
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1b7      	bne.n	800de24 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	2200      	movs	r2, #0
 800debc:	2140      	movs	r1, #64	; 0x40
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f000 fb83 	bl	800e5ca <UART_WaitOnFlagUntilTimeout>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800deca:	2303      	movs	r3, #3
 800decc:	e006      	b.n	800dedc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2220      	movs	r2, #32
 800ded2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800ded6:	2300      	movs	r3, #0
 800ded8:	e000      	b.n	800dedc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800deda:	2302      	movs	r3, #2
  }
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b088      	sub	sp, #32
 800dee8:	af02      	add	r7, sp, #8
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	603b      	str	r3, [r7, #0]
 800def0:	4613      	mov	r3, r2
 800def2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800def4:	2300      	movs	r3, #0
 800def6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b20      	cmp	r3, #32
 800df02:	f040 8090 	bne.w	800e026 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d002      	beq.n	800df12 <HAL_UART_Receive+0x2e>
 800df0c:	88fb      	ldrh	r3, [r7, #6]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d101      	bne.n	800df16 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800df12:	2301      	movs	r3, #1
 800df14:	e088      	b.n	800e028 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d101      	bne.n	800df24 <HAL_UART_Receive+0x40>
 800df20:	2302      	movs	r3, #2
 800df22:	e081      	b.n	800e028 <HAL_UART_Receive+0x144>
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2200      	movs	r2, #0
 800df30:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2222      	movs	r2, #34	; 0x22
 800df36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800df3a:	f7f9 fb3d 	bl	80075b8 <HAL_GetTick>
 800df3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	88fa      	ldrh	r2, [r7, #6]
 800df44:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	88fa      	ldrh	r2, [r7, #6]
 800df4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2200      	movs	r2, #0
 800df50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800df54:	e05c      	b.n	800e010 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	3b01      	subs	r3, #1
 800df5e:	b29a      	uxth	r2, r3
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	689b      	ldr	r3, [r3, #8]
 800df68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df6c:	d12b      	bne.n	800dfc6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	2200      	movs	r2, #0
 800df76:	2120      	movs	r1, #32
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f000 fb26 	bl	800e5ca <UART_WaitOnFlagUntilTimeout>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d001      	beq.n	800df88 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800df84:	2303      	movs	r3, #3
 800df86:	e04f      	b.n	800e028 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10c      	bne.n	800dfae <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	3302      	adds	r3, #2
 800dfaa:	60bb      	str	r3, [r7, #8]
 800dfac:	e030      	b.n	800e010 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	60bb      	str	r3, [r7, #8]
 800dfc4:	e024      	b.n	800e010 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	2120      	movs	r1, #32
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f000 fafa 	bl	800e5ca <UART_WaitOnFlagUntilTimeout>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d001      	beq.n	800dfe0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	e023      	b.n	800e028 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d108      	bne.n	800dffa <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	6859      	ldr	r1, [r3, #4]
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	1c5a      	adds	r2, r3, #1
 800dff2:	60ba      	str	r2, [r7, #8]
 800dff4:	b2ca      	uxtb	r2, r1
 800dff6:	701a      	strb	r2, [r3, #0]
 800dff8:	e00a      	b.n	800e010 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	b2da      	uxtb	r2, r3
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	1c59      	adds	r1, r3, #1
 800e006:	60b9      	str	r1, [r7, #8]
 800e008:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e00c:	b2d2      	uxtb	r2, r2
 800e00e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e014:	b29b      	uxth	r3, r3
 800e016:	2b00      	cmp	r3, #0
 800e018:	d19d      	bne.n	800df56 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2220      	movs	r2, #32
 800e01e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800e022:	2300      	movs	r3, #0
 800e024:	e000      	b.n	800e028 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e026:	2302      	movs	r3, #2
  }
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3718      	adds	r7, #24
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	4613      	mov	r3, r2
 800e03c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b20      	cmp	r3, #32
 800e048:	d153      	bne.n	800e0f2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d002      	beq.n	800e056 <HAL_UART_Transmit_DMA+0x26>
 800e050:	88fb      	ldrh	r3, [r7, #6]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d101      	bne.n	800e05a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e04c      	b.n	800e0f4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e060:	2b01      	cmp	r3, #1
 800e062:	d101      	bne.n	800e068 <HAL_UART_Transmit_DMA+0x38>
 800e064:	2302      	movs	r3, #2
 800e066:	e045      	b.n	800e0f4 <HAL_UART_Transmit_DMA+0xc4>
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2201      	movs	r2, #1
 800e06c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e070:	68ba      	ldr	r2, [r7, #8]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	88fa      	ldrh	r2, [r7, #6]
 800e07a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	88fa      	ldrh	r2, [r7, #6]
 800e080:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2221      	movs	r2, #33	; 0x21
 800e08c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e094:	4a19      	ldr	r2, [pc, #100]	; (800e0fc <HAL_UART_Transmit_DMA+0xcc>)
 800e096:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e09c:	4a18      	ldr	r2, [pc, #96]	; (800e100 <HAL_UART_Transmit_DMA+0xd0>)
 800e09e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a4:	4a17      	ldr	r2, [pc, #92]	; (800e104 <HAL_UART_Transmit_DMA+0xd4>)
 800e0a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e0b0:	f107 0308 	add.w	r3, r7, #8
 800e0b4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	6819      	ldr	r1, [r3, #0]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	88fb      	ldrh	r3, [r7, #6]
 800e0c8:	f7fa f858 	bl	800817c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	695a      	ldr	r2, [r3, #20]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e0ec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	e000      	b.n	800e0f4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e0f2:	2302      	movs	r3, #2
  }
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3718      	adds	r7, #24
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	0800e445 	.word	0x0800e445
 800e100:	0800e497 	.word	0x0800e497
 800e104:	0800e537 	.word	0x0800e537

0800e108 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	4613      	mov	r3, r2
 800e114:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	2b20      	cmp	r3, #32
 800e120:	d166      	bne.n	800e1f0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <HAL_UART_Receive_DMA+0x26>
 800e128:	88fb      	ldrh	r3, [r7, #6]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	e05f      	b.n	800e1f2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d101      	bne.n	800e140 <HAL_UART_Receive_DMA+0x38>
 800e13c:	2302      	movs	r3, #2
 800e13e:	e058      	b.n	800e1f2 <HAL_UART_Receive_DMA+0xea>
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2201      	movs	r2, #1
 800e144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	88fa      	ldrh	r2, [r7, #6]
 800e152:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2222      	movs	r2, #34	; 0x22
 800e15e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e166:	4a25      	ldr	r2, [pc, #148]	; (800e1fc <HAL_UART_Receive_DMA+0xf4>)
 800e168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e16e:	4a24      	ldr	r2, [pc, #144]	; (800e200 <HAL_UART_Receive_DMA+0xf8>)
 800e170:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e176:	4a23      	ldr	r2, [pc, #140]	; (800e204 <HAL_UART_Receive_DMA+0xfc>)
 800e178:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e17e:	2200      	movs	r2, #0
 800e180:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800e182:	f107 0308 	add.w	r3, r7, #8
 800e186:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	3304      	adds	r3, #4
 800e192:	4619      	mov	r1, r3
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	88fb      	ldrh	r3, [r7, #6]
 800e19a:	f7f9 ffef 	bl	800817c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800e19e:	2300      	movs	r3, #0
 800e1a0:	613b      	str	r3, [r7, #16]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	613b      	str	r3, [r7, #16]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	613b      	str	r3, [r7, #16]
 800e1b2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68da      	ldr	r2, [r3, #12]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1ca:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	695a      	ldr	r2, [r3, #20]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f042 0201 	orr.w	r2, r2, #1
 800e1da:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	695a      	ldr	r2, [r3, #20]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1ea:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	e000      	b.n	800e1f2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e1f0:	2302      	movs	r3, #2
  }
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3718      	adds	r7, #24
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	0800e4b3 	.word	0x0800e4b3
 800e200:	0800e51b 	.word	0x0800e51b
 800e204:	0800e537 	.word	0x0800e537

0800e208 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b088      	sub	sp, #32
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	695b      	ldr	r3, [r3, #20]
 800e226:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e228:	2300      	movs	r3, #0
 800e22a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e22c:	2300      	movs	r3, #0
 800e22e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	f003 030f 	and.w	r3, r3, #15
 800e236:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d10d      	bne.n	800e25a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	f003 0320 	and.w	r3, r3, #32
 800e244:	2b00      	cmp	r3, #0
 800e246:	d008      	beq.n	800e25a <HAL_UART_IRQHandler+0x52>
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	f003 0320 	and.w	r3, r3, #32
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 fab9 	bl	800e7ca <UART_Receive_IT>
      return;
 800e258:	e0d1      	b.n	800e3fe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f000 80b0 	beq.w	800e3c2 <HAL_UART_IRQHandler+0x1ba>
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	f003 0301 	and.w	r3, r3, #1
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d105      	bne.n	800e278 <HAL_UART_IRQHandler+0x70>
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e272:	2b00      	cmp	r3, #0
 800e274:	f000 80a5 	beq.w	800e3c2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	f003 0301 	and.w	r3, r3, #1
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00a      	beq.n	800e298 <HAL_UART_IRQHandler+0x90>
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e290:	f043 0201 	orr.w	r2, r3, #1
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	f003 0304 	and.w	r3, r3, #4
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d00a      	beq.n	800e2b8 <HAL_UART_IRQHandler+0xb0>
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	f003 0301 	and.w	r3, r3, #1
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d005      	beq.n	800e2b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2b0:	f043 0202 	orr.w	r2, r3, #2
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	f003 0302 	and.w	r3, r3, #2
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00a      	beq.n	800e2d8 <HAL_UART_IRQHandler+0xd0>
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f003 0301 	and.w	r3, r3, #1
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d005      	beq.n	800e2d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2d0:	f043 0204 	orr.w	r2, r3, #4
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	f003 0308 	and.w	r3, r3, #8
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00f      	beq.n	800e302 <HAL_UART_IRQHandler+0xfa>
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	f003 0320 	and.w	r3, r3, #32
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d104      	bne.n	800e2f6 <HAL_UART_IRQHandler+0xee>
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	f003 0301 	and.w	r3, r3, #1
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d005      	beq.n	800e302 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2fa:	f043 0208 	orr.w	r2, r3, #8
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e306:	2b00      	cmp	r3, #0
 800e308:	d078      	beq.n	800e3fc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	f003 0320 	and.w	r3, r3, #32
 800e310:	2b00      	cmp	r3, #0
 800e312:	d007      	beq.n	800e324 <HAL_UART_IRQHandler+0x11c>
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	f003 0320 	and.w	r3, r3, #32
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 fa53 	bl	800e7ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	695b      	ldr	r3, [r3, #20]
 800e32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e32e:	2b40      	cmp	r3, #64	; 0x40
 800e330:	bf0c      	ite	eq
 800e332:	2301      	moveq	r3, #1
 800e334:	2300      	movne	r3, #0
 800e336:	b2db      	uxtb	r3, r3
 800e338:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e33e:	f003 0308 	and.w	r3, r3, #8
 800e342:	2b00      	cmp	r3, #0
 800e344:	d102      	bne.n	800e34c <HAL_UART_IRQHandler+0x144>
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d031      	beq.n	800e3b0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 f99c 	bl	800e68a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	695b      	ldr	r3, [r3, #20]
 800e358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e35c:	2b40      	cmp	r3, #64	; 0x40
 800e35e:	d123      	bne.n	800e3a8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	695a      	ldr	r2, [r3, #20]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e36e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e374:	2b00      	cmp	r3, #0
 800e376:	d013      	beq.n	800e3a0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e37c:	4a21      	ldr	r2, [pc, #132]	; (800e404 <HAL_UART_IRQHandler+0x1fc>)
 800e37e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e384:	4618      	mov	r0, r3
 800e386:	f7f9 ff51 	bl	800822c <HAL_DMA_Abort_IT>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d016      	beq.n	800e3be <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e39a:	4610      	mov	r0, r2
 800e39c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e39e:	e00e      	b.n	800e3be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f845 	bl	800e430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3a6:	e00a      	b.n	800e3be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 f841 	bl	800e430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3ae:	e006      	b.n	800e3be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f83d 	bl	800e430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e3bc:	e01e      	b.n	800e3fc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3be:	bf00      	nop
    return;
 800e3c0:	e01c      	b.n	800e3fc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d008      	beq.n	800e3de <HAL_UART_IRQHandler+0x1d6>
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d003      	beq.n	800e3de <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 f989 	bl	800e6ee <UART_Transmit_IT>
    return;
 800e3dc:	e00f      	b.n	800e3fe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00a      	beq.n	800e3fe <HAL_UART_IRQHandler+0x1f6>
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d005      	beq.n	800e3fe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 f9d1 	bl	800e79a <UART_EndTransmit_IT>
    return;
 800e3f8:	bf00      	nop
 800e3fa:	e000      	b.n	800e3fe <HAL_UART_IRQHandler+0x1f6>
    return;
 800e3fc:	bf00      	nop
  }
}
 800e3fe:	3720      	adds	r7, #32
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	0800e6c7 	.word	0x0800e6c7

0800e408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e410:	bf00      	nop
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e424:	bf00      	nop
 800e426:	370c      	adds	r7, #12
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e438:	bf00      	nop
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e450:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d113      	bne.n	800e488 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2200      	movs	r2, #0
 800e464:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	695a      	ldr	r2, [r3, #20]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e474:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68da      	ldr	r2, [r3, #12]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e484:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e486:	e002      	b.n	800e48e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7ff ffbd 	bl	800e408 <HAL_UART_TxCpltCallback>
}
 800e48e:	bf00      	nop
 800e490:	3710      	adds	r7, #16
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e496:	b580      	push	{r7, lr}
 800e498:	b084      	sub	sp, #16
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f7ff ffb9 	bl	800e41c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4aa:	bf00      	nop
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b084      	sub	sp, #16
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4be:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d11e      	bne.n	800e50c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68da      	ldr	r2, [r3, #12]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e4e2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	695a      	ldr	r2, [r3, #20]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f022 0201 	bic.w	r2, r2, #1
 800e4f2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	695a      	ldr	r2, [r3, #20]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e502:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2220      	movs	r2, #32
 800e508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7f8 f999 	bl	8006844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e512:	bf00      	nop
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b084      	sub	sp, #16
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e526:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f7f8 f996 	bl	800685a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e52e:	bf00      	nop
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b084      	sub	sp, #16
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e53e:	2300      	movs	r3, #0
 800e540:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e546:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	695b      	ldr	r3, [r3, #20]
 800e54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e552:	2b80      	cmp	r3, #128	; 0x80
 800e554:	bf0c      	ite	eq
 800e556:	2301      	moveq	r3, #1
 800e558:	2300      	movne	r3, #0
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e564:	b2db      	uxtb	r3, r3
 800e566:	2b21      	cmp	r3, #33	; 0x21
 800e568:	d108      	bne.n	800e57c <UART_DMAError+0x46>
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d005      	beq.n	800e57c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	2200      	movs	r2, #0
 800e574:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e576:	68b8      	ldr	r0, [r7, #8]
 800e578:	f000 f871 	bl	800e65e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	695b      	ldr	r3, [r3, #20]
 800e582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e586:	2b40      	cmp	r3, #64	; 0x40
 800e588:	bf0c      	ite	eq
 800e58a:	2301      	moveq	r3, #1
 800e58c:	2300      	movne	r3, #0
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	2b22      	cmp	r3, #34	; 0x22
 800e59c:	d108      	bne.n	800e5b0 <UART_DMAError+0x7a>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d005      	beq.n	800e5b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e5aa:	68b8      	ldr	r0, [r7, #8]
 800e5ac:	f000 f86d 	bl	800e68a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5b4:	f043 0210 	orr.w	r2, r3, #16
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e5bc:	68b8      	ldr	r0, [r7, #8]
 800e5be:	f7ff ff37 	bl	800e430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b084      	sub	sp, #16
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	60f8      	str	r0, [r7, #12]
 800e5d2:	60b9      	str	r1, [r7, #8]
 800e5d4:	603b      	str	r3, [r7, #0]
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5da:	e02c      	b.n	800e636 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e2:	d028      	beq.n	800e636 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d007      	beq.n	800e5fa <UART_WaitOnFlagUntilTimeout+0x30>
 800e5ea:	f7f8 ffe5 	bl	80075b8 <HAL_GetTick>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	69ba      	ldr	r2, [r7, #24]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d21d      	bcs.n	800e636 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68da      	ldr	r2, [r3, #12]
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e608:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	695a      	ldr	r2, [r3, #20]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f022 0201 	bic.w	r2, r2, #1
 800e618:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2220      	movs	r2, #32
 800e61e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2220      	movs	r2, #32
 800e626:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2200      	movs	r2, #0
 800e62e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800e632:	2303      	movs	r3, #3
 800e634:	e00f      	b.n	800e656 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	4013      	ands	r3, r2
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	429a      	cmp	r2, r3
 800e644:	bf0c      	ite	eq
 800e646:	2301      	moveq	r3, #1
 800e648:	2300      	movne	r3, #0
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	461a      	mov	r2, r3
 800e64e:	79fb      	ldrb	r3, [r7, #7]
 800e650:	429a      	cmp	r2, r3
 800e652:	d0c3      	beq.n	800e5dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e654:	2300      	movs	r3, #0
}
 800e656:	4618      	mov	r0, r3
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e65e:	b480      	push	{r7}
 800e660:	b083      	sub	sp, #12
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	68da      	ldr	r2, [r3, #12]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e674:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2220      	movs	r2, #32
 800e67a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e67e:	bf00      	nop
 800e680:	370c      	adds	r7, #12
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr

0800e68a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e68a:	b480      	push	{r7}
 800e68c:	b083      	sub	sp, #12
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	68da      	ldr	r2, [r3, #12]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e6a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	695a      	ldr	r2, [r3, #20]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f022 0201 	bic.w	r2, r2, #1
 800e6b0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2220      	movs	r2, #32
 800e6b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e6ba:	bf00      	nop
 800e6bc:	370c      	adds	r7, #12
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr

0800e6c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b084      	sub	sp, #16
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f7ff fea5 	bl	800e430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6e6:	bf00      	nop
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e6ee:	b480      	push	{r7}
 800e6f0:	b085      	sub	sp, #20
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2b21      	cmp	r3, #33	; 0x21
 800e700:	d144      	bne.n	800e78c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e70a:	d11a      	bne.n	800e742 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6a1b      	ldr	r3, [r3, #32]
 800e710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	881b      	ldrh	r3, [r3, #0]
 800e716:	461a      	mov	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e720:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	691b      	ldr	r3, [r3, #16]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d105      	bne.n	800e736 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	1c9a      	adds	r2, r3, #2
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	621a      	str	r2, [r3, #32]
 800e734:	e00e      	b.n	800e754 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6a1b      	ldr	r3, [r3, #32]
 800e73a:	1c5a      	adds	r2, r3, #1
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	621a      	str	r2, [r3, #32]
 800e740:	e008      	b.n	800e754 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a1b      	ldr	r3, [r3, #32]
 800e746:	1c59      	adds	r1, r3, #1
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	6211      	str	r1, [r2, #32]
 800e74c:	781a      	ldrb	r2, [r3, #0]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e758:	b29b      	uxth	r3, r3
 800e75a:	3b01      	subs	r3, #1
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	4619      	mov	r1, r3
 800e762:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e764:	2b00      	cmp	r3, #0
 800e766:	d10f      	bne.n	800e788 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	68da      	ldr	r2, [r3, #12]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e776:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	68da      	ldr	r2, [r3, #12]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e786:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e788:	2300      	movs	r3, #0
 800e78a:	e000      	b.n	800e78e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e78c:	2302      	movs	r3, #2
  }
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3714      	adds	r7, #20
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr

0800e79a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e79a:	b580      	push	{r7, lr}
 800e79c:	b082      	sub	sp, #8
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	68da      	ldr	r2, [r3, #12]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2220      	movs	r2, #32
 800e7b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f7ff fe24 	bl	800e408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b22      	cmp	r3, #34	; 0x22
 800e7dc:	d171      	bne.n	800e8c2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	689b      	ldr	r3, [r3, #8]
 800e7e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7e6:	d123      	bne.n	800e830 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ec:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	691b      	ldr	r3, [r3, #16]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10e      	bne.n	800e814 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e802:	b29a      	uxth	r2, r3
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80c:	1c9a      	adds	r2, r3, #2
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	629a      	str	r2, [r3, #40]	; 0x28
 800e812:	e029      	b.n	800e868 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	b2db      	uxtb	r3, r3
 800e81e:	b29a      	uxth	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e828:	1c5a      	adds	r2, r3, #1
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	629a      	str	r2, [r3, #40]	; 0x28
 800e82e:	e01b      	b.n	800e868 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	691b      	ldr	r3, [r3, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d10a      	bne.n	800e84e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	6858      	ldr	r0, [r3, #4]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e842:	1c59      	adds	r1, r3, #1
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	6291      	str	r1, [r2, #40]	; 0x28
 800e848:	b2c2      	uxtb	r2, r0
 800e84a:	701a      	strb	r2, [r3, #0]
 800e84c:	e00c      	b.n	800e868 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	b2da      	uxtb	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e85a:	1c58      	adds	r0, r3, #1
 800e85c:	6879      	ldr	r1, [r7, #4]
 800e85e:	6288      	str	r0, [r1, #40]	; 0x28
 800e860:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e864:	b2d2      	uxtb	r2, r2
 800e866:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	3b01      	subs	r3, #1
 800e870:	b29b      	uxth	r3, r3
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	4619      	mov	r1, r3
 800e876:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d120      	bne.n	800e8be <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68da      	ldr	r2, [r3, #12]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f022 0220 	bic.w	r2, r2, #32
 800e88a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	68da      	ldr	r2, [r3, #12]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e89a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	695a      	ldr	r2, [r3, #20]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f022 0201 	bic.w	r2, r2, #1
 800e8aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2220      	movs	r2, #32
 800e8b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f7f7 ffc5 	bl	8006844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e002      	b.n	800e8c4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	e000      	b.n	800e8c4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e8c2:	2302      	movs	r3, #2
  }
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d0:	b085      	sub	sp, #20
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	691b      	ldr	r3, [r3, #16]
 800e8dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	68da      	ldr	r2, [r3, #12]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	430a      	orrs	r2, r1
 800e8ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	689a      	ldr	r2, [r3, #8]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	691b      	ldr	r3, [r3, #16]
 800e8f4:	431a      	orrs	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	695b      	ldr	r3, [r3, #20]
 800e8fa:	431a      	orrs	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	69db      	ldr	r3, [r3, #28]
 800e900:	4313      	orrs	r3, r2
 800e902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e90e:	f023 030c 	bic.w	r3, r3, #12
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	6812      	ldr	r2, [r2, #0]
 800e916:	68f9      	ldr	r1, [r7, #12]
 800e918:	430b      	orrs	r3, r1
 800e91a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	695b      	ldr	r3, [r3, #20]
 800e922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	699a      	ldr	r2, [r3, #24]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	430a      	orrs	r2, r1
 800e930:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	69db      	ldr	r3, [r3, #28]
 800e936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e93a:	f040 818b 	bne.w	800ec54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4ac1      	ldr	r2, [pc, #772]	; (800ec48 <UART_SetConfig+0x37c>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d005      	beq.n	800e954 <UART_SetConfig+0x88>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4abf      	ldr	r2, [pc, #764]	; (800ec4c <UART_SetConfig+0x380>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	f040 80bd 	bne.w	800eace <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e954:	f7fd fc40 	bl	800c1d8 <HAL_RCC_GetPCLK2Freq>
 800e958:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	461d      	mov	r5, r3
 800e95e:	f04f 0600 	mov.w	r6, #0
 800e962:	46a8      	mov	r8, r5
 800e964:	46b1      	mov	r9, r6
 800e966:	eb18 0308 	adds.w	r3, r8, r8
 800e96a:	eb49 0409 	adc.w	r4, r9, r9
 800e96e:	4698      	mov	r8, r3
 800e970:	46a1      	mov	r9, r4
 800e972:	eb18 0805 	adds.w	r8, r8, r5
 800e976:	eb49 0906 	adc.w	r9, r9, r6
 800e97a:	f04f 0100 	mov.w	r1, #0
 800e97e:	f04f 0200 	mov.w	r2, #0
 800e982:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e986:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e98a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e98e:	4688      	mov	r8, r1
 800e990:	4691      	mov	r9, r2
 800e992:	eb18 0005 	adds.w	r0, r8, r5
 800e996:	eb49 0106 	adc.w	r1, r9, r6
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	461d      	mov	r5, r3
 800e9a0:	f04f 0600 	mov.w	r6, #0
 800e9a4:	196b      	adds	r3, r5, r5
 800e9a6:	eb46 0406 	adc.w	r4, r6, r6
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	4623      	mov	r3, r4
 800e9ae:	f7f2 f94b 	bl	8000c48 <__aeabi_uldivmod>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	460c      	mov	r4, r1
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	4ba5      	ldr	r3, [pc, #660]	; (800ec50 <UART_SetConfig+0x384>)
 800e9ba:	fba3 2302 	umull	r2, r3, r3, r2
 800e9be:	095b      	lsrs	r3, r3, #5
 800e9c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	461d      	mov	r5, r3
 800e9c8:	f04f 0600 	mov.w	r6, #0
 800e9cc:	46a9      	mov	r9, r5
 800e9ce:	46b2      	mov	sl, r6
 800e9d0:	eb19 0309 	adds.w	r3, r9, r9
 800e9d4:	eb4a 040a 	adc.w	r4, sl, sl
 800e9d8:	4699      	mov	r9, r3
 800e9da:	46a2      	mov	sl, r4
 800e9dc:	eb19 0905 	adds.w	r9, r9, r5
 800e9e0:	eb4a 0a06 	adc.w	sl, sl, r6
 800e9e4:	f04f 0100 	mov.w	r1, #0
 800e9e8:	f04f 0200 	mov.w	r2, #0
 800e9ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e9f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e9f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e9f8:	4689      	mov	r9, r1
 800e9fa:	4692      	mov	sl, r2
 800e9fc:	eb19 0005 	adds.w	r0, r9, r5
 800ea00:	eb4a 0106 	adc.w	r1, sl, r6
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	461d      	mov	r5, r3
 800ea0a:	f04f 0600 	mov.w	r6, #0
 800ea0e:	196b      	adds	r3, r5, r5
 800ea10:	eb46 0406 	adc.w	r4, r6, r6
 800ea14:	461a      	mov	r2, r3
 800ea16:	4623      	mov	r3, r4
 800ea18:	f7f2 f916 	bl	8000c48 <__aeabi_uldivmod>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	460c      	mov	r4, r1
 800ea20:	461a      	mov	r2, r3
 800ea22:	4b8b      	ldr	r3, [pc, #556]	; (800ec50 <UART_SetConfig+0x384>)
 800ea24:	fba3 1302 	umull	r1, r3, r3, r2
 800ea28:	095b      	lsrs	r3, r3, #5
 800ea2a:	2164      	movs	r1, #100	; 0x64
 800ea2c:	fb01 f303 	mul.w	r3, r1, r3
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	00db      	lsls	r3, r3, #3
 800ea34:	3332      	adds	r3, #50	; 0x32
 800ea36:	4a86      	ldr	r2, [pc, #536]	; (800ec50 <UART_SetConfig+0x384>)
 800ea38:	fba2 2303 	umull	r2, r3, r2, r3
 800ea3c:	095b      	lsrs	r3, r3, #5
 800ea3e:	005b      	lsls	r3, r3, #1
 800ea40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ea44:	4498      	add	r8, r3
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	461d      	mov	r5, r3
 800ea4a:	f04f 0600 	mov.w	r6, #0
 800ea4e:	46a9      	mov	r9, r5
 800ea50:	46b2      	mov	sl, r6
 800ea52:	eb19 0309 	adds.w	r3, r9, r9
 800ea56:	eb4a 040a 	adc.w	r4, sl, sl
 800ea5a:	4699      	mov	r9, r3
 800ea5c:	46a2      	mov	sl, r4
 800ea5e:	eb19 0905 	adds.w	r9, r9, r5
 800ea62:	eb4a 0a06 	adc.w	sl, sl, r6
 800ea66:	f04f 0100 	mov.w	r1, #0
 800ea6a:	f04f 0200 	mov.w	r2, #0
 800ea6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ea76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ea7a:	4689      	mov	r9, r1
 800ea7c:	4692      	mov	sl, r2
 800ea7e:	eb19 0005 	adds.w	r0, r9, r5
 800ea82:	eb4a 0106 	adc.w	r1, sl, r6
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	461d      	mov	r5, r3
 800ea8c:	f04f 0600 	mov.w	r6, #0
 800ea90:	196b      	adds	r3, r5, r5
 800ea92:	eb46 0406 	adc.w	r4, r6, r6
 800ea96:	461a      	mov	r2, r3
 800ea98:	4623      	mov	r3, r4
 800ea9a:	f7f2 f8d5 	bl	8000c48 <__aeabi_uldivmod>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	460c      	mov	r4, r1
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	4b6a      	ldr	r3, [pc, #424]	; (800ec50 <UART_SetConfig+0x384>)
 800eaa6:	fba3 1302 	umull	r1, r3, r3, r2
 800eaaa:	095b      	lsrs	r3, r3, #5
 800eaac:	2164      	movs	r1, #100	; 0x64
 800eaae:	fb01 f303 	mul.w	r3, r1, r3
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	00db      	lsls	r3, r3, #3
 800eab6:	3332      	adds	r3, #50	; 0x32
 800eab8:	4a65      	ldr	r2, [pc, #404]	; (800ec50 <UART_SetConfig+0x384>)
 800eaba:	fba2 2303 	umull	r2, r3, r2, r3
 800eabe:	095b      	lsrs	r3, r3, #5
 800eac0:	f003 0207 	and.w	r2, r3, #7
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4442      	add	r2, r8
 800eaca:	609a      	str	r2, [r3, #8]
 800eacc:	e26f      	b.n	800efae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800eace:	f7fd fb6f 	bl	800c1b0 <HAL_RCC_GetPCLK1Freq>
 800ead2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	461d      	mov	r5, r3
 800ead8:	f04f 0600 	mov.w	r6, #0
 800eadc:	46a8      	mov	r8, r5
 800eade:	46b1      	mov	r9, r6
 800eae0:	eb18 0308 	adds.w	r3, r8, r8
 800eae4:	eb49 0409 	adc.w	r4, r9, r9
 800eae8:	4698      	mov	r8, r3
 800eaea:	46a1      	mov	r9, r4
 800eaec:	eb18 0805 	adds.w	r8, r8, r5
 800eaf0:	eb49 0906 	adc.w	r9, r9, r6
 800eaf4:	f04f 0100 	mov.w	r1, #0
 800eaf8:	f04f 0200 	mov.w	r2, #0
 800eafc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800eb00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eb04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800eb08:	4688      	mov	r8, r1
 800eb0a:	4691      	mov	r9, r2
 800eb0c:	eb18 0005 	adds.w	r0, r8, r5
 800eb10:	eb49 0106 	adc.w	r1, r9, r6
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	461d      	mov	r5, r3
 800eb1a:	f04f 0600 	mov.w	r6, #0
 800eb1e:	196b      	adds	r3, r5, r5
 800eb20:	eb46 0406 	adc.w	r4, r6, r6
 800eb24:	461a      	mov	r2, r3
 800eb26:	4623      	mov	r3, r4
 800eb28:	f7f2 f88e 	bl	8000c48 <__aeabi_uldivmod>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	460c      	mov	r4, r1
 800eb30:	461a      	mov	r2, r3
 800eb32:	4b47      	ldr	r3, [pc, #284]	; (800ec50 <UART_SetConfig+0x384>)
 800eb34:	fba3 2302 	umull	r2, r3, r3, r2
 800eb38:	095b      	lsrs	r3, r3, #5
 800eb3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	461d      	mov	r5, r3
 800eb42:	f04f 0600 	mov.w	r6, #0
 800eb46:	46a9      	mov	r9, r5
 800eb48:	46b2      	mov	sl, r6
 800eb4a:	eb19 0309 	adds.w	r3, r9, r9
 800eb4e:	eb4a 040a 	adc.w	r4, sl, sl
 800eb52:	4699      	mov	r9, r3
 800eb54:	46a2      	mov	sl, r4
 800eb56:	eb19 0905 	adds.w	r9, r9, r5
 800eb5a:	eb4a 0a06 	adc.w	sl, sl, r6
 800eb5e:	f04f 0100 	mov.w	r1, #0
 800eb62:	f04f 0200 	mov.w	r2, #0
 800eb66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eb6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eb6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eb72:	4689      	mov	r9, r1
 800eb74:	4692      	mov	sl, r2
 800eb76:	eb19 0005 	adds.w	r0, r9, r5
 800eb7a:	eb4a 0106 	adc.w	r1, sl, r6
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	461d      	mov	r5, r3
 800eb84:	f04f 0600 	mov.w	r6, #0
 800eb88:	196b      	adds	r3, r5, r5
 800eb8a:	eb46 0406 	adc.w	r4, r6, r6
 800eb8e:	461a      	mov	r2, r3
 800eb90:	4623      	mov	r3, r4
 800eb92:	f7f2 f859 	bl	8000c48 <__aeabi_uldivmod>
 800eb96:	4603      	mov	r3, r0
 800eb98:	460c      	mov	r4, r1
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	4b2c      	ldr	r3, [pc, #176]	; (800ec50 <UART_SetConfig+0x384>)
 800eb9e:	fba3 1302 	umull	r1, r3, r3, r2
 800eba2:	095b      	lsrs	r3, r3, #5
 800eba4:	2164      	movs	r1, #100	; 0x64
 800eba6:	fb01 f303 	mul.w	r3, r1, r3
 800ebaa:	1ad3      	subs	r3, r2, r3
 800ebac:	00db      	lsls	r3, r3, #3
 800ebae:	3332      	adds	r3, #50	; 0x32
 800ebb0:	4a27      	ldr	r2, [pc, #156]	; (800ec50 <UART_SetConfig+0x384>)
 800ebb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebb6:	095b      	lsrs	r3, r3, #5
 800ebb8:	005b      	lsls	r3, r3, #1
 800ebba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ebbe:	4498      	add	r8, r3
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	461d      	mov	r5, r3
 800ebc4:	f04f 0600 	mov.w	r6, #0
 800ebc8:	46a9      	mov	r9, r5
 800ebca:	46b2      	mov	sl, r6
 800ebcc:	eb19 0309 	adds.w	r3, r9, r9
 800ebd0:	eb4a 040a 	adc.w	r4, sl, sl
 800ebd4:	4699      	mov	r9, r3
 800ebd6:	46a2      	mov	sl, r4
 800ebd8:	eb19 0905 	adds.w	r9, r9, r5
 800ebdc:	eb4a 0a06 	adc.w	sl, sl, r6
 800ebe0:	f04f 0100 	mov.w	r1, #0
 800ebe4:	f04f 0200 	mov.w	r2, #0
 800ebe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ebec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ebf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ebf4:	4689      	mov	r9, r1
 800ebf6:	4692      	mov	sl, r2
 800ebf8:	eb19 0005 	adds.w	r0, r9, r5
 800ebfc:	eb4a 0106 	adc.w	r1, sl, r6
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	461d      	mov	r5, r3
 800ec06:	f04f 0600 	mov.w	r6, #0
 800ec0a:	196b      	adds	r3, r5, r5
 800ec0c:	eb46 0406 	adc.w	r4, r6, r6
 800ec10:	461a      	mov	r2, r3
 800ec12:	4623      	mov	r3, r4
 800ec14:	f7f2 f818 	bl	8000c48 <__aeabi_uldivmod>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	4b0c      	ldr	r3, [pc, #48]	; (800ec50 <UART_SetConfig+0x384>)
 800ec20:	fba3 1302 	umull	r1, r3, r3, r2
 800ec24:	095b      	lsrs	r3, r3, #5
 800ec26:	2164      	movs	r1, #100	; 0x64
 800ec28:	fb01 f303 	mul.w	r3, r1, r3
 800ec2c:	1ad3      	subs	r3, r2, r3
 800ec2e:	00db      	lsls	r3, r3, #3
 800ec30:	3332      	adds	r3, #50	; 0x32
 800ec32:	4a07      	ldr	r2, [pc, #28]	; (800ec50 <UART_SetConfig+0x384>)
 800ec34:	fba2 2303 	umull	r2, r3, r2, r3
 800ec38:	095b      	lsrs	r3, r3, #5
 800ec3a:	f003 0207 	and.w	r2, r3, #7
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4442      	add	r2, r8
 800ec44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ec46:	e1b2      	b.n	800efae <UART_SetConfig+0x6e2>
 800ec48:	40011000 	.word	0x40011000
 800ec4c:	40011400 	.word	0x40011400
 800ec50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4ad7      	ldr	r2, [pc, #860]	; (800efb8 <UART_SetConfig+0x6ec>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d005      	beq.n	800ec6a <UART_SetConfig+0x39e>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4ad6      	ldr	r2, [pc, #856]	; (800efbc <UART_SetConfig+0x6f0>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	f040 80d1 	bne.w	800ee0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ec6a:	f7fd fab5 	bl	800c1d8 <HAL_RCC_GetPCLK2Freq>
 800ec6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	469a      	mov	sl, r3
 800ec74:	f04f 0b00 	mov.w	fp, #0
 800ec78:	46d0      	mov	r8, sl
 800ec7a:	46d9      	mov	r9, fp
 800ec7c:	eb18 0308 	adds.w	r3, r8, r8
 800ec80:	eb49 0409 	adc.w	r4, r9, r9
 800ec84:	4698      	mov	r8, r3
 800ec86:	46a1      	mov	r9, r4
 800ec88:	eb18 080a 	adds.w	r8, r8, sl
 800ec8c:	eb49 090b 	adc.w	r9, r9, fp
 800ec90:	f04f 0100 	mov.w	r1, #0
 800ec94:	f04f 0200 	mov.w	r2, #0
 800ec98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ec9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800eca0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800eca4:	4688      	mov	r8, r1
 800eca6:	4691      	mov	r9, r2
 800eca8:	eb1a 0508 	adds.w	r5, sl, r8
 800ecac:	eb4b 0609 	adc.w	r6, fp, r9
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	f04f 0200 	mov.w	r2, #0
 800ecba:	f04f 0300 	mov.w	r3, #0
 800ecbe:	f04f 0400 	mov.w	r4, #0
 800ecc2:	0094      	lsls	r4, r2, #2
 800ecc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ecc8:	008b      	lsls	r3, r1, #2
 800ecca:	461a      	mov	r2, r3
 800eccc:	4623      	mov	r3, r4
 800ecce:	4628      	mov	r0, r5
 800ecd0:	4631      	mov	r1, r6
 800ecd2:	f7f1 ffb9 	bl	8000c48 <__aeabi_uldivmod>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	460c      	mov	r4, r1
 800ecda:	461a      	mov	r2, r3
 800ecdc:	4bb8      	ldr	r3, [pc, #736]	; (800efc0 <UART_SetConfig+0x6f4>)
 800ecde:	fba3 2302 	umull	r2, r3, r3, r2
 800ece2:	095b      	lsrs	r3, r3, #5
 800ece4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	469b      	mov	fp, r3
 800ecec:	f04f 0c00 	mov.w	ip, #0
 800ecf0:	46d9      	mov	r9, fp
 800ecf2:	46e2      	mov	sl, ip
 800ecf4:	eb19 0309 	adds.w	r3, r9, r9
 800ecf8:	eb4a 040a 	adc.w	r4, sl, sl
 800ecfc:	4699      	mov	r9, r3
 800ecfe:	46a2      	mov	sl, r4
 800ed00:	eb19 090b 	adds.w	r9, r9, fp
 800ed04:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ed08:	f04f 0100 	mov.w	r1, #0
 800ed0c:	f04f 0200 	mov.w	r2, #0
 800ed10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ed14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ed18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ed1c:	4689      	mov	r9, r1
 800ed1e:	4692      	mov	sl, r2
 800ed20:	eb1b 0509 	adds.w	r5, fp, r9
 800ed24:	eb4c 060a 	adc.w	r6, ip, sl
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	f04f 0200 	mov.w	r2, #0
 800ed32:	f04f 0300 	mov.w	r3, #0
 800ed36:	f04f 0400 	mov.w	r4, #0
 800ed3a:	0094      	lsls	r4, r2, #2
 800ed3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ed40:	008b      	lsls	r3, r1, #2
 800ed42:	461a      	mov	r2, r3
 800ed44:	4623      	mov	r3, r4
 800ed46:	4628      	mov	r0, r5
 800ed48:	4631      	mov	r1, r6
 800ed4a:	f7f1 ff7d 	bl	8000c48 <__aeabi_uldivmod>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	460c      	mov	r4, r1
 800ed52:	461a      	mov	r2, r3
 800ed54:	4b9a      	ldr	r3, [pc, #616]	; (800efc0 <UART_SetConfig+0x6f4>)
 800ed56:	fba3 1302 	umull	r1, r3, r3, r2
 800ed5a:	095b      	lsrs	r3, r3, #5
 800ed5c:	2164      	movs	r1, #100	; 0x64
 800ed5e:	fb01 f303 	mul.w	r3, r1, r3
 800ed62:	1ad3      	subs	r3, r2, r3
 800ed64:	011b      	lsls	r3, r3, #4
 800ed66:	3332      	adds	r3, #50	; 0x32
 800ed68:	4a95      	ldr	r2, [pc, #596]	; (800efc0 <UART_SetConfig+0x6f4>)
 800ed6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed6e:	095b      	lsrs	r3, r3, #5
 800ed70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed74:	4498      	add	r8, r3
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	469b      	mov	fp, r3
 800ed7a:	f04f 0c00 	mov.w	ip, #0
 800ed7e:	46d9      	mov	r9, fp
 800ed80:	46e2      	mov	sl, ip
 800ed82:	eb19 0309 	adds.w	r3, r9, r9
 800ed86:	eb4a 040a 	adc.w	r4, sl, sl
 800ed8a:	4699      	mov	r9, r3
 800ed8c:	46a2      	mov	sl, r4
 800ed8e:	eb19 090b 	adds.w	r9, r9, fp
 800ed92:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ed96:	f04f 0100 	mov.w	r1, #0
 800ed9a:	f04f 0200 	mov.w	r2, #0
 800ed9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eda2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eda6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800edaa:	4689      	mov	r9, r1
 800edac:	4692      	mov	sl, r2
 800edae:	eb1b 0509 	adds.w	r5, fp, r9
 800edb2:	eb4c 060a 	adc.w	r6, ip, sl
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	4619      	mov	r1, r3
 800edbc:	f04f 0200 	mov.w	r2, #0
 800edc0:	f04f 0300 	mov.w	r3, #0
 800edc4:	f04f 0400 	mov.w	r4, #0
 800edc8:	0094      	lsls	r4, r2, #2
 800edca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800edce:	008b      	lsls	r3, r1, #2
 800edd0:	461a      	mov	r2, r3
 800edd2:	4623      	mov	r3, r4
 800edd4:	4628      	mov	r0, r5
 800edd6:	4631      	mov	r1, r6
 800edd8:	f7f1 ff36 	bl	8000c48 <__aeabi_uldivmod>
 800eddc:	4603      	mov	r3, r0
 800edde:	460c      	mov	r4, r1
 800ede0:	461a      	mov	r2, r3
 800ede2:	4b77      	ldr	r3, [pc, #476]	; (800efc0 <UART_SetConfig+0x6f4>)
 800ede4:	fba3 1302 	umull	r1, r3, r3, r2
 800ede8:	095b      	lsrs	r3, r3, #5
 800edea:	2164      	movs	r1, #100	; 0x64
 800edec:	fb01 f303 	mul.w	r3, r1, r3
 800edf0:	1ad3      	subs	r3, r2, r3
 800edf2:	011b      	lsls	r3, r3, #4
 800edf4:	3332      	adds	r3, #50	; 0x32
 800edf6:	4a72      	ldr	r2, [pc, #456]	; (800efc0 <UART_SetConfig+0x6f4>)
 800edf8:	fba2 2303 	umull	r2, r3, r2, r3
 800edfc:	095b      	lsrs	r3, r3, #5
 800edfe:	f003 020f 	and.w	r2, r3, #15
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4442      	add	r2, r8
 800ee08:	609a      	str	r2, [r3, #8]
 800ee0a:	e0d0      	b.n	800efae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ee0c:	f7fd f9d0 	bl	800c1b0 <HAL_RCC_GetPCLK1Freq>
 800ee10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	469a      	mov	sl, r3
 800ee16:	f04f 0b00 	mov.w	fp, #0
 800ee1a:	46d0      	mov	r8, sl
 800ee1c:	46d9      	mov	r9, fp
 800ee1e:	eb18 0308 	adds.w	r3, r8, r8
 800ee22:	eb49 0409 	adc.w	r4, r9, r9
 800ee26:	4698      	mov	r8, r3
 800ee28:	46a1      	mov	r9, r4
 800ee2a:	eb18 080a 	adds.w	r8, r8, sl
 800ee2e:	eb49 090b 	adc.w	r9, r9, fp
 800ee32:	f04f 0100 	mov.w	r1, #0
 800ee36:	f04f 0200 	mov.w	r2, #0
 800ee3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ee3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ee42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ee46:	4688      	mov	r8, r1
 800ee48:	4691      	mov	r9, r2
 800ee4a:	eb1a 0508 	adds.w	r5, sl, r8
 800ee4e:	eb4b 0609 	adc.w	r6, fp, r9
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	4619      	mov	r1, r3
 800ee58:	f04f 0200 	mov.w	r2, #0
 800ee5c:	f04f 0300 	mov.w	r3, #0
 800ee60:	f04f 0400 	mov.w	r4, #0
 800ee64:	0094      	lsls	r4, r2, #2
 800ee66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ee6a:	008b      	lsls	r3, r1, #2
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	4623      	mov	r3, r4
 800ee70:	4628      	mov	r0, r5
 800ee72:	4631      	mov	r1, r6
 800ee74:	f7f1 fee8 	bl	8000c48 <__aeabi_uldivmod>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	4b50      	ldr	r3, [pc, #320]	; (800efc0 <UART_SetConfig+0x6f4>)
 800ee80:	fba3 2302 	umull	r2, r3, r3, r2
 800ee84:	095b      	lsrs	r3, r3, #5
 800ee86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	469b      	mov	fp, r3
 800ee8e:	f04f 0c00 	mov.w	ip, #0
 800ee92:	46d9      	mov	r9, fp
 800ee94:	46e2      	mov	sl, ip
 800ee96:	eb19 0309 	adds.w	r3, r9, r9
 800ee9a:	eb4a 040a 	adc.w	r4, sl, sl
 800ee9e:	4699      	mov	r9, r3
 800eea0:	46a2      	mov	sl, r4
 800eea2:	eb19 090b 	adds.w	r9, r9, fp
 800eea6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800eeaa:	f04f 0100 	mov.w	r1, #0
 800eeae:	f04f 0200 	mov.w	r2, #0
 800eeb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eeb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eeba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eebe:	4689      	mov	r9, r1
 800eec0:	4692      	mov	sl, r2
 800eec2:	eb1b 0509 	adds.w	r5, fp, r9
 800eec6:	eb4c 060a 	adc.w	r6, ip, sl
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	4619      	mov	r1, r3
 800eed0:	f04f 0200 	mov.w	r2, #0
 800eed4:	f04f 0300 	mov.w	r3, #0
 800eed8:	f04f 0400 	mov.w	r4, #0
 800eedc:	0094      	lsls	r4, r2, #2
 800eede:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eee2:	008b      	lsls	r3, r1, #2
 800eee4:	461a      	mov	r2, r3
 800eee6:	4623      	mov	r3, r4
 800eee8:	4628      	mov	r0, r5
 800eeea:	4631      	mov	r1, r6
 800eeec:	f7f1 feac 	bl	8000c48 <__aeabi_uldivmod>
 800eef0:	4603      	mov	r3, r0
 800eef2:	460c      	mov	r4, r1
 800eef4:	461a      	mov	r2, r3
 800eef6:	4b32      	ldr	r3, [pc, #200]	; (800efc0 <UART_SetConfig+0x6f4>)
 800eef8:	fba3 1302 	umull	r1, r3, r3, r2
 800eefc:	095b      	lsrs	r3, r3, #5
 800eefe:	2164      	movs	r1, #100	; 0x64
 800ef00:	fb01 f303 	mul.w	r3, r1, r3
 800ef04:	1ad3      	subs	r3, r2, r3
 800ef06:	011b      	lsls	r3, r3, #4
 800ef08:	3332      	adds	r3, #50	; 0x32
 800ef0a:	4a2d      	ldr	r2, [pc, #180]	; (800efc0 <UART_SetConfig+0x6f4>)
 800ef0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ef10:	095b      	lsrs	r3, r3, #5
 800ef12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef16:	4498      	add	r8, r3
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	469b      	mov	fp, r3
 800ef1c:	f04f 0c00 	mov.w	ip, #0
 800ef20:	46d9      	mov	r9, fp
 800ef22:	46e2      	mov	sl, ip
 800ef24:	eb19 0309 	adds.w	r3, r9, r9
 800ef28:	eb4a 040a 	adc.w	r4, sl, sl
 800ef2c:	4699      	mov	r9, r3
 800ef2e:	46a2      	mov	sl, r4
 800ef30:	eb19 090b 	adds.w	r9, r9, fp
 800ef34:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ef38:	f04f 0100 	mov.w	r1, #0
 800ef3c:	f04f 0200 	mov.w	r2, #0
 800ef40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ef48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ef4c:	4689      	mov	r9, r1
 800ef4e:	4692      	mov	sl, r2
 800ef50:	eb1b 0509 	adds.w	r5, fp, r9
 800ef54:	eb4c 060a 	adc.w	r6, ip, sl
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	f04f 0200 	mov.w	r2, #0
 800ef62:	f04f 0300 	mov.w	r3, #0
 800ef66:	f04f 0400 	mov.w	r4, #0
 800ef6a:	0094      	lsls	r4, r2, #2
 800ef6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ef70:	008b      	lsls	r3, r1, #2
 800ef72:	461a      	mov	r2, r3
 800ef74:	4623      	mov	r3, r4
 800ef76:	4628      	mov	r0, r5
 800ef78:	4631      	mov	r1, r6
 800ef7a:	f7f1 fe65 	bl	8000c48 <__aeabi_uldivmod>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	460c      	mov	r4, r1
 800ef82:	461a      	mov	r2, r3
 800ef84:	4b0e      	ldr	r3, [pc, #56]	; (800efc0 <UART_SetConfig+0x6f4>)
 800ef86:	fba3 1302 	umull	r1, r3, r3, r2
 800ef8a:	095b      	lsrs	r3, r3, #5
 800ef8c:	2164      	movs	r1, #100	; 0x64
 800ef8e:	fb01 f303 	mul.w	r3, r1, r3
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	011b      	lsls	r3, r3, #4
 800ef96:	3332      	adds	r3, #50	; 0x32
 800ef98:	4a09      	ldr	r2, [pc, #36]	; (800efc0 <UART_SetConfig+0x6f4>)
 800ef9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef9e:	095b      	lsrs	r3, r3, #5
 800efa0:	f003 020f 	and.w	r2, r3, #15
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4442      	add	r2, r8
 800efaa:	609a      	str	r2, [r3, #8]
}
 800efac:	e7ff      	b.n	800efae <UART_SetConfig+0x6e2>
 800efae:	bf00      	nop
 800efb0:	3714      	adds	r7, #20
 800efb2:	46bd      	mov	sp, r7
 800efb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb8:	40011000 	.word	0x40011000
 800efbc:	40011400 	.word	0x40011400
 800efc0:	51eb851f 	.word	0x51eb851f

0800efc4 <FILTER_init>:
 *  Created on: 20 ao�t 2020
 *      Author: Th�o
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 800efc4:	b480      	push	{r7}
 800efc6:	b087      	sub	sp, #28
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	4613      	mov	r3, r2
 800efd0:	71fb      	strb	r3, [r7, #7]
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 800efd2:	2300      	movs	r3, #0
 800efd4:	617b      	str	r3, [r7, #20]
 800efd6:	e00c      	b.n	800eff2 <FILTER_init+0x2e>
		filter->settings[s] = settings[s] ;
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	4413      	add	r3, r2
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	68f9      	ldr	r1, [r7, #12]
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	440b      	add	r3, r1
 800efea:	601a      	str	r2, [r3, #0]
	for(int32_t s = 0; s < 3; s++)
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	3301      	adds	r3, #1
 800eff0:	617b      	str	r3, [r7, #20]
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b02      	cmp	r3, #2
 800eff6:	ddef      	ble.n	800efd8 <FILTER_init+0x14>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	79fa      	ldrb	r2, [r7, #7]
 800effc:	761a      	strb	r2, [r3, #24]
}
 800effe:	bf00      	nop
 800f000:	371c      	adds	r7, #28
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr

0800f00a <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
 800f00a:	b480      	push	{r7}
 800f00c:	b085      	sub	sp, #20
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
 800f012:	ed87 0a00 	vstr	s0, [r7]
	float to_return = 0 ;
 800f016:	f04f 0300 	mov.w	r3, #0
 800f01a:	60fb      	str	r3, [r7, #12]
	switch(filter->order){
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	7e1b      	ldrb	r3, [r3, #24]
 800f020:	2b01      	cmp	r3, #1
 800f022:	d01f      	beq.n	800f064 <FILTER_process+0x5a>
 800f024:	2b02      	cmp	r3, #2
 800f026:	d047      	beq.n	800f0b8 <FILTER_process+0xae>
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d148      	bne.n	800f0be <FILTER_process+0xb4>
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	ed93 7a00 	vldr	s14, [r3]
 800f032:	edd7 7a00 	vldr	s15, [r7]
 800f036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	edd3 6a04 	vldr	s13, [r3, #16]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	edd3 7a01 	vldr	s15, [r3, #4]
 800f046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f04a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[1] = filter->values[0];
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	68da      	ldr	r2, [r3, #12]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	611a      	str	r2, [r3, #16]
			to_return =  filter->values[0];
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	68db      	ldr	r3, [r3, #12]
 800f060:	60fb      	str	r3, [r7, #12]
			break ;
 800f062:	e02f      	b.n	800f0c4 <FILTER_process+0xba>

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	ed93 7a00 	vldr	s14, [r3]
 800f06a:	edd7 7a00 	vldr	s15, [r7]
 800f06e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	edd3 6a04 	vldr	s13, [r3, #16]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	edd3 7a01 	vldr	s15, [r3, #4]
 800f07e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f082:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	edd3 6a05 	vldr	s13, [r3, #20]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[2] = filter->values[1];
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	691a      	ldr	r2, [r3, #16]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	615a      	str	r2, [r3, #20]
			filter->values[1] = filter->values[0];
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	68da      	ldr	r2, [r3, #12]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	611a      	str	r2, [r3, #16]
			to_return = filter->values[0];
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	60fb      	str	r3, [r7, #12]
			break;
 800f0b6:	e005      	b.n	800f0c4 <FILTER_process+0xba>

		case FILTER_NO_FILTERING :
			to_return = new_value ;
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	60fb      	str	r3, [r7, #12]
			break;
 800f0bc:	e002      	b.n	800f0c4 <FILTER_process+0xba>
		default:
			to_return = new_value ;
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	60fb      	str	r3, [r7, #12]
			break;
 800f0c2:	bf00      	nop
	}

	return to_return ;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	ee07 3a90 	vmov	s15, r3
};
 800f0ca:	eeb0 0a67 	vmov.f32	s0, s15
 800f0ce:	3714      	adds	r7, #20
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr

0800f0d8 <check_sum_f>:
static rx_cplt_mode_e rx_cplt_mode ;
static ibus_t * ibus ;	//On ne peut utilsier qu'une radio en ibus à la fois

//Fonction privé qui test si le checsum est bon sur un buffer
uint32_t check_sum_f(uint8_t * buffer);
uint32_t check_sum_f(uint8_t * buffer){
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	72fb      	strb	r3, [r7, #11]
 800f0e8:	e00a      	b.n	800f100 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 800f0ea:	7afb      	ldrb	r3, [r7, #11]
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800f0fa:	7afb      	ldrb	r3, [r7, #11]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	72fb      	strb	r3, [r7, #11]
 800f100:	7afb      	ldrb	r3, [r7, #11]
 800f102:	2b1d      	cmp	r3, #29
 800f104:	d9f1      	bls.n	800f0ea <check_sum_f+0x12>
	return sum ;
 800f106:	68fb      	ldr	r3, [r7, #12]
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3714      	adds	r7, #20
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <IBUS_init>:

void IBUS_init(ibus_t * ibus_, UART_HandleTypeDef * huart, void(*data_rdy_callback)){
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
	ibus = ibus_;
 800f120:	4a0e      	ldr	r2, [pc, #56]	; (800f15c <IBUS_init+0x48>)
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	6013      	str	r3, [r2, #0]
	ibus->huart = huart ;
 800f126:	4b0d      	ldr	r3, [pc, #52]	; (800f15c <IBUS_init+0x48>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	601a      	str	r2, [r3, #0]
	ibus->data_rdy_callback = data_rdy_callback ;
 800f12e:	4b0b      	ldr	r3, [pc, #44]	; (800f15c <IBUS_init+0x48>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	639a      	str	r2, [r3, #56]	; 0x38
	//On lance la lecture
	HAL_UART_Receive_DMA(ibus->huart, ibus->dma_buffer, SIZE_DMA_BUFFER);
 800f136:	4b09      	ldr	r3, [pc, #36]	; (800f15c <IBUS_init+0x48>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	6818      	ldr	r0, [r3, #0]
 800f13c:	4b07      	ldr	r3, [pc, #28]	; (800f15c <IBUS_init+0x48>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	3304      	adds	r3, #4
 800f142:	2214      	movs	r2, #20
 800f144:	4619      	mov	r1, r3
 800f146:	f7fe ffdf 	bl	800e108 <HAL_UART_Receive_DMA>
	ibus->index_write = 1 ;
 800f14a:	4b04      	ldr	r3, [pc, #16]	; (800f15c <IBUS_init+0x48>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	2201      	movs	r2, #1
 800f150:	761a      	strb	r2, [r3, #24]
}
 800f152:	bf00      	nop
 800f154:	3710      	adds	r7, #16
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	20002068 	.word	0x20002068

0800f160 <IBUS_RxCplt>:

void IBUS_RxCplt(UART_HandleTypeDef * huart){
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800f168:	4b08      	ldr	r3, [pc, #32]	; (800f18c <IBUS_RxCplt+0x2c>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	429a      	cmp	r2, r3
 800f172:	d106      	bne.n	800f182 <IBUS_RxCplt+0x22>
		rx_cplt_mode = MODE_CPLT_FULL;
 800f174:	4b06      	ldr	r3, [pc, #24]	; (800f190 <IBUS_RxCplt+0x30>)
 800f176:	2201      	movs	r2, #1
 800f178:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800f17a:	4b04      	ldr	r3, [pc, #16]	; (800f18c <IBUS_RxCplt+0x2c>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f180:	4798      	blx	r3
	}
}
 800f182:	bf00      	nop
 800f184:	3708      	adds	r7, #8
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	20002068 	.word	0x20002068
 800f190:	20002064 	.word	0x20002064

0800f194 <IBUS_RxHalfCplt>:
void IBUS_RxHalfCplt(UART_HandleTypeDef * huart){
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800f19c:	4b08      	ldr	r3, [pc, #32]	; (800f1c0 <IBUS_RxHalfCplt+0x2c>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d106      	bne.n	800f1b6 <IBUS_RxHalfCplt+0x22>
		rx_cplt_mode = MODE_CPLT_HALF ;
 800f1a8:	4b06      	ldr	r3, [pc, #24]	; (800f1c4 <IBUS_RxHalfCplt+0x30>)
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800f1ae:	4b04      	ldr	r3, [pc, #16]	; (800f1c0 <IBUS_RxHalfCplt+0x2c>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b4:	4798      	blx	r3
	}
}
 800f1b6:	bf00      	nop
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	20002068 	.word	0x20002068
 800f1c4:	20002064 	.word	0x20002064

0800f1c8 <IBUS_Channel_Update>:

bool_e IBUS_Channel_Update(void){
 800f1c8:	b5b0      	push	{r4, r5, r7, lr}
 800f1ca:	b088      	sub	sp, #32
 800f1cc:	af00      	add	r7, sp, #0

	bool_e to_return = FALSE ;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	61fb      	str	r3, [r7, #28]

	if(rx_cplt_mode == MODE_CPLT_HALF)
 800f1d2:	4ba0      	ldr	r3, [pc, #640]	; (800f454 <IBUS_Channel_Update+0x28c>)
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f040 80ba 	bne.w	800f350 <IBUS_Channel_Update+0x188>
	{
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800f1dc:	2300      	movs	r3, #0
 800f1de:	76fb      	strb	r3, [r7, #27]
 800f1e0:	e0b1      	b.n	800f346 <IBUS_Channel_Update+0x17e>
			switch(ibus->state){
 800f1e2:	4b9d      	ldr	r3, [pc, #628]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d01b      	beq.n	800f226 <IBUS_Channel_Update+0x5e>
 800f1ee:	2b02      	cmp	r3, #2
 800f1f0:	d041      	beq.n	800f276 <IBUS_Channel_Update+0xae>
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f040 80a4 	bne.w	800f340 <IBUS_Channel_Update+0x178>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800f1f8:	4b97      	ldr	r3, [pc, #604]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	7efb      	ldrb	r3, [r7, #27]
 800f1fe:	4413      	add	r3, r2
 800f200:	791b      	ldrb	r3, [r3, #4]
 800f202:	2b20      	cmp	r3, #32
 800f204:	f040 8097 	bne.w	800f336 <IBUS_Channel_Update+0x16e>
						ibus->state = STATE_IBUS_COMMAND ;
 800f208:	4b93      	ldr	r3, [pc, #588]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2201      	movs	r2, #1
 800f20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800f212:	4b91      	ldr	r3, [pc, #580]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f214:	6819      	ldr	r1, [r3, #0]
 800f216:	7efa      	ldrb	r2, [r7, #27]
 800f218:	4b8f      	ldr	r3, [pc, #572]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	440a      	add	r2, r1
 800f21e:	7912      	ldrb	r2, [r2, #4]
 800f220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800f224:	e087      	b.n	800f336 <IBUS_Channel_Update+0x16e>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800f226:	4b8c      	ldr	r3, [pc, #560]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	7efb      	ldrb	r3, [r7, #27]
 800f22c:	4413      	add	r3, r2
 800f22e:	791b      	ldrb	r3, [r3, #4]
 800f230:	2b40      	cmp	r3, #64	; 0x40
 800f232:	d113      	bne.n	800f25c <IBUS_Channel_Update+0x94>
						ibus->state = STATE_IBUS_CHANNELS ;
 800f234:	4b88      	ldr	r3, [pc, #544]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2202      	movs	r2, #2
 800f23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800f23e:	4b86      	ldr	r3, [pc, #536]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f240:	6819      	ldr	r1, [r3, #0]
 800f242:	7efa      	ldrb	r2, [r7, #27]
 800f244:	4b84      	ldr	r3, [pc, #528]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	440a      	add	r2, r1
 800f24a:	7912      	ldrb	r2, [r2, #4]
 800f24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800f250:	4b81      	ldr	r3, [pc, #516]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2202      	movs	r2, #2
 800f256:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800f25a:	e06e      	b.n	800f33a <IBUS_Channel_Update+0x172>
					else if(ibus->dma_buffer[c] != 0x20)
 800f25c:	4b7e      	ldr	r3, [pc, #504]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	7efb      	ldrb	r3, [r7, #27]
 800f262:	4413      	add	r3, r2
 800f264:	791b      	ldrb	r3, [r3, #4]
 800f266:	2b20      	cmp	r3, #32
 800f268:	d067      	beq.n	800f33a <IBUS_Channel_Update+0x172>
						ibus->state = STATE_IBUS_LENGTH ;
 800f26a:	4b7b      	ldr	r3, [pc, #492]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800f274:	e061      	b.n	800f33a <IBUS_Channel_Update+0x172>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800f276:	4b78      	ldr	r3, [pc, #480]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f278:	681c      	ldr	r4, [r3, #0]
 800f27a:	7ef8      	ldrb	r0, [r7, #27]
 800f27c:	4b76      	ldr	r3, [pc, #472]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f27e:	6819      	ldr	r1, [r3, #0]
 800f280:	4b75      	ldr	r3, [pc, #468]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f288:	1c55      	adds	r5, r2, #1
 800f28a:	b2ad      	uxth	r5, r5
 800f28c:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800f290:	4615      	mov	r5, r2
 800f292:	1823      	adds	r3, r4, r0
 800f294:	791a      	ldrb	r2, [r3, #4]
 800f296:	194b      	adds	r3, r1, r5
 800f298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800f29c:	4b6e      	ldr	r3, [pc, #440]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2a4:	2b20      	cmp	r3, #32
 800f2a6:	d14a      	bne.n	800f33e <IBUS_Channel_Update+0x176>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800f2a8:	4b6b      	ldr	r3, [pc, #428]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	4b69      	ldr	r3, [pc, #420]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f2ba:	021b      	lsls	r3, r3, #8
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	607b      	str	r3, [r7, #4]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800f2c0:	4b65      	ldr	r3, [pc, #404]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	333d      	adds	r3, #61	; 0x3d
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff ff06 	bl	800f0d8 <check_sum_f>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800f2d2:	33ff      	adds	r3, #255	; 0xff
 800f2d4:	687a      	ldr	r2, [r7, #4]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d127      	bne.n	800f32a <IBUS_Channel_Update+0x162>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800f2da:	2300      	movs	r3, #0
 800f2dc:	617b      	str	r3, [r7, #20]
 800f2de:	e01f      	b.n	800f320 <IBUS_Channel_Update+0x158>
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800f2e0:	4b5d      	ldr	r3, [pc, #372]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	3302      	adds	r3, #2
 800f2e8:	4413      	add	r3, r2
 800f2ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2ee:	b21a      	sxth	r2, r3
 800f2f0:	4b59      	ldr	r3, [pc, #356]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f2f2:	6819      	ldr	r1, [r3, #0]
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	3303      	adds	r3, #3
 800f2f8:	440b      	add	r3, r1
 800f2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2fe:	021b      	lsls	r3, r3, #8
 800f300:	b21b      	sxth	r3, r3
 800f302:	4313      	orrs	r3, r2
 800f304:	b219      	sxth	r1, r3
 800f306:	4b54      	ldr	r3, [pc, #336]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	085b      	lsrs	r3, r3, #1
 800f30e:	b289      	uxth	r1, r1
 800f310:	330c      	adds	r3, #12
 800f312:	005b      	lsls	r3, r3, #1
 800f314:	4413      	add	r3, r2
 800f316:	460a      	mov	r2, r1
 800f318:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	3302      	adds	r3, #2
 800f31e:	617b      	str	r3, [r7, #20]
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	2b1b      	cmp	r3, #27
 800f324:	d9dc      	bls.n	800f2e0 <IBUS_Channel_Update+0x118>
							to_return = TRUE;
 800f326:	2301      	movs	r3, #1
 800f328:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800f32a:	4b4b      	ldr	r3, [pc, #300]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2200      	movs	r2, #0
 800f330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800f334:	e003      	b.n	800f33e <IBUS_Channel_Update+0x176>
					break;
 800f336:	bf00      	nop
 800f338:	e002      	b.n	800f340 <IBUS_Channel_Update+0x178>
					break ;
 800f33a:	bf00      	nop
 800f33c:	e000      	b.n	800f340 <IBUS_Channel_Update+0x178>
					break;
 800f33e:	bf00      	nop
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800f340:	7efb      	ldrb	r3, [r7, #27]
 800f342:	3301      	adds	r3, #1
 800f344:	76fb      	strb	r3, [r7, #27]
 800f346:	7efb      	ldrb	r3, [r7, #27]
 800f348:	2b09      	cmp	r3, #9
 800f34a:	f67f af4a 	bls.w	800f1e2 <IBUS_Channel_Update+0x1a>
 800f34e:	e0bc      	b.n	800f4ca <IBUS_Channel_Update+0x302>
			}
		}
	}
	else
	{
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800f350:	230a      	movs	r3, #10
 800f352:	74fb      	strb	r3, [r7, #19]
 800f354:	e0b5      	b.n	800f4c2 <IBUS_Channel_Update+0x2fa>
			switch(ibus->state){
 800f356:	4b40      	ldr	r3, [pc, #256]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d01b      	beq.n	800f39a <IBUS_Channel_Update+0x1d2>
 800f362:	2b02      	cmp	r3, #2
 800f364:	d041      	beq.n	800f3ea <IBUS_Channel_Update+0x222>
 800f366:	2b00      	cmp	r3, #0
 800f368:	f040 80a8 	bne.w	800f4bc <IBUS_Channel_Update+0x2f4>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800f36c:	4b3a      	ldr	r3, [pc, #232]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	7cfb      	ldrb	r3, [r7, #19]
 800f372:	4413      	add	r3, r2
 800f374:	791b      	ldrb	r3, [r3, #4]
 800f376:	2b20      	cmp	r3, #32
 800f378:	f040 809b 	bne.w	800f4b2 <IBUS_Channel_Update+0x2ea>
						ibus->state = STATE_IBUS_COMMAND ;
 800f37c:	4b36      	ldr	r3, [pc, #216]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2201      	movs	r2, #1
 800f382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800f386:	4b34      	ldr	r3, [pc, #208]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f388:	6819      	ldr	r1, [r3, #0]
 800f38a:	7cfa      	ldrb	r2, [r7, #19]
 800f38c:	4b32      	ldr	r3, [pc, #200]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	440a      	add	r2, r1
 800f392:	7912      	ldrb	r2, [r2, #4]
 800f394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800f398:	e08b      	b.n	800f4b2 <IBUS_Channel_Update+0x2ea>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800f39a:	4b2f      	ldr	r3, [pc, #188]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	7cfb      	ldrb	r3, [r7, #19]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	791b      	ldrb	r3, [r3, #4]
 800f3a4:	2b40      	cmp	r3, #64	; 0x40
 800f3a6:	d113      	bne.n	800f3d0 <IBUS_Channel_Update+0x208>
						ibus->state = STATE_IBUS_CHANNELS ;
 800f3a8:	4b2b      	ldr	r3, [pc, #172]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	2202      	movs	r2, #2
 800f3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800f3b2:	4b29      	ldr	r3, [pc, #164]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f3b4:	6819      	ldr	r1, [r3, #0]
 800f3b6:	7cfa      	ldrb	r2, [r7, #19]
 800f3b8:	4b27      	ldr	r3, [pc, #156]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	440a      	add	r2, r1
 800f3be:	7912      	ldrb	r2, [r2, #4]
 800f3c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800f3c4:	4b24      	ldr	r3, [pc, #144]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2202      	movs	r2, #2
 800f3ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800f3ce:	e072      	b.n	800f4b6 <IBUS_Channel_Update+0x2ee>
					else if(ibus->dma_buffer[c] != 0x20)
 800f3d0:	4b21      	ldr	r3, [pc, #132]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	7cfb      	ldrb	r3, [r7, #19]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	791b      	ldrb	r3, [r3, #4]
 800f3da:	2b20      	cmp	r3, #32
 800f3dc:	d06b      	beq.n	800f4b6 <IBUS_Channel_Update+0x2ee>
						ibus->state = STATE_IBUS_LENGTH ;
 800f3de:	4b1e      	ldr	r3, [pc, #120]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800f3e8:	e065      	b.n	800f4b6 <IBUS_Channel_Update+0x2ee>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800f3ea:	4b1b      	ldr	r3, [pc, #108]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f3ec:	681c      	ldr	r4, [r3, #0]
 800f3ee:	7cf8      	ldrb	r0, [r7, #19]
 800f3f0:	4b19      	ldr	r3, [pc, #100]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f3f2:	6819      	ldr	r1, [r3, #0]
 800f3f4:	4b18      	ldr	r3, [pc, #96]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f3fc:	1c55      	adds	r5, r2, #1
 800f3fe:	b2ad      	uxth	r5, r5
 800f400:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800f404:	4615      	mov	r5, r2
 800f406:	1823      	adds	r3, r4, r0
 800f408:	791a      	ldrb	r2, [r3, #4]
 800f40a:	194b      	adds	r3, r1, r5
 800f40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800f410:	4b11      	ldr	r3, [pc, #68]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f418:	2b20      	cmp	r3, #32
 800f41a:	d14e      	bne.n	800f4ba <IBUS_Channel_Update+0x2f2>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800f41c:	4b0e      	ldr	r3, [pc, #56]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800f424:	461a      	mov	r2, r3
 800f426:	4b0c      	ldr	r3, [pc, #48]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f42e:	021b      	lsls	r3, r3, #8
 800f430:	4313      	orrs	r3, r2
 800f432:	60bb      	str	r3, [r7, #8]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800f434:	4b08      	ldr	r3, [pc, #32]	; (800f458 <IBUS_Channel_Update+0x290>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	333d      	adds	r3, #61	; 0x3d
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7ff fe4c 	bl	800f0d8 <check_sum_f>
 800f440:	4603      	mov	r3, r0
 800f442:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800f446:	33ff      	adds	r3, #255	; 0xff
 800f448:	68ba      	ldr	r2, [r7, #8]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d12b      	bne.n	800f4a6 <IBUS_Channel_Update+0x2de>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800f44e:	2300      	movs	r3, #0
 800f450:	60fb      	str	r3, [r7, #12]
 800f452:	e023      	b.n	800f49c <IBUS_Channel_Update+0x2d4>
 800f454:	20002064 	.word	0x20002064
 800f458:	20002068 	.word	0x20002068
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800f45c:	4b1d      	ldr	r3, [pc, #116]	; (800f4d4 <IBUS_Channel_Update+0x30c>)
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	3302      	adds	r3, #2
 800f464:	4413      	add	r3, r2
 800f466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f46a:	b21a      	sxth	r2, r3
 800f46c:	4b19      	ldr	r3, [pc, #100]	; (800f4d4 <IBUS_Channel_Update+0x30c>)
 800f46e:	6819      	ldr	r1, [r3, #0]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	3303      	adds	r3, #3
 800f474:	440b      	add	r3, r1
 800f476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f47a:	021b      	lsls	r3, r3, #8
 800f47c:	b21b      	sxth	r3, r3
 800f47e:	4313      	orrs	r3, r2
 800f480:	b219      	sxth	r1, r3
 800f482:	4b14      	ldr	r3, [pc, #80]	; (800f4d4 <IBUS_Channel_Update+0x30c>)
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	085b      	lsrs	r3, r3, #1
 800f48a:	b289      	uxth	r1, r1
 800f48c:	330c      	adds	r3, #12
 800f48e:	005b      	lsls	r3, r3, #1
 800f490:	4413      	add	r3, r2
 800f492:	460a      	mov	r2, r1
 800f494:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	3302      	adds	r3, #2
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2b1b      	cmp	r3, #27
 800f4a0:	d9dc      	bls.n	800f45c <IBUS_Channel_Update+0x294>
							to_return = TRUE;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800f4a6:	4b0b      	ldr	r3, [pc, #44]	; (800f4d4 <IBUS_Channel_Update+0x30c>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800f4b0:	e003      	b.n	800f4ba <IBUS_Channel_Update+0x2f2>
					break;
 800f4b2:	bf00      	nop
 800f4b4:	e002      	b.n	800f4bc <IBUS_Channel_Update+0x2f4>
					break ;
 800f4b6:	bf00      	nop
 800f4b8:	e000      	b.n	800f4bc <IBUS_Channel_Update+0x2f4>
					break;
 800f4ba:	bf00      	nop
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800f4bc:	7cfb      	ldrb	r3, [r7, #19]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	74fb      	strb	r3, [r7, #19]
 800f4c2:	7cfb      	ldrb	r3, [r7, #19]
 800f4c4:	2b13      	cmp	r3, #19
 800f4c6:	f67f af46 	bls.w	800f356 <IBUS_Channel_Update+0x18e>
		}
	}



	return to_return ;
 800f4ca:	69fb      	ldr	r3, [r7, #28]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3720      	adds	r7, #32
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bdb0      	pop	{r4, r5, r7, pc}
 800f4d4:	20002068 	.word	0x20002068

0800f4d8 <MOTORS_Init>:
 */

#include "../Inc/Motors.h"


void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, uint16_t * duty, bool_e start){
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
 800f4e4:	603b      	str	r3, [r7, #0]
	motors->htim = htim ;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	601a      	str	r2, [r3, #0]
	motors->duty = duty;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	609a      	str	r2, [r3, #8]
	if(start){
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d022      	beq.n	800f53e <MOTORS_Init+0x66>
		motors->state = MOTORS_STATE_RUNNING ;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	711a      	strb	r2, [r3, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 800f4fe:	2100      	movs	r1, #0
 800f500:	68b8      	ldr	r0, [r7, #8]
 800f502:	f7fd fd21 	bl	800cf48 <HAL_TIM_PWM_Start>
 800f506:	4603      	mov	r3, r0
 800f508:	461a      	mov	r2, r3
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 800f50e:	2104      	movs	r1, #4
 800f510:	68b8      	ldr	r0, [r7, #8]
 800f512:	f7fd fd19 	bl	800cf48 <HAL_TIM_PWM_Start>
 800f516:	4603      	mov	r3, r0
 800f518:	461a      	mov	r2, r3
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 800f51e:	2108      	movs	r1, #8
 800f520:	68b8      	ldr	r0, [r7, #8]
 800f522:	f7fd fd11 	bl	800cf48 <HAL_TIM_PWM_Start>
 800f526:	4603      	mov	r3, r0
 800f528:	461a      	mov	r2, r3
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 800f52e:	210c      	movs	r1, #12
 800f530:	68b8      	ldr	r0, [r7, #8]
 800f532:	f7fd fd09 	bl	800cf48 <HAL_TIM_PWM_Start>
 800f536:	4603      	mov	r3, r0
 800f538:	461a      	mov	r2, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	731a      	strb	r2, [r3, #12]
	}
}
 800f53e:	bf00      	nop
 800f540:	3710      	adds	r7, #16
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}

0800f546 <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_2);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_3);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){
 800f546:	b480      	push	{r7}
 800f548:	b083      	sub	sp, #12
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]

	motors->duty[0] = MIN(1000, motors->duty[0]);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	689b      	ldr	r3, [r3, #8]
 800f552:	881a      	ldrh	r2, [r3, #0]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	689b      	ldr	r3, [r3, #8]
 800f558:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800f55c:	bf28      	it	cs
 800f55e:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800f562:	b292      	uxth	r2, r2
 800f564:	801a      	strh	r2, [r3, #0]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	3302      	adds	r3, #2
 800f56c:	881a      	ldrh	r2, [r3, #0]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	689b      	ldr	r3, [r3, #8]
 800f572:	3302      	adds	r3, #2
 800f574:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800f578:	bf28      	it	cs
 800f57a:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800f57e:	b292      	uxth	r2, r2
 800f580:	801a      	strh	r2, [r3, #0]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	689b      	ldr	r3, [r3, #8]
 800f586:	3304      	adds	r3, #4
 800f588:	881a      	ldrh	r2, [r3, #0]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	3304      	adds	r3, #4
 800f590:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800f594:	bf28      	it	cs
 800f596:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800f59a:	b292      	uxth	r2, r2
 800f59c:	801a      	strh	r2, [r3, #0]
	motors->duty[3] = MIN(1000, motors->duty[3]);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	3306      	adds	r3, #6
 800f5a4:	881a      	ldrh	r2, [r3, #0]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	3306      	adds	r3, #6
 800f5ac:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800f5b0:	bf28      	it	cs
 800f5b2:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800f5b6:	b292      	uxth	r2, r2
 800f5b8:	801a      	strh	r2, [r3, #0]


	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	689b      	ldr	r3, [r3, #8]
 800f5be:	881b      	ldrh	r3, [r3, #0]
 800f5c0:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	635a      	str	r2, [r3, #52]	; 0x34
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	3302      	adds	r3, #2
 800f5d2:	881b      	ldrh	r3, [r3, #0]
 800f5d4:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	639a      	str	r2, [r3, #56]	; 0x38
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	689b      	ldr	r3, [r3, #8]
 800f5e4:	3304      	adds	r3, #4
 800f5e6:	881b      	ldrh	r3, [r3, #0]
 800f5e8:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	63da      	str	r2, [r3, #60]	; 0x3c
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	3306      	adds	r3, #6
 800f5fa:	881b      	ldrh	r3, [r3, #0]
 800f5fc:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f608:	bf00      	nop
 800f60a:	370c      	adds	r7, #12
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr

0800f614 <PID_compute>:
 */

#include "../Inc/Pid.h"

//renvoit la sortie du pid
float PID_compute(PID_t * pid, float consigne, float measurement){
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f620:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calcul de l'erreur
	pid->error = measurement - consigne ;
 800f624:	ed97 7a01 	vldr	s14, [r7, #4]
 800f628:	edd7 7a02 	vldr	s15, [r7, #8]
 800f62c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Calcul des P I D
	pid->P = pid->settings[PID_KP] * pid->error ;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	ed93 7a04 	vldr	s14, [r3, #16]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800f642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->I += pid->settings[PID_KI] * pid->error / pid->settings[PID_FREQUENCY];
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	ed93 7a02 	vldr	s14, [r3, #8]
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	edd3 6a05 	vldr	s13, [r3, #20]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800f65e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	edd3 6a07 	vldr	s13, [r3, #28]
 800f668:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800f66c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	edc3 7a02 	vstr	s15, [r3, #8]
	pid->D = pid->settings[PID_KD] * (measurement - pid->previous_measurement) * pid->settings[PID_FREQUENCY] ;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	ed93 7a06 	vldr	s14, [r3, #24]
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f682:	edd7 6a01 	vldr	s13, [r7, #4]
 800f686:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f68a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	edd3 7a07 	vldr	s15, [r3, #28]
 800f694:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	edc3 7a03 	vstr	s15, [r3, #12]

	//Filtrage
	pid->D = FILTER_process(&pid->d_filter, pid->D);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	edd3 7a03 	vldr	s15, [r3, #12]
 800f6aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f6ae:	4610      	mov	r0, r2
 800f6b0:	f7ff fcab 	bl	800f00a <FILTER_process>
 800f6b4:	eef0 7a40 	vmov.f32	s15, s0
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	edc3 7a03 	vstr	s15, [r3, #12]

	//On somme le tout
	pid->output = pid->P + pid->I + pid->D ;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	ed93 7a01 	vldr	s14, [r3, #4]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	edd3 7a02 	vldr	s15, [r3, #8]
 800f6ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	edd3 7a03 	vldr	s15, [r3, #12]
 800f6d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	edc3 7a00 	vstr	s15, [r3]

	//Check mid and max
	pid->output = MIN(pid->settings[PID_MAX_OUTPUT], pid->output);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	ed93 7a08 	vldr	s14, [r3, #32]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	edd3 7a00 	vldr	s15, [r3]
 800f6ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f2:	dd02      	ble.n	800f6fa <PID_compute+0xe6>
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	e001      	b.n	800f6fe <PID_compute+0xea>
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	6a1b      	ldr	r3, [r3, #32]
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	6013      	str	r3, [r2, #0]
	pid->output = MAX(-pid->settings[PID_MAX_OUTPUT], pid->output);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	edd3 7a08 	vldr	s15, [r3, #32]
 800f708:	eeb1 7a67 	vneg.f32	s14, s15
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	edd3 7a00 	vldr	s15, [r3]
 800f712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f71a:	dd05      	ble.n	800f728 <PID_compute+0x114>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	edd3 7a08 	vldr	s15, [r3, #32]
 800f722:	eef1 7a67 	vneg.f32	s15, s15
 800f726:	e002      	b.n	800f72e <PID_compute+0x11a>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	edd3 7a00 	vldr	s15, [r3]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	edc3 7a00 	vstr	s15, [r3]

	//Mise � jour des valeurs ant�rieures
	pid->previous_measurement = measurement ;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	629a      	str	r2, [r3, #40]	; 0x28
	return pid->output ;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	ee07 3a90 	vmov	s15, r3
}
 800f742:	eeb0 0a67 	vmov.f32	s0, s15
 800f746:	3710      	adds	r7, #16
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <PID_init>:



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b086      	sub	sp, #24
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	603b      	str	r3, [r7, #0]
 800f758:	4613      	mov	r3, r2
 800f75a:	71fb      	strb	r3, [r7, #7]
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800f75c:	2300      	movs	r3, #0
 800f75e:	75fb      	strb	r3, [r7, #23]
 800f760:	e00d      	b.n	800f77e <PID_init+0x32>
		pid->settings[s] = settings[s] ;
 800f762:	7dfb      	ldrb	r3, [r7, #23]
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	68ba      	ldr	r2, [r7, #8]
 800f768:	441a      	add	r2, r3
 800f76a:	7dfb      	ldrb	r3, [r7, #23]
 800f76c:	6812      	ldr	r2, [r2, #0]
 800f76e:	68f9      	ldr	r1, [r7, #12]
 800f770:	3304      	adds	r3, #4
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	440b      	add	r3, r1
 800f776:	601a      	str	r2, [r3, #0]
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800f778:	7dfb      	ldrb	r3, [r7, #23]
 800f77a:	3301      	adds	r3, #1
 800f77c:	75fb      	strb	r3, [r7, #23]
 800f77e:	7dfb      	ldrb	r3, [r7, #23]
 800f780:	2b04      	cmp	r3, #4
 800f782:	d9ee      	bls.n	800f762 <PID_init+0x16>

	//Init values
	pid->P = 0 ;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f04f 0200 	mov.w	r2, #0
 800f78a:	605a      	str	r2, [r3, #4]
	pid->I = 0 ;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f04f 0200 	mov.w	r2, #0
 800f792:	609a      	str	r2, [r3, #8]
	pid->D = 0 ;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f04f 0200 	mov.w	r2, #0
 800f79a:	60da      	str	r2, [r3, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	332c      	adds	r3, #44	; 0x2c
 800f7a0:	79fa      	ldrb	r2, [r7, #7]
 800f7a2:	6839      	ldr	r1, [r7, #0]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7ff fc0d 	bl	800efc4 <FILTER_init>
}
 800f7aa:	bf00      	nop
 800f7ac:	3718      	adds	r7, #24
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
	...

0800f7b4 <__errno>:
 800f7b4:	4b01      	ldr	r3, [pc, #4]	; (800f7bc <__errno+0x8>)
 800f7b6:	6818      	ldr	r0, [r3, #0]
 800f7b8:	4770      	bx	lr
 800f7ba:	bf00      	nop
 800f7bc:	20001a88 	.word	0x20001a88

0800f7c0 <__libc_init_array>:
 800f7c0:	b570      	push	{r4, r5, r6, lr}
 800f7c2:	4e0d      	ldr	r6, [pc, #52]	; (800f7f8 <__libc_init_array+0x38>)
 800f7c4:	4c0d      	ldr	r4, [pc, #52]	; (800f7fc <__libc_init_array+0x3c>)
 800f7c6:	1ba4      	subs	r4, r4, r6
 800f7c8:	10a4      	asrs	r4, r4, #2
 800f7ca:	2500      	movs	r5, #0
 800f7cc:	42a5      	cmp	r5, r4
 800f7ce:	d109      	bne.n	800f7e4 <__libc_init_array+0x24>
 800f7d0:	4e0b      	ldr	r6, [pc, #44]	; (800f800 <__libc_init_array+0x40>)
 800f7d2:	4c0c      	ldr	r4, [pc, #48]	; (800f804 <__libc_init_array+0x44>)
 800f7d4:	f003 ffec 	bl	80137b0 <_init>
 800f7d8:	1ba4      	subs	r4, r4, r6
 800f7da:	10a4      	asrs	r4, r4, #2
 800f7dc:	2500      	movs	r5, #0
 800f7de:	42a5      	cmp	r5, r4
 800f7e0:	d105      	bne.n	800f7ee <__libc_init_array+0x2e>
 800f7e2:	bd70      	pop	{r4, r5, r6, pc}
 800f7e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f7e8:	4798      	blx	r3
 800f7ea:	3501      	adds	r5, #1
 800f7ec:	e7ee      	b.n	800f7cc <__libc_init_array+0xc>
 800f7ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f7f2:	4798      	blx	r3
 800f7f4:	3501      	adds	r5, #1
 800f7f6:	e7f2      	b.n	800f7de <__libc_init_array+0x1e>
 800f7f8:	08013edc 	.word	0x08013edc
 800f7fc:	08013edc 	.word	0x08013edc
 800f800:	08013edc 	.word	0x08013edc
 800f804:	08013ee0 	.word	0x08013ee0

0800f808 <memcpy>:
 800f808:	b510      	push	{r4, lr}
 800f80a:	1e43      	subs	r3, r0, #1
 800f80c:	440a      	add	r2, r1
 800f80e:	4291      	cmp	r1, r2
 800f810:	d100      	bne.n	800f814 <memcpy+0xc>
 800f812:	bd10      	pop	{r4, pc}
 800f814:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f81c:	e7f7      	b.n	800f80e <memcpy+0x6>

0800f81e <memmove>:
 800f81e:	4288      	cmp	r0, r1
 800f820:	b510      	push	{r4, lr}
 800f822:	eb01 0302 	add.w	r3, r1, r2
 800f826:	d807      	bhi.n	800f838 <memmove+0x1a>
 800f828:	1e42      	subs	r2, r0, #1
 800f82a:	4299      	cmp	r1, r3
 800f82c:	d00a      	beq.n	800f844 <memmove+0x26>
 800f82e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f832:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f836:	e7f8      	b.n	800f82a <memmove+0xc>
 800f838:	4283      	cmp	r3, r0
 800f83a:	d9f5      	bls.n	800f828 <memmove+0xa>
 800f83c:	1881      	adds	r1, r0, r2
 800f83e:	1ad2      	subs	r2, r2, r3
 800f840:	42d3      	cmn	r3, r2
 800f842:	d100      	bne.n	800f846 <memmove+0x28>
 800f844:	bd10      	pop	{r4, pc}
 800f846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f84a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f84e:	e7f7      	b.n	800f840 <memmove+0x22>

0800f850 <memset>:
 800f850:	4402      	add	r2, r0
 800f852:	4603      	mov	r3, r0
 800f854:	4293      	cmp	r3, r2
 800f856:	d100      	bne.n	800f85a <memset+0xa>
 800f858:	4770      	bx	lr
 800f85a:	f803 1b01 	strb.w	r1, [r3], #1
 800f85e:	e7f9      	b.n	800f854 <memset+0x4>

0800f860 <__cvt>:
 800f860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f864:	ec55 4b10 	vmov	r4, r5, d0
 800f868:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f86a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f86e:	2d00      	cmp	r5, #0
 800f870:	460e      	mov	r6, r1
 800f872:	4691      	mov	r9, r2
 800f874:	4619      	mov	r1, r3
 800f876:	bfb8      	it	lt
 800f878:	4622      	movlt	r2, r4
 800f87a:	462b      	mov	r3, r5
 800f87c:	f027 0720 	bic.w	r7, r7, #32
 800f880:	bfbb      	ittet	lt
 800f882:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f886:	461d      	movlt	r5, r3
 800f888:	2300      	movge	r3, #0
 800f88a:	232d      	movlt	r3, #45	; 0x2d
 800f88c:	bfb8      	it	lt
 800f88e:	4614      	movlt	r4, r2
 800f890:	2f46      	cmp	r7, #70	; 0x46
 800f892:	700b      	strb	r3, [r1, #0]
 800f894:	d004      	beq.n	800f8a0 <__cvt+0x40>
 800f896:	2f45      	cmp	r7, #69	; 0x45
 800f898:	d100      	bne.n	800f89c <__cvt+0x3c>
 800f89a:	3601      	adds	r6, #1
 800f89c:	2102      	movs	r1, #2
 800f89e:	e000      	b.n	800f8a2 <__cvt+0x42>
 800f8a0:	2103      	movs	r1, #3
 800f8a2:	ab03      	add	r3, sp, #12
 800f8a4:	9301      	str	r3, [sp, #4]
 800f8a6:	ab02      	add	r3, sp, #8
 800f8a8:	9300      	str	r3, [sp, #0]
 800f8aa:	4632      	mov	r2, r6
 800f8ac:	4653      	mov	r3, sl
 800f8ae:	ec45 4b10 	vmov	d0, r4, r5
 800f8b2:	f000 fea9 	bl	8010608 <_dtoa_r>
 800f8b6:	2f47      	cmp	r7, #71	; 0x47
 800f8b8:	4680      	mov	r8, r0
 800f8ba:	d102      	bne.n	800f8c2 <__cvt+0x62>
 800f8bc:	f019 0f01 	tst.w	r9, #1
 800f8c0:	d026      	beq.n	800f910 <__cvt+0xb0>
 800f8c2:	2f46      	cmp	r7, #70	; 0x46
 800f8c4:	eb08 0906 	add.w	r9, r8, r6
 800f8c8:	d111      	bne.n	800f8ee <__cvt+0x8e>
 800f8ca:	f898 3000 	ldrb.w	r3, [r8]
 800f8ce:	2b30      	cmp	r3, #48	; 0x30
 800f8d0:	d10a      	bne.n	800f8e8 <__cvt+0x88>
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	4629      	mov	r1, r5
 800f8da:	f7f1 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8de:	b918      	cbnz	r0, 800f8e8 <__cvt+0x88>
 800f8e0:	f1c6 0601 	rsb	r6, r6, #1
 800f8e4:	f8ca 6000 	str.w	r6, [sl]
 800f8e8:	f8da 3000 	ldr.w	r3, [sl]
 800f8ec:	4499      	add	r9, r3
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	4629      	mov	r1, r5
 800f8f6:	f7f1 f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8fa:	b938      	cbnz	r0, 800f90c <__cvt+0xac>
 800f8fc:	2230      	movs	r2, #48	; 0x30
 800f8fe:	9b03      	ldr	r3, [sp, #12]
 800f900:	454b      	cmp	r3, r9
 800f902:	d205      	bcs.n	800f910 <__cvt+0xb0>
 800f904:	1c59      	adds	r1, r3, #1
 800f906:	9103      	str	r1, [sp, #12]
 800f908:	701a      	strb	r2, [r3, #0]
 800f90a:	e7f8      	b.n	800f8fe <__cvt+0x9e>
 800f90c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f910:	9b03      	ldr	r3, [sp, #12]
 800f912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f914:	eba3 0308 	sub.w	r3, r3, r8
 800f918:	4640      	mov	r0, r8
 800f91a:	6013      	str	r3, [r2, #0]
 800f91c:	b004      	add	sp, #16
 800f91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f922 <__exponent>:
 800f922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f924:	2900      	cmp	r1, #0
 800f926:	4604      	mov	r4, r0
 800f928:	bfba      	itte	lt
 800f92a:	4249      	neglt	r1, r1
 800f92c:	232d      	movlt	r3, #45	; 0x2d
 800f92e:	232b      	movge	r3, #43	; 0x2b
 800f930:	2909      	cmp	r1, #9
 800f932:	f804 2b02 	strb.w	r2, [r4], #2
 800f936:	7043      	strb	r3, [r0, #1]
 800f938:	dd20      	ble.n	800f97c <__exponent+0x5a>
 800f93a:	f10d 0307 	add.w	r3, sp, #7
 800f93e:	461f      	mov	r7, r3
 800f940:	260a      	movs	r6, #10
 800f942:	fb91 f5f6 	sdiv	r5, r1, r6
 800f946:	fb06 1115 	mls	r1, r6, r5, r1
 800f94a:	3130      	adds	r1, #48	; 0x30
 800f94c:	2d09      	cmp	r5, #9
 800f94e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f952:	f103 32ff 	add.w	r2, r3, #4294967295
 800f956:	4629      	mov	r1, r5
 800f958:	dc09      	bgt.n	800f96e <__exponent+0x4c>
 800f95a:	3130      	adds	r1, #48	; 0x30
 800f95c:	3b02      	subs	r3, #2
 800f95e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f962:	42bb      	cmp	r3, r7
 800f964:	4622      	mov	r2, r4
 800f966:	d304      	bcc.n	800f972 <__exponent+0x50>
 800f968:	1a10      	subs	r0, r2, r0
 800f96a:	b003      	add	sp, #12
 800f96c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f96e:	4613      	mov	r3, r2
 800f970:	e7e7      	b.n	800f942 <__exponent+0x20>
 800f972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f976:	f804 2b01 	strb.w	r2, [r4], #1
 800f97a:	e7f2      	b.n	800f962 <__exponent+0x40>
 800f97c:	2330      	movs	r3, #48	; 0x30
 800f97e:	4419      	add	r1, r3
 800f980:	7083      	strb	r3, [r0, #2]
 800f982:	1d02      	adds	r2, r0, #4
 800f984:	70c1      	strb	r1, [r0, #3]
 800f986:	e7ef      	b.n	800f968 <__exponent+0x46>

0800f988 <_printf_float>:
 800f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f98c:	b08d      	sub	sp, #52	; 0x34
 800f98e:	460c      	mov	r4, r1
 800f990:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f994:	4616      	mov	r6, r2
 800f996:	461f      	mov	r7, r3
 800f998:	4605      	mov	r5, r0
 800f99a:	f001 fd67 	bl	801146c <_localeconv_r>
 800f99e:	6803      	ldr	r3, [r0, #0]
 800f9a0:	9304      	str	r3, [sp, #16]
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7f0 fc14 	bl	80001d0 <strlen>
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	930a      	str	r3, [sp, #40]	; 0x28
 800f9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800f9b0:	9005      	str	r0, [sp, #20]
 800f9b2:	3307      	adds	r3, #7
 800f9b4:	f023 0307 	bic.w	r3, r3, #7
 800f9b8:	f103 0208 	add.w	r2, r3, #8
 800f9bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f9c0:	f8d4 b000 	ldr.w	fp, [r4]
 800f9c4:	f8c8 2000 	str.w	r2, [r8]
 800f9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f9d0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f9d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f9d8:	9307      	str	r3, [sp, #28]
 800f9da:	f8cd 8018 	str.w	r8, [sp, #24]
 800f9de:	f04f 32ff 	mov.w	r2, #4294967295
 800f9e2:	4ba7      	ldr	r3, [pc, #668]	; (800fc80 <_printf_float+0x2f8>)
 800f9e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f9e8:	f7f1 f8a0 	bl	8000b2c <__aeabi_dcmpun>
 800f9ec:	bb70      	cbnz	r0, 800fa4c <_printf_float+0xc4>
 800f9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f9f2:	4ba3      	ldr	r3, [pc, #652]	; (800fc80 <_printf_float+0x2f8>)
 800f9f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f9f8:	f7f1 f87a 	bl	8000af0 <__aeabi_dcmple>
 800f9fc:	bb30      	cbnz	r0, 800fa4c <_printf_float+0xc4>
 800f9fe:	2200      	movs	r2, #0
 800fa00:	2300      	movs	r3, #0
 800fa02:	4640      	mov	r0, r8
 800fa04:	4649      	mov	r1, r9
 800fa06:	f7f1 f869 	bl	8000adc <__aeabi_dcmplt>
 800fa0a:	b110      	cbz	r0, 800fa12 <_printf_float+0x8a>
 800fa0c:	232d      	movs	r3, #45	; 0x2d
 800fa0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa12:	4a9c      	ldr	r2, [pc, #624]	; (800fc84 <_printf_float+0x2fc>)
 800fa14:	4b9c      	ldr	r3, [pc, #624]	; (800fc88 <_printf_float+0x300>)
 800fa16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fa1a:	bf8c      	ite	hi
 800fa1c:	4690      	movhi	r8, r2
 800fa1e:	4698      	movls	r8, r3
 800fa20:	2303      	movs	r3, #3
 800fa22:	f02b 0204 	bic.w	r2, fp, #4
 800fa26:	6123      	str	r3, [r4, #16]
 800fa28:	6022      	str	r2, [r4, #0]
 800fa2a:	f04f 0900 	mov.w	r9, #0
 800fa2e:	9700      	str	r7, [sp, #0]
 800fa30:	4633      	mov	r3, r6
 800fa32:	aa0b      	add	r2, sp, #44	; 0x2c
 800fa34:	4621      	mov	r1, r4
 800fa36:	4628      	mov	r0, r5
 800fa38:	f000 f9e6 	bl	800fe08 <_printf_common>
 800fa3c:	3001      	adds	r0, #1
 800fa3e:	f040 808d 	bne.w	800fb5c <_printf_float+0x1d4>
 800fa42:	f04f 30ff 	mov.w	r0, #4294967295
 800fa46:	b00d      	add	sp, #52	; 0x34
 800fa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa4c:	4642      	mov	r2, r8
 800fa4e:	464b      	mov	r3, r9
 800fa50:	4640      	mov	r0, r8
 800fa52:	4649      	mov	r1, r9
 800fa54:	f7f1 f86a 	bl	8000b2c <__aeabi_dcmpun>
 800fa58:	b110      	cbz	r0, 800fa60 <_printf_float+0xd8>
 800fa5a:	4a8c      	ldr	r2, [pc, #560]	; (800fc8c <_printf_float+0x304>)
 800fa5c:	4b8c      	ldr	r3, [pc, #560]	; (800fc90 <_printf_float+0x308>)
 800fa5e:	e7da      	b.n	800fa16 <_printf_float+0x8e>
 800fa60:	6861      	ldr	r1, [r4, #4]
 800fa62:	1c4b      	adds	r3, r1, #1
 800fa64:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800fa68:	a80a      	add	r0, sp, #40	; 0x28
 800fa6a:	d13e      	bne.n	800faea <_printf_float+0x162>
 800fa6c:	2306      	movs	r3, #6
 800fa6e:	6063      	str	r3, [r4, #4]
 800fa70:	2300      	movs	r3, #0
 800fa72:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fa76:	ab09      	add	r3, sp, #36	; 0x24
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	ec49 8b10 	vmov	d0, r8, r9
 800fa7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fa82:	6022      	str	r2, [r4, #0]
 800fa84:	f8cd a004 	str.w	sl, [sp, #4]
 800fa88:	6861      	ldr	r1, [r4, #4]
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	f7ff fee8 	bl	800f860 <__cvt>
 800fa90:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800fa94:	2b47      	cmp	r3, #71	; 0x47
 800fa96:	4680      	mov	r8, r0
 800fa98:	d109      	bne.n	800faae <_printf_float+0x126>
 800fa9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa9c:	1cd8      	adds	r0, r3, #3
 800fa9e:	db02      	blt.n	800faa6 <_printf_float+0x11e>
 800faa0:	6862      	ldr	r2, [r4, #4]
 800faa2:	4293      	cmp	r3, r2
 800faa4:	dd47      	ble.n	800fb36 <_printf_float+0x1ae>
 800faa6:	f1aa 0a02 	sub.w	sl, sl, #2
 800faaa:	fa5f fa8a 	uxtb.w	sl, sl
 800faae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fab2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fab4:	d824      	bhi.n	800fb00 <_printf_float+0x178>
 800fab6:	3901      	subs	r1, #1
 800fab8:	4652      	mov	r2, sl
 800faba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fabe:	9109      	str	r1, [sp, #36]	; 0x24
 800fac0:	f7ff ff2f 	bl	800f922 <__exponent>
 800fac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fac6:	1813      	adds	r3, r2, r0
 800fac8:	2a01      	cmp	r2, #1
 800faca:	4681      	mov	r9, r0
 800facc:	6123      	str	r3, [r4, #16]
 800face:	dc02      	bgt.n	800fad6 <_printf_float+0x14e>
 800fad0:	6822      	ldr	r2, [r4, #0]
 800fad2:	07d1      	lsls	r1, r2, #31
 800fad4:	d501      	bpl.n	800fada <_printf_float+0x152>
 800fad6:	3301      	adds	r3, #1
 800fad8:	6123      	str	r3, [r4, #16]
 800fada:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d0a5      	beq.n	800fa2e <_printf_float+0xa6>
 800fae2:	232d      	movs	r3, #45	; 0x2d
 800fae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fae8:	e7a1      	b.n	800fa2e <_printf_float+0xa6>
 800faea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800faee:	f000 8177 	beq.w	800fde0 <_printf_float+0x458>
 800faf2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800faf6:	d1bb      	bne.n	800fa70 <_printf_float+0xe8>
 800faf8:	2900      	cmp	r1, #0
 800fafa:	d1b9      	bne.n	800fa70 <_printf_float+0xe8>
 800fafc:	2301      	movs	r3, #1
 800fafe:	e7b6      	b.n	800fa6e <_printf_float+0xe6>
 800fb00:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800fb04:	d119      	bne.n	800fb3a <_printf_float+0x1b2>
 800fb06:	2900      	cmp	r1, #0
 800fb08:	6863      	ldr	r3, [r4, #4]
 800fb0a:	dd0c      	ble.n	800fb26 <_printf_float+0x19e>
 800fb0c:	6121      	str	r1, [r4, #16]
 800fb0e:	b913      	cbnz	r3, 800fb16 <_printf_float+0x18e>
 800fb10:	6822      	ldr	r2, [r4, #0]
 800fb12:	07d2      	lsls	r2, r2, #31
 800fb14:	d502      	bpl.n	800fb1c <_printf_float+0x194>
 800fb16:	3301      	adds	r3, #1
 800fb18:	440b      	add	r3, r1
 800fb1a:	6123      	str	r3, [r4, #16]
 800fb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb1e:	65a3      	str	r3, [r4, #88]	; 0x58
 800fb20:	f04f 0900 	mov.w	r9, #0
 800fb24:	e7d9      	b.n	800fada <_printf_float+0x152>
 800fb26:	b913      	cbnz	r3, 800fb2e <_printf_float+0x1a6>
 800fb28:	6822      	ldr	r2, [r4, #0]
 800fb2a:	07d0      	lsls	r0, r2, #31
 800fb2c:	d501      	bpl.n	800fb32 <_printf_float+0x1aa>
 800fb2e:	3302      	adds	r3, #2
 800fb30:	e7f3      	b.n	800fb1a <_printf_float+0x192>
 800fb32:	2301      	movs	r3, #1
 800fb34:	e7f1      	b.n	800fb1a <_printf_float+0x192>
 800fb36:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800fb3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	db05      	blt.n	800fb4e <_printf_float+0x1c6>
 800fb42:	6822      	ldr	r2, [r4, #0]
 800fb44:	6123      	str	r3, [r4, #16]
 800fb46:	07d1      	lsls	r1, r2, #31
 800fb48:	d5e8      	bpl.n	800fb1c <_printf_float+0x194>
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	e7e5      	b.n	800fb1a <_printf_float+0x192>
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	bfd4      	ite	le
 800fb52:	f1c3 0302 	rsble	r3, r3, #2
 800fb56:	2301      	movgt	r3, #1
 800fb58:	4413      	add	r3, r2
 800fb5a:	e7de      	b.n	800fb1a <_printf_float+0x192>
 800fb5c:	6823      	ldr	r3, [r4, #0]
 800fb5e:	055a      	lsls	r2, r3, #21
 800fb60:	d407      	bmi.n	800fb72 <_printf_float+0x1ea>
 800fb62:	6923      	ldr	r3, [r4, #16]
 800fb64:	4642      	mov	r2, r8
 800fb66:	4631      	mov	r1, r6
 800fb68:	4628      	mov	r0, r5
 800fb6a:	47b8      	blx	r7
 800fb6c:	3001      	adds	r0, #1
 800fb6e:	d12b      	bne.n	800fbc8 <_printf_float+0x240>
 800fb70:	e767      	b.n	800fa42 <_printf_float+0xba>
 800fb72:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fb76:	f240 80dc 	bls.w	800fd32 <_printf_float+0x3aa>
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fb82:	f7f0 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb86:	2800      	cmp	r0, #0
 800fb88:	d033      	beq.n	800fbf2 <_printf_float+0x26a>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	4a41      	ldr	r2, [pc, #260]	; (800fc94 <_printf_float+0x30c>)
 800fb8e:	4631      	mov	r1, r6
 800fb90:	4628      	mov	r0, r5
 800fb92:	47b8      	blx	r7
 800fb94:	3001      	adds	r0, #1
 800fb96:	f43f af54 	beq.w	800fa42 <_printf_float+0xba>
 800fb9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	db02      	blt.n	800fba8 <_printf_float+0x220>
 800fba2:	6823      	ldr	r3, [r4, #0]
 800fba4:	07d8      	lsls	r0, r3, #31
 800fba6:	d50f      	bpl.n	800fbc8 <_printf_float+0x240>
 800fba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbac:	4631      	mov	r1, r6
 800fbae:	4628      	mov	r0, r5
 800fbb0:	47b8      	blx	r7
 800fbb2:	3001      	adds	r0, #1
 800fbb4:	f43f af45 	beq.w	800fa42 <_printf_float+0xba>
 800fbb8:	f04f 0800 	mov.w	r8, #0
 800fbbc:	f104 091a 	add.w	r9, r4, #26
 800fbc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	4543      	cmp	r3, r8
 800fbc6:	dc09      	bgt.n	800fbdc <_printf_float+0x254>
 800fbc8:	6823      	ldr	r3, [r4, #0]
 800fbca:	079b      	lsls	r3, r3, #30
 800fbcc:	f100 8103 	bmi.w	800fdd6 <_printf_float+0x44e>
 800fbd0:	68e0      	ldr	r0, [r4, #12]
 800fbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbd4:	4298      	cmp	r0, r3
 800fbd6:	bfb8      	it	lt
 800fbd8:	4618      	movlt	r0, r3
 800fbda:	e734      	b.n	800fa46 <_printf_float+0xbe>
 800fbdc:	2301      	movs	r3, #1
 800fbde:	464a      	mov	r2, r9
 800fbe0:	4631      	mov	r1, r6
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	47b8      	blx	r7
 800fbe6:	3001      	adds	r0, #1
 800fbe8:	f43f af2b 	beq.w	800fa42 <_printf_float+0xba>
 800fbec:	f108 0801 	add.w	r8, r8, #1
 800fbf0:	e7e6      	b.n	800fbc0 <_printf_float+0x238>
 800fbf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	dc2b      	bgt.n	800fc50 <_printf_float+0x2c8>
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	4a26      	ldr	r2, [pc, #152]	; (800fc94 <_printf_float+0x30c>)
 800fbfc:	4631      	mov	r1, r6
 800fbfe:	4628      	mov	r0, r5
 800fc00:	47b8      	blx	r7
 800fc02:	3001      	adds	r0, #1
 800fc04:	f43f af1d 	beq.w	800fa42 <_printf_float+0xba>
 800fc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc0a:	b923      	cbnz	r3, 800fc16 <_printf_float+0x28e>
 800fc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc0e:	b913      	cbnz	r3, 800fc16 <_printf_float+0x28e>
 800fc10:	6823      	ldr	r3, [r4, #0]
 800fc12:	07d9      	lsls	r1, r3, #31
 800fc14:	d5d8      	bpl.n	800fbc8 <_printf_float+0x240>
 800fc16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	47b8      	blx	r7
 800fc20:	3001      	adds	r0, #1
 800fc22:	f43f af0e 	beq.w	800fa42 <_printf_float+0xba>
 800fc26:	f04f 0900 	mov.w	r9, #0
 800fc2a:	f104 0a1a 	add.w	sl, r4, #26
 800fc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc30:	425b      	negs	r3, r3
 800fc32:	454b      	cmp	r3, r9
 800fc34:	dc01      	bgt.n	800fc3a <_printf_float+0x2b2>
 800fc36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc38:	e794      	b.n	800fb64 <_printf_float+0x1dc>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	4652      	mov	r2, sl
 800fc3e:	4631      	mov	r1, r6
 800fc40:	4628      	mov	r0, r5
 800fc42:	47b8      	blx	r7
 800fc44:	3001      	adds	r0, #1
 800fc46:	f43f aefc 	beq.w	800fa42 <_printf_float+0xba>
 800fc4a:	f109 0901 	add.w	r9, r9, #1
 800fc4e:	e7ee      	b.n	800fc2e <_printf_float+0x2a6>
 800fc50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fc54:	429a      	cmp	r2, r3
 800fc56:	bfa8      	it	ge
 800fc58:	461a      	movge	r2, r3
 800fc5a:	2a00      	cmp	r2, #0
 800fc5c:	4691      	mov	r9, r2
 800fc5e:	dd07      	ble.n	800fc70 <_printf_float+0x2e8>
 800fc60:	4613      	mov	r3, r2
 800fc62:	4631      	mov	r1, r6
 800fc64:	4642      	mov	r2, r8
 800fc66:	4628      	mov	r0, r5
 800fc68:	47b8      	blx	r7
 800fc6a:	3001      	adds	r0, #1
 800fc6c:	f43f aee9 	beq.w	800fa42 <_printf_float+0xba>
 800fc70:	f104 031a 	add.w	r3, r4, #26
 800fc74:	f04f 0b00 	mov.w	fp, #0
 800fc78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc7c:	9306      	str	r3, [sp, #24]
 800fc7e:	e015      	b.n	800fcac <_printf_float+0x324>
 800fc80:	7fefffff 	.word	0x7fefffff
 800fc84:	08013ad2 	.word	0x08013ad2
 800fc88:	08013814 	.word	0x08013814
 800fc8c:	0801381c 	.word	0x0801381c
 800fc90:	08013818 	.word	0x08013818
 800fc94:	08013820 	.word	0x08013820
 800fc98:	2301      	movs	r3, #1
 800fc9a:	9a06      	ldr	r2, [sp, #24]
 800fc9c:	4631      	mov	r1, r6
 800fc9e:	4628      	mov	r0, r5
 800fca0:	47b8      	blx	r7
 800fca2:	3001      	adds	r0, #1
 800fca4:	f43f aecd 	beq.w	800fa42 <_printf_float+0xba>
 800fca8:	f10b 0b01 	add.w	fp, fp, #1
 800fcac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800fcb0:	ebaa 0309 	sub.w	r3, sl, r9
 800fcb4:	455b      	cmp	r3, fp
 800fcb6:	dcef      	bgt.n	800fc98 <_printf_float+0x310>
 800fcb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	44d0      	add	r8, sl
 800fcc0:	db15      	blt.n	800fcee <_printf_float+0x366>
 800fcc2:	6823      	ldr	r3, [r4, #0]
 800fcc4:	07da      	lsls	r2, r3, #31
 800fcc6:	d412      	bmi.n	800fcee <_printf_float+0x366>
 800fcc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fccc:	eba3 020a 	sub.w	r2, r3, sl
 800fcd0:	eba3 0a01 	sub.w	sl, r3, r1
 800fcd4:	4592      	cmp	sl, r2
 800fcd6:	bfa8      	it	ge
 800fcd8:	4692      	movge	sl, r2
 800fcda:	f1ba 0f00 	cmp.w	sl, #0
 800fcde:	dc0e      	bgt.n	800fcfe <_printf_float+0x376>
 800fce0:	f04f 0800 	mov.w	r8, #0
 800fce4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fce8:	f104 091a 	add.w	r9, r4, #26
 800fcec:	e019      	b.n	800fd22 <_printf_float+0x39a>
 800fcee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcf2:	4631      	mov	r1, r6
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	47b8      	blx	r7
 800fcf8:	3001      	adds	r0, #1
 800fcfa:	d1e5      	bne.n	800fcc8 <_printf_float+0x340>
 800fcfc:	e6a1      	b.n	800fa42 <_printf_float+0xba>
 800fcfe:	4653      	mov	r3, sl
 800fd00:	4642      	mov	r2, r8
 800fd02:	4631      	mov	r1, r6
 800fd04:	4628      	mov	r0, r5
 800fd06:	47b8      	blx	r7
 800fd08:	3001      	adds	r0, #1
 800fd0a:	d1e9      	bne.n	800fce0 <_printf_float+0x358>
 800fd0c:	e699      	b.n	800fa42 <_printf_float+0xba>
 800fd0e:	2301      	movs	r3, #1
 800fd10:	464a      	mov	r2, r9
 800fd12:	4631      	mov	r1, r6
 800fd14:	4628      	mov	r0, r5
 800fd16:	47b8      	blx	r7
 800fd18:	3001      	adds	r0, #1
 800fd1a:	f43f ae92 	beq.w	800fa42 <_printf_float+0xba>
 800fd1e:	f108 0801 	add.w	r8, r8, #1
 800fd22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fd26:	1a9b      	subs	r3, r3, r2
 800fd28:	eba3 030a 	sub.w	r3, r3, sl
 800fd2c:	4543      	cmp	r3, r8
 800fd2e:	dcee      	bgt.n	800fd0e <_printf_float+0x386>
 800fd30:	e74a      	b.n	800fbc8 <_printf_float+0x240>
 800fd32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd34:	2a01      	cmp	r2, #1
 800fd36:	dc01      	bgt.n	800fd3c <_printf_float+0x3b4>
 800fd38:	07db      	lsls	r3, r3, #31
 800fd3a:	d53a      	bpl.n	800fdb2 <_printf_float+0x42a>
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	4642      	mov	r2, r8
 800fd40:	4631      	mov	r1, r6
 800fd42:	4628      	mov	r0, r5
 800fd44:	47b8      	blx	r7
 800fd46:	3001      	adds	r0, #1
 800fd48:	f43f ae7b 	beq.w	800fa42 <_printf_float+0xba>
 800fd4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd50:	4631      	mov	r1, r6
 800fd52:	4628      	mov	r0, r5
 800fd54:	47b8      	blx	r7
 800fd56:	3001      	adds	r0, #1
 800fd58:	f108 0801 	add.w	r8, r8, #1
 800fd5c:	f43f ae71 	beq.w	800fa42 <_printf_float+0xba>
 800fd60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd62:	2200      	movs	r2, #0
 800fd64:	f103 3aff 	add.w	sl, r3, #4294967295
 800fd68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	f7f0 feab 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd72:	b9c8      	cbnz	r0, 800fda8 <_printf_float+0x420>
 800fd74:	4653      	mov	r3, sl
 800fd76:	4642      	mov	r2, r8
 800fd78:	4631      	mov	r1, r6
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	47b8      	blx	r7
 800fd7e:	3001      	adds	r0, #1
 800fd80:	d10e      	bne.n	800fda0 <_printf_float+0x418>
 800fd82:	e65e      	b.n	800fa42 <_printf_float+0xba>
 800fd84:	2301      	movs	r3, #1
 800fd86:	4652      	mov	r2, sl
 800fd88:	4631      	mov	r1, r6
 800fd8a:	4628      	mov	r0, r5
 800fd8c:	47b8      	blx	r7
 800fd8e:	3001      	adds	r0, #1
 800fd90:	f43f ae57 	beq.w	800fa42 <_printf_float+0xba>
 800fd94:	f108 0801 	add.w	r8, r8, #1
 800fd98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd9a:	3b01      	subs	r3, #1
 800fd9c:	4543      	cmp	r3, r8
 800fd9e:	dcf1      	bgt.n	800fd84 <_printf_float+0x3fc>
 800fda0:	464b      	mov	r3, r9
 800fda2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fda6:	e6de      	b.n	800fb66 <_printf_float+0x1de>
 800fda8:	f04f 0800 	mov.w	r8, #0
 800fdac:	f104 0a1a 	add.w	sl, r4, #26
 800fdb0:	e7f2      	b.n	800fd98 <_printf_float+0x410>
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	e7df      	b.n	800fd76 <_printf_float+0x3ee>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	464a      	mov	r2, r9
 800fdba:	4631      	mov	r1, r6
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	47b8      	blx	r7
 800fdc0:	3001      	adds	r0, #1
 800fdc2:	f43f ae3e 	beq.w	800fa42 <_printf_float+0xba>
 800fdc6:	f108 0801 	add.w	r8, r8, #1
 800fdca:	68e3      	ldr	r3, [r4, #12]
 800fdcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fdce:	1a9b      	subs	r3, r3, r2
 800fdd0:	4543      	cmp	r3, r8
 800fdd2:	dcf0      	bgt.n	800fdb6 <_printf_float+0x42e>
 800fdd4:	e6fc      	b.n	800fbd0 <_printf_float+0x248>
 800fdd6:	f04f 0800 	mov.w	r8, #0
 800fdda:	f104 0919 	add.w	r9, r4, #25
 800fdde:	e7f4      	b.n	800fdca <_printf_float+0x442>
 800fde0:	2900      	cmp	r1, #0
 800fde2:	f43f ae8b 	beq.w	800fafc <_printf_float+0x174>
 800fde6:	2300      	movs	r3, #0
 800fde8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fdec:	ab09      	add	r3, sp, #36	; 0x24
 800fdee:	9300      	str	r3, [sp, #0]
 800fdf0:	ec49 8b10 	vmov	d0, r8, r9
 800fdf4:	6022      	str	r2, [r4, #0]
 800fdf6:	f8cd a004 	str.w	sl, [sp, #4]
 800fdfa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fdfe:	4628      	mov	r0, r5
 800fe00:	f7ff fd2e 	bl	800f860 <__cvt>
 800fe04:	4680      	mov	r8, r0
 800fe06:	e648      	b.n	800fa9a <_printf_float+0x112>

0800fe08 <_printf_common>:
 800fe08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe0c:	4691      	mov	r9, r2
 800fe0e:	461f      	mov	r7, r3
 800fe10:	688a      	ldr	r2, [r1, #8]
 800fe12:	690b      	ldr	r3, [r1, #16]
 800fe14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	bfb8      	it	lt
 800fe1c:	4613      	movlt	r3, r2
 800fe1e:	f8c9 3000 	str.w	r3, [r9]
 800fe22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe26:	4606      	mov	r6, r0
 800fe28:	460c      	mov	r4, r1
 800fe2a:	b112      	cbz	r2, 800fe32 <_printf_common+0x2a>
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	f8c9 3000 	str.w	r3, [r9]
 800fe32:	6823      	ldr	r3, [r4, #0]
 800fe34:	0699      	lsls	r1, r3, #26
 800fe36:	bf42      	ittt	mi
 800fe38:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fe3c:	3302      	addmi	r3, #2
 800fe3e:	f8c9 3000 	strmi.w	r3, [r9]
 800fe42:	6825      	ldr	r5, [r4, #0]
 800fe44:	f015 0506 	ands.w	r5, r5, #6
 800fe48:	d107      	bne.n	800fe5a <_printf_common+0x52>
 800fe4a:	f104 0a19 	add.w	sl, r4, #25
 800fe4e:	68e3      	ldr	r3, [r4, #12]
 800fe50:	f8d9 2000 	ldr.w	r2, [r9]
 800fe54:	1a9b      	subs	r3, r3, r2
 800fe56:	42ab      	cmp	r3, r5
 800fe58:	dc28      	bgt.n	800feac <_printf_common+0xa4>
 800fe5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fe5e:	6822      	ldr	r2, [r4, #0]
 800fe60:	3300      	adds	r3, #0
 800fe62:	bf18      	it	ne
 800fe64:	2301      	movne	r3, #1
 800fe66:	0692      	lsls	r2, r2, #26
 800fe68:	d42d      	bmi.n	800fec6 <_printf_common+0xbe>
 800fe6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe6e:	4639      	mov	r1, r7
 800fe70:	4630      	mov	r0, r6
 800fe72:	47c0      	blx	r8
 800fe74:	3001      	adds	r0, #1
 800fe76:	d020      	beq.n	800feba <_printf_common+0xb2>
 800fe78:	6823      	ldr	r3, [r4, #0]
 800fe7a:	68e5      	ldr	r5, [r4, #12]
 800fe7c:	f8d9 2000 	ldr.w	r2, [r9]
 800fe80:	f003 0306 	and.w	r3, r3, #6
 800fe84:	2b04      	cmp	r3, #4
 800fe86:	bf08      	it	eq
 800fe88:	1aad      	subeq	r5, r5, r2
 800fe8a:	68a3      	ldr	r3, [r4, #8]
 800fe8c:	6922      	ldr	r2, [r4, #16]
 800fe8e:	bf0c      	ite	eq
 800fe90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe94:	2500      	movne	r5, #0
 800fe96:	4293      	cmp	r3, r2
 800fe98:	bfc4      	itt	gt
 800fe9a:	1a9b      	subgt	r3, r3, r2
 800fe9c:	18ed      	addgt	r5, r5, r3
 800fe9e:	f04f 0900 	mov.w	r9, #0
 800fea2:	341a      	adds	r4, #26
 800fea4:	454d      	cmp	r5, r9
 800fea6:	d11a      	bne.n	800fede <_printf_common+0xd6>
 800fea8:	2000      	movs	r0, #0
 800feaa:	e008      	b.n	800febe <_printf_common+0xb6>
 800feac:	2301      	movs	r3, #1
 800feae:	4652      	mov	r2, sl
 800feb0:	4639      	mov	r1, r7
 800feb2:	4630      	mov	r0, r6
 800feb4:	47c0      	blx	r8
 800feb6:	3001      	adds	r0, #1
 800feb8:	d103      	bne.n	800fec2 <_printf_common+0xba>
 800feba:	f04f 30ff 	mov.w	r0, #4294967295
 800febe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fec2:	3501      	adds	r5, #1
 800fec4:	e7c3      	b.n	800fe4e <_printf_common+0x46>
 800fec6:	18e1      	adds	r1, r4, r3
 800fec8:	1c5a      	adds	r2, r3, #1
 800feca:	2030      	movs	r0, #48	; 0x30
 800fecc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fed0:	4422      	add	r2, r4
 800fed2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800feda:	3302      	adds	r3, #2
 800fedc:	e7c5      	b.n	800fe6a <_printf_common+0x62>
 800fede:	2301      	movs	r3, #1
 800fee0:	4622      	mov	r2, r4
 800fee2:	4639      	mov	r1, r7
 800fee4:	4630      	mov	r0, r6
 800fee6:	47c0      	blx	r8
 800fee8:	3001      	adds	r0, #1
 800feea:	d0e6      	beq.n	800feba <_printf_common+0xb2>
 800feec:	f109 0901 	add.w	r9, r9, #1
 800fef0:	e7d8      	b.n	800fea4 <_printf_common+0x9c>
	...

0800fef4 <_printf_i>:
 800fef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fef8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fefc:	460c      	mov	r4, r1
 800fefe:	7e09      	ldrb	r1, [r1, #24]
 800ff00:	b085      	sub	sp, #20
 800ff02:	296e      	cmp	r1, #110	; 0x6e
 800ff04:	4617      	mov	r7, r2
 800ff06:	4606      	mov	r6, r0
 800ff08:	4698      	mov	r8, r3
 800ff0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff0c:	f000 80b3 	beq.w	8010076 <_printf_i+0x182>
 800ff10:	d822      	bhi.n	800ff58 <_printf_i+0x64>
 800ff12:	2963      	cmp	r1, #99	; 0x63
 800ff14:	d036      	beq.n	800ff84 <_printf_i+0x90>
 800ff16:	d80a      	bhi.n	800ff2e <_printf_i+0x3a>
 800ff18:	2900      	cmp	r1, #0
 800ff1a:	f000 80b9 	beq.w	8010090 <_printf_i+0x19c>
 800ff1e:	2958      	cmp	r1, #88	; 0x58
 800ff20:	f000 8083 	beq.w	801002a <_printf_i+0x136>
 800ff24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ff2c:	e032      	b.n	800ff94 <_printf_i+0xa0>
 800ff2e:	2964      	cmp	r1, #100	; 0x64
 800ff30:	d001      	beq.n	800ff36 <_printf_i+0x42>
 800ff32:	2969      	cmp	r1, #105	; 0x69
 800ff34:	d1f6      	bne.n	800ff24 <_printf_i+0x30>
 800ff36:	6820      	ldr	r0, [r4, #0]
 800ff38:	6813      	ldr	r3, [r2, #0]
 800ff3a:	0605      	lsls	r5, r0, #24
 800ff3c:	f103 0104 	add.w	r1, r3, #4
 800ff40:	d52a      	bpl.n	800ff98 <_printf_i+0xa4>
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	6011      	str	r1, [r2, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	da03      	bge.n	800ff52 <_printf_i+0x5e>
 800ff4a:	222d      	movs	r2, #45	; 0x2d
 800ff4c:	425b      	negs	r3, r3
 800ff4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ff52:	486f      	ldr	r0, [pc, #444]	; (8010110 <_printf_i+0x21c>)
 800ff54:	220a      	movs	r2, #10
 800ff56:	e039      	b.n	800ffcc <_printf_i+0xd8>
 800ff58:	2973      	cmp	r1, #115	; 0x73
 800ff5a:	f000 809d 	beq.w	8010098 <_printf_i+0x1a4>
 800ff5e:	d808      	bhi.n	800ff72 <_printf_i+0x7e>
 800ff60:	296f      	cmp	r1, #111	; 0x6f
 800ff62:	d020      	beq.n	800ffa6 <_printf_i+0xb2>
 800ff64:	2970      	cmp	r1, #112	; 0x70
 800ff66:	d1dd      	bne.n	800ff24 <_printf_i+0x30>
 800ff68:	6823      	ldr	r3, [r4, #0]
 800ff6a:	f043 0320 	orr.w	r3, r3, #32
 800ff6e:	6023      	str	r3, [r4, #0]
 800ff70:	e003      	b.n	800ff7a <_printf_i+0x86>
 800ff72:	2975      	cmp	r1, #117	; 0x75
 800ff74:	d017      	beq.n	800ffa6 <_printf_i+0xb2>
 800ff76:	2978      	cmp	r1, #120	; 0x78
 800ff78:	d1d4      	bne.n	800ff24 <_printf_i+0x30>
 800ff7a:	2378      	movs	r3, #120	; 0x78
 800ff7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff80:	4864      	ldr	r0, [pc, #400]	; (8010114 <_printf_i+0x220>)
 800ff82:	e055      	b.n	8010030 <_printf_i+0x13c>
 800ff84:	6813      	ldr	r3, [r2, #0]
 800ff86:	1d19      	adds	r1, r3, #4
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	6011      	str	r1, [r2, #0]
 800ff8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff94:	2301      	movs	r3, #1
 800ff96:	e08c      	b.n	80100b2 <_printf_i+0x1be>
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	6011      	str	r1, [r2, #0]
 800ff9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ffa0:	bf18      	it	ne
 800ffa2:	b21b      	sxthne	r3, r3
 800ffa4:	e7cf      	b.n	800ff46 <_printf_i+0x52>
 800ffa6:	6813      	ldr	r3, [r2, #0]
 800ffa8:	6825      	ldr	r5, [r4, #0]
 800ffaa:	1d18      	adds	r0, r3, #4
 800ffac:	6010      	str	r0, [r2, #0]
 800ffae:	0628      	lsls	r0, r5, #24
 800ffb0:	d501      	bpl.n	800ffb6 <_printf_i+0xc2>
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	e002      	b.n	800ffbc <_printf_i+0xc8>
 800ffb6:	0668      	lsls	r0, r5, #25
 800ffb8:	d5fb      	bpl.n	800ffb2 <_printf_i+0xbe>
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	4854      	ldr	r0, [pc, #336]	; (8010110 <_printf_i+0x21c>)
 800ffbe:	296f      	cmp	r1, #111	; 0x6f
 800ffc0:	bf14      	ite	ne
 800ffc2:	220a      	movne	r2, #10
 800ffc4:	2208      	moveq	r2, #8
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ffcc:	6865      	ldr	r5, [r4, #4]
 800ffce:	60a5      	str	r5, [r4, #8]
 800ffd0:	2d00      	cmp	r5, #0
 800ffd2:	f2c0 8095 	blt.w	8010100 <_printf_i+0x20c>
 800ffd6:	6821      	ldr	r1, [r4, #0]
 800ffd8:	f021 0104 	bic.w	r1, r1, #4
 800ffdc:	6021      	str	r1, [r4, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d13d      	bne.n	801005e <_printf_i+0x16a>
 800ffe2:	2d00      	cmp	r5, #0
 800ffe4:	f040 808e 	bne.w	8010104 <_printf_i+0x210>
 800ffe8:	4665      	mov	r5, ip
 800ffea:	2a08      	cmp	r2, #8
 800ffec:	d10b      	bne.n	8010006 <_printf_i+0x112>
 800ffee:	6823      	ldr	r3, [r4, #0]
 800fff0:	07db      	lsls	r3, r3, #31
 800fff2:	d508      	bpl.n	8010006 <_printf_i+0x112>
 800fff4:	6923      	ldr	r3, [r4, #16]
 800fff6:	6862      	ldr	r2, [r4, #4]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	bfde      	ittt	le
 800fffc:	2330      	movle	r3, #48	; 0x30
 800fffe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010002:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010006:	ebac 0305 	sub.w	r3, ip, r5
 801000a:	6123      	str	r3, [r4, #16]
 801000c:	f8cd 8000 	str.w	r8, [sp]
 8010010:	463b      	mov	r3, r7
 8010012:	aa03      	add	r2, sp, #12
 8010014:	4621      	mov	r1, r4
 8010016:	4630      	mov	r0, r6
 8010018:	f7ff fef6 	bl	800fe08 <_printf_common>
 801001c:	3001      	adds	r0, #1
 801001e:	d14d      	bne.n	80100bc <_printf_i+0x1c8>
 8010020:	f04f 30ff 	mov.w	r0, #4294967295
 8010024:	b005      	add	sp, #20
 8010026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801002a:	4839      	ldr	r0, [pc, #228]	; (8010110 <_printf_i+0x21c>)
 801002c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010030:	6813      	ldr	r3, [r2, #0]
 8010032:	6821      	ldr	r1, [r4, #0]
 8010034:	1d1d      	adds	r5, r3, #4
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	6015      	str	r5, [r2, #0]
 801003a:	060a      	lsls	r2, r1, #24
 801003c:	d50b      	bpl.n	8010056 <_printf_i+0x162>
 801003e:	07ca      	lsls	r2, r1, #31
 8010040:	bf44      	itt	mi
 8010042:	f041 0120 	orrmi.w	r1, r1, #32
 8010046:	6021      	strmi	r1, [r4, #0]
 8010048:	b91b      	cbnz	r3, 8010052 <_printf_i+0x15e>
 801004a:	6822      	ldr	r2, [r4, #0]
 801004c:	f022 0220 	bic.w	r2, r2, #32
 8010050:	6022      	str	r2, [r4, #0]
 8010052:	2210      	movs	r2, #16
 8010054:	e7b7      	b.n	800ffc6 <_printf_i+0xd2>
 8010056:	064d      	lsls	r5, r1, #25
 8010058:	bf48      	it	mi
 801005a:	b29b      	uxthmi	r3, r3
 801005c:	e7ef      	b.n	801003e <_printf_i+0x14a>
 801005e:	4665      	mov	r5, ip
 8010060:	fbb3 f1f2 	udiv	r1, r3, r2
 8010064:	fb02 3311 	mls	r3, r2, r1, r3
 8010068:	5cc3      	ldrb	r3, [r0, r3]
 801006a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801006e:	460b      	mov	r3, r1
 8010070:	2900      	cmp	r1, #0
 8010072:	d1f5      	bne.n	8010060 <_printf_i+0x16c>
 8010074:	e7b9      	b.n	800ffea <_printf_i+0xf6>
 8010076:	6813      	ldr	r3, [r2, #0]
 8010078:	6825      	ldr	r5, [r4, #0]
 801007a:	6961      	ldr	r1, [r4, #20]
 801007c:	1d18      	adds	r0, r3, #4
 801007e:	6010      	str	r0, [r2, #0]
 8010080:	0628      	lsls	r0, r5, #24
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	d501      	bpl.n	801008a <_printf_i+0x196>
 8010086:	6019      	str	r1, [r3, #0]
 8010088:	e002      	b.n	8010090 <_printf_i+0x19c>
 801008a:	066a      	lsls	r2, r5, #25
 801008c:	d5fb      	bpl.n	8010086 <_printf_i+0x192>
 801008e:	8019      	strh	r1, [r3, #0]
 8010090:	2300      	movs	r3, #0
 8010092:	6123      	str	r3, [r4, #16]
 8010094:	4665      	mov	r5, ip
 8010096:	e7b9      	b.n	801000c <_printf_i+0x118>
 8010098:	6813      	ldr	r3, [r2, #0]
 801009a:	1d19      	adds	r1, r3, #4
 801009c:	6011      	str	r1, [r2, #0]
 801009e:	681d      	ldr	r5, [r3, #0]
 80100a0:	6862      	ldr	r2, [r4, #4]
 80100a2:	2100      	movs	r1, #0
 80100a4:	4628      	mov	r0, r5
 80100a6:	f7f0 f89b 	bl	80001e0 <memchr>
 80100aa:	b108      	cbz	r0, 80100b0 <_printf_i+0x1bc>
 80100ac:	1b40      	subs	r0, r0, r5
 80100ae:	6060      	str	r0, [r4, #4]
 80100b0:	6863      	ldr	r3, [r4, #4]
 80100b2:	6123      	str	r3, [r4, #16]
 80100b4:	2300      	movs	r3, #0
 80100b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100ba:	e7a7      	b.n	801000c <_printf_i+0x118>
 80100bc:	6923      	ldr	r3, [r4, #16]
 80100be:	462a      	mov	r2, r5
 80100c0:	4639      	mov	r1, r7
 80100c2:	4630      	mov	r0, r6
 80100c4:	47c0      	blx	r8
 80100c6:	3001      	adds	r0, #1
 80100c8:	d0aa      	beq.n	8010020 <_printf_i+0x12c>
 80100ca:	6823      	ldr	r3, [r4, #0]
 80100cc:	079b      	lsls	r3, r3, #30
 80100ce:	d413      	bmi.n	80100f8 <_printf_i+0x204>
 80100d0:	68e0      	ldr	r0, [r4, #12]
 80100d2:	9b03      	ldr	r3, [sp, #12]
 80100d4:	4298      	cmp	r0, r3
 80100d6:	bfb8      	it	lt
 80100d8:	4618      	movlt	r0, r3
 80100da:	e7a3      	b.n	8010024 <_printf_i+0x130>
 80100dc:	2301      	movs	r3, #1
 80100de:	464a      	mov	r2, r9
 80100e0:	4639      	mov	r1, r7
 80100e2:	4630      	mov	r0, r6
 80100e4:	47c0      	blx	r8
 80100e6:	3001      	adds	r0, #1
 80100e8:	d09a      	beq.n	8010020 <_printf_i+0x12c>
 80100ea:	3501      	adds	r5, #1
 80100ec:	68e3      	ldr	r3, [r4, #12]
 80100ee:	9a03      	ldr	r2, [sp, #12]
 80100f0:	1a9b      	subs	r3, r3, r2
 80100f2:	42ab      	cmp	r3, r5
 80100f4:	dcf2      	bgt.n	80100dc <_printf_i+0x1e8>
 80100f6:	e7eb      	b.n	80100d0 <_printf_i+0x1dc>
 80100f8:	2500      	movs	r5, #0
 80100fa:	f104 0919 	add.w	r9, r4, #25
 80100fe:	e7f5      	b.n	80100ec <_printf_i+0x1f8>
 8010100:	2b00      	cmp	r3, #0
 8010102:	d1ac      	bne.n	801005e <_printf_i+0x16a>
 8010104:	7803      	ldrb	r3, [r0, #0]
 8010106:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801010a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801010e:	e76c      	b.n	800ffea <_printf_i+0xf6>
 8010110:	08013822 	.word	0x08013822
 8010114:	08013833 	.word	0x08013833

08010118 <iprintf>:
 8010118:	b40f      	push	{r0, r1, r2, r3}
 801011a:	4b0a      	ldr	r3, [pc, #40]	; (8010144 <iprintf+0x2c>)
 801011c:	b513      	push	{r0, r1, r4, lr}
 801011e:	681c      	ldr	r4, [r3, #0]
 8010120:	b124      	cbz	r4, 801012c <iprintf+0x14>
 8010122:	69a3      	ldr	r3, [r4, #24]
 8010124:	b913      	cbnz	r3, 801012c <iprintf+0x14>
 8010126:	4620      	mov	r0, r4
 8010128:	f001 f916 	bl	8011358 <__sinit>
 801012c:	ab05      	add	r3, sp, #20
 801012e:	9a04      	ldr	r2, [sp, #16]
 8010130:	68a1      	ldr	r1, [r4, #8]
 8010132:	9301      	str	r3, [sp, #4]
 8010134:	4620      	mov	r0, r4
 8010136:	f001 fdcf 	bl	8011cd8 <_vfiprintf_r>
 801013a:	b002      	add	sp, #8
 801013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010140:	b004      	add	sp, #16
 8010142:	4770      	bx	lr
 8010144:	20001a88 	.word	0x20001a88

08010148 <_puts_r>:
 8010148:	b570      	push	{r4, r5, r6, lr}
 801014a:	460e      	mov	r6, r1
 801014c:	4605      	mov	r5, r0
 801014e:	b118      	cbz	r0, 8010158 <_puts_r+0x10>
 8010150:	6983      	ldr	r3, [r0, #24]
 8010152:	b90b      	cbnz	r3, 8010158 <_puts_r+0x10>
 8010154:	f001 f900 	bl	8011358 <__sinit>
 8010158:	69ab      	ldr	r3, [r5, #24]
 801015a:	68ac      	ldr	r4, [r5, #8]
 801015c:	b913      	cbnz	r3, 8010164 <_puts_r+0x1c>
 801015e:	4628      	mov	r0, r5
 8010160:	f001 f8fa 	bl	8011358 <__sinit>
 8010164:	4b23      	ldr	r3, [pc, #140]	; (80101f4 <_puts_r+0xac>)
 8010166:	429c      	cmp	r4, r3
 8010168:	d117      	bne.n	801019a <_puts_r+0x52>
 801016a:	686c      	ldr	r4, [r5, #4]
 801016c:	89a3      	ldrh	r3, [r4, #12]
 801016e:	071b      	lsls	r3, r3, #28
 8010170:	d51d      	bpl.n	80101ae <_puts_r+0x66>
 8010172:	6923      	ldr	r3, [r4, #16]
 8010174:	b1db      	cbz	r3, 80101ae <_puts_r+0x66>
 8010176:	3e01      	subs	r6, #1
 8010178:	68a3      	ldr	r3, [r4, #8]
 801017a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801017e:	3b01      	subs	r3, #1
 8010180:	60a3      	str	r3, [r4, #8]
 8010182:	b9e9      	cbnz	r1, 80101c0 <_puts_r+0x78>
 8010184:	2b00      	cmp	r3, #0
 8010186:	da2e      	bge.n	80101e6 <_puts_r+0x9e>
 8010188:	4622      	mov	r2, r4
 801018a:	210a      	movs	r1, #10
 801018c:	4628      	mov	r0, r5
 801018e:	f000 f8ed 	bl	801036c <__swbuf_r>
 8010192:	3001      	adds	r0, #1
 8010194:	d011      	beq.n	80101ba <_puts_r+0x72>
 8010196:	200a      	movs	r0, #10
 8010198:	e011      	b.n	80101be <_puts_r+0x76>
 801019a:	4b17      	ldr	r3, [pc, #92]	; (80101f8 <_puts_r+0xb0>)
 801019c:	429c      	cmp	r4, r3
 801019e:	d101      	bne.n	80101a4 <_puts_r+0x5c>
 80101a0:	68ac      	ldr	r4, [r5, #8]
 80101a2:	e7e3      	b.n	801016c <_puts_r+0x24>
 80101a4:	4b15      	ldr	r3, [pc, #84]	; (80101fc <_puts_r+0xb4>)
 80101a6:	429c      	cmp	r4, r3
 80101a8:	bf08      	it	eq
 80101aa:	68ec      	ldreq	r4, [r5, #12]
 80101ac:	e7de      	b.n	801016c <_puts_r+0x24>
 80101ae:	4621      	mov	r1, r4
 80101b0:	4628      	mov	r0, r5
 80101b2:	f000 f92d 	bl	8010410 <__swsetup_r>
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d0dd      	beq.n	8010176 <_puts_r+0x2e>
 80101ba:	f04f 30ff 	mov.w	r0, #4294967295
 80101be:	bd70      	pop	{r4, r5, r6, pc}
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	da04      	bge.n	80101ce <_puts_r+0x86>
 80101c4:	69a2      	ldr	r2, [r4, #24]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	dc06      	bgt.n	80101d8 <_puts_r+0x90>
 80101ca:	290a      	cmp	r1, #10
 80101cc:	d004      	beq.n	80101d8 <_puts_r+0x90>
 80101ce:	6823      	ldr	r3, [r4, #0]
 80101d0:	1c5a      	adds	r2, r3, #1
 80101d2:	6022      	str	r2, [r4, #0]
 80101d4:	7019      	strb	r1, [r3, #0]
 80101d6:	e7cf      	b.n	8010178 <_puts_r+0x30>
 80101d8:	4622      	mov	r2, r4
 80101da:	4628      	mov	r0, r5
 80101dc:	f000 f8c6 	bl	801036c <__swbuf_r>
 80101e0:	3001      	adds	r0, #1
 80101e2:	d1c9      	bne.n	8010178 <_puts_r+0x30>
 80101e4:	e7e9      	b.n	80101ba <_puts_r+0x72>
 80101e6:	6823      	ldr	r3, [r4, #0]
 80101e8:	200a      	movs	r0, #10
 80101ea:	1c5a      	adds	r2, r3, #1
 80101ec:	6022      	str	r2, [r4, #0]
 80101ee:	7018      	strb	r0, [r3, #0]
 80101f0:	e7e5      	b.n	80101be <_puts_r+0x76>
 80101f2:	bf00      	nop
 80101f4:	08013874 	.word	0x08013874
 80101f8:	08013894 	.word	0x08013894
 80101fc:	08013854 	.word	0x08013854

08010200 <puts>:
 8010200:	4b02      	ldr	r3, [pc, #8]	; (801020c <puts+0xc>)
 8010202:	4601      	mov	r1, r0
 8010204:	6818      	ldr	r0, [r3, #0]
 8010206:	f7ff bf9f 	b.w	8010148 <_puts_r>
 801020a:	bf00      	nop
 801020c:	20001a88 	.word	0x20001a88

08010210 <setvbuf>:
 8010210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010214:	461d      	mov	r5, r3
 8010216:	4b51      	ldr	r3, [pc, #324]	; (801035c <setvbuf+0x14c>)
 8010218:	681e      	ldr	r6, [r3, #0]
 801021a:	4604      	mov	r4, r0
 801021c:	460f      	mov	r7, r1
 801021e:	4690      	mov	r8, r2
 8010220:	b126      	cbz	r6, 801022c <setvbuf+0x1c>
 8010222:	69b3      	ldr	r3, [r6, #24]
 8010224:	b913      	cbnz	r3, 801022c <setvbuf+0x1c>
 8010226:	4630      	mov	r0, r6
 8010228:	f001 f896 	bl	8011358 <__sinit>
 801022c:	4b4c      	ldr	r3, [pc, #304]	; (8010360 <setvbuf+0x150>)
 801022e:	429c      	cmp	r4, r3
 8010230:	d152      	bne.n	80102d8 <setvbuf+0xc8>
 8010232:	6874      	ldr	r4, [r6, #4]
 8010234:	f1b8 0f02 	cmp.w	r8, #2
 8010238:	d006      	beq.n	8010248 <setvbuf+0x38>
 801023a:	f1b8 0f01 	cmp.w	r8, #1
 801023e:	f200 8089 	bhi.w	8010354 <setvbuf+0x144>
 8010242:	2d00      	cmp	r5, #0
 8010244:	f2c0 8086 	blt.w	8010354 <setvbuf+0x144>
 8010248:	4621      	mov	r1, r4
 801024a:	4630      	mov	r0, r6
 801024c:	f001 f81a 	bl	8011284 <_fflush_r>
 8010250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010252:	b141      	cbz	r1, 8010266 <setvbuf+0x56>
 8010254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010258:	4299      	cmp	r1, r3
 801025a:	d002      	beq.n	8010262 <setvbuf+0x52>
 801025c:	4630      	mov	r0, r6
 801025e:	f001 fc69 	bl	8011b34 <_free_r>
 8010262:	2300      	movs	r3, #0
 8010264:	6363      	str	r3, [r4, #52]	; 0x34
 8010266:	2300      	movs	r3, #0
 8010268:	61a3      	str	r3, [r4, #24]
 801026a:	6063      	str	r3, [r4, #4]
 801026c:	89a3      	ldrh	r3, [r4, #12]
 801026e:	061b      	lsls	r3, r3, #24
 8010270:	d503      	bpl.n	801027a <setvbuf+0x6a>
 8010272:	6921      	ldr	r1, [r4, #16]
 8010274:	4630      	mov	r0, r6
 8010276:	f001 fc5d 	bl	8011b34 <_free_r>
 801027a:	89a3      	ldrh	r3, [r4, #12]
 801027c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8010280:	f023 0303 	bic.w	r3, r3, #3
 8010284:	f1b8 0f02 	cmp.w	r8, #2
 8010288:	81a3      	strh	r3, [r4, #12]
 801028a:	d05d      	beq.n	8010348 <setvbuf+0x138>
 801028c:	ab01      	add	r3, sp, #4
 801028e:	466a      	mov	r2, sp
 8010290:	4621      	mov	r1, r4
 8010292:	4630      	mov	r0, r6
 8010294:	f001 f8f8 	bl	8011488 <__swhatbuf_r>
 8010298:	89a3      	ldrh	r3, [r4, #12]
 801029a:	4318      	orrs	r0, r3
 801029c:	81a0      	strh	r0, [r4, #12]
 801029e:	bb2d      	cbnz	r5, 80102ec <setvbuf+0xdc>
 80102a0:	9d00      	ldr	r5, [sp, #0]
 80102a2:	4628      	mov	r0, r5
 80102a4:	f001 f954 	bl	8011550 <malloc>
 80102a8:	4607      	mov	r7, r0
 80102aa:	2800      	cmp	r0, #0
 80102ac:	d14e      	bne.n	801034c <setvbuf+0x13c>
 80102ae:	f8dd 9000 	ldr.w	r9, [sp]
 80102b2:	45a9      	cmp	r9, r5
 80102b4:	d13c      	bne.n	8010330 <setvbuf+0x120>
 80102b6:	f04f 30ff 	mov.w	r0, #4294967295
 80102ba:	89a3      	ldrh	r3, [r4, #12]
 80102bc:	f043 0302 	orr.w	r3, r3, #2
 80102c0:	81a3      	strh	r3, [r4, #12]
 80102c2:	2300      	movs	r3, #0
 80102c4:	60a3      	str	r3, [r4, #8]
 80102c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80102ca:	6023      	str	r3, [r4, #0]
 80102cc:	6123      	str	r3, [r4, #16]
 80102ce:	2301      	movs	r3, #1
 80102d0:	6163      	str	r3, [r4, #20]
 80102d2:	b003      	add	sp, #12
 80102d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102d8:	4b22      	ldr	r3, [pc, #136]	; (8010364 <setvbuf+0x154>)
 80102da:	429c      	cmp	r4, r3
 80102dc:	d101      	bne.n	80102e2 <setvbuf+0xd2>
 80102de:	68b4      	ldr	r4, [r6, #8]
 80102e0:	e7a8      	b.n	8010234 <setvbuf+0x24>
 80102e2:	4b21      	ldr	r3, [pc, #132]	; (8010368 <setvbuf+0x158>)
 80102e4:	429c      	cmp	r4, r3
 80102e6:	bf08      	it	eq
 80102e8:	68f4      	ldreq	r4, [r6, #12]
 80102ea:	e7a3      	b.n	8010234 <setvbuf+0x24>
 80102ec:	2f00      	cmp	r7, #0
 80102ee:	d0d8      	beq.n	80102a2 <setvbuf+0x92>
 80102f0:	69b3      	ldr	r3, [r6, #24]
 80102f2:	b913      	cbnz	r3, 80102fa <setvbuf+0xea>
 80102f4:	4630      	mov	r0, r6
 80102f6:	f001 f82f 	bl	8011358 <__sinit>
 80102fa:	f1b8 0f01 	cmp.w	r8, #1
 80102fe:	bf08      	it	eq
 8010300:	89a3      	ldrheq	r3, [r4, #12]
 8010302:	6027      	str	r7, [r4, #0]
 8010304:	bf04      	itt	eq
 8010306:	f043 0301 	orreq.w	r3, r3, #1
 801030a:	81a3      	strheq	r3, [r4, #12]
 801030c:	89a3      	ldrh	r3, [r4, #12]
 801030e:	f013 0008 	ands.w	r0, r3, #8
 8010312:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8010316:	d01b      	beq.n	8010350 <setvbuf+0x140>
 8010318:	f013 0001 	ands.w	r0, r3, #1
 801031c:	bf18      	it	ne
 801031e:	426d      	negne	r5, r5
 8010320:	f04f 0300 	mov.w	r3, #0
 8010324:	bf1d      	ittte	ne
 8010326:	60a3      	strne	r3, [r4, #8]
 8010328:	61a5      	strne	r5, [r4, #24]
 801032a:	4618      	movne	r0, r3
 801032c:	60a5      	streq	r5, [r4, #8]
 801032e:	e7d0      	b.n	80102d2 <setvbuf+0xc2>
 8010330:	4648      	mov	r0, r9
 8010332:	f001 f90d 	bl	8011550 <malloc>
 8010336:	4607      	mov	r7, r0
 8010338:	2800      	cmp	r0, #0
 801033a:	d0bc      	beq.n	80102b6 <setvbuf+0xa6>
 801033c:	89a3      	ldrh	r3, [r4, #12]
 801033e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010342:	81a3      	strh	r3, [r4, #12]
 8010344:	464d      	mov	r5, r9
 8010346:	e7d3      	b.n	80102f0 <setvbuf+0xe0>
 8010348:	2000      	movs	r0, #0
 801034a:	e7b6      	b.n	80102ba <setvbuf+0xaa>
 801034c:	46a9      	mov	r9, r5
 801034e:	e7f5      	b.n	801033c <setvbuf+0x12c>
 8010350:	60a0      	str	r0, [r4, #8]
 8010352:	e7be      	b.n	80102d2 <setvbuf+0xc2>
 8010354:	f04f 30ff 	mov.w	r0, #4294967295
 8010358:	e7bb      	b.n	80102d2 <setvbuf+0xc2>
 801035a:	bf00      	nop
 801035c:	20001a88 	.word	0x20001a88
 8010360:	08013874 	.word	0x08013874
 8010364:	08013894 	.word	0x08013894
 8010368:	08013854 	.word	0x08013854

0801036c <__swbuf_r>:
 801036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801036e:	460e      	mov	r6, r1
 8010370:	4614      	mov	r4, r2
 8010372:	4605      	mov	r5, r0
 8010374:	b118      	cbz	r0, 801037e <__swbuf_r+0x12>
 8010376:	6983      	ldr	r3, [r0, #24]
 8010378:	b90b      	cbnz	r3, 801037e <__swbuf_r+0x12>
 801037a:	f000 ffed 	bl	8011358 <__sinit>
 801037e:	4b21      	ldr	r3, [pc, #132]	; (8010404 <__swbuf_r+0x98>)
 8010380:	429c      	cmp	r4, r3
 8010382:	d12a      	bne.n	80103da <__swbuf_r+0x6e>
 8010384:	686c      	ldr	r4, [r5, #4]
 8010386:	69a3      	ldr	r3, [r4, #24]
 8010388:	60a3      	str	r3, [r4, #8]
 801038a:	89a3      	ldrh	r3, [r4, #12]
 801038c:	071a      	lsls	r2, r3, #28
 801038e:	d52e      	bpl.n	80103ee <__swbuf_r+0x82>
 8010390:	6923      	ldr	r3, [r4, #16]
 8010392:	b363      	cbz	r3, 80103ee <__swbuf_r+0x82>
 8010394:	6923      	ldr	r3, [r4, #16]
 8010396:	6820      	ldr	r0, [r4, #0]
 8010398:	1ac0      	subs	r0, r0, r3
 801039a:	6963      	ldr	r3, [r4, #20]
 801039c:	b2f6      	uxtb	r6, r6
 801039e:	4283      	cmp	r3, r0
 80103a0:	4637      	mov	r7, r6
 80103a2:	dc04      	bgt.n	80103ae <__swbuf_r+0x42>
 80103a4:	4621      	mov	r1, r4
 80103a6:	4628      	mov	r0, r5
 80103a8:	f000 ff6c 	bl	8011284 <_fflush_r>
 80103ac:	bb28      	cbnz	r0, 80103fa <__swbuf_r+0x8e>
 80103ae:	68a3      	ldr	r3, [r4, #8]
 80103b0:	3b01      	subs	r3, #1
 80103b2:	60a3      	str	r3, [r4, #8]
 80103b4:	6823      	ldr	r3, [r4, #0]
 80103b6:	1c5a      	adds	r2, r3, #1
 80103b8:	6022      	str	r2, [r4, #0]
 80103ba:	701e      	strb	r6, [r3, #0]
 80103bc:	6963      	ldr	r3, [r4, #20]
 80103be:	3001      	adds	r0, #1
 80103c0:	4283      	cmp	r3, r0
 80103c2:	d004      	beq.n	80103ce <__swbuf_r+0x62>
 80103c4:	89a3      	ldrh	r3, [r4, #12]
 80103c6:	07db      	lsls	r3, r3, #31
 80103c8:	d519      	bpl.n	80103fe <__swbuf_r+0x92>
 80103ca:	2e0a      	cmp	r6, #10
 80103cc:	d117      	bne.n	80103fe <__swbuf_r+0x92>
 80103ce:	4621      	mov	r1, r4
 80103d0:	4628      	mov	r0, r5
 80103d2:	f000 ff57 	bl	8011284 <_fflush_r>
 80103d6:	b190      	cbz	r0, 80103fe <__swbuf_r+0x92>
 80103d8:	e00f      	b.n	80103fa <__swbuf_r+0x8e>
 80103da:	4b0b      	ldr	r3, [pc, #44]	; (8010408 <__swbuf_r+0x9c>)
 80103dc:	429c      	cmp	r4, r3
 80103de:	d101      	bne.n	80103e4 <__swbuf_r+0x78>
 80103e0:	68ac      	ldr	r4, [r5, #8]
 80103e2:	e7d0      	b.n	8010386 <__swbuf_r+0x1a>
 80103e4:	4b09      	ldr	r3, [pc, #36]	; (801040c <__swbuf_r+0xa0>)
 80103e6:	429c      	cmp	r4, r3
 80103e8:	bf08      	it	eq
 80103ea:	68ec      	ldreq	r4, [r5, #12]
 80103ec:	e7cb      	b.n	8010386 <__swbuf_r+0x1a>
 80103ee:	4621      	mov	r1, r4
 80103f0:	4628      	mov	r0, r5
 80103f2:	f000 f80d 	bl	8010410 <__swsetup_r>
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d0cc      	beq.n	8010394 <__swbuf_r+0x28>
 80103fa:	f04f 37ff 	mov.w	r7, #4294967295
 80103fe:	4638      	mov	r0, r7
 8010400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010402:	bf00      	nop
 8010404:	08013874 	.word	0x08013874
 8010408:	08013894 	.word	0x08013894
 801040c:	08013854 	.word	0x08013854

08010410 <__swsetup_r>:
 8010410:	4b32      	ldr	r3, [pc, #200]	; (80104dc <__swsetup_r+0xcc>)
 8010412:	b570      	push	{r4, r5, r6, lr}
 8010414:	681d      	ldr	r5, [r3, #0]
 8010416:	4606      	mov	r6, r0
 8010418:	460c      	mov	r4, r1
 801041a:	b125      	cbz	r5, 8010426 <__swsetup_r+0x16>
 801041c:	69ab      	ldr	r3, [r5, #24]
 801041e:	b913      	cbnz	r3, 8010426 <__swsetup_r+0x16>
 8010420:	4628      	mov	r0, r5
 8010422:	f000 ff99 	bl	8011358 <__sinit>
 8010426:	4b2e      	ldr	r3, [pc, #184]	; (80104e0 <__swsetup_r+0xd0>)
 8010428:	429c      	cmp	r4, r3
 801042a:	d10f      	bne.n	801044c <__swsetup_r+0x3c>
 801042c:	686c      	ldr	r4, [r5, #4]
 801042e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010432:	b29a      	uxth	r2, r3
 8010434:	0715      	lsls	r5, r2, #28
 8010436:	d42c      	bmi.n	8010492 <__swsetup_r+0x82>
 8010438:	06d0      	lsls	r0, r2, #27
 801043a:	d411      	bmi.n	8010460 <__swsetup_r+0x50>
 801043c:	2209      	movs	r2, #9
 801043e:	6032      	str	r2, [r6, #0]
 8010440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010444:	81a3      	strh	r3, [r4, #12]
 8010446:	f04f 30ff 	mov.w	r0, #4294967295
 801044a:	e03e      	b.n	80104ca <__swsetup_r+0xba>
 801044c:	4b25      	ldr	r3, [pc, #148]	; (80104e4 <__swsetup_r+0xd4>)
 801044e:	429c      	cmp	r4, r3
 8010450:	d101      	bne.n	8010456 <__swsetup_r+0x46>
 8010452:	68ac      	ldr	r4, [r5, #8]
 8010454:	e7eb      	b.n	801042e <__swsetup_r+0x1e>
 8010456:	4b24      	ldr	r3, [pc, #144]	; (80104e8 <__swsetup_r+0xd8>)
 8010458:	429c      	cmp	r4, r3
 801045a:	bf08      	it	eq
 801045c:	68ec      	ldreq	r4, [r5, #12]
 801045e:	e7e6      	b.n	801042e <__swsetup_r+0x1e>
 8010460:	0751      	lsls	r1, r2, #29
 8010462:	d512      	bpl.n	801048a <__swsetup_r+0x7a>
 8010464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010466:	b141      	cbz	r1, 801047a <__swsetup_r+0x6a>
 8010468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801046c:	4299      	cmp	r1, r3
 801046e:	d002      	beq.n	8010476 <__swsetup_r+0x66>
 8010470:	4630      	mov	r0, r6
 8010472:	f001 fb5f 	bl	8011b34 <_free_r>
 8010476:	2300      	movs	r3, #0
 8010478:	6363      	str	r3, [r4, #52]	; 0x34
 801047a:	89a3      	ldrh	r3, [r4, #12]
 801047c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010480:	81a3      	strh	r3, [r4, #12]
 8010482:	2300      	movs	r3, #0
 8010484:	6063      	str	r3, [r4, #4]
 8010486:	6923      	ldr	r3, [r4, #16]
 8010488:	6023      	str	r3, [r4, #0]
 801048a:	89a3      	ldrh	r3, [r4, #12]
 801048c:	f043 0308 	orr.w	r3, r3, #8
 8010490:	81a3      	strh	r3, [r4, #12]
 8010492:	6923      	ldr	r3, [r4, #16]
 8010494:	b94b      	cbnz	r3, 80104aa <__swsetup_r+0x9a>
 8010496:	89a3      	ldrh	r3, [r4, #12]
 8010498:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801049c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104a0:	d003      	beq.n	80104aa <__swsetup_r+0x9a>
 80104a2:	4621      	mov	r1, r4
 80104a4:	4630      	mov	r0, r6
 80104a6:	f001 f813 	bl	80114d0 <__smakebuf_r>
 80104aa:	89a2      	ldrh	r2, [r4, #12]
 80104ac:	f012 0301 	ands.w	r3, r2, #1
 80104b0:	d00c      	beq.n	80104cc <__swsetup_r+0xbc>
 80104b2:	2300      	movs	r3, #0
 80104b4:	60a3      	str	r3, [r4, #8]
 80104b6:	6963      	ldr	r3, [r4, #20]
 80104b8:	425b      	negs	r3, r3
 80104ba:	61a3      	str	r3, [r4, #24]
 80104bc:	6923      	ldr	r3, [r4, #16]
 80104be:	b953      	cbnz	r3, 80104d6 <__swsetup_r+0xc6>
 80104c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80104c8:	d1ba      	bne.n	8010440 <__swsetup_r+0x30>
 80104ca:	bd70      	pop	{r4, r5, r6, pc}
 80104cc:	0792      	lsls	r2, r2, #30
 80104ce:	bf58      	it	pl
 80104d0:	6963      	ldrpl	r3, [r4, #20]
 80104d2:	60a3      	str	r3, [r4, #8]
 80104d4:	e7f2      	b.n	80104bc <__swsetup_r+0xac>
 80104d6:	2000      	movs	r0, #0
 80104d8:	e7f7      	b.n	80104ca <__swsetup_r+0xba>
 80104da:	bf00      	nop
 80104dc:	20001a88 	.word	0x20001a88
 80104e0:	08013874 	.word	0x08013874
 80104e4:	08013894 	.word	0x08013894
 80104e8:	08013854 	.word	0x08013854

080104ec <quorem>:
 80104ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f0:	6903      	ldr	r3, [r0, #16]
 80104f2:	690c      	ldr	r4, [r1, #16]
 80104f4:	42a3      	cmp	r3, r4
 80104f6:	4680      	mov	r8, r0
 80104f8:	f2c0 8082 	blt.w	8010600 <quorem+0x114>
 80104fc:	3c01      	subs	r4, #1
 80104fe:	f101 0714 	add.w	r7, r1, #20
 8010502:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010506:	f100 0614 	add.w	r6, r0, #20
 801050a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801050e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010512:	eb06 030c 	add.w	r3, r6, ip
 8010516:	3501      	adds	r5, #1
 8010518:	eb07 090c 	add.w	r9, r7, ip
 801051c:	9301      	str	r3, [sp, #4]
 801051e:	fbb0 f5f5 	udiv	r5, r0, r5
 8010522:	b395      	cbz	r5, 801058a <quorem+0x9e>
 8010524:	f04f 0a00 	mov.w	sl, #0
 8010528:	4638      	mov	r0, r7
 801052a:	46b6      	mov	lr, r6
 801052c:	46d3      	mov	fp, sl
 801052e:	f850 2b04 	ldr.w	r2, [r0], #4
 8010532:	b293      	uxth	r3, r2
 8010534:	fb05 a303 	mla	r3, r5, r3, sl
 8010538:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801053c:	b29b      	uxth	r3, r3
 801053e:	ebab 0303 	sub.w	r3, fp, r3
 8010542:	0c12      	lsrs	r2, r2, #16
 8010544:	f8de b000 	ldr.w	fp, [lr]
 8010548:	fb05 a202 	mla	r2, r5, r2, sl
 801054c:	fa13 f38b 	uxtah	r3, r3, fp
 8010550:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010554:	fa1f fb82 	uxth.w	fp, r2
 8010558:	f8de 2000 	ldr.w	r2, [lr]
 801055c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010564:	b29b      	uxth	r3, r3
 8010566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801056a:	4581      	cmp	r9, r0
 801056c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010570:	f84e 3b04 	str.w	r3, [lr], #4
 8010574:	d2db      	bcs.n	801052e <quorem+0x42>
 8010576:	f856 300c 	ldr.w	r3, [r6, ip]
 801057a:	b933      	cbnz	r3, 801058a <quorem+0x9e>
 801057c:	9b01      	ldr	r3, [sp, #4]
 801057e:	3b04      	subs	r3, #4
 8010580:	429e      	cmp	r6, r3
 8010582:	461a      	mov	r2, r3
 8010584:	d330      	bcc.n	80105e8 <quorem+0xfc>
 8010586:	f8c8 4010 	str.w	r4, [r8, #16]
 801058a:	4640      	mov	r0, r8
 801058c:	f001 f9fe 	bl	801198c <__mcmp>
 8010590:	2800      	cmp	r0, #0
 8010592:	db25      	blt.n	80105e0 <quorem+0xf4>
 8010594:	3501      	adds	r5, #1
 8010596:	4630      	mov	r0, r6
 8010598:	f04f 0c00 	mov.w	ip, #0
 801059c:	f857 2b04 	ldr.w	r2, [r7], #4
 80105a0:	f8d0 e000 	ldr.w	lr, [r0]
 80105a4:	b293      	uxth	r3, r2
 80105a6:	ebac 0303 	sub.w	r3, ip, r3
 80105aa:	0c12      	lsrs	r2, r2, #16
 80105ac:	fa13 f38e 	uxtah	r3, r3, lr
 80105b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80105b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80105b8:	b29b      	uxth	r3, r3
 80105ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105be:	45b9      	cmp	r9, r7
 80105c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80105c4:	f840 3b04 	str.w	r3, [r0], #4
 80105c8:	d2e8      	bcs.n	801059c <quorem+0xb0>
 80105ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80105ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80105d2:	b92a      	cbnz	r2, 80105e0 <quorem+0xf4>
 80105d4:	3b04      	subs	r3, #4
 80105d6:	429e      	cmp	r6, r3
 80105d8:	461a      	mov	r2, r3
 80105da:	d30b      	bcc.n	80105f4 <quorem+0x108>
 80105dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80105e0:	4628      	mov	r0, r5
 80105e2:	b003      	add	sp, #12
 80105e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e8:	6812      	ldr	r2, [r2, #0]
 80105ea:	3b04      	subs	r3, #4
 80105ec:	2a00      	cmp	r2, #0
 80105ee:	d1ca      	bne.n	8010586 <quorem+0x9a>
 80105f0:	3c01      	subs	r4, #1
 80105f2:	e7c5      	b.n	8010580 <quorem+0x94>
 80105f4:	6812      	ldr	r2, [r2, #0]
 80105f6:	3b04      	subs	r3, #4
 80105f8:	2a00      	cmp	r2, #0
 80105fa:	d1ef      	bne.n	80105dc <quorem+0xf0>
 80105fc:	3c01      	subs	r4, #1
 80105fe:	e7ea      	b.n	80105d6 <quorem+0xea>
 8010600:	2000      	movs	r0, #0
 8010602:	e7ee      	b.n	80105e2 <quorem+0xf6>
 8010604:	0000      	movs	r0, r0
	...

08010608 <_dtoa_r>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	ec57 6b10 	vmov	r6, r7, d0
 8010610:	b097      	sub	sp, #92	; 0x5c
 8010612:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010614:	9106      	str	r1, [sp, #24]
 8010616:	4604      	mov	r4, r0
 8010618:	920b      	str	r2, [sp, #44]	; 0x2c
 801061a:	9312      	str	r3, [sp, #72]	; 0x48
 801061c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010620:	e9cd 6700 	strd	r6, r7, [sp]
 8010624:	b93d      	cbnz	r5, 8010636 <_dtoa_r+0x2e>
 8010626:	2010      	movs	r0, #16
 8010628:	f000 ff92 	bl	8011550 <malloc>
 801062c:	6260      	str	r0, [r4, #36]	; 0x24
 801062e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010632:	6005      	str	r5, [r0, #0]
 8010634:	60c5      	str	r5, [r0, #12]
 8010636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010638:	6819      	ldr	r1, [r3, #0]
 801063a:	b151      	cbz	r1, 8010652 <_dtoa_r+0x4a>
 801063c:	685a      	ldr	r2, [r3, #4]
 801063e:	604a      	str	r2, [r1, #4]
 8010640:	2301      	movs	r3, #1
 8010642:	4093      	lsls	r3, r2
 8010644:	608b      	str	r3, [r1, #8]
 8010646:	4620      	mov	r0, r4
 8010648:	f000 ffbe 	bl	80115c8 <_Bfree>
 801064c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801064e:	2200      	movs	r2, #0
 8010650:	601a      	str	r2, [r3, #0]
 8010652:	1e3b      	subs	r3, r7, #0
 8010654:	bfbb      	ittet	lt
 8010656:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801065a:	9301      	strlt	r3, [sp, #4]
 801065c:	2300      	movge	r3, #0
 801065e:	2201      	movlt	r2, #1
 8010660:	bfac      	ite	ge
 8010662:	f8c8 3000 	strge.w	r3, [r8]
 8010666:	f8c8 2000 	strlt.w	r2, [r8]
 801066a:	4baf      	ldr	r3, [pc, #700]	; (8010928 <_dtoa_r+0x320>)
 801066c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010670:	ea33 0308 	bics.w	r3, r3, r8
 8010674:	d114      	bne.n	80106a0 <_dtoa_r+0x98>
 8010676:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010678:	f242 730f 	movw	r3, #9999	; 0x270f
 801067c:	6013      	str	r3, [r2, #0]
 801067e:	9b00      	ldr	r3, [sp, #0]
 8010680:	b923      	cbnz	r3, 801068c <_dtoa_r+0x84>
 8010682:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010686:	2800      	cmp	r0, #0
 8010688:	f000 8542 	beq.w	8011110 <_dtoa_r+0xb08>
 801068c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801068e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801093c <_dtoa_r+0x334>
 8010692:	2b00      	cmp	r3, #0
 8010694:	f000 8544 	beq.w	8011120 <_dtoa_r+0xb18>
 8010698:	f10b 0303 	add.w	r3, fp, #3
 801069c:	f000 bd3e 	b.w	801111c <_dtoa_r+0xb14>
 80106a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80106a4:	2200      	movs	r2, #0
 80106a6:	2300      	movs	r3, #0
 80106a8:	4630      	mov	r0, r6
 80106aa:	4639      	mov	r1, r7
 80106ac:	f7f0 fa0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80106b0:	4681      	mov	r9, r0
 80106b2:	b168      	cbz	r0, 80106d0 <_dtoa_r+0xc8>
 80106b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80106b6:	2301      	movs	r3, #1
 80106b8:	6013      	str	r3, [r2, #0]
 80106ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f000 8524 	beq.w	801110a <_dtoa_r+0xb02>
 80106c2:	4b9a      	ldr	r3, [pc, #616]	; (801092c <_dtoa_r+0x324>)
 80106c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80106c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80106ca:	6013      	str	r3, [r2, #0]
 80106cc:	f000 bd28 	b.w	8011120 <_dtoa_r+0xb18>
 80106d0:	aa14      	add	r2, sp, #80	; 0x50
 80106d2:	a915      	add	r1, sp, #84	; 0x54
 80106d4:	ec47 6b10 	vmov	d0, r6, r7
 80106d8:	4620      	mov	r0, r4
 80106da:	f001 f9ce 	bl	8011a7a <__d2b>
 80106de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80106e2:	9004      	str	r0, [sp, #16]
 80106e4:	2d00      	cmp	r5, #0
 80106e6:	d07c      	beq.n	80107e2 <_dtoa_r+0x1da>
 80106e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80106ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80106f0:	46b2      	mov	sl, r6
 80106f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80106f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80106fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80106fe:	2200      	movs	r2, #0
 8010700:	4b8b      	ldr	r3, [pc, #556]	; (8010930 <_dtoa_r+0x328>)
 8010702:	4650      	mov	r0, sl
 8010704:	4659      	mov	r1, fp
 8010706:	f7ef fdbf 	bl	8000288 <__aeabi_dsub>
 801070a:	a381      	add	r3, pc, #516	; (adr r3, 8010910 <_dtoa_r+0x308>)
 801070c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010710:	f7ef ff72 	bl	80005f8 <__aeabi_dmul>
 8010714:	a380      	add	r3, pc, #512	; (adr r3, 8010918 <_dtoa_r+0x310>)
 8010716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071a:	f7ef fdb7 	bl	800028c <__adddf3>
 801071e:	4606      	mov	r6, r0
 8010720:	4628      	mov	r0, r5
 8010722:	460f      	mov	r7, r1
 8010724:	f7ef fefe 	bl	8000524 <__aeabi_i2d>
 8010728:	a37d      	add	r3, pc, #500	; (adr r3, 8010920 <_dtoa_r+0x318>)
 801072a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072e:	f7ef ff63 	bl	80005f8 <__aeabi_dmul>
 8010732:	4602      	mov	r2, r0
 8010734:	460b      	mov	r3, r1
 8010736:	4630      	mov	r0, r6
 8010738:	4639      	mov	r1, r7
 801073a:	f7ef fda7 	bl	800028c <__adddf3>
 801073e:	4606      	mov	r6, r0
 8010740:	460f      	mov	r7, r1
 8010742:	f7f0 fa09 	bl	8000b58 <__aeabi_d2iz>
 8010746:	2200      	movs	r2, #0
 8010748:	4682      	mov	sl, r0
 801074a:	2300      	movs	r3, #0
 801074c:	4630      	mov	r0, r6
 801074e:	4639      	mov	r1, r7
 8010750:	f7f0 f9c4 	bl	8000adc <__aeabi_dcmplt>
 8010754:	b148      	cbz	r0, 801076a <_dtoa_r+0x162>
 8010756:	4650      	mov	r0, sl
 8010758:	f7ef fee4 	bl	8000524 <__aeabi_i2d>
 801075c:	4632      	mov	r2, r6
 801075e:	463b      	mov	r3, r7
 8010760:	f7f0 f9b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010764:	b908      	cbnz	r0, 801076a <_dtoa_r+0x162>
 8010766:	f10a 3aff 	add.w	sl, sl, #4294967295
 801076a:	f1ba 0f16 	cmp.w	sl, #22
 801076e:	d859      	bhi.n	8010824 <_dtoa_r+0x21c>
 8010770:	4970      	ldr	r1, [pc, #448]	; (8010934 <_dtoa_r+0x32c>)
 8010772:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010776:	e9dd 2300 	ldrd	r2, r3, [sp]
 801077a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801077e:	f7f0 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 8010782:	2800      	cmp	r0, #0
 8010784:	d050      	beq.n	8010828 <_dtoa_r+0x220>
 8010786:	f10a 3aff 	add.w	sl, sl, #4294967295
 801078a:	2300      	movs	r3, #0
 801078c:	930f      	str	r3, [sp, #60]	; 0x3c
 801078e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010790:	1b5d      	subs	r5, r3, r5
 8010792:	f1b5 0801 	subs.w	r8, r5, #1
 8010796:	bf49      	itett	mi
 8010798:	f1c5 0301 	rsbmi	r3, r5, #1
 801079c:	2300      	movpl	r3, #0
 801079e:	9305      	strmi	r3, [sp, #20]
 80107a0:	f04f 0800 	movmi.w	r8, #0
 80107a4:	bf58      	it	pl
 80107a6:	9305      	strpl	r3, [sp, #20]
 80107a8:	f1ba 0f00 	cmp.w	sl, #0
 80107ac:	db3e      	blt.n	801082c <_dtoa_r+0x224>
 80107ae:	2300      	movs	r3, #0
 80107b0:	44d0      	add	r8, sl
 80107b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80107b6:	9307      	str	r3, [sp, #28]
 80107b8:	9b06      	ldr	r3, [sp, #24]
 80107ba:	2b09      	cmp	r3, #9
 80107bc:	f200 8090 	bhi.w	80108e0 <_dtoa_r+0x2d8>
 80107c0:	2b05      	cmp	r3, #5
 80107c2:	bfc4      	itt	gt
 80107c4:	3b04      	subgt	r3, #4
 80107c6:	9306      	strgt	r3, [sp, #24]
 80107c8:	9b06      	ldr	r3, [sp, #24]
 80107ca:	f1a3 0302 	sub.w	r3, r3, #2
 80107ce:	bfcc      	ite	gt
 80107d0:	2500      	movgt	r5, #0
 80107d2:	2501      	movle	r5, #1
 80107d4:	2b03      	cmp	r3, #3
 80107d6:	f200 808f 	bhi.w	80108f8 <_dtoa_r+0x2f0>
 80107da:	e8df f003 	tbb	[pc, r3]
 80107de:	7f7d      	.short	0x7f7d
 80107e0:	7131      	.short	0x7131
 80107e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80107e6:	441d      	add	r5, r3
 80107e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80107ec:	2820      	cmp	r0, #32
 80107ee:	dd13      	ble.n	8010818 <_dtoa_r+0x210>
 80107f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80107f4:	9b00      	ldr	r3, [sp, #0]
 80107f6:	fa08 f800 	lsl.w	r8, r8, r0
 80107fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80107fe:	fa23 f000 	lsr.w	r0, r3, r0
 8010802:	ea48 0000 	orr.w	r0, r8, r0
 8010806:	f7ef fe7d 	bl	8000504 <__aeabi_ui2d>
 801080a:	2301      	movs	r3, #1
 801080c:	4682      	mov	sl, r0
 801080e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8010812:	3d01      	subs	r5, #1
 8010814:	9313      	str	r3, [sp, #76]	; 0x4c
 8010816:	e772      	b.n	80106fe <_dtoa_r+0xf6>
 8010818:	9b00      	ldr	r3, [sp, #0]
 801081a:	f1c0 0020 	rsb	r0, r0, #32
 801081e:	fa03 f000 	lsl.w	r0, r3, r0
 8010822:	e7f0      	b.n	8010806 <_dtoa_r+0x1fe>
 8010824:	2301      	movs	r3, #1
 8010826:	e7b1      	b.n	801078c <_dtoa_r+0x184>
 8010828:	900f      	str	r0, [sp, #60]	; 0x3c
 801082a:	e7b0      	b.n	801078e <_dtoa_r+0x186>
 801082c:	9b05      	ldr	r3, [sp, #20]
 801082e:	eba3 030a 	sub.w	r3, r3, sl
 8010832:	9305      	str	r3, [sp, #20]
 8010834:	f1ca 0300 	rsb	r3, sl, #0
 8010838:	9307      	str	r3, [sp, #28]
 801083a:	2300      	movs	r3, #0
 801083c:	930e      	str	r3, [sp, #56]	; 0x38
 801083e:	e7bb      	b.n	80107b8 <_dtoa_r+0x1b0>
 8010840:	2301      	movs	r3, #1
 8010842:	930a      	str	r3, [sp, #40]	; 0x28
 8010844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010846:	2b00      	cmp	r3, #0
 8010848:	dd59      	ble.n	80108fe <_dtoa_r+0x2f6>
 801084a:	9302      	str	r3, [sp, #8]
 801084c:	4699      	mov	r9, r3
 801084e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010850:	2200      	movs	r2, #0
 8010852:	6072      	str	r2, [r6, #4]
 8010854:	2204      	movs	r2, #4
 8010856:	f102 0014 	add.w	r0, r2, #20
 801085a:	4298      	cmp	r0, r3
 801085c:	6871      	ldr	r1, [r6, #4]
 801085e:	d953      	bls.n	8010908 <_dtoa_r+0x300>
 8010860:	4620      	mov	r0, r4
 8010862:	f000 fe7d 	bl	8011560 <_Balloc>
 8010866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010868:	6030      	str	r0, [r6, #0]
 801086a:	f1b9 0f0e 	cmp.w	r9, #14
 801086e:	f8d3 b000 	ldr.w	fp, [r3]
 8010872:	f200 80e6 	bhi.w	8010a42 <_dtoa_r+0x43a>
 8010876:	2d00      	cmp	r5, #0
 8010878:	f000 80e3 	beq.w	8010a42 <_dtoa_r+0x43a>
 801087c:	ed9d 7b00 	vldr	d7, [sp]
 8010880:	f1ba 0f00 	cmp.w	sl, #0
 8010884:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010888:	dd74      	ble.n	8010974 <_dtoa_r+0x36c>
 801088a:	4a2a      	ldr	r2, [pc, #168]	; (8010934 <_dtoa_r+0x32c>)
 801088c:	f00a 030f 	and.w	r3, sl, #15
 8010890:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010894:	ed93 7b00 	vldr	d7, [r3]
 8010898:	ea4f 162a 	mov.w	r6, sl, asr #4
 801089c:	06f0      	lsls	r0, r6, #27
 801089e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80108a2:	d565      	bpl.n	8010970 <_dtoa_r+0x368>
 80108a4:	4b24      	ldr	r3, [pc, #144]	; (8010938 <_dtoa_r+0x330>)
 80108a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80108aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80108ae:	f7ef ffcd 	bl	800084c <__aeabi_ddiv>
 80108b2:	e9cd 0100 	strd	r0, r1, [sp]
 80108b6:	f006 060f 	and.w	r6, r6, #15
 80108ba:	2503      	movs	r5, #3
 80108bc:	4f1e      	ldr	r7, [pc, #120]	; (8010938 <_dtoa_r+0x330>)
 80108be:	e04c      	b.n	801095a <_dtoa_r+0x352>
 80108c0:	2301      	movs	r3, #1
 80108c2:	930a      	str	r3, [sp, #40]	; 0x28
 80108c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108c6:	4453      	add	r3, sl
 80108c8:	f103 0901 	add.w	r9, r3, #1
 80108cc:	9302      	str	r3, [sp, #8]
 80108ce:	464b      	mov	r3, r9
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	bfb8      	it	lt
 80108d4:	2301      	movlt	r3, #1
 80108d6:	e7ba      	b.n	801084e <_dtoa_r+0x246>
 80108d8:	2300      	movs	r3, #0
 80108da:	e7b2      	b.n	8010842 <_dtoa_r+0x23a>
 80108dc:	2300      	movs	r3, #0
 80108de:	e7f0      	b.n	80108c2 <_dtoa_r+0x2ba>
 80108e0:	2501      	movs	r5, #1
 80108e2:	2300      	movs	r3, #0
 80108e4:	9306      	str	r3, [sp, #24]
 80108e6:	950a      	str	r5, [sp, #40]	; 0x28
 80108e8:	f04f 33ff 	mov.w	r3, #4294967295
 80108ec:	9302      	str	r3, [sp, #8]
 80108ee:	4699      	mov	r9, r3
 80108f0:	2200      	movs	r2, #0
 80108f2:	2312      	movs	r3, #18
 80108f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80108f6:	e7aa      	b.n	801084e <_dtoa_r+0x246>
 80108f8:	2301      	movs	r3, #1
 80108fa:	930a      	str	r3, [sp, #40]	; 0x28
 80108fc:	e7f4      	b.n	80108e8 <_dtoa_r+0x2e0>
 80108fe:	2301      	movs	r3, #1
 8010900:	9302      	str	r3, [sp, #8]
 8010902:	4699      	mov	r9, r3
 8010904:	461a      	mov	r2, r3
 8010906:	e7f5      	b.n	80108f4 <_dtoa_r+0x2ec>
 8010908:	3101      	adds	r1, #1
 801090a:	6071      	str	r1, [r6, #4]
 801090c:	0052      	lsls	r2, r2, #1
 801090e:	e7a2      	b.n	8010856 <_dtoa_r+0x24e>
 8010910:	636f4361 	.word	0x636f4361
 8010914:	3fd287a7 	.word	0x3fd287a7
 8010918:	8b60c8b3 	.word	0x8b60c8b3
 801091c:	3fc68a28 	.word	0x3fc68a28
 8010920:	509f79fb 	.word	0x509f79fb
 8010924:	3fd34413 	.word	0x3fd34413
 8010928:	7ff00000 	.word	0x7ff00000
 801092c:	08013821 	.word	0x08013821
 8010930:	3ff80000 	.word	0x3ff80000
 8010934:	080138e0 	.word	0x080138e0
 8010938:	080138b8 	.word	0x080138b8
 801093c:	0801384d 	.word	0x0801384d
 8010940:	07f1      	lsls	r1, r6, #31
 8010942:	d508      	bpl.n	8010956 <_dtoa_r+0x34e>
 8010944:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010948:	e9d7 2300 	ldrd	r2, r3, [r7]
 801094c:	f7ef fe54 	bl	80005f8 <__aeabi_dmul>
 8010950:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010954:	3501      	adds	r5, #1
 8010956:	1076      	asrs	r6, r6, #1
 8010958:	3708      	adds	r7, #8
 801095a:	2e00      	cmp	r6, #0
 801095c:	d1f0      	bne.n	8010940 <_dtoa_r+0x338>
 801095e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010966:	f7ef ff71 	bl	800084c <__aeabi_ddiv>
 801096a:	e9cd 0100 	strd	r0, r1, [sp]
 801096e:	e01a      	b.n	80109a6 <_dtoa_r+0x39e>
 8010970:	2502      	movs	r5, #2
 8010972:	e7a3      	b.n	80108bc <_dtoa_r+0x2b4>
 8010974:	f000 80a0 	beq.w	8010ab8 <_dtoa_r+0x4b0>
 8010978:	f1ca 0600 	rsb	r6, sl, #0
 801097c:	4b9f      	ldr	r3, [pc, #636]	; (8010bfc <_dtoa_r+0x5f4>)
 801097e:	4fa0      	ldr	r7, [pc, #640]	; (8010c00 <_dtoa_r+0x5f8>)
 8010980:	f006 020f 	and.w	r2, r6, #15
 8010984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010990:	f7ef fe32 	bl	80005f8 <__aeabi_dmul>
 8010994:	e9cd 0100 	strd	r0, r1, [sp]
 8010998:	1136      	asrs	r6, r6, #4
 801099a:	2300      	movs	r3, #0
 801099c:	2502      	movs	r5, #2
 801099e:	2e00      	cmp	r6, #0
 80109a0:	d17f      	bne.n	8010aa2 <_dtoa_r+0x49a>
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d1e1      	bne.n	801096a <_dtoa_r+0x362>
 80109a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f000 8087 	beq.w	8010abc <_dtoa_r+0x4b4>
 80109ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80109b2:	2200      	movs	r2, #0
 80109b4:	4b93      	ldr	r3, [pc, #588]	; (8010c04 <_dtoa_r+0x5fc>)
 80109b6:	4630      	mov	r0, r6
 80109b8:	4639      	mov	r1, r7
 80109ba:	f7f0 f88f 	bl	8000adc <__aeabi_dcmplt>
 80109be:	2800      	cmp	r0, #0
 80109c0:	d07c      	beq.n	8010abc <_dtoa_r+0x4b4>
 80109c2:	f1b9 0f00 	cmp.w	r9, #0
 80109c6:	d079      	beq.n	8010abc <_dtoa_r+0x4b4>
 80109c8:	9b02      	ldr	r3, [sp, #8]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	dd35      	ble.n	8010a3a <_dtoa_r+0x432>
 80109ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80109d2:	9308      	str	r3, [sp, #32]
 80109d4:	4639      	mov	r1, r7
 80109d6:	2200      	movs	r2, #0
 80109d8:	4b8b      	ldr	r3, [pc, #556]	; (8010c08 <_dtoa_r+0x600>)
 80109da:	4630      	mov	r0, r6
 80109dc:	f7ef fe0c 	bl	80005f8 <__aeabi_dmul>
 80109e0:	e9cd 0100 	strd	r0, r1, [sp]
 80109e4:	9f02      	ldr	r7, [sp, #8]
 80109e6:	3501      	adds	r5, #1
 80109e8:	4628      	mov	r0, r5
 80109ea:	f7ef fd9b 	bl	8000524 <__aeabi_i2d>
 80109ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109f2:	f7ef fe01 	bl	80005f8 <__aeabi_dmul>
 80109f6:	2200      	movs	r2, #0
 80109f8:	4b84      	ldr	r3, [pc, #528]	; (8010c0c <_dtoa_r+0x604>)
 80109fa:	f7ef fc47 	bl	800028c <__adddf3>
 80109fe:	4605      	mov	r5, r0
 8010a00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010a04:	2f00      	cmp	r7, #0
 8010a06:	d15d      	bne.n	8010ac4 <_dtoa_r+0x4bc>
 8010a08:	2200      	movs	r2, #0
 8010a0a:	4b81      	ldr	r3, [pc, #516]	; (8010c10 <_dtoa_r+0x608>)
 8010a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a10:	f7ef fc3a 	bl	8000288 <__aeabi_dsub>
 8010a14:	462a      	mov	r2, r5
 8010a16:	4633      	mov	r3, r6
 8010a18:	e9cd 0100 	strd	r0, r1, [sp]
 8010a1c:	f7f0 f87c 	bl	8000b18 <__aeabi_dcmpgt>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	f040 8288 	bne.w	8010f36 <_dtoa_r+0x92e>
 8010a26:	462a      	mov	r2, r5
 8010a28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a30:	f7f0 f854 	bl	8000adc <__aeabi_dcmplt>
 8010a34:	2800      	cmp	r0, #0
 8010a36:	f040 827c 	bne.w	8010f32 <_dtoa_r+0x92a>
 8010a3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010a3e:	e9cd 2300 	strd	r2, r3, [sp]
 8010a42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f2c0 8150 	blt.w	8010cea <_dtoa_r+0x6e2>
 8010a4a:	f1ba 0f0e 	cmp.w	sl, #14
 8010a4e:	f300 814c 	bgt.w	8010cea <_dtoa_r+0x6e2>
 8010a52:	4b6a      	ldr	r3, [pc, #424]	; (8010bfc <_dtoa_r+0x5f4>)
 8010a54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010a58:	ed93 7b00 	vldr	d7, [r3]
 8010a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a64:	f280 80d8 	bge.w	8010c18 <_dtoa_r+0x610>
 8010a68:	f1b9 0f00 	cmp.w	r9, #0
 8010a6c:	f300 80d4 	bgt.w	8010c18 <_dtoa_r+0x610>
 8010a70:	f040 825e 	bne.w	8010f30 <_dtoa_r+0x928>
 8010a74:	2200      	movs	r2, #0
 8010a76:	4b66      	ldr	r3, [pc, #408]	; (8010c10 <_dtoa_r+0x608>)
 8010a78:	ec51 0b17 	vmov	r0, r1, d7
 8010a7c:	f7ef fdbc 	bl	80005f8 <__aeabi_dmul>
 8010a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a84:	f7f0 f83e 	bl	8000b04 <__aeabi_dcmpge>
 8010a88:	464f      	mov	r7, r9
 8010a8a:	464e      	mov	r6, r9
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	f040 8234 	bne.w	8010efa <_dtoa_r+0x8f2>
 8010a92:	2331      	movs	r3, #49	; 0x31
 8010a94:	f10b 0501 	add.w	r5, fp, #1
 8010a98:	f88b 3000 	strb.w	r3, [fp]
 8010a9c:	f10a 0a01 	add.w	sl, sl, #1
 8010aa0:	e22f      	b.n	8010f02 <_dtoa_r+0x8fa>
 8010aa2:	07f2      	lsls	r2, r6, #31
 8010aa4:	d505      	bpl.n	8010ab2 <_dtoa_r+0x4aa>
 8010aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010aaa:	f7ef fda5 	bl	80005f8 <__aeabi_dmul>
 8010aae:	3501      	adds	r5, #1
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	1076      	asrs	r6, r6, #1
 8010ab4:	3708      	adds	r7, #8
 8010ab6:	e772      	b.n	801099e <_dtoa_r+0x396>
 8010ab8:	2502      	movs	r5, #2
 8010aba:	e774      	b.n	80109a6 <_dtoa_r+0x39e>
 8010abc:	f8cd a020 	str.w	sl, [sp, #32]
 8010ac0:	464f      	mov	r7, r9
 8010ac2:	e791      	b.n	80109e8 <_dtoa_r+0x3e0>
 8010ac4:	4b4d      	ldr	r3, [pc, #308]	; (8010bfc <_dtoa_r+0x5f4>)
 8010ac6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010aca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d047      	beq.n	8010b64 <_dtoa_r+0x55c>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	460b      	mov	r3, r1
 8010ad8:	2000      	movs	r0, #0
 8010ada:	494e      	ldr	r1, [pc, #312]	; (8010c14 <_dtoa_r+0x60c>)
 8010adc:	f7ef feb6 	bl	800084c <__aeabi_ddiv>
 8010ae0:	462a      	mov	r2, r5
 8010ae2:	4633      	mov	r3, r6
 8010ae4:	f7ef fbd0 	bl	8000288 <__aeabi_dsub>
 8010ae8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010aec:	465d      	mov	r5, fp
 8010aee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010af2:	f7f0 f831 	bl	8000b58 <__aeabi_d2iz>
 8010af6:	4606      	mov	r6, r0
 8010af8:	f7ef fd14 	bl	8000524 <__aeabi_i2d>
 8010afc:	4602      	mov	r2, r0
 8010afe:	460b      	mov	r3, r1
 8010b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b04:	f7ef fbc0 	bl	8000288 <__aeabi_dsub>
 8010b08:	3630      	adds	r6, #48	; 0x30
 8010b0a:	f805 6b01 	strb.w	r6, [r5], #1
 8010b0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010b12:	e9cd 0100 	strd	r0, r1, [sp]
 8010b16:	f7ef ffe1 	bl	8000adc <__aeabi_dcmplt>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	d163      	bne.n	8010be6 <_dtoa_r+0x5de>
 8010b1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b22:	2000      	movs	r0, #0
 8010b24:	4937      	ldr	r1, [pc, #220]	; (8010c04 <_dtoa_r+0x5fc>)
 8010b26:	f7ef fbaf 	bl	8000288 <__aeabi_dsub>
 8010b2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010b2e:	f7ef ffd5 	bl	8000adc <__aeabi_dcmplt>
 8010b32:	2800      	cmp	r0, #0
 8010b34:	f040 80b7 	bne.w	8010ca6 <_dtoa_r+0x69e>
 8010b38:	eba5 030b 	sub.w	r3, r5, fp
 8010b3c:	429f      	cmp	r7, r3
 8010b3e:	f77f af7c 	ble.w	8010a3a <_dtoa_r+0x432>
 8010b42:	2200      	movs	r2, #0
 8010b44:	4b30      	ldr	r3, [pc, #192]	; (8010c08 <_dtoa_r+0x600>)
 8010b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010b4a:	f7ef fd55 	bl	80005f8 <__aeabi_dmul>
 8010b4e:	2200      	movs	r2, #0
 8010b50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010b54:	4b2c      	ldr	r3, [pc, #176]	; (8010c08 <_dtoa_r+0x600>)
 8010b56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b5a:	f7ef fd4d 	bl	80005f8 <__aeabi_dmul>
 8010b5e:	e9cd 0100 	strd	r0, r1, [sp]
 8010b62:	e7c4      	b.n	8010aee <_dtoa_r+0x4e6>
 8010b64:	462a      	mov	r2, r5
 8010b66:	4633      	mov	r3, r6
 8010b68:	f7ef fd46 	bl	80005f8 <__aeabi_dmul>
 8010b6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010b70:	eb0b 0507 	add.w	r5, fp, r7
 8010b74:	465e      	mov	r6, fp
 8010b76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b7a:	f7ef ffed 	bl	8000b58 <__aeabi_d2iz>
 8010b7e:	4607      	mov	r7, r0
 8010b80:	f7ef fcd0 	bl	8000524 <__aeabi_i2d>
 8010b84:	3730      	adds	r7, #48	; 0x30
 8010b86:	4602      	mov	r2, r0
 8010b88:	460b      	mov	r3, r1
 8010b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b8e:	f7ef fb7b 	bl	8000288 <__aeabi_dsub>
 8010b92:	f806 7b01 	strb.w	r7, [r6], #1
 8010b96:	42ae      	cmp	r6, r5
 8010b98:	e9cd 0100 	strd	r0, r1, [sp]
 8010b9c:	f04f 0200 	mov.w	r2, #0
 8010ba0:	d126      	bne.n	8010bf0 <_dtoa_r+0x5e8>
 8010ba2:	4b1c      	ldr	r3, [pc, #112]	; (8010c14 <_dtoa_r+0x60c>)
 8010ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ba8:	f7ef fb70 	bl	800028c <__adddf3>
 8010bac:	4602      	mov	r2, r0
 8010bae:	460b      	mov	r3, r1
 8010bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010bb4:	f7ef ffb0 	bl	8000b18 <__aeabi_dcmpgt>
 8010bb8:	2800      	cmp	r0, #0
 8010bba:	d174      	bne.n	8010ca6 <_dtoa_r+0x69e>
 8010bbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	4914      	ldr	r1, [pc, #80]	; (8010c14 <_dtoa_r+0x60c>)
 8010bc4:	f7ef fb60 	bl	8000288 <__aeabi_dsub>
 8010bc8:	4602      	mov	r2, r0
 8010bca:	460b      	mov	r3, r1
 8010bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010bd0:	f7ef ff84 	bl	8000adc <__aeabi_dcmplt>
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	f43f af30 	beq.w	8010a3a <_dtoa_r+0x432>
 8010bda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010bde:	2b30      	cmp	r3, #48	; 0x30
 8010be0:	f105 32ff 	add.w	r2, r5, #4294967295
 8010be4:	d002      	beq.n	8010bec <_dtoa_r+0x5e4>
 8010be6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010bea:	e04a      	b.n	8010c82 <_dtoa_r+0x67a>
 8010bec:	4615      	mov	r5, r2
 8010bee:	e7f4      	b.n	8010bda <_dtoa_r+0x5d2>
 8010bf0:	4b05      	ldr	r3, [pc, #20]	; (8010c08 <_dtoa_r+0x600>)
 8010bf2:	f7ef fd01 	bl	80005f8 <__aeabi_dmul>
 8010bf6:	e9cd 0100 	strd	r0, r1, [sp]
 8010bfa:	e7bc      	b.n	8010b76 <_dtoa_r+0x56e>
 8010bfc:	080138e0 	.word	0x080138e0
 8010c00:	080138b8 	.word	0x080138b8
 8010c04:	3ff00000 	.word	0x3ff00000
 8010c08:	40240000 	.word	0x40240000
 8010c0c:	401c0000 	.word	0x401c0000
 8010c10:	40140000 	.word	0x40140000
 8010c14:	3fe00000 	.word	0x3fe00000
 8010c18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010c1c:	465d      	mov	r5, fp
 8010c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c22:	4630      	mov	r0, r6
 8010c24:	4639      	mov	r1, r7
 8010c26:	f7ef fe11 	bl	800084c <__aeabi_ddiv>
 8010c2a:	f7ef ff95 	bl	8000b58 <__aeabi_d2iz>
 8010c2e:	4680      	mov	r8, r0
 8010c30:	f7ef fc78 	bl	8000524 <__aeabi_i2d>
 8010c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c38:	f7ef fcde 	bl	80005f8 <__aeabi_dmul>
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	460b      	mov	r3, r1
 8010c40:	4630      	mov	r0, r6
 8010c42:	4639      	mov	r1, r7
 8010c44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010c48:	f7ef fb1e 	bl	8000288 <__aeabi_dsub>
 8010c4c:	f805 6b01 	strb.w	r6, [r5], #1
 8010c50:	eba5 060b 	sub.w	r6, r5, fp
 8010c54:	45b1      	cmp	r9, r6
 8010c56:	4602      	mov	r2, r0
 8010c58:	460b      	mov	r3, r1
 8010c5a:	d139      	bne.n	8010cd0 <_dtoa_r+0x6c8>
 8010c5c:	f7ef fb16 	bl	800028c <__adddf3>
 8010c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c64:	4606      	mov	r6, r0
 8010c66:	460f      	mov	r7, r1
 8010c68:	f7ef ff56 	bl	8000b18 <__aeabi_dcmpgt>
 8010c6c:	b9c8      	cbnz	r0, 8010ca2 <_dtoa_r+0x69a>
 8010c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c72:	4630      	mov	r0, r6
 8010c74:	4639      	mov	r1, r7
 8010c76:	f7ef ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c7a:	b110      	cbz	r0, 8010c82 <_dtoa_r+0x67a>
 8010c7c:	f018 0f01 	tst.w	r8, #1
 8010c80:	d10f      	bne.n	8010ca2 <_dtoa_r+0x69a>
 8010c82:	9904      	ldr	r1, [sp, #16]
 8010c84:	4620      	mov	r0, r4
 8010c86:	f000 fc9f 	bl	80115c8 <_Bfree>
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010c8e:	702b      	strb	r3, [r5, #0]
 8010c90:	f10a 0301 	add.w	r3, sl, #1
 8010c94:	6013      	str	r3, [r2, #0]
 8010c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	f000 8241 	beq.w	8011120 <_dtoa_r+0xb18>
 8010c9e:	601d      	str	r5, [r3, #0]
 8010ca0:	e23e      	b.n	8011120 <_dtoa_r+0xb18>
 8010ca2:	f8cd a020 	str.w	sl, [sp, #32]
 8010ca6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010caa:	2a39      	cmp	r2, #57	; 0x39
 8010cac:	f105 33ff 	add.w	r3, r5, #4294967295
 8010cb0:	d108      	bne.n	8010cc4 <_dtoa_r+0x6bc>
 8010cb2:	459b      	cmp	fp, r3
 8010cb4:	d10a      	bne.n	8010ccc <_dtoa_r+0x6c4>
 8010cb6:	9b08      	ldr	r3, [sp, #32]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	9308      	str	r3, [sp, #32]
 8010cbc:	2330      	movs	r3, #48	; 0x30
 8010cbe:	f88b 3000 	strb.w	r3, [fp]
 8010cc2:	465b      	mov	r3, fp
 8010cc4:	781a      	ldrb	r2, [r3, #0]
 8010cc6:	3201      	adds	r2, #1
 8010cc8:	701a      	strb	r2, [r3, #0]
 8010cca:	e78c      	b.n	8010be6 <_dtoa_r+0x5de>
 8010ccc:	461d      	mov	r5, r3
 8010cce:	e7ea      	b.n	8010ca6 <_dtoa_r+0x69e>
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	4b9b      	ldr	r3, [pc, #620]	; (8010f40 <_dtoa_r+0x938>)
 8010cd4:	f7ef fc90 	bl	80005f8 <__aeabi_dmul>
 8010cd8:	2200      	movs	r2, #0
 8010cda:	2300      	movs	r3, #0
 8010cdc:	4606      	mov	r6, r0
 8010cde:	460f      	mov	r7, r1
 8010ce0:	f7ef fef2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d09a      	beq.n	8010c1e <_dtoa_r+0x616>
 8010ce8:	e7cb      	b.n	8010c82 <_dtoa_r+0x67a>
 8010cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cec:	2a00      	cmp	r2, #0
 8010cee:	f000 808b 	beq.w	8010e08 <_dtoa_r+0x800>
 8010cf2:	9a06      	ldr	r2, [sp, #24]
 8010cf4:	2a01      	cmp	r2, #1
 8010cf6:	dc6e      	bgt.n	8010dd6 <_dtoa_r+0x7ce>
 8010cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010cfa:	2a00      	cmp	r2, #0
 8010cfc:	d067      	beq.n	8010dce <_dtoa_r+0x7c6>
 8010cfe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010d02:	9f07      	ldr	r7, [sp, #28]
 8010d04:	9d05      	ldr	r5, [sp, #20]
 8010d06:	9a05      	ldr	r2, [sp, #20]
 8010d08:	2101      	movs	r1, #1
 8010d0a:	441a      	add	r2, r3
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	9205      	str	r2, [sp, #20]
 8010d10:	4498      	add	r8, r3
 8010d12:	f000 fcf9 	bl	8011708 <__i2b>
 8010d16:	4606      	mov	r6, r0
 8010d18:	2d00      	cmp	r5, #0
 8010d1a:	dd0c      	ble.n	8010d36 <_dtoa_r+0x72e>
 8010d1c:	f1b8 0f00 	cmp.w	r8, #0
 8010d20:	dd09      	ble.n	8010d36 <_dtoa_r+0x72e>
 8010d22:	4545      	cmp	r5, r8
 8010d24:	9a05      	ldr	r2, [sp, #20]
 8010d26:	462b      	mov	r3, r5
 8010d28:	bfa8      	it	ge
 8010d2a:	4643      	movge	r3, r8
 8010d2c:	1ad2      	subs	r2, r2, r3
 8010d2e:	9205      	str	r2, [sp, #20]
 8010d30:	1aed      	subs	r5, r5, r3
 8010d32:	eba8 0803 	sub.w	r8, r8, r3
 8010d36:	9b07      	ldr	r3, [sp, #28]
 8010d38:	b1eb      	cbz	r3, 8010d76 <_dtoa_r+0x76e>
 8010d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d067      	beq.n	8010e10 <_dtoa_r+0x808>
 8010d40:	b18f      	cbz	r7, 8010d66 <_dtoa_r+0x75e>
 8010d42:	4631      	mov	r1, r6
 8010d44:	463a      	mov	r2, r7
 8010d46:	4620      	mov	r0, r4
 8010d48:	f000 fd7e 	bl	8011848 <__pow5mult>
 8010d4c:	9a04      	ldr	r2, [sp, #16]
 8010d4e:	4601      	mov	r1, r0
 8010d50:	4606      	mov	r6, r0
 8010d52:	4620      	mov	r0, r4
 8010d54:	f000 fce1 	bl	801171a <__multiply>
 8010d58:	9904      	ldr	r1, [sp, #16]
 8010d5a:	9008      	str	r0, [sp, #32]
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	f000 fc33 	bl	80115c8 <_Bfree>
 8010d62:	9b08      	ldr	r3, [sp, #32]
 8010d64:	9304      	str	r3, [sp, #16]
 8010d66:	9b07      	ldr	r3, [sp, #28]
 8010d68:	1bda      	subs	r2, r3, r7
 8010d6a:	d004      	beq.n	8010d76 <_dtoa_r+0x76e>
 8010d6c:	9904      	ldr	r1, [sp, #16]
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f000 fd6a 	bl	8011848 <__pow5mult>
 8010d74:	9004      	str	r0, [sp, #16]
 8010d76:	2101      	movs	r1, #1
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f000 fcc5 	bl	8011708 <__i2b>
 8010d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d80:	4607      	mov	r7, r0
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	f000 81d0 	beq.w	8011128 <_dtoa_r+0xb20>
 8010d88:	461a      	mov	r2, r3
 8010d8a:	4601      	mov	r1, r0
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	f000 fd5b 	bl	8011848 <__pow5mult>
 8010d92:	9b06      	ldr	r3, [sp, #24]
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	4607      	mov	r7, r0
 8010d98:	dc40      	bgt.n	8010e1c <_dtoa_r+0x814>
 8010d9a:	9b00      	ldr	r3, [sp, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d139      	bne.n	8010e14 <_dtoa_r+0x80c>
 8010da0:	9b01      	ldr	r3, [sp, #4]
 8010da2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d136      	bne.n	8010e18 <_dtoa_r+0x810>
 8010daa:	9b01      	ldr	r3, [sp, #4]
 8010dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010db0:	0d1b      	lsrs	r3, r3, #20
 8010db2:	051b      	lsls	r3, r3, #20
 8010db4:	b12b      	cbz	r3, 8010dc2 <_dtoa_r+0x7ba>
 8010db6:	9b05      	ldr	r3, [sp, #20]
 8010db8:	3301      	adds	r3, #1
 8010dba:	9305      	str	r3, [sp, #20]
 8010dbc:	f108 0801 	add.w	r8, r8, #1
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	9307      	str	r3, [sp, #28]
 8010dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d12a      	bne.n	8010e20 <_dtoa_r+0x818>
 8010dca:	2001      	movs	r0, #1
 8010dcc:	e030      	b.n	8010e30 <_dtoa_r+0x828>
 8010dce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010dd0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010dd4:	e795      	b.n	8010d02 <_dtoa_r+0x6fa>
 8010dd6:	9b07      	ldr	r3, [sp, #28]
 8010dd8:	f109 37ff 	add.w	r7, r9, #4294967295
 8010ddc:	42bb      	cmp	r3, r7
 8010dde:	bfbf      	itttt	lt
 8010de0:	9b07      	ldrlt	r3, [sp, #28]
 8010de2:	9707      	strlt	r7, [sp, #28]
 8010de4:	1afa      	sublt	r2, r7, r3
 8010de6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010de8:	bfbb      	ittet	lt
 8010dea:	189b      	addlt	r3, r3, r2
 8010dec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010dee:	1bdf      	subge	r7, r3, r7
 8010df0:	2700      	movlt	r7, #0
 8010df2:	f1b9 0f00 	cmp.w	r9, #0
 8010df6:	bfb5      	itete	lt
 8010df8:	9b05      	ldrlt	r3, [sp, #20]
 8010dfa:	9d05      	ldrge	r5, [sp, #20]
 8010dfc:	eba3 0509 	sublt.w	r5, r3, r9
 8010e00:	464b      	movge	r3, r9
 8010e02:	bfb8      	it	lt
 8010e04:	2300      	movlt	r3, #0
 8010e06:	e77e      	b.n	8010d06 <_dtoa_r+0x6fe>
 8010e08:	9f07      	ldr	r7, [sp, #28]
 8010e0a:	9d05      	ldr	r5, [sp, #20]
 8010e0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010e0e:	e783      	b.n	8010d18 <_dtoa_r+0x710>
 8010e10:	9a07      	ldr	r2, [sp, #28]
 8010e12:	e7ab      	b.n	8010d6c <_dtoa_r+0x764>
 8010e14:	2300      	movs	r3, #0
 8010e16:	e7d4      	b.n	8010dc2 <_dtoa_r+0x7ba>
 8010e18:	9b00      	ldr	r3, [sp, #0]
 8010e1a:	e7d2      	b.n	8010dc2 <_dtoa_r+0x7ba>
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	9307      	str	r3, [sp, #28]
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010e26:	6918      	ldr	r0, [r3, #16]
 8010e28:	f000 fc20 	bl	801166c <__hi0bits>
 8010e2c:	f1c0 0020 	rsb	r0, r0, #32
 8010e30:	4440      	add	r0, r8
 8010e32:	f010 001f 	ands.w	r0, r0, #31
 8010e36:	d047      	beq.n	8010ec8 <_dtoa_r+0x8c0>
 8010e38:	f1c0 0320 	rsb	r3, r0, #32
 8010e3c:	2b04      	cmp	r3, #4
 8010e3e:	dd3b      	ble.n	8010eb8 <_dtoa_r+0x8b0>
 8010e40:	9b05      	ldr	r3, [sp, #20]
 8010e42:	f1c0 001c 	rsb	r0, r0, #28
 8010e46:	4403      	add	r3, r0
 8010e48:	9305      	str	r3, [sp, #20]
 8010e4a:	4405      	add	r5, r0
 8010e4c:	4480      	add	r8, r0
 8010e4e:	9b05      	ldr	r3, [sp, #20]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	dd05      	ble.n	8010e60 <_dtoa_r+0x858>
 8010e54:	461a      	mov	r2, r3
 8010e56:	9904      	ldr	r1, [sp, #16]
 8010e58:	4620      	mov	r0, r4
 8010e5a:	f000 fd43 	bl	80118e4 <__lshift>
 8010e5e:	9004      	str	r0, [sp, #16]
 8010e60:	f1b8 0f00 	cmp.w	r8, #0
 8010e64:	dd05      	ble.n	8010e72 <_dtoa_r+0x86a>
 8010e66:	4639      	mov	r1, r7
 8010e68:	4642      	mov	r2, r8
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f000 fd3a 	bl	80118e4 <__lshift>
 8010e70:	4607      	mov	r7, r0
 8010e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e74:	b353      	cbz	r3, 8010ecc <_dtoa_r+0x8c4>
 8010e76:	4639      	mov	r1, r7
 8010e78:	9804      	ldr	r0, [sp, #16]
 8010e7a:	f000 fd87 	bl	801198c <__mcmp>
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	da24      	bge.n	8010ecc <_dtoa_r+0x8c4>
 8010e82:	2300      	movs	r3, #0
 8010e84:	220a      	movs	r2, #10
 8010e86:	9904      	ldr	r1, [sp, #16]
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f000 fbb4 	bl	80115f6 <__multadd>
 8010e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e90:	9004      	str	r0, [sp, #16]
 8010e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	f000 814d 	beq.w	8011136 <_dtoa_r+0xb2e>
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	4631      	mov	r1, r6
 8010ea0:	220a      	movs	r2, #10
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f000 fba7 	bl	80115f6 <__multadd>
 8010ea8:	9b02      	ldr	r3, [sp, #8]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	4606      	mov	r6, r0
 8010eae:	dc4f      	bgt.n	8010f50 <_dtoa_r+0x948>
 8010eb0:	9b06      	ldr	r3, [sp, #24]
 8010eb2:	2b02      	cmp	r3, #2
 8010eb4:	dd4c      	ble.n	8010f50 <_dtoa_r+0x948>
 8010eb6:	e011      	b.n	8010edc <_dtoa_r+0x8d4>
 8010eb8:	d0c9      	beq.n	8010e4e <_dtoa_r+0x846>
 8010eba:	9a05      	ldr	r2, [sp, #20]
 8010ebc:	331c      	adds	r3, #28
 8010ebe:	441a      	add	r2, r3
 8010ec0:	9205      	str	r2, [sp, #20]
 8010ec2:	441d      	add	r5, r3
 8010ec4:	4498      	add	r8, r3
 8010ec6:	e7c2      	b.n	8010e4e <_dtoa_r+0x846>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	e7f6      	b.n	8010eba <_dtoa_r+0x8b2>
 8010ecc:	f1b9 0f00 	cmp.w	r9, #0
 8010ed0:	dc38      	bgt.n	8010f44 <_dtoa_r+0x93c>
 8010ed2:	9b06      	ldr	r3, [sp, #24]
 8010ed4:	2b02      	cmp	r3, #2
 8010ed6:	dd35      	ble.n	8010f44 <_dtoa_r+0x93c>
 8010ed8:	f8cd 9008 	str.w	r9, [sp, #8]
 8010edc:	9b02      	ldr	r3, [sp, #8]
 8010ede:	b963      	cbnz	r3, 8010efa <_dtoa_r+0x8f2>
 8010ee0:	4639      	mov	r1, r7
 8010ee2:	2205      	movs	r2, #5
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f000 fb86 	bl	80115f6 <__multadd>
 8010eea:	4601      	mov	r1, r0
 8010eec:	4607      	mov	r7, r0
 8010eee:	9804      	ldr	r0, [sp, #16]
 8010ef0:	f000 fd4c 	bl	801198c <__mcmp>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	f73f adcc 	bgt.w	8010a92 <_dtoa_r+0x48a>
 8010efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010efc:	465d      	mov	r5, fp
 8010efe:	ea6f 0a03 	mvn.w	sl, r3
 8010f02:	f04f 0900 	mov.w	r9, #0
 8010f06:	4639      	mov	r1, r7
 8010f08:	4620      	mov	r0, r4
 8010f0a:	f000 fb5d 	bl	80115c8 <_Bfree>
 8010f0e:	2e00      	cmp	r6, #0
 8010f10:	f43f aeb7 	beq.w	8010c82 <_dtoa_r+0x67a>
 8010f14:	f1b9 0f00 	cmp.w	r9, #0
 8010f18:	d005      	beq.n	8010f26 <_dtoa_r+0x91e>
 8010f1a:	45b1      	cmp	r9, r6
 8010f1c:	d003      	beq.n	8010f26 <_dtoa_r+0x91e>
 8010f1e:	4649      	mov	r1, r9
 8010f20:	4620      	mov	r0, r4
 8010f22:	f000 fb51 	bl	80115c8 <_Bfree>
 8010f26:	4631      	mov	r1, r6
 8010f28:	4620      	mov	r0, r4
 8010f2a:	f000 fb4d 	bl	80115c8 <_Bfree>
 8010f2e:	e6a8      	b.n	8010c82 <_dtoa_r+0x67a>
 8010f30:	2700      	movs	r7, #0
 8010f32:	463e      	mov	r6, r7
 8010f34:	e7e1      	b.n	8010efa <_dtoa_r+0x8f2>
 8010f36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010f3a:	463e      	mov	r6, r7
 8010f3c:	e5a9      	b.n	8010a92 <_dtoa_r+0x48a>
 8010f3e:	bf00      	nop
 8010f40:	40240000 	.word	0x40240000
 8010f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f46:	f8cd 9008 	str.w	r9, [sp, #8]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	f000 80fa 	beq.w	8011144 <_dtoa_r+0xb3c>
 8010f50:	2d00      	cmp	r5, #0
 8010f52:	dd05      	ble.n	8010f60 <_dtoa_r+0x958>
 8010f54:	4631      	mov	r1, r6
 8010f56:	462a      	mov	r2, r5
 8010f58:	4620      	mov	r0, r4
 8010f5a:	f000 fcc3 	bl	80118e4 <__lshift>
 8010f5e:	4606      	mov	r6, r0
 8010f60:	9b07      	ldr	r3, [sp, #28]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d04c      	beq.n	8011000 <_dtoa_r+0x9f8>
 8010f66:	6871      	ldr	r1, [r6, #4]
 8010f68:	4620      	mov	r0, r4
 8010f6a:	f000 faf9 	bl	8011560 <_Balloc>
 8010f6e:	6932      	ldr	r2, [r6, #16]
 8010f70:	3202      	adds	r2, #2
 8010f72:	4605      	mov	r5, r0
 8010f74:	0092      	lsls	r2, r2, #2
 8010f76:	f106 010c 	add.w	r1, r6, #12
 8010f7a:	300c      	adds	r0, #12
 8010f7c:	f7fe fc44 	bl	800f808 <memcpy>
 8010f80:	2201      	movs	r2, #1
 8010f82:	4629      	mov	r1, r5
 8010f84:	4620      	mov	r0, r4
 8010f86:	f000 fcad 	bl	80118e4 <__lshift>
 8010f8a:	9b00      	ldr	r3, [sp, #0]
 8010f8c:	f8cd b014 	str.w	fp, [sp, #20]
 8010f90:	f003 0301 	and.w	r3, r3, #1
 8010f94:	46b1      	mov	r9, r6
 8010f96:	9307      	str	r3, [sp, #28]
 8010f98:	4606      	mov	r6, r0
 8010f9a:	4639      	mov	r1, r7
 8010f9c:	9804      	ldr	r0, [sp, #16]
 8010f9e:	f7ff faa5 	bl	80104ec <quorem>
 8010fa2:	4649      	mov	r1, r9
 8010fa4:	4605      	mov	r5, r0
 8010fa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010faa:	9804      	ldr	r0, [sp, #16]
 8010fac:	f000 fcee 	bl	801198c <__mcmp>
 8010fb0:	4632      	mov	r2, r6
 8010fb2:	9000      	str	r0, [sp, #0]
 8010fb4:	4639      	mov	r1, r7
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f000 fd02 	bl	80119c0 <__mdiff>
 8010fbc:	68c3      	ldr	r3, [r0, #12]
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	bb03      	cbnz	r3, 8011004 <_dtoa_r+0x9fc>
 8010fc2:	4601      	mov	r1, r0
 8010fc4:	9008      	str	r0, [sp, #32]
 8010fc6:	9804      	ldr	r0, [sp, #16]
 8010fc8:	f000 fce0 	bl	801198c <__mcmp>
 8010fcc:	9a08      	ldr	r2, [sp, #32]
 8010fce:	4603      	mov	r3, r0
 8010fd0:	4611      	mov	r1, r2
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	9308      	str	r3, [sp, #32]
 8010fd6:	f000 faf7 	bl	80115c8 <_Bfree>
 8010fda:	9b08      	ldr	r3, [sp, #32]
 8010fdc:	b9a3      	cbnz	r3, 8011008 <_dtoa_r+0xa00>
 8010fde:	9a06      	ldr	r2, [sp, #24]
 8010fe0:	b992      	cbnz	r2, 8011008 <_dtoa_r+0xa00>
 8010fe2:	9a07      	ldr	r2, [sp, #28]
 8010fe4:	b982      	cbnz	r2, 8011008 <_dtoa_r+0xa00>
 8010fe6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010fea:	d029      	beq.n	8011040 <_dtoa_r+0xa38>
 8010fec:	9b00      	ldr	r3, [sp, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	dd01      	ble.n	8010ff6 <_dtoa_r+0x9ee>
 8010ff2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010ff6:	9b05      	ldr	r3, [sp, #20]
 8010ff8:	1c5d      	adds	r5, r3, #1
 8010ffa:	f883 8000 	strb.w	r8, [r3]
 8010ffe:	e782      	b.n	8010f06 <_dtoa_r+0x8fe>
 8011000:	4630      	mov	r0, r6
 8011002:	e7c2      	b.n	8010f8a <_dtoa_r+0x982>
 8011004:	2301      	movs	r3, #1
 8011006:	e7e3      	b.n	8010fd0 <_dtoa_r+0x9c8>
 8011008:	9a00      	ldr	r2, [sp, #0]
 801100a:	2a00      	cmp	r2, #0
 801100c:	db04      	blt.n	8011018 <_dtoa_r+0xa10>
 801100e:	d125      	bne.n	801105c <_dtoa_r+0xa54>
 8011010:	9a06      	ldr	r2, [sp, #24]
 8011012:	bb1a      	cbnz	r2, 801105c <_dtoa_r+0xa54>
 8011014:	9a07      	ldr	r2, [sp, #28]
 8011016:	bb0a      	cbnz	r2, 801105c <_dtoa_r+0xa54>
 8011018:	2b00      	cmp	r3, #0
 801101a:	ddec      	ble.n	8010ff6 <_dtoa_r+0x9ee>
 801101c:	2201      	movs	r2, #1
 801101e:	9904      	ldr	r1, [sp, #16]
 8011020:	4620      	mov	r0, r4
 8011022:	f000 fc5f 	bl	80118e4 <__lshift>
 8011026:	4639      	mov	r1, r7
 8011028:	9004      	str	r0, [sp, #16]
 801102a:	f000 fcaf 	bl	801198c <__mcmp>
 801102e:	2800      	cmp	r0, #0
 8011030:	dc03      	bgt.n	801103a <_dtoa_r+0xa32>
 8011032:	d1e0      	bne.n	8010ff6 <_dtoa_r+0x9ee>
 8011034:	f018 0f01 	tst.w	r8, #1
 8011038:	d0dd      	beq.n	8010ff6 <_dtoa_r+0x9ee>
 801103a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801103e:	d1d8      	bne.n	8010ff2 <_dtoa_r+0x9ea>
 8011040:	9b05      	ldr	r3, [sp, #20]
 8011042:	9a05      	ldr	r2, [sp, #20]
 8011044:	1c5d      	adds	r5, r3, #1
 8011046:	2339      	movs	r3, #57	; 0x39
 8011048:	7013      	strb	r3, [r2, #0]
 801104a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801104e:	2b39      	cmp	r3, #57	; 0x39
 8011050:	f105 32ff 	add.w	r2, r5, #4294967295
 8011054:	d04f      	beq.n	80110f6 <_dtoa_r+0xaee>
 8011056:	3301      	adds	r3, #1
 8011058:	7013      	strb	r3, [r2, #0]
 801105a:	e754      	b.n	8010f06 <_dtoa_r+0x8fe>
 801105c:	9a05      	ldr	r2, [sp, #20]
 801105e:	2b00      	cmp	r3, #0
 8011060:	f102 0501 	add.w	r5, r2, #1
 8011064:	dd06      	ble.n	8011074 <_dtoa_r+0xa6c>
 8011066:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801106a:	d0e9      	beq.n	8011040 <_dtoa_r+0xa38>
 801106c:	f108 0801 	add.w	r8, r8, #1
 8011070:	9b05      	ldr	r3, [sp, #20]
 8011072:	e7c2      	b.n	8010ffa <_dtoa_r+0x9f2>
 8011074:	9a02      	ldr	r2, [sp, #8]
 8011076:	f805 8c01 	strb.w	r8, [r5, #-1]
 801107a:	eba5 030b 	sub.w	r3, r5, fp
 801107e:	4293      	cmp	r3, r2
 8011080:	d021      	beq.n	80110c6 <_dtoa_r+0xabe>
 8011082:	2300      	movs	r3, #0
 8011084:	220a      	movs	r2, #10
 8011086:	9904      	ldr	r1, [sp, #16]
 8011088:	4620      	mov	r0, r4
 801108a:	f000 fab4 	bl	80115f6 <__multadd>
 801108e:	45b1      	cmp	r9, r6
 8011090:	9004      	str	r0, [sp, #16]
 8011092:	f04f 0300 	mov.w	r3, #0
 8011096:	f04f 020a 	mov.w	r2, #10
 801109a:	4649      	mov	r1, r9
 801109c:	4620      	mov	r0, r4
 801109e:	d105      	bne.n	80110ac <_dtoa_r+0xaa4>
 80110a0:	f000 faa9 	bl	80115f6 <__multadd>
 80110a4:	4681      	mov	r9, r0
 80110a6:	4606      	mov	r6, r0
 80110a8:	9505      	str	r5, [sp, #20]
 80110aa:	e776      	b.n	8010f9a <_dtoa_r+0x992>
 80110ac:	f000 faa3 	bl	80115f6 <__multadd>
 80110b0:	4631      	mov	r1, r6
 80110b2:	4681      	mov	r9, r0
 80110b4:	2300      	movs	r3, #0
 80110b6:	220a      	movs	r2, #10
 80110b8:	4620      	mov	r0, r4
 80110ba:	f000 fa9c 	bl	80115f6 <__multadd>
 80110be:	4606      	mov	r6, r0
 80110c0:	e7f2      	b.n	80110a8 <_dtoa_r+0xaa0>
 80110c2:	f04f 0900 	mov.w	r9, #0
 80110c6:	2201      	movs	r2, #1
 80110c8:	9904      	ldr	r1, [sp, #16]
 80110ca:	4620      	mov	r0, r4
 80110cc:	f000 fc0a 	bl	80118e4 <__lshift>
 80110d0:	4639      	mov	r1, r7
 80110d2:	9004      	str	r0, [sp, #16]
 80110d4:	f000 fc5a 	bl	801198c <__mcmp>
 80110d8:	2800      	cmp	r0, #0
 80110da:	dcb6      	bgt.n	801104a <_dtoa_r+0xa42>
 80110dc:	d102      	bne.n	80110e4 <_dtoa_r+0xadc>
 80110de:	f018 0f01 	tst.w	r8, #1
 80110e2:	d1b2      	bne.n	801104a <_dtoa_r+0xa42>
 80110e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80110e8:	2b30      	cmp	r3, #48	; 0x30
 80110ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80110ee:	f47f af0a 	bne.w	8010f06 <_dtoa_r+0x8fe>
 80110f2:	4615      	mov	r5, r2
 80110f4:	e7f6      	b.n	80110e4 <_dtoa_r+0xadc>
 80110f6:	4593      	cmp	fp, r2
 80110f8:	d105      	bne.n	8011106 <_dtoa_r+0xafe>
 80110fa:	2331      	movs	r3, #49	; 0x31
 80110fc:	f10a 0a01 	add.w	sl, sl, #1
 8011100:	f88b 3000 	strb.w	r3, [fp]
 8011104:	e6ff      	b.n	8010f06 <_dtoa_r+0x8fe>
 8011106:	4615      	mov	r5, r2
 8011108:	e79f      	b.n	801104a <_dtoa_r+0xa42>
 801110a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011170 <_dtoa_r+0xb68>
 801110e:	e007      	b.n	8011120 <_dtoa_r+0xb18>
 8011110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011112:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011174 <_dtoa_r+0xb6c>
 8011116:	b11b      	cbz	r3, 8011120 <_dtoa_r+0xb18>
 8011118:	f10b 0308 	add.w	r3, fp, #8
 801111c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801111e:	6013      	str	r3, [r2, #0]
 8011120:	4658      	mov	r0, fp
 8011122:	b017      	add	sp, #92	; 0x5c
 8011124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011128:	9b06      	ldr	r3, [sp, #24]
 801112a:	2b01      	cmp	r3, #1
 801112c:	f77f ae35 	ble.w	8010d9a <_dtoa_r+0x792>
 8011130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011132:	9307      	str	r3, [sp, #28]
 8011134:	e649      	b.n	8010dca <_dtoa_r+0x7c2>
 8011136:	9b02      	ldr	r3, [sp, #8]
 8011138:	2b00      	cmp	r3, #0
 801113a:	dc03      	bgt.n	8011144 <_dtoa_r+0xb3c>
 801113c:	9b06      	ldr	r3, [sp, #24]
 801113e:	2b02      	cmp	r3, #2
 8011140:	f73f aecc 	bgt.w	8010edc <_dtoa_r+0x8d4>
 8011144:	465d      	mov	r5, fp
 8011146:	4639      	mov	r1, r7
 8011148:	9804      	ldr	r0, [sp, #16]
 801114a:	f7ff f9cf 	bl	80104ec <quorem>
 801114e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011152:	f805 8b01 	strb.w	r8, [r5], #1
 8011156:	9a02      	ldr	r2, [sp, #8]
 8011158:	eba5 030b 	sub.w	r3, r5, fp
 801115c:	429a      	cmp	r2, r3
 801115e:	ddb0      	ble.n	80110c2 <_dtoa_r+0xaba>
 8011160:	2300      	movs	r3, #0
 8011162:	220a      	movs	r2, #10
 8011164:	9904      	ldr	r1, [sp, #16]
 8011166:	4620      	mov	r0, r4
 8011168:	f000 fa45 	bl	80115f6 <__multadd>
 801116c:	9004      	str	r0, [sp, #16]
 801116e:	e7ea      	b.n	8011146 <_dtoa_r+0xb3e>
 8011170:	08013820 	.word	0x08013820
 8011174:	08013844 	.word	0x08013844

08011178 <__sflush_r>:
 8011178:	898a      	ldrh	r2, [r1, #12]
 801117a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801117e:	4605      	mov	r5, r0
 8011180:	0710      	lsls	r0, r2, #28
 8011182:	460c      	mov	r4, r1
 8011184:	d458      	bmi.n	8011238 <__sflush_r+0xc0>
 8011186:	684b      	ldr	r3, [r1, #4]
 8011188:	2b00      	cmp	r3, #0
 801118a:	dc05      	bgt.n	8011198 <__sflush_r+0x20>
 801118c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801118e:	2b00      	cmp	r3, #0
 8011190:	dc02      	bgt.n	8011198 <__sflush_r+0x20>
 8011192:	2000      	movs	r0, #0
 8011194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801119a:	2e00      	cmp	r6, #0
 801119c:	d0f9      	beq.n	8011192 <__sflush_r+0x1a>
 801119e:	2300      	movs	r3, #0
 80111a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80111a4:	682f      	ldr	r7, [r5, #0]
 80111a6:	6a21      	ldr	r1, [r4, #32]
 80111a8:	602b      	str	r3, [r5, #0]
 80111aa:	d032      	beq.n	8011212 <__sflush_r+0x9a>
 80111ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80111ae:	89a3      	ldrh	r3, [r4, #12]
 80111b0:	075a      	lsls	r2, r3, #29
 80111b2:	d505      	bpl.n	80111c0 <__sflush_r+0x48>
 80111b4:	6863      	ldr	r3, [r4, #4]
 80111b6:	1ac0      	subs	r0, r0, r3
 80111b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111ba:	b10b      	cbz	r3, 80111c0 <__sflush_r+0x48>
 80111bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111be:	1ac0      	subs	r0, r0, r3
 80111c0:	2300      	movs	r3, #0
 80111c2:	4602      	mov	r2, r0
 80111c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111c6:	6a21      	ldr	r1, [r4, #32]
 80111c8:	4628      	mov	r0, r5
 80111ca:	47b0      	blx	r6
 80111cc:	1c43      	adds	r3, r0, #1
 80111ce:	89a3      	ldrh	r3, [r4, #12]
 80111d0:	d106      	bne.n	80111e0 <__sflush_r+0x68>
 80111d2:	6829      	ldr	r1, [r5, #0]
 80111d4:	291d      	cmp	r1, #29
 80111d6:	d848      	bhi.n	801126a <__sflush_r+0xf2>
 80111d8:	4a29      	ldr	r2, [pc, #164]	; (8011280 <__sflush_r+0x108>)
 80111da:	40ca      	lsrs	r2, r1
 80111dc:	07d6      	lsls	r6, r2, #31
 80111de:	d544      	bpl.n	801126a <__sflush_r+0xf2>
 80111e0:	2200      	movs	r2, #0
 80111e2:	6062      	str	r2, [r4, #4]
 80111e4:	04d9      	lsls	r1, r3, #19
 80111e6:	6922      	ldr	r2, [r4, #16]
 80111e8:	6022      	str	r2, [r4, #0]
 80111ea:	d504      	bpl.n	80111f6 <__sflush_r+0x7e>
 80111ec:	1c42      	adds	r2, r0, #1
 80111ee:	d101      	bne.n	80111f4 <__sflush_r+0x7c>
 80111f0:	682b      	ldr	r3, [r5, #0]
 80111f2:	b903      	cbnz	r3, 80111f6 <__sflush_r+0x7e>
 80111f4:	6560      	str	r0, [r4, #84]	; 0x54
 80111f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111f8:	602f      	str	r7, [r5, #0]
 80111fa:	2900      	cmp	r1, #0
 80111fc:	d0c9      	beq.n	8011192 <__sflush_r+0x1a>
 80111fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011202:	4299      	cmp	r1, r3
 8011204:	d002      	beq.n	801120c <__sflush_r+0x94>
 8011206:	4628      	mov	r0, r5
 8011208:	f000 fc94 	bl	8011b34 <_free_r>
 801120c:	2000      	movs	r0, #0
 801120e:	6360      	str	r0, [r4, #52]	; 0x34
 8011210:	e7c0      	b.n	8011194 <__sflush_r+0x1c>
 8011212:	2301      	movs	r3, #1
 8011214:	4628      	mov	r0, r5
 8011216:	47b0      	blx	r6
 8011218:	1c41      	adds	r1, r0, #1
 801121a:	d1c8      	bne.n	80111ae <__sflush_r+0x36>
 801121c:	682b      	ldr	r3, [r5, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d0c5      	beq.n	80111ae <__sflush_r+0x36>
 8011222:	2b1d      	cmp	r3, #29
 8011224:	d001      	beq.n	801122a <__sflush_r+0xb2>
 8011226:	2b16      	cmp	r3, #22
 8011228:	d101      	bne.n	801122e <__sflush_r+0xb6>
 801122a:	602f      	str	r7, [r5, #0]
 801122c:	e7b1      	b.n	8011192 <__sflush_r+0x1a>
 801122e:	89a3      	ldrh	r3, [r4, #12]
 8011230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011234:	81a3      	strh	r3, [r4, #12]
 8011236:	e7ad      	b.n	8011194 <__sflush_r+0x1c>
 8011238:	690f      	ldr	r7, [r1, #16]
 801123a:	2f00      	cmp	r7, #0
 801123c:	d0a9      	beq.n	8011192 <__sflush_r+0x1a>
 801123e:	0793      	lsls	r3, r2, #30
 8011240:	680e      	ldr	r6, [r1, #0]
 8011242:	bf08      	it	eq
 8011244:	694b      	ldreq	r3, [r1, #20]
 8011246:	600f      	str	r7, [r1, #0]
 8011248:	bf18      	it	ne
 801124a:	2300      	movne	r3, #0
 801124c:	eba6 0807 	sub.w	r8, r6, r7
 8011250:	608b      	str	r3, [r1, #8]
 8011252:	f1b8 0f00 	cmp.w	r8, #0
 8011256:	dd9c      	ble.n	8011192 <__sflush_r+0x1a>
 8011258:	4643      	mov	r3, r8
 801125a:	463a      	mov	r2, r7
 801125c:	6a21      	ldr	r1, [r4, #32]
 801125e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011260:	4628      	mov	r0, r5
 8011262:	47b0      	blx	r6
 8011264:	2800      	cmp	r0, #0
 8011266:	dc06      	bgt.n	8011276 <__sflush_r+0xfe>
 8011268:	89a3      	ldrh	r3, [r4, #12]
 801126a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801126e:	81a3      	strh	r3, [r4, #12]
 8011270:	f04f 30ff 	mov.w	r0, #4294967295
 8011274:	e78e      	b.n	8011194 <__sflush_r+0x1c>
 8011276:	4407      	add	r7, r0
 8011278:	eba8 0800 	sub.w	r8, r8, r0
 801127c:	e7e9      	b.n	8011252 <__sflush_r+0xda>
 801127e:	bf00      	nop
 8011280:	20400001 	.word	0x20400001

08011284 <_fflush_r>:
 8011284:	b538      	push	{r3, r4, r5, lr}
 8011286:	690b      	ldr	r3, [r1, #16]
 8011288:	4605      	mov	r5, r0
 801128a:	460c      	mov	r4, r1
 801128c:	b1db      	cbz	r3, 80112c6 <_fflush_r+0x42>
 801128e:	b118      	cbz	r0, 8011298 <_fflush_r+0x14>
 8011290:	6983      	ldr	r3, [r0, #24]
 8011292:	b90b      	cbnz	r3, 8011298 <_fflush_r+0x14>
 8011294:	f000 f860 	bl	8011358 <__sinit>
 8011298:	4b0c      	ldr	r3, [pc, #48]	; (80112cc <_fflush_r+0x48>)
 801129a:	429c      	cmp	r4, r3
 801129c:	d109      	bne.n	80112b2 <_fflush_r+0x2e>
 801129e:	686c      	ldr	r4, [r5, #4]
 80112a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112a4:	b17b      	cbz	r3, 80112c6 <_fflush_r+0x42>
 80112a6:	4621      	mov	r1, r4
 80112a8:	4628      	mov	r0, r5
 80112aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112ae:	f7ff bf63 	b.w	8011178 <__sflush_r>
 80112b2:	4b07      	ldr	r3, [pc, #28]	; (80112d0 <_fflush_r+0x4c>)
 80112b4:	429c      	cmp	r4, r3
 80112b6:	d101      	bne.n	80112bc <_fflush_r+0x38>
 80112b8:	68ac      	ldr	r4, [r5, #8]
 80112ba:	e7f1      	b.n	80112a0 <_fflush_r+0x1c>
 80112bc:	4b05      	ldr	r3, [pc, #20]	; (80112d4 <_fflush_r+0x50>)
 80112be:	429c      	cmp	r4, r3
 80112c0:	bf08      	it	eq
 80112c2:	68ec      	ldreq	r4, [r5, #12]
 80112c4:	e7ec      	b.n	80112a0 <_fflush_r+0x1c>
 80112c6:	2000      	movs	r0, #0
 80112c8:	bd38      	pop	{r3, r4, r5, pc}
 80112ca:	bf00      	nop
 80112cc:	08013874 	.word	0x08013874
 80112d0:	08013894 	.word	0x08013894
 80112d4:	08013854 	.word	0x08013854

080112d8 <std>:
 80112d8:	2300      	movs	r3, #0
 80112da:	b510      	push	{r4, lr}
 80112dc:	4604      	mov	r4, r0
 80112de:	e9c0 3300 	strd	r3, r3, [r0]
 80112e2:	6083      	str	r3, [r0, #8]
 80112e4:	8181      	strh	r1, [r0, #12]
 80112e6:	6643      	str	r3, [r0, #100]	; 0x64
 80112e8:	81c2      	strh	r2, [r0, #14]
 80112ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112ee:	6183      	str	r3, [r0, #24]
 80112f0:	4619      	mov	r1, r3
 80112f2:	2208      	movs	r2, #8
 80112f4:	305c      	adds	r0, #92	; 0x5c
 80112f6:	f7fe faab 	bl	800f850 <memset>
 80112fa:	4b05      	ldr	r3, [pc, #20]	; (8011310 <std+0x38>)
 80112fc:	6263      	str	r3, [r4, #36]	; 0x24
 80112fe:	4b05      	ldr	r3, [pc, #20]	; (8011314 <std+0x3c>)
 8011300:	62a3      	str	r3, [r4, #40]	; 0x28
 8011302:	4b05      	ldr	r3, [pc, #20]	; (8011318 <std+0x40>)
 8011304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011306:	4b05      	ldr	r3, [pc, #20]	; (801131c <std+0x44>)
 8011308:	6224      	str	r4, [r4, #32]
 801130a:	6323      	str	r3, [r4, #48]	; 0x30
 801130c:	bd10      	pop	{r4, pc}
 801130e:	bf00      	nop
 8011310:	08011f25 	.word	0x08011f25
 8011314:	08011f47 	.word	0x08011f47
 8011318:	08011f7f 	.word	0x08011f7f
 801131c:	08011fa3 	.word	0x08011fa3

08011320 <_cleanup_r>:
 8011320:	4901      	ldr	r1, [pc, #4]	; (8011328 <_cleanup_r+0x8>)
 8011322:	f000 b885 	b.w	8011430 <_fwalk_reent>
 8011326:	bf00      	nop
 8011328:	08011285 	.word	0x08011285

0801132c <__sfmoreglue>:
 801132c:	b570      	push	{r4, r5, r6, lr}
 801132e:	1e4a      	subs	r2, r1, #1
 8011330:	2568      	movs	r5, #104	; 0x68
 8011332:	4355      	muls	r5, r2
 8011334:	460e      	mov	r6, r1
 8011336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801133a:	f000 fc49 	bl	8011bd0 <_malloc_r>
 801133e:	4604      	mov	r4, r0
 8011340:	b140      	cbz	r0, 8011354 <__sfmoreglue+0x28>
 8011342:	2100      	movs	r1, #0
 8011344:	e9c0 1600 	strd	r1, r6, [r0]
 8011348:	300c      	adds	r0, #12
 801134a:	60a0      	str	r0, [r4, #8]
 801134c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011350:	f7fe fa7e 	bl	800f850 <memset>
 8011354:	4620      	mov	r0, r4
 8011356:	bd70      	pop	{r4, r5, r6, pc}

08011358 <__sinit>:
 8011358:	6983      	ldr	r3, [r0, #24]
 801135a:	b510      	push	{r4, lr}
 801135c:	4604      	mov	r4, r0
 801135e:	bb33      	cbnz	r3, 80113ae <__sinit+0x56>
 8011360:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011364:	6503      	str	r3, [r0, #80]	; 0x50
 8011366:	4b12      	ldr	r3, [pc, #72]	; (80113b0 <__sinit+0x58>)
 8011368:	4a12      	ldr	r2, [pc, #72]	; (80113b4 <__sinit+0x5c>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	6282      	str	r2, [r0, #40]	; 0x28
 801136e:	4298      	cmp	r0, r3
 8011370:	bf04      	itt	eq
 8011372:	2301      	moveq	r3, #1
 8011374:	6183      	streq	r3, [r0, #24]
 8011376:	f000 f81f 	bl	80113b8 <__sfp>
 801137a:	6060      	str	r0, [r4, #4]
 801137c:	4620      	mov	r0, r4
 801137e:	f000 f81b 	bl	80113b8 <__sfp>
 8011382:	60a0      	str	r0, [r4, #8]
 8011384:	4620      	mov	r0, r4
 8011386:	f000 f817 	bl	80113b8 <__sfp>
 801138a:	2200      	movs	r2, #0
 801138c:	60e0      	str	r0, [r4, #12]
 801138e:	2104      	movs	r1, #4
 8011390:	6860      	ldr	r0, [r4, #4]
 8011392:	f7ff ffa1 	bl	80112d8 <std>
 8011396:	2201      	movs	r2, #1
 8011398:	2109      	movs	r1, #9
 801139a:	68a0      	ldr	r0, [r4, #8]
 801139c:	f7ff ff9c 	bl	80112d8 <std>
 80113a0:	2202      	movs	r2, #2
 80113a2:	2112      	movs	r1, #18
 80113a4:	68e0      	ldr	r0, [r4, #12]
 80113a6:	f7ff ff97 	bl	80112d8 <std>
 80113aa:	2301      	movs	r3, #1
 80113ac:	61a3      	str	r3, [r4, #24]
 80113ae:	bd10      	pop	{r4, pc}
 80113b0:	08013810 	.word	0x08013810
 80113b4:	08011321 	.word	0x08011321

080113b8 <__sfp>:
 80113b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ba:	4b1b      	ldr	r3, [pc, #108]	; (8011428 <__sfp+0x70>)
 80113bc:	681e      	ldr	r6, [r3, #0]
 80113be:	69b3      	ldr	r3, [r6, #24]
 80113c0:	4607      	mov	r7, r0
 80113c2:	b913      	cbnz	r3, 80113ca <__sfp+0x12>
 80113c4:	4630      	mov	r0, r6
 80113c6:	f7ff ffc7 	bl	8011358 <__sinit>
 80113ca:	3648      	adds	r6, #72	; 0x48
 80113cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80113d0:	3b01      	subs	r3, #1
 80113d2:	d503      	bpl.n	80113dc <__sfp+0x24>
 80113d4:	6833      	ldr	r3, [r6, #0]
 80113d6:	b133      	cbz	r3, 80113e6 <__sfp+0x2e>
 80113d8:	6836      	ldr	r6, [r6, #0]
 80113da:	e7f7      	b.n	80113cc <__sfp+0x14>
 80113dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80113e0:	b16d      	cbz	r5, 80113fe <__sfp+0x46>
 80113e2:	3468      	adds	r4, #104	; 0x68
 80113e4:	e7f4      	b.n	80113d0 <__sfp+0x18>
 80113e6:	2104      	movs	r1, #4
 80113e8:	4638      	mov	r0, r7
 80113ea:	f7ff ff9f 	bl	801132c <__sfmoreglue>
 80113ee:	6030      	str	r0, [r6, #0]
 80113f0:	2800      	cmp	r0, #0
 80113f2:	d1f1      	bne.n	80113d8 <__sfp+0x20>
 80113f4:	230c      	movs	r3, #12
 80113f6:	603b      	str	r3, [r7, #0]
 80113f8:	4604      	mov	r4, r0
 80113fa:	4620      	mov	r0, r4
 80113fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113fe:	4b0b      	ldr	r3, [pc, #44]	; (801142c <__sfp+0x74>)
 8011400:	6665      	str	r5, [r4, #100]	; 0x64
 8011402:	e9c4 5500 	strd	r5, r5, [r4]
 8011406:	60a5      	str	r5, [r4, #8]
 8011408:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801140c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011410:	2208      	movs	r2, #8
 8011412:	4629      	mov	r1, r5
 8011414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011418:	f7fe fa1a 	bl	800f850 <memset>
 801141c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011424:	e7e9      	b.n	80113fa <__sfp+0x42>
 8011426:	bf00      	nop
 8011428:	08013810 	.word	0x08013810
 801142c:	ffff0001 	.word	0xffff0001

08011430 <_fwalk_reent>:
 8011430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011434:	4680      	mov	r8, r0
 8011436:	4689      	mov	r9, r1
 8011438:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801143c:	2600      	movs	r6, #0
 801143e:	b914      	cbnz	r4, 8011446 <_fwalk_reent+0x16>
 8011440:	4630      	mov	r0, r6
 8011442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011446:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801144a:	3f01      	subs	r7, #1
 801144c:	d501      	bpl.n	8011452 <_fwalk_reent+0x22>
 801144e:	6824      	ldr	r4, [r4, #0]
 8011450:	e7f5      	b.n	801143e <_fwalk_reent+0xe>
 8011452:	89ab      	ldrh	r3, [r5, #12]
 8011454:	2b01      	cmp	r3, #1
 8011456:	d907      	bls.n	8011468 <_fwalk_reent+0x38>
 8011458:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801145c:	3301      	adds	r3, #1
 801145e:	d003      	beq.n	8011468 <_fwalk_reent+0x38>
 8011460:	4629      	mov	r1, r5
 8011462:	4640      	mov	r0, r8
 8011464:	47c8      	blx	r9
 8011466:	4306      	orrs	r6, r0
 8011468:	3568      	adds	r5, #104	; 0x68
 801146a:	e7ee      	b.n	801144a <_fwalk_reent+0x1a>

0801146c <_localeconv_r>:
 801146c:	4b04      	ldr	r3, [pc, #16]	; (8011480 <_localeconv_r+0x14>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	6a18      	ldr	r0, [r3, #32]
 8011472:	4b04      	ldr	r3, [pc, #16]	; (8011484 <_localeconv_r+0x18>)
 8011474:	2800      	cmp	r0, #0
 8011476:	bf08      	it	eq
 8011478:	4618      	moveq	r0, r3
 801147a:	30f0      	adds	r0, #240	; 0xf0
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop
 8011480:	20001a88 	.word	0x20001a88
 8011484:	20001aec 	.word	0x20001aec

08011488 <__swhatbuf_r>:
 8011488:	b570      	push	{r4, r5, r6, lr}
 801148a:	460e      	mov	r6, r1
 801148c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011490:	2900      	cmp	r1, #0
 8011492:	b096      	sub	sp, #88	; 0x58
 8011494:	4614      	mov	r4, r2
 8011496:	461d      	mov	r5, r3
 8011498:	da07      	bge.n	80114aa <__swhatbuf_r+0x22>
 801149a:	2300      	movs	r3, #0
 801149c:	602b      	str	r3, [r5, #0]
 801149e:	89b3      	ldrh	r3, [r6, #12]
 80114a0:	061a      	lsls	r2, r3, #24
 80114a2:	d410      	bmi.n	80114c6 <__swhatbuf_r+0x3e>
 80114a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114a8:	e00e      	b.n	80114c8 <__swhatbuf_r+0x40>
 80114aa:	466a      	mov	r2, sp
 80114ac:	f000 fda0 	bl	8011ff0 <_fstat_r>
 80114b0:	2800      	cmp	r0, #0
 80114b2:	dbf2      	blt.n	801149a <__swhatbuf_r+0x12>
 80114b4:	9a01      	ldr	r2, [sp, #4]
 80114b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80114ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80114be:	425a      	negs	r2, r3
 80114c0:	415a      	adcs	r2, r3
 80114c2:	602a      	str	r2, [r5, #0]
 80114c4:	e7ee      	b.n	80114a4 <__swhatbuf_r+0x1c>
 80114c6:	2340      	movs	r3, #64	; 0x40
 80114c8:	2000      	movs	r0, #0
 80114ca:	6023      	str	r3, [r4, #0]
 80114cc:	b016      	add	sp, #88	; 0x58
 80114ce:	bd70      	pop	{r4, r5, r6, pc}

080114d0 <__smakebuf_r>:
 80114d0:	898b      	ldrh	r3, [r1, #12]
 80114d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114d4:	079d      	lsls	r5, r3, #30
 80114d6:	4606      	mov	r6, r0
 80114d8:	460c      	mov	r4, r1
 80114da:	d507      	bpl.n	80114ec <__smakebuf_r+0x1c>
 80114dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114e0:	6023      	str	r3, [r4, #0]
 80114e2:	6123      	str	r3, [r4, #16]
 80114e4:	2301      	movs	r3, #1
 80114e6:	6163      	str	r3, [r4, #20]
 80114e8:	b002      	add	sp, #8
 80114ea:	bd70      	pop	{r4, r5, r6, pc}
 80114ec:	ab01      	add	r3, sp, #4
 80114ee:	466a      	mov	r2, sp
 80114f0:	f7ff ffca 	bl	8011488 <__swhatbuf_r>
 80114f4:	9900      	ldr	r1, [sp, #0]
 80114f6:	4605      	mov	r5, r0
 80114f8:	4630      	mov	r0, r6
 80114fa:	f000 fb69 	bl	8011bd0 <_malloc_r>
 80114fe:	b948      	cbnz	r0, 8011514 <__smakebuf_r+0x44>
 8011500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011504:	059a      	lsls	r2, r3, #22
 8011506:	d4ef      	bmi.n	80114e8 <__smakebuf_r+0x18>
 8011508:	f023 0303 	bic.w	r3, r3, #3
 801150c:	f043 0302 	orr.w	r3, r3, #2
 8011510:	81a3      	strh	r3, [r4, #12]
 8011512:	e7e3      	b.n	80114dc <__smakebuf_r+0xc>
 8011514:	4b0d      	ldr	r3, [pc, #52]	; (801154c <__smakebuf_r+0x7c>)
 8011516:	62b3      	str	r3, [r6, #40]	; 0x28
 8011518:	89a3      	ldrh	r3, [r4, #12]
 801151a:	6020      	str	r0, [r4, #0]
 801151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011520:	81a3      	strh	r3, [r4, #12]
 8011522:	9b00      	ldr	r3, [sp, #0]
 8011524:	6163      	str	r3, [r4, #20]
 8011526:	9b01      	ldr	r3, [sp, #4]
 8011528:	6120      	str	r0, [r4, #16]
 801152a:	b15b      	cbz	r3, 8011544 <__smakebuf_r+0x74>
 801152c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011530:	4630      	mov	r0, r6
 8011532:	f000 fd6f 	bl	8012014 <_isatty_r>
 8011536:	b128      	cbz	r0, 8011544 <__smakebuf_r+0x74>
 8011538:	89a3      	ldrh	r3, [r4, #12]
 801153a:	f023 0303 	bic.w	r3, r3, #3
 801153e:	f043 0301 	orr.w	r3, r3, #1
 8011542:	81a3      	strh	r3, [r4, #12]
 8011544:	89a3      	ldrh	r3, [r4, #12]
 8011546:	431d      	orrs	r5, r3
 8011548:	81a5      	strh	r5, [r4, #12]
 801154a:	e7cd      	b.n	80114e8 <__smakebuf_r+0x18>
 801154c:	08011321 	.word	0x08011321

08011550 <malloc>:
 8011550:	4b02      	ldr	r3, [pc, #8]	; (801155c <malloc+0xc>)
 8011552:	4601      	mov	r1, r0
 8011554:	6818      	ldr	r0, [r3, #0]
 8011556:	f000 bb3b 	b.w	8011bd0 <_malloc_r>
 801155a:	bf00      	nop
 801155c:	20001a88 	.word	0x20001a88

08011560 <_Balloc>:
 8011560:	b570      	push	{r4, r5, r6, lr}
 8011562:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011564:	4604      	mov	r4, r0
 8011566:	460e      	mov	r6, r1
 8011568:	b93d      	cbnz	r5, 801157a <_Balloc+0x1a>
 801156a:	2010      	movs	r0, #16
 801156c:	f7ff fff0 	bl	8011550 <malloc>
 8011570:	6260      	str	r0, [r4, #36]	; 0x24
 8011572:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011576:	6005      	str	r5, [r0, #0]
 8011578:	60c5      	str	r5, [r0, #12]
 801157a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801157c:	68eb      	ldr	r3, [r5, #12]
 801157e:	b183      	cbz	r3, 80115a2 <_Balloc+0x42>
 8011580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011588:	b9b8      	cbnz	r0, 80115ba <_Balloc+0x5a>
 801158a:	2101      	movs	r1, #1
 801158c:	fa01 f506 	lsl.w	r5, r1, r6
 8011590:	1d6a      	adds	r2, r5, #5
 8011592:	0092      	lsls	r2, r2, #2
 8011594:	4620      	mov	r0, r4
 8011596:	f000 fabf 	bl	8011b18 <_calloc_r>
 801159a:	b160      	cbz	r0, 80115b6 <_Balloc+0x56>
 801159c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80115a0:	e00e      	b.n	80115c0 <_Balloc+0x60>
 80115a2:	2221      	movs	r2, #33	; 0x21
 80115a4:	2104      	movs	r1, #4
 80115a6:	4620      	mov	r0, r4
 80115a8:	f000 fab6 	bl	8011b18 <_calloc_r>
 80115ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115ae:	60e8      	str	r0, [r5, #12]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1e4      	bne.n	8011580 <_Balloc+0x20>
 80115b6:	2000      	movs	r0, #0
 80115b8:	bd70      	pop	{r4, r5, r6, pc}
 80115ba:	6802      	ldr	r2, [r0, #0]
 80115bc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80115c0:	2300      	movs	r3, #0
 80115c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115c6:	e7f7      	b.n	80115b8 <_Balloc+0x58>

080115c8 <_Bfree>:
 80115c8:	b570      	push	{r4, r5, r6, lr}
 80115ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80115cc:	4606      	mov	r6, r0
 80115ce:	460d      	mov	r5, r1
 80115d0:	b93c      	cbnz	r4, 80115e2 <_Bfree+0x1a>
 80115d2:	2010      	movs	r0, #16
 80115d4:	f7ff ffbc 	bl	8011550 <malloc>
 80115d8:	6270      	str	r0, [r6, #36]	; 0x24
 80115da:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115de:	6004      	str	r4, [r0, #0]
 80115e0:	60c4      	str	r4, [r0, #12]
 80115e2:	b13d      	cbz	r5, 80115f4 <_Bfree+0x2c>
 80115e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80115e6:	686a      	ldr	r2, [r5, #4]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115ee:	6029      	str	r1, [r5, #0]
 80115f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80115f4:	bd70      	pop	{r4, r5, r6, pc}

080115f6 <__multadd>:
 80115f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115fa:	690d      	ldr	r5, [r1, #16]
 80115fc:	461f      	mov	r7, r3
 80115fe:	4606      	mov	r6, r0
 8011600:	460c      	mov	r4, r1
 8011602:	f101 0c14 	add.w	ip, r1, #20
 8011606:	2300      	movs	r3, #0
 8011608:	f8dc 0000 	ldr.w	r0, [ip]
 801160c:	b281      	uxth	r1, r0
 801160e:	fb02 7101 	mla	r1, r2, r1, r7
 8011612:	0c0f      	lsrs	r7, r1, #16
 8011614:	0c00      	lsrs	r0, r0, #16
 8011616:	fb02 7000 	mla	r0, r2, r0, r7
 801161a:	b289      	uxth	r1, r1
 801161c:	3301      	adds	r3, #1
 801161e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011622:	429d      	cmp	r5, r3
 8011624:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011628:	f84c 1b04 	str.w	r1, [ip], #4
 801162c:	dcec      	bgt.n	8011608 <__multadd+0x12>
 801162e:	b1d7      	cbz	r7, 8011666 <__multadd+0x70>
 8011630:	68a3      	ldr	r3, [r4, #8]
 8011632:	42ab      	cmp	r3, r5
 8011634:	dc12      	bgt.n	801165c <__multadd+0x66>
 8011636:	6861      	ldr	r1, [r4, #4]
 8011638:	4630      	mov	r0, r6
 801163a:	3101      	adds	r1, #1
 801163c:	f7ff ff90 	bl	8011560 <_Balloc>
 8011640:	6922      	ldr	r2, [r4, #16]
 8011642:	3202      	adds	r2, #2
 8011644:	f104 010c 	add.w	r1, r4, #12
 8011648:	4680      	mov	r8, r0
 801164a:	0092      	lsls	r2, r2, #2
 801164c:	300c      	adds	r0, #12
 801164e:	f7fe f8db 	bl	800f808 <memcpy>
 8011652:	4621      	mov	r1, r4
 8011654:	4630      	mov	r0, r6
 8011656:	f7ff ffb7 	bl	80115c8 <_Bfree>
 801165a:	4644      	mov	r4, r8
 801165c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011660:	3501      	adds	r5, #1
 8011662:	615f      	str	r7, [r3, #20]
 8011664:	6125      	str	r5, [r4, #16]
 8011666:	4620      	mov	r0, r4
 8011668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801166c <__hi0bits>:
 801166c:	0c02      	lsrs	r2, r0, #16
 801166e:	0412      	lsls	r2, r2, #16
 8011670:	4603      	mov	r3, r0
 8011672:	b9b2      	cbnz	r2, 80116a2 <__hi0bits+0x36>
 8011674:	0403      	lsls	r3, r0, #16
 8011676:	2010      	movs	r0, #16
 8011678:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801167c:	bf04      	itt	eq
 801167e:	021b      	lsleq	r3, r3, #8
 8011680:	3008      	addeq	r0, #8
 8011682:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011686:	bf04      	itt	eq
 8011688:	011b      	lsleq	r3, r3, #4
 801168a:	3004      	addeq	r0, #4
 801168c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011690:	bf04      	itt	eq
 8011692:	009b      	lsleq	r3, r3, #2
 8011694:	3002      	addeq	r0, #2
 8011696:	2b00      	cmp	r3, #0
 8011698:	db06      	blt.n	80116a8 <__hi0bits+0x3c>
 801169a:	005b      	lsls	r3, r3, #1
 801169c:	d503      	bpl.n	80116a6 <__hi0bits+0x3a>
 801169e:	3001      	adds	r0, #1
 80116a0:	4770      	bx	lr
 80116a2:	2000      	movs	r0, #0
 80116a4:	e7e8      	b.n	8011678 <__hi0bits+0xc>
 80116a6:	2020      	movs	r0, #32
 80116a8:	4770      	bx	lr

080116aa <__lo0bits>:
 80116aa:	6803      	ldr	r3, [r0, #0]
 80116ac:	f013 0207 	ands.w	r2, r3, #7
 80116b0:	4601      	mov	r1, r0
 80116b2:	d00b      	beq.n	80116cc <__lo0bits+0x22>
 80116b4:	07da      	lsls	r2, r3, #31
 80116b6:	d423      	bmi.n	8011700 <__lo0bits+0x56>
 80116b8:	0798      	lsls	r0, r3, #30
 80116ba:	bf49      	itett	mi
 80116bc:	085b      	lsrmi	r3, r3, #1
 80116be:	089b      	lsrpl	r3, r3, #2
 80116c0:	2001      	movmi	r0, #1
 80116c2:	600b      	strmi	r3, [r1, #0]
 80116c4:	bf5c      	itt	pl
 80116c6:	600b      	strpl	r3, [r1, #0]
 80116c8:	2002      	movpl	r0, #2
 80116ca:	4770      	bx	lr
 80116cc:	b298      	uxth	r0, r3
 80116ce:	b9a8      	cbnz	r0, 80116fc <__lo0bits+0x52>
 80116d0:	0c1b      	lsrs	r3, r3, #16
 80116d2:	2010      	movs	r0, #16
 80116d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80116d8:	bf04      	itt	eq
 80116da:	0a1b      	lsreq	r3, r3, #8
 80116dc:	3008      	addeq	r0, #8
 80116de:	071a      	lsls	r2, r3, #28
 80116e0:	bf04      	itt	eq
 80116e2:	091b      	lsreq	r3, r3, #4
 80116e4:	3004      	addeq	r0, #4
 80116e6:	079a      	lsls	r2, r3, #30
 80116e8:	bf04      	itt	eq
 80116ea:	089b      	lsreq	r3, r3, #2
 80116ec:	3002      	addeq	r0, #2
 80116ee:	07da      	lsls	r2, r3, #31
 80116f0:	d402      	bmi.n	80116f8 <__lo0bits+0x4e>
 80116f2:	085b      	lsrs	r3, r3, #1
 80116f4:	d006      	beq.n	8011704 <__lo0bits+0x5a>
 80116f6:	3001      	adds	r0, #1
 80116f8:	600b      	str	r3, [r1, #0]
 80116fa:	4770      	bx	lr
 80116fc:	4610      	mov	r0, r2
 80116fe:	e7e9      	b.n	80116d4 <__lo0bits+0x2a>
 8011700:	2000      	movs	r0, #0
 8011702:	4770      	bx	lr
 8011704:	2020      	movs	r0, #32
 8011706:	4770      	bx	lr

08011708 <__i2b>:
 8011708:	b510      	push	{r4, lr}
 801170a:	460c      	mov	r4, r1
 801170c:	2101      	movs	r1, #1
 801170e:	f7ff ff27 	bl	8011560 <_Balloc>
 8011712:	2201      	movs	r2, #1
 8011714:	6144      	str	r4, [r0, #20]
 8011716:	6102      	str	r2, [r0, #16]
 8011718:	bd10      	pop	{r4, pc}

0801171a <__multiply>:
 801171a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801171e:	4614      	mov	r4, r2
 8011720:	690a      	ldr	r2, [r1, #16]
 8011722:	6923      	ldr	r3, [r4, #16]
 8011724:	429a      	cmp	r2, r3
 8011726:	bfb8      	it	lt
 8011728:	460b      	movlt	r3, r1
 801172a:	4688      	mov	r8, r1
 801172c:	bfbc      	itt	lt
 801172e:	46a0      	movlt	r8, r4
 8011730:	461c      	movlt	r4, r3
 8011732:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011736:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801173a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801173e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011742:	eb07 0609 	add.w	r6, r7, r9
 8011746:	42b3      	cmp	r3, r6
 8011748:	bfb8      	it	lt
 801174a:	3101      	addlt	r1, #1
 801174c:	f7ff ff08 	bl	8011560 <_Balloc>
 8011750:	f100 0514 	add.w	r5, r0, #20
 8011754:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011758:	462b      	mov	r3, r5
 801175a:	2200      	movs	r2, #0
 801175c:	4573      	cmp	r3, lr
 801175e:	d316      	bcc.n	801178e <__multiply+0x74>
 8011760:	f104 0214 	add.w	r2, r4, #20
 8011764:	f108 0114 	add.w	r1, r8, #20
 8011768:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801176c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011770:	9300      	str	r3, [sp, #0]
 8011772:	9b00      	ldr	r3, [sp, #0]
 8011774:	9201      	str	r2, [sp, #4]
 8011776:	4293      	cmp	r3, r2
 8011778:	d80c      	bhi.n	8011794 <__multiply+0x7a>
 801177a:	2e00      	cmp	r6, #0
 801177c:	dd03      	ble.n	8011786 <__multiply+0x6c>
 801177e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011782:	2b00      	cmp	r3, #0
 8011784:	d05d      	beq.n	8011842 <__multiply+0x128>
 8011786:	6106      	str	r6, [r0, #16]
 8011788:	b003      	add	sp, #12
 801178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178e:	f843 2b04 	str.w	r2, [r3], #4
 8011792:	e7e3      	b.n	801175c <__multiply+0x42>
 8011794:	f8b2 b000 	ldrh.w	fp, [r2]
 8011798:	f1bb 0f00 	cmp.w	fp, #0
 801179c:	d023      	beq.n	80117e6 <__multiply+0xcc>
 801179e:	4689      	mov	r9, r1
 80117a0:	46ac      	mov	ip, r5
 80117a2:	f04f 0800 	mov.w	r8, #0
 80117a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80117aa:	f8dc a000 	ldr.w	sl, [ip]
 80117ae:	b2a3      	uxth	r3, r4
 80117b0:	fa1f fa8a 	uxth.w	sl, sl
 80117b4:	fb0b a303 	mla	r3, fp, r3, sl
 80117b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80117bc:	f8dc 4000 	ldr.w	r4, [ip]
 80117c0:	4443      	add	r3, r8
 80117c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80117c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80117ca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80117ce:	46e2      	mov	sl, ip
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80117d6:	454f      	cmp	r7, r9
 80117d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80117dc:	f84a 3b04 	str.w	r3, [sl], #4
 80117e0:	d82b      	bhi.n	801183a <__multiply+0x120>
 80117e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80117e6:	9b01      	ldr	r3, [sp, #4]
 80117e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80117ec:	3204      	adds	r2, #4
 80117ee:	f1ba 0f00 	cmp.w	sl, #0
 80117f2:	d020      	beq.n	8011836 <__multiply+0x11c>
 80117f4:	682b      	ldr	r3, [r5, #0]
 80117f6:	4689      	mov	r9, r1
 80117f8:	46a8      	mov	r8, r5
 80117fa:	f04f 0b00 	mov.w	fp, #0
 80117fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8011802:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011806:	fb0a 440c 	mla	r4, sl, ip, r4
 801180a:	445c      	add	r4, fp
 801180c:	46c4      	mov	ip, r8
 801180e:	b29b      	uxth	r3, r3
 8011810:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011814:	f84c 3b04 	str.w	r3, [ip], #4
 8011818:	f859 3b04 	ldr.w	r3, [r9], #4
 801181c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011820:	0c1b      	lsrs	r3, r3, #16
 8011822:	fb0a b303 	mla	r3, sl, r3, fp
 8011826:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801182a:	454f      	cmp	r7, r9
 801182c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011830:	d805      	bhi.n	801183e <__multiply+0x124>
 8011832:	f8c8 3004 	str.w	r3, [r8, #4]
 8011836:	3504      	adds	r5, #4
 8011838:	e79b      	b.n	8011772 <__multiply+0x58>
 801183a:	46d4      	mov	ip, sl
 801183c:	e7b3      	b.n	80117a6 <__multiply+0x8c>
 801183e:	46e0      	mov	r8, ip
 8011840:	e7dd      	b.n	80117fe <__multiply+0xe4>
 8011842:	3e01      	subs	r6, #1
 8011844:	e799      	b.n	801177a <__multiply+0x60>
	...

08011848 <__pow5mult>:
 8011848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801184c:	4615      	mov	r5, r2
 801184e:	f012 0203 	ands.w	r2, r2, #3
 8011852:	4606      	mov	r6, r0
 8011854:	460f      	mov	r7, r1
 8011856:	d007      	beq.n	8011868 <__pow5mult+0x20>
 8011858:	3a01      	subs	r2, #1
 801185a:	4c21      	ldr	r4, [pc, #132]	; (80118e0 <__pow5mult+0x98>)
 801185c:	2300      	movs	r3, #0
 801185e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011862:	f7ff fec8 	bl	80115f6 <__multadd>
 8011866:	4607      	mov	r7, r0
 8011868:	10ad      	asrs	r5, r5, #2
 801186a:	d035      	beq.n	80118d8 <__pow5mult+0x90>
 801186c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801186e:	b93c      	cbnz	r4, 8011880 <__pow5mult+0x38>
 8011870:	2010      	movs	r0, #16
 8011872:	f7ff fe6d 	bl	8011550 <malloc>
 8011876:	6270      	str	r0, [r6, #36]	; 0x24
 8011878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801187c:	6004      	str	r4, [r0, #0]
 801187e:	60c4      	str	r4, [r0, #12]
 8011880:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011888:	b94c      	cbnz	r4, 801189e <__pow5mult+0x56>
 801188a:	f240 2171 	movw	r1, #625	; 0x271
 801188e:	4630      	mov	r0, r6
 8011890:	f7ff ff3a 	bl	8011708 <__i2b>
 8011894:	2300      	movs	r3, #0
 8011896:	f8c8 0008 	str.w	r0, [r8, #8]
 801189a:	4604      	mov	r4, r0
 801189c:	6003      	str	r3, [r0, #0]
 801189e:	f04f 0800 	mov.w	r8, #0
 80118a2:	07eb      	lsls	r3, r5, #31
 80118a4:	d50a      	bpl.n	80118bc <__pow5mult+0x74>
 80118a6:	4639      	mov	r1, r7
 80118a8:	4622      	mov	r2, r4
 80118aa:	4630      	mov	r0, r6
 80118ac:	f7ff ff35 	bl	801171a <__multiply>
 80118b0:	4639      	mov	r1, r7
 80118b2:	4681      	mov	r9, r0
 80118b4:	4630      	mov	r0, r6
 80118b6:	f7ff fe87 	bl	80115c8 <_Bfree>
 80118ba:	464f      	mov	r7, r9
 80118bc:	106d      	asrs	r5, r5, #1
 80118be:	d00b      	beq.n	80118d8 <__pow5mult+0x90>
 80118c0:	6820      	ldr	r0, [r4, #0]
 80118c2:	b938      	cbnz	r0, 80118d4 <__pow5mult+0x8c>
 80118c4:	4622      	mov	r2, r4
 80118c6:	4621      	mov	r1, r4
 80118c8:	4630      	mov	r0, r6
 80118ca:	f7ff ff26 	bl	801171a <__multiply>
 80118ce:	6020      	str	r0, [r4, #0]
 80118d0:	f8c0 8000 	str.w	r8, [r0]
 80118d4:	4604      	mov	r4, r0
 80118d6:	e7e4      	b.n	80118a2 <__pow5mult+0x5a>
 80118d8:	4638      	mov	r0, r7
 80118da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118de:	bf00      	nop
 80118e0:	080139a8 	.word	0x080139a8

080118e4 <__lshift>:
 80118e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e8:	460c      	mov	r4, r1
 80118ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80118ee:	6923      	ldr	r3, [r4, #16]
 80118f0:	6849      	ldr	r1, [r1, #4]
 80118f2:	eb0a 0903 	add.w	r9, sl, r3
 80118f6:	68a3      	ldr	r3, [r4, #8]
 80118f8:	4607      	mov	r7, r0
 80118fa:	4616      	mov	r6, r2
 80118fc:	f109 0501 	add.w	r5, r9, #1
 8011900:	42ab      	cmp	r3, r5
 8011902:	db32      	blt.n	801196a <__lshift+0x86>
 8011904:	4638      	mov	r0, r7
 8011906:	f7ff fe2b 	bl	8011560 <_Balloc>
 801190a:	2300      	movs	r3, #0
 801190c:	4680      	mov	r8, r0
 801190e:	f100 0114 	add.w	r1, r0, #20
 8011912:	461a      	mov	r2, r3
 8011914:	4553      	cmp	r3, sl
 8011916:	db2b      	blt.n	8011970 <__lshift+0x8c>
 8011918:	6920      	ldr	r0, [r4, #16]
 801191a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801191e:	f104 0314 	add.w	r3, r4, #20
 8011922:	f016 021f 	ands.w	r2, r6, #31
 8011926:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801192a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801192e:	d025      	beq.n	801197c <__lshift+0x98>
 8011930:	f1c2 0e20 	rsb	lr, r2, #32
 8011934:	2000      	movs	r0, #0
 8011936:	681e      	ldr	r6, [r3, #0]
 8011938:	468a      	mov	sl, r1
 801193a:	4096      	lsls	r6, r2
 801193c:	4330      	orrs	r0, r6
 801193e:	f84a 0b04 	str.w	r0, [sl], #4
 8011942:	f853 0b04 	ldr.w	r0, [r3], #4
 8011946:	459c      	cmp	ip, r3
 8011948:	fa20 f00e 	lsr.w	r0, r0, lr
 801194c:	d814      	bhi.n	8011978 <__lshift+0x94>
 801194e:	6048      	str	r0, [r1, #4]
 8011950:	b108      	cbz	r0, 8011956 <__lshift+0x72>
 8011952:	f109 0502 	add.w	r5, r9, #2
 8011956:	3d01      	subs	r5, #1
 8011958:	4638      	mov	r0, r7
 801195a:	f8c8 5010 	str.w	r5, [r8, #16]
 801195e:	4621      	mov	r1, r4
 8011960:	f7ff fe32 	bl	80115c8 <_Bfree>
 8011964:	4640      	mov	r0, r8
 8011966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801196a:	3101      	adds	r1, #1
 801196c:	005b      	lsls	r3, r3, #1
 801196e:	e7c7      	b.n	8011900 <__lshift+0x1c>
 8011970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011974:	3301      	adds	r3, #1
 8011976:	e7cd      	b.n	8011914 <__lshift+0x30>
 8011978:	4651      	mov	r1, sl
 801197a:	e7dc      	b.n	8011936 <__lshift+0x52>
 801197c:	3904      	subs	r1, #4
 801197e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011982:	f841 2f04 	str.w	r2, [r1, #4]!
 8011986:	459c      	cmp	ip, r3
 8011988:	d8f9      	bhi.n	801197e <__lshift+0x9a>
 801198a:	e7e4      	b.n	8011956 <__lshift+0x72>

0801198c <__mcmp>:
 801198c:	6903      	ldr	r3, [r0, #16]
 801198e:	690a      	ldr	r2, [r1, #16]
 8011990:	1a9b      	subs	r3, r3, r2
 8011992:	b530      	push	{r4, r5, lr}
 8011994:	d10c      	bne.n	80119b0 <__mcmp+0x24>
 8011996:	0092      	lsls	r2, r2, #2
 8011998:	3014      	adds	r0, #20
 801199a:	3114      	adds	r1, #20
 801199c:	1884      	adds	r4, r0, r2
 801199e:	4411      	add	r1, r2
 80119a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80119a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80119a8:	4295      	cmp	r5, r2
 80119aa:	d003      	beq.n	80119b4 <__mcmp+0x28>
 80119ac:	d305      	bcc.n	80119ba <__mcmp+0x2e>
 80119ae:	2301      	movs	r3, #1
 80119b0:	4618      	mov	r0, r3
 80119b2:	bd30      	pop	{r4, r5, pc}
 80119b4:	42a0      	cmp	r0, r4
 80119b6:	d3f3      	bcc.n	80119a0 <__mcmp+0x14>
 80119b8:	e7fa      	b.n	80119b0 <__mcmp+0x24>
 80119ba:	f04f 33ff 	mov.w	r3, #4294967295
 80119be:	e7f7      	b.n	80119b0 <__mcmp+0x24>

080119c0 <__mdiff>:
 80119c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119c4:	460d      	mov	r5, r1
 80119c6:	4607      	mov	r7, r0
 80119c8:	4611      	mov	r1, r2
 80119ca:	4628      	mov	r0, r5
 80119cc:	4614      	mov	r4, r2
 80119ce:	f7ff ffdd 	bl	801198c <__mcmp>
 80119d2:	1e06      	subs	r6, r0, #0
 80119d4:	d108      	bne.n	80119e8 <__mdiff+0x28>
 80119d6:	4631      	mov	r1, r6
 80119d8:	4638      	mov	r0, r7
 80119da:	f7ff fdc1 	bl	8011560 <_Balloc>
 80119de:	2301      	movs	r3, #1
 80119e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80119e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e8:	bfa4      	itt	ge
 80119ea:	4623      	movge	r3, r4
 80119ec:	462c      	movge	r4, r5
 80119ee:	4638      	mov	r0, r7
 80119f0:	6861      	ldr	r1, [r4, #4]
 80119f2:	bfa6      	itte	ge
 80119f4:	461d      	movge	r5, r3
 80119f6:	2600      	movge	r6, #0
 80119f8:	2601      	movlt	r6, #1
 80119fa:	f7ff fdb1 	bl	8011560 <_Balloc>
 80119fe:	692b      	ldr	r3, [r5, #16]
 8011a00:	60c6      	str	r6, [r0, #12]
 8011a02:	6926      	ldr	r6, [r4, #16]
 8011a04:	f105 0914 	add.w	r9, r5, #20
 8011a08:	f104 0214 	add.w	r2, r4, #20
 8011a0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011a10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011a14:	f100 0514 	add.w	r5, r0, #20
 8011a18:	f04f 0e00 	mov.w	lr, #0
 8011a1c:	f852 ab04 	ldr.w	sl, [r2], #4
 8011a20:	f859 4b04 	ldr.w	r4, [r9], #4
 8011a24:	fa1e f18a 	uxtah	r1, lr, sl
 8011a28:	b2a3      	uxth	r3, r4
 8011a2a:	1ac9      	subs	r1, r1, r3
 8011a2c:	0c23      	lsrs	r3, r4, #16
 8011a2e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011a32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011a36:	b289      	uxth	r1, r1
 8011a38:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011a3c:	45c8      	cmp	r8, r9
 8011a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011a42:	4694      	mov	ip, r2
 8011a44:	f845 3b04 	str.w	r3, [r5], #4
 8011a48:	d8e8      	bhi.n	8011a1c <__mdiff+0x5c>
 8011a4a:	45bc      	cmp	ip, r7
 8011a4c:	d304      	bcc.n	8011a58 <__mdiff+0x98>
 8011a4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011a52:	b183      	cbz	r3, 8011a76 <__mdiff+0xb6>
 8011a54:	6106      	str	r6, [r0, #16]
 8011a56:	e7c5      	b.n	80119e4 <__mdiff+0x24>
 8011a58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011a5c:	fa1e f381 	uxtah	r3, lr, r1
 8011a60:	141a      	asrs	r2, r3, #16
 8011a62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011a70:	f845 3b04 	str.w	r3, [r5], #4
 8011a74:	e7e9      	b.n	8011a4a <__mdiff+0x8a>
 8011a76:	3e01      	subs	r6, #1
 8011a78:	e7e9      	b.n	8011a4e <__mdiff+0x8e>

08011a7a <__d2b>:
 8011a7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a7e:	460e      	mov	r6, r1
 8011a80:	2101      	movs	r1, #1
 8011a82:	ec59 8b10 	vmov	r8, r9, d0
 8011a86:	4615      	mov	r5, r2
 8011a88:	f7ff fd6a 	bl	8011560 <_Balloc>
 8011a8c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011a90:	4607      	mov	r7, r0
 8011a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a96:	bb34      	cbnz	r4, 8011ae6 <__d2b+0x6c>
 8011a98:	9301      	str	r3, [sp, #4]
 8011a9a:	f1b8 0300 	subs.w	r3, r8, #0
 8011a9e:	d027      	beq.n	8011af0 <__d2b+0x76>
 8011aa0:	a802      	add	r0, sp, #8
 8011aa2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011aa6:	f7ff fe00 	bl	80116aa <__lo0bits>
 8011aaa:	9900      	ldr	r1, [sp, #0]
 8011aac:	b1f0      	cbz	r0, 8011aec <__d2b+0x72>
 8011aae:	9a01      	ldr	r2, [sp, #4]
 8011ab0:	f1c0 0320 	rsb	r3, r0, #32
 8011ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8011ab8:	430b      	orrs	r3, r1
 8011aba:	40c2      	lsrs	r2, r0
 8011abc:	617b      	str	r3, [r7, #20]
 8011abe:	9201      	str	r2, [sp, #4]
 8011ac0:	9b01      	ldr	r3, [sp, #4]
 8011ac2:	61bb      	str	r3, [r7, #24]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	bf14      	ite	ne
 8011ac8:	2102      	movne	r1, #2
 8011aca:	2101      	moveq	r1, #1
 8011acc:	6139      	str	r1, [r7, #16]
 8011ace:	b1c4      	cbz	r4, 8011b02 <__d2b+0x88>
 8011ad0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011ad4:	4404      	add	r4, r0
 8011ad6:	6034      	str	r4, [r6, #0]
 8011ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011adc:	6028      	str	r0, [r5, #0]
 8011ade:	4638      	mov	r0, r7
 8011ae0:	b003      	add	sp, #12
 8011ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011aea:	e7d5      	b.n	8011a98 <__d2b+0x1e>
 8011aec:	6179      	str	r1, [r7, #20]
 8011aee:	e7e7      	b.n	8011ac0 <__d2b+0x46>
 8011af0:	a801      	add	r0, sp, #4
 8011af2:	f7ff fdda 	bl	80116aa <__lo0bits>
 8011af6:	9b01      	ldr	r3, [sp, #4]
 8011af8:	617b      	str	r3, [r7, #20]
 8011afa:	2101      	movs	r1, #1
 8011afc:	6139      	str	r1, [r7, #16]
 8011afe:	3020      	adds	r0, #32
 8011b00:	e7e5      	b.n	8011ace <__d2b+0x54>
 8011b02:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011b06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011b0a:	6030      	str	r0, [r6, #0]
 8011b0c:	6918      	ldr	r0, [r3, #16]
 8011b0e:	f7ff fdad 	bl	801166c <__hi0bits>
 8011b12:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011b16:	e7e1      	b.n	8011adc <__d2b+0x62>

08011b18 <_calloc_r>:
 8011b18:	b538      	push	{r3, r4, r5, lr}
 8011b1a:	fb02 f401 	mul.w	r4, r2, r1
 8011b1e:	4621      	mov	r1, r4
 8011b20:	f000 f856 	bl	8011bd0 <_malloc_r>
 8011b24:	4605      	mov	r5, r0
 8011b26:	b118      	cbz	r0, 8011b30 <_calloc_r+0x18>
 8011b28:	4622      	mov	r2, r4
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	f7fd fe90 	bl	800f850 <memset>
 8011b30:	4628      	mov	r0, r5
 8011b32:	bd38      	pop	{r3, r4, r5, pc}

08011b34 <_free_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	4605      	mov	r5, r0
 8011b38:	2900      	cmp	r1, #0
 8011b3a:	d045      	beq.n	8011bc8 <_free_r+0x94>
 8011b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b40:	1f0c      	subs	r4, r1, #4
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	bfb8      	it	lt
 8011b46:	18e4      	addlt	r4, r4, r3
 8011b48:	f000 fa98 	bl	801207c <__malloc_lock>
 8011b4c:	4a1f      	ldr	r2, [pc, #124]	; (8011bcc <_free_r+0x98>)
 8011b4e:	6813      	ldr	r3, [r2, #0]
 8011b50:	4610      	mov	r0, r2
 8011b52:	b933      	cbnz	r3, 8011b62 <_free_r+0x2e>
 8011b54:	6063      	str	r3, [r4, #4]
 8011b56:	6014      	str	r4, [r2, #0]
 8011b58:	4628      	mov	r0, r5
 8011b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b5e:	f000 ba8e 	b.w	801207e <__malloc_unlock>
 8011b62:	42a3      	cmp	r3, r4
 8011b64:	d90c      	bls.n	8011b80 <_free_r+0x4c>
 8011b66:	6821      	ldr	r1, [r4, #0]
 8011b68:	1862      	adds	r2, r4, r1
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	bf04      	itt	eq
 8011b6e:	681a      	ldreq	r2, [r3, #0]
 8011b70:	685b      	ldreq	r3, [r3, #4]
 8011b72:	6063      	str	r3, [r4, #4]
 8011b74:	bf04      	itt	eq
 8011b76:	1852      	addeq	r2, r2, r1
 8011b78:	6022      	streq	r2, [r4, #0]
 8011b7a:	6004      	str	r4, [r0, #0]
 8011b7c:	e7ec      	b.n	8011b58 <_free_r+0x24>
 8011b7e:	4613      	mov	r3, r2
 8011b80:	685a      	ldr	r2, [r3, #4]
 8011b82:	b10a      	cbz	r2, 8011b88 <_free_r+0x54>
 8011b84:	42a2      	cmp	r2, r4
 8011b86:	d9fa      	bls.n	8011b7e <_free_r+0x4a>
 8011b88:	6819      	ldr	r1, [r3, #0]
 8011b8a:	1858      	adds	r0, r3, r1
 8011b8c:	42a0      	cmp	r0, r4
 8011b8e:	d10b      	bne.n	8011ba8 <_free_r+0x74>
 8011b90:	6820      	ldr	r0, [r4, #0]
 8011b92:	4401      	add	r1, r0
 8011b94:	1858      	adds	r0, r3, r1
 8011b96:	4282      	cmp	r2, r0
 8011b98:	6019      	str	r1, [r3, #0]
 8011b9a:	d1dd      	bne.n	8011b58 <_free_r+0x24>
 8011b9c:	6810      	ldr	r0, [r2, #0]
 8011b9e:	6852      	ldr	r2, [r2, #4]
 8011ba0:	605a      	str	r2, [r3, #4]
 8011ba2:	4401      	add	r1, r0
 8011ba4:	6019      	str	r1, [r3, #0]
 8011ba6:	e7d7      	b.n	8011b58 <_free_r+0x24>
 8011ba8:	d902      	bls.n	8011bb0 <_free_r+0x7c>
 8011baa:	230c      	movs	r3, #12
 8011bac:	602b      	str	r3, [r5, #0]
 8011bae:	e7d3      	b.n	8011b58 <_free_r+0x24>
 8011bb0:	6820      	ldr	r0, [r4, #0]
 8011bb2:	1821      	adds	r1, r4, r0
 8011bb4:	428a      	cmp	r2, r1
 8011bb6:	bf04      	itt	eq
 8011bb8:	6811      	ldreq	r1, [r2, #0]
 8011bba:	6852      	ldreq	r2, [r2, #4]
 8011bbc:	6062      	str	r2, [r4, #4]
 8011bbe:	bf04      	itt	eq
 8011bc0:	1809      	addeq	r1, r1, r0
 8011bc2:	6021      	streq	r1, [r4, #0]
 8011bc4:	605c      	str	r4, [r3, #4]
 8011bc6:	e7c7      	b.n	8011b58 <_free_r+0x24>
 8011bc8:	bd38      	pop	{r3, r4, r5, pc}
 8011bca:	bf00      	nop
 8011bcc:	2000206c 	.word	0x2000206c

08011bd0 <_malloc_r>:
 8011bd0:	b570      	push	{r4, r5, r6, lr}
 8011bd2:	1ccd      	adds	r5, r1, #3
 8011bd4:	f025 0503 	bic.w	r5, r5, #3
 8011bd8:	3508      	adds	r5, #8
 8011bda:	2d0c      	cmp	r5, #12
 8011bdc:	bf38      	it	cc
 8011bde:	250c      	movcc	r5, #12
 8011be0:	2d00      	cmp	r5, #0
 8011be2:	4606      	mov	r6, r0
 8011be4:	db01      	blt.n	8011bea <_malloc_r+0x1a>
 8011be6:	42a9      	cmp	r1, r5
 8011be8:	d903      	bls.n	8011bf2 <_malloc_r+0x22>
 8011bea:	230c      	movs	r3, #12
 8011bec:	6033      	str	r3, [r6, #0]
 8011bee:	2000      	movs	r0, #0
 8011bf0:	bd70      	pop	{r4, r5, r6, pc}
 8011bf2:	f000 fa43 	bl	801207c <__malloc_lock>
 8011bf6:	4a21      	ldr	r2, [pc, #132]	; (8011c7c <_malloc_r+0xac>)
 8011bf8:	6814      	ldr	r4, [r2, #0]
 8011bfa:	4621      	mov	r1, r4
 8011bfc:	b991      	cbnz	r1, 8011c24 <_malloc_r+0x54>
 8011bfe:	4c20      	ldr	r4, [pc, #128]	; (8011c80 <_malloc_r+0xb0>)
 8011c00:	6823      	ldr	r3, [r4, #0]
 8011c02:	b91b      	cbnz	r3, 8011c0c <_malloc_r+0x3c>
 8011c04:	4630      	mov	r0, r6
 8011c06:	f000 f97d 	bl	8011f04 <_sbrk_r>
 8011c0a:	6020      	str	r0, [r4, #0]
 8011c0c:	4629      	mov	r1, r5
 8011c0e:	4630      	mov	r0, r6
 8011c10:	f000 f978 	bl	8011f04 <_sbrk_r>
 8011c14:	1c43      	adds	r3, r0, #1
 8011c16:	d124      	bne.n	8011c62 <_malloc_r+0x92>
 8011c18:	230c      	movs	r3, #12
 8011c1a:	6033      	str	r3, [r6, #0]
 8011c1c:	4630      	mov	r0, r6
 8011c1e:	f000 fa2e 	bl	801207e <__malloc_unlock>
 8011c22:	e7e4      	b.n	8011bee <_malloc_r+0x1e>
 8011c24:	680b      	ldr	r3, [r1, #0]
 8011c26:	1b5b      	subs	r3, r3, r5
 8011c28:	d418      	bmi.n	8011c5c <_malloc_r+0x8c>
 8011c2a:	2b0b      	cmp	r3, #11
 8011c2c:	d90f      	bls.n	8011c4e <_malloc_r+0x7e>
 8011c2e:	600b      	str	r3, [r1, #0]
 8011c30:	50cd      	str	r5, [r1, r3]
 8011c32:	18cc      	adds	r4, r1, r3
 8011c34:	4630      	mov	r0, r6
 8011c36:	f000 fa22 	bl	801207e <__malloc_unlock>
 8011c3a:	f104 000b 	add.w	r0, r4, #11
 8011c3e:	1d23      	adds	r3, r4, #4
 8011c40:	f020 0007 	bic.w	r0, r0, #7
 8011c44:	1ac3      	subs	r3, r0, r3
 8011c46:	d0d3      	beq.n	8011bf0 <_malloc_r+0x20>
 8011c48:	425a      	negs	r2, r3
 8011c4a:	50e2      	str	r2, [r4, r3]
 8011c4c:	e7d0      	b.n	8011bf0 <_malloc_r+0x20>
 8011c4e:	428c      	cmp	r4, r1
 8011c50:	684b      	ldr	r3, [r1, #4]
 8011c52:	bf16      	itet	ne
 8011c54:	6063      	strne	r3, [r4, #4]
 8011c56:	6013      	streq	r3, [r2, #0]
 8011c58:	460c      	movne	r4, r1
 8011c5a:	e7eb      	b.n	8011c34 <_malloc_r+0x64>
 8011c5c:	460c      	mov	r4, r1
 8011c5e:	6849      	ldr	r1, [r1, #4]
 8011c60:	e7cc      	b.n	8011bfc <_malloc_r+0x2c>
 8011c62:	1cc4      	adds	r4, r0, #3
 8011c64:	f024 0403 	bic.w	r4, r4, #3
 8011c68:	42a0      	cmp	r0, r4
 8011c6a:	d005      	beq.n	8011c78 <_malloc_r+0xa8>
 8011c6c:	1a21      	subs	r1, r4, r0
 8011c6e:	4630      	mov	r0, r6
 8011c70:	f000 f948 	bl	8011f04 <_sbrk_r>
 8011c74:	3001      	adds	r0, #1
 8011c76:	d0cf      	beq.n	8011c18 <_malloc_r+0x48>
 8011c78:	6025      	str	r5, [r4, #0]
 8011c7a:	e7db      	b.n	8011c34 <_malloc_r+0x64>
 8011c7c:	2000206c 	.word	0x2000206c
 8011c80:	20002070 	.word	0x20002070

08011c84 <__sfputc_r>:
 8011c84:	6893      	ldr	r3, [r2, #8]
 8011c86:	3b01      	subs	r3, #1
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	b410      	push	{r4}
 8011c8c:	6093      	str	r3, [r2, #8]
 8011c8e:	da08      	bge.n	8011ca2 <__sfputc_r+0x1e>
 8011c90:	6994      	ldr	r4, [r2, #24]
 8011c92:	42a3      	cmp	r3, r4
 8011c94:	db01      	blt.n	8011c9a <__sfputc_r+0x16>
 8011c96:	290a      	cmp	r1, #10
 8011c98:	d103      	bne.n	8011ca2 <__sfputc_r+0x1e>
 8011c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c9e:	f7fe bb65 	b.w	801036c <__swbuf_r>
 8011ca2:	6813      	ldr	r3, [r2, #0]
 8011ca4:	1c58      	adds	r0, r3, #1
 8011ca6:	6010      	str	r0, [r2, #0]
 8011ca8:	7019      	strb	r1, [r3, #0]
 8011caa:	4608      	mov	r0, r1
 8011cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cb0:	4770      	bx	lr

08011cb2 <__sfputs_r>:
 8011cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cb4:	4606      	mov	r6, r0
 8011cb6:	460f      	mov	r7, r1
 8011cb8:	4614      	mov	r4, r2
 8011cba:	18d5      	adds	r5, r2, r3
 8011cbc:	42ac      	cmp	r4, r5
 8011cbe:	d101      	bne.n	8011cc4 <__sfputs_r+0x12>
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	e007      	b.n	8011cd4 <__sfputs_r+0x22>
 8011cc4:	463a      	mov	r2, r7
 8011cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cca:	4630      	mov	r0, r6
 8011ccc:	f7ff ffda 	bl	8011c84 <__sfputc_r>
 8011cd0:	1c43      	adds	r3, r0, #1
 8011cd2:	d1f3      	bne.n	8011cbc <__sfputs_r+0xa>
 8011cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011cd8 <_vfiprintf_r>:
 8011cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cdc:	460c      	mov	r4, r1
 8011cde:	b09d      	sub	sp, #116	; 0x74
 8011ce0:	4617      	mov	r7, r2
 8011ce2:	461d      	mov	r5, r3
 8011ce4:	4606      	mov	r6, r0
 8011ce6:	b118      	cbz	r0, 8011cf0 <_vfiprintf_r+0x18>
 8011ce8:	6983      	ldr	r3, [r0, #24]
 8011cea:	b90b      	cbnz	r3, 8011cf0 <_vfiprintf_r+0x18>
 8011cec:	f7ff fb34 	bl	8011358 <__sinit>
 8011cf0:	4b7c      	ldr	r3, [pc, #496]	; (8011ee4 <_vfiprintf_r+0x20c>)
 8011cf2:	429c      	cmp	r4, r3
 8011cf4:	d158      	bne.n	8011da8 <_vfiprintf_r+0xd0>
 8011cf6:	6874      	ldr	r4, [r6, #4]
 8011cf8:	89a3      	ldrh	r3, [r4, #12]
 8011cfa:	0718      	lsls	r0, r3, #28
 8011cfc:	d55e      	bpl.n	8011dbc <_vfiprintf_r+0xe4>
 8011cfe:	6923      	ldr	r3, [r4, #16]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d05b      	beq.n	8011dbc <_vfiprintf_r+0xe4>
 8011d04:	2300      	movs	r3, #0
 8011d06:	9309      	str	r3, [sp, #36]	; 0x24
 8011d08:	2320      	movs	r3, #32
 8011d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d0e:	2330      	movs	r3, #48	; 0x30
 8011d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d14:	9503      	str	r5, [sp, #12]
 8011d16:	f04f 0b01 	mov.w	fp, #1
 8011d1a:	46b8      	mov	r8, r7
 8011d1c:	4645      	mov	r5, r8
 8011d1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011d22:	b10b      	cbz	r3, 8011d28 <_vfiprintf_r+0x50>
 8011d24:	2b25      	cmp	r3, #37	; 0x25
 8011d26:	d154      	bne.n	8011dd2 <_vfiprintf_r+0xfa>
 8011d28:	ebb8 0a07 	subs.w	sl, r8, r7
 8011d2c:	d00b      	beq.n	8011d46 <_vfiprintf_r+0x6e>
 8011d2e:	4653      	mov	r3, sl
 8011d30:	463a      	mov	r2, r7
 8011d32:	4621      	mov	r1, r4
 8011d34:	4630      	mov	r0, r6
 8011d36:	f7ff ffbc 	bl	8011cb2 <__sfputs_r>
 8011d3a:	3001      	adds	r0, #1
 8011d3c:	f000 80c2 	beq.w	8011ec4 <_vfiprintf_r+0x1ec>
 8011d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d42:	4453      	add	r3, sl
 8011d44:	9309      	str	r3, [sp, #36]	; 0x24
 8011d46:	f898 3000 	ldrb.w	r3, [r8]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	f000 80ba 	beq.w	8011ec4 <_vfiprintf_r+0x1ec>
 8011d50:	2300      	movs	r3, #0
 8011d52:	f04f 32ff 	mov.w	r2, #4294967295
 8011d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d5a:	9304      	str	r3, [sp, #16]
 8011d5c:	9307      	str	r3, [sp, #28]
 8011d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d62:	931a      	str	r3, [sp, #104]	; 0x68
 8011d64:	46a8      	mov	r8, r5
 8011d66:	2205      	movs	r2, #5
 8011d68:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011d6c:	485e      	ldr	r0, [pc, #376]	; (8011ee8 <_vfiprintf_r+0x210>)
 8011d6e:	f7ee fa37 	bl	80001e0 <memchr>
 8011d72:	9b04      	ldr	r3, [sp, #16]
 8011d74:	bb78      	cbnz	r0, 8011dd6 <_vfiprintf_r+0xfe>
 8011d76:	06d9      	lsls	r1, r3, #27
 8011d78:	bf44      	itt	mi
 8011d7a:	2220      	movmi	r2, #32
 8011d7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d80:	071a      	lsls	r2, r3, #28
 8011d82:	bf44      	itt	mi
 8011d84:	222b      	movmi	r2, #43	; 0x2b
 8011d86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d8a:	782a      	ldrb	r2, [r5, #0]
 8011d8c:	2a2a      	cmp	r2, #42	; 0x2a
 8011d8e:	d02a      	beq.n	8011de6 <_vfiprintf_r+0x10e>
 8011d90:	9a07      	ldr	r2, [sp, #28]
 8011d92:	46a8      	mov	r8, r5
 8011d94:	2000      	movs	r0, #0
 8011d96:	250a      	movs	r5, #10
 8011d98:	4641      	mov	r1, r8
 8011d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d9e:	3b30      	subs	r3, #48	; 0x30
 8011da0:	2b09      	cmp	r3, #9
 8011da2:	d969      	bls.n	8011e78 <_vfiprintf_r+0x1a0>
 8011da4:	b360      	cbz	r0, 8011e00 <_vfiprintf_r+0x128>
 8011da6:	e024      	b.n	8011df2 <_vfiprintf_r+0x11a>
 8011da8:	4b50      	ldr	r3, [pc, #320]	; (8011eec <_vfiprintf_r+0x214>)
 8011daa:	429c      	cmp	r4, r3
 8011dac:	d101      	bne.n	8011db2 <_vfiprintf_r+0xda>
 8011dae:	68b4      	ldr	r4, [r6, #8]
 8011db0:	e7a2      	b.n	8011cf8 <_vfiprintf_r+0x20>
 8011db2:	4b4f      	ldr	r3, [pc, #316]	; (8011ef0 <_vfiprintf_r+0x218>)
 8011db4:	429c      	cmp	r4, r3
 8011db6:	bf08      	it	eq
 8011db8:	68f4      	ldreq	r4, [r6, #12]
 8011dba:	e79d      	b.n	8011cf8 <_vfiprintf_r+0x20>
 8011dbc:	4621      	mov	r1, r4
 8011dbe:	4630      	mov	r0, r6
 8011dc0:	f7fe fb26 	bl	8010410 <__swsetup_r>
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d09d      	beq.n	8011d04 <_vfiprintf_r+0x2c>
 8011dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dcc:	b01d      	add	sp, #116	; 0x74
 8011dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dd2:	46a8      	mov	r8, r5
 8011dd4:	e7a2      	b.n	8011d1c <_vfiprintf_r+0x44>
 8011dd6:	4a44      	ldr	r2, [pc, #272]	; (8011ee8 <_vfiprintf_r+0x210>)
 8011dd8:	1a80      	subs	r0, r0, r2
 8011dda:	fa0b f000 	lsl.w	r0, fp, r0
 8011dde:	4318      	orrs	r0, r3
 8011de0:	9004      	str	r0, [sp, #16]
 8011de2:	4645      	mov	r5, r8
 8011de4:	e7be      	b.n	8011d64 <_vfiprintf_r+0x8c>
 8011de6:	9a03      	ldr	r2, [sp, #12]
 8011de8:	1d11      	adds	r1, r2, #4
 8011dea:	6812      	ldr	r2, [r2, #0]
 8011dec:	9103      	str	r1, [sp, #12]
 8011dee:	2a00      	cmp	r2, #0
 8011df0:	db01      	blt.n	8011df6 <_vfiprintf_r+0x11e>
 8011df2:	9207      	str	r2, [sp, #28]
 8011df4:	e004      	b.n	8011e00 <_vfiprintf_r+0x128>
 8011df6:	4252      	negs	r2, r2
 8011df8:	f043 0302 	orr.w	r3, r3, #2
 8011dfc:	9207      	str	r2, [sp, #28]
 8011dfe:	9304      	str	r3, [sp, #16]
 8011e00:	f898 3000 	ldrb.w	r3, [r8]
 8011e04:	2b2e      	cmp	r3, #46	; 0x2e
 8011e06:	d10e      	bne.n	8011e26 <_vfiprintf_r+0x14e>
 8011e08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8011e0e:	d138      	bne.n	8011e82 <_vfiprintf_r+0x1aa>
 8011e10:	9b03      	ldr	r3, [sp, #12]
 8011e12:	1d1a      	adds	r2, r3, #4
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	9203      	str	r2, [sp, #12]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	bfb8      	it	lt
 8011e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e20:	f108 0802 	add.w	r8, r8, #2
 8011e24:	9305      	str	r3, [sp, #20]
 8011e26:	4d33      	ldr	r5, [pc, #204]	; (8011ef4 <_vfiprintf_r+0x21c>)
 8011e28:	f898 1000 	ldrb.w	r1, [r8]
 8011e2c:	2203      	movs	r2, #3
 8011e2e:	4628      	mov	r0, r5
 8011e30:	f7ee f9d6 	bl	80001e0 <memchr>
 8011e34:	b140      	cbz	r0, 8011e48 <_vfiprintf_r+0x170>
 8011e36:	2340      	movs	r3, #64	; 0x40
 8011e38:	1b40      	subs	r0, r0, r5
 8011e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8011e3e:	9b04      	ldr	r3, [sp, #16]
 8011e40:	4303      	orrs	r3, r0
 8011e42:	f108 0801 	add.w	r8, r8, #1
 8011e46:	9304      	str	r3, [sp, #16]
 8011e48:	f898 1000 	ldrb.w	r1, [r8]
 8011e4c:	482a      	ldr	r0, [pc, #168]	; (8011ef8 <_vfiprintf_r+0x220>)
 8011e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e52:	2206      	movs	r2, #6
 8011e54:	f108 0701 	add.w	r7, r8, #1
 8011e58:	f7ee f9c2 	bl	80001e0 <memchr>
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	d037      	beq.n	8011ed0 <_vfiprintf_r+0x1f8>
 8011e60:	4b26      	ldr	r3, [pc, #152]	; (8011efc <_vfiprintf_r+0x224>)
 8011e62:	bb1b      	cbnz	r3, 8011eac <_vfiprintf_r+0x1d4>
 8011e64:	9b03      	ldr	r3, [sp, #12]
 8011e66:	3307      	adds	r3, #7
 8011e68:	f023 0307 	bic.w	r3, r3, #7
 8011e6c:	3308      	adds	r3, #8
 8011e6e:	9303      	str	r3, [sp, #12]
 8011e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e72:	444b      	add	r3, r9
 8011e74:	9309      	str	r3, [sp, #36]	; 0x24
 8011e76:	e750      	b.n	8011d1a <_vfiprintf_r+0x42>
 8011e78:	fb05 3202 	mla	r2, r5, r2, r3
 8011e7c:	2001      	movs	r0, #1
 8011e7e:	4688      	mov	r8, r1
 8011e80:	e78a      	b.n	8011d98 <_vfiprintf_r+0xc0>
 8011e82:	2300      	movs	r3, #0
 8011e84:	f108 0801 	add.w	r8, r8, #1
 8011e88:	9305      	str	r3, [sp, #20]
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	250a      	movs	r5, #10
 8011e8e:	4640      	mov	r0, r8
 8011e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e94:	3a30      	subs	r2, #48	; 0x30
 8011e96:	2a09      	cmp	r2, #9
 8011e98:	d903      	bls.n	8011ea2 <_vfiprintf_r+0x1ca>
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d0c3      	beq.n	8011e26 <_vfiprintf_r+0x14e>
 8011e9e:	9105      	str	r1, [sp, #20]
 8011ea0:	e7c1      	b.n	8011e26 <_vfiprintf_r+0x14e>
 8011ea2:	fb05 2101 	mla	r1, r5, r1, r2
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	4680      	mov	r8, r0
 8011eaa:	e7f0      	b.n	8011e8e <_vfiprintf_r+0x1b6>
 8011eac:	ab03      	add	r3, sp, #12
 8011eae:	9300      	str	r3, [sp, #0]
 8011eb0:	4622      	mov	r2, r4
 8011eb2:	4b13      	ldr	r3, [pc, #76]	; (8011f00 <_vfiprintf_r+0x228>)
 8011eb4:	a904      	add	r1, sp, #16
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	f7fd fd66 	bl	800f988 <_printf_float>
 8011ebc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011ec0:	4681      	mov	r9, r0
 8011ec2:	d1d5      	bne.n	8011e70 <_vfiprintf_r+0x198>
 8011ec4:	89a3      	ldrh	r3, [r4, #12]
 8011ec6:	065b      	lsls	r3, r3, #25
 8011ec8:	f53f af7e 	bmi.w	8011dc8 <_vfiprintf_r+0xf0>
 8011ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ece:	e77d      	b.n	8011dcc <_vfiprintf_r+0xf4>
 8011ed0:	ab03      	add	r3, sp, #12
 8011ed2:	9300      	str	r3, [sp, #0]
 8011ed4:	4622      	mov	r2, r4
 8011ed6:	4b0a      	ldr	r3, [pc, #40]	; (8011f00 <_vfiprintf_r+0x228>)
 8011ed8:	a904      	add	r1, sp, #16
 8011eda:	4630      	mov	r0, r6
 8011edc:	f7fe f80a 	bl	800fef4 <_printf_i>
 8011ee0:	e7ec      	b.n	8011ebc <_vfiprintf_r+0x1e4>
 8011ee2:	bf00      	nop
 8011ee4:	08013874 	.word	0x08013874
 8011ee8:	080139b4 	.word	0x080139b4
 8011eec:	08013894 	.word	0x08013894
 8011ef0:	08013854 	.word	0x08013854
 8011ef4:	080139ba 	.word	0x080139ba
 8011ef8:	080139be 	.word	0x080139be
 8011efc:	0800f989 	.word	0x0800f989
 8011f00:	08011cb3 	.word	0x08011cb3

08011f04 <_sbrk_r>:
 8011f04:	b538      	push	{r3, r4, r5, lr}
 8011f06:	4c06      	ldr	r4, [pc, #24]	; (8011f20 <_sbrk_r+0x1c>)
 8011f08:	2300      	movs	r3, #0
 8011f0a:	4605      	mov	r5, r0
 8011f0c:	4608      	mov	r0, r1
 8011f0e:	6023      	str	r3, [r4, #0]
 8011f10:	f7f4 fcc0 	bl	8006894 <_sbrk>
 8011f14:	1c43      	adds	r3, r0, #1
 8011f16:	d102      	bne.n	8011f1e <_sbrk_r+0x1a>
 8011f18:	6823      	ldr	r3, [r4, #0]
 8011f1a:	b103      	cbz	r3, 8011f1e <_sbrk_r+0x1a>
 8011f1c:	602b      	str	r3, [r5, #0]
 8011f1e:	bd38      	pop	{r3, r4, r5, pc}
 8011f20:	200032d8 	.word	0x200032d8

08011f24 <__sread>:
 8011f24:	b510      	push	{r4, lr}
 8011f26:	460c      	mov	r4, r1
 8011f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f2c:	f000 f8a8 	bl	8012080 <_read_r>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	bfab      	itete	ge
 8011f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f36:	89a3      	ldrhlt	r3, [r4, #12]
 8011f38:	181b      	addge	r3, r3, r0
 8011f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f3e:	bfac      	ite	ge
 8011f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f42:	81a3      	strhlt	r3, [r4, #12]
 8011f44:	bd10      	pop	{r4, pc}

08011f46 <__swrite>:
 8011f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f4a:	461f      	mov	r7, r3
 8011f4c:	898b      	ldrh	r3, [r1, #12]
 8011f4e:	05db      	lsls	r3, r3, #23
 8011f50:	4605      	mov	r5, r0
 8011f52:	460c      	mov	r4, r1
 8011f54:	4616      	mov	r6, r2
 8011f56:	d505      	bpl.n	8011f64 <__swrite+0x1e>
 8011f58:	2302      	movs	r3, #2
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f60:	f000 f868 	bl	8012034 <_lseek_r>
 8011f64:	89a3      	ldrh	r3, [r4, #12]
 8011f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f6e:	81a3      	strh	r3, [r4, #12]
 8011f70:	4632      	mov	r2, r6
 8011f72:	463b      	mov	r3, r7
 8011f74:	4628      	mov	r0, r5
 8011f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f7a:	f000 b817 	b.w	8011fac <_write_r>

08011f7e <__sseek>:
 8011f7e:	b510      	push	{r4, lr}
 8011f80:	460c      	mov	r4, r1
 8011f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f86:	f000 f855 	bl	8012034 <_lseek_r>
 8011f8a:	1c43      	adds	r3, r0, #1
 8011f8c:	89a3      	ldrh	r3, [r4, #12]
 8011f8e:	bf15      	itete	ne
 8011f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f9a:	81a3      	strheq	r3, [r4, #12]
 8011f9c:	bf18      	it	ne
 8011f9e:	81a3      	strhne	r3, [r4, #12]
 8011fa0:	bd10      	pop	{r4, pc}

08011fa2 <__sclose>:
 8011fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fa6:	f000 b813 	b.w	8011fd0 <_close_r>
	...

08011fac <_write_r>:
 8011fac:	b538      	push	{r3, r4, r5, lr}
 8011fae:	4c07      	ldr	r4, [pc, #28]	; (8011fcc <_write_r+0x20>)
 8011fb0:	4605      	mov	r5, r0
 8011fb2:	4608      	mov	r0, r1
 8011fb4:	4611      	mov	r1, r2
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	6022      	str	r2, [r4, #0]
 8011fba:	461a      	mov	r2, r3
 8011fbc:	f7f0 fc90 	bl	80028e0 <_write>
 8011fc0:	1c43      	adds	r3, r0, #1
 8011fc2:	d102      	bne.n	8011fca <_write_r+0x1e>
 8011fc4:	6823      	ldr	r3, [r4, #0]
 8011fc6:	b103      	cbz	r3, 8011fca <_write_r+0x1e>
 8011fc8:	602b      	str	r3, [r5, #0]
 8011fca:	bd38      	pop	{r3, r4, r5, pc}
 8011fcc:	200032d8 	.word	0x200032d8

08011fd0 <_close_r>:
 8011fd0:	b538      	push	{r3, r4, r5, lr}
 8011fd2:	4c06      	ldr	r4, [pc, #24]	; (8011fec <_close_r+0x1c>)
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	4605      	mov	r5, r0
 8011fd8:	4608      	mov	r0, r1
 8011fda:	6023      	str	r3, [r4, #0]
 8011fdc:	f7f0 fcaa 	bl	8002934 <_close>
 8011fe0:	1c43      	adds	r3, r0, #1
 8011fe2:	d102      	bne.n	8011fea <_close_r+0x1a>
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	b103      	cbz	r3, 8011fea <_close_r+0x1a>
 8011fe8:	602b      	str	r3, [r5, #0]
 8011fea:	bd38      	pop	{r3, r4, r5, pc}
 8011fec:	200032d8 	.word	0x200032d8

08011ff0 <_fstat_r>:
 8011ff0:	b538      	push	{r3, r4, r5, lr}
 8011ff2:	4c07      	ldr	r4, [pc, #28]	; (8012010 <_fstat_r+0x20>)
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	4605      	mov	r5, r0
 8011ff8:	4608      	mov	r0, r1
 8011ffa:	4611      	mov	r1, r2
 8011ffc:	6023      	str	r3, [r4, #0]
 8011ffe:	f7f0 fce9 	bl	80029d4 <_fstat>
 8012002:	1c43      	adds	r3, r0, #1
 8012004:	d102      	bne.n	801200c <_fstat_r+0x1c>
 8012006:	6823      	ldr	r3, [r4, #0]
 8012008:	b103      	cbz	r3, 801200c <_fstat_r+0x1c>
 801200a:	602b      	str	r3, [r5, #0]
 801200c:	bd38      	pop	{r3, r4, r5, pc}
 801200e:	bf00      	nop
 8012010:	200032d8 	.word	0x200032d8

08012014 <_isatty_r>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	4c06      	ldr	r4, [pc, #24]	; (8012030 <_isatty_r+0x1c>)
 8012018:	2300      	movs	r3, #0
 801201a:	4605      	mov	r5, r0
 801201c:	4608      	mov	r0, r1
 801201e:	6023      	str	r3, [r4, #0]
 8012020:	f7f0 fc48 	bl	80028b4 <_isatty>
 8012024:	1c43      	adds	r3, r0, #1
 8012026:	d102      	bne.n	801202e <_isatty_r+0x1a>
 8012028:	6823      	ldr	r3, [r4, #0]
 801202a:	b103      	cbz	r3, 801202e <_isatty_r+0x1a>
 801202c:	602b      	str	r3, [r5, #0]
 801202e:	bd38      	pop	{r3, r4, r5, pc}
 8012030:	200032d8 	.word	0x200032d8

08012034 <_lseek_r>:
 8012034:	b538      	push	{r3, r4, r5, lr}
 8012036:	4c07      	ldr	r4, [pc, #28]	; (8012054 <_lseek_r+0x20>)
 8012038:	4605      	mov	r5, r0
 801203a:	4608      	mov	r0, r1
 801203c:	4611      	mov	r1, r2
 801203e:	2200      	movs	r2, #0
 8012040:	6022      	str	r2, [r4, #0]
 8012042:	461a      	mov	r2, r3
 8012044:	f7f0 fc8d 	bl	8002962 <_lseek>
 8012048:	1c43      	adds	r3, r0, #1
 801204a:	d102      	bne.n	8012052 <_lseek_r+0x1e>
 801204c:	6823      	ldr	r3, [r4, #0]
 801204e:	b103      	cbz	r3, 8012052 <_lseek_r+0x1e>
 8012050:	602b      	str	r3, [r5, #0]
 8012052:	bd38      	pop	{r3, r4, r5, pc}
 8012054:	200032d8 	.word	0x200032d8

08012058 <__ascii_mbtowc>:
 8012058:	b082      	sub	sp, #8
 801205a:	b901      	cbnz	r1, 801205e <__ascii_mbtowc+0x6>
 801205c:	a901      	add	r1, sp, #4
 801205e:	b142      	cbz	r2, 8012072 <__ascii_mbtowc+0x1a>
 8012060:	b14b      	cbz	r3, 8012076 <__ascii_mbtowc+0x1e>
 8012062:	7813      	ldrb	r3, [r2, #0]
 8012064:	600b      	str	r3, [r1, #0]
 8012066:	7812      	ldrb	r2, [r2, #0]
 8012068:	1c10      	adds	r0, r2, #0
 801206a:	bf18      	it	ne
 801206c:	2001      	movne	r0, #1
 801206e:	b002      	add	sp, #8
 8012070:	4770      	bx	lr
 8012072:	4610      	mov	r0, r2
 8012074:	e7fb      	b.n	801206e <__ascii_mbtowc+0x16>
 8012076:	f06f 0001 	mvn.w	r0, #1
 801207a:	e7f8      	b.n	801206e <__ascii_mbtowc+0x16>

0801207c <__malloc_lock>:
 801207c:	4770      	bx	lr

0801207e <__malloc_unlock>:
 801207e:	4770      	bx	lr

08012080 <_read_r>:
 8012080:	b538      	push	{r3, r4, r5, lr}
 8012082:	4c07      	ldr	r4, [pc, #28]	; (80120a0 <_read_r+0x20>)
 8012084:	4605      	mov	r5, r0
 8012086:	4608      	mov	r0, r1
 8012088:	4611      	mov	r1, r2
 801208a:	2200      	movs	r2, #0
 801208c:	6022      	str	r2, [r4, #0]
 801208e:	461a      	mov	r2, r3
 8012090:	f7f0 fc78 	bl	8002984 <_read>
 8012094:	1c43      	adds	r3, r0, #1
 8012096:	d102      	bne.n	801209e <_read_r+0x1e>
 8012098:	6823      	ldr	r3, [r4, #0]
 801209a:	b103      	cbz	r3, 801209e <_read_r+0x1e>
 801209c:	602b      	str	r3, [r5, #0]
 801209e:	bd38      	pop	{r3, r4, r5, pc}
 80120a0:	200032d8 	.word	0x200032d8

080120a4 <__ascii_wctomb>:
 80120a4:	b149      	cbz	r1, 80120ba <__ascii_wctomb+0x16>
 80120a6:	2aff      	cmp	r2, #255	; 0xff
 80120a8:	bf85      	ittet	hi
 80120aa:	238a      	movhi	r3, #138	; 0x8a
 80120ac:	6003      	strhi	r3, [r0, #0]
 80120ae:	700a      	strbls	r2, [r1, #0]
 80120b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80120b4:	bf98      	it	ls
 80120b6:	2001      	movls	r0, #1
 80120b8:	4770      	bx	lr
 80120ba:	4608      	mov	r0, r1
 80120bc:	4770      	bx	lr
	...

080120c0 <sinf>:
 80120c0:	ee10 3a10 	vmov	r3, s0
 80120c4:	b507      	push	{r0, r1, r2, lr}
 80120c6:	4a1d      	ldr	r2, [pc, #116]	; (801213c <sinf+0x7c>)
 80120c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80120cc:	4293      	cmp	r3, r2
 80120ce:	dc05      	bgt.n	80120dc <sinf+0x1c>
 80120d0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8012140 <sinf+0x80>
 80120d4:	2000      	movs	r0, #0
 80120d6:	f001 f9f9 	bl	80134cc <__kernel_sinf>
 80120da:	e004      	b.n	80120e6 <sinf+0x26>
 80120dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80120e0:	db04      	blt.n	80120ec <sinf+0x2c>
 80120e2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80120e6:	b003      	add	sp, #12
 80120e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80120ec:	4668      	mov	r0, sp
 80120ee:	f000 fddd 	bl	8012cac <__ieee754_rem_pio2f>
 80120f2:	f000 0003 	and.w	r0, r0, #3
 80120f6:	2801      	cmp	r0, #1
 80120f8:	d008      	beq.n	801210c <sinf+0x4c>
 80120fa:	2802      	cmp	r0, #2
 80120fc:	d00d      	beq.n	801211a <sinf+0x5a>
 80120fe:	b9b0      	cbnz	r0, 801212e <sinf+0x6e>
 8012100:	2001      	movs	r0, #1
 8012102:	eddd 0a01 	vldr	s1, [sp, #4]
 8012106:	ed9d 0a00 	vldr	s0, [sp]
 801210a:	e7e4      	b.n	80120d6 <sinf+0x16>
 801210c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012110:	ed9d 0a00 	vldr	s0, [sp]
 8012114:	f000 fefa 	bl	8012f0c <__kernel_cosf>
 8012118:	e7e5      	b.n	80120e6 <sinf+0x26>
 801211a:	2001      	movs	r0, #1
 801211c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012120:	ed9d 0a00 	vldr	s0, [sp]
 8012124:	f001 f9d2 	bl	80134cc <__kernel_sinf>
 8012128:	eeb1 0a40 	vneg.f32	s0, s0
 801212c:	e7db      	b.n	80120e6 <sinf+0x26>
 801212e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012132:	ed9d 0a00 	vldr	s0, [sp]
 8012136:	f000 fee9 	bl	8012f0c <__kernel_cosf>
 801213a:	e7f5      	b.n	8012128 <sinf+0x68>
 801213c:	3f490fd8 	.word	0x3f490fd8
 8012140:	00000000 	.word	0x00000000

08012144 <asinf>:
 8012144:	b510      	push	{r4, lr}
 8012146:	ed2d 8b02 	vpush	{d8}
 801214a:	4c27      	ldr	r4, [pc, #156]	; (80121e8 <asinf+0xa4>)
 801214c:	b08a      	sub	sp, #40	; 0x28
 801214e:	eeb0 8a40 	vmov.f32	s16, s0
 8012152:	f000 fa03 	bl	801255c <__ieee754_asinf>
 8012156:	f994 3000 	ldrsb.w	r3, [r4]
 801215a:	3301      	adds	r3, #1
 801215c:	eef0 8a40 	vmov.f32	s17, s0
 8012160:	d03c      	beq.n	80121dc <asinf+0x98>
 8012162:	eeb4 8a48 	vcmp.f32	s16, s16
 8012166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801216a:	d637      	bvs.n	80121dc <asinf+0x98>
 801216c:	eeb0 0a48 	vmov.f32	s0, s16
 8012170:	f001 f9fe 	bl	8013570 <fabsf>
 8012174:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012178:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012180:	dd2c      	ble.n	80121dc <asinf+0x98>
 8012182:	2301      	movs	r3, #1
 8012184:	9300      	str	r3, [sp, #0]
 8012186:	4b19      	ldr	r3, [pc, #100]	; (80121ec <asinf+0xa8>)
 8012188:	9301      	str	r3, [sp, #4]
 801218a:	ee18 0a10 	vmov	r0, s16
 801218e:	2300      	movs	r3, #0
 8012190:	9308      	str	r3, [sp, #32]
 8012192:	f7ee f9d9 	bl	8000548 <__aeabi_f2d>
 8012196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801219a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801219e:	4814      	ldr	r0, [pc, #80]	; (80121f0 <asinf+0xac>)
 80121a0:	f001 f9de 	bl	8013560 <nan>
 80121a4:	f994 3000 	ldrsb.w	r3, [r4]
 80121a8:	2b02      	cmp	r3, #2
 80121aa:	ed8d 0b06 	vstr	d0, [sp, #24]
 80121ae:	d104      	bne.n	80121ba <asinf+0x76>
 80121b0:	f7fd fb00 	bl	800f7b4 <__errno>
 80121b4:	2321      	movs	r3, #33	; 0x21
 80121b6:	6003      	str	r3, [r0, #0]
 80121b8:	e004      	b.n	80121c4 <asinf+0x80>
 80121ba:	4668      	mov	r0, sp
 80121bc:	f001 f9ce 	bl	801355c <matherr>
 80121c0:	2800      	cmp	r0, #0
 80121c2:	d0f5      	beq.n	80121b0 <asinf+0x6c>
 80121c4:	9b08      	ldr	r3, [sp, #32]
 80121c6:	b11b      	cbz	r3, 80121d0 <asinf+0x8c>
 80121c8:	f7fd faf4 	bl	800f7b4 <__errno>
 80121cc:	9b08      	ldr	r3, [sp, #32]
 80121ce:	6003      	str	r3, [r0, #0]
 80121d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121d4:	f7ee fce8 	bl	8000ba8 <__aeabi_d2f>
 80121d8:	ee08 0a90 	vmov	s17, r0
 80121dc:	eeb0 0a68 	vmov.f32	s0, s17
 80121e0:	b00a      	add	sp, #40	; 0x28
 80121e2:	ecbd 8b02 	vpop	{d8}
 80121e6:	bd10      	pop	{r4, pc}
 80121e8:	20001c58 	.word	0x20001c58
 80121ec:	08013ad0 	.word	0x08013ad0
 80121f0:	080139b9 	.word	0x080139b9

080121f4 <powf>:
 80121f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80121f8:	ed2d 8b04 	vpush	{d8-d9}
 80121fc:	4ca7      	ldr	r4, [pc, #668]	; (801249c <powf+0x2a8>)
 80121fe:	b08a      	sub	sp, #40	; 0x28
 8012200:	eef0 8a40 	vmov.f32	s17, s0
 8012204:	eeb0 8a60 	vmov.f32	s16, s1
 8012208:	f000 fa90 	bl	801272c <__ieee754_powf>
 801220c:	f994 5000 	ldrsb.w	r5, [r4]
 8012210:	1c6b      	adds	r3, r5, #1
 8012212:	eeb0 9a40 	vmov.f32	s18, s0
 8012216:	4626      	mov	r6, r4
 8012218:	d05f      	beq.n	80122da <powf+0xe6>
 801221a:	eeb4 8a48 	vcmp.f32	s16, s16
 801221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012222:	d65a      	bvs.n	80122da <powf+0xe6>
 8012224:	eef4 8a68 	vcmp.f32	s17, s17
 8012228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801222c:	d721      	bvc.n	8012272 <powf+0x7e>
 801222e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012236:	d150      	bne.n	80122da <powf+0xe6>
 8012238:	2301      	movs	r3, #1
 801223a:	9300      	str	r3, [sp, #0]
 801223c:	4b98      	ldr	r3, [pc, #608]	; (80124a0 <powf+0x2ac>)
 801223e:	9301      	str	r3, [sp, #4]
 8012240:	ee18 0a90 	vmov	r0, s17
 8012244:	2300      	movs	r3, #0
 8012246:	9308      	str	r3, [sp, #32]
 8012248:	f7ee f97e 	bl	8000548 <__aeabi_f2d>
 801224c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012250:	ee18 0a10 	vmov	r0, s16
 8012254:	f7ee f978 	bl	8000548 <__aeabi_f2d>
 8012258:	4b92      	ldr	r3, [pc, #584]	; (80124a4 <powf+0x2b0>)
 801225a:	2200      	movs	r2, #0
 801225c:	2d02      	cmp	r5, #2
 801225e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012262:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012266:	d032      	beq.n	80122ce <powf+0xda>
 8012268:	4668      	mov	r0, sp
 801226a:	f001 f977 	bl	801355c <matherr>
 801226e:	bb40      	cbnz	r0, 80122c2 <powf+0xce>
 8012270:	e065      	b.n	801233e <powf+0x14a>
 8012272:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80124a8 <powf+0x2b4>
 8012276:	eef4 8a69 	vcmp.f32	s17, s19
 801227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801227e:	d163      	bne.n	8012348 <powf+0x154>
 8012280:	eeb4 8a69 	vcmp.f32	s16, s19
 8012284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012288:	d12e      	bne.n	80122e8 <powf+0xf4>
 801228a:	2301      	movs	r3, #1
 801228c:	9300      	str	r3, [sp, #0]
 801228e:	4b84      	ldr	r3, [pc, #528]	; (80124a0 <powf+0x2ac>)
 8012290:	9301      	str	r3, [sp, #4]
 8012292:	ee18 0a90 	vmov	r0, s17
 8012296:	2300      	movs	r3, #0
 8012298:	9308      	str	r3, [sp, #32]
 801229a:	f7ee f955 	bl	8000548 <__aeabi_f2d>
 801229e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122a2:	ee18 0a10 	vmov	r0, s16
 80122a6:	f7ee f94f 	bl	8000548 <__aeabi_f2d>
 80122aa:	2200      	movs	r2, #0
 80122ac:	2300      	movs	r3, #0
 80122ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80122b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80122b6:	2d00      	cmp	r5, #0
 80122b8:	d0d6      	beq.n	8012268 <powf+0x74>
 80122ba:	4b7a      	ldr	r3, [pc, #488]	; (80124a4 <powf+0x2b0>)
 80122bc:	2200      	movs	r2, #0
 80122be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80122c2:	9b08      	ldr	r3, [sp, #32]
 80122c4:	b11b      	cbz	r3, 80122ce <powf+0xda>
 80122c6:	f7fd fa75 	bl	800f7b4 <__errno>
 80122ca:	9b08      	ldr	r3, [sp, #32]
 80122cc:	6003      	str	r3, [r0, #0]
 80122ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80122d2:	f7ee fc69 	bl	8000ba8 <__aeabi_d2f>
 80122d6:	ee09 0a10 	vmov	s18, r0
 80122da:	eeb0 0a49 	vmov.f32	s0, s18
 80122de:	b00a      	add	sp, #40	; 0x28
 80122e0:	ecbd 8b04 	vpop	{d8-d9}
 80122e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80122e8:	eeb0 0a48 	vmov.f32	s0, s16
 80122ec:	f001 f947 	bl	801357e <finitef>
 80122f0:	2800      	cmp	r0, #0
 80122f2:	d0f2      	beq.n	80122da <powf+0xe6>
 80122f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80122f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122fc:	d5ed      	bpl.n	80122da <powf+0xe6>
 80122fe:	2301      	movs	r3, #1
 8012300:	9300      	str	r3, [sp, #0]
 8012302:	4b67      	ldr	r3, [pc, #412]	; (80124a0 <powf+0x2ac>)
 8012304:	9301      	str	r3, [sp, #4]
 8012306:	ee18 0a90 	vmov	r0, s17
 801230a:	2300      	movs	r3, #0
 801230c:	9308      	str	r3, [sp, #32]
 801230e:	f7ee f91b 	bl	8000548 <__aeabi_f2d>
 8012312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012316:	ee18 0a10 	vmov	r0, s16
 801231a:	f7ee f915 	bl	8000548 <__aeabi_f2d>
 801231e:	f994 3000 	ldrsb.w	r3, [r4]
 8012322:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012326:	b923      	cbnz	r3, 8012332 <powf+0x13e>
 8012328:	2200      	movs	r2, #0
 801232a:	2300      	movs	r3, #0
 801232c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012330:	e79a      	b.n	8012268 <powf+0x74>
 8012332:	495e      	ldr	r1, [pc, #376]	; (80124ac <powf+0x2b8>)
 8012334:	2000      	movs	r0, #0
 8012336:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801233a:	2b02      	cmp	r3, #2
 801233c:	d194      	bne.n	8012268 <powf+0x74>
 801233e:	f7fd fa39 	bl	800f7b4 <__errno>
 8012342:	2321      	movs	r3, #33	; 0x21
 8012344:	6003      	str	r3, [r0, #0]
 8012346:	e7bc      	b.n	80122c2 <powf+0xce>
 8012348:	f001 f919 	bl	801357e <finitef>
 801234c:	4605      	mov	r5, r0
 801234e:	2800      	cmp	r0, #0
 8012350:	d173      	bne.n	801243a <powf+0x246>
 8012352:	eeb0 0a68 	vmov.f32	s0, s17
 8012356:	f001 f912 	bl	801357e <finitef>
 801235a:	2800      	cmp	r0, #0
 801235c:	d06d      	beq.n	801243a <powf+0x246>
 801235e:	eeb0 0a48 	vmov.f32	s0, s16
 8012362:	f001 f90c 	bl	801357e <finitef>
 8012366:	2800      	cmp	r0, #0
 8012368:	d067      	beq.n	801243a <powf+0x246>
 801236a:	ee18 0a90 	vmov	r0, s17
 801236e:	f7ee f8eb 	bl	8000548 <__aeabi_f2d>
 8012372:	4680      	mov	r8, r0
 8012374:	ee18 0a10 	vmov	r0, s16
 8012378:	4689      	mov	r9, r1
 801237a:	f7ee f8e5 	bl	8000548 <__aeabi_f2d>
 801237e:	eeb4 9a49 	vcmp.f32	s18, s18
 8012382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012386:	f994 4000 	ldrsb.w	r4, [r4]
 801238a:	4b45      	ldr	r3, [pc, #276]	; (80124a0 <powf+0x2ac>)
 801238c:	d713      	bvc.n	80123b6 <powf+0x1c2>
 801238e:	2201      	movs	r2, #1
 8012390:	e9cd 2300 	strd	r2, r3, [sp]
 8012394:	9508      	str	r5, [sp, #32]
 8012396:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801239a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801239e:	2c00      	cmp	r4, #0
 80123a0:	d0c2      	beq.n	8012328 <powf+0x134>
 80123a2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80123a6:	ee17 0a90 	vmov	r0, s15
 80123aa:	f7ee f8cd 	bl	8000548 <__aeabi_f2d>
 80123ae:	2c02      	cmp	r4, #2
 80123b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80123b4:	e7c2      	b.n	801233c <powf+0x148>
 80123b6:	2203      	movs	r2, #3
 80123b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80123bc:	e9cd 2300 	strd	r2, r3, [sp]
 80123c0:	9508      	str	r5, [sp, #32]
 80123c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80123c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80123ca:	ee28 8a27 	vmul.f32	s16, s16, s15
 80123ce:	b9fc      	cbnz	r4, 8012410 <powf+0x21c>
 80123d0:	4b37      	ldr	r3, [pc, #220]	; (80124b0 <powf+0x2bc>)
 80123d2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80123d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80123da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80123e2:	d553      	bpl.n	801248c <powf+0x298>
 80123e4:	eeb0 0a48 	vmov.f32	s0, s16
 80123e8:	f001 f91c 	bl	8013624 <rintf>
 80123ec:	eeb4 0a48 	vcmp.f32	s0, s16
 80123f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f4:	d004      	beq.n	8012400 <powf+0x20c>
 80123f6:	4b2f      	ldr	r3, [pc, #188]	; (80124b4 <powf+0x2c0>)
 80123f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80123fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012400:	f996 3000 	ldrsb.w	r3, [r6]
 8012404:	2b02      	cmp	r3, #2
 8012406:	d141      	bne.n	801248c <powf+0x298>
 8012408:	f7fd f9d4 	bl	800f7b4 <__errno>
 801240c:	2322      	movs	r3, #34	; 0x22
 801240e:	e799      	b.n	8012344 <powf+0x150>
 8012410:	4b29      	ldr	r3, [pc, #164]	; (80124b8 <powf+0x2c4>)
 8012412:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8012416:	2200      	movs	r2, #0
 8012418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012420:	d5ee      	bpl.n	8012400 <powf+0x20c>
 8012422:	eeb0 0a48 	vmov.f32	s0, s16
 8012426:	f001 f8fd 	bl	8013624 <rintf>
 801242a:	eeb4 0a48 	vcmp.f32	s0, s16
 801242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012432:	d0e5      	beq.n	8012400 <powf+0x20c>
 8012434:	2200      	movs	r2, #0
 8012436:	4b1d      	ldr	r3, [pc, #116]	; (80124ac <powf+0x2b8>)
 8012438:	e7e0      	b.n	80123fc <powf+0x208>
 801243a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012442:	f47f af4a 	bne.w	80122da <powf+0xe6>
 8012446:	eeb0 0a68 	vmov.f32	s0, s17
 801244a:	f001 f898 	bl	801357e <finitef>
 801244e:	2800      	cmp	r0, #0
 8012450:	f43f af43 	beq.w	80122da <powf+0xe6>
 8012454:	eeb0 0a48 	vmov.f32	s0, s16
 8012458:	f001 f891 	bl	801357e <finitef>
 801245c:	2800      	cmp	r0, #0
 801245e:	f43f af3c 	beq.w	80122da <powf+0xe6>
 8012462:	2304      	movs	r3, #4
 8012464:	9300      	str	r3, [sp, #0]
 8012466:	4b0e      	ldr	r3, [pc, #56]	; (80124a0 <powf+0x2ac>)
 8012468:	9301      	str	r3, [sp, #4]
 801246a:	ee18 0a90 	vmov	r0, s17
 801246e:	2300      	movs	r3, #0
 8012470:	9308      	str	r3, [sp, #32]
 8012472:	f7ee f869 	bl	8000548 <__aeabi_f2d>
 8012476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801247a:	ee18 0a10 	vmov	r0, s16
 801247e:	f7ee f863 	bl	8000548 <__aeabi_f2d>
 8012482:	2200      	movs	r2, #0
 8012484:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012488:	2300      	movs	r3, #0
 801248a:	e7b7      	b.n	80123fc <powf+0x208>
 801248c:	4668      	mov	r0, sp
 801248e:	f001 f865 	bl	801355c <matherr>
 8012492:	2800      	cmp	r0, #0
 8012494:	f47f af15 	bne.w	80122c2 <powf+0xce>
 8012498:	e7b6      	b.n	8012408 <powf+0x214>
 801249a:	bf00      	nop
 801249c:	20001c58 	.word	0x20001c58
 80124a0:	08013ad6 	.word	0x08013ad6
 80124a4:	3ff00000 	.word	0x3ff00000
 80124a8:	00000000 	.word	0x00000000
 80124ac:	fff00000 	.word	0xfff00000
 80124b0:	47efffff 	.word	0x47efffff
 80124b4:	c7efffff 	.word	0xc7efffff
 80124b8:	7ff00000 	.word	0x7ff00000

080124bc <sqrtf>:
 80124bc:	b510      	push	{r4, lr}
 80124be:	ed2d 8b02 	vpush	{d8}
 80124c2:	b08a      	sub	sp, #40	; 0x28
 80124c4:	eeb0 8a40 	vmov.f32	s16, s0
 80124c8:	f000 fd1c 	bl	8012f04 <__ieee754_sqrtf>
 80124cc:	4b21      	ldr	r3, [pc, #132]	; (8012554 <sqrtf+0x98>)
 80124ce:	f993 4000 	ldrsb.w	r4, [r3]
 80124d2:	1c63      	adds	r3, r4, #1
 80124d4:	d02c      	beq.n	8012530 <sqrtf+0x74>
 80124d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80124da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124de:	d627      	bvs.n	8012530 <sqrtf+0x74>
 80124e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80124e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e8:	d522      	bpl.n	8012530 <sqrtf+0x74>
 80124ea:	2301      	movs	r3, #1
 80124ec:	9300      	str	r3, [sp, #0]
 80124ee:	4b1a      	ldr	r3, [pc, #104]	; (8012558 <sqrtf+0x9c>)
 80124f0:	9301      	str	r3, [sp, #4]
 80124f2:	ee18 0a10 	vmov	r0, s16
 80124f6:	2300      	movs	r3, #0
 80124f8:	9308      	str	r3, [sp, #32]
 80124fa:	f7ee f825 	bl	8000548 <__aeabi_f2d>
 80124fe:	2200      	movs	r2, #0
 8012500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012508:	2300      	movs	r3, #0
 801250a:	b9ac      	cbnz	r4, 8012538 <sqrtf+0x7c>
 801250c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012510:	4668      	mov	r0, sp
 8012512:	f001 f823 	bl	801355c <matherr>
 8012516:	b1b8      	cbz	r0, 8012548 <sqrtf+0x8c>
 8012518:	9b08      	ldr	r3, [sp, #32]
 801251a:	b11b      	cbz	r3, 8012524 <sqrtf+0x68>
 801251c:	f7fd f94a 	bl	800f7b4 <__errno>
 8012520:	9b08      	ldr	r3, [sp, #32]
 8012522:	6003      	str	r3, [r0, #0]
 8012524:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012528:	f7ee fb3e 	bl	8000ba8 <__aeabi_d2f>
 801252c:	ee00 0a10 	vmov	s0, r0
 8012530:	b00a      	add	sp, #40	; 0x28
 8012532:	ecbd 8b02 	vpop	{d8}
 8012536:	bd10      	pop	{r4, pc}
 8012538:	4610      	mov	r0, r2
 801253a:	4619      	mov	r1, r3
 801253c:	f7ee f986 	bl	800084c <__aeabi_ddiv>
 8012540:	2c02      	cmp	r4, #2
 8012542:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012546:	d1e3      	bne.n	8012510 <sqrtf+0x54>
 8012548:	f7fd f934 	bl	800f7b4 <__errno>
 801254c:	2321      	movs	r3, #33	; 0x21
 801254e:	6003      	str	r3, [r0, #0]
 8012550:	e7e2      	b.n	8012518 <sqrtf+0x5c>
 8012552:	bf00      	nop
 8012554:	20001c58 	.word	0x20001c58
 8012558:	08013adb 	.word	0x08013adb

0801255c <__ieee754_asinf>:
 801255c:	b538      	push	{r3, r4, r5, lr}
 801255e:	ee10 5a10 	vmov	r5, s0
 8012562:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012566:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801256a:	ed2d 8b04 	vpush	{d8-d9}
 801256e:	d10c      	bne.n	801258a <__ieee754_asinf+0x2e>
 8012570:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80126ec <__ieee754_asinf+0x190>
 8012574:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80126f0 <__ieee754_asinf+0x194>
 8012578:	ee60 7a27 	vmul.f32	s15, s0, s15
 801257c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012580:	eeb0 0a67 	vmov.f32	s0, s15
 8012584:	ecbd 8b04 	vpop	{d8-d9}
 8012588:	bd38      	pop	{r3, r4, r5, pc}
 801258a:	dd04      	ble.n	8012596 <__ieee754_asinf+0x3a>
 801258c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012590:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012594:	e7f6      	b.n	8012584 <__ieee754_asinf+0x28>
 8012596:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801259a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801259e:	da0b      	bge.n	80125b8 <__ieee754_asinf+0x5c>
 80125a0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80125a4:	da52      	bge.n	801264c <__ieee754_asinf+0xf0>
 80125a6:	eddf 7a53 	vldr	s15, [pc, #332]	; 80126f4 <__ieee754_asinf+0x198>
 80125aa:	ee70 7a27 	vadd.f32	s15, s0, s15
 80125ae:	eef4 7ae8 	vcmpe.f32	s15, s17
 80125b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b6:	dce5      	bgt.n	8012584 <__ieee754_asinf+0x28>
 80125b8:	f000 ffda 	bl	8013570 <fabsf>
 80125bc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80125c0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80125c4:	ee20 8a08 	vmul.f32	s16, s0, s16
 80125c8:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80126f8 <__ieee754_asinf+0x19c>
 80125cc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80126fc <__ieee754_asinf+0x1a0>
 80125d0:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8012700 <__ieee754_asinf+0x1a4>
 80125d4:	eea8 7a27 	vfma.f32	s14, s16, s15
 80125d8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012704 <__ieee754_asinf+0x1a8>
 80125dc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80125e0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012708 <__ieee754_asinf+0x1ac>
 80125e4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80125e8:	eddf 7a48 	vldr	s15, [pc, #288]	; 801270c <__ieee754_asinf+0x1b0>
 80125ec:	eee7 7a08 	vfma.f32	s15, s14, s16
 80125f0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8012710 <__ieee754_asinf+0x1b4>
 80125f4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80125f8:	eddf 7a46 	vldr	s15, [pc, #280]	; 8012714 <__ieee754_asinf+0x1b8>
 80125fc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012600:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8012718 <__ieee754_asinf+0x1bc>
 8012604:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012608:	eddf 7a44 	vldr	s15, [pc, #272]	; 801271c <__ieee754_asinf+0x1c0>
 801260c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012610:	eeb0 0a48 	vmov.f32	s0, s16
 8012614:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012618:	f000 fc74 	bl	8012f04 <__ieee754_sqrtf>
 801261c:	4b40      	ldr	r3, [pc, #256]	; (8012720 <__ieee754_asinf+0x1c4>)
 801261e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012622:	429c      	cmp	r4, r3
 8012624:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012628:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801262c:	dd3d      	ble.n	80126aa <__ieee754_asinf+0x14e>
 801262e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012632:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8012724 <__ieee754_asinf+0x1c8>
 8012636:	eee0 7a07 	vfma.f32	s15, s0, s14
 801263a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80126f0 <__ieee754_asinf+0x194>
 801263e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012642:	2d00      	cmp	r5, #0
 8012644:	bfd8      	it	le
 8012646:	eeb1 0a40 	vnegle.f32	s0, s0
 801264a:	e79b      	b.n	8012584 <__ieee754_asinf+0x28>
 801264c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012650:	eddf 6a29 	vldr	s13, [pc, #164]	; 80126f8 <__ieee754_asinf+0x19c>
 8012654:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80126fc <__ieee754_asinf+0x1a0>
 8012658:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8012710 <__ieee754_asinf+0x1b4>
 801265c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012660:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012704 <__ieee754_asinf+0x1a8>
 8012664:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012668:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8012708 <__ieee754_asinf+0x1ac>
 801266c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012670:	eddf 6a26 	vldr	s13, [pc, #152]	; 801270c <__ieee754_asinf+0x1b0>
 8012674:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012678:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8012700 <__ieee754_asinf+0x1a4>
 801267c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012680:	eddf 6a24 	vldr	s13, [pc, #144]	; 8012714 <__ieee754_asinf+0x1b8>
 8012684:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012688:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8012718 <__ieee754_asinf+0x1bc>
 801268c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012690:	eddf 6a22 	vldr	s13, [pc, #136]	; 801271c <__ieee754_asinf+0x1c0>
 8012694:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012698:	ee27 7a27 	vmul.f32	s14, s14, s15
 801269c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80126a0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80126a4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80126a8:	e76c      	b.n	8012584 <__ieee754_asinf+0x28>
 80126aa:	ee10 3a10 	vmov	r3, s0
 80126ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80126b2:	f023 030f 	bic.w	r3, r3, #15
 80126b6:	ee07 3a90 	vmov	s15, r3
 80126ba:	eef1 6a67 	vneg.f32	s13, s15
 80126be:	eea6 8aa7 	vfma.f32	s16, s13, s15
 80126c2:	ee70 5a00 	vadd.f32	s11, s0, s0
 80126c6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80126ca:	eddf 7a08 	vldr	s15, [pc, #32]	; 80126ec <__ieee754_asinf+0x190>
 80126ce:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80126d2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8012728 <__ieee754_asinf+0x1cc>
 80126d6:	eee5 7a47 	vfms.f32	s15, s10, s14
 80126da:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80126de:	eeb0 6a40 	vmov.f32	s12, s0
 80126e2:	eea6 6a87 	vfma.f32	s12, s13, s14
 80126e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80126ea:	e7a8      	b.n	801263e <__ieee754_asinf+0xe2>
 80126ec:	b33bbd2e 	.word	0xb33bbd2e
 80126f0:	3fc90fdb 	.word	0x3fc90fdb
 80126f4:	7149f2ca 	.word	0x7149f2ca
 80126f8:	3811ef08 	.word	0x3811ef08
 80126fc:	3a4f7f04 	.word	0x3a4f7f04
 8012700:	3e2aaaab 	.word	0x3e2aaaab
 8012704:	bd241146 	.word	0xbd241146
 8012708:	3e4e0aa8 	.word	0x3e4e0aa8
 801270c:	bea6b090 	.word	0xbea6b090
 8012710:	3d9dc62e 	.word	0x3d9dc62e
 8012714:	bf303361 	.word	0xbf303361
 8012718:	4001572d 	.word	0x4001572d
 801271c:	c019d139 	.word	0xc019d139
 8012720:	3f799999 	.word	0x3f799999
 8012724:	333bbd2e 	.word	0x333bbd2e
 8012728:	3f490fdb 	.word	0x3f490fdb

0801272c <__ieee754_powf>:
 801272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012730:	ee10 5a90 	vmov	r5, s1
 8012734:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8012738:	ed2d 8b02 	vpush	{d8}
 801273c:	eeb0 8a40 	vmov.f32	s16, s0
 8012740:	eef0 8a60 	vmov.f32	s17, s1
 8012744:	f000 8293 	beq.w	8012c6e <__ieee754_powf+0x542>
 8012748:	ee10 8a10 	vmov	r8, s0
 801274c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8012750:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012754:	dc06      	bgt.n	8012764 <__ieee754_powf+0x38>
 8012756:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801275a:	dd0a      	ble.n	8012772 <__ieee754_powf+0x46>
 801275c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012760:	f000 8285 	beq.w	8012c6e <__ieee754_powf+0x542>
 8012764:	ecbd 8b02 	vpop	{d8}
 8012768:	48d9      	ldr	r0, [pc, #868]	; (8012ad0 <__ieee754_powf+0x3a4>)
 801276a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801276e:	f000 bf53 	b.w	8013618 <nanf>
 8012772:	f1b8 0f00 	cmp.w	r8, #0
 8012776:	da1d      	bge.n	80127b4 <__ieee754_powf+0x88>
 8012778:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801277c:	da2c      	bge.n	80127d8 <__ieee754_powf+0xac>
 801277e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8012782:	db30      	blt.n	80127e6 <__ieee754_powf+0xba>
 8012784:	15fb      	asrs	r3, r7, #23
 8012786:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801278a:	fa47 f603 	asr.w	r6, r7, r3
 801278e:	fa06 f303 	lsl.w	r3, r6, r3
 8012792:	42bb      	cmp	r3, r7
 8012794:	d127      	bne.n	80127e6 <__ieee754_powf+0xba>
 8012796:	f006 0601 	and.w	r6, r6, #1
 801279a:	f1c6 0602 	rsb	r6, r6, #2
 801279e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80127a2:	d122      	bne.n	80127ea <__ieee754_powf+0xbe>
 80127a4:	2d00      	cmp	r5, #0
 80127a6:	f280 8268 	bge.w	8012c7a <__ieee754_powf+0x54e>
 80127aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80127ae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80127b2:	e00d      	b.n	80127d0 <__ieee754_powf+0xa4>
 80127b4:	2600      	movs	r6, #0
 80127b6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80127ba:	d1f0      	bne.n	801279e <__ieee754_powf+0x72>
 80127bc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80127c0:	f000 8255 	beq.w	8012c6e <__ieee754_powf+0x542>
 80127c4:	dd0a      	ble.n	80127dc <__ieee754_powf+0xb0>
 80127c6:	2d00      	cmp	r5, #0
 80127c8:	f280 8254 	bge.w	8012c74 <__ieee754_powf+0x548>
 80127cc:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8012ad4 <__ieee754_powf+0x3a8>
 80127d0:	ecbd 8b02 	vpop	{d8}
 80127d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127d8:	2602      	movs	r6, #2
 80127da:	e7ec      	b.n	80127b6 <__ieee754_powf+0x8a>
 80127dc:	2d00      	cmp	r5, #0
 80127de:	daf5      	bge.n	80127cc <__ieee754_powf+0xa0>
 80127e0:	eeb1 0a68 	vneg.f32	s0, s17
 80127e4:	e7f4      	b.n	80127d0 <__ieee754_powf+0xa4>
 80127e6:	2600      	movs	r6, #0
 80127e8:	e7d9      	b.n	801279e <__ieee754_powf+0x72>
 80127ea:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80127ee:	d102      	bne.n	80127f6 <__ieee754_powf+0xca>
 80127f0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80127f4:	e7ec      	b.n	80127d0 <__ieee754_powf+0xa4>
 80127f6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80127fa:	eeb0 0a48 	vmov.f32	s0, s16
 80127fe:	d108      	bne.n	8012812 <__ieee754_powf+0xe6>
 8012800:	f1b8 0f00 	cmp.w	r8, #0
 8012804:	db05      	blt.n	8012812 <__ieee754_powf+0xe6>
 8012806:	ecbd 8b02 	vpop	{d8}
 801280a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801280e:	f000 bb79 	b.w	8012f04 <__ieee754_sqrtf>
 8012812:	f000 fead 	bl	8013570 <fabsf>
 8012816:	b124      	cbz	r4, 8012822 <__ieee754_powf+0xf6>
 8012818:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801281c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012820:	d117      	bne.n	8012852 <__ieee754_powf+0x126>
 8012822:	2d00      	cmp	r5, #0
 8012824:	bfbc      	itt	lt
 8012826:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801282a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801282e:	f1b8 0f00 	cmp.w	r8, #0
 8012832:	dacd      	bge.n	80127d0 <__ieee754_powf+0xa4>
 8012834:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8012838:	ea54 0306 	orrs.w	r3, r4, r6
 801283c:	d104      	bne.n	8012848 <__ieee754_powf+0x11c>
 801283e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012842:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012846:	e7c3      	b.n	80127d0 <__ieee754_powf+0xa4>
 8012848:	2e01      	cmp	r6, #1
 801284a:	d1c1      	bne.n	80127d0 <__ieee754_powf+0xa4>
 801284c:	eeb1 0a40 	vneg.f32	s0, s0
 8012850:	e7be      	b.n	80127d0 <__ieee754_powf+0xa4>
 8012852:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8012856:	3801      	subs	r0, #1
 8012858:	ea56 0300 	orrs.w	r3, r6, r0
 801285c:	d104      	bne.n	8012868 <__ieee754_powf+0x13c>
 801285e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012862:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012866:	e7b3      	b.n	80127d0 <__ieee754_powf+0xa4>
 8012868:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801286c:	dd6d      	ble.n	801294a <__ieee754_powf+0x21e>
 801286e:	4b9a      	ldr	r3, [pc, #616]	; (8012ad8 <__ieee754_powf+0x3ac>)
 8012870:	429c      	cmp	r4, r3
 8012872:	dc06      	bgt.n	8012882 <__ieee754_powf+0x156>
 8012874:	2d00      	cmp	r5, #0
 8012876:	daa9      	bge.n	80127cc <__ieee754_powf+0xa0>
 8012878:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8012adc <__ieee754_powf+0x3b0>
 801287c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012880:	e7a6      	b.n	80127d0 <__ieee754_powf+0xa4>
 8012882:	4b97      	ldr	r3, [pc, #604]	; (8012ae0 <__ieee754_powf+0x3b4>)
 8012884:	429c      	cmp	r4, r3
 8012886:	dd02      	ble.n	801288e <__ieee754_powf+0x162>
 8012888:	2d00      	cmp	r5, #0
 801288a:	dcf5      	bgt.n	8012878 <__ieee754_powf+0x14c>
 801288c:	e79e      	b.n	80127cc <__ieee754_powf+0xa0>
 801288e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012892:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012896:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8012ae4 <__ieee754_powf+0x3b8>
 801289a:	eef1 6a40 	vneg.f32	s13, s0
 801289e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80128a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80128a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80128aa:	eee7 7a40 	vfms.f32	s15, s14, s0
 80128ae:	ee60 0a00 	vmul.f32	s1, s0, s0
 80128b2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8012ae8 <__ieee754_powf+0x3bc>
 80128b6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80128ba:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8012aec <__ieee754_powf+0x3c0>
 80128be:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 80128c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80128c6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8012af0 <__ieee754_powf+0x3c4>
 80128ca:	eeb0 6a67 	vmov.f32	s12, s15
 80128ce:	eea0 6a07 	vfma.f32	s12, s0, s14
 80128d2:	ee16 3a10 	vmov	r3, s12
 80128d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80128da:	f023 030f 	bic.w	r3, r3, #15
 80128de:	ee00 3a90 	vmov	s1, r3
 80128e2:	eee6 0a87 	vfma.f32	s1, s13, s14
 80128e6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80128ea:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80128ee:	f025 050f 	bic.w	r5, r5, #15
 80128f2:	ee07 5a10 	vmov	s14, r5
 80128f6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80128fa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80128fe:	ee07 3a90 	vmov	s15, r3
 8012902:	eee7 0a27 	vfma.f32	s1, s14, s15
 8012906:	3e01      	subs	r6, #1
 8012908:	ea56 0200 	orrs.w	r2, r6, r0
 801290c:	ee07 5a10 	vmov	s14, r5
 8012910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012914:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012918:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801291c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012920:	ee17 4a10 	vmov	r4, s14
 8012924:	bf08      	it	eq
 8012926:	eeb0 8a40 	vmoveq.f32	s16, s0
 801292a:	2c00      	cmp	r4, #0
 801292c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012930:	f340 8184 	ble.w	8012c3c <__ieee754_powf+0x510>
 8012934:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8012938:	f340 80fc 	ble.w	8012b34 <__ieee754_powf+0x408>
 801293c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8012adc <__ieee754_powf+0x3b0>
 8012940:	ee28 0a27 	vmul.f32	s0, s16, s15
 8012944:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012948:	e742      	b.n	80127d0 <__ieee754_powf+0xa4>
 801294a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 801294e:	bfbf      	itttt	lt
 8012950:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8012af4 <__ieee754_powf+0x3c8>
 8012954:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012958:	f06f 0217 	mvnlt.w	r2, #23
 801295c:	ee17 4a90 	vmovlt	r4, s15
 8012960:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8012964:	bfa8      	it	ge
 8012966:	2200      	movge	r2, #0
 8012968:	3b7f      	subs	r3, #127	; 0x7f
 801296a:	4413      	add	r3, r2
 801296c:	4a62      	ldr	r2, [pc, #392]	; (8012af8 <__ieee754_powf+0x3cc>)
 801296e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8012972:	4294      	cmp	r4, r2
 8012974:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8012978:	dd06      	ble.n	8012988 <__ieee754_powf+0x25c>
 801297a:	4a60      	ldr	r2, [pc, #384]	; (8012afc <__ieee754_powf+0x3d0>)
 801297c:	4294      	cmp	r4, r2
 801297e:	f340 80a5 	ble.w	8012acc <__ieee754_powf+0x3a0>
 8012982:	3301      	adds	r3, #1
 8012984:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012988:	2400      	movs	r4, #0
 801298a:	4a5d      	ldr	r2, [pc, #372]	; (8012b00 <__ieee754_powf+0x3d4>)
 801298c:	00a7      	lsls	r7, r4, #2
 801298e:	443a      	add	r2, r7
 8012990:	ee07 1a90 	vmov	s15, r1
 8012994:	ed92 7a00 	vldr	s14, [r2]
 8012998:	4a5a      	ldr	r2, [pc, #360]	; (8012b04 <__ieee754_powf+0x3d8>)
 801299a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801299e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80129a2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80129a6:	1049      	asrs	r1, r1, #1
 80129a8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80129ac:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80129b0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80129b4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80129b8:	ee06 1a10 	vmov	s12, r1
 80129bc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 80129c0:	ee14 ca90 	vmov	ip, s9
 80129c4:	ea02 0c0c 	and.w	ip, r2, ip
 80129c8:	ee05 ca10 	vmov	s10, ip
 80129cc:	eeb1 4a45 	vneg.f32	s8, s10
 80129d0:	eee4 5a06 	vfma.f32	s11, s8, s12
 80129d4:	ee36 6a47 	vsub.f32	s12, s12, s14
 80129d8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8012b08 <__ieee754_powf+0x3dc>
 80129dc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80129e0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80129e4:	eee4 5a06 	vfma.f32	s11, s8, s12
 80129e8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80129ec:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80129f0:	eddf 5a46 	vldr	s11, [pc, #280]	; 8012b0c <__ieee754_powf+0x3e0>
 80129f4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80129f8:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012b10 <__ieee754_powf+0x3e4>
 80129fc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012a00:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012ae4 <__ieee754_powf+0x3b8>
 8012a04:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012a08:	eddf 5a42 	vldr	s11, [pc, #264]	; 8012b14 <__ieee754_powf+0x3e8>
 8012a0c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012a10:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8012b18 <__ieee754_powf+0x3ec>
 8012a14:	ee75 6a24 	vadd.f32	s13, s10, s9
 8012a18:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012a1c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012a20:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8012a24:	eef0 7a65 	vmov.f32	s15, s11
 8012a28:	eee3 6a87 	vfma.f32	s13, s7, s14
 8012a2c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8012a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a34:	ee17 1a90 	vmov	r1, s15
 8012a38:	4011      	ands	r1, r2
 8012a3a:	ee07 1a90 	vmov	s15, r1
 8012a3e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8012a42:	eddf 5a36 	vldr	s11, [pc, #216]	; 8012b1c <__ieee754_powf+0x3f0>
 8012a46:	eea4 7a05 	vfma.f32	s14, s8, s10
 8012a4a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012a4e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8012a52:	eea7 7a86 	vfma.f32	s14, s15, s12
 8012a56:	eeb0 6a47 	vmov.f32	s12, s14
 8012a5a:	eea5 6a27 	vfma.f32	s12, s10, s15
 8012a5e:	ee16 1a10 	vmov	r1, s12
 8012a62:	4011      	ands	r1, r2
 8012a64:	ee06 1a90 	vmov	s13, r1
 8012a68:	eee4 6a27 	vfma.f32	s13, s8, s15
 8012a6c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8012b20 <__ieee754_powf+0x3f4>
 8012a70:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012a74:	ee06 1a10 	vmov	s12, r1
 8012a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a7c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8012b24 <__ieee754_powf+0x3f8>
 8012a80:	4929      	ldr	r1, [pc, #164]	; (8012b28 <__ieee754_powf+0x3fc>)
 8012a82:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012a86:	4439      	add	r1, r7
 8012a88:	edd1 7a00 	vldr	s15, [r1]
 8012a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a90:	ee07 3a90 	vmov	s15, r3
 8012a94:	eef0 0a47 	vmov.f32	s1, s14
 8012a98:	4b24      	ldr	r3, [pc, #144]	; (8012b2c <__ieee754_powf+0x400>)
 8012a9a:	eee6 0a25 	vfma.f32	s1, s12, s11
 8012a9e:	443b      	add	r3, r7
 8012aa0:	ed93 5a00 	vldr	s10, [r3]
 8012aa4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012aa8:	ee70 0a85 	vadd.f32	s1, s1, s10
 8012aac:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8012ab0:	ee17 3a90 	vmov	r3, s15
 8012ab4:	4013      	ands	r3, r2
 8012ab6:	ee07 3a90 	vmov	s15, r3
 8012aba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012abe:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8012ac2:	eee6 7a65 	vfms.f32	s15, s12, s11
 8012ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012aca:	e70e      	b.n	80128ea <__ieee754_powf+0x1be>
 8012acc:	2401      	movs	r4, #1
 8012ace:	e75c      	b.n	801298a <__ieee754_powf+0x25e>
 8012ad0:	080139b9 	.word	0x080139b9
 8012ad4:	00000000 	.word	0x00000000
 8012ad8:	3f7ffff7 	.word	0x3f7ffff7
 8012adc:	7149f2ca 	.word	0x7149f2ca
 8012ae0:	3f800007 	.word	0x3f800007
 8012ae4:	3eaaaaab 	.word	0x3eaaaaab
 8012ae8:	36eca570 	.word	0x36eca570
 8012aec:	3fb8aa3b 	.word	0x3fb8aa3b
 8012af0:	3fb8aa00 	.word	0x3fb8aa00
 8012af4:	4b800000 	.word	0x4b800000
 8012af8:	001cc471 	.word	0x001cc471
 8012afc:	005db3d6 	.word	0x005db3d6
 8012b00:	08013ae4 	.word	0x08013ae4
 8012b04:	fffff000 	.word	0xfffff000
 8012b08:	3e6c3255 	.word	0x3e6c3255
 8012b0c:	3e53f142 	.word	0x3e53f142
 8012b10:	3e8ba305 	.word	0x3e8ba305
 8012b14:	3edb6db7 	.word	0x3edb6db7
 8012b18:	3f19999a 	.word	0x3f19999a
 8012b1c:	3f763800 	.word	0x3f763800
 8012b20:	3f76384f 	.word	0x3f76384f
 8012b24:	369dc3a0 	.word	0x369dc3a0
 8012b28:	08013af4 	.word	0x08013af4
 8012b2c:	08013aec 	.word	0x08013aec
 8012b30:	3338aa3c 	.word	0x3338aa3c
 8012b34:	f040 8092 	bne.w	8012c5c <__ieee754_powf+0x530>
 8012b38:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8012b30 <__ieee754_powf+0x404>
 8012b3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012b40:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012b44:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4c:	f73f aef6 	bgt.w	801293c <__ieee754_powf+0x210>
 8012b50:	15db      	asrs	r3, r3, #23
 8012b52:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8012b56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012b5a:	4103      	asrs	r3, r0
 8012b5c:	4423      	add	r3, r4
 8012b5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012b62:	4947      	ldr	r1, [pc, #284]	; (8012c80 <__ieee754_powf+0x554>)
 8012b64:	3a7f      	subs	r2, #127	; 0x7f
 8012b66:	4111      	asrs	r1, r2
 8012b68:	ea23 0101 	bic.w	r1, r3, r1
 8012b6c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012b70:	ee07 1a10 	vmov	s14, r1
 8012b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012b78:	f1c2 0217 	rsb	r2, r2, #23
 8012b7c:	4110      	asrs	r0, r2
 8012b7e:	2c00      	cmp	r4, #0
 8012b80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b84:	bfb8      	it	lt
 8012b86:	4240      	neglt	r0, r0
 8012b88:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012b8c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012c84 <__ieee754_powf+0x558>
 8012b90:	ee17 3a10 	vmov	r3, s14
 8012b94:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012b98:	f023 030f 	bic.w	r3, r3, #15
 8012b9c:	ee07 3a10 	vmov	s14, r3
 8012ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012ba4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012ba8:	eddf 7a37 	vldr	s15, [pc, #220]	; 8012c88 <__ieee754_powf+0x55c>
 8012bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bb0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8012bb4:	eddf 6a35 	vldr	s13, [pc, #212]	; 8012c8c <__ieee754_powf+0x560>
 8012bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8012bbc:	eea7 0a26 	vfma.f32	s0, s14, s13
 8012bc0:	eeb0 6a40 	vmov.f32	s12, s0
 8012bc4:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012bc8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012bcc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012bd0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8012c90 <__ieee754_powf+0x564>
 8012bd4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8012c94 <__ieee754_powf+0x568>
 8012bd8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8012bdc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8012c98 <__ieee754_powf+0x56c>
 8012be0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012be4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8012c9c <__ieee754_powf+0x570>
 8012be8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012bec:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8012ca0 <__ieee754_powf+0x574>
 8012bf0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012bf4:	eeb0 6a40 	vmov.f32	s12, s0
 8012bf8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8012bfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012c00:	eeb0 7a46 	vmov.f32	s14, s12
 8012c04:	ee77 6a66 	vsub.f32	s13, s14, s13
 8012c08:	ee20 6a06 	vmul.f32	s12, s0, s12
 8012c0c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8012c10:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8012c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012c1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012c20:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012c24:	ee10 3a10 	vmov	r3, s0
 8012c28:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012c2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012c30:	da1a      	bge.n	8012c68 <__ieee754_powf+0x53c>
 8012c32:	f000 fd51 	bl	80136d8 <scalbnf>
 8012c36:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012c3a:	e5c9      	b.n	80127d0 <__ieee754_powf+0xa4>
 8012c3c:	4a19      	ldr	r2, [pc, #100]	; (8012ca4 <__ieee754_powf+0x578>)
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	dd02      	ble.n	8012c48 <__ieee754_powf+0x51c>
 8012c42:	eddf 7a19 	vldr	s15, [pc, #100]	; 8012ca8 <__ieee754_powf+0x57c>
 8012c46:	e67b      	b.n	8012940 <__ieee754_powf+0x214>
 8012c48:	d108      	bne.n	8012c5c <__ieee754_powf+0x530>
 8012c4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c4e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c56:	f6ff af7b 	blt.w	8012b50 <__ieee754_powf+0x424>
 8012c5a:	e7f2      	b.n	8012c42 <__ieee754_powf+0x516>
 8012c5c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8012c60:	f73f af76 	bgt.w	8012b50 <__ieee754_powf+0x424>
 8012c64:	2000      	movs	r0, #0
 8012c66:	e78f      	b.n	8012b88 <__ieee754_powf+0x45c>
 8012c68:	ee00 3a10 	vmov	s0, r3
 8012c6c:	e7e3      	b.n	8012c36 <__ieee754_powf+0x50a>
 8012c6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012c72:	e5ad      	b.n	80127d0 <__ieee754_powf+0xa4>
 8012c74:	eeb0 0a68 	vmov.f32	s0, s17
 8012c78:	e5aa      	b.n	80127d0 <__ieee754_powf+0xa4>
 8012c7a:	eeb0 0a48 	vmov.f32	s0, s16
 8012c7e:	e5a7      	b.n	80127d0 <__ieee754_powf+0xa4>
 8012c80:	007fffff 	.word	0x007fffff
 8012c84:	3f317218 	.word	0x3f317218
 8012c88:	35bfbe8c 	.word	0x35bfbe8c
 8012c8c:	3f317200 	.word	0x3f317200
 8012c90:	3331bb4c 	.word	0x3331bb4c
 8012c94:	b5ddea0e 	.word	0xb5ddea0e
 8012c98:	388ab355 	.word	0x388ab355
 8012c9c:	bb360b61 	.word	0xbb360b61
 8012ca0:	3e2aaaab 	.word	0x3e2aaaab
 8012ca4:	43160000 	.word	0x43160000
 8012ca8:	0da24260 	.word	0x0da24260

08012cac <__ieee754_rem_pio2f>:
 8012cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cae:	ee10 6a10 	vmov	r6, s0
 8012cb2:	4b86      	ldr	r3, [pc, #536]	; (8012ecc <__ieee754_rem_pio2f+0x220>)
 8012cb4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8012cb8:	429c      	cmp	r4, r3
 8012cba:	b087      	sub	sp, #28
 8012cbc:	4605      	mov	r5, r0
 8012cbe:	dc05      	bgt.n	8012ccc <__ieee754_rem_pio2f+0x20>
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	ed85 0a00 	vstr	s0, [r5]
 8012cc6:	6043      	str	r3, [r0, #4]
 8012cc8:	2000      	movs	r0, #0
 8012cca:	e020      	b.n	8012d0e <__ieee754_rem_pio2f+0x62>
 8012ccc:	4b80      	ldr	r3, [pc, #512]	; (8012ed0 <__ieee754_rem_pio2f+0x224>)
 8012cce:	429c      	cmp	r4, r3
 8012cd0:	dc38      	bgt.n	8012d44 <__ieee754_rem_pio2f+0x98>
 8012cd2:	2e00      	cmp	r6, #0
 8012cd4:	f024 040f 	bic.w	r4, r4, #15
 8012cd8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8012ed4 <__ieee754_rem_pio2f+0x228>
 8012cdc:	4b7e      	ldr	r3, [pc, #504]	; (8012ed8 <__ieee754_rem_pio2f+0x22c>)
 8012cde:	dd18      	ble.n	8012d12 <__ieee754_rem_pio2f+0x66>
 8012ce0:	429c      	cmp	r4, r3
 8012ce2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8012ce6:	bf09      	itett	eq
 8012ce8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8012edc <__ieee754_rem_pio2f+0x230>
 8012cec:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8012ee0 <__ieee754_rem_pio2f+0x234>
 8012cf0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8012cf4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8012ee4 <__ieee754_rem_pio2f+0x238>
 8012cf8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8012cfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012d00:	edc0 6a00 	vstr	s13, [r0]
 8012d04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d08:	edc0 7a01 	vstr	s15, [r0, #4]
 8012d0c:	2001      	movs	r0, #1
 8012d0e:	b007      	add	sp, #28
 8012d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d12:	429c      	cmp	r4, r3
 8012d14:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012d18:	bf09      	itett	eq
 8012d1a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8012edc <__ieee754_rem_pio2f+0x230>
 8012d1e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8012ee0 <__ieee754_rem_pio2f+0x234>
 8012d22:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8012d26:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8012ee4 <__ieee754_rem_pio2f+0x238>
 8012d2a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012d2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012d32:	edc0 6a00 	vstr	s13, [r0]
 8012d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d3a:	edc0 7a01 	vstr	s15, [r0, #4]
 8012d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d42:	e7e4      	b.n	8012d0e <__ieee754_rem_pio2f+0x62>
 8012d44:	4b68      	ldr	r3, [pc, #416]	; (8012ee8 <__ieee754_rem_pio2f+0x23c>)
 8012d46:	429c      	cmp	r4, r3
 8012d48:	dc71      	bgt.n	8012e2e <__ieee754_rem_pio2f+0x182>
 8012d4a:	f000 fc11 	bl	8013570 <fabsf>
 8012d4e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8012eec <__ieee754_rem_pio2f+0x240>
 8012d52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012d56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d5e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8012d62:	ee17 0a90 	vmov	r0, s15
 8012d66:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8012ed4 <__ieee754_rem_pio2f+0x228>
 8012d6a:	eeb1 7a46 	vneg.f32	s14, s12
 8012d6e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8012d72:	281f      	cmp	r0, #31
 8012d74:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8012ee0 <__ieee754_rem_pio2f+0x234>
 8012d78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012d7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012d80:	ee16 3a90 	vmov	r3, s13
 8012d84:	dc1c      	bgt.n	8012dc0 <__ieee754_rem_pio2f+0x114>
 8012d86:	1e47      	subs	r7, r0, #1
 8012d88:	4959      	ldr	r1, [pc, #356]	; (8012ef0 <__ieee754_rem_pio2f+0x244>)
 8012d8a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8012d8e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8012d92:	428a      	cmp	r2, r1
 8012d94:	d014      	beq.n	8012dc0 <__ieee754_rem_pio2f+0x114>
 8012d96:	602b      	str	r3, [r5, #0]
 8012d98:	ed95 7a00 	vldr	s14, [r5]
 8012d9c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012da0:	2e00      	cmp	r6, #0
 8012da2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012da6:	ed85 0a01 	vstr	s0, [r5, #4]
 8012daa:	dab0      	bge.n	8012d0e <__ieee754_rem_pio2f+0x62>
 8012dac:	eeb1 7a47 	vneg.f32	s14, s14
 8012db0:	eeb1 0a40 	vneg.f32	s0, s0
 8012db4:	ed85 7a00 	vstr	s14, [r5]
 8012db8:	ed85 0a01 	vstr	s0, [r5, #4]
 8012dbc:	4240      	negs	r0, r0
 8012dbe:	e7a6      	b.n	8012d0e <__ieee754_rem_pio2f+0x62>
 8012dc0:	15e4      	asrs	r4, r4, #23
 8012dc2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012dc6:	1aa2      	subs	r2, r4, r2
 8012dc8:	2a08      	cmp	r2, #8
 8012dca:	dde4      	ble.n	8012d96 <__ieee754_rem_pio2f+0xea>
 8012dcc:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012edc <__ieee754_rem_pio2f+0x230>
 8012dd0:	eef0 6a40 	vmov.f32	s13, s0
 8012dd4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012dd8:	ee30 0a66 	vsub.f32	s0, s0, s13
 8012ddc:	eea7 0a27 	vfma.f32	s0, s14, s15
 8012de0:	eddf 7a40 	vldr	s15, [pc, #256]	; 8012ee4 <__ieee754_rem_pio2f+0x238>
 8012de4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8012de8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8012dec:	eef0 7a40 	vmov.f32	s15, s0
 8012df0:	ee15 3a90 	vmov	r3, s11
 8012df4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012df8:	1aa4      	subs	r4, r4, r2
 8012dfa:	2c19      	cmp	r4, #25
 8012dfc:	dc04      	bgt.n	8012e08 <__ieee754_rem_pio2f+0x15c>
 8012dfe:	edc5 5a00 	vstr	s11, [r5]
 8012e02:	eeb0 0a66 	vmov.f32	s0, s13
 8012e06:	e7c7      	b.n	8012d98 <__ieee754_rem_pio2f+0xec>
 8012e08:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8012ef4 <__ieee754_rem_pio2f+0x248>
 8012e0c:	eeb0 0a66 	vmov.f32	s0, s13
 8012e10:	eea7 0a25 	vfma.f32	s0, s14, s11
 8012e14:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012e18:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012e1c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8012ef8 <__ieee754_rem_pio2f+0x24c>
 8012e20:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8012e24:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012e28:	ed85 7a00 	vstr	s14, [r5]
 8012e2c:	e7b4      	b.n	8012d98 <__ieee754_rem_pio2f+0xec>
 8012e2e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012e32:	db06      	blt.n	8012e42 <__ieee754_rem_pio2f+0x196>
 8012e34:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012e38:	edc0 7a01 	vstr	s15, [r0, #4]
 8012e3c:	edc0 7a00 	vstr	s15, [r0]
 8012e40:	e742      	b.n	8012cc8 <__ieee754_rem_pio2f+0x1c>
 8012e42:	15e2      	asrs	r2, r4, #23
 8012e44:	3a86      	subs	r2, #134	; 0x86
 8012e46:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8012e4a:	ee07 3a90 	vmov	s15, r3
 8012e4e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012e52:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8012efc <__ieee754_rem_pio2f+0x250>
 8012e56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e5e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012e62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012e6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e72:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012e76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e82:	edcd 7a05 	vstr	s15, [sp, #20]
 8012e86:	d11e      	bne.n	8012ec6 <__ieee754_rem_pio2f+0x21a>
 8012e88:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e90:	bf0c      	ite	eq
 8012e92:	2301      	moveq	r3, #1
 8012e94:	2302      	movne	r3, #2
 8012e96:	491a      	ldr	r1, [pc, #104]	; (8012f00 <__ieee754_rem_pio2f+0x254>)
 8012e98:	9101      	str	r1, [sp, #4]
 8012e9a:	2102      	movs	r1, #2
 8012e9c:	9100      	str	r1, [sp, #0]
 8012e9e:	a803      	add	r0, sp, #12
 8012ea0:	4629      	mov	r1, r5
 8012ea2:	f000 f891 	bl	8012fc8 <__kernel_rem_pio2f>
 8012ea6:	2e00      	cmp	r6, #0
 8012ea8:	f6bf af31 	bge.w	8012d0e <__ieee754_rem_pio2f+0x62>
 8012eac:	edd5 7a00 	vldr	s15, [r5]
 8012eb0:	eef1 7a67 	vneg.f32	s15, s15
 8012eb4:	edc5 7a00 	vstr	s15, [r5]
 8012eb8:	edd5 7a01 	vldr	s15, [r5, #4]
 8012ebc:	eef1 7a67 	vneg.f32	s15, s15
 8012ec0:	edc5 7a01 	vstr	s15, [r5, #4]
 8012ec4:	e77a      	b.n	8012dbc <__ieee754_rem_pio2f+0x110>
 8012ec6:	2303      	movs	r3, #3
 8012ec8:	e7e5      	b.n	8012e96 <__ieee754_rem_pio2f+0x1ea>
 8012eca:	bf00      	nop
 8012ecc:	3f490fd8 	.word	0x3f490fd8
 8012ed0:	4016cbe3 	.word	0x4016cbe3
 8012ed4:	3fc90f80 	.word	0x3fc90f80
 8012ed8:	3fc90fd0 	.word	0x3fc90fd0
 8012edc:	37354400 	.word	0x37354400
 8012ee0:	37354443 	.word	0x37354443
 8012ee4:	2e85a308 	.word	0x2e85a308
 8012ee8:	43490f80 	.word	0x43490f80
 8012eec:	3f22f984 	.word	0x3f22f984
 8012ef0:	08013afc 	.word	0x08013afc
 8012ef4:	2e85a300 	.word	0x2e85a300
 8012ef8:	248d3132 	.word	0x248d3132
 8012efc:	43800000 	.word	0x43800000
 8012f00:	08013b7c 	.word	0x08013b7c

08012f04 <__ieee754_sqrtf>:
 8012f04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012f08:	4770      	bx	lr
	...

08012f0c <__kernel_cosf>:
 8012f0c:	ee10 3a10 	vmov	r3, s0
 8012f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f14:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012f1c:	da05      	bge.n	8012f2a <__kernel_cosf+0x1e>
 8012f1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012f22:	ee17 2a90 	vmov	r2, s15
 8012f26:	2a00      	cmp	r2, #0
 8012f28:	d03b      	beq.n	8012fa2 <__kernel_cosf+0x96>
 8012f2a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8012f2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012f32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8012fa8 <__kernel_cosf+0x9c>
 8012f36:	4a1d      	ldr	r2, [pc, #116]	; (8012fac <__kernel_cosf+0xa0>)
 8012f38:	ee66 7a07 	vmul.f32	s15, s12, s14
 8012f3c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8012fb0 <__kernel_cosf+0xa4>
 8012f40:	eea6 7a25 	vfma.f32	s14, s12, s11
 8012f44:	4293      	cmp	r3, r2
 8012f46:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8012fb4 <__kernel_cosf+0xa8>
 8012f4a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8012f4e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8012fb8 <__kernel_cosf+0xac>
 8012f52:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012f56:	eddf 5a19 	vldr	s11, [pc, #100]	; 8012fbc <__kernel_cosf+0xb0>
 8012f5a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8012f5e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8012fc0 <__kernel_cosf+0xb4>
 8012f62:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012f66:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8012f6a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012f6e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8012f72:	dc04      	bgt.n	8012f7e <__kernel_cosf+0x72>
 8012f74:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8012f78:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8012f7c:	4770      	bx	lr
 8012f7e:	4a11      	ldr	r2, [pc, #68]	; (8012fc4 <__kernel_cosf+0xb8>)
 8012f80:	4293      	cmp	r3, r2
 8012f82:	bfda      	itte	le
 8012f84:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8012f88:	ee07 3a10 	vmovle	s14, r3
 8012f8c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8012f90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012f94:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8012f98:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012f9c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012fa0:	4770      	bx	lr
 8012fa2:	eeb0 0a66 	vmov.f32	s0, s13
 8012fa6:	4770      	bx	lr
 8012fa8:	ad47d74e 	.word	0xad47d74e
 8012fac:	3e999999 	.word	0x3e999999
 8012fb0:	310f74f6 	.word	0x310f74f6
 8012fb4:	b493f27c 	.word	0xb493f27c
 8012fb8:	37d00d01 	.word	0x37d00d01
 8012fbc:	bab60b61 	.word	0xbab60b61
 8012fc0:	3d2aaaab 	.word	0x3d2aaaab
 8012fc4:	3f480000 	.word	0x3f480000

08012fc8 <__kernel_rem_pio2f>:
 8012fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fcc:	ed2d 8b04 	vpush	{d8-d9}
 8012fd0:	b0d7      	sub	sp, #348	; 0x15c
 8012fd2:	469b      	mov	fp, r3
 8012fd4:	460e      	mov	r6, r1
 8012fd6:	4bbe      	ldr	r3, [pc, #760]	; (80132d0 <__kernel_rem_pio2f+0x308>)
 8012fd8:	9964      	ldr	r1, [sp, #400]	; 0x190
 8012fda:	9002      	str	r0, [sp, #8]
 8012fdc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8012fe0:	9865      	ldr	r0, [sp, #404]	; 0x194
 8012fe2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80132e0 <__kernel_rem_pio2f+0x318>
 8012fe6:	1ed1      	subs	r1, r2, #3
 8012fe8:	2308      	movs	r3, #8
 8012fea:	fb91 f1f3 	sdiv	r1, r1, r3
 8012fee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8012ff2:	f10b 3aff 	add.w	sl, fp, #4294967295
 8012ff6:	1c4c      	adds	r4, r1, #1
 8012ff8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8012ffc:	eba1 050a 	sub.w	r5, r1, sl
 8013000:	aa1a      	add	r2, sp, #104	; 0x68
 8013002:	eb09 070a 	add.w	r7, r9, sl
 8013006:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801300a:	4696      	mov	lr, r2
 801300c:	2300      	movs	r3, #0
 801300e:	42bb      	cmp	r3, r7
 8013010:	dd0f      	ble.n	8013032 <__kernel_rem_pio2f+0x6a>
 8013012:	af42      	add	r7, sp, #264	; 0x108
 8013014:	2200      	movs	r2, #0
 8013016:	454a      	cmp	r2, r9
 8013018:	dc27      	bgt.n	801306a <__kernel_rem_pio2f+0xa2>
 801301a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801301e:	eb0b 0302 	add.w	r3, fp, r2
 8013022:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8013026:	9d02      	ldr	r5, [sp, #8]
 8013028:	eddf 7aad 	vldr	s15, [pc, #692]	; 80132e0 <__kernel_rem_pio2f+0x318>
 801302c:	f04f 0c00 	mov.w	ip, #0
 8013030:	e015      	b.n	801305e <__kernel_rem_pio2f+0x96>
 8013032:	42dd      	cmn	r5, r3
 8013034:	bf5d      	ittte	pl
 8013036:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 801303a:	ee07 2a90 	vmovpl	s15, r2
 801303e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013042:	eef0 7a47 	vmovmi.f32	s15, s14
 8013046:	ecee 7a01 	vstmia	lr!, {s15}
 801304a:	3301      	adds	r3, #1
 801304c:	e7df      	b.n	801300e <__kernel_rem_pio2f+0x46>
 801304e:	ecf5 6a01 	vldmia	r5!, {s13}
 8013052:	ed33 7a01 	vldmdb	r3!, {s14}
 8013056:	eee6 7a87 	vfma.f32	s15, s13, s14
 801305a:	f10c 0c01 	add.w	ip, ip, #1
 801305e:	45d4      	cmp	ip, sl
 8013060:	ddf5      	ble.n	801304e <__kernel_rem_pio2f+0x86>
 8013062:	ece7 7a01 	vstmia	r7!, {s15}
 8013066:	3201      	adds	r2, #1
 8013068:	e7d5      	b.n	8013016 <__kernel_rem_pio2f+0x4e>
 801306a:	ab06      	add	r3, sp, #24
 801306c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8013070:	9304      	str	r3, [sp, #16]
 8013072:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80132dc <__kernel_rem_pio2f+0x314>
 8013076:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80132d8 <__kernel_rem_pio2f+0x310>
 801307a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801307e:	9303      	str	r3, [sp, #12]
 8013080:	464d      	mov	r5, r9
 8013082:	ab56      	add	r3, sp, #344	; 0x158
 8013084:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8013088:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801308c:	3f01      	subs	r7, #1
 801308e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8013092:	00bf      	lsls	r7, r7, #2
 8013094:	ab56      	add	r3, sp, #344	; 0x158
 8013096:	19da      	adds	r2, r3, r7
 8013098:	3a4c      	subs	r2, #76	; 0x4c
 801309a:	2300      	movs	r3, #0
 801309c:	1ae9      	subs	r1, r5, r3
 801309e:	2900      	cmp	r1, #0
 80130a0:	dc4c      	bgt.n	801313c <__kernel_rem_pio2f+0x174>
 80130a2:	4620      	mov	r0, r4
 80130a4:	f000 fb18 	bl	80136d8 <scalbnf>
 80130a8:	eeb0 8a40 	vmov.f32	s16, s0
 80130ac:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80130b0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80130b4:	f000 fa6e 	bl	8013594 <floorf>
 80130b8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80130bc:	eea0 8a67 	vfms.f32	s16, s0, s15
 80130c0:	2c00      	cmp	r4, #0
 80130c2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80130c6:	edcd 7a01 	vstr	s15, [sp, #4]
 80130ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130ce:	ee38 8a67 	vsub.f32	s16, s16, s15
 80130d2:	dd48      	ble.n	8013166 <__kernel_rem_pio2f+0x19e>
 80130d4:	1e69      	subs	r1, r5, #1
 80130d6:	ab06      	add	r3, sp, #24
 80130d8:	f1c4 0008 	rsb	r0, r4, #8
 80130dc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80130e0:	9a01      	ldr	r2, [sp, #4]
 80130e2:	fa4c f300 	asr.w	r3, ip, r0
 80130e6:	441a      	add	r2, r3
 80130e8:	4083      	lsls	r3, r0
 80130ea:	9201      	str	r2, [sp, #4]
 80130ec:	ebac 0203 	sub.w	r2, ip, r3
 80130f0:	ab06      	add	r3, sp, #24
 80130f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80130f6:	f1c4 0307 	rsb	r3, r4, #7
 80130fa:	fa42 f803 	asr.w	r8, r2, r3
 80130fe:	f1b8 0f00 	cmp.w	r8, #0
 8013102:	dd41      	ble.n	8013188 <__kernel_rem_pio2f+0x1c0>
 8013104:	9b01      	ldr	r3, [sp, #4]
 8013106:	2000      	movs	r0, #0
 8013108:	3301      	adds	r3, #1
 801310a:	9301      	str	r3, [sp, #4]
 801310c:	4601      	mov	r1, r0
 801310e:	4285      	cmp	r5, r0
 8013110:	dc6d      	bgt.n	80131ee <__kernel_rem_pio2f+0x226>
 8013112:	2c00      	cmp	r4, #0
 8013114:	dd04      	ble.n	8013120 <__kernel_rem_pio2f+0x158>
 8013116:	2c01      	cmp	r4, #1
 8013118:	d07e      	beq.n	8013218 <__kernel_rem_pio2f+0x250>
 801311a:	2c02      	cmp	r4, #2
 801311c:	f000 8086 	beq.w	801322c <__kernel_rem_pio2f+0x264>
 8013120:	f1b8 0f02 	cmp.w	r8, #2
 8013124:	d130      	bne.n	8013188 <__kernel_rem_pio2f+0x1c0>
 8013126:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801312a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801312e:	b359      	cbz	r1, 8013188 <__kernel_rem_pio2f+0x1c0>
 8013130:	4620      	mov	r0, r4
 8013132:	f000 fad1 	bl	80136d8 <scalbnf>
 8013136:	ee38 8a40 	vsub.f32	s16, s16, s0
 801313a:	e025      	b.n	8013188 <__kernel_rem_pio2f+0x1c0>
 801313c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013140:	a806      	add	r0, sp, #24
 8013142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801314a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801314e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013152:	ee10 1a10 	vmov	r1, s0
 8013156:	ed32 0a01 	vldmdb	r2!, {s0}
 801315a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801315e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013162:	3301      	adds	r3, #1
 8013164:	e79a      	b.n	801309c <__kernel_rem_pio2f+0xd4>
 8013166:	d106      	bne.n	8013176 <__kernel_rem_pio2f+0x1ae>
 8013168:	1e6b      	subs	r3, r5, #1
 801316a:	aa06      	add	r2, sp, #24
 801316c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013170:	ea4f 2822 	mov.w	r8, r2, asr #8
 8013174:	e7c3      	b.n	80130fe <__kernel_rem_pio2f+0x136>
 8013176:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801317a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801317e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013182:	da31      	bge.n	80131e8 <__kernel_rem_pio2f+0x220>
 8013184:	f04f 0800 	mov.w	r8, #0
 8013188:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013190:	f040 80a8 	bne.w	80132e4 <__kernel_rem_pio2f+0x31c>
 8013194:	1e6b      	subs	r3, r5, #1
 8013196:	4618      	mov	r0, r3
 8013198:	2200      	movs	r2, #0
 801319a:	4548      	cmp	r0, r9
 801319c:	da4d      	bge.n	801323a <__kernel_rem_pio2f+0x272>
 801319e:	2a00      	cmp	r2, #0
 80131a0:	f000 8087 	beq.w	80132b2 <__kernel_rem_pio2f+0x2ea>
 80131a4:	aa06      	add	r2, sp, #24
 80131a6:	3c08      	subs	r4, #8
 80131a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80131ac:	2900      	cmp	r1, #0
 80131ae:	f000 808d 	beq.w	80132cc <__kernel_rem_pio2f+0x304>
 80131b2:	4620      	mov	r0, r4
 80131b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80131b8:	9302      	str	r3, [sp, #8]
 80131ba:	f000 fa8d 	bl	80136d8 <scalbnf>
 80131be:	9b02      	ldr	r3, [sp, #8]
 80131c0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80132dc <__kernel_rem_pio2f+0x314>
 80131c4:	0099      	lsls	r1, r3, #2
 80131c6:	aa42      	add	r2, sp, #264	; 0x108
 80131c8:	1850      	adds	r0, r2, r1
 80131ca:	1d05      	adds	r5, r0, #4
 80131cc:	461c      	mov	r4, r3
 80131ce:	2c00      	cmp	r4, #0
 80131d0:	f280 80b8 	bge.w	8013344 <__kernel_rem_pio2f+0x37c>
 80131d4:	2500      	movs	r5, #0
 80131d6:	1b5c      	subs	r4, r3, r5
 80131d8:	2c00      	cmp	r4, #0
 80131da:	f2c0 80d8 	blt.w	801338e <__kernel_rem_pio2f+0x3c6>
 80131de:	4f3d      	ldr	r7, [pc, #244]	; (80132d4 <__kernel_rem_pio2f+0x30c>)
 80131e0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80132e0 <__kernel_rem_pio2f+0x318>
 80131e4:	2400      	movs	r4, #0
 80131e6:	e0c6      	b.n	8013376 <__kernel_rem_pio2f+0x3ae>
 80131e8:	f04f 0802 	mov.w	r8, #2
 80131ec:	e78a      	b.n	8013104 <__kernel_rem_pio2f+0x13c>
 80131ee:	ab06      	add	r3, sp, #24
 80131f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80131f4:	b949      	cbnz	r1, 801320a <__kernel_rem_pio2f+0x242>
 80131f6:	b12b      	cbz	r3, 8013204 <__kernel_rem_pio2f+0x23c>
 80131f8:	aa06      	add	r2, sp, #24
 80131fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80131fe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8013202:	2301      	movs	r3, #1
 8013204:	3001      	adds	r0, #1
 8013206:	4619      	mov	r1, r3
 8013208:	e781      	b.n	801310e <__kernel_rem_pio2f+0x146>
 801320a:	aa06      	add	r2, sp, #24
 801320c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8013210:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8013214:	460b      	mov	r3, r1
 8013216:	e7f5      	b.n	8013204 <__kernel_rem_pio2f+0x23c>
 8013218:	1e68      	subs	r0, r5, #1
 801321a:	ab06      	add	r3, sp, #24
 801321c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013224:	aa06      	add	r2, sp, #24
 8013226:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801322a:	e779      	b.n	8013120 <__kernel_rem_pio2f+0x158>
 801322c:	1e68      	subs	r0, r5, #1
 801322e:	ab06      	add	r3, sp, #24
 8013230:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013238:	e7f4      	b.n	8013224 <__kernel_rem_pio2f+0x25c>
 801323a:	a906      	add	r1, sp, #24
 801323c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013240:	3801      	subs	r0, #1
 8013242:	430a      	orrs	r2, r1
 8013244:	e7a9      	b.n	801319a <__kernel_rem_pio2f+0x1d2>
 8013246:	f10c 0c01 	add.w	ip, ip, #1
 801324a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801324e:	2a00      	cmp	r2, #0
 8013250:	d0f9      	beq.n	8013246 <__kernel_rem_pio2f+0x27e>
 8013252:	eb0b 0305 	add.w	r3, fp, r5
 8013256:	aa1a      	add	r2, sp, #104	; 0x68
 8013258:	009b      	lsls	r3, r3, #2
 801325a:	1898      	adds	r0, r3, r2
 801325c:	3004      	adds	r0, #4
 801325e:	1c69      	adds	r1, r5, #1
 8013260:	3704      	adds	r7, #4
 8013262:	2200      	movs	r2, #0
 8013264:	4465      	add	r5, ip
 8013266:	9005      	str	r0, [sp, #20]
 8013268:	428d      	cmp	r5, r1
 801326a:	f6ff af0a 	blt.w	8013082 <__kernel_rem_pio2f+0xba>
 801326e:	a81a      	add	r0, sp, #104	; 0x68
 8013270:	eb02 0c03 	add.w	ip, r2, r3
 8013274:	4484      	add	ip, r0
 8013276:	9803      	ldr	r0, [sp, #12]
 8013278:	f8dd e008 	ldr.w	lr, [sp, #8]
 801327c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8013280:	9001      	str	r0, [sp, #4]
 8013282:	ee07 0a90 	vmov	s15, r0
 8013286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801328a:	9805      	ldr	r0, [sp, #20]
 801328c:	edcc 7a00 	vstr	s15, [ip]
 8013290:	eddf 7a13 	vldr	s15, [pc, #76]	; 80132e0 <__kernel_rem_pio2f+0x318>
 8013294:	eb00 0802 	add.w	r8, r0, r2
 8013298:	f04f 0c00 	mov.w	ip, #0
 801329c:	45d4      	cmp	ip, sl
 801329e:	dd0c      	ble.n	80132ba <__kernel_rem_pio2f+0x2f2>
 80132a0:	eb02 0c07 	add.w	ip, r2, r7
 80132a4:	a842      	add	r0, sp, #264	; 0x108
 80132a6:	4484      	add	ip, r0
 80132a8:	edcc 7a01 	vstr	s15, [ip, #4]
 80132ac:	3101      	adds	r1, #1
 80132ae:	3204      	adds	r2, #4
 80132b0:	e7da      	b.n	8013268 <__kernel_rem_pio2f+0x2a0>
 80132b2:	9b04      	ldr	r3, [sp, #16]
 80132b4:	f04f 0c01 	mov.w	ip, #1
 80132b8:	e7c7      	b.n	801324a <__kernel_rem_pio2f+0x282>
 80132ba:	ecfe 6a01 	vldmia	lr!, {s13}
 80132be:	ed38 7a01 	vldmdb	r8!, {s14}
 80132c2:	f10c 0c01 	add.w	ip, ip, #1
 80132c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80132ca:	e7e7      	b.n	801329c <__kernel_rem_pio2f+0x2d4>
 80132cc:	3b01      	subs	r3, #1
 80132ce:	e769      	b.n	80131a4 <__kernel_rem_pio2f+0x1dc>
 80132d0:	08013ec0 	.word	0x08013ec0
 80132d4:	08013e94 	.word	0x08013e94
 80132d8:	43800000 	.word	0x43800000
 80132dc:	3b800000 	.word	0x3b800000
 80132e0:	00000000 	.word	0x00000000
 80132e4:	4260      	negs	r0, r4
 80132e6:	eeb0 0a48 	vmov.f32	s0, s16
 80132ea:	f000 f9f5 	bl	80136d8 <scalbnf>
 80132ee:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80132d8 <__kernel_rem_pio2f+0x310>
 80132f2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80132f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fa:	db1a      	blt.n	8013332 <__kernel_rem_pio2f+0x36a>
 80132fc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80132dc <__kernel_rem_pio2f+0x314>
 8013300:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013304:	aa06      	add	r2, sp, #24
 8013306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801330a:	a906      	add	r1, sp, #24
 801330c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013310:	3408      	adds	r4, #8
 8013312:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801331a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801331e:	ee10 3a10 	vmov	r3, s0
 8013322:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8013326:	1c6b      	adds	r3, r5, #1
 8013328:	ee17 2a90 	vmov	r2, s15
 801332c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013330:	e73f      	b.n	80131b2 <__kernel_rem_pio2f+0x1ea>
 8013332:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013336:	aa06      	add	r2, sp, #24
 8013338:	ee10 3a10 	vmov	r3, s0
 801333c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8013340:	462b      	mov	r3, r5
 8013342:	e736      	b.n	80131b2 <__kernel_rem_pio2f+0x1ea>
 8013344:	aa06      	add	r2, sp, #24
 8013346:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801334a:	9202      	str	r2, [sp, #8]
 801334c:	ee07 2a90 	vmov	s15, r2
 8013350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013354:	3c01      	subs	r4, #1
 8013356:	ee67 7a80 	vmul.f32	s15, s15, s0
 801335a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801335e:	ed65 7a01 	vstmdb	r5!, {s15}
 8013362:	e734      	b.n	80131ce <__kernel_rem_pio2f+0x206>
 8013364:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8013368:	ecf7 6a01 	vldmia	r7!, {s13}
 801336c:	ed9c 7a00 	vldr	s14, [ip]
 8013370:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013374:	3401      	adds	r4, #1
 8013376:	454c      	cmp	r4, r9
 8013378:	dc01      	bgt.n	801337e <__kernel_rem_pio2f+0x3b6>
 801337a:	42a5      	cmp	r5, r4
 801337c:	daf2      	bge.n	8013364 <__kernel_rem_pio2f+0x39c>
 801337e:	aa56      	add	r2, sp, #344	; 0x158
 8013380:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8013384:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8013388:	3501      	adds	r5, #1
 801338a:	3804      	subs	r0, #4
 801338c:	e723      	b.n	80131d6 <__kernel_rem_pio2f+0x20e>
 801338e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8013390:	2a03      	cmp	r2, #3
 8013392:	d84d      	bhi.n	8013430 <__kernel_rem_pio2f+0x468>
 8013394:	e8df f002 	tbb	[pc, r2]
 8013398:	021f1f3e 	.word	0x021f1f3e
 801339c:	aa56      	add	r2, sp, #344	; 0x158
 801339e:	4411      	add	r1, r2
 80133a0:	399c      	subs	r1, #156	; 0x9c
 80133a2:	4608      	mov	r0, r1
 80133a4:	461c      	mov	r4, r3
 80133a6:	2c00      	cmp	r4, #0
 80133a8:	dc5f      	bgt.n	801346a <__kernel_rem_pio2f+0x4a2>
 80133aa:	4608      	mov	r0, r1
 80133ac:	461c      	mov	r4, r3
 80133ae:	2c01      	cmp	r4, #1
 80133b0:	dc6b      	bgt.n	801348a <__kernel_rem_pio2f+0x4c2>
 80133b2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80132e0 <__kernel_rem_pio2f+0x318>
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	dc77      	bgt.n	80134aa <__kernel_rem_pio2f+0x4e2>
 80133ba:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80133be:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80133c2:	f1b8 0f00 	cmp.w	r8, #0
 80133c6:	d176      	bne.n	80134b6 <__kernel_rem_pio2f+0x4ee>
 80133c8:	edc6 6a00 	vstr	s13, [r6]
 80133cc:	ed86 7a01 	vstr	s14, [r6, #4]
 80133d0:	edc6 7a02 	vstr	s15, [r6, #8]
 80133d4:	e02c      	b.n	8013430 <__kernel_rem_pio2f+0x468>
 80133d6:	aa56      	add	r2, sp, #344	; 0x158
 80133d8:	4411      	add	r1, r2
 80133da:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80132e0 <__kernel_rem_pio2f+0x318>
 80133de:	399c      	subs	r1, #156	; 0x9c
 80133e0:	4618      	mov	r0, r3
 80133e2:	2800      	cmp	r0, #0
 80133e4:	da32      	bge.n	801344c <__kernel_rem_pio2f+0x484>
 80133e6:	f1b8 0f00 	cmp.w	r8, #0
 80133ea:	d035      	beq.n	8013458 <__kernel_rem_pio2f+0x490>
 80133ec:	eef1 7a47 	vneg.f32	s15, s14
 80133f0:	edc6 7a00 	vstr	s15, [r6]
 80133f4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80133f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133fc:	a82f      	add	r0, sp, #188	; 0xbc
 80133fe:	2101      	movs	r1, #1
 8013400:	428b      	cmp	r3, r1
 8013402:	da2c      	bge.n	801345e <__kernel_rem_pio2f+0x496>
 8013404:	f1b8 0f00 	cmp.w	r8, #0
 8013408:	d001      	beq.n	801340e <__kernel_rem_pio2f+0x446>
 801340a:	eef1 7a67 	vneg.f32	s15, s15
 801340e:	edc6 7a01 	vstr	s15, [r6, #4]
 8013412:	e00d      	b.n	8013430 <__kernel_rem_pio2f+0x468>
 8013414:	aa56      	add	r2, sp, #344	; 0x158
 8013416:	4411      	add	r1, r2
 8013418:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80132e0 <__kernel_rem_pio2f+0x318>
 801341c:	399c      	subs	r1, #156	; 0x9c
 801341e:	2b00      	cmp	r3, #0
 8013420:	da0e      	bge.n	8013440 <__kernel_rem_pio2f+0x478>
 8013422:	f1b8 0f00 	cmp.w	r8, #0
 8013426:	d001      	beq.n	801342c <__kernel_rem_pio2f+0x464>
 8013428:	eef1 7a67 	vneg.f32	s15, s15
 801342c:	edc6 7a00 	vstr	s15, [r6]
 8013430:	9b01      	ldr	r3, [sp, #4]
 8013432:	f003 0007 	and.w	r0, r3, #7
 8013436:	b057      	add	sp, #348	; 0x15c
 8013438:	ecbd 8b04 	vpop	{d8-d9}
 801343c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013440:	ed31 7a01 	vldmdb	r1!, {s14}
 8013444:	3b01      	subs	r3, #1
 8013446:	ee77 7a87 	vadd.f32	s15, s15, s14
 801344a:	e7e8      	b.n	801341e <__kernel_rem_pio2f+0x456>
 801344c:	ed71 7a01 	vldmdb	r1!, {s15}
 8013450:	3801      	subs	r0, #1
 8013452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013456:	e7c4      	b.n	80133e2 <__kernel_rem_pio2f+0x41a>
 8013458:	eef0 7a47 	vmov.f32	s15, s14
 801345c:	e7c8      	b.n	80133f0 <__kernel_rem_pio2f+0x428>
 801345e:	ecb0 7a01 	vldmia	r0!, {s14}
 8013462:	3101      	adds	r1, #1
 8013464:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013468:	e7ca      	b.n	8013400 <__kernel_rem_pio2f+0x438>
 801346a:	ed50 7a02 	vldr	s15, [r0, #-8]
 801346e:	ed70 6a01 	vldmdb	r0!, {s13}
 8013472:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013476:	3c01      	subs	r4, #1
 8013478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801347c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8013480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013484:	edc0 7a00 	vstr	s15, [r0]
 8013488:	e78d      	b.n	80133a6 <__kernel_rem_pio2f+0x3de>
 801348a:	ed50 7a02 	vldr	s15, [r0, #-8]
 801348e:	ed70 6a01 	vldmdb	r0!, {s13}
 8013492:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013496:	3c01      	subs	r4, #1
 8013498:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801349c:	ed00 7a01 	vstr	s14, [r0, #-4]
 80134a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80134a4:	edc0 7a00 	vstr	s15, [r0]
 80134a8:	e781      	b.n	80133ae <__kernel_rem_pio2f+0x3e6>
 80134aa:	ed31 7a01 	vldmdb	r1!, {s14}
 80134ae:	3b01      	subs	r3, #1
 80134b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80134b4:	e77f      	b.n	80133b6 <__kernel_rem_pio2f+0x3ee>
 80134b6:	eef1 6a66 	vneg.f32	s13, s13
 80134ba:	eeb1 7a47 	vneg.f32	s14, s14
 80134be:	edc6 6a00 	vstr	s13, [r6]
 80134c2:	ed86 7a01 	vstr	s14, [r6, #4]
 80134c6:	eef1 7a67 	vneg.f32	s15, s15
 80134ca:	e781      	b.n	80133d0 <__kernel_rem_pio2f+0x408>

080134cc <__kernel_sinf>:
 80134cc:	ee10 3a10 	vmov	r3, s0
 80134d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80134d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80134d8:	da04      	bge.n	80134e4 <__kernel_sinf+0x18>
 80134da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80134de:	ee17 3a90 	vmov	r3, s15
 80134e2:	b35b      	cbz	r3, 801353c <__kernel_sinf+0x70>
 80134e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80134e8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013540 <__kernel_sinf+0x74>
 80134ec:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013544 <__kernel_sinf+0x78>
 80134f0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80134f4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013548 <__kernel_sinf+0x7c>
 80134f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80134fc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801354c <__kernel_sinf+0x80>
 8013500:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013504:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013550 <__kernel_sinf+0x84>
 8013508:	ee60 6a07 	vmul.f32	s13, s0, s14
 801350c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013510:	b930      	cbnz	r0, 8013520 <__kernel_sinf+0x54>
 8013512:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013554 <__kernel_sinf+0x88>
 8013516:	eea7 6a27 	vfma.f32	s12, s14, s15
 801351a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801351e:	4770      	bx	lr
 8013520:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013524:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013528:	eee0 7a86 	vfma.f32	s15, s1, s12
 801352c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013530:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013558 <__kernel_sinf+0x8c>
 8013534:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013538:	ee30 0a60 	vsub.f32	s0, s0, s1
 801353c:	4770      	bx	lr
 801353e:	bf00      	nop
 8013540:	2f2ec9d3 	.word	0x2f2ec9d3
 8013544:	b2d72f34 	.word	0xb2d72f34
 8013548:	3638ef1b 	.word	0x3638ef1b
 801354c:	b9500d01 	.word	0xb9500d01
 8013550:	3c088889 	.word	0x3c088889
 8013554:	be2aaaab 	.word	0xbe2aaaab
 8013558:	3e2aaaab 	.word	0x3e2aaaab

0801355c <matherr>:
 801355c:	2000      	movs	r0, #0
 801355e:	4770      	bx	lr

08013560 <nan>:
 8013560:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013568 <nan+0x8>
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	00000000 	.word	0x00000000
 801356c:	7ff80000 	.word	0x7ff80000

08013570 <fabsf>:
 8013570:	ee10 3a10 	vmov	r3, s0
 8013574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013578:	ee00 3a10 	vmov	s0, r3
 801357c:	4770      	bx	lr

0801357e <finitef>:
 801357e:	ee10 3a10 	vmov	r3, s0
 8013582:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8013586:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801358a:	bfac      	ite	ge
 801358c:	2000      	movge	r0, #0
 801358e:	2001      	movlt	r0, #1
 8013590:	4770      	bx	lr
	...

08013594 <floorf>:
 8013594:	ee10 3a10 	vmov	r3, s0
 8013598:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801359c:	0dca      	lsrs	r2, r1, #23
 801359e:	3a7f      	subs	r2, #127	; 0x7f
 80135a0:	2a16      	cmp	r2, #22
 80135a2:	dc2a      	bgt.n	80135fa <floorf+0x66>
 80135a4:	2a00      	cmp	r2, #0
 80135a6:	da11      	bge.n	80135cc <floorf+0x38>
 80135a8:	eddf 7a18 	vldr	s15, [pc, #96]	; 801360c <floorf+0x78>
 80135ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80135b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80135b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b8:	dd05      	ble.n	80135c6 <floorf+0x32>
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	da23      	bge.n	8013606 <floorf+0x72>
 80135be:	4a14      	ldr	r2, [pc, #80]	; (8013610 <floorf+0x7c>)
 80135c0:	2900      	cmp	r1, #0
 80135c2:	bf18      	it	ne
 80135c4:	4613      	movne	r3, r2
 80135c6:	ee00 3a10 	vmov	s0, r3
 80135ca:	4770      	bx	lr
 80135cc:	4911      	ldr	r1, [pc, #68]	; (8013614 <floorf+0x80>)
 80135ce:	4111      	asrs	r1, r2
 80135d0:	420b      	tst	r3, r1
 80135d2:	d0fa      	beq.n	80135ca <floorf+0x36>
 80135d4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801360c <floorf+0x78>
 80135d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80135dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80135e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e4:	ddef      	ble.n	80135c6 <floorf+0x32>
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	bfbe      	ittt	lt
 80135ea:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80135ee:	fa40 f202 	asrlt.w	r2, r0, r2
 80135f2:	189b      	addlt	r3, r3, r2
 80135f4:	ea23 0301 	bic.w	r3, r3, r1
 80135f8:	e7e5      	b.n	80135c6 <floorf+0x32>
 80135fa:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80135fe:	d3e4      	bcc.n	80135ca <floorf+0x36>
 8013600:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013604:	4770      	bx	lr
 8013606:	2300      	movs	r3, #0
 8013608:	e7dd      	b.n	80135c6 <floorf+0x32>
 801360a:	bf00      	nop
 801360c:	7149f2ca 	.word	0x7149f2ca
 8013610:	bf800000 	.word	0xbf800000
 8013614:	007fffff 	.word	0x007fffff

08013618 <nanf>:
 8013618:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013620 <nanf+0x8>
 801361c:	4770      	bx	lr
 801361e:	bf00      	nop
 8013620:	7fc00000 	.word	0x7fc00000

08013624 <rintf>:
 8013624:	b513      	push	{r0, r1, r4, lr}
 8013626:	ee10 1a10 	vmov	r1, s0
 801362a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801362e:	0ddc      	lsrs	r4, r3, #23
 8013630:	3c7f      	subs	r4, #127	; 0x7f
 8013632:	2c16      	cmp	r4, #22
 8013634:	dc46      	bgt.n	80136c4 <rintf+0xa0>
 8013636:	b32b      	cbz	r3, 8013684 <rintf+0x60>
 8013638:	2c00      	cmp	r4, #0
 801363a:	ee10 2a10 	vmov	r2, s0
 801363e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8013642:	da21      	bge.n	8013688 <rintf+0x64>
 8013644:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8013648:	425b      	negs	r3, r3
 801364a:	4a21      	ldr	r2, [pc, #132]	; (80136d0 <rintf+0xac>)
 801364c:	0a5b      	lsrs	r3, r3, #9
 801364e:	0d09      	lsrs	r1, r1, #20
 8013650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013654:	0509      	lsls	r1, r1, #20
 8013656:	430b      	orrs	r3, r1
 8013658:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801365c:	ee07 3a90 	vmov	s15, r3
 8013660:	edd2 6a00 	vldr	s13, [r2]
 8013664:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8013668:	ed8d 7a01 	vstr	s14, [sp, #4]
 801366c:	eddd 7a01 	vldr	s15, [sp, #4]
 8013670:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013674:	ee17 3a90 	vmov	r3, s15
 8013678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801367c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8013680:	ee00 3a10 	vmov	s0, r3
 8013684:	b002      	add	sp, #8
 8013686:	bd10      	pop	{r4, pc}
 8013688:	4b12      	ldr	r3, [pc, #72]	; (80136d4 <rintf+0xb0>)
 801368a:	4123      	asrs	r3, r4
 801368c:	4219      	tst	r1, r3
 801368e:	d0f9      	beq.n	8013684 <rintf+0x60>
 8013690:	085b      	lsrs	r3, r3, #1
 8013692:	4219      	tst	r1, r3
 8013694:	d006      	beq.n	80136a4 <rintf+0x80>
 8013696:	ea21 0203 	bic.w	r2, r1, r3
 801369a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801369e:	fa43 f404 	asr.w	r4, r3, r4
 80136a2:	4322      	orrs	r2, r4
 80136a4:	4b0a      	ldr	r3, [pc, #40]	; (80136d0 <rintf+0xac>)
 80136a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80136aa:	ed90 7a00 	vldr	s14, [r0]
 80136ae:	ee07 2a90 	vmov	s15, r2
 80136b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136b6:	edcd 7a01 	vstr	s15, [sp, #4]
 80136ba:	ed9d 0a01 	vldr	s0, [sp, #4]
 80136be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80136c2:	e7df      	b.n	8013684 <rintf+0x60>
 80136c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80136c8:	d3dc      	bcc.n	8013684 <rintf+0x60>
 80136ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80136ce:	e7d9      	b.n	8013684 <rintf+0x60>
 80136d0:	08013ecc 	.word	0x08013ecc
 80136d4:	007fffff 	.word	0x007fffff

080136d8 <scalbnf>:
 80136d8:	b508      	push	{r3, lr}
 80136da:	ee10 2a10 	vmov	r2, s0
 80136de:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80136e2:	ed2d 8b02 	vpush	{d8}
 80136e6:	eef0 0a40 	vmov.f32	s1, s0
 80136ea:	d004      	beq.n	80136f6 <scalbnf+0x1e>
 80136ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80136f0:	d306      	bcc.n	8013700 <scalbnf+0x28>
 80136f2:	ee70 0a00 	vadd.f32	s1, s0, s0
 80136f6:	ecbd 8b02 	vpop	{d8}
 80136fa:	eeb0 0a60 	vmov.f32	s0, s1
 80136fe:	bd08      	pop	{r3, pc}
 8013700:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013704:	d21c      	bcs.n	8013740 <scalbnf+0x68>
 8013706:	4b1f      	ldr	r3, [pc, #124]	; (8013784 <scalbnf+0xac>)
 8013708:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013788 <scalbnf+0xb0>
 801370c:	4298      	cmp	r0, r3
 801370e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8013712:	db10      	blt.n	8013736 <scalbnf+0x5e>
 8013714:	ee10 2a90 	vmov	r2, s1
 8013718:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801371c:	3b19      	subs	r3, #25
 801371e:	4403      	add	r3, r0
 8013720:	2bfe      	cmp	r3, #254	; 0xfe
 8013722:	dd0f      	ble.n	8013744 <scalbnf+0x6c>
 8013724:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801378c <scalbnf+0xb4>
 8013728:	eeb0 0a48 	vmov.f32	s0, s16
 801372c:	f000 f834 	bl	8013798 <copysignf>
 8013730:	ee60 0a08 	vmul.f32	s1, s0, s16
 8013734:	e7df      	b.n	80136f6 <scalbnf+0x1e>
 8013736:	eddf 7a16 	vldr	s15, [pc, #88]	; 8013790 <scalbnf+0xb8>
 801373a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801373e:	e7da      	b.n	80136f6 <scalbnf+0x1e>
 8013740:	0ddb      	lsrs	r3, r3, #23
 8013742:	e7ec      	b.n	801371e <scalbnf+0x46>
 8013744:	2b00      	cmp	r3, #0
 8013746:	dd06      	ble.n	8013756 <scalbnf+0x7e>
 8013748:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801374c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8013750:	ee00 3a90 	vmov	s1, r3
 8013754:	e7cf      	b.n	80136f6 <scalbnf+0x1e>
 8013756:	f113 0f16 	cmn.w	r3, #22
 801375a:	da06      	bge.n	801376a <scalbnf+0x92>
 801375c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013760:	4298      	cmp	r0, r3
 8013762:	dcdf      	bgt.n	8013724 <scalbnf+0x4c>
 8013764:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8013790 <scalbnf+0xb8>
 8013768:	e7de      	b.n	8013728 <scalbnf+0x50>
 801376a:	3319      	adds	r3, #25
 801376c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8013770:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8013774:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013794 <scalbnf+0xbc>
 8013778:	ee07 3a10 	vmov	s14, r3
 801377c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8013780:	e7b9      	b.n	80136f6 <scalbnf+0x1e>
 8013782:	bf00      	nop
 8013784:	ffff3cb0 	.word	0xffff3cb0
 8013788:	4c000000 	.word	0x4c000000
 801378c:	7149f2ca 	.word	0x7149f2ca
 8013790:	0da24260 	.word	0x0da24260
 8013794:	33000000 	.word	0x33000000

08013798 <copysignf>:
 8013798:	ee10 3a10 	vmov	r3, s0
 801379c:	ee10 2a90 	vmov	r2, s1
 80137a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80137a8:	4313      	orrs	r3, r2
 80137aa:	ee00 3a10 	vmov	s0, r3
 80137ae:	4770      	bx	lr

080137b0 <_init>:
 80137b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137b2:	bf00      	nop
 80137b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137b6:	bc08      	pop	{r3}
 80137b8:	469e      	mov	lr, r3
 80137ba:	4770      	bx	lr

080137bc <_fini>:
 80137bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137be:	bf00      	nop
 80137c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137c2:	bc08      	pop	{r3}
 80137c4:	469e      	mov	lr, r3
 80137c6:	4770      	bx	lr
